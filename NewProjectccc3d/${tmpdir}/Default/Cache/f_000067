(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./define.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./define.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.define);
    global.pipelineState = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _define) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.GFXPipelineState = _exports.GFXInputState = _exports.GFXBlendState = _exports.GFXBlendTarget = _exports.GFXDepthStencilState = _exports.GFXRasterizerState = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  /**
   * @en GFX rasterizer state.
   * @zh GFX 光栅化状态。
   */
  var GFXRasterizerState = /*#__PURE__*/function () {
    function GFXRasterizerState() {
      _classCallCheck(this, GFXRasterizerState);

      this.isDiscard = false;
      this.polygonMode = _define.GFXPolygonMode.FILL;
      this.shadeModel = _define.GFXShadeModel.GOURAND;
      this.cullMode = _define.GFXCullMode.BACK;
      this.isFrontFaceCCW = true;
      this.depthBias = 0;
      this.depthBiasClamp = 0.0;
      this.depthBiasSlop = 0.0;
      this.isDepthClip = true;
      this.isMultisample = false;
      this.lineWidth = 1.0;
    }

    _createClass(GFXRasterizerState, [{
      key: "compare",
      value: function compare(state) {
        return this.isDiscard === state.isDiscard && this.polygonMode === state.polygonMode && this.shadeModel === state.shadeModel && this.cullMode === state.cullMode && this.isFrontFaceCCW === state.isFrontFaceCCW && this.depthBias === state.depthBias && this.depthBiasClamp === state.depthBiasClamp && this.depthBiasSlop === state.depthBiasSlop && this.isDepthClip === state.isDepthClip && this.lineWidth === state.lineWidth && this.isMultisample === state.isMultisample;
      }
    }]);

    return GFXRasterizerState;
  }();
  /**
   * @en GFX depth stencil state.
   * @zh GFX 深度模板状态。
   */


  _exports.GFXRasterizerState = GFXRasterizerState;

  var GFXDepthStencilState = /*#__PURE__*/function () {
    function GFXDepthStencilState() {
      _classCallCheck(this, GFXDepthStencilState);

      this.depthTest = true;
      this.depthWrite = true;
      this.depthFunc = _define.GFXComparisonFunc.LESS;
      this.stencilTestFront = false;
      this.stencilFuncFront = _define.GFXComparisonFunc.ALWAYS;
      this.stencilReadMaskFront = 0xffff;
      this.stencilWriteMaskFront = 0xffff;
      this.stencilFailOpFront = _define.GFXStencilOp.KEEP;
      this.stencilZFailOpFront = _define.GFXStencilOp.KEEP;
      this.stencilPassOpFront = _define.GFXStencilOp.KEEP;
      this.stencilRefFront = 1;
      this.stencilTestBack = false;
      this.stencilFuncBack = _define.GFXComparisonFunc.ALWAYS;
      this.stencilReadMaskBack = 0xffff;
      this.stencilWriteMaskBack = 0xffff;
      this.stencilFailOpBack = _define.GFXStencilOp.KEEP;
      this.stencilZFailOpBack = _define.GFXStencilOp.KEEP;
      this.stencilPassOpBack = _define.GFXStencilOp.KEEP;
      this.stencilRefBack = 1;
    }

    _createClass(GFXDepthStencilState, [{
      key: "compare",
      value: function compare(state) {
        return this.depthTest === state.depthTest && this.depthWrite === state.depthWrite && this.depthFunc === state.depthFunc && this.stencilTestFront === state.stencilTestFront && this.stencilFuncFront === state.stencilFuncFront && this.stencilReadMaskFront === state.stencilReadMaskFront && this.stencilWriteMaskFront === state.stencilWriteMaskFront && this.stencilFailOpFront === state.stencilFailOpFront && this.stencilZFailOpFront === state.stencilZFailOpFront && this.stencilPassOpFront === state.stencilPassOpFront && this.stencilRefFront === state.stencilRefFront && this.stencilTestBack === state.stencilTestBack && this.stencilFuncBack === state.stencilFuncBack && this.stencilReadMaskBack === state.stencilReadMaskBack && this.stencilWriteMaskBack === state.stencilWriteMaskBack && this.stencilFailOpBack === state.stencilFailOpBack && this.stencilZFailOpBack === state.stencilZFailOpBack && this.stencilPassOpBack === state.stencilPassOpBack && this.stencilRefBack === state.stencilRefBack;
      }
    }]);

    return GFXDepthStencilState;
  }();
  /**
   * @en GFX blend target.
   * @zh GFX 混合目标。
   */


  _exports.GFXDepthStencilState = GFXDepthStencilState;

  var GFXBlendTarget = /*#__PURE__*/function () {
    function GFXBlendTarget() {
      _classCallCheck(this, GFXBlendTarget);

      this.blend = false;
      this.blendSrc = _define.GFXBlendFactor.ONE;
      this.blendDst = _define.GFXBlendFactor.ZERO;
      this.blendEq = _define.GFXBlendOp.ADD;
      this.blendSrcAlpha = _define.GFXBlendFactor.ONE;
      this.blendDstAlpha = _define.GFXBlendFactor.ZERO;
      this.blendAlphaEq = _define.GFXBlendOp.ADD;
      this.blendColorMask = _define.GFXColorMask.ALL;
    }

    _createClass(GFXBlendTarget, [{
      key: "compare",
      value: function compare(target) {
        return this.blend === target.blend && this.blendSrc === target.blendSrc && this.blendDst === target.blendDst && this.blendEq === target.blendEq && this.blendSrcAlpha === target.blendSrcAlpha && this.blendDstAlpha === target.blendDstAlpha && this.blendAlphaEq === target.blendAlphaEq && this.blendColorMask === target.blendColorMask;
      }
    }]);

    return GFXBlendTarget;
  }();
  /**
   * @en GFX blend state.
   * @zh GFX混合状态。
   */


  _exports.GFXBlendTarget = GFXBlendTarget;

  var GFXBlendState = function GFXBlendState() {
    _classCallCheck(this, GFXBlendState);

    this.isA2C = false;
    this.isIndepend = false;
    this.blendColor = [0, 0, 0, 0];
    this.targets = [new GFXBlendTarget()];
  };
  /**
   * @en GFX input state.
   * @zh GFX 输入状态。
   */


  _exports.GFXBlendState = GFXBlendState;

  var GFXInputState = function GFXInputState() {
    _classCallCheck(this, GFXInputState);

    this.attributes = [];
  };

  _exports.GFXInputState = GFXInputState;

  /**
   * @en GFX pipeline state.
   * @zh GFX 管线状态。
   */
  var GFXPipelineState = /*#__PURE__*/function (_GFXObject) {
    _inherits(GFXPipelineState, _GFXObject);

    _createClass(GFXPipelineState, [{
      key: "shader",

      /**
       * @en Get current shader.
       * @zh GFX 着色器。
       */
      get: function get() {
        return this._shader;
      }
      /**
       * @en Get current primitve mode.
       * @zh GFX 图元模式。
       */

    }, {
      key: "primitive",
      get: function get() {
        return this._primitive;
      }
      /**
       * @en Get current rasterizer state.
       * @zh GFX 光栅化状态。
       */

    }, {
      key: "rasterizerState",
      get: function get() {
        return this._rs;
      }
      /**
       * @en Get current depth stencil state.
       * @zh GFX 深度模板状态。
       */

    }, {
      key: "depthStencilState",
      get: function get() {
        return this._dss;
      }
      /**
       * @en Get current blend state.
       * @zh GFX 混合状态。
       */

    }, {
      key: "blendState",
      get: function get() {
        return this._bs;
      }
      /**
       * @en Get current input state.
       * @zh GFX 输入状态。
       */

    }, {
      key: "inputState",
      get: function get() {
        return this._is;
      }
      /**
       * @en Get current dynamic states.
       * @zh GFX 动态状态数组。
       */

    }, {
      key: "dynamicStates",
      get: function get() {
        return this._dynamicStates;
      }
      /**
       * @en Get current pipeline layout.
       * @zh GFX 管线布局。
       */

    }, {
      key: "pipelineLayout",
      get: function get() {
        return this._layout;
      }
      /**
       * @en Get current render pass.
       * @zh GFX 渲染过程。
       */

    }, {
      key: "renderPass",
      get: function get() {
        return this._renderPass;
      }
      /**
       * @en Get current hash.
       * @zh 此管线状态的 hash。
       */

    }, {
      key: "hash",
      get: function get() {
        return this._hash;
      }
    }]);

    function GFXPipelineState(device) {
      var _this;

      _classCallCheck(this, GFXPipelineState);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(GFXPipelineState).call(this, _define.GFXObjectType.PIPELINE_STATE));
      _this._device = void 0;
      _this._shader = null;
      _this._primitive = _define.GFXPrimitiveMode.TRIANGLE_LIST;
      _this._is = null;
      _this._rs = null;
      _this._dss = null;
      _this._bs = null;
      _this._dynamicStates = [];
      _this._layout = null;
      _this._renderPass = null;
      _this._hash = 0;
      _this._device = device;
      return _this;
    }

    return GFXPipelineState;
  }(_define.GFXObject);

  _exports.GFXPipelineState = GFXPipelineState;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkY6L2plbmtpbnMvd29ya3NwYWNlL0NyZWF0b3JfM0QvZWRpdG9yLTNkL3Jlc291cmNlcy8zZC9lbmdpbmUvY29jb3MvY29yZS9nZngvcGlwZWxpbmUtc3RhdGUudHMiXSwibmFtZXMiOlsiR0ZYUmFzdGVyaXplclN0YXRlIiwiaXNEaXNjYXJkIiwicG9seWdvbk1vZGUiLCJHRlhQb2x5Z29uTW9kZSIsIkZJTEwiLCJzaGFkZU1vZGVsIiwiR0ZYU2hhZGVNb2RlbCIsIkdPVVJBTkQiLCJjdWxsTW9kZSIsIkdGWEN1bGxNb2RlIiwiQkFDSyIsImlzRnJvbnRGYWNlQ0NXIiwiZGVwdGhCaWFzIiwiZGVwdGhCaWFzQ2xhbXAiLCJkZXB0aEJpYXNTbG9wIiwiaXNEZXB0aENsaXAiLCJpc011bHRpc2FtcGxlIiwibGluZVdpZHRoIiwic3RhdGUiLCJHRlhEZXB0aFN0ZW5jaWxTdGF0ZSIsImRlcHRoVGVzdCIsImRlcHRoV3JpdGUiLCJkZXB0aEZ1bmMiLCJHRlhDb21wYXJpc29uRnVuYyIsIkxFU1MiLCJzdGVuY2lsVGVzdEZyb250Iiwic3RlbmNpbEZ1bmNGcm9udCIsIkFMV0FZUyIsInN0ZW5jaWxSZWFkTWFza0Zyb250Iiwic3RlbmNpbFdyaXRlTWFza0Zyb250Iiwic3RlbmNpbEZhaWxPcEZyb250IiwiR0ZYU3RlbmNpbE9wIiwiS0VFUCIsInN0ZW5jaWxaRmFpbE9wRnJvbnQiLCJzdGVuY2lsUGFzc09wRnJvbnQiLCJzdGVuY2lsUmVmRnJvbnQiLCJzdGVuY2lsVGVzdEJhY2siLCJzdGVuY2lsRnVuY0JhY2siLCJzdGVuY2lsUmVhZE1hc2tCYWNrIiwic3RlbmNpbFdyaXRlTWFza0JhY2siLCJzdGVuY2lsRmFpbE9wQmFjayIsInN0ZW5jaWxaRmFpbE9wQmFjayIsInN0ZW5jaWxQYXNzT3BCYWNrIiwic3RlbmNpbFJlZkJhY2siLCJHRlhCbGVuZFRhcmdldCIsImJsZW5kIiwiYmxlbmRTcmMiLCJHRlhCbGVuZEZhY3RvciIsIk9ORSIsImJsZW5kRHN0IiwiWkVSTyIsImJsZW5kRXEiLCJHRlhCbGVuZE9wIiwiQUREIiwiYmxlbmRTcmNBbHBoYSIsImJsZW5kRHN0QWxwaGEiLCJibGVuZEFscGhhRXEiLCJibGVuZENvbG9yTWFzayIsIkdGWENvbG9yTWFzayIsIkFMTCIsInRhcmdldCIsIkdGWEJsZW5kU3RhdGUiLCJpc0EyQyIsImlzSW5kZXBlbmQiLCJibGVuZENvbG9yIiwidGFyZ2V0cyIsIkdGWElucHV0U3RhdGUiLCJhdHRyaWJ1dGVzIiwiR0ZYUGlwZWxpbmVTdGF0ZSIsIl9zaGFkZXIiLCJfcHJpbWl0aXZlIiwiX3JzIiwiX2RzcyIsIl9icyIsIl9pcyIsIl9keW5hbWljU3RhdGVzIiwiX2xheW91dCIsIl9yZW5kZXJQYXNzIiwiX2hhc2giLCJkZXZpY2UiLCJHRlhPYmplY3RUeXBlIiwiUElQRUxJTkVfU1RBVEUiLCJfZGV2aWNlIiwiR0ZYUHJpbWl0aXZlTW9kZSIsIlRSSUFOR0xFX0xJU1QiLCJHRlhPYmplY3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0JBOzs7O01BSWFBLGtCOzs7O1dBQ0ZDLFMsR0FBcUIsSztXQUNyQkMsVyxHQUE4QkMsdUJBQWVDLEk7V0FDN0NDLFUsR0FBNEJDLHNCQUFjQyxPO1dBQzFDQyxRLEdBQXdCQyxvQkFBWUMsSTtXQUNwQ0MsYyxHQUEwQixJO1dBQzFCQyxTLEdBQW9CLEM7V0FDcEJDLGMsR0FBeUIsRztXQUN6QkMsYSxHQUF3QixHO1dBQ3hCQyxXLEdBQXVCLEk7V0FDdkJDLGEsR0FBeUIsSztXQUN6QkMsUyxHQUFvQixHOzs7Ozs4QkFFWEMsSyxFQUFvQztBQUNoRCxlQUFRLEtBQUtqQixTQUFMLEtBQW1CaUIsS0FBSyxDQUFDakIsU0FBMUIsSUFDRixLQUFLQyxXQUFMLEtBQXFCZ0IsS0FBSyxDQUFDaEIsV0FEekIsSUFFRixLQUFLRyxVQUFMLEtBQW9CYSxLQUFLLENBQUNiLFVBRnhCLElBR0YsS0FBS0csUUFBTCxLQUFrQlUsS0FBSyxDQUFDVixR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ZUFBTyxLQUFLQyxPQUFaO0FBQ0g7QUFFRDs7Ozs7OzswQkFJaUM7QUFDN0IsZUFBTyxLQUFLQyxXQUFaO0FBQ0g7QUFFRDs7Ozs7OzswQkFJb0I7QUFDaEIsZUFBTyxLQUFLQyxLQUFaO0FBQ0g7OztBQXdCRCw4QkFBYUMsTUFBYixFQUFnQztBQUFBOztBQUFBOztBQUM1Qiw0RkFBTUMsc0JBQWNDLGNBQXBCO0FBRDRCLFlBdEJ0QkMsT0FzQnNCO0FBQUEsWUFwQnRCYixPQW9Cc0IsR0FwQk0sSUFvQk47QUFBQSxZQWxCdEJDLFVBa0JzQixHQWxCU2EseUJBQWlCQyxhQWtCMUI7QUFBQSxZQWhCdEJWLEdBZ0JzQixHQWhCTSxJQWdCTjtBQUFBLFlBZHRCSCxHQWNzQixHQWRXLElBY1g7QUFBQSxZQVp0QkMsSUFZc0IsR0FaYyxJQVlkO0FBQUEsWUFWdEJDLEdBVXNCLEdBVk0sSUFVTjtBQUFBLFlBUnRCRSxjQVFzQixHQVJjLEVBUWQ7QUFBQSxZQU50QkMsT0FNc0IsR0FOYyxJQU1kO0FBQUEsWUFKdEJDLFdBSXNCLEdBSmMsSUFJZDtBQUFBLFlBRnRCQyxLQUVzQixHQUZOLENBRU07QUFFNUIsWUFBS0ksT0FBTCxHQUFlSCxNQUFmO0FBRjRCO0FBRy9COzs7SUEzRzBDTSxpQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAY2F0ZWdvcnkgZ2Z4XHJcbiAqL1xyXG5cclxuaW1wb3J0IHtcclxuICAgIEdGWEJsZW5kRmFjdG9yLFxyXG4gICAgR0ZYQmxlbmRPcCxcclxuICAgIEdGWENvbG9yTWFzayxcclxuICAgIEdGWENvbXBhcmlzb25GdW5jLFxyXG4gICAgR0ZYQ3VsbE1vZGUsXHJcbiAgICBHRlhEeW5hbWljU3RhdGUsXHJcbiAgICBHRlhPYmplY3QsXHJcbiAgICBHRlhPYmplY3RUeXBlLFxyXG4gICAgR0ZYUG9seWdvbk1vZGUsXHJcbiAgICBHRlhQcmltaXRpdmVNb2RlLFxyXG4gICAgR0ZYU2hhZGVNb2RlbCxcclxuICAgIEdGWFN0ZW5jaWxPcCxcclxufSBmcm9tICcuL2RlZmluZSc7XHJcbmltcG9ydCB7IEdGWERldmljZSB9IGZyb20gJy4vZGV2aWNlJztcclxuaW1wb3J0IHsgSUdGWEF0dHJpYnV0ZSB9IGZyb20gJy4vaW5wdXQtYXNzZW1ibGVyJztcclxuaW1wb3J0IHsgR0ZYUGlwZWxpbmVMYXlvdXQgfSBmcm9tICcuL3BpcGVsaW5lLWxheW91dCc7XHJcbmltcG9ydCB7IEdGWFJlbmRlclBhc3MgfSBmcm9tICcuL3JlbmRlci1wYXNzJztcclxuaW1wb3J0IHsgR0ZYU2hhZGVyIH0gZnJvbSAnLi9zaGFkZXInO1xyXG5cclxuLyoqXHJcbiAqIEBlbiBHRlggcmFzdGVyaXplciBzdGF0ZS5cclxuICogQHpoIEdGWCDlhYnmoIXljJbnirbmgIHjgIJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBHRlhSYXN0ZXJpemVyU3RhdGUge1xyXG4gICAgcHVibGljIGlzRGlzY2FyZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHVibGljIHBvbHlnb25Nb2RlOiBHRlhQb2x5Z29uTW9kZSA9IEdGWFBvbHlnb25Nb2RlLkZJTEw7XHJcbiAgICBwdWJsaWMgc2hhZGVNb2RlbDogR0ZYU2hhZGVNb2RlbCA9IEdGWFNoYWRlTW9kZWwuR09VUkFORDtcclxuICAgIHB1YmxpYyBjdWxsTW9kZTogR0ZYQ3VsbE1vZGUgPSBHRlhDdWxsTW9kZS5CQUNLO1xyXG4gICAgcHVibGljIGlzRnJvbnRGYWNlQ0NXOiBib29sZWFuID0gdHJ1ZTtcclxuICAgIHB1YmxpYyBkZXB0aEJpYXM6IG51bWJlciA9IDA7XHJcbiAgICBwdWJsaWMgZGVwdGhCaWFzQ2xhbXA6IG51bWJlciA9IDAuMDtcclxuICAgIHB1YmxpYyBkZXB0aEJpYXNTbG9wOiBudW1iZXIgPSAwLjA7XHJcbiAgICBwdWJsaWMgaXNEZXB0aENsaXA6IGJvb2xlYW4gPSB0cnVlO1xyXG4gICAgcHVibGljIGlzTXVsdGlzYW1wbGU6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHB1YmxpYyBsaW5lV2lkdGg6IG51bWJlciA9IDEuMDtcclxuXHJcbiAgICBwdWJsaWMgY29tcGFyZSAoc3RhdGU6IEdGWFJhc3Rlcml6ZXJTdGF0ZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5pc0Rpc2NhcmQgPT09IHN0YXRlLmlzRGlzY2FyZCkgJiZcclxuICAgICAgICAgICAgKHRoaXMucG9seWdvbk1vZGUgPT09IHN0YXRlLnBvbHlnb25Nb2RlKSAmJlxyXG4gICAgICAgICAgICAodGhpcy5zaGFkZU1vZGVsID09PSBzdGF0ZS5zaGFkZU1vZGVsKSAmJlxyXG4gICAgICAgICAgICAodGhpcy5jdWxsTW9kZSA9PT0gc3RhdGUuY3VsbE1vZGUpICYmXHJcbiAgICAgICAgICAgICh0aGlzLmlzRnJvbnRGYWNlQ0NXID09PSBzdGF0ZS5pc0Zyb250RmFjZUNDVykgJiZcclxuICAgICAgICAgICAgKHRoaXMuZGVwdGhCaWFzID09PSBzdGF0ZS5kZXB0aEJpYXMpICYmXHJcbiAgICAgICAgICAgICh0aGlzLmRlcHRoQmlhc0NsYW1wID09PSBzdGF0ZS5kZXB0aEJpYXNDbGFtcCkgJiZcclxuICAgICAgICAgICAgKHRoaXMuZGVwdGhCaWFzU2xvcCA9PT0gc3RhdGUuZGVwdGhCaWFzU2xvcCkgJiZcclxuICAgICAgICAgICAgKHRoaXMuaXNEZXB0aENsaXAgPT09IHN0YXRlLmlzRGVwdGhDbGlwKSAmJlxyXG4gICAgICAgICAgICAodGhpcy5saW5lV2lkdGggPT09IHN0YXRlLmxpbmVXaWR0aCkgJiZcclxuICAgICAgICAgICAgKHRoaXMuaXNNdWx0aXNhbXBsZSA9PT0gc3RhdGUuaXNNdWx0aXNhbXBsZSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZW4gR0ZYIGRlcHRoIHN0ZW5jaWwgc3RhdGUuXHJcbiAqIEB6aCBHRlgg5rex5bqm5qih5p2/54q25oCB44CCXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgR0ZYRGVwdGhTdGVuY2lsU3RhdGUge1xyXG4gICAgcHVibGljIGRlcHRoVGVzdDogYm9vbGVhbiA9IHRydWU7XHJcbiAgICBwdWJsaWMgZGVwdGhXcml0ZTogYm9vbGVhbiA9IHRydWU7XHJcbiAgICBwdWJsaWMgZGVwdGhGdW5jOiBHRlhDb21wYXJpc29uRnVuYyA9IEdGWENvbXBhcmlzb25GdW5jLkxFU1M7XHJcbiAgICBwdWJsaWMgc3RlbmNpbFRlc3RGcm9udDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHVibGljIHN0ZW5jaWxGdW5jRnJvbnQ6IEdGWENvbXBhcmlzb25GdW5jID0gR0ZYQ29tcGFyaXNvbkZ1bmMuQUxXQVlTO1xyXG4gICAgcHVibGljIHN0ZW5jaWxSZWFkTWFza0Zyb250OiBudW1iZXIgPSAweGZmZmY7XHJcbiAgICBwdWJsaWMgc3RlbmNpbFdyaXRlTWFza0Zyb250OiBudW1iZXIgPSAweGZmZmY7XHJcbiAgICBwdWJsaWMgc3RlbmNpbEZhaWxPcEZyb250OiBHRlhTdGVuY2lsT3AgPSBHRlhTdGVuY2lsT3AuS0VFUDtcclxuICAgIHB1YmxpYyBzdGVuY2lsWkZhaWxPcEZyb250OiBHRlhTdGVuY2lsT3AgPSBHRlhTdGVuY2lsT3AuS0VFUDtcclxuICAgIHB1YmxpYyBzdGVuY2lsUGFzc09wRnJvbnQ6IEdGWFN0ZW5jaWxPcCA9IEdGWFN0ZW5jaWxPcC5LRUVQO1xyXG4gICAgcHVibGljIHN0ZW5jaWxSZWZGcm9udDogbnVtYmVyID0gMTtcclxuICAgIHB1YmxpYyBzdGVuY2lsVGVzdEJhY2s6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHB1YmxpYyBzdGVuY2lsRnVuY0JhY2s6IEdGWENvbXBhcmlzb25GdW5jID0gR0ZYQ29tcGFyaXNvbkZ1bmMuQUxXQVlTO1xyXG4gICAgcHVibGljIHN0ZW5jaWxSZWFkTWFza0JhY2s6IG51bWJlciA9IDB4ZmZmZjtcclxuICAgIHB1YmxpYyBzdGVuY2lsV3JpdGVNYXNrQmFjazogbnVtYmVyID0gMHhmZmZmO1xyXG4gICAgcHVibGljIHN0ZW5jaWxGYWlsT3BCYWNrOiBHRlhTdGVuY2lsT3AgPSBHRlhTdGVuY2lsT3AuS0VFUDtcclxuICAgIHB1YmxpYyBzdGVuY2lsWkZhaWxPcEJhY2s6IEdGWFN0ZW5jaWxPcCA9IEdGWFN0ZW5jaWxPcC5LRUVQO1xyXG4gICAgcHVibGljIHN0ZW5jaWxQYXNzT3BCYWNrOiBHRlhTdGVuY2lsT3AgPSBHRlhTdGVuY2lsT3AuS0VFUDtcclxuICAgIHB1YmxpYyBzdGVuY2lsUmVmQmFjazogbnVtYmVyID0gMTtcclxuXHJcbiAgICBwdWJsaWMgY29tcGFyZSAoc3RhdGU6IEdGWERlcHRoU3RlbmNpbFN0YXRlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLmRlcHRoVGVzdCA9PT0gc3RhdGUuZGVwdGhUZXN0KSAmJlxyXG4gICAgICAgICAgICAodGhpcy5kZXB0aFdyaXRlID09PSBzdGF0ZS5kZXB0aFdyaXRlKSAmJlxyXG4gICAgICAgICAgICAodGhpcy5kZXB0aEZ1bmMgPT09IHN0YXRlLmRlcHRoRnVuYykgJiZcclxuICAgICAgICAgICAgKHRoaXMuc3RlbmNpbFRlc3RGcm9udCA9PT0gc3RhdGUuc3RlbmNpbFRlc3RGcm9udCkgJiZcclxuICAgICAgICAgICAgKHRoaXMuc3RlbmNpbEZ1bmNGcm9udCA9PT0gc3RhdGUuc3RlbmNpbEZ1bmNGcm9udCkgJiZcclxuICAgICAgICAgICAgKHRoaXMuc3RlbmNpbFJlYWRNYXNrRnJvbnQgPT09IHN0YXRlLnN0ZW5jaWxSZWFkTWFza0Zyb250KSAmJlxyXG4gICAgICAgICAgICAodGhpcy5zdGVuY2lsV3JpdGVNYXNrRnJvbnQgPT09IHN0YXRlLnN0ZW5jaWxXcml0ZU1hc2tGcm9udCkgJiZcclxuICAgICAgICAgICAgKHRoaXMuc3RlbmNpbEZhaWxPcEZyb250ID09PSBzdGF0ZS5zdGVuY2lsRmFpbE9wRnJvbnQpICYmXHJcbiAgICAgICAgICAgICh0aGlzLnN0ZW5jaWxaRmFpbE9wRnJvbnQgPT09IHN0YXRlLnN0ZW5jaWxaRmFpbE9wRnJvbnQpICYmXHJcbiAgICAgICAgICAgICh0aGlzLnN0ZW5jaWxQYXNzT3BGcm9udCA9PT0gc3RhdGUuc3RlbmNpbFBhc3NPcEZyb250KSAmJlxyXG4gICAgICAgICAgICAodGhpcy5zdGVuY2lsUmVmRnJvbnQgPT09IHN0YXRlLnN0ZW5jaWxSZWZGcm9udCkgJiZcclxuICAgICAgICAgICAgKHRoaXMuc3RlbmNpbFRlc3RCYWNrID09PSBzdGF0ZS5zdGVuY2lsVGVzdEJhY2spICYmXHJcbiAgICAgICAgICAgICh0aGlzLnN0ZW5jaWxGdW5jQmFjayA9PT0gc3RhdGUuc3RlbmNpbEZ1bmNCYWNrKSAmJlxyXG4gICAgICAgICAgICAodGhpcy5zdGVuY2lsUmVhZE1hc2tCYWNrID09PSBzdGF0ZS5zdGVuY2lsUmVhZE1hc2tCYWNrKSAmJlxyXG4gICAgICAgICAgICAodGhpcy5zdGVuY2lsV3JpdGVNYXNrQmFjayA9PT0gc3RhdGUuc3RlbmNpbFdyaXRlTWFza0JhY2spICYmXHJcbiAgICAgICAgICAgICh0aGlzLnN0ZW5jaWxGYWlsT3BCYWNrID09PSBzdGF0ZS5zdGVuY2lsRmFpbE9wQmFjaykgJiZcclxuICAgICAgICAgICAgKHRoaXMuc3RlbmNpbFpGYWlsT3BCYWNrID09PSBzdGF0ZS5zdGVuY2lsWkZhaWxPcEJhY2spICYmXHJcbiAgICAgICAgICAgICh0aGlzLnN0ZW5jaWxQYXNzT3BCYWNrID09PSBzdGF0ZS5zdGVuY2lsUGFzc09wQmFjaykgJiZcclxuICAgICAgICAgICAgKHRoaXMuc3RlbmNpbFJlZkJhY2sgPT09IHN0YXRlLnN0ZW5jaWxSZWZCYWNrKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEBlbiBHRlggYmxlbmQgdGFyZ2V0LlxyXG4gKiBAemggR0ZYIOa3t+WQiOebruagh+OAglxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEdGWEJsZW5kVGFyZ2V0IHtcclxuICAgIHB1YmxpYyBibGVuZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHVibGljIGJsZW5kU3JjOiBHRlhCbGVuZEZhY3RvciA9IEdGWEJsZW5kRmFjdG9yLk9ORTtcclxuICAgIHB1YmxpYyBibGVuZERzdDogR0ZYQmxlbmRGYWN0b3IgPSBHRlhCbGVuZEZhY3Rvci5aRVJPO1xyXG4gICAgcHVibGljIGJsZW5kRXE6IEdGWEJsZW5kT3AgPSBHRlhCbGVuZE9wLkFERDtcclxuICAgIHB1YmxpYyBibGVuZFNyY0FscGhhOiBHRlhCbGVuZEZhY3RvciA9IEdGWEJsZW5kRmFjdG9yLk9ORTtcclxuICAgIHB1YmxpYyBibGVuZERzdEFscGhhOiBHRlhCbGVuZEZhY3RvciA9IEdGWEJsZW5kRmFjdG9yLlpFUk87XHJcbiAgICBwdWJsaWMgYmxlbmRBbHBoYUVxOiBHRlhCbGVuZE9wID0gR0ZYQmxlbmRPcC5BREQ7XHJcbiAgICBwdWJsaWMgYmxlbmRDb2xvck1hc2s6IEdGWENvbG9yTWFzayA9IEdGWENvbG9yTWFzay5BTEw7XHJcblxyXG4gICAgcHVibGljIGNvbXBhcmUgKHRhcmdldDogR0ZYQmxlbmRUYXJnZXQpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuYmxlbmQgPT09IHRhcmdldC5ibGVuZCkgJiZcclxuICAgICAgICAgICAgKHRoaXMuYmxlbmRTcmMgPT09IHRhcmdldC5ibGVuZFNyYykgJiZcclxuICAgICAgICAgICAgKHRoaXMuYmxlbmREc3QgPT09IHRhcmdldC5ibGVuZERzdCkgJiZcclxuICAgICAgICAgICAgKHRoaXMuYmxlbmRFcSA9PT0gdGFyZ2V0LmJsZW5kRXEpICYmXHJcbiAgICAgICAgICAgICh0aGlzLmJsZW5kU3JjQWxwaGEgPT09IHRhcmdldC5ibGVuZFNyY0FscGhhKSAmJlxyXG4gICAgICAgICAgICAodGhpcy5ibGVuZERzdEFscGhhID09PSB0YXJnZXQuYmxlbmREc3RBbHBoYSkgJiZcclxuICAgICAgICAgICAgKHRoaXMuYmxlbmRBbHBoYUVxID09PSB0YXJnZXQuYmxlbmRBbHBoYUVxKSAmJlxyXG4gICAgICAgICAgICAodGhpcy5ibGVuZENvbG9yTWFzayA9PT0gdGFyZ2V0LmJsZW5kQ29sb3JNYXNrKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEBlbiBHRlggYmxlbmQgc3RhdGUuXHJcbiAqIEB6aCBHRljmt7flkIjnirbmgIHjgIJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBHRlhCbGVuZFN0YXRlIHtcclxuICAgIHB1YmxpYyBpc0EyQzogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHVibGljIGlzSW5kZXBlbmQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHB1YmxpYyBibGVuZENvbG9yOiBudW1iZXJbXSA9IFswLCAwLCAwLCAwXTtcclxuICAgIHB1YmxpYyB0YXJnZXRzOiBHRlhCbGVuZFRhcmdldFtdID0gW25ldyBHRlhCbGVuZFRhcmdldCgpXTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEBlbiBHRlggaW5wdXQgc3RhdGUuXHJcbiAqIEB6aCBHRlgg6L6T5YWl54q25oCB44CCXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgR0ZYSW5wdXRTdGF0ZSB7XHJcbiAgICBwdWJsaWMgYXR0cmlidXRlczogSUdGWEF0dHJpYnV0ZVtdID0gW107XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUdGWFBpcGVsaW5lU3RhdGVJbmZvIHtcclxuICAgIHByaW1pdGl2ZTogR0ZYUHJpbWl0aXZlTW9kZTtcclxuICAgIHNoYWRlcjogR0ZYU2hhZGVyO1xyXG4gICAgaW5wdXRTdGF0ZTogR0ZYSW5wdXRTdGF0ZTtcclxuICAgIHJhc3Rlcml6ZXJTdGF0ZTogR0ZYUmFzdGVyaXplclN0YXRlO1xyXG4gICAgZGVwdGhTdGVuY2lsU3RhdGU6IEdGWERlcHRoU3RlbmNpbFN0YXRlO1xyXG4gICAgYmxlbmRTdGF0ZTogR0ZYQmxlbmRTdGF0ZTtcclxuICAgIGR5bmFtaWNTdGF0ZXM/OiBHRlhEeW5hbWljU3RhdGVbXTtcclxuICAgIGxheW91dDogR0ZYUGlwZWxpbmVMYXlvdXQ7XHJcbiAgICByZW5kZXJQYXNzOiBHRlhSZW5kZXJQYXNzO1xyXG4gICAgaGFzaDogbnVtYmVyO1xyXG59XHJcblxyXG4vKipcclxuICogQGVuIEdGWCBwaXBlbGluZSBzdGF0ZS5cclxuICogQHpoIEdGWCDnrqHnur/nirbmgIHjgIJcclxuICovXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBHRlhQaXBlbGluZVN0YXRlIGV4dGVuZHMgR0ZYT2JqZWN0IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlbiBHZXQgY3VycmVudCBzaGFkZXIuXHJcbiAgICAgKiBAemggR0ZYIOedgOiJsuWZqOOAglxyXG4gICAgICovXHJcbiAgICBnZXQgc2hhZGVyICgpOiBHRlhTaGFkZXIge1xyXG4gICAgICAgIHJldHVybiAgdGhpcy5fc2hhZGVyIGFzIEdGWFNoYWRlcjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlbiBHZXQgY3VycmVudCBwcmltaXR2ZSBtb2RlLlxyXG4gICAgICogQHpoIEdGWCDlm77lhYPmqKHlvI/jgIJcclxuICAgICAqL1xyXG4gICAgZ2V0IHByaW1pdGl2ZSAoKTogR0ZYUHJpbWl0aXZlTW9kZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ByaW1pdGl2ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlbiBHZXQgY3VycmVudCByYXN0ZXJpemVyIHN0YXRlLlxyXG4gICAgICogQHpoIEdGWCDlhYnmoIXljJbnirbmgIHjgIJcclxuICAgICAqL1xyXG4gICAgZ2V0IHJhc3Rlcml6ZXJTdGF0ZSAoKTogR0ZYUmFzdGVyaXplclN0YXRlIHtcclxuICAgICAgICByZXR1cm4gIHRoaXMuX3JzIGFzIEdGWFJhc3Rlcml6ZXJTdGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlbiBHZXQgY3VycmVudCBkZXB0aCBzdGVuY2lsIHN0YXRlLlxyXG4gICAgICogQHpoIEdGWCDmt7HluqbmqKHmnb/nirbmgIHjgIJcclxuICAgICAqL1xyXG4gICAgZ2V0IGRlcHRoU3RlbmNpbFN0YXRlICgpOiBHRlhEZXB0aFN0ZW5jaWxTdGF0ZSB7XHJcbiAgICAgICAgcmV0dXJuICB0aGlzLl9kc3MgYXMgR0ZYRGVwdGhTdGVuY2lsU3RhdGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW4gR2V0IGN1cnJlbnQgYmxlbmQgc3RhdGUuXHJcbiAgICAgKiBAemggR0ZYIOa3t+WQiOeKtuaAgeOAglxyXG4gICAgICovXHJcbiAgICBnZXQgYmxlbmRTdGF0ZSAoKTogR0ZYQmxlbmRTdGF0ZSB7XHJcbiAgICAgICAgcmV0dXJuICB0aGlzLl9icyBhcyBHRlhCbGVuZFN0YXRlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGVuIEdldCBjdXJyZW50IGlucHV0IHN0YXRlLlxyXG4gICAgICogQHpoIEdGWCDovpPlhaXnirbmgIHjgIJcclxuICAgICAqL1xyXG4gICAgZ2V0IGlucHV0U3RhdGUgKCk6IEdGWElucHV0U3RhdGUge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pcyBhcyBHRlhJbnB1dFN0YXRlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGVuIEdldCBjdXJyZW50IGR5bmFtaWMgc3RhdGVzLlxyXG4gICAgICogQHpoIEdGWCDliqjmgIHnirbmgIHmlbDnu4TjgIJcclxuICAgICAqL1xyXG4gICAgZ2V0IGR5bmFtaWNTdGF0ZXMgKCk6IEdGWER5bmFtaWNTdGF0ZVtdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZHluYW1pY1N0YXRlcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlbiBHZXQgY3VycmVudCBwaXBlbGluZSBsYXlvdXQuXHJcbiAgICAgKiBAemggR0ZYIOeuoee6v+W4g+WxgOOAglxyXG4gICAgICovXHJcbiAgICBnZXQgcGlwZWxpbmVMYXlvdXQgKCk6IEdGWFBpcGVsaW5lTGF5b3V0IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbGF5b3V0IGFzIEdGWFBpcGVsaW5lTGF5b3V0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGVuIEdldCBjdXJyZW50IHJlbmRlciBwYXNzLlxyXG4gICAgICogQHpoIEdGWCDmuLLmn5Pov4fnqIvjgIJcclxuICAgICAqL1xyXG4gICAgZ2V0IHJlbmRlclBhc3MgKCk6IEdGWFJlbmRlclBhc3Mge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9yZW5kZXJQYXNzIGFzIEdGWFJlbmRlclBhc3M7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW4gR2V0IGN1cnJlbnQgaGFzaC5cclxuICAgICAqIEB6aCDmraTnrqHnur/nirbmgIHnmoQgaGFzaOOAglxyXG4gICAgICovXHJcbiAgICBnZXQgaGFzaCAoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faGFzaDtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgX2RldmljZTogR0ZYRGV2aWNlO1xyXG5cclxuICAgIHByb3RlY3RlZCBfc2hhZGVyOiBHRlhTaGFkZXIgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgICBwcm90ZWN0ZWQgX3ByaW1pdGl2ZTogR0ZYUHJpbWl0aXZlTW9kZSA9IEdGWFByaW1pdGl2ZU1vZGUuVFJJQU5HTEVfTElTVDtcclxuXHJcbiAgICBwcm90ZWN0ZWQgX2lzOiBHRlhJbnB1dFN0YXRlIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgcHJvdGVjdGVkIF9yczogR0ZYUmFzdGVyaXplclN0YXRlIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgcHJvdGVjdGVkIF9kc3M6IEdGWERlcHRoU3RlbmNpbFN0YXRlIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgcHJvdGVjdGVkIF9iczogR0ZYQmxlbmRTdGF0ZSB8IG51bGwgPSBudWxsO1xyXG5cclxuICAgIHByb3RlY3RlZCBfZHluYW1pY1N0YXRlczogR0ZYRHluYW1pY1N0YXRlW10gPSBbXTtcclxuXHJcbiAgICBwcm90ZWN0ZWQgX2xheW91dDogR0ZYUGlwZWxpbmVMYXlvdXQgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgICBwcm90ZWN0ZWQgX3JlbmRlclBhc3M6IEdGWFJlbmRlclBhc3MgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgICBwcm90ZWN0ZWQgX2hhc2g6IG51bWJlciA9IDA7XHJcblxyXG4gICAgY29uc3RydWN0b3IgKGRldmljZTogR0ZYRGV2aWNlKSB7XHJcbiAgICAgICAgc3VwZXIoR0ZYT2JqZWN0VHlwZS5QSVBFTElORV9TVEFURSk7XHJcbiAgICAgICAgdGhpcy5fZGV2aWNlID0gZGV2aWNlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhYnN0cmFjdCBpbml0aWFsaXplIChpbmZvOiBJR0ZYUGlwZWxpbmVTdGF0ZUluZm8pOiBib29sZWFuO1xyXG5cclxuICAgIHB1YmxpYyBhYnN0cmFjdCBkZXN0cm95ICgpOiB2b2lkO1xyXG59XHJcbiJdfQ==