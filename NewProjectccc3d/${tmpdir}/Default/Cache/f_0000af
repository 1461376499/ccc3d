(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../data/object.js", "../utils/array.js", "../utils/js.js", "../utils/misc.js", "../default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../data/object.js"), require("../utils/array.js"), require("../utils/js.js"), require("../utils/misc.js"), require("../default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.object, global.array, global.js, global.misc, global.defaultConstants);
    global.componentScheduler = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _object, _array2, _js, _misc, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.createInvokeImplJit = createInvokeImplJit;
  _exports.createInvokeImpl = createInvokeImpl;
  _exports.ComponentScheduler = _exports.invokeOnEnable = _exports.OneOffInvoker = _exports.LifeCycleInvoker = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var fastRemoveAt = _js.array.fastRemoveAt; // @ts-ignore

  var IsStartCalled = _object.CCObject.Flags.IsStartCalled; // @ts-ignore

  var IsOnEnableCalled = _object.CCObject.Flags.IsOnEnableCalled; // @ts-ignore

  var IsEditorOnEnableCalled = _object.CCObject.Flags.IsEditorOnEnableCalled;
  var callerFunctor = _defaultConstants.EDITOR && _misc.tryCatchFunctor_EDITOR;
  var callOnEnableInTryCatch = _defaultConstants.EDITOR && callerFunctor('onEnable');
  var callOnDisableInTryCatch = _defaultConstants.EDITOR && callerFunctor('onDisable');

  function sortedIndex(array, comp) {
    var order = comp.constructor._executionOrder;
    var id = comp._id;
    var l = 0;

    for (var h = array.length - 1, m = h >>> 1; l <= h; m = l + h >>> 1) {
      var test = array[m];
      var testOrder = test.constructor._executionOrder;

      if (testOrder > order) {
        h = m - 1;
      } else if (testOrder < order) {
        l = m + 1;
      } else {
        var testId = test._id;

        if (testId > id) {
          h = m - 1;
        } else if (testId < id) {
          l = m + 1;
        } else {
          return m;
        }
      }
    }

    return ~l;
  } // remove disabled and not invoked component from array


  function stableRemoveInactive(iterator, flagToClear) {
    var array = iterator.array;
    var next = iterator.i + 1;

    while (next < array.length) {
      var comp = array[next];

      if (comp._enabled && comp.node._activeInHierarchy) {
        ++next;
      } else {
        iterator.removeAt(next);

        if (flagToClear) {
          comp._objFlags &= ~flagToClear;
        }
      }
    }
  } // This class contains some queues used to invoke life-cycle methods by script execution order


  var LifeCycleInvoker = function LifeCycleInvoker(invokeFunc) {
    _classCallCheck(this, LifeCycleInvoker);

    this._zero = void 0;
    this._neg = void 0;
    this._pos = void 0;
    this._invoke = void 0;
    var Iterator = _array2.MutableForwardIterator; // components which priority === 0 (default)

    this._zero = new Iterator([]); // components which priority < 0

    this._neg = new Iterator([]); // components which priority > 0

    this._pos = new Iterator([]);

    if (_defaultConstants.TEST) {
      cc.assert(typeof invokeFunc === 'function', 'invokeFunc must be type function');
    }

    this._invoke = invokeFunc;
  };

  _exports.LifeCycleInvoker = LifeCycleInvoker;
  LifeCycleInvoker.stableRemoveInactive = stableRemoveInactive;

  function compareOrder(a, b) {
    return a.constructor._executionOrder - b.constructor._executionOrder;
  } // for onLoad: sort once all components registered, invoke once


  var OneOffInvoker = /*#__PURE__*/function (_LifeCycleInvoker) {
    _inherits(OneOffInvoker, _LifeCycleInvoker);

    function OneOffInvoker() {
      _classCallCheck(this, OneOffInvoker);

      return _possibleConstructorReturn(this, _getPrototypeOf(OneOffInvoker).apply(this, arguments));
    }

    _createClass(OneOffInvoker, [{
      key: "add",
      value: function add(comp) {
        var order = comp.constructor._executionOrder;
        (order === 0 ? this._zero : order < 0 ? this._neg : this._pos).array.push(comp);
      }
    }, {
      key: "remove",
      value: function remove(comp) {
        var order = comp.constructor._executionOrder;
        (order === 0 ? this._zero : order < 0 ? this._neg : this._pos).fastRemove(comp);
      }
    }, {
      key: "cancelInactive",
      value: function cancelInactive(flagToClear) {
        stableRemoveInactive(this._zero, flagToClear);
        stableRemoveInactive(this._neg, flagToClear);
        stableRemoveInactive(this._pos, flagToClear);
      }
    }, {
      key: "invoke",
      value: function invoke() {
        var compsNeg = this._neg;

        if (compsNeg.array.length > 0) {
          compsNeg.array.sort(compareOrder);

          this._invoke(compsNeg);

          compsNeg.array.length = 0;
        }

        this._invoke(this._zero);

        this._zero.array.length = 0;
        var compsPos = this._pos;

        if (compsPos.array.length > 0) {
          compsPos.array.sort(compareOrder);

          this._invoke(compsPos);

          compsPos.array.length = 0;
        }
      }
    }]);

    return OneOffInvoker;
  }(LifeCycleInvoker); // for update: sort every time new component registered, invoke many times


  _exports.OneOffInvoker = OneOffInvoker;

  var ReusableInvoker = /*#__PURE__*/function (_LifeCycleInvoker2) {
    _inherits(ReusableInvoker, _LifeCycleInvoker2);

    function ReusableInvoker() {
      _classCallCheck(this, ReusableInvoker);

      return _possibleConstructorReturn(this, _getPrototypeOf(ReusableInvoker).apply(this, arguments));
    }

    _createClass(ReusableInvoker, [{
      key: "add",
      value: function add(comp) {
        var order = comp.constructor._executionOrder;

        if (order === 0) {
          this._zero.array.push(comp);
        } else {
          var _array = order < 0 ? this._neg.array : this._pos.array;

          var i = sortedIndex(_array, comp);

          if (i < 0) {
            _array.splice(~i, 0, comp);
          } else if (_defaultConstants.DEV) {
            cc.error('component already added');
          }
        }
      }
    }, {
      key: "remove",
      value: function remove(comp) {
        var order = comp.constructor._executionOrder;

        if (order === 0) {
          this._zero.fastRemove(comp);
        } else {
          var iterator = order < 0 ? this._neg : this._pos;
          var i = sortedIndex(iterator.array, comp);

          if (i >= 0) {
            iterator.removeAt(i);
          }
        }
      }
    }, {
      key: "invoke",
      value: function invoke(dt) {
        if (this._neg.array.length > 0) {
          this._invoke(this._neg, dt);
        }

        this._invoke(this._zero, dt);

        if (this._pos.array.length > 0) {
          this._invoke(this._pos, dt);
        }
      }
    }]);

    return ReusableInvoker;
  }(LifeCycleInvoker);

  function enableInEditor(comp) {
    if (!(comp._objFlags & IsEditorOnEnableCalled)) {
      cc.engine.emit('component-enabled', comp.uuid);
      comp._objFlags |= IsEditorOnEnableCalled;
    }
  } // return function to simply call each component with try catch protection


  function createInvokeImplJit(code, useDt, ensureFlag) {
    // function (it) {
    //     let a = it.array;
    //     for (it.i = 0; it.i < a.length; ++it.i) {
    //         let c = a[it.i];
    //         // ...
    //     }
    // }
    var body = 'var a=it.array;' + 'for(it.i=0;it.i<a.length;++it.i){' + 'var c=a[it.i];' + code + '}';
    var fastPath = useDt ? Function('it', 'dt', body) : Function('it', body);
    var singleInvoke = Function('c', 'dt', code);
    return createInvokeImpl(singleInvoke, fastPath, ensureFlag);
  }

  function createInvokeImpl(singleInvoke, fastPath, ensureFlag) {
    return function (iterator, dt) {
      try {
        fastPath(iterator, dt);
      } catch (e) {
        // slow path
        cc._throw(e);

        var array = iterator.array;

        if (ensureFlag) {
          array[iterator.i]._objFlags |= ensureFlag;
        }

        ++iterator.i; // invoke next callback

        for (; iterator.i < array.length; ++iterator.i) {
          try {
            singleInvoke(array[iterator.i], dt);
          } catch (e) {
            cc._throw(e);

            if (ensureFlag) {
              array[iterator.i]._objFlags |= ensureFlag;
            }
          }
        }
      }
    };
  }

  var invokeStart = _defaultConstants.SUPPORT_JIT ? createInvokeImplJit('c.start();c._objFlags|=' + IsStartCalled, false, IsStartCalled) : createInvokeImpl(function (c) {
    c.start();
    c._objFlags |= IsStartCalled;
  }, function (iterator) {
    var array = iterator.array;

    for (iterator.i = 0; iterator.i < array.length; ++iterator.i) {
      var comp = array[iterator.i];
      comp.start();
      comp._objFlags |= IsStartCalled;
    }
  }, IsStartCalled);
  var invokeUpdate = _defaultConstants.SUPPORT_JIT ? createInvokeImplJit('c.update(dt)', true) : createInvokeImpl(function (c, dt) {
    c.update(dt);
  }, function (iterator, dt) {
    var array = iterator.array;

    for (iterator.i = 0; iterator.i < array.length; ++iterator.i) {
      array[iterator.i].update(dt);
    }
  });
  var invokeLateUpdate = _defaultConstants.SUPPORT_JIT ? createInvokeImplJit('c.lateUpdate(dt)', true) : createInvokeImpl(function (c, dt) {
    c.lateUpdate(dt);
  }, function (iterator, dt) {
    var array = iterator.array;

    for (iterator.i = 0; iterator.i < array.length; ++iterator.i) {
      array[iterator.i].lateUpdate(dt);
    }
  });
  var invokeOnEnable = _defaultConstants.EDITOR ? function (iterator) {
    var compScheduler = cc.director._compScheduler;
    var array = iterator.array;

    for (iterator.i = 0; iterator.i < array.length; ++iterator.i) {
      var comp = array[iterator.i];

      if (comp._enabled) {
        callOnEnableInTryCatch(comp);
        var deactivatedDuringOnEnable = !comp.node._activeInHierarchy;

        if (!deactivatedDuringOnEnable) {
          compScheduler._onEnabled(comp);
        }
      }
    }
  } : function (iterator) {
    var compScheduler = cc.director._compScheduler;
    var array = iterator.array;

    for (iterator.i = 0; iterator.i < array.length; ++iterator.i) {
      var comp = array[iterator.i];

      if (comp._enabled) {
        comp.onEnable();
        var deactivatedDuringOnEnable = !comp.node._activeInHierarchy;

        if (!deactivatedDuringOnEnable) {
          compScheduler._onEnabled(comp);
        }
      }
    }
  };
  /**
   * @en The Manager for Component's life-cycle methods.
   * It collaborates with [[NodeActivator]] to schedule and invoke life cycle methods for components
   * @zh 组件生命周期函数的调度器。
   * 它和 [[NodeActivator]] 一起调度并执行组件的生命周期函数。
   */

  _exports.invokeOnEnable = invokeOnEnable;

  var ComponentScheduler = /*#__PURE__*/function () {
    /**
     * @en The invoker of `start` callback
     * @zh `start` 回调的调度器
     */

    /**
     * @en The invoker of `update` callback
     * @zh `update` 回调的调度器
     */

    /**
     * @en The invoker of `lateUpdate` callback
     * @zh `lateUpdate` 回调的调度器
     */
    // components deferred to schedule
    function ComponentScheduler() {
      _classCallCheck(this, ComponentScheduler);

      this._deferredComps = [];
      this.unscheduleAll();
    }
    /**
     * @en Cancel all future callbacks, including `start`, `update` and `lateUpdate`
     * @zh 取消所有未来的函数调度，包括 `start`，`update` 和 `lateUpdate`
     */


    _createClass(ComponentScheduler, [{
      key: "unscheduleAll",
      value: function unscheduleAll() {
        // invokers
        this.startInvoker = new OneOffInvoker(invokeStart);
        this.updateInvoker = new ReusableInvoker(invokeUpdate);
        this.lateUpdateInvoker = new ReusableInvoker(invokeLateUpdate); // during a loop

        this._updating = false;
      }
    }, {
      key: "_onEnabled",
      value: function _onEnabled(comp) {
        cc.director.getScheduler().resumeTarget(comp);
        comp._objFlags |= IsOnEnableCalled; // schedule

        if (this._updating) {
          this._deferredComps.push(comp);
        } else {
          this._scheduleImmediate(comp);
        }
      }
    }, {
      key: "_onDisabled",
      value: function _onDisabled(comp) {
        cc.director.getScheduler().pauseTarget(comp);
        comp._objFlags &= ~IsOnEnableCalled; // cancel schedule task

        var index = this._deferredComps.indexOf(comp);

        if (index >= 0) {
          fastRemoveAt(this._deferredComps, index);
          return;
        } // unschedule


        if (comp.start && !(comp._objFlags & IsStartCalled)) {
          this.startInvoker.remove(comp);
        }

        if (comp.update) {
          this.updateInvoker.remove(comp);
        }

        if (comp.lateUpdate) {
          this.lateUpdateInvoker.remove(comp);
        }
      }
      /**
       * @en Enable a component
       * @zh 启用一个组件
       * @param comp The component to be enabled
       * @param invoker The invoker which is responsible to schedule the `onEnable` call
       */

    }, {
      key: "enableComp",
      value: function enableComp(comp, invoker) {
        if (!(comp._objFlags & IsOnEnableCalled)) {
          if (comp.onEnable) {
            if (invoker) {
              invoker.add(comp);
              return;
            } else {
              comp.onEnable();
              var deactivatedDuringOnEnable = !comp.node._activeInHierarchy;

              if (deactivatedDuringOnEnable) {
                return;
              }
            }
          }

          this._onEnabled(comp);
        }
      }
      /**
       * @en Disable a component
       * @zh 禁用一个组件
       * @param comp The component to be disabled
       */

    }, {
      key: "disableComp",
      value: function disableComp(comp) {
        if (comp._objFlags & IsOnEnableCalled) {
          if (comp.onDisable) {
            comp.onDisable();
          }

          this._onDisabled(comp);
        }
      }
      /**
       * @en Process start phase for registered components
       * @zh 为当前注册的组件执行 start 阶段任务
       */

    }, {
      key: "startPhase",
      value: function startPhase() {
        // Start of this frame
        this._updating = true; // call start

        this.startInvoker.invoke(); // Start components of new activated nodes during start

        this._startForNewComps(); // if (PREVIEW) {
        //     try {
        //         this.startInvoker.invoke();
        //     }
        //     catch (e) {
        //         // prevent start from getting into infinite loop
        //         this.startInvoker._neg.array.length = 0;
        //         this.startInvoker._zero.array.length = 0;
        //         this.startInvoker._pos.array.length = 0;
        //         throw e;
        //     }
        // }
        // else {
        //     this.startInvoker.invoke();
        // }

      }
      /**
       * @en Process update phase for registered components
       * @zh 为当前注册的组件执行 update 阶段任务
       * @param dt 距离上一帧的时间
       */

    }, {
      key: "updatePhase",
      value: function updatePhase(dt) {
        this.updateInvoker.invoke(dt);
      }
      /**
       * @en Process late update phase for registered components
       * @zh 为当前注册的组件执行 late update 阶段任务
       * @param dt 距离上一帧的时间
       */

    }, {
      key: "lateUpdatePhase",
      value: function lateUpdatePhase(dt) {
        this.lateUpdateInvoker.invoke(dt); // End of this frame

        this._updating = false; // Start components of new activated nodes during update and lateUpdate
        // They will be running in the next frame

        this._startForNewComps();
      } // Call new registered start schedule immediately since last time start phase calling in this frame
      // See cocos-creator/2d-tasks/issues/256

    }, {
      key: "_startForNewComps",
      value: function _startForNewComps() {
        if (this._deferredComps.length > 0) {
          this._deferredSchedule();

          this.startInvoker.invoke();
        }
      }
    }, {
      key: "_scheduleImmediate",
      value: function _scheduleImmediate(comp) {
        if (typeof comp.start === 'function' && !(comp._objFlags & IsStartCalled)) {
          this.startInvoker.add(comp);
        }

        if (typeof comp.update === 'function') {
          this.updateInvoker.add(comp);
        }

        if (typeof comp.lateUpdate === 'function') {
          this.lateUpdateInvoker.add(comp);
        }
      }
    }, {
      key: "_deferredSchedule",
      value: function _deferredSchedule() {
        var comps = this._deferredComps;

        for (var i = 0, len = comps.length; i < len; i++) {
          this._scheduleImmediate(comps[i]);
        }

        comps.length = 0;
      }
    }]);

    return ComponentScheduler;
  }();

  _exports.ComponentScheduler = ComponentScheduler;

  if (_defaultConstants.EDITOR) {
    ComponentScheduler.prototype.enableComp = function (comp, invoker) {
      if (cc.engine.isPlaying || comp.constructor._executeInEditMode) {
        if (!(comp._objFlags & IsOnEnableCalled)) {
          if (comp.onEnable) {
            if (invoker) {
              invoker.add(comp);
              enableInEditor(comp);
              return;
            } else {
              callOnEnableInTryCatch(comp);
              var deactivatedDuringOnEnable = !comp.node._activeInHierarchy;

              if (deactivatedDuringOnEnable) {
                return;
              }
            }
          }

          this._onEnabled(comp);
        }
      }

      enableInEditor(comp);
    };

    ComponentScheduler.prototype.disableComp = function (comp) {
      if (cc.engine.isPlaying || comp.constructor._executeInEditMode) {
        if (comp._objFlags & IsOnEnableCalled) {
          if (comp.onDisable) {
            callOnDisableInTryCatch(comp);
          }

          this._onDisabled(comp);
        }
      }

      if (comp._objFlags & IsEditorOnEnableCalled) {
        cc.engine.emit('component-disabled', comp.uuid);
        comp._objFlags &= ~IsEditorOnEnableCalled;
      }
    };
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,