(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./action.js", "../../core/index.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./action.js"), require("../../core/index.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.action, global.index);
    global.actionInstant = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _action, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.show = show;
  _exports.hide = hide;
  _exports.toggleVisibility = toggleVisibility;
  _exports.removeSelf = removeSelf;
  _exports.callFunc = callFunc;
  _exports.CallFunc = _exports.RemoveSelf = _exports.ToggleVisibility = _exports.Hide = _exports.Show = _exports.ActionInstant = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  /**
   * !#en Instant actions are immediate actions. They don't have a duration like the ActionInterval actions.
   * !#zh 即时动作，这种动作立即就会执行，继承自 FiniteTimeAction。
   * @class ActionInstant
   * @extends FiniteTimeAction
   */
  var ActionInstant = /*#__PURE__*/function (_FiniteTimeAction) {
    _inherits(ActionInstant, _FiniteTimeAction);

    function ActionInstant() {
      _classCallCheck(this, ActionInstant);

      return _possibleConstructorReturn(this, _getPrototypeOf(ActionInstant).apply(this, arguments));
    }

    _createClass(ActionInstant, [{
      key: "isDone",
      value: function isDone() {
        return true;
      }
    }, {
      key: "step",
      value: function step(dt) {
        this.update(1);
      }
    }, {
      key: "update",
      value: function update(dt) {} //nothing

      /**
       * returns a reversed action. <br />
       * For example: <br />
       * - The action is x coordinates of 0 move to 100. <br />
       * - The reversed action will be x of 100 move to 0.
       * @returns {Action}
       */

    }, {
      key: "reverse",
      value: function reverse() {
        return this.clone();
      }
    }, {
      key: "clone",
      value: function clone() {
        return new ActionInstant();
      }
    }]);

    return ActionInstant;
  }(_action.FiniteTimeAction);
  /*
   * Show the node.
   * @class Show
   * @extends ActionInstant
   */


  _exports.ActionInstant = ActionInstant;

  var Show = /*#__PURE__*/function (_ActionInstant) {
    _inherits(Show, _ActionInstant);

    function Show() {
      _classCallCheck(this, Show);

      return _possibleConstructorReturn(this, _getPrototypeOf(Show).apply(this, arguments));
    }

    _createClass(Show, [{
      key: "update",
      value: function update(dt) {
        var _renderComps = this.target.getComponentsInChildren(_index.RenderableComponent);

        for (var i = 0; i < _renderComps.length; ++i) {
          var render = _renderComps[i];
          render.enabled = true;
        }
      }
    }, {
      key: "reverse",
      value: function reverse() {
        return new Hide();
      }
    }, {
      key: "clone",
      value: function clone() {
        return new Show();
      }
    }]);

    return Show;
  }(ActionInstant);
  /**
   * !#en Show the Node.
   * !#zh 立即显示。
   * @method show
   * @return {ActionInstant}
   * @example
   * // example
   * var showAction = show();
   */


  _exports.Show = Show;

  function show() {
    return new Show();
  }

  ;
  /*
   * Hide the node.
   * @class Hide
   * @extends ActionInstant
   */

  var Hide = /*#__PURE__*/function (_ActionInstant2) {
    _inherits(Hide, _ActionInstant2);

    function Hide() {
      _classCallCheck(this, Hide);

      return _possibleConstructorReturn(this, _getPrototypeOf(Hide).apply(this, arguments));
    }

    _createClass(Hide, [{
      key: "update",
      value: function update(dt) {
        var _renderComps = this.target.getComponentsInChildren(_index.RenderableComponent);

        for (var i = 0; i < _renderComps.length; ++i) {
          var render = _renderComps[i];
          render.enabled = false;
        }
      }
    }, {
      key: "reverse",
      value: function reverse() {
        return new Show();
      }
    }, {
      key: "clone",
      value: function clone() {
        return new Hide();
      }
    }]);

    return Hide;
  }(ActionInstant);
  /**
   * !#en Hide the node.
   * !#zh 立即隐藏。
   * @method hide
   * @return {ActionInstant}
   * @example
   * // example
   * var hideAction = hide();
   */


  _exports.Hide = Hide;

  function hide() {
    return new Hide();
  }

  ;
  /*
   * Toggles the visibility of a node.
   * @class ToggleVisibility
   * @extends ActionInstant
   */

  var ToggleVisibility = /*#__PURE__*/function (_ActionInstant3) {
    _inherits(ToggleVisibility, _ActionInstant3);

    function ToggleVisibility() {
      _classCallCheck(this, ToggleVisibility);

      return _possibleConstructorReturn(this, _getPrototypeOf(ToggleVisibility).apply(this, arguments));
    }

    _createClass(ToggleVisibility, [{
      key: "update",
      value: function update(dt) {
        var _renderComps = this.target.getComponentsInChildren(_index.RenderableComponent);

        for (var i = 0; i < _renderComps.length; ++i) {
          var render = _renderComps[i];
          render.enabled = !render.enabled;
        }
      }
    }, {
      key: "reverse",
      value: function reverse() {
        return new ToggleVisibility();
      }
    }, {
      key: "clone",
      value: function clone() {
        return new ToggleVisibility();
      }
    }]);

    return ToggleVisibility;
  }(ActionInstant);
  /**
   * !#en Toggles the visibility of a node.
   * !#zh 显隐状态切换。
   * @method toggleVisibility
   * @return {ActionInstant}
   * @example
   * // example
   * var toggleVisibilityAction = toggleVisibility();
   */


  _exports.ToggleVisibility = ToggleVisibility;

  function toggleVisibility() {
    return new ToggleVisibility();
  }

  ;
  /*
   * Delete self in the next frame.
   * @class RemoveSelf
   * @extends ActionInstant
   * @param {Boolean} [isNeedCleanUp=true]
   *
   * @example
   * // example
   * var removeSelfAction = new RemoveSelf(false);
   */

  var RemoveSelf = /*#__PURE__*/function (_ActionInstant4) {
    _inherits(RemoveSelf, _ActionInstant4);

    function RemoveSelf(isNeedCleanUp) {
      var _this;

      _classCallCheck(this, RemoveSelf);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(RemoveSelf).call(this));
      _this._isNeedCleanUp = true;
      isNeedCleanUp !== undefined && _this.init(isNeedCleanUp);
      return _this;
    }

    _createClass(RemoveSelf, [{
      key: "update",
      value: function update(dt) {
        this.target.removeFromParent();

        if (this._isNeedCleanUp) {
          this.target.destroy();
        }
      }
    }, {
      key: "init",
      value: function init(isNeedCleanUp) {
        this._isNeedCleanUp = isNeedCleanUp;
        return true;
      }
    }, {
      key: "reverse",
      value: function reverse() {
        return new RemoveSelf(this._isNeedCleanUp);
      }
    }, {
      key: "clone",
      value: function clone() {
        return new RemoveSelf(this._isNeedCleanUp);
      }
    }]);

    return RemoveSelf;
  }(ActionInstant);
  /**
   * !#en Create a RemoveSelf object with a flag indicate whether the target should be cleaned up while removing.
   * !#zh 从父节点移除自身。
   * @method removeSelf
   * @param {Boolean} [isNeedCleanUp = true]
   * @return {ActionInstant}
   *
   * @example
   * // example
   * var removeSelfAction = removeSelf();
   */


  _exports.RemoveSelf = RemoveSelf;

  function removeSelf(isNeedCleanUp) {
    return new RemoveSelf(isNeedCleanUp);
  }

  ;
  /*
   * Calls a 'callback'.
   * @class CallFunc
   * @extends ActionInstant
   * @param {function} selector
   * @param {object} [selectorTarget=null]
   * @param {*} [data=null] data for function, it accepts all data types.
   * @example
   * // example
   * // CallFunc without data
   * var finish = new CallFunc(this.removeSprite, this);
   *
   * // CallFunc with data
   * var finish = new CallFunc(this.removeFromParentAndCleanup, this,  true);
   */

  var CallFunc = /*#__PURE__*/function (_ActionInstant5) {
    _inherits(CallFunc, _ActionInstant5);

    /*
     * Constructor function, override it to extend the construction behavior, remember to call "this._super()" in the extended "ctor" function. <br />
    * Creates a CallFunc action with the callback.
    * @param {function} selector
    * @param {object} [selectorTarget=null]
    * @param {*} [data=null] data for function, it accepts all data types.
    */
    function CallFunc(selector, selectorTarget, data) {
      var _this2;

      _classCallCheck(this, CallFunc);

      _this2 = _possibleConstructorReturn(this, _getPrototypeOf(CallFunc).call(this));
      _this2._selectorTarget = null;
      _this2._function = null;
      _this2._data = null;

      _this2.initWithFunction(selector, selectorTarget, data);

      return _this2;
    }
    /*
     * Initializes the action with a function or function and its target
     * @param {function} selector
     * @param {object|Null} selectorTarget
     * @param {*|Null} [data] data for function, it accepts all data types.
     * @return {Boolean}
     */


    _createClass(CallFunc, [{
      key: "initWithFunction",
      value: function initWithFunction(selector, selectorTarget, data) {
        if (selector) {
          this._function = selector;
        }

        if (selectorTarget) {
          this._selectorTarget = selectorTarget;
        }

        if (data !== undefined) {
          this._data = data;
        }

        return true;
      }
      /*
       * execute the function.
       */

    }, {
      key: "execute",
      value: function execute() {
        if (this._function) {
          this._function.call(this._selectorTarget, this.target, this._data);
        }
      }
    }, {
      key: "update",
      value: function update(dt) {
        this.execute();
      }
      /*
       * Get selectorTarget.
       * @return {object}
       */

    }, {
      key: "getTargetCallback",
      value: function getTargetCallback() {
        return this._selectorTarget;
      }
      /*
       * Set selectorTarget.
       * @param {object} sel
       */

    }, {
      key: "setTargetCallback",
      value: function setTargetCallback(sel) {
        if (sel !== this._selectorTarget) {
          if (this._selectorTarget) this._selectorTarget = null;
          this._selectorTarget = sel;
        }
      }
    }, {
      key: "clone",
      value: function clone() {
        var action = new CallFunc();
        action.initWithFunction(this._function, this._selectorTarget, this._data);
        return action;
      }
    }]);

    return CallFunc;
  }(ActionInstant);
  /**
   * !#en Creates the action with the callback.
   * !#zh 执行回调函数。
   * @method callFunc
   * @param {function} selector
   * @param {object} [selectorTarget=null]
   * @param {*} [data=null] - data for function, it accepts all data types.
   * @return {ActionInstant}
   * @example
   * // example
   * // CallFunc without data
   * var finish = callFunc(this.removeSprite, this);
   *
   * // CallFunc with data
   * var finish = callFunc(this.removeFromParentAndCleanup, this._grossini,  true);
   */


  _exports.CallFunc = CallFunc;

  function callFunc(selector, selectorTarget, data) {
    return new CallFunc(selector, selectorTarget, data);
  }

  ;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkY6L2plbmtpbnMvd29ya3NwYWNlL0NyZWF0b3JfM0QvZWRpdG9yLTNkL3Jlc291cmNlcy8zZC9lbmdpbmUvY29jb3MvdHdlZW4vYWN0aW9ucy9hY3Rpb24taW5zdGFudC50cyJdLCJuYW1lcyI6WyJBY3Rpb25JbnN0YW50IiwiZHQiLCJ1cGRhdGUiLCJjbG9uZSIsIkZpbml0ZVRpbWVBY3Rpb24iLCJTaG93IiwiX3JlbmRlckNvbXBzIiwidGFyZ2V0IiwiZ2V0Q29tcG9uZW50c0luQ2hpbGRyZW4iLCJSZW5kZXJhYmxlQ29tcG9uZW50IiwiaSIsImxlbmd0aCIsInJlbmRlciIsImVuYWJsZWQiLCJIaWRlIiwic2hvdyIsImhpZGUiLCJUb2dnbGVWaXNpYmlsaXR5IiwidG9nZ2xlVmlzaWJpbGl0eSIsIlJlbW92ZVNlbGYiLCJpc05lZWRDbGVhblVwIiwiX2lzTmVlZENsZWFuVXAiLCJ1bmRlZmluZWQiLCJpbml0IiwicmVtb3ZlRnJvbVBhcmVudCIsImRlc3Ryb3kiLCJyZW1vdmVTZWxmIiwiQ2FsbEZ1bmMiLCJzZWxlY3RvciIsInNlbGVjdG9yVGFyZ2V0IiwiZGF0YSIsIl9zZWxlY3RvclRhcmdldCIsIl9mdW5jdGlvbiIsIl9kYXRhIiwiaW5pdFdpdGhGdW5jdGlvbiIsImNhbGwiLCJleGVjdXRlIiwic2VsIiwiYWN0aW9uIiwiY2FsbEZ1bmMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQ0E7Ozs7OztNQU1hQSxhOzs7Ozs7Ozs7OzsrQkFFQztBQUNOLGVBQU8sSUFBUDtBQUNIOzs7MkJBRUtDLEUsRUFBUztBQUNYLGFBQUtDLE1BQUwsQ0FBWSxDQUFaO0FBQ0g7Ozs2QkFFT0QsRSxFQUFZLENBRW5CLEMsQ0FERzs7QUFHSjs7Ozs7Ozs7OztnQ0FPbUI7QUFDZixlQUFPLEtBQUtFLEtBQUwsRUFBUDtBQUNIOzs7OEJBRVE7QUFDTCxlQUFPLElBQUlILGFBQUosRUFBUDtBQUNIOzs7O0lB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QUNIO0FBRUQ7Ozs7Ozs7MENBSXFCO0FBQ2pCLGVBQU8sS0FBS0wsZUFBWjtBQUNIO0FBRUQ7Ozs7Ozs7d0NBSW1CTSxHLEVBQVU7QUFDekIsWUFBSUEsR0FBRyxLQUFLLEtBQUtOLGVBQWpCLEVBQWtDO0FBQzlCLGNBQUksS0FBS0EsZUFBVCxFQUNJLEtBQUtBLGVBQUwsR0FBdUIsSUFBdkI7QUFDSixlQUFLQSxlQUFMLEdBQXVCTSxHQUF2QjtBQUNIO0FBQ0o7Ozs4QkFFUTtBQUNMLFlBQUlDLE1BQU0sR0FBRyxJQUFJWCxRQUFKLEVBQWI7QUFDQVcsUUFBQUEsTUFBTSxDQUFDSixnQkFBUCxDQUF3QixLQUFLRixTQUE3QixFQUF3QyxLQUFLRCxlQUE3QyxFQUE4RCxLQUFLRSxLQUFuRTtBQUNBLGVBQU9LLE1BQVA7QUFDSDs7OztJQTNFeUJ0QyxhO0FBOEU5Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnQk8sV0FBU3VDLFFBQVQsQ0FBbUJYLFFBQW5CLEVBQXVDQyxjQUF2QyxFQUE2REMsSUFBN0QsRUFBd0Y7QUFDM0YsV0FBTyxJQUFJSCxRQUFKLENBQWFDLFFBQWIsRUFBdUJDLGNBQXZCLEVBQXVDQyxJQUF2QyxDQUFQO0FBQ0g7O0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gQ29weXJpZ2h0IChjKSAyMDA4LTIwMTAgUmljYXJkbyBRdWVzYWRhXHJcbiBDb3B5cmlnaHQgKGMpIDIwMTEtMjAxMiBjb2NvczJkLXgub3JnXHJcbiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAxNiBDaHVrb25nIFRlY2hub2xvZ2llcyBJbmMuXHJcbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cclxuXHJcbiBodHRwOi8vd3d3LmNvY29zMmQteC5vcmdcclxuXHJcbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XHJcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXHJcbiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXHJcbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXHJcbiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcclxuIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XHJcblxyXG4gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cclxuIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxyXG5cclxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxyXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXHJcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXHJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxyXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxyXG4gVEhFIFNPRlRXQVJFLlxyXG4qL1xyXG5cclxuLyoqXHJcbiAqIEBoaWRkZW5cclxuICovXHJcblxyXG5pbXBvcnQgeyBGaW5pdGVUaW1lQWN0aW9uLCBBY3Rpb24gfSBmcm9tIFwiLi9hY3Rpb25cIjtcclxuaW1wb3J0IHsgUmVuZGVyYWJsZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi9jb3JlXCI7XHJcblxyXG4vKipcclxuICogISNlbiBJbnN0YW50IGFjdGlvbnMgYXJlIGltbWVkaWF0ZSBhY3Rpb25zLiBUaGV5IGRvbid0IGhhdmUgYSBkdXJhdGlvbiBsaWtlIHRoZSBBY3Rpb25JbnRlcnZhbCBhY3Rpb25zLlxyXG4gKiAhI3poIOWNs+aXtuWKqOS9nO+8jOi/meenjeWKqOS9nOeri+WNs+WwseS8muaJp+ihjO+8jOe7p+aJv+iHqiBGaW5pdGVUaW1lQWN0aW9u44CCXHJcbiAqIEBjbGFzcyBBY3Rpb25JbnN0YW50XHJcbiAqIEBleHRlbmRzIEZpbml0ZVRpbWVBY3Rpb25cclxuICovXHJcbmV4cG9ydCBjbGFzcyBBY3Rpb25JbnN0YW50IGV4dGVuZHMgRmluaXRlVGltZUFjdGlvbiB7XHJcblxyXG4gICAgaXNEb25lICgpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBzdGVwIChkdDogYW55KSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGUoMSk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlIChkdDogbnVtYmVyKSB7XHJcbiAgICAgICAgLy9ub3RoaW5nXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiByZXR1cm5zIGEgcmV2ZXJzZWQgYWN0aW9uLiA8YnIgLz5cclxuICAgICAqIEZvciBleGFtcGxlOiA8YnIgLz5cclxuICAgICAqIC0gVGhlIGFjdGlvbiBpcyB4IGNvb3JkaW5hdGVzIG9mIDAgbW92ZSB0byAxMDAuIDxiciAvPlxyXG4gICAgICogLSBUaGUgcmV2ZXJzZWQgYWN0aW9uIHdpbGwgYmUgeCBvZiAxMDAgbW92ZSB0byAwLlxyXG4gICAgICogQHJldHVybnMge0FjdGlvbn1cclxuICAgICAqL1xyXG4gICAgcmV2ZXJzZSAoKTogQWN0aW9uIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb25lICgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEFjdGlvbkluc3RhbnQoKTtcclxuICAgIH1cclxufVxyXG5cclxuLypcclxuICogU2hvdyB0aGUgbm9kZS5cclxuICogQGNsYXNzIFNob3dcclxuICogQGV4dGVuZHMgQWN0aW9uSW5zdGFudFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFNob3cgZXh0ZW5kcyBBY3Rpb25JbnN0YW50IHtcclxuICAgIHVwZGF0ZSAoZHQ6IGFueSkge1xyXG4gICAgICAgIHZhciBfcmVuZGVyQ29tcHMgPSB0aGlzLnRhcmdldCEuZ2V0Q29tcG9uZW50c0luQ2hpbGRyZW4oUmVuZGVyYWJsZUNvbXBvbmVudCk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfcmVuZGVyQ29tcHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgdmFyIHJlbmRlciA9IF9yZW5kZXJDb21wc1tpXTtcclxuICAgICAgICAgICAgcmVuZGVyLmVuYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXZlcnNlICgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEhpZGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9uZSAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTaG93KCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiAhI2VuIFNob3cgdGhlIE5vZGUuXHJcbiAqICEjemgg56uL5Y2z5pi+56S644CCXHJcbiAqIEBtZXRob2Qgc2hvd1xyXG4gKiBAcmV0dXJuIHtBY3Rpb25JbnN0YW50fVxyXG4gKiBAZXhhbXBsZVxyXG4gKiAvLyBleGFtcGxlXHJcbiAqIHZhciBzaG93QWN0aW9uID0gc2hvdygpO1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNob3cgKCk6IEFjdGlvbkluc3RhbnQge1xyXG4gICAgcmV0dXJuIG5ldyBTaG93KCk7XHJcbn07XHJcblxyXG4vKlxyXG4gKiBIaWRlIHRoZSBub2RlLlxyXG4gKiBAY2xhc3MgSGlkZVxyXG4gKiBAZXh0ZW5kcyBBY3Rpb25JbnN0YW50XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgSGlkZSBleHRlbmRzIEFjdGlvbkluc3RhbnQge1xyXG5cclxuICAgIHVwZGF0ZSAoZHQ6IGFueSkge1xyXG4gICAgICAgIHZhciBfcmVuZGVyQ29tcHMgPSB0aGlzLnRhcmdldCEuZ2V0Q29tcG9uZW50c0luQ2hpbGRyZW4oUmVuZGVyYWJsZUNvbXBvbmVudCk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfcmVuZGVyQ29tcHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgdmFyIHJlbmRlciA9IF9yZW5kZXJDb21wc1tpXTtcclxuICAgICAgICAgICAgcmVuZGVyLmVuYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV2ZXJzZSAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTaG93KCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUgKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgSGlkZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogISNlbiBIaWRlIHRoZSBub2RlLlxyXG4gKiAhI3poIOeri+WNs+makOiXj+OAglxyXG4gKiBAbWV0aG9kIGhpZGVcclxuICogQHJldHVybiB7QWN0aW9uSW5zdGFudH1cclxuICogQGV4YW1wbGVcclxuICogLy8gZXhhbXBsZVxyXG4gKiB2YXIgaGlkZUFjdGlvbiA9IGhpZGUoKTtcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBoaWRlICgpOiBBY3Rpb25JbnN0YW50IHtcclxuICAgIHJldHVybiBuZXcgSGlkZSgpO1xyXG59O1xyXG5cclxuLypcclxuICogVG9nZ2xlcyB0aGUgdmlzaWJpbGl0eSBvZiBhIG5vZGUuXHJcbiAqIEBjbGFzcyBUb2dnbGVWaXNpYmlsaXR5XHJcbiAqIEBleHRlbmRzIEFjdGlvbkluc3RhbnRcclxuICovXHJcbmV4cG9ydCBjbGFzcyBUb2dnbGVWaXNpYmlsaXR5IGV4dGVuZHMgQWN0aW9uSW5zdGFudCB7XHJcblxyXG4gICAgdXBkYXRlIChkdDogYW55KSB7XHJcbiAgICAgICAgdmFyIF9yZW5kZXJDb21wcyA9IHRoaXMudGFyZ2V0IS5nZXRDb21wb25lbnRzSW5DaGlsZHJlbihSZW5kZXJhYmxlQ29tcG9uZW50KTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IF9yZW5kZXJDb21wcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICB2YXIgcmVuZGVyID0gX3JlbmRlckNvbXBzW2ldO1xyXG4gICAgICAgICAgICByZW5kZXIuZW5hYmxlZCA9ICFyZW5kZXIuZW5hYmxlZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV2ZXJzZSAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBUb2dnbGVWaXNpYmlsaXR5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUgKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgVG9nZ2xlVmlzaWJpbGl0eSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogISNlbiBUb2dnbGVzIHRoZSB2aXNpYmlsaXR5IG9mIGEgbm9kZS5cclxuICogISN6aCDmmL7pmpDnirbmgIHliIfmjaLjgIJcclxuICogQG1ldGhvZCB0b2dnbGVWaXNpYmlsaXR5XHJcbiAqIEByZXR1cm4ge0FjdGlvbkluc3RhbnR9XHJcbiAqIEBleGFtcGxlXHJcbiAqIC8vIGV4YW1wbGVcclxuICogdmFyIHRvZ2dsZVZpc2liaWxpdHlBY3Rpb24gPSB0b2dnbGVWaXNpYmlsaXR5KCk7XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdG9nZ2xlVmlzaWJpbGl0eSAoKTogQWN0aW9uSW5zdGFudCB7XHJcbiAgICByZXR1cm4gbmV3IFRvZ2dsZVZpc2liaWxpdHkoKTtcclxufTtcclxuXHJcbi8qXHJcbiAqIERlbGV0ZSBzZWxmIGluIHRoZSBuZXh0IGZyYW1lLlxyXG4gKiBAY2xhc3MgUmVtb3ZlU2VsZlxyXG4gKiBAZXh0ZW5kcyBBY3Rpb25JbnN0YW50XHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2lzTmVlZENsZWFuVXA9dHJ1ZV1cclxuICpcclxuICogQGV4YW1wbGVcclxuICogLy8gZXhhbXBsZVxyXG4gKiB2YXIgcmVtb3ZlU2VsZkFjdGlvbiA9IG5ldyBSZW1vdmVTZWxmKGZhbHNlKTtcclxuICovXHJcbmV4cG9ydCBjbGFzcyBSZW1vdmVTZWxmIGV4dGVuZHMgQWN0aW9uSW5zdGFudCB7XHJcbiAgICBwcm90ZWN0ZWQgX2lzTmVlZENsZWFuVXAgPSB0cnVlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yIChpc05lZWRDbGVhblVwPzogYm9vbGVhbikge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgaXNOZWVkQ2xlYW5VcCAhPT0gdW5kZWZpbmVkICYmIHRoaXMuaW5pdChpc05lZWRDbGVhblVwKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUgKGR0OiBhbnkpIHtcclxuICAgICAgICB0aGlzLnRhcmdldCEucmVtb3ZlRnJvbVBhcmVudCgpO1xyXG4gICAgICAgIGlmICh0aGlzLl9pc05lZWRDbGVhblVwKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0IS5kZXN0cm95KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGluaXQgKGlzTmVlZENsZWFuVXA6IGFueSkge1xyXG4gICAgICAgIHRoaXMuX2lzTmVlZENsZWFuVXAgPSBpc05lZWRDbGVhblVwO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldmVyc2UgKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUmVtb3ZlU2VsZih0aGlzLl9pc05lZWRDbGVhblVwKTtcclxuICAgIH1cclxuXHJcbiAgICBjbG9uZSAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSZW1vdmVTZWxmKHRoaXMuX2lzTmVlZENsZWFuVXApO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogISNlbiBDcmVhdGUgYSBSZW1vdmVTZWxmIG9iamVjdCB3aXRoIGEgZmxhZyBpbmRpY2F0ZSB3aGV0aGVyIHRoZSB0YXJnZXQgc2hvdWxkIGJlIGNsZWFuZWQgdXAgd2hpbGUgcmVtb3ZpbmcuXHJcbiAqICEjemgg5LuO54i26IqC54K556e76Zmk6Ieq6Lqr44CCXHJcbiAqIEBtZXRob2QgcmVtb3ZlU2VsZlxyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtpc05lZWRDbGVhblVwID0gdHJ1ZV1cclxuICogQHJldHVybiB7QWN0aW9uSW5zdGFudH1cclxuICpcclxuICogQGV4YW1wbGVcclxuICogLy8gZXhhbXBsZVxyXG4gKiB2YXIgcmVtb3ZlU2VsZkFjdGlvbiA9IHJlbW92ZVNlbGYoKTtcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVTZWxmIChpc05lZWRDbGVhblVwOiBib29sZWFuKTogQWN0aW9uSW5zdGFudCB7XHJcbiAgICByZXR1cm4gbmV3IFJlbW92ZVNlbGYoaXNOZWVkQ2xlYW5VcCk7XHJcbn07XHJcblxyXG4vKlxyXG4gKiBDYWxscyBhICdjYWxsYmFjaycuXHJcbiAqIEBjbGFzcyBDYWxsRnVuY1xyXG4gKiBAZXh0ZW5kcyBBY3Rpb25JbnN0YW50XHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHNlbGVjdG9yXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBbc2VsZWN0b3JUYXJnZXQ9bnVsbF1cclxuICogQHBhcmFtIHsqfSBbZGF0YT1udWxsXSBkYXRhIGZvciBmdW5jdGlvbiwgaXQgYWNjZXB0cyBhbGwgZGF0YSB0eXBlcy5cclxuICogQGV4YW1wbGVcclxuICogLy8gZXhhbXBsZVxyXG4gKiAvLyBDYWxsRnVuYyB3aXRob3V0IGRhdGFcclxuICogdmFyIGZpbmlzaCA9IG5ldyBDYWxsRnVuYyh0aGlzLnJlbW92ZVNwcml0ZSwgdGhpcyk7XHJcbiAqXHJcbiAqIC8vIENhbGxGdW5jIHdpdGggZGF0YVxyXG4gKiB2YXIgZmluaXNoID0gbmV3IENhbGxGdW5jKHRoaXMucmVtb3ZlRnJvbVBhcmVudEFuZENsZWFudXAsIHRoaXMsICB0cnVlKTtcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDYWxsRnVuYyBleHRlbmRzIEFjdGlvbkluc3RhbnQge1xyXG5cclxuICAgIHByaXZhdGUgX3NlbGVjdG9yVGFyZ2V0ID0gbnVsbDtcclxuICAgIHByaXZhdGUgX2Z1bmN0aW9uOiBGdW5jdGlvbiB8IG51bGwgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBfZGF0YSA9IG51bGw7XHJcblxyXG4gICAgLypcclxuICAgICAqIENvbnN0cnVjdG9yIGZ1bmN0aW9uLCBvdmVycmlkZSBpdCB0byBleHRlbmQgdGhlIGNvbnN0cnVjdGlvbiBiZWhhdmlvciwgcmVtZW1iZXIgdG8gY2FsbCBcInRoaXMuX3N1cGVyKClcIiBpbiB0aGUgZXh0ZW5kZWQgXCJjdG9yXCIgZnVuY3Rpb24uIDxiciAvPlxyXG5cdCAqIENyZWF0ZXMgYSBDYWxsRnVuYyBhY3Rpb24gd2l0aCB0aGUgY2FsbGJhY2suXHJcblx0ICogQHBhcmFtIHtmdW5jdGlvbn0gc2VsZWN0b3JcclxuXHQgKiBAcGFyYW0ge29iamVjdH0gW3NlbGVjdG9yVGFyZ2V0PW51bGxdXHJcblx0ICogQHBhcmFtIHsqfSBbZGF0YT1udWxsXSBkYXRhIGZvciBmdW5jdGlvbiwgaXQgYWNjZXB0cyBhbGwgZGF0YSB0eXBlcy5cclxuXHQgKi9cclxuICAgIGNvbnN0cnVjdG9yIChzZWxlY3Rvcj86IEZ1bmN0aW9uLCBzZWxlY3RvclRhcmdldD86IGFueSwgZGF0YT86IGFueSkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5pbml0V2l0aEZ1bmN0aW9uKHNlbGVjdG9yLCBzZWxlY3RvclRhcmdldCwgZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgLypcclxuICAgICAqIEluaXRpYWxpemVzIHRoZSBhY3Rpb24gd2l0aCBhIGZ1bmN0aW9uIG9yIGZ1bmN0aW9uIGFuZCBpdHMgdGFyZ2V0XHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBzZWxlY3RvclxyXG4gICAgICogQHBhcmFtIHtvYmplY3R8TnVsbH0gc2VsZWN0b3JUYXJnZXRcclxuICAgICAqIEBwYXJhbSB7KnxOdWxsfSBbZGF0YV0gZGF0YSBmb3IgZnVuY3Rpb24sIGl0IGFjY2VwdHMgYWxsIGRhdGEgdHlwZXMuXHJcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gICAgICovXHJcbiAgICBpbml0V2l0aEZ1bmN0aW9uIChzZWxlY3RvcjogYW55LCBzZWxlY3RvclRhcmdldD86IGFueSwgZGF0YT86IGFueSkge1xyXG4gICAgICAgIGlmIChzZWxlY3Rvcikge1xyXG4gICAgICAgICAgICB0aGlzLl9mdW5jdGlvbiA9IHNlbGVjdG9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc2VsZWN0b3JUYXJnZXQpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2VsZWN0b3JUYXJnZXQgPSBzZWxlY3RvclRhcmdldDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRhdGEgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9kYXRhID0gZGF0YTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLypcclxuICAgICAqIGV4ZWN1dGUgdGhlIGZ1bmN0aW9uLlxyXG4gICAgICovXHJcbiAgICBleGVjdXRlICgpIHtcclxuICAgICAgICBpZiAodGhpcy5fZnVuY3Rpb24pIHtcclxuICAgICAgICAgICAgdGhpcy5fZnVuY3Rpb24uY2FsbCh0aGlzLl9zZWxlY3RvclRhcmdldCwgdGhpcy50YXJnZXQsIHRoaXMuX2RhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUgKGR0OiBhbnkpIHtcclxuICAgICAgICB0aGlzLmV4ZWN1dGUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKlxyXG4gICAgICogR2V0IHNlbGVjdG9yVGFyZ2V0LlxyXG4gICAgICogQHJldHVybiB7b2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBnZXRUYXJnZXRDYWxsYmFjayAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdG9yVGFyZ2V0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qXHJcbiAgICAgKiBTZXQgc2VsZWN0b3JUYXJnZXQuXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gc2VsXHJcbiAgICAgKi9cclxuICAgIHNldFRhcmdldENhbGxiYWNrIChzZWw6IGFueSkge1xyXG4gICAgICAgIGlmIChzZWwgIT09IHRoaXMuX3NlbGVjdG9yVGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9zZWxlY3RvclRhcmdldClcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdG9yVGFyZ2V0ID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fc2VsZWN0b3JUYXJnZXQgPSBzZWw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNsb25lICgpIHtcclxuICAgICAgICB2YXIgYWN0aW9uID0gbmV3IENhbGxGdW5jKCk7XHJcbiAgICAgICAgYWN0aW9uLmluaXRXaXRoRnVuY3Rpb24odGhpcy5fZnVuY3Rpb24sIHRoaXMuX3NlbGVjdG9yVGFyZ2V0LCB0aGlzLl9kYXRhKTtcclxuICAgICAgICByZXR1cm4gYWN0aW9uO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogISNlbiBDcmVhdGVzIHRoZSBhY3Rpb24gd2l0aCB0aGUgY2FsbGJhY2suXHJcbiAqICEjemgg5omn6KGM5Zue6LCD5Ye95pWw44CCXHJcbiAqIEBtZXRob2QgY2FsbEZ1bmNcclxuICogQHBhcmFtIHtmdW5jdGlvbn0gc2VsZWN0b3JcclxuICogQHBhcmFtIHtvYmplY3R9IFtzZWxlY3RvclRhcmdldD1udWxsXVxyXG4gKiBAcGFyYW0geyp9IFtkYXRhPW51bGxdIC0gZGF0YSBmb3IgZnVuY3Rpb24sIGl0IGFjY2VwdHMgYWxsIGRhdGEgdHlwZXMuXHJcbiAqIEByZXR1cm4ge0FjdGlvbkluc3RhbnR9XHJcbiAqIEBleGFtcGxlXHJcbiAqIC8vIGV4YW1wbGVcclxuICogLy8gQ2FsbEZ1bmMgd2l0aG91dCBkYXRhXHJcbiAqIHZhciBmaW5pc2ggPSBjYWxsRnVuYyh0aGlzLnJlbW92ZVNwcml0ZSwgdGhpcyk7XHJcbiAqXHJcbiAqIC8vIENhbGxGdW5jIHdpdGggZGF0YVxyXG4gKiB2YXIgZmluaXNoID0gY2FsbEZ1bmModGhpcy5yZW1vdmVGcm9tUGFyZW50QW5kQ2xlYW51cCwgdGhpcy5fZ3Jvc3NpbmksICB0cnVlKTtcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxsRnVuYyAoc2VsZWN0b3I6IEZ1bmN0aW9uLCBzZWxlY3RvclRhcmdldD86IGFueSwgZGF0YT86IGFueSk6IEFjdGlvbkluc3RhbnQge1xyXG4gICAgcmV0dXJuIG5ldyBDYWxsRnVuYyhzZWxlY3Rvciwgc2VsZWN0b3JUYXJnZXQsIGRhdGEpO1xyXG59O1xyXG4iXX0=