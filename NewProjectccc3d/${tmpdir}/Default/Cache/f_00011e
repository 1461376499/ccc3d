(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../../core/index.js", "../../../core/director.js", "../../../core/game.js", "../../../core/math/index.js", "../../../core/platform/index.js", "../../../core/platform/macro.js", "../../../core/utils/misc.js", "../label-component.js", "./tabIndexUtil.js", "./types.js", "../../../core/platform/sys.js", "../../../core/platform/visible-rect.js", "./edit-box-impl-base.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../../core/index.js"), require("../../../core/director.js"), require("../../../core/game.js"), require("../../../core/math/index.js"), require("../../../core/platform/index.js"), require("../../../core/platform/macro.js"), require("../../../core/utils/misc.js"), require("../label-component.js"), require("./tabIndexUtil.js"), require("./types.js"), require("../../../core/platform/sys.js"), require("../../../core/platform/visible-rect.js"), require("./edit-box-impl-base.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.director, global.game, global.index, global.index, global.macro, global.misc, global.labelComponent, global.tabIndexUtil, global.types, global.sys, global.visibleRect, global.editBoxImplBase);
    global.editBoxImpl = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _director, _game, _index2, _index3, _macro, _misc, _labelComponent, _tabIndexUtil, _types, _sys, _visibleRect, _editBoxImplBase) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EditBoxImpl = void 0;
  _visibleRect = _interopRequireDefault(_visibleRect);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  // https://segmentfault.com/q/1010000002914610
  var SCROLLY = 40;
  var LEFT_PADDING = 2;
  var DELAY_TIME = 400;

  var _matrix = new _index2.Mat4();

  var _matrix_temp = new _index2.Mat4();

  var _vec3 = new _index2.Vec3();

  var _currentEditBoxImpl = null;
  var _domCount = 0; // polyfill

  var polyfill = {
    zoomInvalid: false
  };

  if (_sys.sys.OS_ANDROID === _sys.sys.os && (_sys.sys.browserType === _sys.sys.BROWSER_TYPE_SOUGOU || _sys.sys.browserType === _sys.sys.BROWSER_TYPE_360)) {
    polyfill.zoomInvalid = true;
  }

  var EditBoxImpl = /*#__PURE__*/function (_EditBoxImplBase) {
    _inherits(EditBoxImpl, _EditBoxImplBase);

    function EditBoxImpl() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, EditBoxImpl);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EditBoxImpl)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this._delegate = null;
      _this._inputMode = _types.InputMode.ANY;
      _this._inputFlag = _types.InputFlag.DEFAULT;
      _this._returnType = _types.KeyboardReturnType.DEFAULT;
      _this._maxLength = 50;
      _this._placeholderText = '';
      _this._alwaysOnTop = false;
      _this._size = new _index2.Size();
      _this._node = null;
      _this._editing = false;
      _this.__eventListeners = {};
      _this.__fullscreen = false;
      _this.__autoResize = false;
      _this.__rotateScreen = false;
      _this.__orientationChanged = void 0;
      _this._edTxt = null;
      _this._textColor = _index2.Color.WHITE.clone();
      _this._edFontSize = 14;
      _this._isTextArea = false;
      _this._textLabelFont = null;
      _this._textLabelFontSize = null;
      _this._textLabelFontColor = null;
      _this._textLabelAlign = null;
      _this._placeholderLabelFont = null;
      _this._placeholderLabelFontSize = null;
      _this._placeholderLabelFontColor = null;
      _this._placeholderLabelAlign = null;
      _this._placeholderLineHeight = null;
      _this._placeholderStyleSheet = null;
      _this._domId = "EditBoxId_".concat(++_domCount);
      return _this;
    }

    _createClass(EditBoxImpl, [{
      key: "init",
      value: function init(delegate) {
        if (!delegate) {
          return;
        }

        this._delegate = delegate;

        if (delegate.inputMode === _types.InputMode.ANY) {
          this._createTextArea();
        } else {
          this._createInput();
        }

        _tabIndexUtil.tabIndexUtil.add(this);

        this.setTabIndex(delegate.tabIndex);

        this._initStyleSheet();

        this._registerEventListeners();

        this._addDomToGameContainer();

        this.__fullscreen = _index3.view.isAutoFullScreenEnabled();
        this.__autoResize = _index3.view._resizeWithBrowserSize;
      }
    }, {
      key: "onEnable",
      value: function onEnable() {// Do nothing
      }
    }, {
      key: "onDisable",
      value: function onDisable() {
        if (this._editing && this._edTxt) {
          this._edTxt.blur();
        }
      }
    }, {
      key: "clear",
      value: function clear() {
        this._removeEventListeners();

        this._removeDomFromGameContainer();

        _tabIndexUtil.tabIndexUtil.remove(this); // clear while editing


        if (_currentEditBoxImpl === this) {
          _currentEditBoxImpl = null;
        }

        this._delegate = null;
      }
    }, {
      key: "update",
      value: function update() {
        this._updateMatrix();
      }
    }, {
      key: "setTabIndex",
      value: function setTabIndex(index) {
        this._edTxt.tabIndex = index;

        _tabIndexUtil.tabIndexUtil.resort();
      }
    }, {
      key: "setSize",
      value: function setSize(width, height) {
        var elem = this._edTxt;

        if (elem) {
          elem.style.width = width + 'px';
          elem.style.height = height + 'px';
        }
      }
    }, {
      key: "setFocus",
      value: function setFocus(value) {
        if (value) {
          this.beginEditing();
        } else {
          this._edTxt.blur();
        }
      }
    }, {
      key: "isFocused",
      value: function isFocused() {
        return this._editing;
      }
    }, {
      key: "beginEditing",
      value: function beginEditing() {
        if (_currentEditBoxImpl && _currentEditBoxImpl !== this) {
          _currentEditBoxImpl.setFocus(false);
        }

        this._editing = true;
        _currentEditBoxImpl = this;

        this._showDom();

        if (this._edTxt && this._delegate) {
          this._edTxt.focus();

          this._delegate._editBoxEditingDidBegan();
        }
      }
    }, {
      key: "endEditing",
      value: function endEditing() {// Do nothing, handle endEditing on blur callback
      }
    }, {
      key: "_createInput",
      value: function _createInput() {
        this._isTextArea = false;
        this._edTxt = document.createElement('input');
      }
    }, {
      key: "_createTextArea",
      value: function _createTextArea() {
        this._isTextArea = true;
        this._edTxt = document.createElement('textarea');
      }
    }, {
      key: "_addDomToGameContainer",
      value: function _addDomToGameContainer() {
        if (_game.game.container && this._edTxt) {
          _game.game.container.appendChild(this._edTxt);

          document.head.appendChild(this._placeholderStyleSheet);
        }
      }
    }, {
      key: "_removeDomFromGameContainer",
      value: function _removeDomFromGameContainer() {
        var hasElem = (0, _misc.contains)(_game.game.container, this._edTxt);

        if (hasElem && this._edTxt) {
          _game.game.container.removeChild(this._edTxt);
        }

        var hasStyleSheet = (0, _misc.contains)(document.head, this._placeholderStyleSheet);

        if (hasStyleSheet) {
          document.head.removeChild(this._placeholderStyleSheet);
        }

        delete this._edTxt;
        delete this._placeholderStyleSheet;
      }
    }, {
      key: "_showDom",
      value: function _showDom() {
        this._updateMaxLength();

        this._updateInputType();

        this._updateStyleSheet();

        if (this._edTxt && this._delegate) {
          this._edTxt.style.display = '';

          this._delegate._hideLabels();
        }

        if (_sys.sys.isMobile) {
          this._showDomOnMobile();
        }
      }
    }, {
      key: "_hideDom",
      value: function _hideDom() {
        var elem = this._edTxt;

        if (elem && this._delegate) {
          elem.style.display = 'none';

          this._delegate._showLabels();
        }

        if (_sys.sys.isMobile) {
          this._hideDomOnMobile();
        }
      }
    }, {
      key: "_showDomOnMobile",
      value: function _showDomOnMobile() {
        if (_sys.sys.os !== _sys.sys.OS_ANDROID) {
          return;
        }

        if (this.__fullscreen) {
          _index3.view.enableAutoFullScreen(false);

          _index3.screen.exitFullScreen();
        }

        if (this.__autoResize) {
          _index3.view.resizeWithBrowserSize(false);
        }

        this._adjustWindowScroll();
      }
    }, {
      key: "_hideDomOnMobile",
      value: function _hideDomOnMobile() {
        var _this2 = this;

        if (_sys.sys.os === _sys.sys.OS_ANDROID) {
          setTimeout(function () {
            if (!_currentEditBoxImpl) {
              if (_this2.__fullscreen) {
                _index3.view.enableAutoFullScreen(true);
              }

              if (_this2.__autoResize) {
                _index3.view.resizeWithBrowserSize(true);
              }
            }
          }, DELAY_TIME);
        }

        this._scrollBackWindow();
      }
    }, {
      key: "_adjustWindowScroll",
      value: function _adjustWindowScroll() {
        var self = this;
        setTimeout(function () {
          if (window.scrollY < SCROLLY) {
            self._edTxt.scrollIntoView({
              block: 'start',
              inline: 'nearest',
              behavior: 'smooth'
            });
          }
        }, DELAY_TIME);
      }
    }, {
      key: "_scrollBackWindow",
      value: function _scrollBackWindow() {
        setTimeout(function () {
          if (_sys.sys.browserType === _sys.sys.BROWSER_TYPE_WECHAT && _sys.sys.os === _sys.sys.OS_IOS) {
            if (window.top) {
              window.top.scrollTo(0, 0);
            }

            return;
          }

          window.scrollTo(0, 0);
        }, DELAY_TIME);
      }
    }, {
      key: "_updateMatrix",
      value: function _updateMatrix() {
        if (!this._edTxt) {
          return;
        }

        var node = this._delegate.node;

        var scaleX = _index3.view.getScaleX();

        var scaleY = _index3.view.getScaleY();

        var viewport = _index3.view.getViewportRect();

        var dpr = _index3.view.getDevicePixelRatio();

        node.getWorldMatrix(_matrix);
        var transform = node._uiProps.uiTransformComp;

        if (transform) {
          _index2.Vec3.set(_vec3, -transform.anchorX * transform.width, -transform.anchorY * transform.height, _vec3.z);
        }

        _index2.Mat4.transform(_matrix, _matrix, _vec3);

        if (!node._uiProps.uiTransformComp) {
          return false;
        }

        var canvas = _director.director.root.ui.getScreen(node._uiProps.uiTransformComp.visibility);

        if (!canvas) {
          return;
        } // camera.getWorldToCameraMatrix(_matrix_temp);


        canvas.node.getWorldRT(_matrix_temp);
        var m12 = _matrix_temp.m12;
        var m13 = _matrix_temp.m13;
        var center = _visibleRect.default.center;
        _matrix_temp.m12 = center.x - (_matrix_temp.m00 * m12 + _matrix_temp.m04 * m13);
        _matrix_temp.m13 = center.y - (_matrix_temp.m01 * m12 + _matrix_temp.m05 * m13);

        _index2.Mat4.multiply(_matrix_temp, _matrix_temp, _matrix);

        scaleX /= dpr;
        scaleY /= dpr;
        var container = _game.game.container;
        var a = _matrix_temp.m00 * scaleX;
        var b = _matrix.m01;
        var c = _matrix.m04;
        var d = _matrix_temp.m05 * scaleY;
        var offsetX = parseInt(container && container.style.paddingLeft || '0');
        offsetX += viewport.x / dpr;
        var offsetY = parseInt(container && container.style.paddingBottom || '0');
        offsetY += viewport.y / dpr;
        var tx = _matrix_temp.m12 * scaleX + offsetX;
        var ty = _matrix_temp.m13 * scaleY + offsetY;

        if (polyfill.zoomInvalid) {
          this.setSize(this._size.width * a, this._size.height * d);
          a = 1;
          d = 1;
        }

        var matrix = 'matrix(' + a + ',' + -b + ',' + -c + ',' + d + ',' + tx + ',' + -ty + ')';
        this._edTxt.style.transform = matrix;
        this._edTxt.style['-webkit-transform'] = matrix;
        this._edTxt.style['transform-origin'] = '0px 100% 0px';
        this._edTxt.style['-webkit-transform-origin'] = '0px 100% 0px';
      }
    }, {
      key: "_updateInputType",
      value: function _updateInputType() {
        var delegate = this._delegate;
        var inputMode = delegate.inputMode;
        var inputFlag = delegate.inputFlag;
        var returnType = delegate.returnType;
        var elem = this._edTxt;

        if (this._inputMode === inputMode && this._inputFlag === inputFlag && this._returnType === returnType) {
          return;
        } // update cache


        this._inputMode = inputMode;
        this._inputFlag = inputFlag;
        this._returnType = returnType; // FIX ME: TextArea actually dose not support password type.

        if (this._isTextArea) {
          // input flag
          var _textTransform = 'none';

          if (inputFlag === _types.InputFlag.INITIAL_CAPS_ALL_CHARACTERS) {
            _textTransform = 'uppercase';
          } else if (inputFlag === _types.InputFlag.INITIAL_CAPS_WORD) {
            _textTransform = 'capitalize';
          }

          elem.style.textTransform = _textTransform;
          return;
        }

        elem = elem; // begin to updateInputType

        if (inputFlag === _types.InputFlag.PASSWORD) {
          elem.type = 'password';
          return;
        } // input mode


        var type = elem.type;

        if (inputMode === _types.InputMode.EMAIL_ADDR) {
          type = 'email';
        } else if (inputMode === _types.InputMode.NUMERIC || inputMode === _types.InputMode.DECIMAL) {
          type = 'number';
        } else if (inputMode === _types.InputMode.PHONE_NUMBER) {
          type = 'number';
          elem.pattern = '[0-9]*';
        } else if (inputMode === _types.InputMode.URL) {
          type = 'url';
        } else {
          type = 'text';

          if (returnType === _types.KeyboardReturnType.SEARCH) {
            type = 'search';
          }
        }

        elem.type = type; // input flag

        var textTransform = 'none';

        if (inputFlag === _types.InputFlag.INITIAL_CAPS_ALL_CHARACTERS) {
          textTransform = 'uppercase';
        } else if (inputFlag === _types.InputFlag.INITIAL_CAPS_WORD) {
          textTransform = 'capitalize';
        }

        elem.style.textTransform = textTransform;
      }
    }, {
      key: "_updateMaxLength",
      value: function _updateMaxLength() {
        var maxLength = this._delegate.maxLength;

        if (maxLength < 0) {
          maxLength = 65535;
        }

        this._edTxt.maxLength = maxLength;
      }
    }, {
      key: "_initStyleSheet",
      value: function _initStyleSheet() {
        if (!this._edTxt) {
          return;
        }

        var elem = this._edTxt;
        elem.style.fontSize = this._edFontSize + 'px';
        elem.style.color = '#000000';
        elem.style.border = '0px';
        elem.style.background = 'transparent';
        elem.style.width = '100%';
        elem.style.height = '100%';
        elem.style.outline = 'medium';
        elem.style.padding = '0';
        elem.style.textTransform = 'uppercase';
        elem.style.display = 'none';
        elem.style.position = 'absolute';
        elem.style.bottom = '0px';
        elem.style.left = LEFT_PADDING + 'px';
        elem.className = 'cocosEditBox';
        elem.style.fontFamily = 'Arial';
        elem.id = this._domId;

        if (!this._isTextArea) {
          elem = elem;
          elem.type = 'text';
          elem.style['-moz-appearance'] = 'textfield';
        } else {
          elem.style.resize = 'none';
          elem.style.overflowY = 'scroll';
        }

        this._placeholderStyleSheet = document.createElement('style');
      }
    }, {
      key: "_updateStyleSheet",
      value: function _updateStyleSheet() {
        var delegate = this._delegate;
        var elem = this._edTxt;

        if (elem && delegate) {
          elem.value = delegate.string;
          elem.placeholder = delegate.placeholder;

          this._updateTextLabel(delegate.textLabel);

          this._updatePlaceholderLabel(delegate.placeholderLabel);
        }
      }
    }, {
      key: "_updateTextLabel",
      value: function _updateTextLabel(textLabel) {
        if (!textLabel) {
          return;
        }

        var font = textLabel.font;

        if (font && !(font instanceof _index.BitmapFont)) {
          font = font._fontFamily;
        } else {
          font = textLabel.fontFamily;
        }

        if (this._textLabelFont === font && this._textLabelFontSize === textLabel.fontSize && this._textLabelFontColor === textLabel.fontColor && this._textLabelAlign === textLabel.horizontalAlign) {
          return;
        }

        this._textLabelFont = font;
        this._textLabelFontSize = textLabel.fontSize;
        this._textLabelFontColor = textLabel.fontColor;
        this._textLabelAlign = textLabel.horizontalAlign;

        if (!this._edTxt) {
          return;
        }

        var elem = this._edTxt;
        elem.style.fontSize = "".concat(textLabel.fontSize, "px");
        elem.style.color = textLabel.color.toCSS('rgba');
        elem.style.fontFamily = font;

        switch (textLabel.horizontalAlign) {
          case _labelComponent.LabelComponent.HorizontalAlign.LEFT:
            elem.style.textAlign = 'left';
            break;

          case _labelComponent.LabelComponent.HorizontalAlign.CENTER:
            elem.style.textAlign = 'center';
            break;

          case _labelComponent.LabelComponent.HorizontalAlign.RIGHT:
            elem.style.textAlign = 'right';
            break;
        }
      }
    }, {
      key: "_updatePlaceholderLabel",
      value: function _updatePlaceholderLabel(placeholderLabel) {
        if (!placeholderLabel) {
          return;
        }

        var font = placeholderLabel.font;

        if (font && !(font instanceof _index.BitmapFont)) {
          font = placeholderLabel.font._fontFamily;
        } else {
          font = placeholderLabel.fontFamily;
        }

        if (this._placeholderLabelFont === font && this._placeholderLabelFontSize === placeholderLabel.fontSize && this._placeholderLabelFontColor === placeholderLabel.fontColor && this._placeholderLabelAlign === placeholderLabel.horizontalAlign && this._placeholderLineHeight === placeholderLabel.fontSize) {
          return;
        }

        this._placeholderLabelFont = font;
        this._placeholderLabelFontSize = placeholderLabel.fontSize;
        this._placeholderLabelFontColor = placeholderLabel.fontColor;
        this._placeholderLabelAlign = placeholderLabel.horizontalAlign;
        this._placeholderLineHeight = placeholderLabel.fontSize;
        var styleEl = this._placeholderStyleSheet;
        var fontSize = placeholderLabel.fontSize;
        var fontColor = placeholderLabel.color.toCSS('rgba');
        var lineHeight = placeholderLabel.fontSize;
        var horizontalAlign = '';

        switch (placeholderLabel.horizontalAlign) {
          case _labelComponent.LabelComponent.HorizontalAlign.LEFT:
            horizontalAlign = 'left';
            break;

          case _labelComponent.LabelComponent.HorizontalAlign.CENTER:
            horizontalAlign = 'center';
            break;

          case _labelComponent.LabelComponent.HorizontalAlign.RIGHT:
            horizontalAlign = 'right';
            break;
        }

        styleEl.innerHTML = "\n            #".concat(this._domId, "::-webkit-input-placeholder {\n                text-transform: initial;\n                font-family: ").concat(font, ";\n                font-size: ").concat(fontSize, "px;\n                color: ").concat(fontColor, ";\n                line-height: ").concat(lineHeight, "px;\n                text-align: ").concat(horizontalAlign, ";\n            }\n            #").concat(this._domId, "::-moz-placeholder {\n                text-transform: initial;\n                font-family: ").concat(font, ";\n                font-size: ").concat(fontSize, "px;\n                color: ").concat(fontColor, ";\n                line-height: ").concat(lineHeight, "px;\n                text-align: ").concat(horizontalAlign, ";\n            }\n            #").concat(this._domId, ":-ms-input-placeholder {\n                text-transform: initial;\n                font-family: ").concat(font, ";\n                font-size: ").concat(fontSize, "px;\n                color: ").concat(fontColor, ";\n                line-height: ").concat(lineHeight, "px;\n                text-align: ").concat(horizontalAlign, ";\n            }\n        ");
      }
    }, {
      key: "_registerEventListeners",
      value: function _registerEventListeners() {
        if (!this._edTxt) {
          return;
        }

        var impl = this;
        var elem = this._edTxt;
        var inputLock = false;
        var cbs = this.__eventListeners;

        cbs.compositionStart = function () {
          inputLock = true;
        };

        cbs.compositionEnd = function () {
          inputLock = false;

          impl._delegate._editBoxTextChanged(elem.value);
        };

        cbs.onInput = function () {
          if (inputLock) {
            return;
          }

          impl._delegate._editBoxTextChanged(elem.value);
        };

        cbs.onClick = function () {
          if (impl._editing) {
            if (_sys.sys.isMobile) {
              impl._adjustWindowScroll();
            }
          }
        };

        cbs.onKeydown = function (e) {
          if (e.keyCode === _macro.macro.KEY.enter) {
            e.propagationStopped = true;

            impl._delegate._editBoxEditingReturn();

            if (!impl._isTextArea) {
              elem.blur();
            }
          } else if (e.keyCode === _macro.macro.KEY.tab) {
            e.propagationStopped = true;
            e.preventDefault();

            _tabIndexUtil.tabIndexUtil.next(impl);
          }
        };

        cbs.onBlur = function () {
          impl._editing = false;
          _currentEditBoxImpl = null;

          impl._hideDom();

          impl._delegate._editBoxEditingDidEnded();
        };

        elem.addEventListener('compositionstart', cbs.compositionStart);
        elem.addEventListener('compositionend', cbs.compositionEnd);
        elem.addEventListener('input', cbs.onInput);
        elem.addEventListener('keydown', cbs.onKeydown);
        elem.addEventListener('blur', cbs.onBlur);
        elem.addEventListener('touchstart', cbs.onClick);
      }
    }, {
      key: "_removeEventListeners",
      value: function _removeEventListeners() {
        if (!this._edTxt) {
          return;
        }

        var elem = this._edTxt;
        var cbs = this.__eventListeners;
        elem.removeEventListener('compositionstart', cbs.compositionStart);
        elem.removeEventListener('compositionend', cbs.compositionEnd);
        elem.removeEventListener('input', cbs.onInput);
        elem.removeEventListener('keydown', cbs.onKeydown);
        elem.removeEventListener('blur', cbs.onBlur);
        elem.removeEventListener('touchstart', cbs.onClick);
        cbs.compositionStart = null;
        cbs.compositionEnd = null;
        cbs.onInput = null;
        cbs.onKeydown = null;
        cbs.onBlur = null;
        cbs.onClick = null;
      }
    }]);

    return EditBoxImpl;
  }(_editBoxImplBase.EditBoxImplBase);

  _exports.EditBoxImpl = EditBoxImpl;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,