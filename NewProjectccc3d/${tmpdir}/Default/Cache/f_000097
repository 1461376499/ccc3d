(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../math/index.js", "./enums.js", "./plane.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../math/index.js"), require("./enums.js"), require("./plane.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.enums, global.plane);
    global.frustum = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _enums, _plane) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.frustum = void 0;
  _enums = _interopRequireDefault(_enums);
  _plane = _interopRequireDefault(_plane);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var _v = new Array(8);

  _v[0] = new _index.Vec3(1, 1, 1);
  _v[1] = new _index.Vec3(-1, 1, 1);
  _v[2] = new _index.Vec3(-1, -1, 1);
  _v[3] = new _index.Vec3(1, -1, 1);
  _v[4] = new _index.Vec3(1, 1, -1);
  _v[5] = new _index.Vec3(-1, 1, -1);
  _v[6] = new _index.Vec3(-1, -1, -1);
  _v[7] = new _index.Vec3(1, -1, -1);
  /**
   * @en
   * Basic Geometry: frustum.
   * @zh
   * 基础几何 截头锥体。
   */
  // tslint:disable-next-line: class-name

  var frustum = /*#__PURE__*/function () {
    _createClass(frustum, [{
      key: "accurate",

      /**
       * @en
       * Set whether to use accurate intersection testing function on this frustum.
       * @zh
       * 设置是否在此截锥体上使用精确的相交测试函数。
       */
      set: function set(b) {
        this._type = b ? _enums.default.SHAPE_FRUSTUM_ACCURATE : _enums.default.SHAPE_FRUSTUM;
      }
      /**
       * @en
       * Create a ortho frustum.
       * @zh
       * 创建一个正交视锥体。
       * @param out 正交视锥体。
       * @param width 正交视锥体的宽度。
       * @param height 正交视锥体的高度。
       * @param near 正交视锥体的近平面值。
       * @param far 正交视锥体的远平面值。
       * @param transform 正交视锥体的变换矩阵。
       * @return {frustum} frustum.
       */

    }, {
      key: "type",

      /**
       * @en
       * Gets the type of the shape.
       * @zh
       * 获取形状的类型。
       */
      get: function get() {
        return this._type;
      }
    }], [{
      key: "create",

      /**
       * @en
       * create a new frustum.
       * @zh
       * 创建一个新的截锥体。
       * @return {frustum} frustum.
       */
      value: function create() {
        return new frustum();
      }
      /**
       * @en
       * Clone a frustum.
       * @zh
       * 克隆一个截锥体。
       */

    }, {
      key: "clone",
      value: function clone(f) {
        return frustum.copy(new frustum(), f);
      }
      /**
       * @en
       * Copy the values from one frustum to another.
       * @zh
       * 从一个截锥体拷贝到另一个截锥体。
       */

    }, {
      key: "copy",
      value: function copy(out, f) {
        out._type = f._type;

        for (var i = 0; i < 6; ++i) {
          _plane.default.copy(out.planes[i], f.planes[i]);
        }

        for (var _i = 0; _i < 8; ++_i) {
          _index.Vec3.copy(out.vertices[_i], f.vertices[_i]);
        }

        return out;
      }
    }]);

    function frustum() {
      _classCallCheck(this, frustum);

      this._type = void 0;
      this.planes = void 0;
      this.vertices = void 0;
      this._type = _enums.default.SHAPE_FRUSTUM;
      this.planes = new Array(6);

      for (var i = 0; i < 6; ++i) {
        this.planes[i] = _plane.default.create(0, 0, 0, 0);
      }

      this.vertices = new Array(8);

      for (var _i2 = 0; _i2 < 8; ++_i2) {
        this.vertices[_i2] = new _index.Vec3();
      }
    }
    /**
     * @en
     * Update the frustum information according to the given transform matrix.
     * Note that the resulting planes are not normalized under normal mode.
     * @zh
     * 根据给定的变换矩阵更新截锥体信息，注意得到的平面不是在标准模式下归一化的。
     * @param {Mat4} m the view-projection matrix
     * @param {Mat4} inv the inverse view-projection matrix
     */


    _createClass(frustum, [{
      key: "update",
      value: function update(m, inv) {
        // RTR4, ch. 22.14.1, p. 983
        // extract frustum planes from view-proj matrix.
        // left plane
        _index.Vec3.set(this.planes[0].n, m.m03 + m.m00, m.m07 + m.m04, m.m11 + m.m08);

        this.planes[0].d = -(m.m15 + m.m12); // right plane

        _index.Vec3.set(this.planes[1].n, m.m03 - m.m00, m.m07 - m.m04, m.m11 - m.m08);

        this.planes[1].d = -(m.m15 - m.m12); // bottom plane

        _index.Vec3.set(this.planes[2].n, m.m03 + m.m01, m.m07 + m.m05, m.m11 + m.m09);

        this.planes[2].d = -(m.m15 + m.m13); // top plane

        _index.Vec3.set(this.planes[3].n, m.m03 - m.m01, m.m07 - m.m05, m.m11 - m.m09);

        this.planes[3].d = -(m.m15 - m.m13); // near plane

        _index.Vec3.set(this.planes[4].n, m.m03 + m.m02, m.m07 + m.m06, m.m11 + m.m10);

        this.planes[4].d = -(m.m15 + m.m14); // far plane

        _index.Vec3.set(this.planes[5].n, m.m03 - m.m02, m.m07 - m.m06, m.m11 - m.m10);

        this.planes[5].d = -(m.m15 - m.m14);

        if (this._type !== _enums.default.SHAPE_FRUSTUM_ACCURATE) {
          return;
        } // normalize planes


        for (var i = 0; i < 6; i++) {
          var pl = this.planes[i];
          var invDist = 1 / pl.n.length();

          _index.Vec3.multiplyScalar(pl.n, pl.n, invDist);

          pl.d *= invDist;
        } // update frustum vertices


        for (var _i3 = 0; _i3 < 8; _i3++) {
          _index.Vec3.transformMat4(this.vertices[_i3], _v[_i3], inv);
        }
      }
      /**
       * @en
       * Transform this frustum.
       * @zh
       * 变换此截锥体。
       * @param mat 变换矩阵。
       */

    }, {
      key: "transform",
      value: function transform(mat) {
        if (this._type !== _enums.default.SHAPE_FRUSTUM_ACCURATE) {
          return;
        }

        for (var i = 0; i < 8; i++) {
          _index.Vec3.transformMat4(this.vertices[i], this.vertices[i], mat);
        }

        _plane.default.fromPoints(this.planes[0], this.vertices[1], this.vertices[5], this.vertices[6]);

        _plane.default.fromPoints(this.planes[1], this.vertices[3], this.vertices[7], this.vertices[4]);

        _plane.default.fromPoints(this.planes[2], this.vertices[6], this.vertices[7], this.vertices[3]);

        _plane.default.fromPoints(this.planes[3], this.vertices[0], this.vertices[4], this.vertices[5]);

        _plane.default.fromPoints(this.planes[4], this.vertices[2], this.vertices[3], this.vertices[0]);

        _plane.default.fromPoints(this.planes[0], this.vertices[7], this.vertices[6], this.vertices[5]);
      }
    }]);

    return frustum;
  }();

  _exports.frustum = frustum;

  frustum.createOrtho = function () {
    var _temp_v3 = new _index.Vec3();

    return function (out, width, height, near, far, transform) {
      var halfWidth = width / 2;
      var halfHeight = height / 2;

      _index.Vec3.set(_temp_v3, halfWidth, halfHeight, near);

      _index.Vec3.transformMat4(out.vertices[0], _temp_v3, transform);

      _index.Vec3.set(_temp_v3, -halfWidth, halfHeight, near);

      _index.Vec3.transformMat4(out.vertices[1], _temp_v3, transform);

      _index.Vec3.set(_temp_v3, -halfWidth, -halfHeight, near);

      _index.Vec3.transformMat4(out.vertices[2], _temp_v3, transform);

      _index.Vec3.set(_temp_v3, halfWidth, -halfHeight, near);

      _index.Vec3.transformMat4(out.vertices[3], _temp_v3, transform);

      _index.Vec3.set(_temp_v3, halfWidth, halfHeight, far);

      _index.Vec3.transformMat4(out.vertices[4], _temp_v3, transform);

      _index.Vec3.set(_temp_v3, -halfWidth, halfHeight, far);

      _index.Vec3.transformMat4(out.vertices[5], _temp_v3, transform);

      _index.Vec3.set(_temp_v3, -halfWidth, -halfHeight, far);

      _index.Vec3.transformMat4(out.vertices[6], _temp_v3, transform);

      _index.Vec3.set(_temp_v3, halfWidth, -halfHeight, far);

      _index.Vec3.transformMat4(out.vertices[7], _temp_v3, transform);

      _plane.default.fromPoints(out.planes[0], out.vertices[1], out.vertices[6], out.vertices[5]);

      _plane.default.fromPoints(out.planes[1], out.vertices[3], out.vertices[4], out.vertices[7]);

      _plane.default.fromPoints(out.planes[2], out.vertices[6], out.vertices[3], out.vertices[7]);

      _plane.default.fromPoints(out.planes[3], out.vertices[0], out.vertices[5], out.vertices[4]);

      _plane.default.fromPoints(out.planes[4], out.vertices[2], out.vertices[0], out.vertices[3]);

      _plane.default.fromPoints(out.planes[0], out.vertices[7], out.vertices[5], out.vertices[6]);
    };
  }();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,