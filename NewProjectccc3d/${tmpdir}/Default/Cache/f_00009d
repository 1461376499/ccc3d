(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../platform/debug.js", "../utils/js.js", "../utils/misc.js", "./class.js", "./utils/attribute.js", "../components/missing-script.js", "../default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../platform/debug.js"), require("../utils/js.js"), require("../utils/misc.js"), require("./class.js"), require("./utils/attribute.js"), require("../components/missing-script.js"), require("../default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.debug, global.js, global.misc, global._class, global.attribute, global.missingScript, global.defaultConstants);
    global.deserialize = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _debug, js, misc, _class, Attr, _missingScript, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  js = _interopRequireWildcard(js);
  misc = _interopRequireWildcard(misc);
  _class = _interopRequireDefault(_class);
  Attr = _interopRequireWildcard(Attr);
  _missingScript = _interopRequireDefault(_missingScript);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  // HELPERS
  // tslint:disable: no-shadowed-variable

  /**
   * @en Contains information collected during deserialization
   * @zh 包含反序列化时的一些信息。
   * @class Details
   *
   */
  var Details = /*#__PURE__*/function () {
    function Details() {
      var _this = this;

      _classCallCheck(this, Details);

      this.uuidList = void 0;
      this.uuidObjList = void 0;
      this.uuidPropList = void 0;
      this._stillUseUrl = void 0;

      /**
       * list of the depends assets' uuid
       * @property {String[]} uuidList
       */
      this.uuidList = [];
      /**
       * the obj list whose field needs to load asset by uuid
       * @property {Object[]} uuidObjList
       */

      this.uuidObjList = [];
      /**
       * the corresponding field name which referenced to the asset
       * @property {String[]} uuidPropList
       */

      this.uuidPropList = []; // TODO - DELME since 2.0

      this._stillUseUrl = js.createMap(true);

      if (_defaultConstants.EDITOR || _defaultConstants.TEST) {
        this.assignAssetsBy = function (getter) {
          // ignore this._stillUseUrl
          for (var i = 0, len = _this.uuidList.length; i < len; i++) {
            var uuid = _this.uuidList[i];
            var obj = _this.uuidObjList[i];
            var prop = _this.uuidPropList[i];
            obj[prop] = getter(uuid);
          }
        };
      }
    }
    /**
     * @zh
     * 重置。
     * @method reset
     */


    _createClass(Details, [{
      key: "reset",
      value: function reset() {
        this.uuidList.length = 0;
        this.uuidObjList.length = 0;
        this.uuidPropList.length = 0;
        js.clear(this._stillUseUrl);
      } // /**
      //  * @method getUuidOf
      //  * @param {Object} obj
      //  * @param {String} propName
      //  * @return {String}
      //  */
      // getUuidOf (obj, propName) {
      //     for (var i = 0; i < this.uuidObjList.length; i++) {
      //         if (this.uuidObjList[i] === obj && this.uuidPropList[i] === propName) {
      //             return this.uuidList[i];
      //         }
      //     }
      //     return "";
      // }

      /**
       * @method push
       * @param {Object} obj
       * @param {String} propName
       * @param {String} uuid
       */

    }, {
      key: "push",
      value: function push(obj, propName, uuid, _stillUseUrl) {
        if (_stillUseUrl) {
          this._stillUseUrl[this.uuidList.length] = true;
        }

        this.uuidList.push(uuid);
        this.uuidObjList.push(obj);
        this.uuidPropList.push(propName);
      }
    }]);

    return Details;
  }();

  Details.pool = void 0;
  Details.pool = new js.Pool(function (obj) {
    obj.reset();
  }, 10);

  Details.pool.get = function () {
    return this._get() || new Details();
  }; // IMPLEMENT OF DESERIALIZATION


  function _dereference(self) {
    // 这里不采用遍历反序列化结果的方式，因为反序列化的结果如果引用到复杂的外部库，很容易堆栈溢出。
    var deserializedList = self.deserializedList;
    var idPropList = self._idPropList;
    var idList = self._idList;
    var idObjList = self._idObjList;
    var onDereferenced = self._classFinder && self._classFinder.onDereferenced;
    var i;
    var propName;
    var id;

    if (_defaultConstants.EDITOR && onDereferenced) {
      for (i = 0; i < idList.length; i++) {
        propName = idPropList[i];
        id = idList[i];
        idObjList[i][propName] = deserializedList[id];
        onDereferenced(deserializedList, id, idObjList[i], propName);
      }
    } else {
      for (i = 0; i < idList.length; i++) {
        propName = idPropList[i];
        id = idList[i];
        idObjList[i][propName] = deserializedList[id];
      }
    }
  }

  function compileObjectTypeJit(sources, defaultValue, accessorToSet, propNameLiteralToSet, assumeHavePropIfIsValue, stillUseUrl) {
    if (defaultValue instanceof cc.ValueType) {
      // fast case
      if (!assumeHavePropIfIsValue) {
        sources.push('if(prop){');
      }

      var ctorCode = js.getClassName(defaultValue);
      sources.push("s._deserializeTypedObject(o".concat(accessorToSet, ",prop,").concat(ctorCode, ");"));

      if (!assumeHavePropIfIsValue) {
        sources.push('}else o' + accessorToSet + '=null;');
      }
    } else {
      sources.push('if(prop){');
      sources.push('s._deserializeObjField(o,prop,' + propNameLiteralToSet + (_defaultConstants.EDITOR || _defaultConstants.TEST ? ',t&&o,' : ',null,') + !!stillUseUrl + ');');
      sources.push('}else o' + accessorToSet + '=null;');
    }
  }

  var compileDeserialize = _defaultConstants.SUPPORT_JIT ? function (self, klass) {
    var TYPE = Attr.DELIMETER + 'type';
    var EDITOR_ONLY = Attr.DELIMETER + 'editorOnly';
    var DEFAULT = Attr.DELIMETER + 'default';
    var SAVE_URL_AS_ASSET = Attr.DELIMETER + 'saveUrlAsAsset';
    var FORMERLY_SERIALIZED_AS = Attr.DELIMETER + 'formerlySerializedAs';
    var attrs = Attr.getClassAttrs(klass);
    var props = klass.__values__; // self, obj, serializedData, klass, target

    var sources = ['var prop;'];
    var fastMode = misc.BUILTIN_CLASSID_RE.test(js._getClassId(klass)); // sources.push('var vb,vn,vs,vo,vu,vf;');    // boolean, number, string, object, undefined, function
    // tslint:disable-next-line: prefer-for-of

    for (var p = 0; p < props.length; p++) {
      var propName = props[p];

      if ((_defaultConstants.PREVIEW || _defaultConstants.EDITOR && self._ignoreEditorOnly) && attrs[propName + EDITOR_ONLY]) {
        continue; // skip editor only if in preview
      }

      var accessorToSet = void 0;
      var propNameLiteralToSet = void 0;

      if (_class.default.IDENTIFIER_RE.test(propName)) {
        propNameLiteralToSet = '"' + propName + '"';
        accessorToSet = '.' + propName;
      } else {
        propNameLiteralToSet = _class.default.escapeForJS(propName);
        accessorToSet = '[' + propNameLiteralToSet + ']';
      }

      var accessorToGet = accessorToSet;

      if (attrs[propName + FORMERLY_SERIALIZED_AS]) {
        var propNameToRead = attrs[propName + FORMERLY_SERIALIZED_AS];

        if (_class.default.IDENTIFIER_RE.test(propNameToRead)) {
          accessorToGet = '.' + propNameToRead;
        } else {
          accessorToGet = '[' + _class.default.escapeForJS(propNameToRead) + ']';
        }
      }

      sources.push('prop=d' + accessorToGet + ';');
      sources.push("if(typeof ".concat(_defaultConstants.JSB ? '(prop)' : 'prop', "!==\"undefined\"){"));
      var stillUseUrl = attrs[propName + SAVE_URL_AS_ASSET]; // function undefined object(null) string boolean number

      var defaultValue = _class.default.getDefault(attrs[propName + DEFAULT]);

      if (fastMode) {
        var isPrimitiveType = void 0;
        var userType = attrs[propName + TYPE];

        if (defaultValue === undefined && userType) {
          isPrimitiveType = userType === cc.String || userType === cc.Integer || userType === cc.Float || userType === cc.Boolean;
        } else {
          var defaultType = _typeof(defaultValue);

          isPrimitiveType = defaultType === 'string' && !stillUseUrl || defaultType === 'number' || defaultType === 'boolean';
        }

        if (isPrimitiveType) {
          sources.push("o".concat(accessorToSet, "=prop;"));
        } else {
          compileObjectTypeJit(sources, defaultValue, accessorToSet, propNameLiteralToSet, true, stillUseUrl);
        }
      } else {
        sources.push("if(typeof ".concat(_defaultConstants.JSB ? '(prop)' : 'prop', "!==\"object\"){") + 'o' + accessorToSet + '=prop;' + '}else{');
        compileObjectTypeJit(sources, defaultValue, accessorToSet, propNameLiteralToSet, false, stillUseUrl);
        sources.push('}');
      }

      sources.push('}');
    }

    if (cc.js.isChildClassOf(klass, cc._BaseNode) || cc.js.isChildClassOf(klass, cc.Component)) {
      if (_defaultConstants.PREVIEW || _defaultConstants.EDITOR && self._ignoreEditorOnly) {
        var mayUsedInPersistRoot = js.isChildClassOf(klass, cc.Node);

        if (mayUsedInPersistRoot) {
          sources.push('d._id&&(o._id=d._id);');
        }
      } else {
        sources.push('d._id&&(o._id=d._id);');
      }
    }

    if (props[props.length - 1] === '_$erialized') {
      // deep copy original serialized data
      sources.push('o._$erialized=JSON.parse(JSON.stringify(d));'); // parse the serialized data as primitive javascript object, so its __id__ will be dereferenced

      sources.push('s._deserializePrimitiveObject(o._$erialized,d);');
    }

    return Function('s', 'o', 'd', 'k', 't', sources.join(''));
  } : function (self, klass) {
    var fastMode = misc.BUILTIN_CLASSID_RE.test(js._getClassId(klass));
    var shouldCopyId = cc.js.isChildClassOf(klass, cc._BaseNode) || cc.js.isChildClassOf(klass, cc.Component);
    var shouldCopyRawData;
    var simpleProps = [];
    var simplePropsToRead = simpleProps;
    var advancedProps = [];
    var advancedPropsToRead = advancedProps;
    var advancedPropsUseUrl = [];
    var advancedPropsValueType = [];

    (function () {
      var props = klass.__values__;
      shouldCopyRawData = props[props.length - 1] === '_$erialized';
      var attrs = Attr.getClassAttrs(klass);
      var TYPE = Attr.DELIMETER + 'type';
      var DEFAULT = Attr.DELIMETER + 'default';
      var SAVE_URL_AS_ASSET = Attr.DELIMETER + 'saveUrlAsAsset';
      var FORMERLY_SERIALIZED_AS = Attr.DELIMETER + 'formerlySerializedAs'; // tslint:disable-next-line: prefer-for-of

      for (var p = 0; p < props.length; p++) {
        var propName = props[p];
        var propNameToRead = propName;

        if (attrs[propName + FORMERLY_SERIALIZED_AS]) {
          propNameToRead = attrs[propName + FORMERLY_SERIALIZED_AS];
        }

        var stillUseUrl = attrs[propName + SAVE_URL_AS_ASSET]; // function undefined object(null) string boolean number

        var defaultValue = _class.default.getDefault(attrs[propName + DEFAULT]);

        var isPrimitiveType = false;

        if (fastMode) {
          var userType = attrs[propName + TYPE];

          if (defaultValue === undefined && userType) {
            isPrimitiveType = userType === cc.String || userType === cc.Integer || userType === cc.Float || userType === cc.Boolean;
          } else {
            var defaultType = _typeof(defaultValue);

            isPrimitiveType = defaultType === 'string' && !stillUseUrl || defaultType === 'number' || defaultType === 'boolean';
          }
        }

        if (fastMode && isPrimitiveType) {
          if (propNameToRead !== propName && simplePropsToRead === simpleProps) {
            simplePropsToRead = simpleProps.slice();
          }

          simpleProps.push(propName);

          if (simplePropsToRead !== simpleProps) {
            simplePropsToRead.push(propNameToRead);
          }
        } else {
          if (propNameToRead !== propName && advancedPropsToRead === advancedProps) {
            advancedPropsToRead = advancedProps.slice();
          }

          advancedProps.push(propName);

          if (advancedPropsToRead !== advancedProps) {
            advancedPropsToRead.push(propNameToRead);
          }

          advancedPropsUseUrl.push(stillUseUrl);
          advancedPropsValueType.push(defaultValue instanceof cc.ValueType && defaultValue.constructor);
        }
      }
    })();

    return function (s, o, d, k, t) {
      for (var i = 0; i < simpleProps.length; ++i) {
        var prop = d[simplePropsToRead[i]];

        if (prop !== undefined) {
          o[simpleProps[i]] = prop;
        }
      }

      for (var _i = 0; _i < advancedProps.length; ++_i) {
        var propName = advancedProps[_i];
        var _prop = d[advancedPropsToRead[_i]];

        if (_prop === undefined) {
          continue;
        }

        if (!fastMode && _typeof(_prop) !== 'object') {
          o[propName] = _prop;
        } else {
          // fastMode (so will not simpleProp) or object
          var valueTypeCtor = advancedPropsValueType[_i];

          if (valueTypeCtor) {
            if (fastMode || _prop) {
              s._deserializeTypedObject(o[propName], _prop, valueTypeCtor);
            } else {
              o[propName] = null;
            }
          } else {
            if (_prop) {
              s._deserializeObjField(o, _prop, propName, _defaultConstants.EDITOR || _defaultConstants.TEST ? t && o : null, advancedPropsUseUrl[_i]);
            } else {
              o[propName] = null;
            }
          }
        }
      }

      if (shouldCopyId && d._id) {
        o._id = d._id;
      }

      if (shouldCopyRawData) {
        // deep copy original serialized data
        o._$erialized = JSON.parse(JSON.stringify(d)); // parse the serialized data as primitive javascript object, so its __id__ will be dereferenced

        s._deserializePrimitiveObject(o._$erialized, d);
      }
    };
  };

  function unlinkUnusedPrefab(self, serialized, obj) {
    var uuid = serialized.asset && serialized.asset.__uuid__;

    if (uuid) {
      var last = self.result.uuidList.length - 1;

      if (self.result.uuidList[last] === uuid && self.result.uuidObjList[last] === obj && self.result.uuidPropList[last] === 'asset') {
        self.result.uuidList.pop();
        self.result.uuidObjList.pop();
        self.result.uuidPropList.pop();
      } else {
        (0, _debug.warnID)(4935);
      }
    }
  }

  function _deserializeFireClass(self, obj, serialized, klass, target) {
    var deserialize;

    if (klass.hasOwnProperty('__deserialize__')) {
      deserialize = klass.__deserialize__;
    } else {
      deserialize = compileDeserialize(self, klass); // if (TEST && !isPhantomJS) {
      //     log(deserialize);
      // }

      js.value(klass, '__deserialize__', deserialize, true);
    }

    deserialize(self, obj, serialized, klass, target); // if preview or build worker

    if (_defaultConstants.PREVIEW || _defaultConstants.EDITOR && self._ignoreEditorOnly) {
      if (klass === cc._PrefabInfo && !obj.sync) {
        unlinkUnusedPrefab(self, serialized, obj);
      }
    }

    if (obj.__postDeserialize) {
      obj.__postDeserialize();
    }
  } // function _compileTypedObject (accessor, klass, ctorCode) {
  //     if (klass === cc.Vec2) {
  //         return `{` +
  //                     `o${accessor}.x=prop.x||0;` +
  //                     `o${accessor}.y=prop.y||0;` +
  //                `}`;
  //     }
  //     else if (klass === cc.Color) {
  //         return `{` +
  //                    `o${accessor}.r=prop.r||0;` +
  //                    `o${accessor}.g=prop.g||0;` +
  //                    `o${accessor}.b=prop.b||0;` +
  //                    `o${accessor}.a=(prop.a===undefined?255:prop.a);` +
  //                `}`;
  //     }
  //     else if (klass === cc.Size) {
  //         return `{` +
  //                    `o${accessor}.width=prop.width||0;` +
  //                    `o${accessor}.height=prop.height||0;` +
  //                `}`;
  //     }
  //     else {
  //         return `s._deserializeTypedObject(o${accessor},prop,${ctorCode});`;
  //     }
  // }
  // tslint:disable-next-line: class-name


  var _Deserializer = /*#__PURE__*/function () {
    function _Deserializer(result, target, classFinder, customEnv, ignoreEditorOnly) {
      _classCallCheck(this, _Deserializer);

      this.result = void 0;
      this.customEnv = void 0;
      this.deserializedList = void 0;
      this.deserializedData = void 0;
      this._classFinder = void 0;
      this._target = void 0;
      this._ignoreEditorOnly = void 0;
      this._idList = void 0;
      this._idObjList = void 0;
      this._idPropList = void 0;
      this.result = result;
      this.customEnv = customEnv;
      this.deserializedList = [];
      this.deserializedData = null;
      this._classFinder = classFinder;

      if (_defaultConstants.DEV) {
        this._target = target;
        this._ignoreEditorOnly = ignoreEditorOnly;
      }

      this._idList = [];
      this._idObjList = [];
      this._idPropList = [];
    }

    _createClass(_Deserializer, [{
      key: "deserialize",
      value: function deserialize(jsonObj) {
        if (Array.isArray(jsonObj)) {
          var jsonArray = jsonObj;
          var refCount = jsonArray.length;
          this.deserializedList.length = refCount; // deserialize

          for (var i = 0; i < refCount; i++) {
            if (jsonArray[i]) {
              if (_defaultConstants.EDITOR || _defaultConstants.TEST) {
                var mainTarget = i === 0 && this._target;
                this.deserializedList[i] = this._deserializeObject(jsonArray[i], false, mainTarget, this.deserializedList, '' + i);
              } else {
                this.deserializedList[i] = this._deserializeObject(jsonArray[i], false);
              }
            }
          }

          this.deserializedData = refCount > 0 ? this.deserializedList[0] : []; //// callback
          // for (var j = 0; j < refCount; j++) {
          //    if (referencedList[j].onAfterDeserialize) {
          //        referencedList[j].onAfterDeserialize();
          //    }
          // }
        } else {
          this.deserializedList.length = 1;

          if (_defaultConstants.EDITOR || _defaultConstants.TEST) {
            this.deserializedData = jsonObj ? this._deserializeObject(jsonObj, false, this._target, this.deserializedList, '0') : null;
          } else {
            this.deserializedData = jsonObj ? this._deserializeObject(jsonObj, false) : null;
          }

          this.deserializedList[0] = this.deserializedData; //// callback
          // if (deserializedData.onAfterDeserialize) {
          //    deserializedData.onAfterDeserialize();
          // }
        } // dereference


        _dereference(this);

        return this.deserializedData;
      }
      /**
       * @param {Object} serialized - The obj to deserialize, must be non-nil
       * @param {Boolean} _stillUseUrl
       * @param {Object} [target=null] - editor only
       * @param {Object} [owner] - debug only
       * @param {String} [propName] - debug only
       */

    }, {
      key: "_deserializeObject",
      value: function _deserializeObject(serialized, _stillUseUrl, target, owner, propName) {
        var prop;
        var obj = null; // the obj to return

        var klass = null;
        var type = serialized.__type__;

        if (type === 'TypedArray') {
          var array = serialized.array; // @ts-ignore

          obj = new window[serialized.ctor](array.length);

          for (var i = 0; i < array.length; ++i) {
            obj[i] = array[i];
          }

          return obj;
        } else if (type) {
          // @ts-ignore
          var deserializeByType = function deserializeByType() {
            if ((_defaultConstants.EDITOR || _defaultConstants.TEST) && target) {
              // use target
              if (!(target instanceof klass)) {
                (0, _debug.warnID)(5300, js.getClassName(target), klass);
              }

              obj = target;
            } else {
              // instantiate a new object
              obj = new klass();
            }

            if (obj._deserialize) {
              obj._deserialize(serialized.content, self);

              return;
            }

            if (cc.Class._isCCClass(klass)) {
              _deserializeFireClass(self, obj, serialized, klass, target);
            } else {
              self._deserializeTypedObject(obj, serialized, klass);
            }
          }; // @ts-ignore


          var checkDeserializeByType = function checkDeserializeByType() {
            try {
              deserializeByType();
            } catch (e) {
              console.error('deserialize ' + klass.name + ' failed, ' + e.stack);
              klass = _missingScript.default.getMissingWrapper(type, serialized);
              cc.deserialize.reportMissingClass(type);
              deserializeByType();
            }
          };

          // Type Object (including CCClass)
          klass = this._classFinder(type, serialized, owner, propName);

          if (!klass) {
            var notReported = this._classFinder === js._getClassById;

            if (notReported) {
              cc.deserialize.reportMissingClass(type);
            }

            return null;
          }

          var self = this;

          if (_defaultConstants.EDITOR && cc.js.isChildClassOf(klass, cc.Component)) {
            checkDeserializeByType();
          } else {
            deserializeByType();
          }
        } else if (!Array.isArray(serialized)) {
          // embedded primitive javascript object
          obj = (_defaultConstants.EDITOR || _defaultConstants.TEST) && target || {};

          this._deserializePrimitiveObject(obj, serialized);
        } else {
          // Array
          if ((_defaultConstants.EDITOR || _defaultConstants.TEST) && target) {
            target.length = serialized.length;
            obj = target;
          } else {
            obj = new Array(serialized.length);
          }

          for (var _i2 = 0; _i2 < serialized.length; _i2++) {
            prop = serialized[_i2];

            if (_typeof(prop) === 'object' && prop) {
              if (_defaultConstants.EDITOR || _defaultConstants.TEST) {
                this._deserializeObjField(obj, prop, '' + _i2, target && obj, _stillUseUrl);
              } else {
                this._deserializeObjField(obj, prop, '' + _i2, null, _stillUseUrl);
              }
            } else {
              obj[_i2] = prop;
            }
          }
        }

        return obj;
      } // 和 _deserializeObject 不同的地方在于会判断 id 和 uuid

    }, {
      key: "_deserializeObjField",
      value: function _deserializeObjField(obj, jsonObj, propName, target, _stillUseUrl) {
        var id = jsonObj.__id__;

        if (id === undefined) {
          var uuid = jsonObj.__uuid__;

          if (uuid) {
            // if (ENABLE_TARGET) {
            // 这里不做任何操作，因为有可能调用者需要知道依赖哪些 asset。
            // 调用者使用 uuidList 时，可以判断 obj[propName] 是否为空，为空则表示待进一步加载，
            // 不为空则只是表明依赖关系。
            //    if (target && target[propName] && target[propName]._uuid === uuid) {
            //        console.assert(obj[propName] === target[propName]);
            //        return;
            //    }
            // }
            this.result.push(obj, propName, uuid, _stillUseUrl);
          } else {
            if (_defaultConstants.EDITOR || _defaultConstants.TEST) {
              obj[propName] = this._deserializeObject(jsonObj, _stillUseUrl, target && target[propName], obj, propName);
            } else {
              obj[propName] = this._deserializeObject(jsonObj, _stillUseUrl);
            }
          }
        } else {
          var dObj = this.deserializedList[id];

          if (dObj) {
            obj[propName] = dObj;
          } else {
            this._idList.push(id);

            this._idObjList.push(obj);

            this._idPropList.push(propName);
          }
        }
      }
    }, {
      key: "_deserializePrimitiveObject",
      value: function _deserializePrimitiveObject(instance, serialized) {
        var self = this;

        for (var propName in serialized) {
          if (serialized.hasOwnProperty(propName)) {
            var prop = serialized[propName];

            if (_typeof(prop) !== 'object') {
              if (propName !== '__type__'
              /* && k != '__id__'*/
              ) {
                  instance[propName] = prop;
                }
            } else {
              if (prop) {
                if (_defaultConstants.EDITOR || _defaultConstants.TEST) {
                  self._deserializeObjField(instance, prop, propName, self._target && instance);
                } else {
                  self._deserializeObjField(instance, prop, propName);
                }
              } else {
                instance[propName] = null;
              }
            }
          }
        }
      }
    }, {
      key: "_deserializeTypedObject",
      value: function _deserializeTypedObject(instance, serialized, klass) {
        if (klass === cc.Vec2) {
          instance.x = serialized.x || 0;
          instance.y = serialized.y || 0;
          return;
        } else if (klass === cc.Vec3) {
          instance.x = serialized.x || 0;
          instance.y = serialized.y || 0;
          instance.z = serialized.z || 0;
          return;
        } else if (klass === cc.Color) {
          instance.r = serialized.r || 0;
          instance.g = serialized.g || 0;
          instance.b = serialized.b || 0;
          var a = serialized.a;
          instance.a = a === undefined ? 255 : a;
          return;
        } else if (klass === cc.Size) {
          instance.width = serialized.width || 0;
          instance.height = serialized.height || 0;
          return;
        }

        var DEFAULT = Attr.DELIMETER + 'default';
        var attrs = Attr.getClassAttrs(klass);
        var fastDefinedProps = klass.__props__ || Object.keys(instance); // 遍历 instance，如果具有类型，才不会把 __type__ 也读进来
        // tslint:disable-next-line: prefer-for-of

        for (var i = 0; i < fastDefinedProps.length; i++) {
          var propName = fastDefinedProps[i];
          var value = serialized[propName];

          if (value === undefined || !serialized.hasOwnProperty(propName)) {
            // not serialized,
            // recover to default value in ValueType, because eliminated properties equals to
            // its default value in ValueType, not default value in user class
            value = _class.default.getDefault(attrs[propName + DEFAULT]);
          }

          if (_typeof(value) !== 'object') {
            instance[propName] = value;
          } else if (value) {
            if (_defaultConstants.EDITOR || _defaultConstants.TEST) {
              this._deserializeObjField(instance, value, propName, this._target && instance);
            } else {
              this._deserializeObjField(instance, value, propName);
            }
          } else {
            instance[propName] = null;
          }
        }
      }
    }]);

    return _Deserializer;
  }();

  _Deserializer.pool = void 0;
  _Deserializer.pool = new js.Pool(function (obj) {
    obj.result = null;
    obj.customEnv = null;
    obj.deserializedList.length = 0;
    obj.deserializedData = null;
    obj._classFinder = null;

    if (_defaultConstants.DEV) {
      obj._target = null;
    }

    obj._idList.length = 0;
    obj._idObjList.length = 0;
    obj._idPropList.length = 0;
  }, 1); // @ts-ignore

  _Deserializer.pool.get = function (result, target, classFinder, customEnv, ignoreEditorOnly) {
    var cache = this._get();

    if (cache) {
      cache.result = result;
      cache.customEnv = customEnv;
      cache._classFinder = classFinder;

      if (_defaultConstants.DEV) {
        cache._target = target;
        cache._ignoreEditorOnly = ignoreEditorOnly;
      }

      return cache;
    } else {
      return new _Deserializer(result, target, classFinder, customEnv, ignoreEditorOnly);
    }
  };
  /**
   * @module cc
   */

  /**
   * @en Deserialize json to cc.Asset
   * @zh 将 JSON 反序列化为对象实例。
   *
   * 当指定了 target 选项时，如果 target 引用的其它 asset 的 uuid 不变，则不会改变 target 对 asset 的引用，
   * 也不会将 uuid 保存到 result 对象中。
   *
   * @method deserialize
   * @param {String|Object} data - the serialized cc.Asset json string or json object.
   * @param {Details} [details] - additional loading result
   * @param {Object} [options]
   * @return {object} the main data(asset)
   */


  function deserialize(data, details, options) {
    options = options || {};
    var classFinder = options.classFinder || js._getClassById; // 启用 createAssetRefs 后，如果有 url 属性则会被统一强制设置为 { uuid: 'xxx' }，必须后面再特殊处理

    var createAssetRefs = options.createAssetRefs || cc.sys.platform === cc.sys.EDITOR_CORE;
    var target = (_defaultConstants.EDITOR || _defaultConstants.TEST) && options.target;
    var customEnv = options.customEnv;
    var ignoreEditorOnly = options.ignoreEditorOnly;

    if (typeof data === 'string') {
      data = JSON.parse(data);
    } // var oldJson = JSON.stringify(data, null, 2);


    var tempDetails = !details;
    details = details || Details.pool.get(); // @ts-ignore

    var deserializer = _Deserializer.pool.get(details, target, classFinder, customEnv, ignoreEditorOnly);

    cc.game._isCloning = true;
    var res = deserializer.deserialize(data);
    cc.game._isCloning = false;

    _Deserializer.pool.put(deserializer);

    if (createAssetRefs) {
      details.assignAssetsBy(EditorExtends.serialize.asAsset);
    }

    if (tempDetails) {
      Details.pool.put(details);
    } // var afterJson = JSON.stringify(data, null, 2);
    // if (oldJson !== afterJson) {
    //     throw new Error('JSON SHOULD not changed');
    // }


    return res;
  }

  deserialize.Details = Details;

  deserialize.reportMissingClass = function (id) {
    if (_defaultConstants.EDITOR && EditorExtends.UuidUtils.isUuid(id)) {
      id = EditorExtends.UuidUtils.decompressUuid(id);
      (0, _debug.warnID)(5301, id);
    } else {
      (0, _debug.warnID)(5302, id);
    }
  };

  cc.deserialize = deserialize;
  var _default = deserialize;
  _exports.default = _default;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,