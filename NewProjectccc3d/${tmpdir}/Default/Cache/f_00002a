(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../define.js", "../window.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../define.js"), require("../window.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.define, global.window);
    global.webgl2Window = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _define, _window) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.WebGL2GFXWindow = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  var WebGL2GFXWindow = /*#__PURE__*/function (_GFXWindow) {
    _inherits(WebGL2GFXWindow, _GFXWindow);

    function WebGL2GFXWindow() {
      _classCallCheck(this, WebGL2GFXWindow);

      return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2GFXWindow).apply(this, arguments));
    }

    _createClass(WebGL2GFXWindow, [{
      key: "initialize",
      value: function initialize(info) {
        if (info.title !== undefined) {
          this._title = info.title;
        }

        if (info.left !== undefined) {
          this._left = info.left;
        }

        if (info.top !== undefined) {
          this._top = info.top;
        }

        if (info.isOffscreen !== undefined) {
          this._isOffscreen = info.isOffscreen;
        }

        this._width = info.width;
        this._height = info.height;
        this._nativeWidth = this._width;
        this._nativeHeight = this._height;
        this._colorFmt = info.colorFmt;
        this._depthStencilFmt = info.depthStencilFmt;
        this._renderPass = this._device.createRenderPass({
          colorAttachments: [{
            format: this._colorFmt,
            loadOp: _define.GFXLoadOp.CLEAR,
            storeOp: _define.GFXStoreOp.STORE,
            sampleCount: 1,
            beginLayout: _define.GFXTextureLayout.COLOR_ATTACHMENT_OPTIMAL,
            endLayout: _define.GFXTextureLayout.COLOR_ATTACHMENT_OPTIMAL
          }],
          depthStencilAttachment: {
            format: this._depthStencilFmt,
            depthLoadOp: _define.GFXLoadOp.CLEAR,
            depthStoreOp: _define.GFXStoreOp.STORE,
            stencilLoadOp: _define.GFXLoadOp.CLEAR,
            stencilStoreOp: _define.GFXStoreOp.STORE,
            sampleCount: 1,
            beginLayout: _define.GFXTextureLayout.DEPTH_STENCIL_ATTACHMENT_OPTIMAL,
            endLayout: _define.GFXTextureLayout.DEPTH_STENCIL_ATTACHMENT_OPTIMAL
          }
        });
        var colorViews = [];

        if (this._isOffscreen) {
          if (this._colorFmt !== _define.GFXFormat.UNKNOWN) {
            this._colorTex = this._device.createTexture({
              type: _define.GFXTextureType.TEX2D,
              usage: _define.GFXTextureUsageBit.COLOR_ATTACHMENT | _define.GFXTextureUsageBit.SAMPLED,
              format: this._colorFmt,
              width: this._width,
              height: this._height,
              depth: 1,
              arrayLayer: 1,
              mipLevel: 1,
              flags: _define.GFXTextureFlagBit.NONE
            });
            this._colorTexView = this._device.createTextureView({
              texture: this._colorTex,
              type: _define.GFXTextureViewType.TV2D,
              format: this._colorFmt,
              baseLevel: 0,
              levelCount: 1,
              baseLayer: 0,
              layerCount: 1
            });
            colorViews.push(this._colorTexView);
          }

          if (this._depthStencilFmt !== _define.GFXFormat.UNKNOWN) {
            this._depthStencilTex = this._device.createTexture({
              type: _define.GFXTextureType.TEX2D,
              usage: _define.GFXTextureUsageBit.DEPTH_STENCIL_ATTACHMENT,
              format: this._depthStencilFmt,
              width: this._width,
              height: this._height,
              depth: 1,
              arrayLayer: 1,
              mipLevel: 1,
              flags: _define.GFXTextureFlagBit.NONE
            });
            this._depthStencilTexView = this._device.createTextureView({
              texture: this._depthStencilTex,
              type: _define.GFXTextureViewType.TV2D,
              format: this._depthStencilFmt,
              baseLevel: 0,
              levelCount: 1,
              baseLayer: 0,
              layerCount: 1
            });
          }
        }

        this._framebuffer = this._device.createFramebuffer({
          renderPass: this._renderPass,
          colorViews: colorViews,
          depthStencilView: this._depthStencilTexView,
          isOffscreen: this._isOffscreen
        });
        this._status = _define.GFXStatus.SUCCESS;
        return true;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        if (this._depthStencilTexView) {
          this._depthStencilTexView.destroy();

          this._depthStencilTexView = null;
        }

        if (this._depthStencilTex) {
          this._depthStencilTex.destroy();

          this._depthStencilTex = null;
        }

        if (this._colorTexView) {
          this._colorTexView.destroy();

          this._colorTexView = null;
        }

        if (this._colorTex) {
          this._colorTex.destroy();

          this._colorTex = null;
        }

        if (this._framebuffer) {
          this._framebuffer.destroy();

          this._framebuffer = null;
        }

        if (this._renderPass) {
          this._renderPass.destroy();

          this._renderPass = null;
        }

        this._status = _define.GFXStatus.UNREADY;
      }
    }, {
      key: "resize",
      value: function resize(width, height) {
        this._width = width;
        this._height = height;

        if (width > this._nativeWidth || height > this._nativeHeight) {
          this._nativeWidth = width;
          this._nativeHeight = height;

          if (this._depthStencilTex) {
            this._depthStencilTex.resize(width, height);

            this._depthStencilTexView.destroy();

            this._depthStencilTexView.initialize({
              texture: this._depthStencilTex,
              type: _define.GFXTextureViewType.TV2D,
              format: this._depthStencilFmt
            });
          }

          if (this._colorTex) {
            this._colorTex.resize(width, height);

            this._colorTexView.destroy();

            this._colorTexView.initialize({
              texture: this._colorTex,
              type: _define.GFXTextureViewType.TV2D,
              format: this._colorFmt
            });
          }

          if (this._framebuffer && this._framebuffer.isOffscreen) {
            this._framebuffer.destroy();

            this._framebuffer.initialize({
              renderPass: this._renderPass,
              colorViews: [this._colorTexView],
              depthStencilView: this._depthStencilTexView
            });
          }
        }
      }
    }]);

    return WebGL2GFXWindow;
  }(_window.GFXWindow);

  _exports.WebGL2GFXWindow = WebGL2GFXWindow;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,