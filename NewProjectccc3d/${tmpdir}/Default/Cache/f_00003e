(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../assets/material.js", "../../geometry/index.js", "../../math/index.js", "../../pipeline/define.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../assets/material.js"), require("../../geometry/index.js"), require("../../math/index.js"), require("../../pipeline/define.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.material, global.index, global.index, global.define);
    global.planarShadows = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _material, _index, _index2, _define) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.PlanarShadows = void 0;

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var _forward = new _index2.Vec3(0, 0, -1);

  var _v3 = new _index2.Vec3();

  var _ab = new _index.aabb();

  var _qt = new _index2.Quat();

  var PlanarShadows = /*#__PURE__*/function () {
    _createClass(PlanarShadows, [{
      key: "enabled",
      set: function set(enable) {
        this._enabled = enable;

        if (this._scene.mainLight) {
          this.updateDirLight(this._scene.mainLight);
        }
      },
      get: function get() {
        return this._enabled;
      }
    }, {
      key: "normal",
      set: function set(val) {
        _index2.Vec3.copy(this._normal, val);

        if (this._scene.mainLight) {
          this.updateDirLight(this._scene.mainLight);
        }
      },
      get: function get() {
        return this._normal;
      }
    }, {
      key: "distance",
      set: function set(val) {
        this._distance = val;

        if (this._scene.mainLight) {
          this.updateDirLight(this._scene.mainLight);
        }
      },
      get: function get() {
        return this._distance;
      }
    }, {
      key: "shadowColor",
      set: function set(color) {
        _index2.Color.toArray(this._data, color, _define.UBOShadow.SHADOW_COLOR_OFFSET);

        this._globalBindings.buffer.update(this.data);
      }
    }, {
      key: "matLight",
      get: function get() {
        return this._matLight;
      }
    }, {
      key: "data",
      get: function get() {
        return this._data;
      }
    }]);

    function PlanarShadows(scene) {
      _classCallCheck(this, PlanarShadows);

      this._scene = void 0;
      this._enabled = false;
      this._normal = new _index2.Vec3(0, 1, 0);
      this._distance = 0;
      this._matLight = new _index2.Mat4();
      this._data = Float32Array.from([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, // matLightPlaneProj
      0.0, 0.0, 0.0, 0.3 // shadowColor
      ]);
      this._globalBindings = void 0;
      this._record = new Map();
      this._pendingModels = [];
      this._material = void 0;
      this._instancingMaterial = void 0;
      this._scene = scene;
      this._globalBindings = scene.root.pipeline.globalBindings.get(_define.UBOShadow.BLOCK.name);
      this._material = new _material.Material();

      this._material.initialize({
        effectName: 'pipeline/planar-shadow'
      });

      this._instancingMaterial = new _material.Material();

      this._instancingMaterial.initialize({
        effectName: 'pipeline/planar-shadow',
        defines: {
          USE_INSTANCING: true
        }
      });
    }

    _createClass(PlanarShadows, [{
      key: "updateSphereLight",
      value: function updateSphereLight(light) {
        light.node.getWorldPosition(_v3);
        var n = this._normal;
        var d = this._distance + 0.001; // avoid z-fighting

        var NdL = _index2.Vec3.dot(n, _v3);

        var lx = _v3.x;
        var ly = _v3.y;
        var lz = _v3.z;
        var nx = n.x;
        var ny = n.y;
        var nz = n.z;
        var m = this._matLight;
        m.m00 = NdL - d - lx * nx;
        m.m01 = -ly * nx;
        m.m02 = -lz * nx;
        m.m03 = -nx;
        m.m04 = -lx * ny;
        m.m05 = NdL - d - ly * ny;
        m.m06 = -lz * ny;
        m.m07 = -ny;
        m.m08 = -lx * nz;
        m.m09 = -ly * nz;
        m.m10 = NdL - d - lz * nz;
        m.m11 = -nz;
        m.m12 = lx * d;
        m.m13 = ly * d;
        m.m14 = lz * d;
        m.m15 = NdL;

        _index2.Mat4.toArray(this.data, this._matLight);

        this._globalBindings.buffer.update(this.data);
      }
    }, {
      key: "updateDirLight",
      value: function updateDirLight(light) {
        light.node.getWorldRotation(_qt);

        _index2.Vec3.transformQuat(_v3, _forward, _qt);

        var n = this._normal;
        var d = this._distance + 0.001; // avoid z-fighting

        var NdL = _index2.Vec3.dot(n, _v3);

        var scale = 1 / NdL;
        var lx = _v3.x * scale;
        var ly = _v3.y * scale;
        var lz = _v3.z * scale;
        var nx = n.x;
        var ny = n.y;
        var nz = n.z;
        var m = this._matLight;
        m.m00 = 1 - nx * lx;
        m.m01 = -nx * ly;
        m.m02 = -nx * lz;
        m.m03 = 0;
        m.m04 = -ny * lx;
        m.m05 = 1 - ny * ly;
        m.m06 = -ny * lz;
        m.m07 = 0;
        m.m08 = -nz * lx;
        m.m09 = -nz * ly;
        m.m10 = 1 - nz * lz;
        m.m11 = 0;
        m.m12 = lx * d;
        m.m13 = ly * d;
        m.m14 = lz * d;
        m.m15 = 1;

        _index2.Mat4.toArray(this.data, this._matLight, _define.UBOShadow.MAT_LIGHT_PLANE_PROJ_OFFSET);

        this._globalBindings.buffer.update(this.data);
      }
    }, {
      key: "updateCommandBuffers",
      value: function updateCommandBuffers(frstm, stamp) {
        this._pendingModels.length = 0;

        if (!this._scene.mainLight) {
          return;
        }

        var models = this._scene.models;

        for (var i = 0; i < models.length; i++) {
          var model = models[i];

          if (!model.enabled || !model.node || !model.castShadow) {
            continue;
          }

          if (model.worldBounds) {
            _index.aabb.transform(_ab, model.worldBounds, this._matLight);

            if (!_index.intersect.aabb_frustum(_ab, frstm)) {
              continue;
            }
          }

          var data = this._record.get(model);

          if (data && !!data.instancedBuffer !== model.isInstancingEnabled) {
            this.destroyShadowData(model);
            data = undefined;
          }

          if (!data) {
            data = this.createShadowData(model);

            this._record.set(model, data);
          }

          if (model.updateStamp !== stamp) {
            model.updateUBOs(stamp);
          } // for those outside the frustum


          this._pendingModels.push(data);
        }
      }
    }, {
      key: "recordCommandBuffer",
      value: function recordCommandBuffer(cmdBuff) {
        var models = this._pendingModels;
        var modelLen = models.length;
        var buffer = this._instancingMaterial.passes[0].instancedBuffer;

        if (buffer) {
          buffer.clear();
        }

        for (var i = 0; i < modelLen; i++) {
          var _models$i = models[i],
              model = _models$i.model,
              psos = _models$i.psos,
              instancedBuffer = _models$i.instancedBuffer;

          for (var j = 0; j < psos.length; j++) {
            var submodel = model.getSubModel(j);
            var pso = psos[j];

            if (instancedBuffer) {
              instancedBuffer.merge(submodel, model.instancedAttributes, pso);
            } else {
              var ia = submodel.inputAssembler;
              cmdBuff.bindPipelineState(pso);
              cmdBuff.bindBindingLayout(pso.pipelineLayout.layouts[0]);
              cmdBuff.bindInputAssembler(ia);
              cmdBuff.draw(ia);
            }
          }
        }

        if (buffer && buffer.pso) {
          buffer.uploadBuffers();
          cmdBuff.bindPipelineState(buffer.pso);
          cmdBuff.bindBindingLayout(buffer.pso.pipelineLayout.layouts[0]);

          for (var b = 0; b < buffer.instances.length; ++b) {
            var instance = buffer.instances[b];

            if (!instance.count) {
              continue;
            }

            cmdBuff.bindInputAssembler(instance.ia);
            cmdBuff.draw(instance.ia);
          }
        }
      }
    }, {
      key: "createShadowData",
      value: function createShadowData(model) {
        var psos = [];
        var material = model.isInstancingEnabled ? this._instancingMaterial : this._material;

        for (var i = 0; i < model.subModelNum; i++) {
          // @ts-ignore TS2445
          var pso = model.createPipelineState(material.passes[0], i);
          model.insertImplantPSO(pso); // add back to model to sync binding layouts

          pso.pipelineLayout.layouts[0].update();
          psos.push(pso);
        }

        return {
          model: model,
          psos: psos,
          instancedBuffer: material.passes[0].instancedBuffer
        };
      }
    }, {
      key: "destroyShadowData",
      value: function destroyShadowData(model) {
        var data = this._record.get(model);

        if (!data) {
          return;
        }

        var material = data.instancedBuffer ? this._instancingMaterial : this._material;

        for (var i = 0; i < data.psos.length; i++) {
          var pso = data.psos[i];
          model.removeImplantPSO(pso);
          material.passes[0].destroyPipelineState(pso);
        }

        this._record["delete"](model);
      }
    }, {
      key: "onGlobalPipelineStateChanged",
      value: function onGlobalPipelineStateChanged() {
        var it = this._record.keys();

        var res = it.next();

        while (!res.done) {
          this.destroyShadowData(res.value);
          res = it.next();
        }

        this._record.clear();
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.onGlobalPipelineStateChanged();

        this._material.destroy();
      }
    }]);

    return PlanarShadows;
  }();

  _exports.PlanarShadows = PlanarShadows;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,