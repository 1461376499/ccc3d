(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../3d/framework/camera-component.js", "../../assets/render-texture.js", "../../data/class-decorator.js", "../../director.js", "../../game.js", "../../gfx/define.js", "../../math/index.js", "../../platform/view.js", "../../platform/visible-rect.js", "../../scene-graph/node.js", "../../value-types/index.js", "../component.js", "./ui-transform-component.js", "../../default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../3d/framework/camera-component.js"), require("../../assets/render-texture.js"), require("../../data/class-decorator.js"), require("../../director.js"), require("../../game.js"), require("../../gfx/define.js"), require("../../math/index.js"), require("../../platform/view.js"), require("../../platform/visible-rect.js"), require("../../scene-graph/node.js"), require("../../value-types/index.js"), require("../component.js"), require("./ui-transform-component.js"), require("../../default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.cameraComponent, global.renderTexture, global.classDecorator, global.director, global.game, global.define, global.index, global.view, global.visibleRect, global.node, global.index, global.component, global.uiTransformComponent, global.defaultConstants);
    global.canvasComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _cameraComponent, _renderTexture, _classDecorator, _director, _game, _define, _index, _view, _visibleRect, _node, _index2, _component, _uiTransformComponent, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.CanvasComponent = void 0;
  _visibleRect = _interopRequireDefault(_visibleRect);

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  var _worldPos = new _index.Vec3();

  var CanvasClearFlag = (0, _index2.Enum)({
    SOLID_COLOR: _define.GFXClearFlag.ALL,
    DEPTH_ONLY: _define.GFXClearFlag.DEPTH_STENCIL,
    DONT_CLEAR: _define.GFXClearFlag.NONE
  });
  var RenderMode = (0, _index2.Enum)({
    OVERLAY: 0,
    INTERSPERSE: 1
  });
  /**
   * @en
   * The root node of UI.
   * Provide an aligned window for all child nodes, also provides ease of setting screen adaptation policy interfaces from the editor.
   * Line-of-sight range is -999 to 1000.
   *
   * @zh
   * 作为 UI 根节点，为所有子节点提供对齐视窗，另外提供屏幕适配策略接口，方便从编辑器设置。
   * 注：由于本节点的尺寸会跟随屏幕拉伸，所以 anchorPoint 只支持 (0.5, 0.5)，否则适配不同屏幕时坐标会有偏差。
   * UI 的视距范围是 -999 ～ 1000.
   */

  var CanvasComponent = (_dec = (0, _classDecorator.ccclass)('cc.CanvasComponent'), _dec2 = (0, _classDecorator.help)('i18n:cc.CanvasComponent'), _dec3 = (0, _classDecorator.executionOrder)(100), _dec4 = (0, _classDecorator.requireComponent)(_uiTransformComponent.UITransformComponent), _dec5 = (0, _classDecorator.menu)('UI/Canvas'), _dec6 = (0, _classDecorator.property)({
    type: CanvasClearFlag,
    tooltip: '清理屏幕缓冲标记'
  }), _dec7 = (0, _classDecorator.property)({
    tooltip: '清理颜色缓冲区后的颜色'
  }), _dec8 = (0, _classDecorator.property)({
    type: RenderMode,
    tooltip: 'Canvas 渲染模式，intersperse 下可以指定 Canvas 与场景中的相机的渲染顺序，overlay 下 Canvas 会在所有场景相机渲染完成后渲染。\n注意：注意：场景里的相机（包括 Canvas 内置的相机）必须有一个的 ClearFlag 选择 SOLID_COLOR，否则在移动端可能会出现闪屏'
  }), _dec9 = (0, _classDecorator.property)({
    tooltip: '相机排序优先级。当 RenderMode 为 intersperse 时，指定与其它相机的渲染顺序，当 RenderMode 为 overlay 时，指定跟其余 Canvas 做排序使用。需要对多 Canvas 设定 priority 以免出现不同平台下的闪屏问题。'
  }), _dec10 = (0, _classDecorator.property)({
    type: _renderTexture.RenderTexture,
    tooltip: '目标渲染纹理'
  }), _dec11 = (0, _classDecorator.property)({
    type: CanvasClearFlag
  }), _dec12 = (0, _classDecorator.property)({
    type: RenderMode
  }), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = _dec5(_class = (0, _classDecorator.executeInEditMode)(_class = (0, _classDecorator.disallowMultiple)(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
    _inherits(CanvasComponent, _Component);

    _createClass(CanvasComponent, [{
      key: "clearFlag",

      /**
       * @en
       * The flags to clear the built in camera.
       *
       * @zh
       * 清理屏幕缓冲标记。
       */
      get: function get() {
        return this._clearFlag;
      },
      set: function set(val) {
        this._clearFlag = val;

        if (this._camera) {
          this._camera.clearFlag = this._clearFlag;
        }
      }
      /**
       * @en
       * The color clearing value of the builtin camera.
       *
       * @zh
       * 内置相机的颜色缓冲默认值。
       */

    }, {
      key: "color",
      get: function get() {
        return this._color;
      },
      set: function set(val) {
        _index.Color.copy(this._color, val);

        if (this._camera) {
          this._camera.clearColor.r = val.r / 255;
          this._camera.clearColor.g = val.g / 255;
          this._camera.clearColor.b = val.b / 255;
          this._camera.clearColor.a = val.a / 255;
        }
      }
      /**
       * @en
       * The render mode of Canvas.
       * When you choose the mode of INTERSPERSE, You can specify the rendering order of the Canvas with the camera in the scene.
       * When you choose the mode of OVERLAY, the builtin camera of Canvas will render after all scene cameras are rendered.
       * NOTE: The cameras in the scene (including the Canvas built-in camera) must have a ClearFlag selection of SOLID_COLOR,
       * otherwise a splash screen may appear on the mobile device.
       *
       * @zh
       * Canvas 渲染模式。
       * intersperse 下可以指定 Canvas 与场景中的相机的渲染顺序，overlay 下 Canvas 会在所有场景相机渲染完成后渲染。
       * 注意：场景里的相机（包括 Canvas 内置的相机）必须有一个的 ClearFlag 选择 SOLID_COLOR，否则在移动端可能会出现闪屏。
       */

    }, {
      key: "renderMode",
      get: function get() {
        return this._renderMode;
      },
      set: function set(val) {
        this._renderMode = val;

        if (this._camera) {
          this._camera.priority = this._getViewPriority();
        }
      }
      /**
       * @en
       * Camera render priority.
       * When you choose the RenderModel of INTERSPERSE, specifies the render order with other cameras.
       * When you choose the RenderModel of OVERLAY, specifies sorting with the rest of the Canvas.
       *
       * @zh
       * 相机渲染优先级。当 RenderMode 为 intersperse 时，指定与其它相机的渲染顺序，当 RenderMode 为 overlay 时，指定跟其余 Canvas 做排序使用。需要对多 Canvas 设定 priority 以免出现不同平台下的闪屏问题。
       *
       * @param value - 渲染优先级。
       */

    }, {
      key: "priority",
      get: function get() {
        return this._priority;
      },
      set: function set(val) {
        this._priority = val;

        if (this._camera) {
          this._camera.priority = this._getViewPriority();
        }

        if (_director.director.root && _director.director.root.ui) {
          _director.director.root.ui.sortScreens();
        }
      }
      /**
       * @en
       * Set the target render texture.
       *
       * @zh
       * 设置目标渲染纹理。
       */

    }, {
      key: "targetTexture",
      get: function get() {
        return this._targetTexture;
      },
      set: function set(value) {
        if (this._targetTexture === value) {
          return;
        }

        var old = this._targetTexture;
        this._targetTexture = value;

        this._checkTargetTextureEvent(old);

        this._updateTargetTexture();
      }
    }, {
      key: "visibility",
      get: function get() {
        if (this._camera) {
          return this._camera.view.visibility;
        }

        return -1;
      }
    }, {
      key: "camera",
      get: function get() {
        return this._camera;
      } // /**
      //  * @zh
      //  * 当前激活的画布组件，场景同一时间只能有一个激活的画布。
      //  */
      // public static instance: CanvasComponent | null = null;

    }]);

    function CanvasComponent() {
      var _this;

      _classCallCheck(this, CanvasComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(CanvasComponent).call(this));

      _initializerDefineProperty(_this, "_priority", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_targetTexture", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_clearFlag", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_color", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_renderMode", _descriptor5, _assertThisInitialized(_this));

      _this._thisOnResized = void 0;
      _this._camera = null;
      _this._pos = new _index.Vec3();
      _this._thisOnResized = _this.alignWithScreen.bind(_assertThisInitialized(_this)); // // TODO:maybe remove when multiple scene
      // if (!CanvasComponent.instance){
      //     CanvasComponent.instance = this;
      // }

      return _this;
    }

    _createClass(CanvasComponent, [{
      key: "__preload",
      value: function __preload() {
        var cameraNode = new _node.Node('UICamera_' + this.node.name);
        cameraNode.setPosition(0, 0, 1000);

        if (!_defaultConstants.EDITOR) {
          this._camera = _director.director.root.createCamera();

          this._camera.initialize({
            name: 'ui_' + this.node.name,
            node: cameraNode,
            projection: _cameraComponent.CameraComponent.ProjectionType.ORTHO,
            priority: this._getViewPriority(),
            flows: ['UIFlow']
          });

          this._camera.fov = 45;
          this._camera.clearFlag = this.clearFlag;
          this._camera.farClip = 2000;
          this._camera.viewport = new _index.Rect(0, 0, 1, 1);
          this.color = this._color;

          if (this._targetTexture) {
            var win = this._targetTexture.getGFXWindow();

            this._camera.changeTargetWindow(win);
          }
        }

        if (_defaultConstants.EDITOR) {
          _director.director.on(_director.Director.EVENT_AFTER_UPDATE, this.alignWithScreen, this);
        }

        _view.view.on('design-resolution-changed', this._thisOnResized); // this.applySettings();


        this.alignWithScreen();

        _director.director.root.ui.addScreen(this);
      }
    }, {
      key: "onEnable",
      value: function onEnable() {
        if (this._camera) {
          _director.director.root.ui.renderScene.addCamera(this._camera);
        }
      }
    }, {
      key: "onDisable",
      value: function onDisable() {
        if (this._camera) {
          _director.director.root.ui.renderScene.removeCamera(this._camera);
        }
      }
    }, {
      key: "onDestroy",
      value: function onDestroy() {
        _director.director.root.ui.removeScreen(this);

        if (this._camera) {
          _director.director.root.destroyCamera(this._camera);
        }

        if (_defaultConstants.EDITOR) {
          _director.director.off(_director.Director.EVENT_AFTER_UPDATE, this.alignWithScreen, this);
        }

        if (this._targetTexture) {
          this._targetTexture.off('resize');
        }

        _view.view.off('design-resolution-changed', this._thisOnResized); // if (CanvasComponent.instance === this) {
        //     CanvasComponent.instance = null;
        // }

      }
      /**
       * @en
       * Screen alignment.
       *
       * @zh
       * 屏幕对齐。
       */

    }, {
      key: "alignWithScreen",
      value: function alignWithScreen() {
        var nodeSize;
        var designSize;
        this.node.getPosition(this._pos);
        var visibleSize = _visibleRect.default;

        if (_defaultConstants.EDITOR) {
          // nodeSize = designSize = cc.engine.getDesignResolutionSize();
          nodeSize = designSize = _view.view.getDesignResolutionSize();

          _index.Vec3.set(_worldPos, designSize.width * 0.5, designSize.height * 0.5, 1);
        } else {
          nodeSize = visibleSize;
          designSize = _view.view.getDesignResolutionSize();

          var policy = _view.view.getResolutionPolicy(); // const clipTopRight = !this.fitHeight && !this.fitWidth;


          var clipTopRight = policy === cc.view._rpNoBorder;
          var offsetX = 0;
          var offsetY = 0;

          if (clipTopRight) {
            // offset the canvas to make it in the center of screen
            offsetX = (designSize.width - visibleSize.width) * 0.5;
            offsetY = (designSize.height - visibleSize.height) * 0.5;
          }

          _index.Vec3.set(_worldPos, visibleSize.width * 0.5 + offsetX, visibleSize.height * 0.5 + offsetY, 0);
        }

        if (!this._pos.equals(_worldPos)) {
          this.node.setPosition(_worldPos);
        }

        if (this.node.width !== nodeSize.width) {
          this.node.width = nodeSize.width;
        }

        if (this.node.height !== nodeSize.height) {
          this.node.height = nodeSize.height;
        }

        this.node.getWorldPosition(_worldPos);
        var camera = this._camera;

        if (camera) {
          if (this._targetTexture) {
            camera.setFixedSize(visibleSize.width, visibleSize.height);
            camera.orthoHeight = visibleSize.height / 2;
          } else {
            var size = _game.game.canvas;
            camera.resize(size.width, size.height);
            camera.orthoHeight = _game.game.canvas.height / _view.view.getScaleY() / 2;
          }

          camera.node.setPosition(_worldPos.x, _worldPos.y, 1000);
          camera.update();
        }
      }
    }, {
      key: "_checkTargetTextureEvent",
      value: function _checkTargetTextureEvent(old) {
        var _this2 = this;

        var resizeFunc = function resizeFunc(win) {
          if (_this2._camera) {
            _this2._camera.setFixedSize(win.width, win.height);
          }
        };

        if (old) {
          old.off('resize');
        }

        if (this._targetTexture) {
          this._targetTexture.on('resize', resizeFunc, this);
        }
      }
    }, {
      key: "_updateTargetTexture",
      value: function _updateTargetTexture() {
        if (!this._camera) {
          return;
        }

        var camera = this._camera;

        if (!this._targetTexture) {
          camera.changeTargetWindow();
          camera.orthoHeight = _game.game.canvas.height / _view.view.getScaleY() / 2;
          camera.isWindowSize = true;
        } else {
          var win = this._targetTexture.getGFXWindow();

          camera.changeTargetWindow(win);
          camera.orthoHeight = _visibleRect.default.height / 2;
          camera.isWindowSize = false;
        }
      }
    }, {
      key: "_getViewPriority",
      value: function _getViewPriority() {
        return this._renderMode === RenderMode.OVERLAY ? this._priority | 1 << 30 : this._priority;
      }
    }]);

    return CanvasComponent;
  }(_component.Component), _temp), (_applyDecoratedDescriptor(_class2.prototype, "clearFlag", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "clearFlag"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "color", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "color"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "renderMode", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "renderMode"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "priority", [_dec9], Object.getOwnPropertyDescriptor(_class2.prototype, "priority"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "targetTexture", [_dec10], Object.getOwnPropertyDescriptor(_class2.prototype, "targetTexture"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_priority", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_targetTexture", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_clearFlag", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return CanvasClearFlag.DONT_CLEAR;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_color", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _index.Color(0, 0, 0, 0);
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_renderMode", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return RenderMode.OVERLAY;
    }
  })), _class2)) || _class) || _class) || _class) || _class) || _class) || _class) || _class);
  _exports.CanvasComponent = CanvasComponent;
  cc.CanvasComponent = CanvasComponent;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,