(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../data/class-decorator.js", "../gfx/define.js", "../gfx/device.js", "../platform/debug.js", "./asset-enum.js", "./texture-base.js", "../default-constants.js", "../platform/macro.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../data/class-decorator.js"), require("../gfx/define.js"), require("../gfx/device.js"), require("../platform/debug.js"), require("./asset-enum.js"), require("./texture-base.js"), require("../default-constants.js"), require("../platform/macro.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.classDecorator, global.define, global.device, global.debug, global.assetEnum, global.textureBase, global.defaultConstants, global.macro);
    global.simpleTexture = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _classDecorator, _define, _device, _debug, _assetEnum, _textureBase, _defaultConstants, _macro) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleTexture = void 0;

  var _dec, _class, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  var _regions = [{
    buffOffset: 0,
    buffStride: 0,
    buffTexHeight: 0,
    texOffset: {
      x: 0,
      y: 0,
      z: 0
    },
    texExtent: {
      width: 1,
      height: 1,
      depth: 1
    },
    texSubres: {
      baseMipLevel: 1,
      levelCount: 1,
      baseArrayLayer: 0,
      layerCount: 1
    }
  }];

  function getMipLevel(width, height) {
    var size = Math.max(width, height);
    var level = 0;

    while (size) {
      size >>= 1;
      level++;
    }

    return level;
  }

  function isPOT(n) {
    return n && (n & n - 1) === 0;
  }

  function canGenerateMipmap(device, w, h) {
    var needCheckPOT = device.gfxAPI === _device.GFXAPI.WEBGL;

    if (needCheckPOT) {
      return isPOT(w) && isPOT(h);
    }

    return true;
  }
  /**
   * 简单贴图基类。
   * 简单贴图内部创建了 GFX 贴图和该贴图上的 GFX 贴图视图。
   * 简单贴图允许指定不同的 Mipmap 层级。
   */


  var SimpleTexture = (_dec = (0, _classDecorator.ccclass)('cc.SimpleTexture'), _dec(_class = (_temp = /*#__PURE__*/function (_TextureBase) {
    _inherits(SimpleTexture, _TextureBase);

    function SimpleTexture() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, SimpleTexture);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SimpleTexture)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this._gfxTexture = null;
      _this._gfxTextureView = null;
      _this._mipmapLevel = 1;
      return _this;
    }

    _createClass(SimpleTexture, [{
      key: "getGFXTexture",

      /**
       * 获取此贴图底层的 GFX 贴图对象。
       */
      value: function getGFXTexture() {
        return this._gfxTexture;
      }
    }, {
      key: "getGFXTextureView",
      value: function getGFXTextureView() {
        return this._gfxTextureView;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this._tryDestroyTexture();

        return _get(_getPrototypeOf(SimpleTexture.prototype), "destroy", this).call(this);
      }
      /**
       * 更新 0 级 Mipmap。
       */

    }, {
      key: "updateImage",
      value: function updateImage() {
        this.updateMipmaps(0);
      }
      /**
       * 更新指定层级范围内的 Mipmap。当 Mipmap 数据发生了改变时应调用此方法提交更改。
       * 若指定的层级范围超出了实际已有的层级范围，只有覆盖的那些层级范围会被更新。
       * @param firstLevel 起始层级。
       * @param count 层级数量。
       */

    }, {
      key: "updateMipmaps",
      value: function updateMipmaps() {
        var firstLevel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var count = arguments.length > 1 ? arguments[1] : undefined;
      }
      /**
       * 上传图像数据到指定层级的 Mipmap 中。
       * 图像的尺寸影响 Mipmap 的更新范围：
       * - 当图像是 `ArrayBuffer` 时，图像的尺寸必须和 Mipmap 的尺寸一致；否则，
       * - 若图像的尺寸与 Mipmap 的尺寸相同，上传后整个 Mipmap 的数据将与图像数据一致；
       * - 若图像的尺寸小于指定层级 Mipmap 的尺寸（不管是长或宽），则从贴图左上角开始，图像尺寸范围内的 Mipmap 会被更新；
       * - 若图像的尺寸超出了指定层级 Mipmap 的尺寸（不管是长或宽），都将引起错误。
       * @param source 图像数据源。
       * @param level Mipmap 层级。
       * @param arrayIndex 数组索引。
       */

    }, {
      key: "uploadData",
      value: function uploadData(source) {
        var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var arrayIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

        if (!this._gfxTexture || this._gfxTexture.mipLevel <= level) {
          return;
        }

        var gfxDevice = this._getGFXDevice();

        if (!gfxDevice) {
          return;
        }

        var region = _regions[0];
        region.texExtent.width = this._gfxTexture.width >> level;
        region.texExtent.height = this._gfxTexture.height >> level;
        region.texSubres.baseMipLevel = level;
        region.texSubres.baseArrayLayer = arrayIndex;

        if (_defaultConstants.DEV) {
          if (source instanceof HTMLElement) {
            if (source.height > region.texExtent.height || source.width > region.texExtent.width) {
              (0, _debug.error)("Image source(".concat(this.name, ") bounds override."));
            }
          }
        }

        if (ArrayBuffer.isView(source)) {
          gfxDevice.copyBuffersToTexture([source], this._gfxTexture, _regions);
        } else {
          gfxDevice.copyTexImagesToTexture([source], this._gfxTexture, _regions);
        }
      }
    }, {
      key: "_assignImage",
      value: function _assignImage(image, level, arrayIndex) {
        var _this2 = this;

        var upload = function upload() {
          var data = image.data;

          if (!data) {
            return;
          }

          _this2.uploadData(data, level, arrayIndex);

          _this2._checkTextureLoaded();

          if (_macro.macro.CLEANUP_IMAGE_CACHE) {
            cc.loader.release(image);
          }
        };

        if (image.loaded) {
          upload();
        } else {
          image.once('load', function () {
            upload();
          });

          if (!this.isCompressed) {
            var defaultImg = cc.builtinResMgr.get('black-texture').image;
            this.uploadData(defaultImg.data, level, arrayIndex);
          }

          cc.textureUtil.postLoadImage(image);
        }
      }
    }, {
      key: "_checkTextureLoaded",
      value: function _checkTextureLoaded() {
        this._textureReady();
      }
    }, {
      key: "_textureReady",
      value: function _textureReady() {
        this.loaded = true;
        this.emit('load');
      }
      /**
       * Set mipmap level of this texture.
       * The value is passes as presumed info to `this._getGfxTextureCreateInfo()`.
       * @param value The mipmap level.
       */

    }, {
      key: "_setMipmapLevel",
      value: function _setMipmapLevel(value) {
        this._mipmapLevel = value < 1 ? 1 : value;
      }
      /**
       * @en This method is overrided by derived classes to provide GFX texture info.
       * @zh 这个方法被派生类重写以提供GFX纹理信息。
       * @param presumed The presumed GFX texture info.
       */

    }, {
      key: "_getGfxTextureCreateInfo",
      value: function _getGfxTextureCreateInfo(presumed) {
        return null;
      }
      /**
       * This method is overrided by derived classes to provide GFX texture view info.
       * @param presumed The presumed GFX texture view info.
       */

    }, {
      key: "_getGfxTextureViewCreateInfo",
      value: function _getGfxTextureViewCreateInfo(texture) {
        return null;
      }
    }, {
      key: "_tryReset",
      value: function _tryReset() {
        this._tryDestroyTexture();

        var device = this._getGFXDevice();

        if (!device) {
          return;
        }

        this._createTexture(device);
      }
    }, {
      key: "_createTexture",
      value: function _createTexture(device) {
        var flags = _define.GFXTextureFlagBit.NONE;

        if (this._mipFilter !== _assetEnum.Filter.NONE && canGenerateMipmap(device, this._width, this._height)) {
          this._mipmapLevel = getMipLevel(this._width, this._height);
          flags = _define.GFXTextureFlagBit.GEN_MIPMAP;
        }

        var textureCreateInfo = this._getGfxTextureCreateInfo({
          usage: _define.GFXTextureUsageBit.SAMPLED | _define.GFXTextureUsageBit.TRANSFER_DST,
          format: this._getGFXFormat(),
          mipLevel: this._mipmapLevel,
          flags: flags
        });

        if (!textureCreateInfo) {
          return;
        }

        var texture = device.createTexture(textureCreateInfo);

        var textureViewCreateInfo = this._getGfxTextureViewCreateInfo({
          texture: texture,
          format: this._getGFXFormat()
        });

        if (!textureViewCreateInfo) {
          texture.destroy();
          return;
        }

        var view = device.createTextureView(textureViewCreateInfo);

        if (!view) {
          texture.destroy();
          return;
        }

        this._gfxTexture = texture;
        this._gfxTextureView = view;
      }
    }, {
      key: "_tryDestroyTexture",
      value: function _tryDestroyTexture() {
        if (this._gfxTexture) {
          this._gfxTexture.destroy();

          this._gfxTexture = null;
        }

        if (this._gfxTextureView) {
          this._gfxTextureView.destroy();

          this._gfxTextureView = null;
        }
      }
    }, {
      key: "mipmapLevel",
      get: function get() {
        return this._mipmapLevel;
      }
    }]);

    return SimpleTexture;
  }(_textureBase.TextureBase), _temp)) || _class);
  _exports.SimpleTexture = SimpleTexture;
  cc.SimpleTexture = SimpleTexture;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,