(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../platform/debug.js", "../utils/js.js", "../utils/misc.js", "../value-types/index.js", "../value-types/enum.js", "./utils/attribute.js", "./utils/preprocess-class.js", "./utils/requiring-frame.js", "../default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../platform/debug.js"), require("../utils/js.js"), require("../utils/misc.js"), require("../value-types/index.js"), require("../value-types/enum.js"), require("./utils/attribute.js"), require("./utils/preprocess-class.js"), require("./utils/requiring-frame.js"), require("../default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.debug, global.js, global.misc, global.index, global._enum, global.attribute, global.preprocessClass, global.requiringFrame, global.defaultConstants);
    global._class = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _debug, js, _misc, _index, _enum, attributeUtils, _preprocessClass, RF, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  js = _interopRequireWildcard(js);
  attributeUtils = _interopRequireWildcard(attributeUtils);
  RF = _interopRequireWildcard(RF);

  function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  var DELIMETER = attributeUtils.DELIMETER;
  var BUILTIN_ENTRIES = ['name', 'extends', 'mixins', 'ctor', '__ctor__', 'properties', 'statics', 'editor', '__ES6__'];
  var INVALID_STATICS_DEV = ['name', '__ctors__', '__props__', 'arguments', 'call', 'apply', 'caller', 'length', 'prototype'];

  function pushUnique(array, item) {
    if (array.indexOf(item) < 0) {
      array.push(item);
    }
  }

  var deferredInitializer = {
    // Configs for classes which needs deferred initialization
    datas: null,
    // register new class
    // data - {cls: cls, cb: properties, mixins: options.mixins}
    push: function push(data) {
      if (this.datas) {
        this.datas.push(data);
      } else {
        this.datas = [data]; // start a new timer to initialize

        var self = this;
        setTimeout(function () {
          self.init();
        }, 0);
      }
    },
    init: function init() {
      var datas = this.datas;

      if (datas) {
        for (var i = 0; i < datas.length; ++i) {
          var data = datas[i];
          var cls = data.cls;
          var properties = data.props;

          if (typeof properties === 'function') {
            properties = properties();
          }

          var _name = js.getClassName(cls);

          if (properties) {
            declareProperties(cls, _name, properties, cls.$super, data.mixins);
          } else {
            (0, _debug.errorID)(3633, _name);
          }
        }

        this.datas = null;
      }
    }
  }; // both getter and prop must register the name into __props__ array

  function appendProp(cls, name) {
    if (_defaultConstants.DEV) {
      // if (!IDENTIFIER_RE.test(name)) {
      //    error('The property name "' + name + '" is not compliant with JavaScript naming standards');
      //    return;
      // }
      if (name.indexOf('.') !== -1) {
        (0, _debug.errorID)(3634);
        return;
      }
    }

    pushUnique(cls.__props__, name);
  }

  var tmpArray = [];

  function defineProp(cls, className, propName, val, es6) {
    var defaultValue = val["default"];

    if (_defaultConstants.DEV) {
      if (!es6) {
        // check default object value
        if (_typeof(defaultValue) === 'object' && defaultValue) {
          if (Array.isArray(defaultValue)) {
            // check array empty
            if (defaultValue.length > 0) {
              (0, _debug.errorID)(3635, className, propName, propName);
              return;
            }
          } else if (!(0, _misc.isPlainEmptyObj_DEV)(defaultValue)) {
            // check cloneable
            if (!(0, _misc.cloneable_DEV)(defaultValue)) {
              (0, _debug.errorID)(3636, className, propName, propName);
              return;
            }
          }
        }
      } // check base prototype to avoid name collision


      if (CCClass.getInheritanceChain(cls).some(function (x) {
        return x.prototype.hasOwnProperty(propName);
      })) {
        (0, _debug.errorID)(3637, className, propName, className);
        return;
      }
    } // set default value


    attributeUtils.setClassAttr(cls, propName, 'default', defaultValue);
    appendProp(cls, propName); // apply attributes

    var attrs = parseAttributes(cls, val, className, propName, false);

    if (attrs) {
      var onAfterProp = tmpArray;

      for (var i = 0; i < attrs.length; i++) {
        var attr = attrs[i];
        attributeUtils.attr(cls, propName, attr);

        if (attr.serializable === false) {
          pushUnique(cls.__values__, propName);
        } // register callback


        if (attr._onAfterProp) {
          onAfterProp.push(attr._onAfterProp);
        }
      } // call callback


      for (var c = 0; c < onAfterProp.length; c++) {
        onAfterProp[c](cls, propName);
      }

      tmpArray.length = 0;
      attrs.length = 0;
    }
  }

  function defineGetSet(cls, name, propName, val, es6) {
    var getter = val.get;
    var setter = val.set;
    var proto = cls.prototype;
    var d = Object.getOwnPropertyDescriptor(proto, propName);
    var setterUndefined = !d;

    if (getter) {
      if (_defaultConstants.DEV && !es6 && d && d.get) {
        (0, _debug.errorID)(3638, name, propName);
        return;
      }

      var attrs = parseAttributes(cls, val, name, propName, true);

      for (var i = 0; i < attrs.length; i++) {
        attributeUtils.attr(cls, propName, attrs[i]);
      }

      attrs.length = 0;
      attributeUtils.setClassAttr(cls, propName, 'serializable', false);

      if (_defaultConstants.DEV) {
        // 不论是否 visible 都要添加到 props，否则 asset watcher 不能正常工作
        appendProp(cls, propName);
      }

      if (!es6) {
        js.get(proto, propName, getter, setterUndefined, setterUndefined);
      }

      if (_defaultConstants.EDITOR || _defaultConstants.DEV) {
        attributeUtils.setClassAttr(cls, propName, 'hasGetter', true); // 方便 editor 做判断
      }
    }

    if (setter) {
      if (!es6) {
        if (_defaultConstants.DEV && d && d.set) {
          return (0, _debug.errorID)(3640, name, propName);
        }

        js.set(proto, propName, setter, setterUndefined, setterUndefined);
      }

      if (_defaultConstants.EDITOR || _defaultConstants.DEV) {
        attributeUtils.setClassAttr(cls, propName, 'hasSetter', true); // 方便 editor 做判断
      }
    }
  }

  function getDefault(defaultVal) {
    if (typeof defaultVal === 'function') {
      if (_defaultConstants.EDITOR) {
        try {
          return defaultVal();
        } catch (e) {
          cc._throw(e);

          return undefined;
        }
      } else {
        return defaultVal();
      }
    }

    return defaultVal;
  }

  function mixinWithInherited(dest, src, filter) {
    for (var prop in src) {
      if (!dest.hasOwnProperty(prop) && (!filter || filter(prop))) {
        Object.defineProperty(dest, prop, js.getPropertyDescriptor(src, prop));
      }
    }
  }

  function doDefine(className, baseClass, mixins, options) {
    var shouldAddProtoCtor;
    var __ctor__ = options.__ctor__;
    var ctor = options.ctor;
    var __es6__ = options.__ES6__;

    if (_defaultConstants.DEV) {
      // check ctor
      var ctorToUse = __ctor__ || ctor;

      if (ctorToUse) {
        if (CCClass._isCCClass(ctorToUse)) {
          (0, _debug.errorID)(3618, className);
        } else if (typeof ctorToUse !== 'function') {
          (0, _debug.errorID)(3619, className);
        } else {
          if (baseClass && /\bprototype.ctor\b/.test(ctorToUse)) {
            if (__es6__) {
              (0, _debug.errorID)(3651, className || '');
            } else {
              (0, _debug.warnID)(3600, className || '');
              shouldAddProtoCtor = true;
            }
          }
        }

        if (ctor) {
          if (__ctor__) {
            (0, _debug.errorID)(3649, className);
          } else {
            ctor = options.ctor = _validateCtor_DEV(ctor, baseClass, className, options);
          }
        }
      }
    }

    var ctors;
    var fireClass;

    if (__es6__) {
      ctors = [ctor];
      fireClass = ctor;
    } else {
      ctors = __ctor__ ? [__ctor__] : _getAllCtors(baseClass, mixins, options);
      fireClass = _createCtor(ctors, baseClass, className, options); // extend - Create a new Class that inherits from this Class

      js.value(fireClass, 'extend', function (options) {
        options["extends"] = this;
        return CCClass(options);
      }, true);
    }

    js.value(fireClass, '__ctors__', ctors.length > 0 ? ctors : null, true);
    var prototype = fireClass.prototype;

    if (baseClass) {
      if (!__es6__) {
        js.extend(fireClass, baseClass); // 这里会把父类的 __props__ 复制给子类

        prototype = fireClass.prototype; // get extended prototype
      }

      fireClass.$super = baseClass;

      if (_defaultConstants.DEV && shouldAddProtoCtor) {
        prototype.ctor = function () {};
      }
    }

    if (mixins) {
      var _loop = function _loop(m) {
        var mixin = mixins[m];
        mixinWithInherited(prototype, mixin.prototype); // mixin statics (this will also copy editor attributes for component)

        mixinWithInherited(fireClass, mixin, function (prop) {
          return mixin.hasOwnProperty(prop) && (!_defaultConstants.DEV || INVALID_STATICS_DEV.indexOf(prop) < 0);
        }); // mixin attributes

        if (CCClass._isCCClass(mixin)) {
          mixinWithInherited(attributeUtils.getClassAttrs(fireClass).constructor.prototype, attributeUtils.getClassAttrs(mixin).constructor.prototype);
        }
      };

      for (var m = mixins.length - 1; m >= 0; m--) {
        _loop(m);
      } // restore constuctor overridden by mixin


      prototype.constructor = fireClass;
    }

    if (!__es6__) {
      prototype.__initProps__ = compileProps;
    }

    js.setClassName(className, fireClass);
    return fireClass;
  }

  function define(className, baseClass, mixins, options) {
    var Component = cc.Component;
    var frame = RF.peek();

    if (frame && js.isChildClassOf(baseClass, Component)) {
      // project component
      if (js.isChildClassOf(frame.cls, Component)) {
        (0, _debug.errorID)(3615);
        return null;
      }

      if (_defaultConstants.DEV && frame.uuid && className) {// warnID(3616, className);
      }

      className = className || frame.script;
    }

    if (_defaultConstants.DEV) {
      if (!options.__ES6__) {
        (0, _debug.warnID)(3661, className);
      }
    }

    var cls = doDefine(className, baseClass, mixins, options); // for RenderPipeline, RenderFlow, RenderStage

    var isRenderPipeline = js.isChildClassOf(baseClass, cc.RenderPipeline);
    var isRenderFlow = js.isChildClassOf(baseClass, cc.RenderFlow);
    var isRenderStage = js.isChildClassOf(baseClass, cc.RenderStage);
    var isRender = isRenderPipeline || isRenderFlow || isRenderStage || false;

    if (isRender) {
      var renderName = '';

      if (isRenderPipeline) {
        renderName = 'render_pipeline';
      } else if (isRenderFlow) {
        renderName = 'render_flow';
      } else if (isRenderStage) {
        renderName = 'render_stage';
      }

      if (renderName) {
        js._setClassId(className, cls);

        if (_defaultConstants.EDITOR) {
          // 增加了 hidden: 开头标识，使它最终不会显示在 Editor inspector 的添加组件列表里
          // @ts-ignore
          // tslint:disable-next-line:no-unused-expression
          window.EditorExtends && window.EditorExtends.Component.addMenu(cls, "hidden:".concat(renderName, "/").concat(className), -1);
        }
      }
    }

    if (_defaultConstants.EDITOR) {
      // Note: `options.ctor` should be same as `cls` except if
      // cc-class is defined by `cc.Class({/* ... */})`.
      // In such case, `options.ctor` may be `undefined`.
      // So we can not use `options.ctor`. Instead we should use `cls` which is the "real" registered cc-class.
      EditorExtends.emit('class-registered', cls, frame);
    }

    if (frame) {
      // 基础的 ts, js 脚本组件
      if (js.isChildClassOf(baseClass, Component)) {
        var uuid = frame.uuid;

        if (uuid) {
          js._setClassId(uuid, cls);

          if (_defaultConstants.EDITOR) {
            // @ts-ignore
            // tslint:disable-next-line:no-unused-expression
            EditorExtends.Component.addMenu(cls, 'i18n:menu.custom_script/' + className, -1);
            cls.prototype.__scriptUuid = EditorExtends.UuidUtils.decompressUuid(uuid);
          }
        }

        frame.cls = cls;
      } else if (!js.isChildClassOf(frame.cls, Component)) {
        frame.cls = cls;
      }
    }

    return cls;
  }

  function normalizeClassName_DEV(className) {
    var DefaultName = 'CCClass';

    if (className) {
      className = className.replace(/^[^$A-Za-z_]/, '_').replace(/[^0-9A-Za-z_$]/g, '_');

      try {
        // validate name
        Function('function ' + className + '(){}')();
        return className;
      } catch (e) {}
    }

    return DefaultName;
  }

  function getNewValueTypeCodeJit(value) {
    var clsName = js.getClassName(value);
    var type = value.constructor;
    var res = 'new ' + clsName + '(';

    for (var i = 0; i < type.__props__.length; i++) {
      var prop = type.__props__[i];
      var propVal = value[prop];

      if (_defaultConstants.DEV && _typeof(propVal) === 'object') {
        (0, _debug.errorID)(3641, clsName);
        return 'new ' + clsName + '()';
      }

      res += propVal;

      if (i < type.__props__.length - 1) {
        res += ',';
      }
    }

    return res + ')';
  } // TODO - move escapeForJS, IDENTIFIER_RE, getNewValueTypeCodeJit to misc.js or a new source file
  // convert a normal string including newlines, quotes and unicode characters into a string literal
  // ready to use in JavaScript source


  function escapeForJS(s) {
    return JSON.stringify(s). // see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify
    replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
  }

  function getInitPropsJit(attrs, propList) {
    // functions for generated code
    var F = [];
    var func = '';

    for (var i = 0; i < propList.length; i++) {
      var prop = propList[i];
      var attrKey = prop + DELIMETER + 'default';

      if (attrKey in attrs) {
        // getter does not have default
        var statement = void 0;

        if (IDENTIFIER_RE.test(prop)) {
          statement = 'this.' + prop + '=';
        } else {
          statement = 'this[' + escapeForJS(prop) + ']=';
        }

        var expression = void 0;
        var def = attrs[attrKey];

        if (_typeof(def) === 'object' && def) {
          if (def instanceof cc.ValueType) {
            expression = getNewValueTypeCodeJit(def);
          } else if (Array.isArray(def)) {
            expression = '[]';
          } else {
            expression = '{}';
          }
        } else if (typeof def === 'function') {
          var index = F.length;
          F.push(def);
          expression = 'F[' + index + ']()';

          if (_defaultConstants.EDITOR) {
            func += 'try {\n' + statement + expression + ';\n}\ncatch(e) {\ncc._throw(e);\n' + statement + 'undefined;\n}\n';
            continue;
          }
        } else if (typeof def === 'string') {
          expression = escapeForJS(def);
        } else {
          // number, boolean, null, undefined
          expression = def;
        }

        statement = statement + expression + ';\n';
        func += statement;
      }
    } // if (TEST && !isPhantomJS) {
    //     console.log(func);
    // }


    var initProps;

    if (F.length === 0) {
      initProps = Function(func);
    } else {
      initProps = Function('F', 'return (function(){\n' + func + '})')(F);
    }

    return initProps;
  }

  function getInitProps(attrs, propList) {
    var advancedProps = [];
    var advancedValues = [];
    var simpleProps = [];
    var simpleValues = [];

    for (var i = 0; i < propList.length; ++i) {
      var prop = propList[i];
      var attrKey = prop + DELIMETER + 'default';

      if (attrKey in attrs) {
        // getter does not have default
        var def = attrs[attrKey];

        if (_typeof(def) === 'object' && def || typeof def === 'function') {
          advancedProps.push(prop);
          advancedValues.push(def);
        } else {
          // number, boolean, null, undefined, string
          simpleProps.push(prop);
          simpleValues.push(def);
        }
      }
    }

    return function () {
      for (var _i = 0; _i < simpleProps.length; ++_i) {
        this[simpleProps[_i]] = simpleValues[_i];
      }

      for (var _i2 = 0; _i2 < advancedProps.length; _i2++) {
        var _prop = advancedProps[_i2];
        var expression = void 0;
        var _def = advancedValues[_i2];

        if (_typeof(_def) === 'object') {
          if (_def instanceof cc.ValueType) {
            expression = _def.clone();
          } else if (Array.isArray(_def)) {
            expression = [];
          } else {
            expression = {};
          }
        } else {
          // def is function
          if (_defaultConstants.EDITOR) {
            try {
              expression = _def();
            } catch (err) {
              cc._throw(err);

              continue;
            }
          } else {
            expression = _def();
          }
        }

        this[_prop] = expression;
      }
    };
  } // simple test variable name


  var IDENTIFIER_RE = /^[A-Za-z_$][0-9A-Za-z_$]*$/;

  function compileProps(actualClass) {
    // init deferred properties
    var attrs = attributeUtils.getClassAttrs(actualClass);
    var propList = actualClass.__props__;

    if (propList === null) {
      deferredInitializer.init();
      propList = actualClass.__props__;
    } // Overwite __initProps__ to avoid compile again.


    var initProps = _defaultConstants.SUPPORT_JIT ? getInitPropsJit(attrs, propList) : getInitProps(attrs, propList);
    actualClass.prototype.__initProps__ = initProps; // call instantiateProps immediately, no need to pass actualClass into it anymore
    // (use call to manually bind `this` because `this` may not instanceof actualClass)

    initProps.call(this);
  }

  var _createCtor = _defaultConstants.SUPPORT_JIT ? function (ctors, baseClass, className, options) {
    var superCallBounded = baseClass && boundSuperCalls(baseClass, options, className);
    var ctorName = _defaultConstants.DEV ? normalizeClassName_DEV(className) : 'CCClass';
    var body = 'return function ' + ctorName + '(){\n';

    if (superCallBounded) {
      body += 'this._super=null;\n';
    } // instantiate props


    body += 'this.__initProps__(' + ctorName + ');\n'; // call user constructors

    var ctorLen = ctors.length;

    if (ctorLen > 0) {
      var useTryCatch = _defaultConstants.DEV && !(className && className.startsWith('cc.'));

      if (useTryCatch) {
        body += 'try{\n';
      }

      var SNIPPET = '].apply(this,arguments);\n';

      if (ctorLen === 1) {
        body += ctorName + '.__ctors__[0' + SNIPPET;
      } else {
        body += 'var cs=' + ctorName + '.__ctors__;\n';

        for (var i = 0; i < ctorLen; i++) {
          body += 'cs[' + i + SNIPPET;
        }
      }

      if (useTryCatch) {
        body += '}catch(e){\n' + 'cc._throw(e);\n' + '}\n';
      }
    }

    body += '}';
    return Function(body)();
  } : function (ctors, baseClass, className, options) {
    var superCallBounded = baseClass && boundSuperCalls(baseClass, options, className);
    var ctorLen = ctors.length;

    var _Class5;

    if (ctorLen > 0) {
      if (superCallBounded) {
        if (ctorLen === 2) {
          // User Component
          _Class5 = function Class() {
            this._super = null;

            this.__initProps__(_Class5);

            ctors[0].apply(this, arguments);
            ctors[1].apply(this, arguments);
          };
        } else {
          _Class5 = function _Class() {
            this._super = null;

            this.__initProps__(_Class5);

            for (var i = 0; i < ctors.length; ++i) {
              ctors[i].apply(this, arguments);
            }
          };
        }
      } else {
        if (ctorLen === 3) {
          // Node
          _Class5 = function _Class2() {
            this.__initProps__(_Class5);

            ctors[0].apply(this, arguments);
            ctors[1].apply(this, arguments);
            ctors[2].apply(this, arguments);
          };
        } else {
          _Class5 = function _Class3() {
            this.__initProps__(_Class5);

            var ctors = _Class5.__ctors__;

            for (var i = 0; i < ctors.length; ++i) {
              ctors[i].apply(this, arguments);
            }
          };
        }
      }
    } else {
      _Class5 = function _Class4() {
        if (superCallBounded) {
          this._super = null;
        }

        this.__initProps__(_Class5);
      };
    }

    return _Class5;
  };

  function _validateCtor_DEV(ctor, baseClass, className, options) {
    if (_defaultConstants.EDITOR && baseClass) {
      // check super call in constructor
      var originCtor = ctor;

      if (SuperCallReg.test(ctor)) {
        if (options.__ES6__) {
          (0, _debug.errorID)(3651, className);
        } else {
          (0, _debug.warnID)(3600, className); // suppresss super call

          ctor = function ctor() {
            this._super = function () {};

            var ret = originCtor.apply(this, arguments);
            this._super = null;
            return ret;
          };
        }
      }
    } // check ctor


    if (ctor.length > 0 && (!className || !className.startsWith('cc.'))) {
      // To make a unified CCClass serialization process,
      // we don't allow parameters for constructor when creating instances of CCClass.
      // For advanced user, construct arguments can still get from 'arguments'.
      (0, _debug.warnID)(3617, className);
    }

    return ctor;
  }

  function _getAllCtors(baseClass, mixins, options) {
    // get base user constructors
    function getCtors(cls) {
      if (CCClass._isCCClass(cls)) {
        return cls.__ctors__ || [];
      } else {
        return [cls];
      }
    }

    var ctors = []; // if (options.__ES6__) {
    //     if (mixins) {
    //         let baseOrMixins = getCtors(baseClass);
    //         for (let b = 0; b < mixins.length; b++) {
    //             let mixin = mixins[b];
    //             if (mixin) {
    //                 let baseCtors = getCtors(mixin);
    //                 for (let c = 0; c < baseCtors.length; c++) {
    //                     if (baseOrMixins.indexOf(baseCtors[c]) < 0) {
    //                         pushUnique(ctors, baseCtors[c]);
    //                     }
    //                 }
    //             }
    //         }
    //     }
    // }
    // else {

    var baseOrMixins = [baseClass].concat(mixins);

    for (var b = 0; b < baseOrMixins.length; b++) {
      var baseOrMixin = baseOrMixins[b];

      if (baseOrMixin) {
        var baseCtors = getCtors(baseOrMixin);

        for (var c = 0; c < baseCtors.length; c++) {
          pushUnique(ctors, baseCtors[c]);
        }
      }
    } // }
    // append subclass user constructors


    var ctor = options.ctor;

    if (ctor) {
      ctors.push(ctor);
    }

    return ctors;
  }

  var superCllRegCondition = /xyz/.test(function () {
    var xyz = 0;
  }.toString());
  var SuperCallReg = superCllRegCondition ? /\b\._super\b/ : /.*/;
  var SuperCallRegStrict = superCllRegCondition ? /this\._super\s*\(/ : /(NONE){99}/;

  function boundSuperCalls(baseClass, options, className) {
    var hasSuperCall = false;

    for (var funcName in options) {
      if (BUILTIN_ENTRIES.indexOf(funcName) >= 0) {
        continue;
      }

      var func = options[funcName];

      if (typeof func !== 'function') {
        continue;
      }

      var pd = js.getPropertyDescriptor(baseClass.prototype, funcName);

      if (pd) {
        var superFunc = pd.value; // ignore pd.get, assume that function defined by getter is just for warnings

        if (typeof superFunc === 'function') {
          if (SuperCallReg.test(func)) {
            hasSuperCall = true; // boundSuperCall

            options[funcName] = function (superFunc, func) {
              return function () {
                var tmp = this._super; // Add a new ._super() method that is the same method but on the super-Class

                this._super = superFunc;
                var ret = func.apply(this, arguments); // The method only need to be bound temporarily, so we remove it when we're done executing

                this._super = tmp;
                return ret;
              };
            }(superFunc, func);
          }

          continue;
        }
      }

      if (_defaultConstants.DEV && SuperCallRegStrict.test(func)) {
        (0, _debug.warnID)(3620, className, funcName);
      }
    }

    return hasSuperCall;
  }

  function declareProperties(cls, className, properties, baseClass, mixins, es6) {
    cls.__props__ = [];

    if (baseClass && baseClass.__props__) {
      cls.__props__ = baseClass.__props__.slice();
    }

    if (mixins) {
      for (var m = 0; m < mixins.length; ++m) {
        var mixin = mixins[m];

        if (mixin.__props__) {
          cls.__props__ = cls.__props__.concat(mixin.__props__.filter(function (x) {
            return cls.__props__.indexOf(x) < 0;
          }));
        }
      }
    }

    if (properties) {
      // 预处理属性
      (0, _preprocessClass.preprocessAttrs)(properties, className, cls, es6);

      for (var propName in properties) {
        var val = properties[propName];

        if ('default' in val) {
          defineProp(cls, className, propName, val, es6);
        } else {
          defineGetSet(cls, className, propName, val, es6);
        }
      }
    }

    var attrs = attributeUtils.getClassAttrs(cls);
    cls.__values__ = cls.__props__.filter(function (prop) {
      return attrs[prop + DELIMETER + 'serializable'] !== false;
    });
  }

  function CCClass(options) {
    options = options || {};
    var name = options.name;
    var base = options["extends"]
    /* || CCObject*/
    ;
    var mixins = options.mixins; // create constructor

    var cls = define(name, base, mixins, options);

    if (!name) {
      name = cc.js.getClassName(cls);
    }

    cls._sealed = true;

    if (base) {
      base._sealed = false;
    } // define Properties


    var properties = options.properties;

    if (typeof properties === 'function' || base && base.__props__ === null || mixins && mixins.some(function (x) {
      return x.__props__ === null;
    })) {
      if (_defaultConstants.DEV && options.__ES6__) {
        (0, _debug.error)('not yet implement deferred properties for ES6 Classes');
      } else {
        deferredInitializer.push({
          cls: cls,
          props: properties,
          mixins: mixins
        });
        cls.__props__ = cls.__values__ = null;
      }
    } else {
      declareProperties(cls, name, properties, base, options.mixins, options.__ES6__);
    } // define statics


    var statics = options.statics;

    if (statics) {
      var staticPropName;

      if (_defaultConstants.DEV) {
        for (staticPropName in statics) {
          if (INVALID_STATICS_DEV.indexOf(staticPropName) !== -1) {
            (0, _debug.errorID)(3642, name, staticPropName, staticPropName);
          }
        }
      }

      for (staticPropName in statics) {
        cls[staticPropName] = statics[staticPropName];
      }
    } // define functions


    for (var funcName in options) {
      if (BUILTIN_ENTRIES.indexOf(funcName) >= 0) {
        continue;
      }

      var func = options[funcName];

      if (!(0, _preprocessClass.validateMethodWithProps)(func, funcName, name, cls, base)) {
        continue;
      } // use value to redefine some super method defined as getter


      js.value(cls.prototype, funcName, func, true, true);
    }

    var editor = options.editor;

    if (editor) {
      if (js.isChildClassOf(base, cc.Component)) {
        cc.Component._registerEditorProps(cls, editor);
      } else if (_defaultConstants.DEV) {
        (0, _debug.warnID)(3623, name);
      }
    }

    return cls;
  }
  /**
   * @en
   * Checks whether the constructor is created by cc.Class
   * @zh
   * 检查构造函数是否由 cc.Class 创建。
   * @method _isCCClass
   * @param {Function} constructor
   * @return {Boolean}
   * @private
   */


  CCClass._isCCClass = function (constructor) {
    return constructor && constructor.hasOwnProperty && constructor.hasOwnProperty('__ctors__'); // is not inherited __ctors__
  }; //
  // Optimized define function only for internal classes
  //
  // @method fastDefine
  // @param {String} className
  // @param {Function} constructor
  // @param {Object} serializableFields
  // @private
  //


  CCClass.fastDefine = function (className, constructor, serializableFields) {
    js.setClassName(className, constructor); // constructor.__ctors__ = constructor.__ctors__ || null;

    var props = constructor.__props__ = constructor.__values__ = Object.keys(serializableFields);
    var attrProtos = attributeUtils.getClassAttrsProto(constructor);

    for (var i = 0; i < props.length; i++) {
      var key = props[i];
      attrProtos[key + DELIMETER + 'visible'] = false;
      attrProtos[key + DELIMETER + 'default'] = serializableFields[key];
    }
  };

  CCClass.Attr = attributeUtils;
  CCClass.attr = attributeUtils.attr;
  /**
   * Return all super classes.
   * @param constructor The Constructor.
   */

  function getInheritanceChain(constructor) {
    var chain = [];

    for (;;) {
      constructor = (0, js.getSuper)(constructor);

      if (!constructor) {
        break;
      }

      if (constructor !== Object) {
        chain.push(constructor);
      }
    }

    return chain;
  }

  CCClass.getInheritanceChain = getInheritanceChain;
  var PrimitiveTypes = {
    // Specify that the input value must be integer in Properties.
    // Also used to indicates that the type of elements in array or the type of value in dictionary is integer.
    Integer: 'Number',
    // Indicates that the type of elements in array or the type of value in dictionary is double.
    Float: 'Number',
    Boolean: 'Boolean',
    String: 'String'
  };
  var tmpAttrs = [];

  function parseAttributes(constructor, attributes, className, propertyName, usedInGetter) {
    var ERR_Type = _defaultConstants.DEV ? 'The %s of %s must be type %s' : '';
    var attrsProto = null;
    var attrsProtoKey = '';

    function getAttrsProto() {
      attrsProtoKey = propertyName + DELIMETER;
      return attrsProto = attributeUtils.getClassAttrsProto(constructor);
    }

    tmpAttrs.length = 0;
    var result = tmpAttrs;

    if ('type' in attributes && typeof attributes.type === 'undefined') {
      (0, _debug.warnID)(3660, propertyName, className);
    }

    var type = attributes.type;

    if (type) {
      var primitiveType = PrimitiveTypes[type];

      if (primitiveType) {
        result.push({
          type: type,
          _onAfterProp: (_defaultConstants.EDITOR || _defaultConstants.TEST) && !attributes._short ? attributeUtils.getTypeChecker(primitiveType, 'cc.' + type) : undefined
        });
      } else if (type === 'Object') {
        if (_defaultConstants.DEV) {
          (0, _debug.errorID)(3644, className, propertyName);
        }
      } // else if (type === Attr.ScriptUuid) {
      //     result.push({
      //         type: 'Script',
      //         ctor: cc.ScriptAsset,
      //     });
      // }
      else if (_typeof(type) === 'object') {
          if (_enum.Enum.isEnum(type)) {
            result.push({
              type: 'Enum',
              enumList: _enum.Enum.getList(type)
            });
          } else if (_index.BitMask.isBitMask(type)) {
            result.push({
              type: 'BitMask',
              bitmaskList: _index.BitMask.getList(type)
            });
          } else if (_defaultConstants.DEV) {
            (0, _debug.errorID)(3645, className, propertyName, type);
          }
        } else if (typeof type === 'function') {
          var typeChecker;

          if ((_defaultConstants.EDITOR || _defaultConstants.TEST) && !attributes._short) {
            typeChecker = attributes.url ? attributeUtils.getTypeChecker('String', 'cc.String') : attributeUtils.getObjTypeChecker(type);
          }

          result.push({
            type: 'Object',
            ctor: type,
            _onAfterProp: typeChecker
          });
        } else if (_defaultConstants.DEV) {
          (0, _debug.errorID)(3646, className, propertyName, type);
        }
    }

    var parseSimpleAttribute = function parseSimpleAttribute(attributeName, expectType) {
      if (attributeName in attributes) {
        var val = attributes[attributeName];

        if (_typeof(val) === expectType) {
          (attrsProto || getAttrsProto())[attrsProtoKey + attributeName] = val;
        } else if (_defaultConstants.DEV) {
          (0, _debug.error)(ERR_Type, attributeName, className, propertyName, expectType);
        }
      }
    };

    if (attributes.editorOnly) {
      if (_defaultConstants.DEV && usedInGetter) {
        (0, _debug.errorID)(3613, 'editorOnly', name, propertyName);
      } else {
        (attrsProto || getAttrsProto())[attrsProtoKey + 'editorOnly'] = true;
      }
    } // parseSimpleAttr('preventDeferredLoad', 'boolean');


    if (_defaultConstants.DEV) {
      parseSimpleAttribute('displayName', 'string');
      parseSimpleAttribute('displayOrder', 'number');
      parseSimpleAttribute('multiline', 'boolean');
      parseSimpleAttribute('radian', 'boolean');

      if (attributes.readonly) {
        (attrsProto || getAttrsProto())[attrsProtoKey + 'readonly'] = true;
      }

      parseSimpleAttribute('tooltip', 'string');
      parseSimpleAttribute('slide', 'boolean');
      parseSimpleAttribute('unit', 'string');
    }

    if (attributes.url) {
      (attrsProto || getAttrsProto())[attrsProtoKey + 'saveUrlAsAsset'] = true;
    }

    if (attributes.serializable === false) {
      if (_defaultConstants.DEV && usedInGetter) {
        (0, _debug.errorID)(3613, 'serializable', name, propertyName);
      } else {
        (attrsProto || getAttrsProto())[attrsProtoKey + 'serializable'] = false;
      }
    }

    parseSimpleAttribute('formerlySerializedAs', 'string');

    if (_defaultConstants.EDITOR) {
      if ('animatable' in attributes) {
        (attrsProto || getAttrsProto())[attrsProtoKey + 'animatable'] = attributes.animatable;
      }
    }

    if (_defaultConstants.DEV) {
      var visible = attributes.visible;

      if (typeof visible !== 'undefined') {
        if (!visible) {
          (attrsProto || getAttrsProto())[attrsProtoKey + 'visible'] = false;
        } else if (typeof visible === 'function') {
          (attrsProto || getAttrsProto())[attrsProtoKey + 'visible'] = visible;
        }
      } else {
        var startsWithUS = propertyName.charCodeAt(0) === 95;

        if (startsWithUS) {
          (attrsProto || getAttrsProto())[attrsProtoKey + 'visible'] = false;
        }
      }
    }

    var range = attributes.range;

    if (range) {
      if (Array.isArray(range)) {
        if (range.length >= 2) {
          (attrsProto || getAttrsProto())[attrsProtoKey + 'min'] = range[0];
          (attrsProto || getAttrsProto())[attrsProtoKey + 'max'] = range[1];

          if (range.length > 2) {
            (attrsProto || getAttrsProto())[attrsProtoKey + 'step'] = range[2];
          }
        } else if (_defaultConstants.DEV) {
          (0, _debug.errorID)(3647);
        }
      } else if (_defaultConstants.DEV) {
        (0, _debug.error)(ERR_Type, 'range', className, propertyName, 'array');
      }
    }

    parseSimpleAttribute('min', 'number');
    parseSimpleAttribute('max', 'number');
    parseSimpleAttribute('step', 'number');
    return result;
  }

  CCClass.isArray = function (defaultVal) {
    defaultVal = getDefault(defaultVal);
    return Array.isArray(defaultVal);
  };

  CCClass.getDefault = getDefault;
  CCClass.escapeForJS = escapeForJS;
  CCClass.IDENTIFIER_RE = IDENTIFIER_RE;
  CCClass.getNewValueTypeCode = _defaultConstants.SUPPORT_JIT && getNewValueTypeCodeJit;
  var _default = CCClass;
  _exports.default = _default;
  cc.Class = CCClass;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,