(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "@cocos/ammo", "../../core/math/index.js", "../../core/scene-graph/node-enum.js", "./ammo-util.js", "./ammo-enum.js", "./ammo-instance.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("@cocos/ammo"), require("../../core/math/index.js"), require("../../core/scene-graph/node-enum.js"), require("./ammo-util.js"), require("./ammo-enum.js"), require("./ammo-instance.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.ammo, global.index, global.nodeEnum, global.ammoUtil, global.ammoEnum, global.ammoInstance);
    global.ammoSharedBody = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _ammo, _index3, _nodeEnum, _ammoUtil, _ammoEnum, _ammoInstance) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AmmoSharedBody = void 0;
  _ammo = _interopRequireDefault(_ammo);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var v3_0 = new _index3.Vec3();
  var quat_0 = new _index3.Quat();
  var sharedIDCounter = 0;
  /**
   * shared object, node : shared = 1 : 1
   * body for static \ dynamic \ kinematic (collider)
   * ghost for trigger
   */

  var AmmoSharedBody = /*#__PURE__*/function () {
    _createClass(AmmoSharedBody, [{
      key: "wrappedBody",
      get: function get() {
        return this._wrappedBody;
      }
    }, {
      key: "bodyCompoundShape",
      get: function get() {
        return this.bodyStruct.shape;
      }
    }, {
      key: "ghostCompoundShape",
      get: function get() {
        return this.ghostStruct.shape;
      }
    }, {
      key: "body",
      get: function get() {
        return this.bodyStruct.body;
      }
    }, {
      key: "ghost",
      get: function get() {
        return this.ghostStruct.ghost;
      }
    }, {
      key: "collisionFilterGroup",
      get: function get() {
        return this._collisionFilterGroup;
      },
      set: function set(v) {
        if (v != this._collisionFilterGroup) {
          this._collisionFilterGroup = v;
          this.updateByReAdd();
        }
      }
    }, {
      key: "collisionFilterMask",
      get: function get() {
        return this._collisionFilterMask;
      },
      set: function set(v) {
        if (v != this._collisionFilterMask) {
          this._collisionFilterMask = v;
          this.updateByReAdd();
        }
      }
    }, {
      key: "bodyEnabled",

      /**
       * add or remove from world \
       * add, if enable \
       * remove, if disable & shapes.length == 0 & wrappedBody disable
       */
      set: function set(v) {
        if (v) {
          if (this.bodyIndex < 0) {
            this.bodyIndex = this.wrappedWorld.bodies.length;
            this.wrappedWorld.addSharedBody(this);
            this.syncInitialBody();
          }
        } else {
          if (this.bodyIndex >= 0) {
            var isRemoveBody = this.bodyStruct.wrappedShapes.length == 0 && this.wrappedBody == null || this.bodyStruct.wrappedShapes.length == 0 && this.wrappedBody != null && !this.wrappedBody.isEnabled || this.bodyStruct.wrappedShapes.length == 0 && this.wrappedBody != null && !this.wrappedBody.rigidBody.enabledInHierarchy;

            if (isRemoveBody) {
              this.body.clearState(); // clear velocity etc.

              this.bodyIndex = -1;
              this.wrappedWorld.removeSharedBody(this);
            }
          }
        }
      }
    }, {
      key: "ghostEnabled",
      set: function set(v) {
        if (v) {
          if (this.ghostIndex < 0 && this.ghostStruct.wrappedShapes.length > 0) {
            this.ghostIndex = 1;
            this.wrappedWorld.addGhostObject(this);
            this.syncInitialGhost();
          }
        } else {
          if (this.ghostIndex >= 0) {
            /** remove trigger */
            var isRemoveGhost = this.ghostStruct.wrappedShapes.length == 0 && this.ghost;

            if (isRemoveGhost) {
              this.ghostIndex = -1;
              this.wrappedWorld.removeGhostObject(this);
            }
          }
        }
      }
    }, {
      key: "reference",
      set: function set(v) {
        v ? this.ref++ : this.ref--;

        if (this.ref == 0) {
          this.destroy();
        }
      }
    }], [{
      key: "getSharedBody",
      value: function getSharedBody(node, wrappedWorld, wrappedBody) {
        var key = node.uuid;
        var newSB;

        if (AmmoSharedBody.sharedBodesMap.has(key)) {
          newSB = AmmoSharedBody.sharedBodesMap.get(key);
        } else {
          newSB = new AmmoSharedBody(node, wrappedWorld);
          AmmoSharedBody.sharedBodesMap.set(node.uuid, newSB);
        }

        if (wrappedBody) {
          newSB._wrappedBody = wrappedBody;
        }

        return newSB;
      }
    }]);

    function AmmoSharedBody(node, wrappedWorld) {
      _classCallCheck(this, AmmoSharedBody);

      this.id = void 0;
      this.node = void 0;
      this.wrappedWorld = void 0;
      this.bodyStruct = void 0;
      this.ghostStruct = void 0;
      this._collisionFilterGroup = 1;
      this._collisionFilterMask = -1;
      this.ref = 0;
      this.bodyIndex = -1;
      this.ghostIndex = -1;
      this._wrappedBody = null;
      this.wrappedWorld = wrappedWorld;
      this.node = node;
      this.id = AmmoSharedBody.idCounter++;
      /** body struct */

      var st = new _ammo.default.btTransform();
      st.setIdentity();
      (0, _ammoUtil.cocos2AmmoVec3)(st.getOrigin(), this.node.worldPosition);
      var bodyQuat = new _ammo.default.btQuaternion();
      (0, _ammoUtil.cocos2AmmoQuat)(bodyQuat, this.node.worldRotation);
      st.setRotation(bodyQuat);
      var motionState = new _ammo.default.btDefaultMotionState(st);
      var localInertia = new _ammo.default.btVector3(1.6666666269302368, 1.6666666269302368, 1.6666666269302368);
      var bodyShape = new _ammo.default.btCompoundShape();
      var rbInfo = new _ammo.default.btRigidBodyConstructionInfo(0, motionState, bodyShape, localInertia);
      var body = new _ammo.default.btRigidBody(rbInfo);
      this.bodyStruct = {
        'id': sharedIDCounter++,
        'body': body,
        'localInertia': localInertia,
        'motionState': motionState,
        'startTransform': st,
        'shape': bodyShape,
        'rbInfo': rbInfo,
        'worldQuat': bodyQuat,
        'wrappedShapes': []
      };
      _ammoInstance.AmmoInstance.bodyStructs['KEY' + this.bodyStruct.id] = this.bodyStruct;
      this.body.setUserIndex(this.bodyStruct.id);
      /** ghost struct */

      var ghost = new _ammo.default.btCollisionObject();
      var ghostShape = new _ammo.default.btCompoundShape();
      ghost.setCollisionShape(ghostShape);
      ghost.setCollisionFlags(_ammoEnum.AmmoCollisionFlags.CF_NO_CONTACT_RESPONSE);
      this.ghostStruct = {
        'id': sharedIDCounter++,
        'ghost': ghost,
        'shape': ghostShape,
        'worldQuat': new _ammo.default.btQuaternion(),
        'wrappedShapes': []
      };
      _ammoInstance.AmmoInstance.ghostStructs['KEY' + this.ghostStruct.id] = this.ghostStruct;
      this.ghost.setUserIndex(this.ghostStruct.id);
      /** DEBUG */

      this.body.setActivationState(_ammoEnum.AmmoCollisionObjectStates.DISABLE_DEACTIVATION);
      this.ghost.setActivationState(_ammoEnum.AmmoCollisionObjectStates.DISABLE_DEACTIVATION);
    }

    _createClass(AmmoSharedBody, [{
      key: "addShape",
      value: function addShape(v, isTrigger) {
        if (isTrigger) {
          var index = this.ghostStruct.wrappedShapes.indexOf(v);

          if (index < 0) {
            this.ghostStruct.wrappedShapes.push(v);
            v.setCompound(this.ghostCompoundShape);
            this.ghostEnabled = true;
          }
        } else {
          var _index = this.bodyStruct.wrappedShapes.indexOf(v);

          if (_index < 0) {
            this.bodyStruct.wrappedShapes.push(v);
            v.setCompound(this.bodyCompoundShape);
            this.bodyEnabled = true;
          }
        }
      }
    }, {
      key: "removeShape",
      value: function removeShape(v, isTrigger) {
        if (isTrigger) {
          var index = this.ghostStruct.wrappedShapes.indexOf(v);

          if (index >= 0) {
            this.ghostStruct.wrappedShapes.splice(index, 1);
            v.setCompound(null);
            this.ghostEnabled = false;
          }
        } else {
          var _index2 = this.bodyStruct.wrappedShapes.indexOf(v);

          if (_index2 >= 0) {
            this.bodyStruct.wrappedShapes.splice(_index2, 1);
            v.setCompound(null);
            this.bodyEnabled = false;
          }
        }
      }
    }, {
      key: "syncSceneToPhysics",
      value: function syncSceneToPhysics() {
        if (this.node.hasChangedFlags) {
          var wt = this.body.getWorldTransform();
          (0, _ammoUtil.cocos2AmmoVec3)(wt.getOrigin(), this.node.worldPosition);
          (0, _ammoUtil.cocos2AmmoQuat)(this.bodyStruct.worldQuat, this.node.worldRotation);
          wt.setRotation(this.bodyStruct.worldQuat);
          if (this.isBodySleeping()) this.body.activate();

          if (this.node.hasChangedFlags & _nodeEnum.TransformBit.SCALE) {
            for (var i = 0; i < this.bodyStruct.wrappedShapes.length; i++) {
              this.bodyStruct.wrappedShapes[i].setScale();
            }
          }
        }
      }
      /**
       * TODO: use motion state
       */

    }, {
      key: "syncPhysicsToScene",
      value: function syncPhysicsToScene() {
        if (this.body.isStaticObject() || this.isBodySleeping()) {
          return;
        } // let transform = new Ammo.btTransform();
        // this.body.getMotionState().getWorldTransform(transform);


        var wt0 = this.body.getWorldTransform();
        this.node.worldPosition = (0, _ammoUtil.ammo2CocosVec3)(v3_0, wt0.getOrigin());
        wt0.getBasis().getRotation(this.bodyStruct.worldQuat);
        this.node.worldRotation = (0, _ammoUtil.ammo2CocosQuat)(quat_0, this.bodyStruct.worldQuat);
        var wt1 = this.ghost.getWorldTransform();
        (0, _ammoUtil.cocos2AmmoVec3)(wt1.getOrigin(), this.node.worldPosition);
        (0, _ammoUtil.cocos2AmmoQuat)(this.ghostStruct.worldQuat, this.node.worldRotation);
        wt1.setRotation(this.ghostStruct.worldQuat);
      }
    }, {
      key: "syncSceneToGhost",
      value: function syncSceneToGhost() {
        if (this.node.hasChangedFlags) {
          var wt1 = this.ghost.getWorldTransform();
          (0, _ammoUtil.cocos2AmmoVec3)(wt1.getOrigin(), this.node.worldPosition);
          (0, _ammoUtil.cocos2AmmoQuat)(this.ghostStruct.worldQuat, this.node.worldRotation);
          wt1.setRotation(this.ghostStruct.worldQuat);
          this.ghost.activate();

          if (this.node.hasChangedFlags & _nodeEnum.TransformBit.SCALE) {
            for (var i = 0; i < this.ghostStruct.wrappedShapes.length; i++) {
              this.ghostStruct.wrappedShapes[i].setScale();
            }
          }
        }
      }
    }, {
      key: "syncInitialBody",
      value: function syncInitialBody() {
        var wt = this.body.getWorldTransform();
        (0, _ammoUtil.cocos2AmmoVec3)(wt.getOrigin(), this.node.worldPosition);
        (0, _ammoUtil.cocos2AmmoQuat)(this.bodyStruct.worldQuat, this.node.worldRotation);
        wt.setRotation(this.bodyStruct.worldQuat);

        for (var i = 0; i < this.bodyStruct.wrappedShapes.length; i++) {
          this.bodyStruct.wrappedShapes[i].setScale();
        }

        this.body.activate();
      }
    }, {
      key: "syncInitialGhost",
      value: function syncInitialGhost() {
        var wt1 = this.ghost.getWorldTransform();
        (0, _ammoUtil.cocos2AmmoVec3)(wt1.getOrigin(), this.node.worldPosition);
        (0, _ammoUtil.cocos2AmmoQuat)(this.ghostStruct.worldQuat, this.node.worldRotation);
        wt1.setRotation(this.ghostStruct.worldQuat);

        for (var i = 0; i < this.ghostStruct.wrappedShapes.length; i++) {
          this.ghostStruct.wrappedShapes[i].setScale();
        }

        this.ghost.activate();
      }
    }, {
      key: "updateByReAdd",
      value: function updateByReAdd() {
        /**
         * see: https://pybullet.org/Bullet/phpBB3/viewtopic.php?f=9&t=5312&p=19094&hilit=how+to+change+group+mask#p19097
         */
        if (this.bodyIndex >= 0) {
          this.wrappedWorld.removeSharedBody(this);
          this.wrappedWorld.addSharedBody(this);
          this.bodyIndex = this.wrappedWorld.bodies.length;
        }

        if (this.ghostIndex >= 0) {
          this.wrappedWorld.removeGhostObject(this);
          this.wrappedWorld.addGhostObject(this);
          this.ghostIndex = this.wrappedWorld.ghosts.length;
        }
      }
    }, {
      key: "destroy",
      value: function destroy() {
        AmmoSharedBody.sharedBodesMap["delete"](this.node.uuid);
        this.node = null;
        this.wrappedWorld = null;
        var bodyStruct = this.bodyStruct; // Ammo.destroy(bodyStruct.body);

        _ammo.default.destroy(bodyStruct.localInertia); // Ammo.destroy(bodyStruct.motionState);
        // Ammo.destroy(bodyStruct.rbInfo);
        // Ammo.destroy(bodyStruct.shape);
        // Ammo.destroy(bodyStruct.startTransform);


        _ammo.default.destroy(bodyStruct.worldQuat);

        (0, _ammoUtil.ammoDeletePtr)(bodyStruct.motionState, _ammo.default.btDefaultMotionState);
        (0, _ammoUtil.ammoDeletePtr)(bodyStruct.rbInfo, _ammo.default.btRigidBodyConstructionInfo);
        (0, _ammoUtil.ammoDeletePtr)(bodyStruct.body, _ammo.default.btRigidBody);
        (0, _ammoUtil.ammoDeletePtr)(bodyStruct.body, _ammo.default.btCollisionObject);
        (0, _ammoUtil.ammoDeletePtr)(bodyStruct.shape, _ammo.default.btCompoundShape);
        (0, _ammoUtil.ammoDeletePtr)(bodyStruct.startTransform, _ammo.default.btTransform);
        (0, _ammoUtil.ammoDeletePtr)(bodyStruct.localInertia, _ammo.default.btVector3);
        (0, _ammoUtil.ammoDeletePtr)(bodyStruct.worldQuat, _ammo.default.btQuaternion);
        var key0 = 'KEY' + bodyStruct.id;
        delete _ammoInstance.AmmoInstance.bodyStructs[key0];
        var ghostStruct = this.ghostStruct; // Ammo.destroy(ghostStruct.ghost);
        // Ammo.destroy(ghostStruct.shape);

        _ammo.default.destroy(ghostStruct.worldQuat);

        (0, _ammoUtil.ammoDeletePtr)(ghostStruct.ghost, _ammo.default.btCollisionObject);
        (0, _ammoUtil.ammoDeletePtr)(ghostStruct.shape, _ammo.default.btCompoundShape);
        (0, _ammoUtil.ammoDeletePtr)(ghostStruct.worldQuat, _ammo.default.btQuaternion);
        var key1 = 'KEY' + ghostStruct.id;
        delete _ammoInstance.AmmoInstance.bodyStructs[key1];
        this.bodyStruct = null;
        this.ghostStruct = null;
      }
    }, {
      key: "isBodySleeping",
      value: function isBodySleeping() {
        var state = this.body.getActivationState();
        return state == _ammoEnum.AmmoCollisionObjectStates.ISLAND_SLEEPING;
      }
    }]);

    return AmmoSharedBody;
  }();

  _exports.AmmoSharedBody = AmmoSharedBody;
  AmmoSharedBody.idCounter = 0;
  AmmoSharedBody.sharedBodesMap = new Map();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,