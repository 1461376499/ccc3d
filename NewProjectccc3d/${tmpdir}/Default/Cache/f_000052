(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../../../core/data/class-decorator.js", "../../../../core/event/index.js", "../../../../core/math/index.js", "../../assets/physic-material.js", "../../physics-system.js", "../../../../core/index.js", "../../../../core/default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../../../core/data/class-decorator.js"), require("../../../../core/event/index.js"), require("../../../../core/math/index.js"), require("../../assets/physic-material.js"), require("../../physics-system.js"), require("../../../../core/index.js"), require("../../../../core/default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.classDecorator, global.index, global.index, global.physicMaterial, global.physicsSystem, global.index, global.defaultConstants);
    global.colliderComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _classDecorator, _index, _index2, _physicMaterial, _physicsSystem, _index3, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ColliderComponent = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  /**
   * @en
   * Base class of collider.
   * @zh
   * 碰撞器的基类。
   */
  var ColliderComponent = (_dec = (0, _classDecorator.ccclass)('cc.ColliderComponent'), _dec2 = (0, _classDecorator.property)({
    type: _physicMaterial.PhysicMaterial,
    displayName: 'Material',
    displayOrder: -1,
    tooltip: '源材质'
  }), _dec3 = (0, _classDecorator.property)({
    displayOrder: 0,
    tooltip: '是否与其它碰撞器产生碰撞，并产生物理行为'
  }), _dec4 = (0, _classDecorator.property)({
    type: _index2.Vec3,
    displayOrder: 1,
    tooltip: '形状的中心点（与所在 Node 中心点的相对位置）'
  }), _dec5 = (0, _classDecorator.property)({
    type: _physicMaterial.PhysicMaterial
  }), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Eventify) {
    _inherits(ColliderComponent, _Eventify);

    _createClass(ColliderComponent, [{
      key: "sharedMaterial",
      /// PUBLIC PROPERTY GETTER\SETTER ///

      /**
       * @en
       * Gets or sets the physical material for this collider.
       * @zh
       * 获取或设置此碰撞器的物理材质。
       */
      get: function get() {
        return this._material;
      },
      set: function set(value) {
        if (_defaultConstants.EDITOR) {
          this._material = value;
        } else {
          this.material = value;
        }
      }
      /**
       * @en
       * Gets or sets the physics material for this collider, which in Shared state will generate a new instance.
       * @zh
       * 获取或设置此碰撞器的物理材质，共享状态下获取将会生成新的实例。
       */

    }, {
      key: "material",
      get: function get() {
        if (!_defaultConstants.PHYSICS_BUILTIN) {
          if (this._isSharedMaterial && this._material != null) {
            this._material.off('physics_material_update', this._updateMaterial, this);

            this._material = this._material.clone();

            this._material.on('physics_material_update', this._updateMaterial, this);

            this._isSharedMaterial = false;
          }
        }

        return this._material;
      },
      set: function set(value) {
        if (!_defaultConstants.EDITOR) {
          if (!_defaultConstants.PHYSICS_BUILTIN) {
            if (value != null && this._material != null) {
              if (this._material._uuid != value._uuid) {
                this._material.off('physics_material_update', this._updateMaterial, this);

                value.on('physics_material_update', this._updateMaterial, this);
                this._isSharedMaterial = false;
                this._material = value;
              }
            } else if (value != null && this._material == null) {
              value.on('physics_material_update', this._updateMaterial, this);
              this._material = value;
            } else if (value == null && this._material != null) {
              this._material.off('physics_material_update', this._updateMaterial, this);

              this._material = value;
            }

            this._updateMaterial();
          } else {
            this._material = value;
          }
        }
      }
      /**
       * @en
       * Gets or sets the collider is trigger, this will be always trigger if using builtin.
       * @zh
       * 获取或设置碰撞器是否为触发器，若使用 builtin ，属性值无论真假 ，此碰撞器都为触发器。
       */

    }, {
      key: "isTrigger",
      get: function get() {
        return this._isTrigger;
      },
      set: function set(value) {
        this._isTrigger = value;

        if (!_defaultConstants.EDITOR) {
          this._shape.setAsTrigger(this._isTrigger);
        }
      }
      /**
       * @en
       * Gets or sets the center of the collider, in local space.
       * @zh
       * 获取或设置碰撞器的中心点。
       */

    }, {
      key: "center",
      get: function get() {
        return this._center;
      },
      set: function set(value) {
        _index2.Vec3.copy(this._center, value);

        if (!_defaultConstants.EDITOR) {
          this._shape.setCenter(this._center);
        }
      }
      /**
       * @en
       * Gets the collider attached rigid-body, this may be null
       * @zh
       * 获取碰撞器所绑定的刚体组件，可能为 null
       */

    }, {
      key: "attachedRigidBody",
      get: function get() {
        return this.shape.attachedRigidBody;
      }
      /**
       * @en
       * Gets the wrapper object, through which the lowLevel instance can be accessed.
       * @zh
       * 获取封装对象，通过此对象可以访问到底层实例。
       */

    }, {
      key: "shape",
      get: function get() {
        return this._shape;
      } /// PRIVATE PROPERTY ///

    }, {
      key: "_assertOnload",
      get: function get() {
        var r = this._isOnLoadCalled == 0;

        if (r) {
          (0, _index3.error)('Physics Error: Please make sure that the node has been added to the scene');
        }

        return !r;
      }
    }]);

    function ColliderComponent() {
      var _this;

      _classCallCheck(this, ColliderComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(ColliderComponent).call(this));
      _this._isSharedMaterial = true;

      _initializerDefineProperty(_this, "_material", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_isTrigger", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_center", _descriptor3, _assertThisInitialized(_this));

      return _this;
    }
    /**
     * @en
     * Registers callbacks associated with triggered or collision events.
     * @zh
     * 注册触发或碰撞事件相关的回调。
     * @param type - The event type, onTriggerEnter|onTriggerStay|onTriggerExit|onCollisionEnter|onCollisionStay|onCollisionExit;
     * @param callback - The event callback, signature:`(event?:ICollisionEvent|ITriggerEvent)=>void`.
     * @param target - The event callback target.
     */


    _createClass(ColliderComponent, [{
      key: "on",
      value: function on(type, callback, target, once) {
        _get(_getPrototypeOf(ColliderComponent.prototype), "on", this).call(this, type, callback, target, once);
      }
      /**
       * @en
       * Unregisters callbacks associated with trigger or collision events that have been registered.
       * @zh
       * 取消已经注册的触发或碰撞事件相关的回调。
       * @param type - The event type, onTriggerEnter|onTriggerStay|onTriggerExit|onCollisionEnter|onCollisionStay|onCollisionExit;
       * @param callback - The event callback, signature:`(event?:ICollisionEvent|ITriggerEvent)=>void`.
       * @param target - The event callback target.
       */

    }, {
      key: "off",
      value: function off(type, callback, target) {
        _get(_getPrototypeOf(ColliderComponent.prototype), "off", this).call(this, type, callback, target);
      }
      /**
       * @en
       * Registers a callback associated with a trigger or collision event, which is automatically unregistered once executed.
       * @zh
       * 注册触发或碰撞事件相关的回调，执行一次后会自动取消注册。
       * @param type - The event type, onTriggerEnter|onTriggerStay|onTriggerExit|onCollisionEnter|onCollisionStay|onCollisionExit;
       * @param callback - The event callback, signature:`(event?:ICollisionEvent|ITriggerEvent)=>void`.
       * @param target - The event callback target.
       */

    }, {
      key: "once",
      value: function once(type, callback, target) {
        _get(_getPrototypeOf(ColliderComponent.prototype), "once", this).call(this, type, callback, target);
      } /// GROUP MASK ///

      /**
       * @en
       * Sets the group value.
       * @zh
       * 设置分组值。
       * @param v - 整数，范围为 2 的 0 次方 到 2 的 31 次方
       */

    }, {
      key: "setGroup",
      value: function setGroup(v) {
        this._shape.setGroup(v);
      }
      /**
       * @en
       * Gets the group value.
       * @zh
       * 获取分组值。
       * @returns 整数，范围为 2 的 0 次方 到 2 的 31 次方
       */

    }, {
      key: "getGroup",
      value: function getGroup() {
        return this._shape.getGroup();
      }
      /**
       * @en
       * Add a grouping value to fill in the group you want to join.
       * @zh
       * 添加分组值，可填要加入的 group。
       * @param v - 整数，范围为 2 的 0 次方 到 2 的 31 次方
       */

    }, {
      key: "addGroup",
      value: function addGroup(v) {
        this._shape.addGroup(v);
      }
      /**
       * @en
       * Subtract the grouping value to fill in the group to be removed.
       * @zh
       * 减去分组值，可填要移除的 group。
       * @param v - 整数，范围为 2 的 0 次方 到 2 的 31 次方
       */

    }, {
      key: "removeGroup",
      value: function removeGroup(v) {
        this._shape.removeGroup(v);
      }
      /**
       * @en
       * Gets the mask value.
       * @zh
       * 获取掩码值。
       * @returns 整数，范围为 2 的 0 次方 到 2 的 31 次方
       */

    }, {
      key: "getMask",
      value: function getMask() {
        return this._shape.getMask();
      }
      /**
       * @en
       * Sets the mask value.
       * @zh
       * 设置掩码值。
       * @param v - 整数，范围为 2 的 0 次方 到 2 的 31 次方
       */

    }, {
      key: "setMask",
      value: function setMask(v) {
        this._shape.setMask(v);
      }
      /**
       * @en
       * Add mask values to fill in groups that need to be checked.
       * @zh
       * 添加掩码值，可填入需要检查的 group。
       * @param v - 整数，范围为 2 的 0 次方 到 2 的 31 次方
       */

    }, {
      key: "addMask",
      value: function addMask(v) {
        this._shape.addMask(v);
      }
      /**
       * @en
       * Subtract the mask value to fill in the group that does not need to be checked.
       * @zh
       * 减去掩码值，可填入不需要检查的 group。
       * @param v - 整数，范围为 2 的 0 次方 到 2 的 31 次方
       */

    }, {
      key: "removeMask",
      value: function removeMask(v) {
        this._shape.removeMask(v);
      } /// COMPONENT LIFECYCLE ///

    }, {
      key: "__preload",
      value: function __preload() {
        if (!_defaultConstants.EDITOR) {
          this._shape.initialize(this);
        }
      }
    }, {
      key: "onLoad",
      value: function onLoad() {
        if (!_defaultConstants.EDITOR) {
          if (!_defaultConstants.PHYSICS_BUILTIN) {
            this.sharedMaterial = this._material == null ? _physicsSystem.PhysicsSystem.instance.defaultMaterial : this._material;
          }

          this._shape.onLoad();
        }
      }
    }, {
      key: "onEnable",
      value: function onEnable() {
        if (!_defaultConstants.EDITOR) {
          this._shape.onEnable();
        }
      }
    }, {
      key: "onDisable",
      value: function onDisable() {
        if (!_defaultConstants.EDITOR) {
          this._shape.onDisable();
        }
      }
    }, {
      key: "onDestroy",
      value: function onDestroy() {
        if (!_defaultConstants.EDITOR) {
          if (this._material) {
            this._material.off('physics_material_update', this._updateMaterial, this);
          }

          this._shape.onDestroy();
        }
      }
    }, {
      key: "_updateMaterial",
      value: function _updateMaterial() {
        if (!_defaultConstants.EDITOR) {
          this._shape.setMaterial(this._material);
        }
      }
    }]);

    return ColliderComponent;
  }((0, _index.Eventify)(_index3.Component)), _temp), (_applyDecoratedDescriptor(_class2.prototype, "sharedMaterial", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "sharedMaterial"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "isTrigger", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "isTrigger"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "center", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "center"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_material", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_isTrigger", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_center", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _index2.Vec3();
    }
  })), _class2)) || _class);
  _exports.ColliderComponent = ColliderComponent;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,