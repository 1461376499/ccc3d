(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../core/math/index.js", "./instance.js", "../../core/director.js", "../../core/components/index.js", "./assets/physic-material.js", "../../core/index.js", "./physics-ray-result.js", "../../core/default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../core/math/index.js"), require("./instance.js"), require("../../core/director.js"), require("../../core/components/index.js"), require("./assets/physic-material.js"), require("../../core/index.js"), require("./physics-ray-result.js"), require("../../core/default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.instance, global.director, global.index, global.physicMaterial, global.index, global.physicsRayResult, global.defaultConstants);
    global.physicsSystem = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _instance, _director, _index2, _physicMaterial, _index3, _physicsRayResult, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.PhysicsSystem = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  /**
   * @en
   * Physics system.
   * @zh
   * 物理系统。
   */
  var PhysicsSystem = /*#__PURE__*/function (_System) {
    _inherits(PhysicsSystem, _System);

    _createClass(PhysicsSystem, [{
      key: "enable",

      /**
       * @en
       * Gets or sets whether the physical system is enabled, which can be used to pause or continue running the physical system.
       * @zh
       * 获取或设置是否启用物理系统，可以用于暂停或继续运行物理系统。
       */
      get: function get() {
        return this._enable;
      },
      set: function set(value) {
        if (!value) this._timeReset = true;
        this._enable = value;
      }
      /**
       * @zh
       * Gets or sets whether the physical system allows automatic sleep, which defaults to true.
       * @zh
       * 获取或设置物理系统是否允许自动休眠，默认为 true。
       */

    }, {
      key: "allowSleep",
      get: function get() {
        return this._allowSleep;
      },
      set: function set(v) {
        this._allowSleep = v;

        if (!_defaultConstants.EDITOR && !_defaultConstants.PHYSICS_BUILTIN) {
          this.physicsWorld.setAllowSleep(v);
        }
      }
      /**
       * @en
       * Gets or sets the maximum number of simulated substeps per frame.
       * @zh
       * 获取或设置每帧模拟的最大子步数。
       */

    }, {
      key: "maxSubStep",
      get: function get() {
        return this._maxSubStep;
      },
      set: function set(value) {
        this._maxSubStep = value;
      }
      /**
       * @en
       * Gets or sets the fixed time consumed by each simulation step.
       * @zh
       * 获取或设置每步模拟消耗的固定时间。
       */

    }, {
      key: "deltaTime",
      get: function get() {
        return this._deltaTime;
      },
      set: function set(value) {
        this._deltaTime = value;
      }
      /**
       * @en
       * Gets or sets whether to simulate with a fixed time step, which defaults to true.
       * @zh
       * 获取或设置是否使用固定的时间步长进行模拟，默认为 true。
       */

    }, {
      key: "useFixedTime",
      get: function get() {
        return this._useFixedTime;
      },
      set: function set(value) {
        this._useFixedTime = value;
      }
      /**
       * @en
       * Gets or sets the value of gravity in the physical world, which defaults to (0, -10, 0).
       * @zh
       * 获取或设置物理世界的重力数值，默认为 (0, -10, 0)。
       */

    }, {
      key: "gravity",
      get: function get() {
        return this._gravity;
      },
      set: function set(gravity) {
        this._gravity.set(gravity);

        if (!_defaultConstants.EDITOR && !_defaultConstants.PHYSICS_BUILTIN) {
          this.physicsWorld.setGravity(gravity);
        }
      }
      /**
       * @en
       * Gets the global default physical material.
       * @zh
       * 获取全局的默认物理材质。
       */

    }, {
      key: "defaultMaterial",
      get: function get() {
        return this._material;
      }
      /**
       * @en
       * Gets the wrappered object of the physical world through which you can access the actual underlying object.
       * @zh
       * 获取物理世界的封装对象，通过它你可以访问到实际的底层对象。
       */

    }], [{
      key: "instance",

      /**
       * @en
       * Gets the physical system instance.
       * @zh
       * 获取物理系统实例。
       */
      get: function get() {
        if (_defaultConstants.DEBUG && (0, _instance.checkPhysicsModule)(PhysicsSystem._instance)) {
          return null;
        }

        return PhysicsSystem._instance;
      }
    }]);

    function PhysicsSystem() {
      var _this;

      _classCallCheck(this, PhysicsSystem);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(PhysicsSystem).call(this));
      _this.physicsWorld = void 0;
      _this.raycastClosestResult = new _physicsRayResult.PhysicsRayResult();
      _this.raycastResults = [];
      _this._enable = true;
      _this._allowSleep = true;
      _this._gravity = new _index.Vec3(0, -10, 0);
      _this._maxSubStep = 1;
      _this._deltaTime = 1.0 / 60.0;
      _this._useFixedTime = true;
      _this._timeSinceLastUpdate = 0;
      _this._timeReset = true;
      _this.raycastOptions = {
        'group': -1,
        'mask': -1,
        'queryTrigger': true,
        'maxDistance': 10000000
      };
      _this.raycastResultPool = new _index3.RecyclePool(function () {
        return new _physicsRayResult.PhysicsRayResult();
      }, 1);
      _this.physicsWorld = (0, _instance.createPhysicsWorld)();
      _this.gravity = _this._gravity;
      _this.allowSleep = _this._allowSleep;
      _this._material = new _physicMaterial.PhysicMaterial();
      _this._material.friction = 0.5;
      _this._material.restitution = 0.1;

      _this._material.on('physics_material_update', _this._updateMaterial, _assertThisInitialized(_this));

      _this.physicsWorld.setDefaultMaterial(_this._material);

      return _this;
    }
    /**
     * @en
     * Perform a simulation of the physics system, which will now be performed automatically on each frame.
     * @zh
     * 执行一次物理系统的模拟，目前将在每帧自动执行一次。
     * @param deltaTime 与上一次执行相差的时间，目前为每帧消耗时间
     */


    _createClass(PhysicsSystem, [{
      key: "postUpdate",
      value: function postUpdate(deltaTime) {
        if (_defaultConstants.EDITOR && !this._executeInEditMode) {
          return;
        }

        if (!this._enable) {
          this.physicsWorld.syncSceneToPhysics();
          return;
        }

        if (this._timeReset) {
          this._timeSinceLastUpdate = 0;
          this._timeReset = false;
        } else {
          this._timeSinceLastUpdate = deltaTime;
        }

        this.physicsWorld.emitEvents();

        _director.director.emit(_director.Director.EVENT_BEFORE_PHYSICS);

        this.physicsWorld.syncSceneToPhysics();

        if (this._useFixedTime) {
          this.physicsWorld.step(this._deltaTime);
        } else {
          this.physicsWorld.step(this._deltaTime, this._timeSinceLastUpdate, this._maxSubStep);
        } // TODO: nesting the dirty flag reset between the syncScenetoPhysics and the simulation to reduce calling syncScenetoPhysics.


        this.physicsWorld.syncSceneToPhysics();

        _director.director.emit(_director.Director.EVENT_AFTER_PHYSICS);
      }
      /**
       * @en
       * Collision detect all collider, and record all the detected results, through PhysicsSystem.Instance.RaycastResults access to the results.
       * @zh
       * 检测所有的碰撞盒，并记录所有被检测到的结果，通过 PhysicsSystem.instance.raycastResults 访问结果。
       * @param worldRay 世界空间下的一条射线
       * @param mask 掩码，默认为 0xffffffff
       * @param maxDistance 最大检测距离，默认为 10000000，目前请勿传入 Infinity 或 Number.MAX_VALUE
       * @param queryTrigger 是否检测触发器
       * @return boolean 表示是否有检测到碰撞盒
       */

    }, {
      key: "raycast",
      value: function raycast(worldRay) {
        var mask = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0xffffffff;
        var maxDistance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10000000;
        var queryTrigger = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
        this.raycastResultPool.reset();
        this.raycastResults.length = 0;
        this.raycastOptions.mask = mask;
        this.raycastOptions.maxDistance = maxDistance;
        this.raycastOptions.queryTrigger = queryTrigger;
        return this.physicsWorld.raycast(worldRay, this.raycastOptions, this.raycastResultPool, this.raycastResults);
      }
      /**
       * @en
       * Collision detect all collider, and record and ray test results with the shortest distance by PhysicsSystem.Instance.RaycastClosestResult access to the results.
       * @zh
       * 检测所有的碰撞盒，并记录与射线距离最短的检测结果，通过 PhysicsSystem.instance.raycastClosestResult 访问结果。
       * @param worldRay 世界空间下的一条射线
       * @param mask 掩码，默认为 0xffffffff
       * @param maxDistance 最大检测距离，默认为 10000000，目前请勿传入 Infinity 或 Number.MAX_VALUE
       * @param queryTrigger 是否检测触发器
       * @return boolean 表示是否有检测到碰撞盒
       */

    }, {
      key: "raycastClosest",
      value: function raycastClosest(worldRay) {
        var mask = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0xffffffff;
        var maxDistance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10000000;
        var queryTrigger = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
        this.raycastOptions.mask = mask;
        this.raycastOptions.maxDistance = maxDistance;
        this.raycastOptions.queryTrigger = queryTrigger;
        return this.physicsWorld.raycastClosest(worldRay, this.raycastOptions, this.raycastClosestResult);
      }
    }, {
      key: "_updateMaterial",
      value: function _updateMaterial() {
        if (!_defaultConstants.PHYSICS_BUILTIN) {
          this.physicsWorld.setDefaultMaterial(this._material);
        }
      }
    }]);

    return PhysicsSystem;
  }(_index2.System);

  _exports.PhysicsSystem = PhysicsSystem;
  PhysicsSystem.ID = 'PHYSICS';
  PhysicsSystem._instance = void 0;

  if (_defaultConstants.PHYSICS_BUILTIN || _defaultConstants.PHYSICS_CANNON || _defaultConstants.PHYSICS_AMMO) {
    _director.director.on(_director.Director.EVENT_INIT, function () {
      var sys = new cc.PhysicsSystem();
      cc.PhysicsSystem._instance = sys;

      _director.director.registerSystem(PhysicsSystem.ID, sys, 0);
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,