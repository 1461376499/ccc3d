(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./define.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./define.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.define);
    global.commandBuffer = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _define) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.GFXCommandBuffer = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  /**
   * @en GFX command buffer.
   * @zh GFX 命令缓冲。
   */
  // tslint:disable: max-line-length
  var GFXCommandBuffer = /*#__PURE__*/function (_GFXObject) {
    _inherits(GFXCommandBuffer, _GFXObject);

    _createClass(GFXCommandBuffer, [{
      key: "type",

      /**
       * @en Type of the command buffer.
       * @zh 命令缓冲类型。
       */
      get: function get() {
        return this._type;
      }
      /**
       * @en Number of draw calls currently recorded.
       * @zh 绘制调用次数。
       */

    }, {
      key: "numDrawCalls",
      get: function get() {
        return this._numDrawCalls;
      }
      /**
       * @en Number of instances currently recorded.
       * @zh 绘制 Instance 数量。
       */

    }, {
      key: "numInstances",
      get: function get() {
        return this._numInstances;
      }
      /**
       * @en Number of triangles currently recorded.
       * @zh 绘制三角形数量。
       */

    }, {
      key: "numTris",
      get: function get() {
        return this._numTris;
      }
    }]);

    function GFXCommandBuffer(device) {
      var _this;

      _classCallCheck(this, GFXCommandBuffer);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(GFXCommandBuffer).call(this, _define.GFXObjectType.COMMAND_BUFFER));
      _this._device = void 0;
      _this._allocator = null;
      _this._type = _define.GFXCommandBufferType.PRIMARY;
      _this._numDrawCalls = 0;
      _this._numInstances = 0;
      _this._numTris = 0;
      _this._device = device;
      return _this;
    }

    return GFXCommandBuffer;
  }(_define.GFXObject);

  _exports.GFXCommandBuffer = GFXCommandBuffer;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,