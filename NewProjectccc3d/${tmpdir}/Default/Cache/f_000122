(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../../core/assets/index.js", "../../../core/utils/index.js", "../../../core/utils/js.js", "../../../core/math/index.js", "../../components/index.js", "../../../core/assets/asset-enum.js", "../../../core/director.js", "../../../core/load-pipeline/index.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../../core/assets/index.js"), require("../../../core/utils/index.js"), require("../../../core/utils/js.js"), require("../../../core/math/index.js"), require("../../components/index.js"), require("../../../core/assets/asset-enum.js"), require("../../../core/director.js"), require("../../../core/load-pipeline/index.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.index, global.js, global.index, global.index, global.assetEnum, global.director, global.index);
    global.letterFont = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _index2, _js, _index3, _index4, _assetEnum, _director, _index5) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.letterFont = _exports.LetterAtlas = _exports.LetterRenderTexture = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  // const OUTLINE_SUPPORTED = cc.js.isChildClassOf(LabelOutlineComponent, UIComponent);
  var Overflow = _index4.LabelComponent.Overflow;

  var WHITE = _index3.Color.WHITE.clone();

  var space = 2;
  var TextAlignment = _index4.LabelComponent.HorizontalAlign;
  var VerticalTextAlignment = _index4.LabelComponent.VerticalAlign;

  var LetterInfo = function LetterInfo() {
    _classCallCheck(this, LetterInfo);

    this["char"] = '';
    this.valid = true;
    this.x = 0;
    this.y = 0;
    this.line = 0;
    this.hash = '';
  };

  var FontLetterDefinition = function FontLetterDefinition() {
    _classCallCheck(this, FontLetterDefinition);

    this.u = 0;
    this.v = 0;
    this.w = 0;
    this.h = 0;
    this.texture = null;
    this.offsetX = 0;
    this.offsetY = 0;
    this.valid = false;
    this.xAdvance = 0;
  };

  var _backgroundStyle = 'rgba(255, 255, 255, 0.005)';

  var LetterTexture = /*#__PURE__*/function () {
    function LetterTexture(_char, labelInfo) {
      _classCallCheck(this, LetterTexture);

      this.image = null;
      this.labelInfo = void 0;
      this["char"] = void 0;
      this.data = null;
      this.canvas = null;
      this.context = null;
      this.width = 0;
      this.height = 0;
      this.hash = void 0;
      this["char"] = _char;
      this.labelInfo = labelInfo;
      this.hash = _char.charCodeAt(0) + labelInfo.hash;
    }

    _createClass(LetterTexture, [{
      key: "updateRenderData",
      value: function updateRenderData() {
        this._updateProperties();

        this._updateTexture();
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.image = null; // LabelComponent._canvasPool.put(this._data);
      }
    }, {
      key: "_updateProperties",
      value: function _updateProperties() {
        this.data = _index4.LabelComponent._canvasPool.get();
        this.canvas = this.data.canvas;
        this.context = this.data.context;

        if (this.context) {
          this.context.font = this.labelInfo.fontDesc;
          var width = (0, _index2.safeMeasureText)(this.context, this["char"]);
          this.width = parseFloat(width.toFixed(2));
          this.height = this.labelInfo.fontSize;
        }

        if (this.canvas.width !== this.width) {
          this.canvas.width = this.width;
        }

        if (this.canvas.height !== this.height) {
          this.canvas.height = this.height;
        }

        if (!this.image) {
          this.image = new _index.ImageAsset();
        }

        this.image.reset(this.canvas);
      }
    }, {
      key: "_updateTexture",
      value: function _updateTexture() {
        if (!this.context || !this.canvas) {
          return;
        }

        var context = this.context;
        var labelInfo = this.labelInfo;
        var width = this.canvas.width;
        var height = this.canvas.height;
        context.textAlign = 'center';
        context.textBaseline = 'middle';
        context.clearRect(0, 0, width, height); // Add a white background to avoid black edges.

        context.fillStyle = _backgroundStyle;
        context.fillRect(0, 0, width, height);
        context.font = labelInfo.fontDesc;
        var startX = width / 2;
        var startY = height / 2;
        var color = labelInfo.color; // use round for line join to avoid sharp intersect point

        context.lineJoin = 'round';
        context.fillStyle = "rgba(".concat(color.r, ", ").concat(color.g, ", ").concat(color.b, ", ", 1, ")");

        if (labelInfo.isOutlined) {
          var strokeColor = labelInfo.out || WHITE;
          context.strokeStyle = "rgba(".concat(strokeColor.r, ", ").concat(strokeColor.g, ", ").concat(strokeColor.b, ", ").concat(strokeColor.a / 255, ")");
          context.lineWidth = labelInfo.margin * 2;
          context.strokeText(this["char"], startX, startY);
        }

        context.fillText(this["char"], startX, startY); // this.texture.handleLoadedTexture();
        // (this.image as Texture2D).updateImage();
      }
    }]);

    return LetterTexture;
  }();

  var LetterRenderTexture = /*#__PURE__*/function (_Texture2D) {
    _inherits(LetterRenderTexture, _Texture2D);

    function LetterRenderTexture() {
      _classCallCheck(this, LetterRenderTexture);

      return _possibleConstructorReturn(this, _getPrototypeOf(LetterRenderTexture).apply(this, arguments));
    }

    _createClass(LetterRenderTexture, [{
      key: "initWithSize",

      /**
       * @en
       * Init the render texture with size.
       * @zh
       * 初始化 render texture。
       * @param [width]
       * @param [height]
       * @param [string]
       */
      value: function initWithSize(width, height) {
        var format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _assetEnum.PixelFormat.RGBA8888;
        this.reset({
          width: width,
          height: height,
          format: format
        });
        this.loaded = true;
        this.emit('load');
      }
      /**
       * @en Draw a texture to the specified position
       * @zh 将指定的图片渲染到指定的位置上。
       * @param {Texture2D} image
       * @param {Number} x
       * @param {Number} y
       */

    }, {
      key: "drawTextureAt",
      value: function drawTextureAt(image, x, y) {
        var gfxTexture = this.getGFXTexture();

        if (!image || !gfxTexture) {
          return;
        }

        var gfxDevice = this._getGFXDevice();

        if (!gfxDevice) {
          console.warn('Unable to get device');
          return;
        }

        var region = {
          buffOffset: 0,
          buffStride: 0,
          buffTexHeight: 0,
          texOffset: {
            x: x,
            y: y,
            z: 0
          },
          texExtent: {
            width: image.width,
            height: image.height,
            depth: 1
          },
          texSubres: {
            baseMipLevel: 0,
            levelCount: 1,
            baseArrayLayer: 0,
            layerCount: 1
          }
        };
        gfxDevice.copyTexImagesToTexture([image.data], gfxTexture, [region]);
      }
    }]);

    return LetterRenderTexture;
  }(_index.Texture2D);

  _exports.LetterRenderTexture = LetterRenderTexture;

  var LetterAtlas = /*#__PURE__*/function () {
    _createClass(LetterAtlas, [{
      key: "width",
      get: function get() {
        return this._width;
      }
    }, {
      key: "height",
      get: function get() {
        return this._height;
      }
    }]);

    function LetterAtlas(width, height) {
      _classCallCheck(this, LetterAtlas);

      this.texture = void 0;
      this._x = space;
      this._y = space;
      this._nextY = space;
      this._width = 0;
      this._height = 0;
      this._letterDefinitions = new Map();
      this._dirty = false;
      this.texture = new LetterRenderTexture();
      this.texture.initWithSize(width, height);
      this._width = width;
      this._height = height;

      _director.director.on(_director.Director.EVENT_BEFORE_SCENE_LAUNCH, this.beforeSceneLoad, this);
    }

    _createClass(LetterAtlas, [{
      key: "insertLetterTexture",
      value: function insertLetterTexture(letterTexture) {
        var texture = letterTexture.image;
        var device = _director.director.root.device;

        if (!texture || !this.texture || !device) {
          return null;
        }

        var width = texture.width;
        var height = texture.height;

        if (this._x + width + space > this._width) {
          this._x = space;
          this._y = this._nextY;
        }

        if (this._y + height > this._nextY) {
          this._nextY = this._y + height + space;
        }

        if (this._nextY > this._height) {
          return null;
        }

        this.texture.drawTextureAt(texture, this._x, this._y);
        this._dirty = true;
        var letterDefinition = new FontLetterDefinition();
        letterDefinition.u = this._x;
        letterDefinition.v = this._y;
        letterDefinition.texture = this.texture;
        letterDefinition.valid = true;
        letterDefinition.w = letterTexture.width;
        letterDefinition.h = letterTexture.height;
        letterDefinition.xAdvance = letterTexture.width;
        this._x += width + space;

        this._letterDefinitions.set(letterTexture.hash, letterDefinition);
        /*
        const region = new GFXBufferTextureCopy();
        region.texOffset.x = letterDefinition.offsetX;
        region.texOffset.y = letterDefinition.offsetY;
        region.texExtent.width = letterDefinition.w;
        region.texExtent.height = letterDefinition.h;
        */


        return letterDefinition;
      }
    }, {
      key: "update",
      value: function update() {
        if (!this._dirty) {
          return;
        } // this.texture.update();


        this._dirty = false;
      }
    }, {
      key: "reset",
      value: function reset() {
        this._x = space;
        this._y = space;
        this._nextY = space; // const chars = this._letterDefinitions;
        // for (let i = 0, l = (Object.keys(chars)).length; i < l; i++) {
        //     const char = chars[i];
        //     if (!char.valid) {
        //         continue;
        //     }
        //     char.destroy();
        // }
        // this._letterDefinitions = createMap();

        this._letterDefinitions.clear();
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.reset();

        if (this.texture) {
          this.texture.destroy();
        }
      }
    }, {
      key: "beforeSceneLoad",
      value: function beforeSceneLoad() {
        this.destroy();
        var texture = new LetterRenderTexture();
        texture.initWithSize(this._width, this._height); // texture.update();

        this.texture = texture;
      }
    }, {
      key: "getLetter",
      value: function getLetter(key) {
        return this._letterDefinitions.get(key);
      }
    }, {
      key: "addLetterDefinitions",
      value: function addLetterDefinitions(key, letterDefinition) {
        this._letterDefinitions[key] = letterDefinition;
      }
    }, {
      key: "cloneLetterDefinition",
      value: function cloneLetterDefinition() {
        var copyLetterDefinitions = {};

        for (var _i = 0, _Object$keys = Object.keys(this._letterDefinitions); _i < _Object$keys.length; _i++) {
          var key = _Object$keys[_i];
          var value = new FontLetterDefinition();
          (0, _js.mixin)(value, this._letterDefinitions[key]);
          copyLetterDefinitions[key] = value;
        }

        return copyLetterDefinitions;
      }
    }, {
      key: "assignLetterDefinitions",
      value: function assignLetterDefinitions(letterDefinitions) {
        var _this = this;

        letterDefinitions.forEach(function (value, key) {
          var oldValue = _this._letterDefinitions[key];
          (0, _js.mixin)(oldValue, value);
        });
      }
    }, {
      key: "scaleFontLetterDefinition",
      value: function scaleFontLetterDefinition(scaleFactor) {
        for (var _i2 = 0, _Object$keys2 = Object.keys(this._letterDefinitions); _i2 < _Object$keys2.length; _i2++) {
          var fontDefinition = _Object$keys2[_i2];
          var letterDefinitions = this._letterDefinitions[fontDefinition];
          letterDefinitions.w *= scaleFactor;
          letterDefinitions.h *= scaleFactor;
          letterDefinitions.offsetX *= scaleFactor;
          letterDefinitions.offsetY *= scaleFactor;
          letterDefinitions.xAdvance *= scaleFactor;
        }
      }
    }, {
      key: "getLetterDefinitionForChar",
      value: function getLetterDefinitionForChar(_char2, labelInfo) {
        var hash = _char2.charCodeAt(0) + labelInfo.hash;

        var letterDefinition = this._letterDefinitions.get(hash);

        if (!letterDefinition) {
          var temp = new LetterTexture(_char2, labelInfo);
          temp.updateRenderData();
          letterDefinition = this.insertLetterTexture(temp);
          temp.destroy();
        }

        return letterDefinition;
      }
    }]);

    return LetterAtlas;
  }();

  _exports.LetterAtlas = LetterAtlas;

  var _tmpRect = new _index3.Rect();

  var _comp = null;
  var _horizontalKernings = [];
  var _lettersInfo = [];
  var _linesWidth = [];
  var _linesOffsetX = [];

  var _labelDimensions = new _index3.Size();

  var _fontAtlas = null;
  var _fntConfig = null;
  var _numberOfLines = 0;
  var _textDesiredHeight = 0;
  var _letterOffsetY = 0;
  var _tailoredTopY = 0;
  var _tailoredBottomY = 0;
  var _bmfontScale = 1.0;
  var _lineBreakWithoutSpaces = false;
  var _lineSpacing = 0;
  var _string = '';
  var _fontSize = 0;
  var _originFontSize = 0;

  var _contentSize = new _index3.Size();

  var _hAlign = 0;
  var _vAlign = 0;
  var _spacingX = 0;
  var _lineHeight = 0;
  var _overflow = 0;
  var _isWrapText = false;
  var _labelWidth = 0;
  var _labelHeight = 0;
  var _maxLineWidth = 0;
  var _atlasWidth = 1024;
  var _atlasHeight = 1024;
  var _fontFamily = '';
  var _isBold = false;
  var _labelInfo = {
    fontSize: 0,
    lineHeight: 0,
    hash: '',
    fontFamily: '',
    fontDesc: 'Arial',
    hAlign: 0,
    vAlign: 0,
    color: WHITE,
    isOutlined: false,
    out: WHITE,
    margin: 0
  };
  var letterFont = {
    getAssemblerData: function getAssemblerData() {
      if (!_fontAtlas) {
        _fontAtlas = new LetterAtlas(_atlasWidth, _atlasHeight);
      }

      return _fontAtlas.texture;
    },
    updateRenderData: function updateRenderData(comp) {
      if (!comp.renderData || !comp.renderData.vertDirty) {
        return;
      }

      if (_comp === comp) {
        return;
      }

      _comp = comp;

      this._updateFontFamily(comp);

      _labelInfo.fontFamily = _fontFamily;

      this._updateProperties();

      _labelInfo.fontDesc = this._getFontDesc();

      this._updateContent();

      _comp.actualFontSize = _fontSize;

      _comp.node.setContentSize(_contentSize);

      _comp.renderData.vertDirty = _comp.renderData.uvDirty = false;
      _comp = null;

      this._resetProperties();
    },
    _updateFontScale: function _updateFontScale() {
      _bmfontScale = _fontSize / _originFontSize;
    },
    _updateProperties: function _updateProperties() {
      if (!_comp) {
        return;
      }

      _string = _comp.string.toString();
      _fontSize = _comp.fontSize;
      _originFontSize = _fontSize;

      var contentSize = _comp.node.getContentSize();

      _contentSize.width = contentSize.width;
      _contentSize.height = contentSize.height;
      _hAlign = _comp.horizontalAlign;
      _vAlign = _comp.verticalAlign;
      _spacingX = _comp.spacingX;
      _overflow = _comp.overflow;
      _lineHeight = _comp.lineHeight;
      _isBold = _comp.isBold; // should wrap text

      if (_overflow === Overflow.NONE) {
        _isWrapText = false;
      } else if (_overflow === Overflow.RESIZE_HEIGHT) {
        _isWrapText = true;
      } else {
        _isWrapText = _comp.enableWrapText;
      } // outline


      var outline =
      /*OUTLINE_SUPPORTED && */
      _comp.getComponent(_index4.LabelOutlineComponent);

      if (outline && outline.enabled) {
        _labelInfo.isOutlined = true;
        _labelInfo.margin = outline.width;
        _labelInfo.out = outline.color;
        _labelInfo.out.a = outline.color.a * _comp.color.a / 255.0;
      } else {
        _labelInfo.isOutlined = false;
        _labelInfo.margin = 0;
      }

      _labelInfo.lineHeight = _lineHeight;
      _labelInfo.fontSize = _fontSize;
      _labelInfo.fontFamily = _fontFamily;
      _labelInfo.color = _comp.color;
      _labelInfo.hash = this._computeHash(_labelInfo);

      this._setupBMFontOverflowMetrics();
    },
    _updateFontFamily: function _updateFontFamily(comp) {
      if (!comp.useSystemFont) {
        if (comp.font) {
          if (comp.font._nativeAsset) {
            _fontFamily = comp.font._nativeAsset;
          } else {
            _fontFamily = _index5.loader.getRes(comp.font.nativeUrl) || '';

            if (!_fontFamily) {
              _index5.loader.load(comp.font.nativeUrl, function (err, fontFamily) {
                _fontFamily = fontFamily || 'Arial';

                if (comp.font) {
                  comp.font._nativeAsset = fontFamily;
                }

                comp.updateRenderData(true);
              });
            }
          }
        } else {
          _fontFamily = 'Arial';
        }
      } else {
        _fontFamily = comp.fontFamily;
      }
    },
    _computeHash: function _computeHash(labelInfo) {
      var hashData = '';
      var color = labelInfo.color.toHEX('#rrggbb');
      var out = '';

      if (labelInfo.isOutlined) {
        out = labelInfo.out.toHEX('#rrggbb');
      }

      return hashData + labelInfo.fontSize + labelInfo.fontFamily + color + out;
    },
    _getFontDesc: function _getFontDesc() {
      var fontDesc = _fontSize.toString() + 'px ';
      fontDesc = fontDesc + _fontFamily;

      if (_isBold) {
        fontDesc = 'bold ' + fontDesc;
      }

      return fontDesc;
    },
    _resetProperties: function _resetProperties() {},
    _updateContent: function _updateContent() {
      this._updateFontScale(); // this._computeHorizontalKerningForText();


      this._alignText();
    },
    _computeHorizontalKerningForText: function _computeHorizontalKerningForText() {// const string = _string;
      // const stringLen = string.length;
      // const kerningDict = _fntConfig.kerningDict;
      // const horizontalKernings = _horizontalKernings;
      // let prev = -1;
      // for (let i = 0; i < stringLen; ++i) {
      //     const key = string.charCodeAt(i);
      //     const kerningAmount = kerningDict[(prev << 16) | (key & 0xffff)] || 0;
      //     if (i < stringLen - 1) {
      //         horizontalKernings[i] = kerningAmount;
      //     } else {
      //         horizontalKernings[i] = 0;
      //     }
      //     prev = key;
      // }
    },
    _multilineTextWrap: function _multilineTextWrap(nextTokenFunc) {
      var textLen = _string.length;
      var lineIndex = 0;
      var nextTokenX = 0;
      var nextTokenY = 0;
      var longestLine = 0;
      var letterRight = 0;
      var highestY = 0;
      var lowestY = 0;
      var letterDef = null;
      var letterPosition = new _index3.Vec2(0, 0);

      this._updateFontScale();

      for (var index = 0; index < textLen;) {
        var character = _string.charAt(index);

        if (character === '\n') {
          _linesWidth.push(letterRight);

          letterRight = 0;
          lineIndex++;
          nextTokenX = 0;
          nextTokenY -= _lineHeight * _bmfontScale + _lineSpacing;

          this._recordPlaceholderInfo(index, character);

          index++;
          continue;
        }

        var tokenLen = nextTokenFunc(_string, index, textLen);
        var tokenHighestY = highestY;
        var tokenLowestY = lowestY;
        var tokenRight = letterRight;
        var nextLetterX = nextTokenX;
        var newLine = false;

        for (var tmp = 0; tmp < tokenLen; ++tmp) {
          var letterIndex = index + tmp;
          character = _string.charAt(letterIndex);

          if (character === '\r') {
            this._recordPlaceholderInfo(letterIndex, character);

            continue;
          }

          letterDef = _fontAtlas && _fontAtlas.getLetterDefinitionForChar(character, _labelInfo);

          if (!letterDef) {
            this._recordPlaceholderInfo(letterIndex, character);

            continue;
          }

          var letterX = nextLetterX + letterDef.offsetX * _bmfontScale;

          if (_isWrapText && _maxLineWidth > 0 && nextTokenX > 0 && letterX + letterDef.w * _bmfontScale > _maxLineWidth && !(0, _index2.isUnicodeSpace)(character)) {
            _linesWidth.push(letterRight);

            letterRight = 0;
            lineIndex++;
            nextTokenX = 0;
            nextTokenY -= _lineHeight * _bmfontScale + _lineSpacing;
            newLine = true;
            break;
          } else {
            letterPosition.x = letterX;
          }

          letterPosition.y = nextTokenY - letterDef.offsetY * _bmfontScale;

          this._recordLetterInfo(letterPosition, character, letterIndex, lineIndex);

          if (letterIndex + 1 < _horizontalKernings.length && letterIndex < textLen - 1) {
            nextLetterX += _horizontalKernings[letterIndex + 1];
          }

          nextLetterX += letterDef.xAdvance * _bmfontScale + _spacingX;
          tokenRight = letterPosition.x + letterDef.w * _bmfontScale;

          if (tokenHighestY < letterPosition.y) {
            tokenHighestY = letterPosition.y;
          }

          if (tokenLowestY > letterPosition.y - letterDef.h * _bmfontScale) {
            tokenLowestY = letterPosition.y - letterDef.h * _bmfontScale;
          }
        } // end of for loop


        if (newLine) {
          continue;
        }

        nextTokenX = nextLetterX;
        letterRight = tokenRight;

        if (highestY < tokenHighestY) {
          highestY = tokenHighestY;
        }

        if (lowestY > tokenLowestY) {
          lowestY = tokenLowestY;
        }

        if (longestLine < letterRight) {
          longestLine = letterRight;
        }

        index += tokenLen;
      } // end of for loop


      _linesWidth.push(letterRight);

      _numberOfLines = lineIndex + 1;
      _textDesiredHeight = _numberOfLines * _lineHeight * _bmfontScale;

      if (_numberOfLines > 1) {
        _textDesiredHeight += (_numberOfLines - 1) * _lineSpacing;
      }

      _contentSize.width = _labelWidth;
      _contentSize.height = _labelHeight;

      if (_labelWidth <= 0) {
        _contentSize.width = parseFloat(longestLine.toFixed(2));
      }

      if (_labelHeight <= 0) {
        _contentSize.height = parseFloat(_textDesiredHeight.toFixed(2));
      }

      _tailoredTopY = _contentSize.height;
      _tailoredBottomY = 0;

      if (highestY > 0) {
        _tailoredTopY = _contentSize.height + highestY;
      }

      if (lowestY < -_textDesiredHeight) {
        _tailoredBottomY = _textDesiredHeight + lowestY;
      }

      return true;
    },
    _getFirstCharLen: function _getFirstCharLen() {
      return 1;
    },
    _getFirstWordLen: function _getFirstWordLen(text, startIndex, textLen) {
      var character = text.charAt(startIndex);

      if ((0, _index2.isUnicodeCJK)(character) || character === '\n' || (0, _index2.isUnicodeSpace)(character)) {
        return 1;
      }

      if (!_fontAtlas) {
        return;
      }

      var len = 1;

      var letterDef = _fontAtlas.getLetterDefinitionForChar(character, _labelInfo);

      if (!letterDef) {
        return len;
      }

      var nextLetterX = letterDef.xAdvance * _bmfontScale + _spacingX;
      var letterX;

      for (var index = startIndex + 1; index < textLen; ++index) {
        character = text.charAt(index);
        letterDef = _fontAtlas.getLetterDefinitionForChar(character, _labelInfo);

        if (!letterDef) {
          break;
        }

        letterX = nextLetterX + letterDef.offsetX * _bmfontScale;

        if (letterX + letterDef.w * _bmfontScale > _maxLineWidth && !(0, _index2.isUnicodeSpace)(character) && _maxLineWidth > 0) {
          return len;
        }

        nextLetterX += letterDef.xAdvance * _bmfontScale + _spacingX;

        if (character === '\n' || (0, _index2.isUnicodeSpace)(character) || (0, _index2.isUnicodeCJK)(character)) {
          break;
        }

        len++;
      }

      return len;
    },
    _multilineTextWrapByWord: function _multilineTextWrapByWord() {
      return this._multilineTextWrap(this._getFirstWordLen);
    },
    _multilineTextWrapByChar: function _multilineTextWrapByChar() {
      return this._multilineTextWrap(this._getFirstCharLen);
    },
    _recordPlaceholderInfo: function _recordPlaceholderInfo(letterIndex, _char3) {
      if (letterIndex >= _lettersInfo.length) {
        var tmpInfo = new LetterInfo();

        _lettersInfo.push(tmpInfo);
      }

      _lettersInfo[letterIndex]["char"] = _char3;
      _lettersInfo[letterIndex].hash = _char3.charCodeAt(0) + _labelInfo.hash;
      _lettersInfo[letterIndex].valid = false;
    },
    _recordLetterInfo: function _recordLetterInfo(letterPosition, character, letterIndex, lineIndex) {
      if (letterIndex >= _lettersInfo.length) {
        var tmpInfo = new LetterInfo();

        _lettersInfo.push(tmpInfo);
      }

      var _char4 = character.charCodeAt(0);

      var key = _char4 + _labelInfo.hash;
      _lettersInfo[letterIndex].line = lineIndex;
      _lettersInfo[letterIndex]["char"] = character;
      _lettersInfo[letterIndex].hash = key;

      var fontLetter = _fontAtlas && _fontAtlas.getLetter(key);

      _lettersInfo[letterIndex].valid = fontLetter ? !!fontLetter.valid : false;
      _lettersInfo[letterIndex].x = letterPosition.x;
      _lettersInfo[letterIndex].y = letterPosition.y;
    },
    _alignText: function _alignText() {
      _textDesiredHeight = 0;
      _linesWidth.length = 0;

      if (!_lineBreakWithoutSpaces) {
        this._multilineTextWrapByWord();
      } else {
        this._multilineTextWrapByChar();
      }

      this._computeAlignmentOffset();

      this._updateQuads(); // shrink
      // if (_overflow === Overflow.SHRINK) {
      //     if (_fontSize > 0 && this._isVerticalClamp()) {
      //         this._shrinkLabelToContentSize(this._isVerticalClamp);
      //     }
      // }
      // if (!this._updateQuads()) {
      //     if (_overflow === Overflow.SHRINK) {
      //         this._shrinkLabelToContentSize(this._isHorizontalClamp);
      //     }
      // }

    },
    _scaleFontSizeDown: function _scaleFontSizeDown(fontSize) {
      var shouldUpdateContent = true;

      if (!fontSize) {
        fontSize = 0.1;
        shouldUpdateContent = false;
      }

      _fontSize = fontSize;

      if (shouldUpdateContent) {
        this._updateContent();
      }
    },
    _isVerticalClamp: function _isVerticalClamp() {
      if (_textDesiredHeight > _contentSize.height) {
        return true;
      } else {
        return false;
      }
    },
    _isHorizontalClamp: function _isHorizontalClamp() {
      var letterClamp = false;

      for (var ctr = 0, l = _string.length; ctr < l; ++ctr) {
        var letterInfo = _lettersInfo[ctr];

        if (letterInfo.valid) {
          var letterDef = _fontAtlas.getLetter(letterInfo.hash);

          if (!letterDef) {
            continue;
          }

          var px = letterInfo.x + letterDef.w * _bmfontScale;
          var lineIndex = letterInfo.line;

          if (_labelWidth > 0) {
            if (!_isWrapText) {
              if (px > _contentSize.width) {
                letterClamp = true;
                break;
              }
            } else {
              var wordWidth = _linesWidth[lineIndex];

              if (wordWidth > _contentSize.width && (px > _contentSize.width || px < 0)) {
                letterClamp = true;
                break;
              }
            }
          }
        }
      }

      return letterClamp;
    },
    _isHorizontalClamped: function _isHorizontalClamped(px, lineIndex) {
      var wordWidth = _linesWidth[lineIndex];
      var letterOverClamp = px > _contentSize.width || px < 0;

      if (!_isWrapText) {
        return letterOverClamp;
      } else {
        return wordWidth > _contentSize.width && letterOverClamp;
      }
    },
    _updateQuads: function _updateQuads() {
      if (!_comp || !_fontAtlas) {
        return;
      }

      var texture = _fontAtlas.texture;
      var node = _comp.node;
      var renderData = _comp.renderData;
      renderData.dataLength = renderData.vertexCount = renderData.indiceCount = 0;
      var contentSize = _contentSize;
      var ap = node.getAnchorPoint();
      var appx = ap.x * contentSize.width;
      var appy = ap.y * contentSize.height;
      var ret = true;

      for (var ctr = 0, l = _string.length; ctr < l; ++ctr) {
        var letterInfo = _lettersInfo[ctr];

        if (!letterInfo.valid) {
          continue;
        }

        var letterDef = _fontAtlas.getLetter(letterInfo.hash);

        if (!letterDef) {
          continue;
        }

        _tmpRect.height = letterDef.h;
        _tmpRect.width = letterDef.w;
        _tmpRect.x = letterDef.u;
        _tmpRect.y = letterDef.v;
        var py = letterInfo.y + _letterOffsetY;

        if (_labelHeight > 0) {
          if (py > _tailoredTopY) {
            var clipTop = py - _tailoredTopY;
            _tmpRect.y += clipTop;
            _tmpRect.height -= clipTop;
            py = py - clipTop;
          }

          if (py - letterDef.h * _bmfontScale < _tailoredBottomY) {
            _tmpRect.height = py < _tailoredBottomY ? 0 : py - _tailoredBottomY;
          }
        }

        var lineIndex = letterInfo.line;
        var px = letterInfo.x + letterDef.w / 2 * _bmfontScale + _linesOffsetX[lineIndex];

        if (_labelWidth > 0) {
          if (this._isHorizontalClamped(px, lineIndex)) {
            if (_overflow === Overflow.CLAMP) {
              _tmpRect.width = 0;
            } else if (_overflow === Overflow.SHRINK) {
              if (_contentSize.width > letterDef.w) {
                ret = false;
                break;
              } else {
                _tmpRect.width = 0;
              }
            }
          }
        }

        if (_tmpRect.height > 0 && _tmpRect.width > 0) {
          var letterPositionX = letterInfo.x + _linesOffsetX[letterInfo.line];
          this.appendQuad(_comp, texture, _tmpRect, false, letterPositionX - appx, py - appy, _bmfontScale);
        }
      }

      return ret;
    },
    appendQuad: function appendQuad(renderData, texture, rect, rotated, x, y, scale) {},
    _computeAlignmentOffset: function _computeAlignmentOffset() {
      _linesOffsetX.length = 0;

      switch (_hAlign) {
        case TextAlignment.LEFT:
          for (var i = 0; i < _numberOfLines; ++i) {
            _linesOffsetX.push(0);
          }

          break;

        case TextAlignment.CENTER:
          for (var _i3 = 0, l = _linesWidth.length; _i3 < l; _i3++) {
            _linesOffsetX.push((_contentSize.width - _linesWidth[_i3]) / 2);
          }

          break;

        case TextAlignment.RIGHT:
          for (var _i4 = 0, _l = _linesWidth.length; _i4 < _l; _i4++) {
            _linesOffsetX.push(_contentSize.width - _linesWidth[_i4]);
          }

          break;

        default:
          break;
      }

      switch (_vAlign) {
        case VerticalTextAlignment.TOP:
          _letterOffsetY = _contentSize.height;
          break;

        case VerticalTextAlignment.CENTER:
          _letterOffsetY = (_contentSize.height + _textDesiredHeight) / 2 - (_lineHeight - _fontSize) / 2;
          break;

        case VerticalTextAlignment.BOTTOM:
          _letterOffsetY = (_contentSize.height + _textDesiredHeight) / 2 - (_lineHeight - _fontSize);
          break;

        default:
          break;
      }
    },
    _setupBMFontOverflowMetrics: function _setupBMFontOverflowMetrics() {
      var newWidth = _contentSize.width;
      var newHeight = _contentSize.height;

      if (_overflow === Overflow.RESIZE_HEIGHT) {
        newHeight = 0;
      }

      if (_overflow === Overflow.NONE) {
        newWidth = 0;
        newHeight = 0;
      }

      _labelWidth = newWidth;
      _labelHeight = newHeight;
      _labelDimensions.width = newWidth;
      _labelDimensions.height = newHeight;
      _maxLineWidth = newWidth;
    }
  };
  _exports.letterFont = letterFont;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,