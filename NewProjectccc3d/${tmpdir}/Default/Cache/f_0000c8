(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../data/utils/binary-search.js", "../math/index.js", "../platform/debug.js", "../value-types/index.js", "./bezier.js", "./easing.js", "./types.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../data/utils/binary-search.js"), require("../math/index.js"), require("../platform/debug.js"), require("../value-types/index.js"), require("./bezier.js"), require("./easing.js"), require("./types.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.binarySearch, global.index, global.debug, global.index, global.bezier, global.easing, global.types);
    global.animationCurve = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _binarySearch, _index, _debug, _index2, _bezier, easing, _types) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.sampleAnimationCurve = sampleAnimationCurve;
  _exports.computeRatioByType = computeRatioByType;
  _exports.EventInfo = _exports.AnimCurve = _exports.RatioSampler = void 0;
  easing = _interopRequireWildcard(easing);

  function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var RatioSampler = /*#__PURE__*/function () {
    function RatioSampler(ratios) {
      _classCallCheck(this, RatioSampler);

      this.ratios = void 0;
      this._findRatio = void 0;
      this.ratios = ratios; // If every piece of ratios are the same, we can use the quick function to find frame index.

      var currRatioDif;
      var lastRatioDif;
      var canOptimize = true;
      var EPSILON = 1e-6;

      for (var i = 1, l = ratios.length; i < l; i++) {
        currRatioDif = ratios[i] - ratios[i - 1];

        if (i === 1) {
          lastRatioDif = currRatioDif;
        } else if (Math.abs(currRatioDif - lastRatioDif) > EPSILON) {
          canOptimize = false;
          break;
        }
      }

      this._findRatio = canOptimize ? quickFindIndex : _binarySearch.binarySearchEpsilon;
    }

    _createClass(RatioSampler, [{
      key: "sample",
      value: function sample(ratio) {
        return this._findRatio(this.ratios, ratio);
      }
    }]);

    return RatioSampler;
  }();

  _exports.RatioSampler = RatioSampler;
  cc.RatioSampler = RatioSampler;
  /**
   * 动画曲线。
   */

  var AnimCurve = /*#__PURE__*/function () {
    _createClass(AnimCurve, null, [{
      key: "Bezier",
      value: function Bezier(controlPoints) {
        return controlPoints;
      }
    }]);

    function AnimCurve(propertyCurveData, duration) {
      _classCallCheck(this, AnimCurve);

      this.types = undefined;
      this.type = null;
      this._values = [];
      this._lerp = undefined;
      this._duration = void 0;
      this._array = void 0;
      this._duration = duration; // Install values.

      this._values = propertyCurveData.values;

      var getCurveType = function getCurveType(easingMethod) {
        if (typeof easingMethod === 'string') {
          return easingMethod;
        } else if (Array.isArray(easingMethod)) {
          if (easingMethod[0] === easingMethod[1] && easingMethod[2] === easingMethod[3]) {
            return AnimCurve.Linear;
          } else {
            return AnimCurve.Bezier(easingMethod);
          }
        } else {
          return AnimCurve.Linear;
        }
      };

      if (propertyCurveData.easingMethod !== undefined) {
        this.type = getCurveType(propertyCurveData.easingMethod);
      } else if (Array.isArray(propertyCurveData.easingMethods)) {
        this.types = propertyCurveData.easingMethods.map(getCurveType);
      } else if (propertyCurveData.easingMethods !== undefined) {
        this.types = new Array(this._values.length).fill(null);

        for (var _i = 0, _Object$keys = Object.keys(propertyCurveData.easingMethods); _i < _Object$keys.length; _i++) {
          var index = _Object$keys[_i];
          this.types[index] = getCurveType(propertyCurveData.easingMethods[index]);
        }
      } else {
        this.type = null;
      }

      var firstValue = propertyCurveData.values[0];
      var interpolate = propertyCurveData.interpolate === undefined ? true : propertyCurveData.interpolate; // Setup the lerp function.

      if (interpolate) {
        this._lerp = selectLerpFx(firstValue);
      }

      if (propertyCurveData._arrayLength !== undefined) {
        this._array = new Array(propertyCurveData._arrayLength);
      }
    }

    _createClass(AnimCurve, [{
      key: "hasLerp",
      value: function hasLerp() {
        return !!this._lerp;
      }
    }, {
      key: "valueAt",
      value: function valueAt(index) {
        if (this._array === undefined) {
          var value = this._values[index];

          if (value && value.getNoLerp) {
            return value.getNoLerp();
          } else {
            return value;
          }
        } else {
          for (var i = 0; i < this._array.length; ++i) {
            this._array[i] = this._values[this._array.length * index + i];
          }

          return this._array;
        }
      }
    }, {
      key: "valueBetween",
      value: function valueBetween(ratio, from, fromRatio, to, toRatio) {
        if (this._lerp) {
          var type = this.types ? this.types[from] : this.type;
          var dRatio = toRatio - fromRatio;
          var ratioBetweenFrames = (ratio - fromRatio) / dRatio;

          if (type) {
            ratioBetweenFrames = computeRatioByType(ratioBetweenFrames, type);
          }

          if (this._array === undefined) {
            var fromVal = this._values[from];
            var toVal = this._values[to];

            var value = this._lerp(fromVal, toVal, ratioBetweenFrames, dRatio * this._duration);

            return value;
          } else {
            for (var i = 0; i < this._array.length; ++i) {
              var _fromVal = this._values[this._array.length * from + i];
              var _toVal = this._values[this._array.length * to + i];
              this._array[i] = this._lerp(_fromVal, _toVal, ratioBetweenFrames, dRatio * this._duration);
            }

            return this._array;
          }
        } else {
          if (this._array === undefined) {
            return this.valueAt(from);
          } else {
            for (var _i2 = 0; _i2 < this._array.length; ++_i2) {
              this._array[_i2] = this._values[this._array.length * from + _i2];
            }

            return this._array;
          }
        }
      }
    }, {
      key: "empty",
      value: function empty() {
        return this._values.length === 0;
      }
      /**
       * Returns if this curve only yields constants.
       */

    }, {
      key: "constant",
      value: function constant() {
        return this._values.length === 1;
      }
    }]);

    return AnimCurve;
  }();

  _exports.AnimCurve = AnimCurve;
  AnimCurve.Linear = null;
  cc.AnimCurve = AnimCurve;

  var EventInfo = /*#__PURE__*/function () {
    function EventInfo() {
      _classCallCheck(this, EventInfo);

      this.events = [];
    }

    _createClass(EventInfo, [{
      key: "add",

      /**
       * @param func event function
       * @param params event params
       */
      value: function add(func, params) {
        this.events.push({
          func: func || '',
          params: params || []
        });
      }
    }]);

    return EventInfo;
  }();
  /**
   * 采样动画曲线。
   * @param curve 动画曲线。
   * @param sampler 采样器。
   * @param ratio 采样比率。
   */


  _exports.EventInfo = EventInfo;

  function sampleAnimationCurve(curve, sampler, ratio) {
    var index = sampler.sample(ratio);

    if (index < 0) {
      index = ~index;

      if (index <= 0) {
        index = 0;
      } else if (index >= sampler.ratios.length) {
        index = sampler.ratios.length - 1;
      } else {
        return curve.valueBetween(ratio, index - 1, sampler.ratios[index - 1], index, sampler.ratios[index]);
      }
    }

    return curve.valueAt(index);
  }

  cc.sampleAnimationCurve = sampleAnimationCurve;
  /**
   * Compute a new ratio by curve type.
   * @param ratio - The origin ratio
   * @param type - If it's Array, then ratio will be computed with bezierByTime.
   * If it's string, then ratio will be computed with cc.easing function
   */

  function computeRatioByType(ratio, type) {
    if (typeof type === 'string') {
      var func = easing[type];

      if (func) {
        ratio = func(ratio);
      } else {
        (0, _debug.errorID)(3906, type);
      }
    } else if (Array.isArray(type)) {
      // bezier curve
      ratio = (0, _bezier.bezierByTime)(type, ratio);
    }

    return ratio;
  }
  /**
   * Use this function if intervals between frames are same.
   */


  function quickFindIndex(ratios, ratio) {
    var length = ratios.length - 1;

    if (length === 0) {
      return 0;
    }

    var start = ratios[0];

    if (ratio < start) {
      return 0;
    }

    var end = ratios[length];

    if (ratio > end) {
      return length;
    }

    ratio = (ratio - start) / (end - start);
    var eachLength = 1 / length;
    var index = ratio / eachLength;
    var floorIndex = index | 0;
    var EPSILON = 1e-6;

    if (index - floorIndex < EPSILON) {
      return floorIndex;
    } else if (floorIndex + 1 - index < EPSILON) {
      return floorIndex + 1;
    }

    return ~(floorIndex + 1);
  }

  var selectLerpFx = function () {
    function makeValueTypeLerpFx(constructor) {
      var tempValue = new constructor();
      return function (from, to, ratio) {
        // @ts-ignore
        constructor.lerp(tempValue, from, to, ratio);
        return tempValue;
      };
    }

    function callLerpable(from, to, t, dt) {
      return from.lerp(to, t, dt);
    }

    function makeQuatSlerpFx() {
      var tempValue = new _index.Quat();
      return function (from, to, t, dt) {
        return _index.Quat.slerp(tempValue, from, to, t);
      };
    }

    return function (value) {
      if (value === null) {
        return undefined;
      }

      if (typeof value === 'number') {
        return _index.lerp;
      } else if (_typeof(value) === 'object' && value.constructor) {
        if (value instanceof _index.Quat) {
          return makeQuatSlerpFx();
        } else if (value instanceof _index2.ValueType) {
          return makeValueTypeLerpFx(value.constructor);
        } else if (value.constructor === Number) {
          return _index.lerp;
        } else if ((0, _types.isLerpable)(value)) {
          return callLerpable;
        }
      }

      return undefined;
    };
  }();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,