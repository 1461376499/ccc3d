(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../data/class-decorator.js", "./pipeline-serialization.js", "./render-stage.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../data/class-decorator.js"), require("./pipeline-serialization.js"), require("./render-stage.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.classDecorator, global.pipelineSerialization, global.renderStage);
    global.renderFlow = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _classDecorator, _pipelineSerialization, _renderStage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RenderFlow = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  /**
   * @en Render flow is a sub process of the [[RenderPipeline]], it dispatch the render task to all the [[RenderStage]]s.
   * @zh 渲染流程是渲染管线（[[RenderPipeline]]）的一个子过程，它将渲染任务派发到它的所有渲染阶段（[[RenderStage]]）中执行。
   */
  var RenderFlow = (_dec = (0, _classDecorator.ccclass)('RenderFlow'), _dec2 = (0, _classDecorator.property)({
    displayOrder: 0,
    visible: true
  }), _dec3 = (0, _classDecorator.property)({
    displayOrder: 1,
    visible: true
  }), _dec4 = (0, _classDecorator.property)({
    type: cc.Material,
    displayOrder: 2,
    visible: true
  }), _dec5 = (0, _classDecorator.property)({
    type: _pipelineSerialization.RenderFlowType,
    displayOrder: 3,
    visible: true
  }), _dec6 = (0, _classDecorator.property)({
    type: [_renderStage.RenderStage],
    displayOrder: 4,
    visible: true
  }), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function () {
    function RenderFlow() {
      _classCallCheck(this, RenderFlow);

      this._device = null;
      this._pipeline = null;

      _initializerDefineProperty(this, "_name", _descriptor, this);

      _initializerDefineProperty(this, "_priority", _descriptor2, this);

      _initializerDefineProperty(this, "_material", _descriptor3, this);

      _initializerDefineProperty(this, "_type", _descriptor4, this);

      _initializerDefineProperty(this, "_stages", _descriptor5, this);
    }

    _createClass(RenderFlow, [{
      key: "initialize",

      /**
       * @en The initialization process, user shouldn't use it in most case, only useful when need to generate render pipeline programmatically.
       * @zh 初始化函数，正常情况下不会用到，仅用于程序化生成渲染管线的情况。
       * @param info The render flow information
       */
      value: function initialize(info) {
        if (info.name !== undefined) {
          this._name = info.name;
        }

        this._priority = info.priority;

        if (info.material) {
          this._material = info.material;
        }

        if (info.type) {
          this._type = info.type;
        }
      }
      /**
       * @en Activate the current render flow in the given pipeline
       * @zh 为指定的渲染管线开启当前渲染流程
       * @param pipeline The render pipeline to activate this render flow
       */

    }, {
      key: "activate",
      value: function activate(pipeline) {
        this._device = pipeline.device;
        this._pipeline = pipeline;

        this._activateStages();
      }
      /**
       * @en Destroy function.
       * @zh 销毁函数。
       */

    }, {
      key: "resize",

      /**
       * @en Reset the size.
       * @zh 重置大小。
       * @param width The screen width
       * @param height The screen height
       */
      value: function resize(width, height) {
        for (var i = 0; i < this._stages.length; i++) {
          this._stages[i].resize(width, height);
        }
      }
      /**
       * @en Render function, it basically run all render stages in sequence for the given view.
       * @zh 渲染函数，对指定的渲染视图按顺序执行所有渲染阶段。
       * @param view Render view。
       */

    }, {
      key: "render",
      value: function render(view) {
        for (var i = 0; i < this._stages.length; i++) {
          this._stages[i].render(view);
        }
      }
      /**
       * @en Destroy all render stages
       * @zh 销毁全部渲染阶段。
       */

    }, {
      key: "destroyStages",
      value: function destroyStages() {
        for (var i = 0; i < this._stages.length; i++) {
          this._stages[i].destroy();
        }

        this._stages = [];
      }
      /**
       * @en Activate all render stages
       * @zh 启用所有渲染阶段
       */

    }, {
      key: "_activateStages",
      value: function _activateStages() {
        for (var i = 0; i < this._stages.length; i++) {
          this._stages[i].activate(this);
        }

        this._stages.sort(function (a, b) {
          return a.priority - b.priority;
        });
      }
    }, {
      key: "device",

      /**
       * @en The device information
       * @zh 当前设备信息
       */
      get: function get() {
        return this._device;
      }
      /**
       * @en The pipeline that the current render flow belongs to.
       * @zh 当前渲染流程归属的渲染管线
       */

    }, {
      key: "pipeline",
      get: function get() {
        return this._pipeline;
      }
      /**
       * @en The name of the render flow
       * @zh 渲染流程的名字
       */

    }, {
      key: "name",
      get: function get() {
        return this._name;
      }
      /**
       * @en The priority of the render flow
       * @zh 渲染流程的优先级
       */

    }, {
      key: "priority",
      get: function get() {
        return this._priority;
      }
      /**
       * @en All render stages of the current flow
       * @zh 渲染流程中的所有渲染阶段
       */

    }, {
      key: "stages",
      get: function get() {
        return this._stages;
      }
      /**
       * @en The material of the current flow
       * @zh 渲染流程使用的材质
       */

    }, {
      key: "material",
      get: function get() {
        return this._material;
      }
      /**
       * @en The type of the current flow
       * @zh 当前渲染流程的类型
       */

    }, {
      key: "type",
      get: function get() {
        return this._type;
      }
      /**
       * @en Rendering backend level GFX device object.
       * @zh 渲染后端层 GFX 设备对象。
       * @readonly
       */

    }]);

    return RenderFlow;
  }(), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_name", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return '';
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_priority", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_material", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_type", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _pipelineSerialization.RenderFlowType.SCENE;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_stages", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return [];
    }
  })), _class2)) || _class);
  _exports.RenderFlow = RenderFlow;
  cc.RenderFlow = RenderFlow;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,