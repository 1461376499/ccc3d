(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports);
    global.affineTransform = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AffineTransform = void 0;

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  /*
   Copyright (c) 2008-2010 Ricardo Quesada
   Copyright (c) 2011-2012 cocos2d-x.org
   Copyright (c) 2013-2016 Chukong Technologies Inc.
   Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
  
   http://www.cocos2d-x.org
  
   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:
  
   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.
  
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.
  */

  /**
   * @category core/math
   */

  /**
   * 二维仿射变换矩阵，描述了平移、缩放和缩放。
   */
  var AffineTransform = /*#__PURE__*/function () {
    _createClass(AffineTransform, null, [{
      key: "identity",

      /**
       * 创建单位二维仿射变换矩阵，它不进行任何变换。
       */
      value: function identity() {
        return new AffineTransform();
      }
      /**
       * 克隆指定的二维仿射变换矩阵。
       * @param affineTransform 指定的二维仿射变换矩阵。
       */

    }, {
      key: "clone",
      value: function clone(affineTransform) {
        return new AffineTransform(affineTransform.a, affineTransform.b, affineTransform.c, affineTransform.d, affineTransform.tx, affineTransform.ty);
      }
      /**
       * 将两个矩阵相乘的结果赋值给出口矩阵。
       * @param out 出口矩阵。
       * @param t1 左矩阵。
       * @param t2 右矩阵。
       */

    }, {
      key: "concat",
      value: function concat(out, t1, t2) {
        var a = t1.a;
        var b = t1.b;
        var c = t1.c;
        var d = t1.d;
        var tx = t1.tx;
        var ty = t1.ty;
        out.a = a * t2.a + b * t2.c;
        out.b = a * t2.b + b * t2.d;
        out.c = c * t2.a + d * t2.c;
        out.d = c * t2.b + d * t2.d;
        out.tx = tx * t2.a + ty * t2.c + t2.tx;
        out.ty = tx * t2.b + ty * t2.d + t2.ty;
      }
      /**
       * 将矩阵求逆的结果赋值给出口矩阵。
       * @param out 出口矩阵。
       * @param t 求逆的矩阵。
       */

    }, {
      key: "invert",
      value: function invert(out, t) {
        var determinant = 1 / (t.a * t.d - t.b * t.c);
        out.a = determinant * t.d;
        out.b = -determinant * t.b;
        out.c = -determinant * t.c;
        out.d = determinant * t.a;
        out.tx = determinant * (t.c * t.ty - t.d * t.tx);
        out.ty = determinant * (t.b * t.tx - t.a * t.ty);
      }
      /**
       * 将四维矩阵转换为二维仿射变换矩阵并赋值给出口矩阵。
       * @param out 出口矩阵。
       * @param mat 四维矩阵。
       */

    }, {
      key: "fromMat4",
      value: function fromMat4(out, mat) {
        out.a = mat.m00;
        out.b = mat.m01;
        out.c = mat.m04;
        out.d = mat.m05;
        out.tx = mat.m12;
        out.ty = mat.m13;
      }
      /**
       * 应用二维仿射变换矩阵到二维向量上，并将结果赋值给出口向量。
       * @param out 出口向量。
       * @param point 应用变换的向量。
       * @param t 二维仿射变换矩阵。
       */

    }, {
      key: "transformVec2",
      value: function transformVec2(out, point, transOrY, t) {
        var x;
        var y;

        if (t === undefined) {
          t = transOrY;
          x = point.x;
          y = point.y;
        } else {
          x = point;
          y = transOrY;
        }

        out.x = t.a * x + t.c * y + t.tx;
        out.y = t.b * x + t.d * y + t.ty;
      }
      /**
       * 应用二维仿射变换矩阵到二维尺寸上，并将结果赋值给出口尺寸。
       * @param out 出口尺寸。
       * @param size 应用变换的尺寸。
       * @param t 二维仿射变换矩阵。
       */

    }, {
      key: "transformSize",
      value: function transformSize(out, size, t) {
        out.width = t.a * size.width + t.c * size.height;
        out.height = t.b * size.width + t.d * size.height;
      }
      /**
       * 应用二维仿射变换矩阵到矩形上，并将结果赋值给出口矩形。
       * @param out 出口矩形。
       * @param rect 应用变换的矩形。
       * @param t 二维仿射变换矩阵。
       */

    }, {
      key: "transformRect",
      value: function transformRect(out, rect, t) {
        var or = rect.x + rect.width;
        var ot = rect.y + rect.height;
        var lbx = t.a * rect.x + t.c * rect.y + t.tx;
        var lby = t.b * rect.x + t.d * rect.y + t.ty;
        var rbx = t.a * or + t.c * rect.y + t.tx;
        var rby = t.b * or + t.d * rect.y + t.ty;
        var ltx = t.a * rect.x + t.c * ot + t.tx;
        var lty = t.b * rect.x + t.d * ot + t.ty;
        var rtx = t.a * or + t.c * ot + t.tx;
        var rty = t.b * or + t.d * ot + t.ty;
        var minX = Math.min(lbx, rbx, ltx, rtx);
        var maxX = Math.max(lbx, rbx, ltx, rtx);
        var minY = Math.min(lby, rby, lty, rty);
        var maxY = Math.max(lby, rby, lty, rty);
        out.x = minX;
        out.y = minY;
        out.width = maxX - minX;
        out.height = maxY - minY;
      }
      /**
       * 应用二维仿射变换矩阵到矩形上, 并转换为有向包围盒。
       * 这个函数不创建任何内存，你需要先创建包围盒的四个 Vector 对象用来存储结果，并作为前四个参数传入函数。
       */

    }, {
      key: "transformObb",
      value: function transformObb(out_bl, out_tl, out_tr, out_br, rect, anAffineTransform) {
        var tx = anAffineTransform.a * rect.x + anAffineTransform.c * rect.y + anAffineTransform.tx;
        var ty = anAffineTransform.b * rect.x + anAffineTransform.d * rect.y + anAffineTransform.ty;
        var xa = anAffineTransform.a * rect.width;
        var xb = anAffineTransform.b * rect.width;
        var yc = anAffineTransform.c * rect.height;
        var yd = anAffineTransform.d * rect.height;
        out_tl.x = tx;
        out_tl.y = ty;
        out_tr.x = xa + tx;
        out_tr.y = xb + ty;
        out_bl.x = yc + tx;
        out_bl.y = yd + ty;
        out_br.x = xa + yc + tx;
        out_br.y = xb + yd + ty;
      }
    }]);

    /**
     * 构造二维放射变换矩阵。
     * @param a a 元素。
     * @param b b 元素。
     * @param c c 元素。
     * @param d d 元素。
     * @param tx tx 元素。
     * @param ty ty 元素。
     */
    function AffineTransform() {
      var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
      var tx = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
      var ty = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

      _classCallCheck(this, AffineTransform);

      this.a = a;
      this.b = b;
      this.c = c;
      this.d = d;
      this.tx = tx;
      this.ty = ty;
    }

    return AffineTransform;
  }();

  _exports.AffineTransform = AffineTransform;
  cc.AffineTransform = AffineTransform;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,