(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../core/components/index.js", "../../core/data/class-decorator.js", "./button-component.js", "./sprite-component.js", "./toggle-container-component.js", "../../core/data/utils/extends-enum.js", "../../core/default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../core/components/index.js"), require("../../core/data/class-decorator.js"), require("./button-component.js"), require("./sprite-component.js"), require("./toggle-container-component.js"), require("../../core/data/utils/extends-enum.js"), require("../../core/default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.classDecorator, global.buttonComponent, global.spriteComponent, global.toggleContainerComponent, global.extendsEnum, global.defaultConstants);
    global.toggleComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _classDecorator, _buttonComponent, _spriteComponent, _toggleContainerComponent, _extendsEnum, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ToggleComponent = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class3, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  var EventType;
  /**
   * @en
   * The toggle component is a CheckBox, when it used together with a ToggleGroup,
   * it could be treated as a RadioButton.
   *
   * @zh
   * Toggle 是一个 CheckBox，当它和 ToggleGroup 一起使用的时候，可以变成 RadioButton。
   */

  (function (EventType) {
    EventType["TOGGLE"] = "toggle";
  })(EventType || (EventType = {}));

  var ToggleComponent = (_dec = (0, _classDecorator.ccclass)('cc.ToggleComponent'), _dec2 = (0, _classDecorator.help)('i18n:cc.ToggleComponent'), _dec3 = (0, _classDecorator.executionOrder)(110), _dec4 = (0, _classDecorator.menu)('UI/Toggle'), _dec5 = (0, _classDecorator.requireComponent)(_index.UITransformComponent), _dec6 = (0, _classDecorator.property)({
    tooltip: '如果这个设置为 true，则 check mark 组件会处于 enabled 状态，否则处于 disabled 状态。',
    displayOrder: 2
  }), _dec7 = (0, _classDecorator.property)({
    type: _spriteComponent.SpriteComponent,
    tooltip: 'Toggle 处于选中状态时显示的精灵图片',
    displayOrder: 3
  }), _dec8 = (0, _classDecorator.property)({
    type: _toggleContainerComponent.ToggleContainerComponent,
    tooltip: 'Toggle 所属的 ToggleGroup，这个属性是可选的。如果这个属性为 null，则 Toggle 是一个 CheckBox，否则，Toggle 是一个 RadioButton。',
    displayOrder: 4
  }), _dec9 = (0, _classDecorator.property)({
    type: [_index.EventHandler],
    tooltip: '列表类型，默认为空，用户添加的每一个事件由节点引用，组件名称和一个响应函数组成'
  }), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = _dec5(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_ButtonComponent) {
    _inherits(ToggleComponent, _ButtonComponent);

    function ToggleComponent() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, ToggleComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ToggleComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _initializerDefineProperty(_this, "checkEvents", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_isChecked", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_toggleGroup", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_checkMark", _descriptor4, _assertThisInitialized(_this));

      return _this;
    }

    _createClass(ToggleComponent, [{
      key: "onEnable",
      value: function onEnable() {
        _get(_getPrototypeOf(ToggleComponent.prototype), "onEnable", this).call(this);

        if (!_defaultConstants.EDITOR) {
          this._registerToggleEvent();
        }

        if (this._toggleGroup && this._toggleGroup.enabled) {
          this._toggleGroup.addToggle(this);
        }
      }
    }, {
      key: "onDisable",
      value: function onDisable() {
        _get(_getPrototypeOf(ToggleComponent.prototype), "onDisable", this).call(this);

        if (!_defaultConstants.EDITOR) {
          this._unregisterToggleEvent();
        }

        if (this._toggleGroup && this._toggleGroup.enabled) {
          this._toggleGroup.removeToggle(this);
        }
      }
      /**
       * @en
       * Toggle switch.
       *
       * @zh
       * toggle 按钮切换。
       */

    }, {
      key: "toggle",
      value: function toggle() {
        var group = this.toggleGroup || this._toggleContainer;

        if (group && group.enabled && this.isChecked) {
          if (!group.allowSwitchOff) {
            return;
          }
        }

        this.isChecked = !this.isChecked;

        if (group && group.enabled) {
          group.updateToggles(this);
        }

        this._emitToggleEvents();
      }
      /**
       * @en
       * Make the toggle button checked.
       *
       * @zh
       * 使 toggle 按钮处于选中状态。
       */

    }, {
      key: "check",
      value: function check() {
        var group = this.toggleGroup || this._toggleContainer;

        if (group && group.enabled && this.isChecked) {
          if (!group.allowSwitchOff) {
            return;
          }
        }

        this.isChecked = true;

        if (group && group.enabled) {
          group.updateToggles(this);
        }

        this._emitToggleEvents();
      }
      /**
       * @en
       * Make the toggle button unchecked.
       *
       * @zh
       * 取消 toggle 按钮选中状态。
       */

    }, {
      key: "uncheck",
      value: function uncheck() {
        var group = this.toggleGroup || this._toggleContainer;

        if (group && group.enabled && this.isChecked) {
          if (!group.allowSwitchOff) {
            return;
          }
        }

        this.isChecked = false;

        this._emitToggleEvents();
      }
    }, {
      key: "_updateCheckMark",
      value: function _updateCheckMark() {
        if (this._checkMark) {
          this._checkMark.node.active = !!this.isChecked;
        }
      }
    }, {
      key: "_registerToggleEvent",
      value: function _registerToggleEvent() {
        this.node.on(ToggleComponent.EventType.CLICK, this.toggle, this);
      }
    }, {
      key: "_unregisterToggleEvent",
      value: function _unregisterToggleEvent() {
        this.node.off(ToggleComponent.EventType.CLICK, this.toggle, this);
      }
    }, {
      key: "_emitToggleEvents",
      value: function _emitToggleEvents() {
        this.node.emit(ToggleComponent.EventType.TOGGLE, this);

        if (this.checkEvents) {
          _index.EventHandler.emitEvents(this.checkEvents, this);
        }
      }
    }, {
      key: "isChecked",

      /**
       * @en
       * When this value is true, the check mark component will be enabled,
       * otherwise the check mark component will be disabled.
       *
       * @zh
       * 如果这个设置为 true，则 check mark 组件会处于 enabled 状态，否则处于 disabled 状态。
       */
      get: function get() {
        return this._isChecked;
      },
      set: function set(value) {
        if (this._isChecked === value) {
          return;
        }

        this._isChecked = value;

        this._updateCheckMark();
      }
      /**
       * @en
       * The image used for the checkmark.
       *
       * @zh
       * Toggle 处于选中状态时显示的图片。
       */

    }, {
      key: "checkMark",
      get: function get() {
        return this._checkMark;
      },
      set: function set(value) {
        if (this._checkMark === value) {
          return;
        }

        this._checkMark = value;
      }
      /**
       * @en
       * The toggle group which the toggle belongs to, when it is null, the toggle is a CheckBox.
       * Otherwise, the toggle is a RadioButton.
       *
       * @zh
       * Toggle 所属的 ToggleGroup，这个属性是可选的。如果这个属性为 null，则 Toggle 是一个 CheckBox，否则，Toggle 是一个 RadioButton。
       */

    }, {
      key: "toggleGroup",
      get: function get() {
        return this._toggleGroup;
      },
      set: function set(value) {
        if (this._toggleGroup === value) {
          return;
        }

        if (this._toggleGroup) {
          this._toggleGroup.removeToggle(this);
        }

        this._toggleGroup = value;

        if (this._toggleGroup && this._toggleGroup.enabled) {
          this._toggleGroup.addToggle(this);
        }
      }
    }, {
      key: "_resizeToTarget",
      set: function set(value) {
        if (value) {
          this._resizeNodeToTargetNode();
        }
      }
    }, {
      key: "_toggleContainer",
      get: function get() {
        var parent = this.node.parent; // TODO:
        // if (cc.Node.isNode(parent)) {
        //     return parent.getComponent(cc.ToggleContainer);
        // }

        return null;
      }
    }]);

    return ToggleComponent;
  }(_buttonComponent.ButtonComponent), _class3.EventType = (0, _extendsEnum.extendsEnum)(EventType, _buttonComponent.EventType), _temp), (_applyDecoratedDescriptor(_class2.prototype, "isChecked", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "isChecked"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "checkMark", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "checkMark"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "toggleGroup", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "toggleGroup"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "checkEvents", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return [];
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_isChecked", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_toggleGroup", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_checkMark", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  })), _class2)) || _class) || _class) || _class) || _class) || _class);
  _exports.ToggleComponent = ToggleComponent;
  cc.ToggleComponent = ToggleComponent;
  /**
   * @zh
   * 注意：此事件是从该组件所属的 Node 上面派发出来的，需要用 node.on 来监听。
   * @event toggle
   * @param {Event.EventCustom} event
   * @param {Toggle} toggle - The Toggle component.
   */
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,