(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../3d/framework/skinning-model-component.js", "../data/class-decorator.js", "../math/index.js", "../scene-graph/node.js", "./animation-component.js", "./skeletal-animation-data-hub.js", "./skeletal-animation-state.js", "./transform-utils.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../3d/framework/skinning-model-component.js"), require("../data/class-decorator.js"), require("../math/index.js"), require("../scene-graph/node.js"), require("./animation-component.js"), require("./skeletal-animation-data-hub.js"), require("./skeletal-animation-state.js"), require("./transform-utils.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.skinningModelComponent, global.classDecorator, global.index, global.node, global.animationComponent, global.skeletalAnimationDataHub, global.skeletalAnimationState, global.transformUtils);
    global.skeletalAnimationComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _skinningModelComponent, _classDecorator, _index, _node, _animationComponent, _skeletalAnimationDataHub, _skeletalAnimationState, _transformUtils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SkeletalAnimationComponent = _exports.Socket = void 0;

  var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _temp, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class4, _class5, _descriptor3, _descriptor4, _class6, _temp2;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  var Socket = (_dec = (0, _classDecorator.ccclass)('cc.SkeletalAnimationComponent.Socket'), _dec2 = (0, _classDecorator.property)(_node.Node), _dec(_class = (_class2 = (_temp =
  /**
   * @en Path of the target joint.
   * @zh 此挂点的目标骨骼路径。
   */

  /**
   * @en Transform output node.
   * @zh 此挂点的变换信息输出节点。
   */
  function Socket() {
    var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    _classCallCheck(this, Socket);

    _initializerDefineProperty(this, "path", _descriptor, this);

    _initializerDefineProperty(this, "target", _descriptor2, this);

    this.path = path;
    this.target = target;
  }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "path", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return '';
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "target", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  })), _class2)) || _class);
  _exports.Socket = Socket;
  var m4_1 = new _index.Mat4();
  var m4_2 = new _index.Mat4();

  function collectRecursively(node) {
    var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var out = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

    for (var i = 0; i < node.children.length; i++) {
      var child = node.children[i];

      if (!child) {
        continue;
      }

      var path = prefix ? "".concat(prefix, "/").concat(child.name) : child.name;
      out.push(path);
      collectRecursively(child, path, out);
    }

    return out;
  }
  /**
   * @en
   * Skeletal animation component, offers the following features on top of [[AnimationComponent]]:
   * * Choice between baked animation and real-time calculation, to leverage efficiency and expressiveness.
   * * Joint socket system: Create any socket node directly under the animation component root node,
   *   find your target joint and register both to the socket list, so that the socket node would be in-sync with the joint.
   * @zh
   * 骨骼动画组件，在普通动画组件基础上额外提供以下功能：
   * * 可选预烘焙动画模式或实时计算模式，用以权衡运行时效率与效果；
   * * 提供骨骼挂点功能：通过在动画根节点下创建挂点节点，并在骨骼动画组件上配置 socket 列表，挂点节点的 Transform 就能与骨骼保持同步。
   */


  var SkeletalAnimationComponent = (_dec3 = (0, _classDecorator.ccclass)('cc.SkeletalAnimationComponent'), _dec4 = (0, _classDecorator.help)('i18n:cc.SkeletalAnimationComponent'), _dec5 = (0, _classDecorator.executionOrder)(99), _dec6 = (0, _classDecorator.menu)('Components/SkeletalAnimation'), _dec7 = (0, _classDecorator.property)({
    type: [Socket],
    tooltip: 'i18n:animation.sockets'
  }), _dec8 = (0, _classDecorator.property)({
    tooltip: 'i18n:animation.use_baked_animation'
  }), _dec9 = (0, _classDecorator.property)({
    type: [Socket]
  }), _dec3(_class4 = _dec4(_class4 = _dec5(_class4 = (0, _classDecorator.executeInEditMode)(_class4 = _dec6(_class4 = (_class5 = (_temp2 = _class6 = /*#__PURE__*/function (_AnimationComponent) {
    _inherits(SkeletalAnimationComponent, _AnimationComponent);

    function SkeletalAnimationComponent() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, SkeletalAnimationComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SkeletalAnimationComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _initializerDefineProperty(_this, "_useBakedAnimation", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_sockets", _descriptor4, _assertThisInitialized(_this));

      return _this;
    }

    _createClass(SkeletalAnimationComponent, [{
      key: "onDestroy",
      value: function onDestroy() {
        _get(_getPrototypeOf(SkeletalAnimationComponent.prototype), "onDestroy", this).call(this);

        cc.director.root.dataPoolManager.jointAnimationInfo.destroy(this.node.uuid);
        cc.director.getAnimationManager().removeSockets(this.node, this._sockets);
      }
    }, {
      key: "start",
      value: function start() {
        this.sockets = this._sockets;
        this.useBakedAnimation = this._useBakedAnimation;

        _get(_getPrototypeOf(SkeletalAnimationComponent.prototype), "start", this).call(this);
      }
    }, {
      key: "querySockets",
      value: function querySockets() {
        var animPaths = this._defaultClip && Object.keys(_skeletalAnimationDataHub.SkelAnimDataHub.getOrExtract(this._defaultClip).data).sort().reduce(function (acc, cur) {
          return cur.startsWith(acc[acc.length - 1]) ? acc : (acc.push(cur), acc);
        }, []) || [];

        if (!animPaths.length) {
          return ['please specify a valid default animation clip first'];
        }

        var out = [];

        for (var i = 0; i < animPaths.length; i++) {
          var path = animPaths[i];
          var node = this.node.getChildByPath(path);

          if (!node) {
            continue;
          }

          out.push(path);
          collectRecursively(node, path, out);
        }

        return out;
      }
    }, {
      key: "rebuildSocketAnimations",
      value: function rebuildSocketAnimations() {
        var _iterator = _createForOfIteratorHelper(this._sockets),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var socket = _step.value;
            var joint = this.node.getChildByPath(socket.path);
            var target = socket.target;

            if (joint && target) {
              target.name = "".concat(socket.path.substring(socket.path.lastIndexOf('/') + 1), " Socket");
              target.parent = this.node;
              (0, _transformUtils.getWorldTransformUntilRoot)(joint, this.node, m4_1);

              _index.Mat4.fromRTS(m4_2, target.rotation, target.position, target.scale);

              if (!_index.Mat4.equals(m4_2, m4_1)) {
                target.matrix = m4_1;
              }
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        for (var _i = 0, _Object$keys = Object.keys(this._nameToState); _i < _Object$keys.length; _i++) {
          var stateName = _Object$keys[_i];
          var state = this._nameToState[stateName];
          state.rebuildSocketCurves(this._sockets);
        }
      }
    }, {
      key: "createSocket",
      value: function createSocket(path) {
        var socket = this._sockets.find(function (s) {
          return s.path === path;
        });

        if (socket) {
          return socket.target;
        }

        var joint = this.node.getChildByPath(path);

        if (!joint) {
          console.warn('illegal socket path');
          return null;
        }

        var target = new _node.Node();
        target.parent = this.node;

        this._sockets.push(new Socket(path, target));

        this.rebuildSocketAnimations();
        return target;
      }
    }, {
      key: "_createState",
      value: function _createState(clip, name) {
        return new _skeletalAnimationState.SkeletalAnimationState(clip, name);
      }
    }, {
      key: "_doCreateState",
      value: function _doCreateState(clip, name) {
        var state = _get(_getPrototypeOf(SkeletalAnimationComponent.prototype), "_doCreateState", this).call(this, clip, name);

        state.rebuildSocketCurves(this._sockets);
        return state;
      }
    }, {
      key: "sockets",

      /**
       * @en
       * The joint sockets this animation component maintains.<br>
       * Sockets have to be registered here before attaching custom nodes to animated joints.
       * @zh
       * 当前动画组件维护的挂点数组。要挂载自定义节点到受动画驱动的骨骼上，必须先在此注册挂点。
       */
      get: function get() {
        return this._sockets;
      },
      set: function set(val) {
        if (!this._useBakedAnimation) {
          var animMgr = cc.director.getAnimationManager();
          animMgr.removeSockets(this.node, this._sockets);
          animMgr.addSockets(this.node, val);
        }

        this._sockets = val;
        this.rebuildSocketAnimations();
      }
      /**
       * @en
       * Whether to bake animations. Default to true,<br>
       * which substantially increases performance while making all animations completely fixed.<br>
       * Dynamically changing this property will take effect when playing the next animation clip.
       * @zh
       * 是否使用预烘焙动画，默认启用，可以大幅提高运行效时率，但所有动画效果会被彻底固定，不支持任何形式的编辑和混合。<br>
       * 运行时动态修改此选项会在播放下一条动画片段时生效。
       */

    }, {
      key: "useBakedAnimation",
      get: function get() {
        return this._useBakedAnimation;
      },
      set: function set(val) {
        this._useBakedAnimation = val;
        var comps = this.node.getComponentsInChildren(_skinningModelComponent.SkinningModelComponent);

        for (var i = 0; i < comps.length; ++i) {
          var comp = comps[i];

          if (comp.skinningRoot === this.node) {
            comp.setUseBakedAnimation(this._useBakedAnimation);
          }
        }

        if (this._useBakedAnimation) {
          cc.director.getAnimationManager().removeSockets(this.node, this._sockets);
        } else {
          cc.director.getAnimationManager().addSockets(this.node, this._sockets);
        }
      }
    }]);

    return SkeletalAnimationComponent;
  }(_animationComponent.AnimationComponent), _class6.Socket = Socket, _temp2), (_applyDecoratedDescriptor(_class5.prototype, "sockets", [_dec7], Object.getOwnPropertyDescriptor(_class5.prototype, "sockets"), _class5.prototype), _applyDecoratedDescriptor(_class5.prototype, "useBakedAnimation", [_dec8], Object.getOwnPropertyDescriptor(_class5.prototype, "useBakedAnimation"), _class5.prototype), _descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "_useBakedAnimation", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "_sockets", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return [];
    }
  })), _class5)) || _class4) || _class4) || _class4) || _class4) || _class4);
  _exports.SkeletalAnimationComponent = SkeletalAnimationComponent;
  cc.SkeletalAnimationComponent = SkeletalAnimationComponent;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,