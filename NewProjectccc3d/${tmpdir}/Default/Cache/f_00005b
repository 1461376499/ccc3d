(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "@cocos/ammo", "../../core/index.js", "./ammo-util.js", "../../../exports/physics-framework.js", "./ammo-enum.js", "../framework/physics-enum.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("@cocos/ammo"), require("../../core/index.js"), require("./ammo-util.js"), require("../../../exports/physics-framework.js"), require("./ammo-enum.js"), require("../framework/physics-enum.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.ammo, global.index, global.ammoUtil, global.physicsFramework, global.ammoEnum, global.physicsEnum);
    global.ammoRigidBody = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _ammo, _index, _ammoUtil, _physicsFramework, _ammoEnum, _physicsEnum) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AmmoRigidBody = void 0;
  _ammo = _interopRequireDefault(_ammo);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var v3_0 = new _index.Vec3();
  var v3_1 = new _index.Vec3();

  var AmmoRigidBody = /*#__PURE__*/function () {
    _createClass(AmmoRigidBody, [{
      key: "setMass",
      value: function setMass(value) {
        // See https://studiofreya.com/game-maker/bullet-physics/bullet-physics-how-to-change-body-mass/
        var localInertia = this._sharedBody.bodyStruct.localInertia;
        localInertia.setValue(1.6666666269302368, 1.6666666269302368, 1.6666666269302368);

        if (this._btCompoundShape.getNumChildShapes() > 0) {
          this._btCompoundShape.calculateLocalInertia(this._rigidBody.mass, localInertia);
        }

        this.impl.setMassProps(value, localInertia);

        this._sharedBody.updateByReAdd();
      }
    }, {
      key: "setLinearDamping",
      value: function setLinearDamping(value) {
        this.impl.setDamping(this._rigidBody.linearDamping, this._rigidBody.angularDamping);
      }
    }, {
      key: "setAngularDamping",
      value: function setAngularDamping(value) {
        this.impl.setDamping(this._rigidBody.linearDamping, this._rigidBody.angularDamping);
      }
    }, {
      key: "setIsKinematic",
      value: function setIsKinematic(value) {
        var m_collisionFlags = this.impl.getCollisionFlags();

        if (value) {
          m_collisionFlags |= _ammoEnum.AmmoCollisionFlags.CF_KINEMATIC_OBJECT;
        } else {
          m_collisionFlags &= ~_ammoEnum.AmmoCollisionFlags.CF_KINEMATIC_OBJECT;
        }

        this.impl.setCollisionFlags(m_collisionFlags);
      }
    }, {
      key: "useGravity",
      value: function useGravity(value) {
        var m_rigidBodyFlag = this.impl.getFlags();

        if (value) {
          m_rigidBodyFlag &= ~_ammoEnum.AmmoRigidBodyFlags.BT_DISABLE_WORLD_GRAVITY;
        } else {
          this.impl.setGravity((0, _ammoUtil.cocos2AmmoVec3)(this._btVec3_0, _index.Vec3.ZERO));
          m_rigidBodyFlag |= _ammoEnum.AmmoRigidBodyFlags.BT_DISABLE_WORLD_GRAVITY;
        }

        this.impl.setFlags(m_rigidBodyFlag);

        this._sharedBody.updateByReAdd();
      }
    }, {
      key: "fixRotation",
      value: function fixRotation(value) {
        if (value) {
          /** TODO : should i reset angular velocity & torque ? */
          this.impl.setAngularFactor((0, _ammoUtil.cocos2AmmoVec3)(this._btVec3_0, _index.Vec3.ZERO));
        } else {
          this.impl.setAngularFactor((0, _ammoUtil.cocos2AmmoVec3)(this._btVec3_0, this._rigidBody.angularFactor));
        }

        if (!this.isAwake) this.impl.activate();
      }
    }, {
      key: "setLinearFactor",
      value: function setLinearFactor(value) {
        this.impl.setLinearFactor((0, _ammoUtil.cocos2AmmoVec3)(this._btVec3_0, value));
        if (!this.isAwake) this.impl.activate();
      }
    }, {
      key: "setAngularFactor",
      value: function setAngularFactor(value) {
        if (!this._rigidBody.fixedRotation) {
          this.impl.setAngularFactor((0, _ammoUtil.cocos2AmmoVec3)(this._btVec3_0, value));
        }

        if (!this.isAwake) this.impl.activate();
      }
    }, {
      key: "setAllowSleep",
      value: function setAllowSleep(v) {
        if (v) {
          this.impl.forceActivationState(_ammoEnum.AmmoCollisionObjectStates.ACTIVE_TAG);
        } else {
          this.impl.forceActivationState(_ammoEnum.AmmoCollisionObjectStates.DISABLE_DEACTIVATION);
        }

        if (!this.isAwake) this.impl.activate();
      }
    }, {
      key: "isAwake",
      get: function get() {
        var state = this.impl.getActivationState();
        return state == _ammoEnum.AmmoCollisionObjectStates.ACTIVE_TAG || state == _ammoEnum.AmmoCollisionObjectStates.DISABLE_DEACTIVATION;
      }
    }, {
      key: "isSleepy",
      get: function get() {
        var state = this.impl.getActivationState();
        return state == _ammoEnum.AmmoCollisionObjectStates.WANTS_DEACTIVATION;
      }
    }, {
      key: "isSleeping",
      get: function get() {
        var state = this.impl.getActivationState();
        return state == _ammoEnum.AmmoCollisionObjectStates.ISLAND_SLEEPING;
      }
    }, {
      key: "isEnabled",
      get: function get() {
        return this._isEnabled;
      }
    }, {
      key: "impl",
      get: function get() {
        return this._sharedBody.body;
      }
    }, {
      key: "rigidBody",
      get: function get() {
        return this._rigidBody;
      }
    }, {
      key: "_btCompoundShape",
      get: function get() {
        return this._sharedBody.bodyCompoundShape;
      }
    }]);

    function AmmoRigidBody() {
      _classCallCheck(this, AmmoRigidBody);

      this.id = void 0;
      this._isEnabled = false;
      this._btVec3_0 = new _ammo.default.btVector3();
      this._btVec3_1 = new _ammo.default.btVector3();
      this.id = AmmoRigidBody.idCounter++;
    }
    /** LIFECYCLE */


    _createClass(AmmoRigidBody, [{
      key: "initialize",
      value: function initialize(com) {
        this._rigidBody = com;
        this._sharedBody = _physicsFramework.PhysicsSystem.instance.physicsWorld.getSharedBody(this._rigidBody.node, this);
        this._sharedBody.reference = true;
      }
    }, {
      key: "onEnable",
      value: function onEnable() {
        this._isEnabled = true;
        this.setMass(this._rigidBody.mass);
        this.setAllowSleep(this._rigidBody.allowSleep);
        this.setLinearDamping(this._rigidBody.linearDamping);
        this.setAngularDamping(this._rigidBody.angularDamping);
        this.setIsKinematic(this._rigidBody.isKinematic);
        this.fixRotation(this._rigidBody.fixedRotation);
        this.setLinearFactor(this._rigidBody.linearFactor);
        this.setAngularFactor(this._rigidBody.angularFactor);
        this.useGravity(this._rigidBody.useGravity);
        this._sharedBody.bodyEnabled = true;
      }
    }, {
      key: "onDisable",
      value: function onDisable() {
        this._isEnabled = false;
        this._sharedBody.bodyEnabled = false;
      }
    }, {
      key: "onDestroy",
      value: function onDestroy() {
        this._sharedBody.reference = false;
        this._rigidBody = null;
        this._sharedBody = null;
      }
      /** INTERFACE */

    }, {
      key: "wakeUp",
      value: function wakeUp(force) {
        this.impl.activate(force);
      }
    }, {
      key: "sleep",
      value: function sleep() {
        return this.impl.wantsSleeping();
      }
      /** type */

    }, {
      key: "getType",
      value: function getType() {
        if (this.impl.isStaticOrKinematicObject()) {
          if (this.impl.isKinematicObject()) {
            return _physicsEnum.ERigidBodyType.KINEMATIC;
          } else {
            return _physicsEnum.ERigidBodyType.STATIC;
          }
        } else {
          return _physicsEnum.ERigidBodyType.DYNAMIC;
        }
      }
      /** kinematic */

    }, {
      key: "getLinearVelocity",
      value: function getLinearVelocity(out) {
        return (0, _ammoUtil.ammo2CocosVec3)(out, this.impl.getLinearVelocity());
      }
    }, {
      key: "setLinearVelocity",
      value: function setLinearVelocity(value) {
        if (!this.isAwake) this.impl.activate();
        (0, _ammoUtil.cocos2AmmoVec3)(this.impl.getLinearVelocity(), value);
      }
    }, {
      key: "getAngularVelocity",
      value: function getAngularVelocity(out) {
        return (0, _ammoUtil.ammo2CocosVec3)(out, this.impl.getAngularVelocity());
      }
    }, {
      key: "setAngularVelocity",
      value: function setAngularVelocity(value) {
        if (!this.isAwake) this.impl.activate();
        (0, _ammoUtil.cocos2AmmoVec3)(this.impl.getAngularVelocity(), value);
      }
      /** dynamic */

    }, {
      key: "applyLocalForce",
      value: function applyLocalForce(force, rel_pos) {
        this._sharedBody.syncSceneToPhysics();

        if (!this.isAwake) this.impl.activate();
        var quat = this._sharedBody.node.worldRotation;

        var v = _index.Vec3.transformQuat(v3_0, force, quat);

        var rp = rel_pos ? _index.Vec3.transformQuat(v3_1, rel_pos, quat) : _index.Vec3.ZERO;
        this.impl.applyForce((0, _ammoUtil.cocos2AmmoVec3)(this._btVec3_0, v), (0, _ammoUtil.cocos2AmmoVec3)(this._btVec3_1, rp));
      }
    }, {
      key: "applyLocalTorque",
      value: function applyLocalTorque(torque) {
        this._sharedBody.syncSceneToPhysics();

        if (!this.isAwake) this.impl.activate();

        _index.Vec3.transformQuat(v3_0, torque, this._sharedBody.node.worldRotation);

        this.impl.applyTorque((0, _ammoUtil.cocos2AmmoVec3)(this._btVec3_0, v3_0));
      }
    }, {
      key: "applyLocalImpulse",
      value: function applyLocalImpulse(impulse, rel_pos) {
        this._sharedBody.syncSceneToPhysics();

        if (!this.isAwake) this.impl.activate();
        var quat = this._sharedBody.node.worldRotation;

        var v = _index.Vec3.transformQuat(v3_0, impulse, quat);

        var rp = rel_pos ? _index.Vec3.transformQuat(v3_1, rel_pos, quat) : _index.Vec3.ZERO;
        this.impl.applyImpulse((0, _ammoUtil.cocos2AmmoVec3)(this._btVec3_0, v), (0, _ammoUtil.cocos2AmmoVec3)(this._btVec3_1, rp));
      }
    }, {
      key: "applyForce",
      value: function applyForce(force, rel_pos) {
        this._sharedBody.syncSceneToPhysics();

        if (!this.isAwake) this.impl.activate();
        var rp = rel_pos ? rel_pos : _index.Vec3.ZERO;
        this.impl.applyForce((0, _ammoUtil.cocos2AmmoVec3)(this._btVec3_0, force), (0, _ammoUtil.cocos2AmmoVec3)(this._btVec3_1, rp));
      }
    }, {
      key: "applyTorque",
      value: function applyTorque(torque) {
        this._sharedBody.syncSceneToPhysics();

        if (!this.isAwake) this.impl.activate();
        this.impl.applyTorque((0, _ammoUtil.cocos2AmmoVec3)(this._btVec3_0, torque));
      }
    }, {
      key: "applyImpulse",
      value: function applyImpulse(impulse, rel_pos) {
        this._sharedBody.syncSceneToPhysics();

        if (!this.isAwake) this.impl.activate();
        var rp = rel_pos ? rel_pos : _index.Vec3.ZERO;
        this.impl.applyImpulse((0, _ammoUtil.cocos2AmmoVec3)(this._btVec3_0, impulse), (0, _ammoUtil.cocos2AmmoVec3)(this._btVec3_1, rp));
      }
      /** group mask */

    }, {
      key: "getGroup",
      value: function getGroup() {
        return this._sharedBody.collisionFilterGroup;
      }
    }, {
      key: "setGroup",
      value: function setGroup(v) {
        this._sharedBody.collisionFilterGroup = v;
      }
    }, {
      key: "addGroup",
      value: function addGroup(v) {
        this._sharedBody.collisionFilterGroup |= v;
      }
    }, {
      key: "removeGroup",
      value: function removeGroup(v) {
        this._sharedBody.collisionFilterGroup &= ~v;
      }
    }, {
      key: "getMask",
      value: function getMask() {
        return this._sharedBody.collisionFilterMask;
      }
    }, {
      key: "setMask",
      value: function setMask(v) {
        this._sharedBody.collisionFilterMask = v;
      }
    }, {
      key: "addMask",
      value: function addMask(v) {
        this._sharedBody.collisionFilterMask |= v;
      }
    }, {
      key: "removeMask",
      value: function removeMask(v) {
        this._sharedBody.collisionFilterMask &= ~v;
      }
    }]);

    return AmmoRigidBody;
  }();

  _exports.AmmoRigidBody = AmmoRigidBody;
  AmmoRigidBody.idCounter = 0;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,