(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../data/class-decorator.js", "../renderer/core/sampler-lib.js", "../utils/id-generator.js", "./asset.js", "./asset-enum.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../data/class-decorator.js"), require("../renderer/core/sampler-lib.js"), require("../utils/id-generator.js"), require("./asset.js"), require("./asset-enum.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.classDecorator, global.samplerLib, global.idGenerator, global.asset, global.assetEnum);
    global.textureBase = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _classDecorator, _samplerLib, _idGenerator, _asset, _assetEnum) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TextureBase = void 0;
  _idGenerator = _interopRequireDefault(_idGenerator);

  var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _class3, _temp;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  var CHAR_CODE_1 = 49; // '1'

  var idGenerator = new _idGenerator.default('Tex');
  /**
   * 贴图资源基类。它定义了所有贴图共用的概念。
   */

  var TextureBase = (_dec = (0, _classDecorator.ccclass)('cc.TextureBase'), _dec(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Asset) {
    _inherits(TextureBase, _Asset);

    _createClass(TextureBase, [{
      key: "isCompressed",

      /**
       * 此贴图是否为压缩的像素格式。
       */
      get: function get() {
        return this._format >= _assetEnum.PixelFormat.RGB_ETC1 && this._format <= _assetEnum.PixelFormat.RGBA_PVRTC_4BPPV1;
      }
      /**
       * 此贴图的像素宽度。
       */

    }, {
      key: "width",
      get: function get() {
        return this._width;
      }
      /**
       * 此贴图的像素高度。
       */

    }, {
      key: "height",
      get: function get() {
        return this._height;
      }
    }]);

    function TextureBase() {
      var _this;

      var flipY = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      _classCallCheck(this, TextureBase);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(TextureBase).call(this));

      _initializerDefineProperty(_this, "_format", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_premultiplyAlpha", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_flipY", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_minFilter", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_magFilter", _descriptor5, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_mipFilter", _descriptor6, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_wrapS", _descriptor7, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_wrapT", _descriptor8, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_wrapR", _descriptor9, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_anisotropy", _descriptor10, _assertThisInitialized(_this));

      _this._width = 0;
      _this._height = 0;
      _this._id = void 0;
      _this._samplerInfo = [];
      _this._samplerHash = 0;
      _this._gfxSampler = null;
      _this._gfxDevice = null;
      _this._flipY = flipY; // Id for generate hash in material

      _this._id = idGenerator.getNewId();
      _this.loaded = false;
      _this._gfxDevice = _this._getGFXDevice();
      return _this;
    }
    /**
     * 获取标识符。
     * @returns 此贴图的标识符。
     */


    _createClass(TextureBase, [{
      key: "getId",
      value: function getId() {
        return this._id;
      }
      /**
       * 获取像素格式。
       * @returns 此贴图的像素格式。
       */

    }, {
      key: "getPixelFormat",
      value: function getPixelFormat() {
        return this._format;
      }
      /**
       * 返回是否开启了预乘透明通道功能。
       * @returns 此贴图是否开启了预乘透明通道功能。
       */

    }, {
      key: "hasPremultipliedAlpha",
      value: function hasPremultipliedAlpha() {
        return this._premultiplyAlpha || false;
      }
      /**
       * 获取各向异性。
       * @returns 此贴图的各向异性。
       */

    }, {
      key: "getAnisotropy",
      value: function getAnisotropy() {
        return this._anisotropy;
      }
      /**
       * 设置此贴图的缠绕模式。
       * 注意，若贴图尺寸不是 2 的整数幂，缠绕模式仅允许 `WrapMode.CLAMP_TO_EDGE`。
       * @param wrapS S(U) 坐标的采样模式。
       * @param wrapT T(V) 坐标的采样模式。
       * @param wrapR R(W) 坐标的采样模式。
       */

    }, {
      key: "setWrapMode",
      value: function setWrapMode(wrapS, wrapT, wrapR) {
        this._wrapS = wrapS;
        this._samplerInfo[_samplerLib.SamplerInfoIndex.addressU] = wrapS;
        this._wrapT = wrapT;
        this._samplerInfo[_samplerLib.SamplerInfoIndex.addressV] = wrapT;

        if (wrapR !== undefined) {
          this._wrapR = wrapR;
          this._samplerInfo[_samplerLib.SamplerInfoIndex.addressW] = wrapR;
        }

        this._samplerHash = (0, _samplerLib.genSamplerHash)(this._samplerInfo); // for editor assetDB

        if (this._gfxDevice) {
          this._gfxSampler = _samplerLib.samplerLib.getSampler(this._gfxDevice, this._samplerHash);
        }
      }
      /**
       * 设置此贴图的过滤算法。
       * @param minFilter 缩小过滤算法。
       * @param magFilter 放大过滤算法。
       */

    }, {
      key: "setFilters",
      value: function setFilters(minFilter, magFilter) {
        this._minFilter = minFilter;
        this._samplerInfo[_samplerLib.SamplerInfoIndex.minFilter] = minFilter;
        this._magFilter = magFilter;
        this._samplerInfo[_samplerLib.SamplerInfoIndex.magFilter] = magFilter;
        this._samplerHash = (0, _samplerLib.genSamplerHash)(this._samplerInfo);

        if (this._gfxDevice) {
          this._gfxSampler = _samplerLib.samplerLib.getSampler(this._gfxDevice, this._samplerHash);
        }
      }
      /**
       * 设置此贴图的 mip 过滤算法。
       * @param mipFilter mip 过滤算法。
       */

    }, {
      key: "setMipFilter",
      value: function setMipFilter(mipFilter) {
        this._mipFilter = mipFilter;
        this._samplerInfo[_samplerLib.SamplerInfoIndex.mipFilter] = mipFilter;
        this._samplerInfo[_samplerLib.SamplerInfoIndex.maxLOD] = mipFilter === _assetEnum.Filter.NONE ? 0 : 15; // WebGL2 on some platform need this

        this._samplerHash = (0, _samplerLib.genSamplerHash)(this._samplerInfo);

        if (this._gfxDevice) {
          this._gfxSampler = _samplerLib.samplerLib.getSampler(this._gfxDevice, this._samplerHash);
        }
      }
      /**
       * 设置渲染时是否运行将此贴图进行翻转。
       * @param flipY 翻转则为 `true`，否则为 `false`。
       */

    }, {
      key: "setFlipY",
      value: function setFlipY(flipY) {
        this._flipY = flipY;
      }
      /**
       * 设置此贴图是否预乘透明通道。
       * @param premultiply
       */

    }, {
      key: "setPremultiplyAlpha",
      value: function setPremultiplyAlpha(premultiply) {
        this._premultiplyAlpha = premultiply;
      }
      /**
       * 设置此贴图的各向异性。
       * @param anisotropy 各向异性。
       */

    }, {
      key: "setAnisotropy",
      value: function setAnisotropy(anisotropy) {
        this._anisotropy = anisotropy;
        this._samplerInfo[_samplerLib.SamplerInfoIndex.maxAnisotropy] = anisotropy;
        this._samplerHash = (0, _samplerLib.genSamplerHash)(this._samplerInfo);

        if (this._gfxDevice) {
          this._gfxSampler = _samplerLib.samplerLib.getSampler(this._gfxDevice, this._samplerHash);
        }
      }
      /**
       * 销毁此贴图，并释放占有的所有 GPU 资源。
       */

    }, {
      key: "destroy",
      value: function destroy() {
        return _get(_getPrototypeOf(TextureBase.prototype), "destroy", this).call(this);
      }
      /**
       * 获取此贴图底层的 GFX 贴图视图对象。
       */

    }, {
      key: "getGFXTextureView",
      value: function getGFXTextureView() {
        return null;
      }
      /**
       * 获取此贴图内部使用的 GFX 采样器信息。
       * @private
       */

    }, {
      key: "getSamplerHash",
      value: function getSamplerHash() {
        return this._samplerHash;
      }
      /**
       * 获取此贴图底层的 GFX 采样信息。
       */

    }, {
      key: "getGFXSampler",
      value: function getGFXSampler() {
        if (!this._gfxSampler) {
          if (this._gfxDevice) {
            this._gfxSampler = _samplerLib.samplerLib.getSampler(this._gfxDevice, this._samplerHash);
          } else {
            cc.errorID(9302);
          }
        }

        return this._gfxSampler;
      } // SERIALIZATION

      /**
       * @return
       */

    }, {
      key: "_serialize",
      value: function _serialize(exporting) {
        return this._minFilter + ',' + this._magFilter + ',' + this._wrapS + ',' + this._wrapT + ',' + (this._premultiplyAlpha ? 1 : 0) + ',' + this._mipFilter + ',' + this._anisotropy + ',' + (this._flipY ? 1 : 0);
      }
      /**
       *
       * @param data
       */

    }, {
      key: "_deserialize",
      value: function _deserialize(serializedData, handle) {
        var data = serializedData;
        var fields = data.split(',');
        fields.unshift('');

        if (fields.length >= 6) {
          // decode filters
          this.setFilters(parseInt(fields[1]), parseInt(fields[2])); // decode wraps

          this.setWrapMode(parseInt(fields[3]), parseInt(fields[4])); // decode premultiply alpha

          this._premultiplyAlpha = fields[5].charCodeAt(0) === CHAR_CODE_1;
        }

        if (fields.length >= 8) {
          this.setMipFilter(parseInt(fields[6]));
          this.setAnisotropy(parseInt(fields[7]));
        }

        if (fields.length >= 9) {
          this._flipY = fields[8].charCodeAt(0) === CHAR_CODE_1;
        }
      }
    }, {
      key: "_getGFXDevice",
      value: function _getGFXDevice() {
        return cc.director.root && cc.director.root.device;
      }
    }, {
      key: "_getGFXFormat",
      value: function _getGFXFormat() {
        return this._format;
      }
    }, {
      key: "_setGFXFormat",
      value: function _setGFXFormat(format) {
        this._format = format === undefined ? _assetEnum.PixelFormat.RGBA8888 : format;
      }
    }]);

    return TextureBase;
  }(_asset.Asset), _class3.PixelFormat = _assetEnum.PixelFormat, _class3.WrapMode = _assetEnum.WrapMode, _class3.Filter = _assetEnum.Filter, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_format", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _assetEnum.PixelFormat.RGBA8888;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_premultiplyAlpha", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_flipY", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_minFilter", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _assetEnum.Filter.LINEAR;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_magFilter", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _assetEnum.Filter.LINEAR;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "_mipFilter", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _assetEnum.Filter.NONE;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "_wrapS", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _assetEnum.WrapMode.REPEAT;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "_wrapT", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _assetEnum.WrapMode.REPEAT;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "_wrapR", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _assetEnum.WrapMode.REPEAT;
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "_anisotropy", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 8;
    }
  })), _class2)) || _class);
  _exports.TextureBase = TextureBase;

  (function (_TextureBase) {})(TextureBase || (_exports.TextureBase = TextureBase = {}));

  cc.TextureBase = TextureBase;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,