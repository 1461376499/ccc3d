(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../define.js", "./webgl2-command-buffer.js", "./webgl2-commands.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../define.js"), require("./webgl2-command-buffer.js"), require("./webgl2-commands.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.define, global.webgl2CommandBuffer, global.webgl2Commands);
    global.webgl2PrimaryCommandBuffer = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _define, _webgl2CommandBuffer, _webgl2Commands) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.WebGL2GFXPrimaryCommandBuffer = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  var _buffers = [];

  var WebGL2GFXPrimaryCommandBuffer = /*#__PURE__*/function (_WebGL2GFXCommandBuff) {
    _inherits(WebGL2GFXPrimaryCommandBuffer, _WebGL2GFXCommandBuff);

    function WebGL2GFXPrimaryCommandBuffer() {
      _classCallCheck(this, WebGL2GFXPrimaryCommandBuffer);

      return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2GFXPrimaryCommandBuffer).apply(this, arguments));
    }

    _createClass(WebGL2GFXPrimaryCommandBuffer, [{
      key: "beginRenderPass",
      value: function beginRenderPass(framebuffer, renderArea, clearFlag, clearColors, clearDepth, clearStencil) {
        (0, _webgl2Commands.WebGL2CmdFuncBeginRenderPass)(this._device, framebuffer.gpuFramebuffer, renderArea, clearFlag, clearColors, clearDepth, clearStencil);
        this._isInRenderPass = true;
      }
    }, {
      key: "draw",
      value: function draw(inputAssembler) {
        if (this._isInRenderPass) {
          if (this._isStateInvalied) {
            this.bindStates();
          }

          (0, _webgl2Commands.WebGL2CmdFuncDraw)(this._device, inputAssembler);
          ++this._numDrawCalls;
          this._numInstances += inputAssembler.instanceCount;
          var indexCount = inputAssembler.indexCount || inputAssembler.vertexCount;

          if (this._curGPUPipelineState) {
            var glPrimitive = this._curGPUPipelineState.glPrimitive;

            switch (glPrimitive) {
              case 0x0004:
                {
                  // WebGLRenderingContext.TRIANGLES
                  this._numTris += indexCount / 3 * Math.max(inputAssembler.instanceCount, 1);
                  break;
                }

              case 0x0005: // WebGLRenderingContext.TRIANGLE_STRIP

              case 0x0006:
                {
                  // WebGLRenderingContext.TRIANGLE_FAN
                  this._numTris += (indexCount - 2) * Math.max(inputAssembler.instanceCount, 1);
                  break;
                }
            }
          }
        } else {
          console.error('Command \'draw\' must be recorded inside a render pass.');
        }
      }
    }, {
      key: "updateBuffer",
      value: function updateBuffer(buffer, data, offset, size) {
        if (!this._isInRenderPass) {
          var gpuBuffer = buffer.gpuBuffer;

          if (gpuBuffer) {
            if (offset === undefined) {
              offset = 0;
            }

            var buffSize;

            if (size !== undefined) {
              buffSize = size;
            } else if (buffer.usage & _define.GFXBufferUsageBit.INDIRECT) {
              buffSize = 0;
            } else {
              buffSize = data.byteLength;
            }

            (0, _webgl2Commands.WebGL2CmdFuncUpdateBuffer)(this._device, gpuBuffer, data, offset, buffSize);
          }
        } else {
          console.error('Command \'updateBuffer\' must be recorded outside a render pass.');
        }
      }
    }, {
      key: "copyBufferToTexture",
      value: function copyBufferToTexture(srcBuff, dstTex, dstLayout, regions) {
        if (!this._isInRenderPass) {
          var gpuBuffer = srcBuff.gpuBuffer;
          var gpuTexture = dstTex.gpuTexture;

          if (gpuBuffer && gpuTexture) {
            _buffers[0] = gpuBuffer.buffer;
            (0, _webgl2Commands.WebGL2CmdFuncCopyBuffersToTexture)(this._device, _buffers, gpuTexture, regions);
          }
        } else {
          console.error('Command \'copyBufferToTexture\' must be recorded outside a render pass.');
        }
      }
    }, {
      key: "execute",
      value: function execute(cmdBuffs, count) {
        for (var i = 0; i < count; ++i) {
          // actually they are secondary buffers, the cast here is only for type checking
          var webGL2CmdBuff = cmdBuffs[i];
          (0, _webgl2Commands.WebGL2CmdFuncExecuteCmds)(this._device, webGL2CmdBuff.cmdPackage);
          this._numDrawCalls += webGL2CmdBuff._numDrawCalls;
          this._numInstances += webGL2CmdBuff._numInstances;
          this._numTris += webGL2CmdBuff._numTris;
        }
      }
    }, {
      key: "bindStates",
      value: function bindStates() {
        (0, _webgl2Commands.WebGL2CmdFuncBindStates)(this._device, this._curGPUPipelineState, this._curGPUBindingLayout, this._curGPUInputAssembler, this._curViewport, this._curScissor, this._curLineWidth, this._curDepthBias, this._curBlendConstants, this._curDepthBounds, this._curStencilWriteMask, this._curStencilCompareMask);
        this._isStateInvalied = false;
      }
    }]);

    return WebGL2GFXPrimaryCommandBuffer;
  }(_webgl2CommandBuffer.WebGL2GFXCommandBuffer);

  _exports.WebGL2GFXPrimaryCommandBuffer = WebGL2GFXPrimaryCommandBuffer;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,