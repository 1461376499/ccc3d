(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../assets/mesh.js", "../../data/class-decorator.js", "../../math/index.js", "../../renderer/scene/model.js", "../../renderer/models/morph-model.js", "../../scene-graph/node-enum.js", "../../value-types/index.js", "../builtin/index.js", "./renderable-component.js", "../../data/utils/asserts.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../assets/mesh.js"), require("../../data/class-decorator.js"), require("../../math/index.js"), require("../../renderer/scene/model.js"), require("../../renderer/models/morph-model.js"), require("../../scene-graph/node-enum.js"), require("../../value-types/index.js"), require("../builtin/index.js"), require("./renderable-component.js"), require("../../data/utils/asserts.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.mesh, global.classDecorator, global.index, global.model, global.morphModel, global.nodeEnum, global.index, global.index, global.renderableComponent, global.asserts);
    global.modelComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _mesh, _classDecorator, _index, _model, _morphModel, _nodeEnum, _index2, _index3, _renderableComponent, _asserts) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ModelComponent = void 0;

  var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _temp, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class4, _class5, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _class6, _temp2;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  /**
   * @en Shadow projection mode.
   * @zh 阴影投射方式。
   */
  var ModelShadowCastingMode = (0, _index2.Enum)({
    /**
     * @zh Disable shadow projection.
     * @zh 不投射阴影。
     */
    OFF: 0,

    /**
     * @zh Enable shadow projection.
     * @zh 开启阴影投射。
     */
    ON: 1
  });
  /**
   * @en model light map settings.
   * @zh 模型光照图设置
   */

  var ModelLightmapSettings = (_dec = (0, _classDecorator.ccclass)('cc.ModelLightmapSettings'), _dec2 = (0, _classDecorator.property)({
    visible: false
  }), _dec3 = (0, _classDecorator.property)({
    visible: false
  }), _dec4 = (0, _classDecorator.property)({
    formerlySerializedAs: '_recieveShadow'
  }), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function () {
    function ModelLightmapSettings() {
      _classCallCheck(this, ModelLightmapSettings);

      _initializerDefineProperty(this, "texture", _descriptor, this);

      _initializerDefineProperty(this, "uvParam", _descriptor2, this);

      _initializerDefineProperty(this, "_bakeable", _descriptor3, this);

      _initializerDefineProperty(this, "_castShadow", _descriptor4, this);

      _initializerDefineProperty(this, "_receiveShadow", _descriptor5, this);

      _initializerDefineProperty(this, "_lightmapSize", _descriptor6, this);
    }

    _createClass(ModelLightmapSettings, [{
      key: "bakeable",

      /**
       * @en bakeable.
       * @zh 是否可烘培。
       */
      get: function get() {
        return this._bakeable;
      },
      set: function set(val) {
        this._bakeable = val;
      }
      /**
       * @en cast shadow.
       * @zh 是否投射阴影。
       */

    }, {
      key: "castShadow",
      get: function get() {
        return this._castShadow;
      },
      set: function set(val) {
        this._castShadow = val;
      }
      /**
       * @en receive shadow.
       * @zh 是否接受阴影。
       */

    }, {
      key: "receiveShadow",
      get: function get() {
        return this._receiveShadow;
      },
      set: function set(val) {
        this._receiveShadow = val;
      }
      /**
       * @en lightmap size.
       * @zh 光照图大小
       */

    }, {
      key: "lightmapSize",
      get: function get() {
        return this._lightmapSize;
      },
      set: function set(val) {
        this._lightmapSize = val;
      }
    }]);

    return ModelLightmapSettings;
  }(), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "texture", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "uvParam", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _index.Vec4();
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_bakeable", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_castShadow", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_receiveShadow", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "_lightmapSize", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 64;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "bakeable", [_classDecorator.property], Object.getOwnPropertyDescriptor(_class2.prototype, "bakeable"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "castShadow", [_classDecorator.property], Object.getOwnPropertyDescriptor(_class2.prototype, "castShadow"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "receiveShadow", [_classDecorator.property], Object.getOwnPropertyDescriptor(_class2.prototype, "receiveShadow"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "lightmapSize", [_classDecorator.property], Object.getOwnPropertyDescriptor(_class2.prototype, "lightmapSize"), _class2.prototype)), _class2)) || _class);
  /**
   * 模型组件。
   * @class ModelComponent
   */

  var ModelComponent = (_dec5 = (0, _classDecorator.ccclass)('cc.ModelComponent'), _dec6 = (0, _classDecorator.help)('i18n:cc.ModelComponent'), _dec7 = (0, _classDecorator.executionOrder)(100), _dec8 = (0, _classDecorator.menu)('Components/Model'), _dec9 = (0, _classDecorator.property)({
    type: ModelShadowCastingMode,
    tooltip: 'i18n:model.shadow_casting_model'
  }), _dec10 = (0, _classDecorator.property)({
    type: _mesh.Mesh,
    tooltip: 'i18n:model.mesh'
  }), _dec11 = (0, _classDecorator.property)({
    visible: function visible() {
      return !!(this.mesh && this.mesh.struct.morph && this.mesh.struct.morph.subMeshMorphs.some(function (subMeshMorph) {
        return !!subMeshMorph;
      }));
    }
  }), _dec5(_class4 = _dec6(_class4 = _dec7(_class4 = _dec8(_class4 = (0, _classDecorator.executeInEditMode)(_class4 = (_class5 = (_temp2 = _class6 = /*#__PURE__*/function (_RenderableComponent) {
    _inherits(ModelComponent, _RenderableComponent);

    _createClass(ModelComponent, [{
      key: "shadowCastingMode",

      /**
       * @en Shadow projection mode.
       * @zh 阴影投射方式。
       */
      get: function get() {
        return this._shadowCastingMode;
      },
      set: function set(val) {
        this._shadowCastingMode = val;

        this._updateCastShadow();
      }
      /**
       * @en The mesh of the model.
       * @zh 模型的网格数据。
       */

    }, {
      key: "mesh",
      get: function get() {
        return this._mesh;
      },
      set: function set(val) {
        var _this$_mesh;

        var old = this._mesh;
        this._mesh = val;
        (_this$_mesh = this._mesh) === null || _this$_mesh === void 0 ? void 0 : _this$_mesh.initialize();

        this._watchMorphInMesh();

        this._onMeshChanged(old);

        this._updateModels();

        if (this.enabledInHierarchy) {
          this._attachToScene();
        }
      }
    }, {
      key: "model",
      get: function get() {
        return this._model;
      }
    }, {
      key: "enableMorph",
      get: function get() {
        return this._enableMorph;
      },
      set: function set(value) {
        this._enableMorph = value;
      }
    }]);

    function ModelComponent() {
      var _this;

      _classCallCheck(this, ModelComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(ModelComponent).call(this));

      _initializerDefineProperty(_this, "lightmapSettings", _descriptor7, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_mesh", _descriptor8, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_shadowCastingMode", _descriptor9, _assertThisInitialized(_this));

      _this._modelType = void 0;
      _this._model = null;
      _this._morphInstance = null;

      _initializerDefineProperty(_this, "_enableMorph", _descriptor10, _assertThisInitialized(_this));

      _this._modelType = _model.Model;
      return _this;
    }

    _createClass(ModelComponent, [{
      key: "onLoad",
      value: function onLoad() {
        var _this$_mesh2;

        (_this$_mesh2 = this._mesh) === null || _this$_mesh2 === void 0 ? void 0 : _this$_mesh2.initialize();

        this._watchMorphInMesh();

        this._updateModels();

        this._updateCastShadow();
      } // Redo, Undo, Prefab restore, etc.

    }, {
      key: "onRestore",
      value: function onRestore() {
        this._updateModels();
      }
    }, {
      key: "onEnable",
      value: function onEnable() {
        if (!this._model) {
          this._updateModels();
        }

        this._attachToScene();
      }
    }, {
      key: "onDisable",
      value: function onDisable() {
        if (this._model) {
          this._detachFromScene();
        }
      }
    }, {
      key: "onDestroy",
      value: function onDestroy() {
        if (this._model) {
          cc.director.root.destroyModel(this._model);
          this._model = null;
          this._models.length = 0;
        }

        if (this._morphInstance) {
          this._morphInstance.destroy();
        }
      }
    }, {
      key: "setWeights",
      value: function setWeights(weights, subMeshIndex) {
        if (this._morphInstance) {
          this._morphInstance.setWeights(subMeshIndex, weights);
        }
      }
    }, {
      key: "setInstancedAttribute",
      value: function setInstancedAttribute(name, value) {
        if (!this.model) {
          return;
        }

        var list = this.model.instancedAttributes.list;

        for (var i = 0; i < list.length; i++) {
          if (list[i].name === name) {
            list[i].view.set(value);
            break;
          }
        }
      }
    }, {
      key: "_updateLightmap",
      value: function _updateLightmap(lightmap, uOff, vOff, uScale, vScale) {
        this.lightmapSettings.texture = lightmap;
        this.lightmapSettings.uvParam.x = uOff;
        this.lightmapSettings.uvParam.y = vOff;
        this.lightmapSettings.uvParam.z = uScale;
        this.lightmapSettings.uvParam.w = vScale;

        if (this.model !== null) {
          this.model.updateLightingmap(this.lightmapSettings.texture, this.lightmapSettings.uvParam);
        }
      }
    }, {
      key: "_updateModels",
      value: function _updateModels() {
        if (!this.enabledInHierarchy || !this._mesh) {
          return;
        }

        if (this._model) {
          this._model.destroy();

          this._model.initialize(this.node);
        } else {
          this._createModel();
        }

        this._updateModelParams();

        if (this.model != null) {
          this.model.updateLightingmap(this.lightmapSettings.texture, this.lightmapSettings.uvParam);
        }
      }
    }, {
      key: "_createModel",
      value: function _createModel() {
        var preferMorphOverPlain = !!this._morphInstance; // Note we only change to use `MorphModel` if
        // we are required to render morph and the `this._modelType` is exactly the basic `Model`.
        // We do this since the `this._modelType` might be changed in classes derived from `ModelComponent`.
        // We shall not overwrite it.
        // Please notice that we do not enforce that
        // derived classes should use a morph-able model type(i.e. model type derived from `MorphModel`).
        // So we should take care of the edge case.

        var modelType = preferMorphOverPlain && this._modelType === _model.Model ? _morphModel.MorphModel : this._modelType;
        this._model = cc.director.root.createModel(modelType);
        this._model.visFlags = this.visibility;

        this._model.initialize(this.node);

        this._models.length = 0;

        this._models.push(this._model);

        if (this._morphInstance && this._model instanceof _morphModel.MorphModel) {
          this._model.setMorphRendering(this._morphInstance);
        }
      }
    }, {
      key: "_attachToScene",
      value: function _attachToScene() {
        if (!this.node.scene || !this._model) {
          return;
        }

        var scene = this._getRenderScene();

        if (this._model.scene != null) {
          this._detachFromScene();
        }

        scene.addModel(this._model);
      }
    }, {
      key: "_detachFromScene",
      value: function _detachFromScene() {
        if (this._model && this._model.scene) {
          this._model.scene.removeModel(this._model);
        }
      }
    }, {
      key: "_updateModelParams",
      value: function _updateModelParams() {
        if (!this._mesh || !this._model) {
          return;
        }

        this.node.hasChangedFlags |= _nodeEnum.TransformBit.POSITION;
        this._model.transform.hasChangedFlags |= _nodeEnum.TransformBit.POSITION;
        this._model.isDynamicBatching = this._isBatchingEnabled();
        var meshCount = this._mesh ? this._mesh.subMeshCount : 0;
        var renderingMesh = this._mesh.renderingSubMeshes;

        if (renderingMesh) {
          for (var i = 0; i < meshCount; ++i) {
            var material = this.getRenderMaterial(i);
            var subMeshData = renderingMesh[i];

            if (subMeshData) {
              this._model.initSubModel(i, subMeshData, material || this._getBuiltinMaterial());
            }
          }
        }

        this._model.createBoundingShape(this._mesh.minPosition, this._mesh.maxPosition);

        this._model.enabled = true;
      }
    }, {
      key: "_onMaterialModified",
      value: function _onMaterialModified(idx, material) {
        if (!this._model || !this._model.inited) {
          return;
        }

        this._onRebuildPSO(idx, material || this._getBuiltinMaterial());
      }
    }, {
      key: "_onRebuildPSO",
      value: function _onRebuildPSO(idx, material) {
        if (!this._model || !this._model.inited) {
          return;
        }

        this._model.isDynamicBatching = this._isBatchingEnabled();

        this._model.setSubModelMaterial(idx, material);

        this._model.updateLightingmap(this.lightmapSettings.texture, this.lightmapSettings.uvParam);
      }
    }, {
      key: "_onMeshChanged",
      value: function _onMeshChanged(old) {}
    }, {
      key: "_clearMaterials",
      value: function _clearMaterials() {
        if (!this._model) {
          return;
        }

        for (var i = 0; i < this._model.subModelNum; ++i) {
          this._onMaterialModified(i, null);
        }
      }
    }, {
      key: "_getBuiltinMaterial",
      value: function _getBuiltinMaterial() {
        // classic ugly pink indicating missing material
        return _index3.builtinResMgr.get('missing-material');
      }
    }, {
      key: "_onVisibilityChange",
      value: function _onVisibilityChange(val) {
        if (!this._model) {
          return;
        }

        this._model.visFlags = val;
      }
    }, {
      key: "_updateCastShadow",
      value: function _updateCastShadow() {
        if (!this._model) {
          return;
        }

        if (this._shadowCastingMode === ModelShadowCastingMode.OFF) {
          this._model.castShadow = false;
        } else {
          (0, _asserts.assertIsTrue)(this._shadowCastingMode === ModelShadowCastingMode.ON, "ShadowCastingMode ".concat(this._shadowCastingMode, " is not supported."));
          this._model.castShadow = true;
        }
      }
    }, {
      key: "_isBatchingEnabled",
      value: function _isBatchingEnabled() {
        for (var i = 0; i < this._materials.length; ++i) {
          var mat = this._materials[i];

          if (!mat) {
            continue;
          }

          for (var p = 0; p < mat.passes.length; ++p) {
            var pass = mat.passes[p];

            if (pass.instancedBuffer || pass.batchedBuffer) {
              return true;
            }
          }
        }

        return false;
      }
    }, {
      key: "_watchMorphInMesh",
      value: function _watchMorphInMesh() {
        if (this._morphInstance) {
          this._morphInstance.destroy();

          this._morphInstance = null;
        }

        if (!this._enableMorph) {
          return;
        }

        if (!this._mesh || !this._mesh.struct.morph || !this._mesh.morphRendering) {
          return;
        }

        var morph = this._mesh.struct.morph;
        this._morphInstance = this._mesh.morphRendering.createInstance();
        var nSubMeshes = this._mesh.struct.primitives.length;

        for (var iSubMesh = 0; iSubMesh < nSubMeshes; ++iSubMesh) {
          var subMeshMorph = morph.subMeshMorphs[iSubMesh];

          if (!subMeshMorph) {
            continue;
          }

          var initialWeights = subMeshMorph.weights || morph.weights;
          var weights = initialWeights ? initialWeights.slice() : new Array(subMeshMorph.targets.length).fill(0);

          this._morphInstance.setWeights(iSubMesh, weights);
        }

        if (this._model && this._model instanceof _morphModel.MorphModel) {
          this._model.setMorphRendering(this._morphInstance);
        }
      }
    }, {
      key: "_syncMorphWeights",
      value: function _syncMorphWeights(subMeshIndex) {
        if (!this._morphInstance) {
          return;
        }

        var subMeshMorphInstance = this._morphInstance[subMeshIndex];

        if (!subMeshMorphInstance || !subMeshMorphInstance.renderResources) {
          return;
        }

        subMeshMorphInstance.renderResources.setWeights(subMeshMorphInstance.weights);
      }
    }]);

    return ModelComponent;
  }(_renderableComponent.RenderableComponent), _class6.ShadowCastingMode = ModelShadowCastingMode, _temp2), (_descriptor7 = _applyDecoratedDescriptor(_class5.prototype, "lightmapSettings", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new ModelLightmapSettings();
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class5.prototype, "_mesh", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class5.prototype, "_shadowCastingMode", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return ModelShadowCastingMode.OFF;
    }
  }), _applyDecoratedDescriptor(_class5.prototype, "shadowCastingMode", [_dec9], Object.getOwnPropertyDescriptor(_class5.prototype, "shadowCastingMode"), _class5.prototype), _applyDecoratedDescriptor(_class5.prototype, "mesh", [_dec10], Object.getOwnPropertyDescriptor(_class5.prototype, "mesh"), _class5.prototype), _applyDecoratedDescriptor(_class5.prototype, "enableMorph", [_dec11], Object.getOwnPropertyDescriptor(_class5.prototype, "enableMorph"), _class5.prototype), _descriptor10 = _applyDecoratedDescriptor(_class5.prototype, "_enableMorph", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  })), _class5)) || _class4) || _class4) || _class4) || _class4) || _class4);
  _exports.ModelComponent = ModelComponent;

  (function (_ModelComponent) {})(ModelComponent || (_exports.ModelComponent = ModelComponent = {}));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,