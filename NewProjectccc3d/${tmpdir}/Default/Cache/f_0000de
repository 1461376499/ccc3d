(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../core/components/index.js", "../../core/data/class-decorator.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../core/components/index.js"), require("../../core/data/class-decorator.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.classDecorator);
    global.toggleContainerComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _classDecorator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ToggleContainerComponent = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  /**
   * @en
   * ToggleContainer is not a visible UI component but a way to modify the behavior of a set of Toggles. <br/>
   * Toggles that belong to the same group could only have one of them to be switched on at a time.<br/>
   * Note: All the first layer child node containing the toggle component will auto be added to the container.
   *
   * @zh
   * ToggleGroup 不是一个可见的 UI 组件，它可以用来修改一组 Toggle  组件的行为。当一组 Toggle 属于同一个 ToggleGroup 的时候，<br/>
   * 任何时候只能有一个 Toggle 处于选中状态。
   */
  var ToggleContainerComponent = (_dec = (0, _classDecorator.ccclass)('cc.ToggleContainerComponent'), _dec2 = (0, _classDecorator.help)('i18n:cc.ToggleContainerComponent'), _dec3 = (0, _classDecorator.executionOrder)(110), _dec4 = (0, _classDecorator.menu)('UI/ToggleContainer'), _dec5 = (0, _classDecorator.property)({
    type: [_index.EventHandler],
    tooltip: '选中事件。列表类型，默认为空，用户添加的每一个事件由节点引用，组件名称和一个响应函数组成。'
  }), _dec6 = (0, _classDecorator.property)({
    tooltip: '如果这个设置为 true， 那么 toggle 按钮在被点击的时候可以反复地被选中和未选中。'
  }), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = (0, _classDecorator.executeInEditMode)(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
    _inherits(ToggleContainerComponent, _Component);

    function ToggleContainerComponent() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, ToggleContainerComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ToggleContainerComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _initializerDefineProperty(_this, "checkEvents", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_allowSwitchOff", _descriptor2, _assertThisInitialized(_this));

      _this._toggleItems = [];
      return _this;
    }

    _createClass(ToggleContainerComponent, [{
      key: "start",
      value: function start() {
        this._makeAtLeastOneToggleChecked();
      }
      /**
       * @en
       * Refresh the state of the managed toggles.
       *
       * @zh
       * 刷新管理的 toggle 状态。
       *
       * @param toggle - 需要被更新的 toggle。
       */

    }, {
      key: "updateToggles",
      value: function updateToggles(toggle) {
        if (!this.enabledInHierarchy) {
          return;
        }

        if (toggle.isChecked) {
          this.toggleItems.forEach(function (item) {
            if (item !== toggle && item.isChecked && item.enabled) {
              item.isChecked = false;
            }
          });

          if (this.checkEvents) {
            _index.EventHandler.emitEvents(this.checkEvents, toggle);
          }
        }
      }
      /**
       * @en
       * Add toggle that needs to be managed.
       *
       * @zh
       * 添加需要被控制的 toggle。
       *
       * @param toggle - 被控制的 toggle。
       */

    }, {
      key: "addToggle",
      value: function addToggle(toggle) {
        var index = this._toggleItems.indexOf(toggle);

        if (index === -1) {
          this._toggleItems.push(toggle);
        }

        this._allowOnlyOneToggleChecked();
      }
      /**
       * @en
       * Remove toggle that needs to be managed.
       *
       * @zh
       * 移除 toggle。
       *
       * @param toggle - 被移除控制的 toggle。
       */

    }, {
      key: "removeToggle",
      value: function removeToggle(toggle) {
        var index = this._toggleItems.indexOf(toggle);

        if (index > -1) {
          this._toggleItems.splice(index, 1);
        }

        this._makeAtLeastOneToggleChecked();
      }
    }, {
      key: "_allowOnlyOneToggleChecked",
      value: function _allowOnlyOneToggleChecked() {
        var isChecked = false;

        this._toggleItems.forEach(function (item) {
          if (isChecked && item.enabled) {
            item.isChecked = false;
          }

          if (item.isChecked && item.enabled) {
            isChecked = true;
          }
        });

        return isChecked;
      }
    }, {
      key: "_makeAtLeastOneToggleChecked",
      value: function _makeAtLeastOneToggleChecked() {
        var isChecked = this._allowOnlyOneToggleChecked();

        if (!isChecked && !this._allowSwitchOff) {
          if (this._toggleItems.length > 0) {
            this._toggleItems[0].isChecked = true;
          }
        }
      }
    }, {
      key: "allowSwitchOff",

      /**
       * @en
       * If this setting is true, a toggle could be switched off and on when pressed.
       * If it is false, it will make sure there is always only one toggle could be switched on
       * and the already switched on toggle can't be switched off.
       *
       * @zh
       * 如果这个设置为 true，那么 toggle 按钮在被点击的时候可以反复地被选中和未选中。
       */
      get: function get() {
        return this._allowSwitchOff;
      },
      set: function set(value) {
        this._allowSwitchOff = value;
      }
      /**
       * @zh
       * 只读属性，返回 toggleGroup 管理的 toggle 数组引用。
       */

    }, {
      key: "toggleItems",
      get: function get() {
        return this._toggleItems;
      }
    }]);

    return ToggleContainerComponent;
  }(_index.Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "checkEvents", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return [];
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_allowSwitchOff", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "allowSwitchOff", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "allowSwitchOff"), _class2.prototype)), _class2)) || _class) || _class) || _class) || _class) || _class);
  _exports.ToggleContainerComponent = ToggleContainerComponent;
  cc.ToggleContainerComponent = ToggleContainerComponent;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,