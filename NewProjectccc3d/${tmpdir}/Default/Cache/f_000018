(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../memop/cached-array.js", "../command-allocator.js", "./webgl-commands.js", "../define.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../memop/cached-array.js"), require("../command-allocator.js"), require("./webgl-commands.js"), require("../define.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.cachedArray, global.commandAllocator, global.webglCommands, global.define);
    global.webglCommandAllocator = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _cachedArray, _commandAllocator, _webglCommands, _define) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.WebGLGFXCommandAllocator = _exports.WebGLGFXCommandPool = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var WebGLGFXCommandPool = /*#__PURE__*/function () {
    function WebGLGFXCommandPool(clazz, count) {
      _classCallCheck(this, WebGLGFXCommandPool);

      this._frees = void 0;
      this._freeIdx = 0;
      this._freeCmds = void 0;
      this._frees = new Array(count);
      this._freeCmds = new _cachedArray.CachedArray(count);

      for (var i = 0; i < count; ++i) {
        this._frees[i] = new clazz();
      }

      this._freeIdx = count - 1;
    }
    /*
    public alloc (clazz: new() => T): T {
        return new clazz();
    }
    */


    _createClass(WebGLGFXCommandPool, [{
      key: "alloc",
      value: function alloc(clazz) {
        if (this._freeIdx < 0) {
          var size = this._frees.length * 2;
          var temp = this._frees;
          this._frees = new Array(size);
          var increase = size - temp.length;

          for (var i = 0; i < increase; ++i) {
            this._frees[i] = new clazz();
          }

          for (var _i = increase, j = 0; _i < size; ++_i, ++j) {
            this._frees[_i] = temp[j];
          }

          this._freeIdx += increase;
        }

        var cmd = this._frees[this._freeIdx];
        this._frees[this._freeIdx--] = null;
        ++cmd.refCount;
        return cmd;
      }
    }, {
      key: "free",
      value: function free(cmd) {
        if (--cmd.refCount === 0) {
          this._freeCmds.push(cmd);
        }
      }
    }, {
      key: "freeCmds",
      value: function freeCmds(cmds) {
        // return ;
        for (var i = 0; i < cmds.length; ++i) {
          if (--cmds.array[i].refCount === 0) {
            this._freeCmds.push(cmds.array[i]);
          }
        }
      }
    }, {
      key: "release",
      value: function release() {
        for (var i = 0; i < this._freeCmds.length; ++i) {
          var cmd = this._freeCmds.array[i];
          cmd.clear();
          this._frees[++this._freeIdx] = cmd;
        }

        this._freeCmds.clear();
      }
    }]);

    return WebGLGFXCommandPool;
  }();

  _exports.WebGLGFXCommandPool = WebGLGFXCommandPool;

  var WebGLGFXCommandAllocator = /*#__PURE__*/function (_GFXCommandAllocator) {
    _inherits(WebGLGFXCommandAllocator, _GFXCommandAllocator);

    function WebGLGFXCommandAllocator(device) {
      var _this;

      _classCallCheck(this, WebGLGFXCommandAllocator);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(WebGLGFXCommandAllocator).call(this, device));
      _this.beginRenderPassCmdPool = void 0;
      _this.bindStatesCmdPool = void 0;
      _this.drawCmdPool = void 0;
      _this.updateBufferCmdPool = void 0;
      _this.copyBufferToTextureCmdPool = void 0;
      _this.beginRenderPassCmdPool = new WebGLGFXCommandPool(_webglCommands.WebGLCmdBeginRenderPass, 1);
      _this.bindStatesCmdPool = new WebGLGFXCommandPool(_webglCommands.WebGLCmdBindStates, 1);
      _this.drawCmdPool = new WebGLGFXCommandPool(_webglCommands.WebGLCmdDraw, 1);
      _this.updateBufferCmdPool = new WebGLGFXCommandPool(_webglCommands.WebGLCmdUpdateBuffer, 1);
      _this.copyBufferToTextureCmdPool = new WebGLGFXCommandPool(_webglCommands.WebGLCmdCopyBufferToTexture, 1);
      return _this;
    }

    _createClass(WebGLGFXCommandAllocator, [{
      key: "initialize",
      value: function initialize(info) {
        this._status = _define.GFXStatus.SUCCESS;
        return true;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this._status = _define.GFXStatus.UNREADY;
      }
    }, {
      key: "clearCmds",
      value: function clearCmds(cmdPackage) {
        if (cmdPackage.beginRenderPassCmds.length) {
          this.beginRenderPassCmdPool.freeCmds(cmdPackage.beginRenderPassCmds);
          cmdPackage.beginRenderPassCmds.clear();
        }

        if (cmdPackage.bindStatesCmds.length) {
          this.bindStatesCmdPool.freeCmds(cmdPackage.bindStatesCmds);
          cmdPackage.bindStatesCmds.clear();
        }

        if (cmdPackage.drawCmds.length) {
          this.drawCmdPool.freeCmds(cmdPackage.drawCmds);
          cmdPackage.drawCmds.clear();
        }

        if (cmdPackage.updateBufferCmds.length) {
          this.updateBufferCmdPool.freeCmds(cmdPackage.updateBufferCmds);
          cmdPackage.updateBufferCmds.clear();
        }

        if (cmdPackage.copyBufferToTextureCmds.length) {
          this.copyBufferToTextureCmdPool.freeCmds(cmdPackage.copyBufferToTextureCmds);
          cmdPackage.copyBufferToTextureCmds.clear();
        }

        cmdPackage.cmds.clear();
      }
    }, {
      key: "releaseCmds",
      value: function releaseCmds() {
        this.beginRenderPassCmdPool.release();
        this.bindStatesCmdPool.release();
        this.drawCmdPool.release();
        this.updateBufferCmdPool.release();
        this.copyBufferToTextureCmdPool.release();
      }
    }]);

    return WebGLGFXCommandAllocator;
  }(_commandAllocator.GFXCommandAllocator);

  _exports.WebGLGFXCommandAllocator = WebGLGFXCommandAllocator;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,