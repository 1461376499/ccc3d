(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../gfx/define.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../gfx/define.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.define);
    global.meshBuffer = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _define) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MeshBuffer = void 0;

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var MeshBuffer = /*#__PURE__*/function () {
    // NOTE:
    // actually 256 * 4 * (vertexFormat._bytes / 4)
    // include pos, uv, color in ui attributes
    function MeshBuffer(batcher) {
      _classCallCheck(this, MeshBuffer);

      this.batcher = void 0;
      this.vData = null;
      this.iData = null;
      this.vb = null;
      this.ib = null;
      this.ia = null;
      this.byteStart = 0;
      this.byteOffset = 0;
      this.indiceStart = 0;
      this.indiceOffset = 0;
      this.vertexStart = 0;
      this.vertexOffset = 0;
      this.lastByteOffset = 1;
      this.dirty = false;
      this._vertexFormatBytes = 9 * Float32Array.BYTES_PER_ELEMENT;
      this._initVDataCount = 256 * this._vertexFormatBytes;
      this._initIDataCount = 256 * 6;
      this._outofCallback = null;
      this.batcher = batcher;
    }

    _createClass(MeshBuffer, [{
      key: "initialize",
      value: function initialize(attrs, outofCallback) {
        this._outofCallback = outofCallback;
        var vbStride = Float32Array.BYTES_PER_ELEMENT * 9;
        this.vb = this.vb || this.batcher.device.createBuffer({
          usage: _define.GFXBufferUsageBit.VERTEX | _define.GFXBufferUsageBit.TRANSFER_DST,
          memUsage: _define.GFXMemoryUsageBit.HOST | _define.GFXMemoryUsageBit.DEVICE,
          size: 0,
          stride: vbStride
        });
        var ibStride = Uint16Array.BYTES_PER_ELEMENT;
        this.ib = this.ib || this.batcher.device.createBuffer({
          usage: _define.GFXBufferUsageBit.INDEX | _define.GFXBufferUsageBit.TRANSFER_DST,
          memUsage: _define.GFXMemoryUsageBit.HOST | _define.GFXMemoryUsageBit.DEVICE,
          size: 0,
          stride: ibStride
        });
        this.ia = this.ia || this.batcher.device.createInputAssembler({
          attributes: attrs,
          vertexBuffers: [this.vb],
          indexBuffer: this.ib
        });

        this._reallocBuffer();
      }
    }, {
      key: "request",
      value: function request() {
        var vertexCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4;
        var indiceCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6;
        this.lastByteOffset = this.byteOffset;
        var byteOffset = this.byteOffset + vertexCount * this._vertexFormatBytes;
        var indiceOffset = this.indiceOffset + indiceCount;

        if (vertexCount + this.vertexOffset > 65535) {
          // merge last state
          this.batcher.autoMergeBatches();

          if (this._outofCallback) {
            this._outofCallback.call(this.batcher, vertexCount, indiceCount);
          }

          return false;
        }

        var byteLength = this.vData.byteLength;
        var indiceLength = this.iData.length;

        if (byteOffset > byteLength || indiceOffset > indiceLength) {
          while (byteLength < byteOffset || indiceLength < indiceOffset) {
            this._initVDataCount *= 2;
            this._initIDataCount *= 2;
            byteLength = this._initVDataCount * 4;
            indiceLength = this._initIDataCount;
          }

          this._reallocBuffer();
        }

        this.vertexOffset += vertexCount;
        this.indiceOffset += indiceCount;
        this.byteOffset = byteOffset;
        this.dirty = true;
        return true;
      }
    }, {
      key: "reset",
      value: function reset() {
        this.byteStart = 0;
        this.byteOffset = 0;
        this.indiceStart = 0;
        this.indiceOffset = 0;
        this.vertexStart = 0;
        this.vertexOffset = 0;
        this.lastByteOffset = 0;
        this.dirty = false;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.ib.destroy();
        this.vb.destroy();
        this.ia.destroy();
        this.ib = null;
        this.vb = null;
        this.ia = null;
      }
    }, {
      key: "uploadData",
      value: function uploadData() {
        if (this.byteOffset === 0 || !this.dirty) {
          return;
        }

        var verticesData = new Float32Array(this.vData.buffer, 0, this.byteOffset >> 2);
        var indicesData = new Uint16Array(this.iData.buffer, 0, this.indiceOffset);

        if (this.byteOffset > this.vb.size) {
          this.vb.resize(this.byteOffset);
        }

        this.vb.update(verticesData);

        if (this.indiceOffset * 2 > this.ib.size) {
          this.ib.resize(this.indiceOffset * 2);
        }

        this.ib.update(indicesData);
      }
    }, {
      key: "_reallocBuffer",
      value: function _reallocBuffer() {
        this._reallocVData(true);

        this._reallocIData(true);
      }
    }, {
      key: "_reallocVData",
      value: function _reallocVData(copyOldData) {
        var oldVData;

        if (this.vData) {
          oldVData = new Uint8Array(this.vData.buffer);
        }

        this.vData = new Float32Array(this._initVDataCount);

        if (oldVData && copyOldData) {
          var newData = new Uint8Array(this.vData.buffer);

          for (var i = 0, l = oldVData.length; i < l; i++) {
            newData[i] = oldVData[i];
          }
        }
      }
    }, {
      key: "_reallocIData",
      value: function _reallocIData(copyOldData) {
        var oldIData = this.iData;
        this.iData = new Uint16Array(this._initIDataCount);

        if (oldIData && copyOldData) {
          var iData = this.iData;

          for (var i = 0, l = oldIData.length; i < l; i++) {
            iData[i] = oldIData[i];
          }
        }
      }
    }]);

    return MeshBuffer;
  }();

  _exports.MeshBuffer = MeshBuffer;
  MeshBuffer.OPACITY_OFFSET = 8;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,