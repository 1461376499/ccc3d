(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../default-constants.js", "../../animation/transform-utils.js", "../../assets/asset-enum.js", "../../assets/material.js", "../../assets/mesh.js", "../../assets/skeleton.js", "../../assets/texture-2d.js", "../../data/class-decorator.js", "../../data/utils/attribute.js", "../../gfx/define.js", "../../math/index.js", "../misc/buffer.js", "./skinning-model-component.js", "../../platform/index.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../default-constants.js"), require("../../animation/transform-utils.js"), require("../../assets/asset-enum.js"), require("../../assets/material.js"), require("../../assets/mesh.js"), require("../../assets/skeleton.js"), require("../../assets/texture-2d.js"), require("../../data/class-decorator.js"), require("../../data/utils/attribute.js"), require("../../gfx/define.js"), require("../../math/index.js"), require("../misc/buffer.js"), require("./skinning-model-component.js"), require("../../platform/index.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.defaultConstants, global.transformUtils, global.assetEnum, global.material, global.mesh, global.skeleton, global.texture2d, global.classDecorator, global.attribute, global.define, global.index, global.buffer, global.skinningModelComponent, global.index);
    global.batchedSkinningModelComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _defaultConstants, _transformUtils, _assetEnum, _material, _mesh, _skeleton, _texture2d, _classDecorator, _attribute, _define, _index, _buffer, _skinningModelComponent, _index2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.BatchedSkinningModelComponent = _exports.SkinningModelUnit = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _temp, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _class4, _class5, _descriptor7, _descriptor8, _descriptor9, _temp2;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

  function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function set(target, property, value, receiver) { if (typeof Reflect !== "undefined" && Reflect.set) { set = Reflect.set; } else { set = function set(target, property, value, receiver) { var base = _superPropBase(target, property); var desc; if (base) { desc = Object.getOwnPropertyDescriptor(base, property); if (desc.set) { desc.set.call(receiver, value); return true; } else if (!desc.writable) { return false; } } desc = Object.getOwnPropertyDescriptor(receiver, property); if (desc) { if (!desc.writable) { return false; } desc.value = value; Object.defineProperty(receiver, property, desc); } else { _defineProperty(receiver, property, value); } return true; }; } return set(target, property, value, receiver); }

  function _set(target, property, value, receiver, isStrict) { var s = set(target, property, value, receiver || target); if (!s && isStrict) { throw new Error('failed to set property'); } return value; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  var repeat = function repeat(n) {
    return n - Math.floor(n);
  };

  var batch_id = {
    name: _define.GFXAttributeName.ATTR_BATCH_ID,
    format: _define.GFXFormat.R32F,
    isNormalized: false
  };
  var batch_uv = {
    name: _define.GFXAttributeName.ATTR_BATCH_UV,
    format: _define.GFXFormat.RG32F,
    isNormalized: false
  };
  var batch_extras_size = _define.GFXFormatInfos[batch_id.format].size + _define.GFXFormatInfos[batch_uv.format].size;
  var SkinningModelUnit = (_dec = (0, _classDecorator.ccclass)('cc.SkinningModelUnit'), _dec2 = (0, _classDecorator.property)(_mesh.Mesh), _dec3 = (0, _classDecorator.property)(_skeleton.Skeleton), _dec4 = (0, _classDecorator.property)(_material.Material), _dec5 = (0, _classDecorator.property)({
    type: _skinningModelComponent.SkinningModelComponent
  }), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function () {
    function SkinningModelUnit() {
      _classCallCheck(this, SkinningModelUnit);

      _initializerDefineProperty(this, "mesh", _descriptor, this);

      _initializerDefineProperty(this, "skeleton", _descriptor2, this);

      _initializerDefineProperty(this, "material", _descriptor3, this);

      _initializerDefineProperty(this, "_localTransform", _descriptor4, this);

      _initializerDefineProperty(this, "_offset", _descriptor5, this);

      _initializerDefineProperty(this, "_size", _descriptor6, this);
    }

    _createClass(SkinningModelUnit, [{
      key: "offset",

      /**
       * @en UV offset on texture atlas.
       * @zh 在图集中的 uv 坐标偏移。
       */
      set: function set(offset) {
        _index.Vec2.copy(this._offset, offset);
      },
      get: function get() {
        return this._offset;
      }
      /**
       * @en UV extent on texture atlas.
       * @zh 在图集中占的 UV 尺寸。
       */

    }, {
      key: "size",
      set: function set(size) {
        _index.Vec2.copy(this._size, size);
      },
      get: function get() {
        return this._size;
      }
      /**
       * @en Convenient setter, copying all necessary information from target skinning model component.
       * @zh 复制目标 SkinningModelComponent 的所有属性到本单元，方便快速配置。
       */

    }, {
      key: "copyFrom",
      set: function set(comp) {
        if (!comp) {
          return;
        }

        this.mesh = comp.mesh;
        this.skeleton = comp.skeleton;
        this.material = comp.getMaterial(0);

        if (comp.skinningRoot) {
          (0, _transformUtils.getWorldTransformUntilRoot)(comp.node, comp.skinningRoot, this._localTransform);
        }
      },
      get: function get() {
        return null;
      }
    }]);

    return SkinningModelUnit;
  }(), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "mesh", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "skeleton", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "material", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_localTransform", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _index.Mat4();
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_offset", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _index.Vec2(0, 0);
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "_size", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _index.Vec2(1, 1);
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "offset", [_classDecorator.property], Object.getOwnPropertyDescriptor(_class2.prototype, "offset"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "size", [_classDecorator.property], Object.getOwnPropertyDescriptor(_class2.prototype, "size"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "copyFrom", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "copyFrom"), _class2.prototype)), _class2)) || _class);
  _exports.SkinningModelUnit = SkinningModelUnit;
  var m4_local = new _index.Mat4();
  var m4_1 = new _index.Mat4();
  var v3_1 = new _index.Vec3();
  /**
   * @en The Batched Skinning Model Component, batches multiple skeleton-sharing skinning models.
   * @zh 蒙皮模型合批组件，用于合并绘制共享同一骨骼资源的所有蒙皮模型。
   */

  var BatchedSkinningModelComponent = (_dec6 = (0, _classDecorator.ccclass)('cc.BatchedSkinningModelComponent'), _dec7 = (0, _classDecorator.help)('i18n:cc.BatchedSkinningModelComponent'), _dec8 = (0, _classDecorator.executionOrder)(100), _dec9 = (0, _classDecorator.menu)('Components/BatchedSkinningModel'), _dec10 = (0, _classDecorator.property)({
    tooltip: 'i18n:batched_skinning_model.atlas_size'
  }), _dec11 = (0, _classDecorator.property)({
    type: [_attribute.CCString],
    tooltip: 'i18n:batched_skinning_model.batchable_texture_names'
  }), _dec12 = (0, _classDecorator.property)({
    type: [SkinningModelUnit],
    tooltip: 'i18n:batched_skinning_model.units'
  }), _dec13 = (0, _classDecorator.property)({
    override: true,
    visible: false
  }), _dec14 = (0, _classDecorator.property)({
    override: true,
    visible: false
  }), _dec6(_class4 = _dec7(_class4 = _dec8(_class4 = (0, _classDecorator.executeInEditMode)(_class4 = _dec9(_class4 = (_class5 = (_temp2 = /*#__PURE__*/function (_SkinningModelCompone) {
    _inherits(BatchedSkinningModelComponent, _SkinningModelCompone);

    function BatchedSkinningModelComponent() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, BatchedSkinningModelComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BatchedSkinningModelComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _initializerDefineProperty(_this, "atlasSize", _descriptor7, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "batchableTextureNames", _descriptor8, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "units", _descriptor9, _assertThisInitialized(_this));

      _this._textures = {};
      _this._batchMaterial = null;
      return _this;
    }

    _createClass(BatchedSkinningModelComponent, [{
      key: "onLoad",
      value: function onLoad() {
        _get(_getPrototypeOf(BatchedSkinningModelComponent.prototype), "onLoad", this).call(this);

        this.cook();
      }
    }, {
      key: "onDestroy",
      value: function onDestroy() {
        for (var tex in this._textures) {
          this._textures[tex].destroy();
        }

        this._textures = {};

        if (this._mesh) {
          this._mesh.destroy();

          this._mesh = null;
        }

        _get(_getPrototypeOf(BatchedSkinningModelComponent.prototype), "onDestroy", this).call(this);
      }
    }, {
      key: "_onMaterialModified",
      value: function _onMaterialModified(idx, material) {
        this.cookMaterials();

        _get(_getPrototypeOf(BatchedSkinningModelComponent.prototype), "_onMaterialModified", this).call(this, idx, this.getMaterialInstance(idx));
      }
    }, {
      key: "cook",
      value: function cook() {
        this.cookMaterials();
        this.cookSkeletons();
        this.cookMeshes();
      }
    }, {
      key: "cookMaterials",
      value: function cookMaterials() {
        var _this2 = this;

        if (!this._batchMaterial) {
          this._batchMaterial = this.getMaterial(0);
        }

        var mat = this.getMaterialInstance(0);

        if (!mat || !this._batchMaterial || !this._batchMaterial.effectAsset) {
          console.warn('incomplete batch material!');
          return;
        }

        mat.copy(this._batchMaterial);
        this.resizeAtlases();
        var tech = mat.effectAsset.techniques[mat.technique];

        var _loop = function _loop(i) {
          var pass = tech.passes[i];

          if (!pass.properties) {
            return "continue";
          }

          var _loop2 = function _loop2(prop) {
            if (pass.properties[prop].type >= _define.GFXType.SAMPLER1D) {
              // samplers
              var tex = null;

              if (_this2.batchableTextureNames.find(function (n) {
                return n === prop;
              })) {
                tex = _this2._textures[prop];

                if (!tex) {
                  tex = _this2.createTexture(prop);
                }

                _this2.cookTextures(tex, prop, i);
              } else {
                _this2.units.some(function (u) {
                  return tex = u.material && u.material.getProperty(prop, i);
                });
              }

              if (tex) {
                mat.setProperty(prop, tex, i);
              }
            } else {
              // vectors
              var value = [];

              for (var u = 0; u < _this2.units.length; u++) {
                var unit = _this2.units[u];

                if (!unit.material) {
                  continue;
                }

                value.push(unit.material.getProperty(prop.slice(0, -3), i));
              }

              mat.setProperty(prop, value, i);
            }
          };

          for (var prop in pass.properties) {
            _loop2(prop);
          }
        };

        for (var i = 0; i < tech.passes.length; i++) {
          var _ret = _loop(i);

          if (_ret === "continue") continue;
        }
      }
    }, {
      key: "cookSkeletons",
      value: function cookSkeletons() {
        var _this3 = this;

        if (!this._skinningRoot) {
          console.warn('no skinning root specified!');
          return;
        } // merge joints accordingly


        var joints = [];
        var bindposes = [];

        for (var u = 0; u < this.units.length; u++) {
          var unit = this.units[u];

          if (!unit || !unit.skeleton) {
            continue;
          }

          var partial = unit.skeleton;

          _index.Mat4.invert(m4_local, unit._localTransform);

          var _loop3 = function _loop3(i) {
            var path = partial.joints[i];
            var idx = joints.findIndex(function (p) {
              return p === path;
            });

            if (idx >= 0) {
              if (_defaultConstants.EDITOR) {
                // consistency check
                _index.Mat4.multiply(m4_1, partial.bindposes[i], m4_local);

                if (!m4_1.equals(bindposes[idx])) {
                  console.warn("".concat(_this3.node.name, ": Inconsistent bindpose at ").concat(joints[idx], " in unit ").concat(u, ", artifacts may present"));
                }
              }

              return "continue";
            }

            joints.push(path); // cancel out local transform

            bindposes.push(_index.Mat4.multiply(new _index.Mat4(), partial.bindposes[i] || _index.Mat4.IDENTITY, m4_local));
          };

          for (var i = 0; i < partial.joints.length; i++) {
            var _ret2 = _loop3(i);

            if (_ret2 === "continue") continue;
          }
        } // sort the array to be more cache-friendly


        var idxMap = Array.from(Array(joints.length).keys()).sort(function (a, b) {
          if (joints[a] > joints[b]) {
            return 1;
          }

          if (joints[a] < joints[b]) {
            return -1;
          }

          return 0;
        });
        var skeleton = new _skeleton.Skeleton();
        skeleton.joints = joints.map(function (_, idx, arr) {
          return arr[idxMap[idx]];
        });
        skeleton.bindposes = bindposes.map(function (_, idx, arr) {
          return arr[idxMap[idx]];
        }); // apply

        if (this._skeleton) {
          this._skeleton.destroy();
        }

        this.skeleton = skeleton;
      }
    }, {
      key: "cookMeshes",
      value: function cookMeshes() {
        var _this4 = this;

        var isValid = false;

        for (var u = 0; u < this.units.length; u++) {
          var unit = this.units[u];

          if (unit.mesh) {
            isValid = true;
            break;
          }
        }

        if (!isValid || !this._skinningRoot) {
          return;
        }

        if (this._mesh) {
          this._mesh.destroyRenderingMesh();
        } else {
          this._mesh = new _mesh.Mesh();
        }

        var posOffset = 0;
        var posFormat = _define.GFXFormat.UNKNOWN;
        var normalOffset = 0;
        var normalFormat = _define.GFXFormat.UNKNOWN;
        var tangentOffset = 0;
        var tangentFormat = _define.GFXFormat.UNKNOWN;
        var uvOffset = 0;
        var uvFormat = _define.GFXFormat.UNKNOWN;
        var jointOffset = 0;
        var jointFormat = _define.GFXFormat.UNKNOWN; // prepare joint index map

        var jointIndexMap = new Array(this.units.length);
        var unitLen = this.units.length;

        for (var i = 0; i < unitLen; i++) {
          var _unit = this.units[i];

          if (!_unit || !_unit.skeleton) {
            continue;
          }

          jointIndexMap[i] = _unit.skeleton.joints.map(function (j) {
            return _this4._skeleton.joints.findIndex(function (ref) {
              return j === ref;
            });
          });
        }

        var _loop4 = function _loop4(_i) {
          var unit = _this4.units[_i];

          if (!unit || !unit.mesh || !unit.mesh.data) {
            return "continue";
          }

          var newMesh = _this4._createUnitMesh(_i, unit.mesh);

          var dataView = new DataView(newMesh.data.buffer);

          _index.Mat4.inverseTranspose(m4_local, unit._localTransform);

          var offset = unit.offset;
          var size = unit.size;

          var _loop5 = function _loop5(b) {
            var bundle = newMesh.struct.vertexBundles[b]; // apply local transform to mesh

            posOffset = bundle.view.offset;
            posFormat = _define.GFXFormat.UNKNOWN;

            for (var a = 0; a < bundle.attributes.length; a++) {
              var attr = bundle.attributes[a];

              if (attr.name === _define.GFXAttributeName.ATTR_POSITION) {
                posFormat = attr.format;
                break;
              }

              posOffset += _define.GFXFormatInfos[attr.format].size;
            }

            if (posFormat) {
              var pos = (0, _buffer.readBuffer)(dataView, posFormat, posOffset, bundle.view.length, bundle.view.stride);

              for (var j = 0; j < pos.length; j += 3) {
                _index.Vec3.fromArray(v3_1, pos, j);

                _index.Vec3.transformMat4(v3_1, v3_1, unit._localTransform);

                _index.Vec3.toArray(pos, v3_1, j);
              }

              (0, _buffer.writeBuffer)(dataView, pos, posFormat, posOffset, bundle.view.stride);
            }

            normalOffset = bundle.view.offset;
            normalFormat = _define.GFXFormat.UNKNOWN;

            for (var _a = 0; _a < bundle.attributes.length; _a++) {
              var _attr = bundle.attributes[_a];

              if (_attr.name === _define.GFXAttributeName.ATTR_NORMAL) {
                normalFormat = _attr.format;
                break;
              }

              normalOffset += _define.GFXFormatInfos[_attr.format].size;
            }

            if (normalFormat) {
              var normal = (0, _buffer.readBuffer)(dataView, normalFormat, normalOffset, bundle.view.length, bundle.view.stride);

              for (var _j = 0; _j < normal.length; _j += 3) {
                _index.Vec3.fromArray(v3_1, normal, _j);

                _index.Vec3.transformMat4Normal(v3_1, v3_1, m4_local);

                _index.Vec3.toArray(normal, v3_1, _j);
              }

              (0, _buffer.writeBuffer)(dataView, normal, normalFormat, normalOffset, bundle.view.stride);
            }

            tangentOffset = bundle.view.offset;
            tangentFormat = _define.GFXFormat.UNKNOWN;

            for (var _a2 = 0; _a2 < bundle.attributes.length; _a2++) {
              var _attr2 = bundle.attributes[_a2];

              if (_attr2.name === _define.GFXAttributeName.ATTR_TANGENT) {
                tangentFormat = _attr2.format;
                break;
              }

              tangentOffset += _define.GFXFormatInfos[_attr2.format].size;
            }

            if (tangentFormat) {
              var tangent = (0, _buffer.readBuffer)(dataView, tangentFormat, tangentOffset, bundle.view.length, bundle.view.stride);

              for (var _j2 = 0; _j2 < tangent.length; _j2 += 3) {
                _index.Vec3.fromArray(v3_1, tangent, _j2);

                _index.Vec3.transformMat4Normal(v3_1, v3_1, m4_local);

                _index.Vec3.toArray(tangent, v3_1, _j2);
              }

              (0, _buffer.writeBuffer)(dataView, tangent, tangentFormat, tangentOffset, bundle.view.stride);
            } // merge UV


            uvOffset = bundle.view.offset;
            uvFormat = _define.GFXFormat.UNKNOWN;

            for (var _a3 = 0; _a3 < bundle.attributes.length; _a3++) {
              var _attr3 = bundle.attributes[_a3];

              if (_attr3.name === _define.GFXAttributeName.ATTR_BATCH_UV) {
                uvFormat = _attr3.format;
                break;
              }

              uvOffset += _define.GFXFormatInfos[_attr3.format].size;
            }

            if (uvFormat) {
              (0, _buffer.mapBuffer)(dataView, function (cur, idx) {
                cur = repeat(cur); // warp to [0, 1] first

                var comp = idx === 0 ? 'x' : 'y';
                return cur * size[comp] + offset[comp];
              }, uvFormat, uvOffset, bundle.view.length, bundle.view.stride, dataView);
            } // merge joint indices


            var idxMap = jointIndexMap[_i];

            if (!idxMap) {
              return "continue";
            }

            jointOffset = bundle.view.offset;
            jointFormat = _define.GFXFormat.UNKNOWN;

            for (var _a4 = 0; _a4 < bundle.attributes.length; _a4++) {
              var _attr4 = bundle.attributes[_a4];

              if (_attr4.name === _define.GFXAttributeName.ATTR_JOINTS) {
                jointFormat = _attr4.format;
                break;
              }

              jointOffset += _define.GFXFormatInfos[_attr4.format].size;
            }

            if (jointFormat) {
              (0, _buffer.mapBuffer)(dataView, function (cur) {
                return idxMap[cur];
              }, jointFormat, jointOffset, bundle.view.length, bundle.view.stride, dataView);
            }
          };

          for (var b = 0; b < newMesh.struct.vertexBundles.length; b++) {
            var _ret4 = _loop5(b);

            if (_ret4 === "continue") continue;
          }

          _this4._mesh.merge(newMesh);
        };

        for (var _i = 0; _i < unitLen; _i++) {
          var _ret3 = _loop4(_i);

          if (_ret3 === "continue") continue;
        }

        this._onMeshChanged(this._mesh);

        this._updateModels();
      }
    }, {
      key: "cookTextures",
      value: function cookTextures(target, prop, passIdx) {
        var texImages = [];
        var texImageRegions = [];
        var texBuffers = [];
        var texBufferRegions = [];

        for (var u = 0; u < this.units.length; u++) {
          var unit = this.units[u];

          if (!unit.material) {
            continue;
          }

          var partial = unit.material.getProperty(prop, passIdx);

          if (partial && partial.image && partial.image.data) {
            var region = new _define.GFXBufferTextureCopy();
            region.texOffset.x = unit.offset.x * this.atlasSize;
            region.texOffset.y = unit.offset.y * this.atlasSize;
            region.texExtent.width = unit.size.x * this.atlasSize;
            region.texExtent.height = unit.size.y * this.atlasSize;
            var data = partial.image.data;

            if (data instanceof HTMLCanvasElement || data instanceof HTMLImageElement) {
              texImages.push(data);
              texImageRegions.push(region);
            } else {
              texBuffers.push(data);
              texBufferRegions.push(region);
            }
          }
        }

        var gfxTex = target.getGFXTexture();
        var device = cc.director.root.device;

        if (texBuffers.length > 0) {
          device.copyBuffersToTexture(texBuffers, gfxTex, texBufferRegions);
        }

        if (texImages.length > 0) {
          device.copyTexImagesToTexture(texImages, gfxTex, texImageRegions);
        }
      }
    }, {
      key: "createTexture",
      value: function createTexture(prop) {
        var tex = new _texture2d.Texture2D();
        tex.setFilters(_assetEnum.Filter.LINEAR, _assetEnum.Filter.LINEAR);
        tex.setMipFilter(_assetEnum.Filter.LINEAR);
        tex.reset({
          width: this.atlasSize,
          height: this.atlasSize,
          format: _assetEnum.PixelFormat.RGBA8888
        });
        tex.loaded = true;
        this._textures[prop] = tex;
        return tex;
      }
    }, {
      key: "resizeAtlases",
      value: function resizeAtlases() {
        for (var prop in this._textures) {
          var tex = this._textures[prop];
          tex.reset({
            width: this.atlasSize,
            height: this.atlasSize,
            format: _assetEnum.PixelFormat.RGBA8888
          });
        }
      }
    }, {
      key: "_createUnitMesh",
      value: function _createUnitMesh(unitIdx, mesh) {
        // add batch ID to this temp mesh
        // first, update bookkeeping
        var newMeshStruct = JSON.parse(JSON.stringify(mesh.struct));
        var modifiedBundles = {};

        for (var p = 0; p < mesh.struct.primitives.length; p++) {
          var primitive = mesh.struct.primitives[p];
          var uvOffset = 0;
          var uvFormat = _define.GFXFormat.UNKNOWN;
          var bundleIdx = 0;

          for (; bundleIdx < primitive.vertexBundelIndices.length; bundleIdx++) {
            var bundle = mesh.struct.vertexBundles[primitive.vertexBundelIndices[bundleIdx]];
            uvOffset = bundle.view.offset;
            uvFormat = _define.GFXFormat.UNKNOWN;

            for (var a = 0; a < bundle.attributes.length; a++) {
              var attr = bundle.attributes[a];

              if (attr.name === _define.GFXAttributeName.ATTR_TEX_COORD) {
                uvFormat = attr.format;
                break;
              }

              uvOffset += _define.GFXFormatInfos[attr.format].size;
            }

            if (uvFormat) {
              break;
            }
          }

          if (modifiedBundles[bundleIdx] !== undefined) {
            continue;
          }

          modifiedBundles[bundleIdx] = [uvFormat, uvOffset];
          var newBundle = newMeshStruct.vertexBundles[bundleIdx]; // put the new UVs in the same bundle with original UVs

          newBundle.attributes.push(batch_id);
          newBundle.attributes.push(batch_uv);
          newBundle.view.offset = 0;
          newBundle.view.length += newBundle.view.count * batch_extras_size;
          newBundle.view.stride += batch_extras_size;
        }

        var totalLength = 0;

        for (var b = 0; b < newMeshStruct.vertexBundles.length; b++) {
          totalLength += newMeshStruct.vertexBundles[b].view.length;
        }

        for (var _p = 0; _p < newMeshStruct.primitives.length; _p++) {
          var pm = newMeshStruct.primitives[_p];

          if (pm.indexView) {
            pm.indexView.offset = totalLength;
            totalLength += pm.indexView.length;
          }
        } // now, we ride!


        var newMeshData = new Uint8Array(totalLength);
        var oldMeshData = mesh.data;
        var newDataView = new DataView(newMeshData.buffer);
        var oldDataView = new DataView(oldMeshData.buffer);
        var isLittleEndian = _index2.sys.isLittleEndian;

        for (var _b in modifiedBundles) {
          var _newBundle = newMeshStruct.vertexBundles[_b];
          var oldBundle = mesh.struct.vertexBundles[_b];

          var _modifiedBundles$_b = _slicedToArray(modifiedBundles[_b], 2),
              _uvFormat = _modifiedBundles$_b[0],
              _uvOffset = _modifiedBundles$_b[1];

          var uvs = (0, _buffer.readBuffer)(oldDataView, _uvFormat, _uvOffset, oldBundle.view.length, oldBundle.view.stride);
          var oldView = oldBundle.view;
          var newView = _newBundle.view;
          var oldStride = oldView.stride;
          var newStride = newView.stride;
          var oldOffset = oldView.offset;
          var newOffset = newView.offset;

          for (var j = 0; j < newView.count; j++) {
            var srcVertex = oldMeshData.subarray(oldOffset, oldOffset + oldStride);
            newMeshData.set(srcVertex, newOffset); // insert batch ID

            newDataView.setFloat32(newOffset + oldStride, unitIdx); // insert batch UV

            newDataView.setFloat32(newOffset + oldStride + 4, uvs[j * 2], isLittleEndian);
            newDataView.setFloat32(newOffset + oldStride + 8, uvs[j * 2 + 1], isLittleEndian);
            newOffset += newStride;
            oldOffset += oldStride;
          }
        }

        for (var k = 0; k < newMeshStruct.primitives.length; k++) {
          var oldPrimitive = mesh.struct.primitives[k];
          var newPrimitive = newMeshStruct.primitives[k];

          if (oldPrimitive.indexView && newPrimitive.indexView) {
            var _oldStride = oldPrimitive.indexView.stride;
            var _newStride = newPrimitive.indexView.stride;
            var _oldOffset = oldPrimitive.indexView.offset;
            var _newOffset = newPrimitive.indexView.offset;

            for (var _j3 = 0; _j3 < newPrimitive.indexView.count; _j3++) {
              var srcIndices = oldMeshData.subarray(_oldOffset, _oldOffset + _oldStride);
              newMeshData.set(srcIndices, _newOffset);
              _newOffset += _newStride;
              _oldOffset += _oldStride;
            }
          }
        }

        var newMesh = new _mesh.Mesh();
        newMesh.reset({
          struct: newMeshStruct,
          data: newMeshData
        });
        return newMesh;
      }
    }, {
      key: "mesh",
      get: function get() {
        return _get(_getPrototypeOf(BatchedSkinningModelComponent.prototype), "mesh", this);
      },
      set: function set(val) {
        _set(_getPrototypeOf(BatchedSkinningModelComponent.prototype), "mesh", val, this, true);
      }
    }, {
      key: "skeleton",
      get: function get() {
        return _get(_getPrototypeOf(BatchedSkinningModelComponent.prototype), "skeleton", this);
      },
      set: function set(val) {
        _set(_getPrototypeOf(BatchedSkinningModelComponent.prototype), "skeleton", val, this, true);
      }
    }]);

    return BatchedSkinningModelComponent;
  }(_skinningModelComponent.SkinningModelComponent), _temp2), (_descriptor7 = _applyDecoratedDescriptor(_class5.prototype, "atlasSize", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 1024;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class5.prototype, "batchableTextureNames", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return [];
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class5.prototype, "units", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return [];
    }
  }), _applyDecoratedDescriptor(_class5.prototype, "mesh", [_dec13], Object.getOwnPropertyDescriptor(_class5.prototype, "mesh"), _class5.prototype), _applyDecoratedDescriptor(_class5.prototype, "skeleton", [_dec14], Object.getOwnPropertyDescriptor(_class5.prototype, "skeleton"), _class5.prototype)), _class5)) || _class4) || _class4) || _class4) || _class4) || _class4);
  _exports.BatchedSkinningModelComponent = BatchedSkinningModelComponent;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,