(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "@cocos/cannon", "../../../core/math/index.js", "../../framework/util.js", "../cannon-util.js", "../../framework/physics-system.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("@cocos/cannon"), require("../../../core/math/index.js"), require("../../framework/util.js"), require("../cannon-util.js"), require("../../framework/physics-system.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.cannon, global.index, global.util, global.cannonUtil, global.physicsSystem);
    global.cannonShape = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _cannon, _index, _util, _cannonUtil, _physicsSystem) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.CannonShape = void 0;
  _cannon = _interopRequireDefault(_cannon);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var TriggerEventObject = {
    type: 'onTriggerEnter',
    selfCollider: null,
    otherCollider: null
  };

  var CannonShape = /*#__PURE__*/function () {
    function CannonShape() {
      _classCallCheck(this, CannonShape);

      this._offset = new _cannon.default.Vec3();
      this._orient = new _cannon.default.Quaternion();
      this._index = -1;
      this.onTriggerListener = this.onTrigger.bind(this);
      this._isBinding = false;
    }

    _createClass(CannonShape, [{
      key: "setMaterial",
      value: function setMaterial(mat) {
        if (mat == null) {
          this._shape.material = null;
        } else {
          if (CannonShape.idToMaterial[mat._uuid] == null) {
            CannonShape.idToMaterial[mat._uuid] = new _cannon.default.Material(mat._uuid);
          }

          this._shape.material = CannonShape.idToMaterial[mat._uuid];
          this._shape.material.friction = mat.friction;
          this._shape.material.restitution = mat.restitution;
        }
      }
    }, {
      key: "setAsTrigger",
      value: function setAsTrigger(v) {
        this._shape.collisionResponse = !v;

        if (this._index >= 0) {
          this._body.updateHasTrigger();
        }
      }
    }, {
      key: "setCenter",
      value: function setCenter(v) {
        this._setCenter(v);

        if (this._index >= 0) {
          (0, _cannonUtil.commitShapeUpdates)(this._body);
        }
      }
    }, {
      key: "initialize",

      /** LIFECYCLE */
      value: function initialize(comp) {
        this._collider = comp;
        this._isBinding = true;
        this.onComponentSet();
        (0, _util.setWrap)(this._shape, this);

        this._shape.addEventListener('cc-trigger', this.onTriggerListener);

        this._sharedBody = _physicsSystem.PhysicsSystem.instance.physicsWorld.getSharedBody(this._collider.node);
        this._sharedBody.reference = true;
      } // virtual

    }, {
      key: "onComponentSet",
      value: function onComponentSet() {}
    }, {
      key: "onLoad",
      value: function onLoad() {
        this.setMaterial(this._collider.sharedMaterial);
        this.setCenter(this._collider.center);
        this.setAsTrigger(this._collider.isTrigger);
      }
    }, {
      key: "onEnable",
      value: function onEnable() {
        this._sharedBody.addShape(this);

        this._sharedBody.enabled = true;
      }
    }, {
      key: "onDisable",
      value: function onDisable() {
        this._sharedBody.removeShape(this);

        this._sharedBody.enabled = false;
      }
    }, {
      key: "onDestroy",
      value: function onDestroy() {
        this._sharedBody.reference = false;

        this._shape.removeEventListener('cc-trigger', this.onTriggerListener);

        delete _cannon.default.World['idToShapeMap'][this._shape.id];
        this._sharedBody = null;
        (0, _util.setWrap)(this._shape, null);
        this._offset = null;
        this._orient = null;
        this._shape = null;
        this._collider = null;
        this.onTriggerListener = null;
      }
      /** INTERFACE */

      /** group */

    }, {
      key: "getGroup",
      value: function getGroup() {
        return this._body.collisionFilterGroup;
      }
    }, {
      key: "setGroup",
      value: function setGroup(v) {
        this._body.collisionFilterGroup = v;
        if (!this._body.isAwake()) this._body.wakeUp();
      }
    }, {
      key: "addGroup",
      value: function addGroup(v) {
        this._body.collisionFilterGroup |= v;
        if (!this._body.isAwake()) this._body.wakeUp();
      }
    }, {
      key: "removeGroup",
      value: function removeGroup(v) {
        this._body.collisionFilterGroup &= ~v;
        if (!this._body.isAwake()) this._body.wakeUp();
      }
      /** mask */

    }, {
      key: "getMask",
      value: function getMask() {
        return this._body.collisionFilterMask;
      }
    }, {
      key: "setMask",
      value: function setMask(v) {
        this._body.collisionFilterMask = v;
        if (!this._body.isAwake()) this._body.wakeUp();
      }
    }, {
      key: "addMask",
      value: function addMask(v) {
        this._body.collisionFilterMask |= v;
        if (!this._body.isAwake()) this._body.wakeUp();
      }
    }, {
      key: "removeMask",
      value: function removeMask(v) {
        this._body.collisionFilterMask &= ~v;
        if (!this._body.isAwake()) this._body.wakeUp();
      }
      /**
       * change scale will recalculate center & size \
       * size handle by child class
       * @param scale 
       */

    }, {
      key: "setScale",
      value: function setScale(scale) {
        this._setCenter(this._collider.center);
      }
    }, {
      key: "setIndex",
      value: function setIndex(index) {
        this._index = index;
      }
    }, {
      key: "setOffsetAndOrient",
      value: function setOffsetAndOrient(offset, orient) {
        _index.Vec3.copy(offset, this._offset);

        _index.Quat.copy(orient, this._orient);

        this._offset = offset;
        this._orient = orient;
      }
    }, {
      key: "_setCenter",
      value: function _setCenter(v) {
        var lpos = this._offset;

        _index.Vec3.copy(lpos, v);

        _index.Vec3.multiply(lpos, lpos, this._collider.node.worldScale);
      }
    }, {
      key: "onTrigger",
      value: function onTrigger(event) {
        TriggerEventObject.type = event.event;
        var self = (0, _util.getWrap)(event.selfShape);
        var other = (0, _util.getWrap)(event.otherShape);

        if (self) {
          TriggerEventObject.selfCollider = self.collider;
          TriggerEventObject.otherCollider = other ? other.collider : null;

          this._collider.emit(TriggerEventObject.type, TriggerEventObject);
        }
      }
    }, {
      key: "impl",
      get: function get() {
        return this._shape;
      }
    }, {
      key: "collider",
      get: function get() {
        return this._collider;
      }
    }, {
      key: "attachedRigidBody",
      get: function get() {
        if (this._sharedBody.wrappedBody) {
          return this._sharedBody.wrappedBody.rigidBody;
        }

        return null;
      }
    }, {
      key: "sharedBody",
      get: function get() {
        return this._sharedBody;
      }
    }, {
      key: "_body",
      get: function get() {
        return this._sharedBody.body;
      }
    }]);

    return CannonShape;
  }();

  _exports.CannonShape = CannonShape;
  CannonShape.idToMaterial = {};
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,