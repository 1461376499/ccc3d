(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../data/class.js", "../value-types/value-type.js", "./utils.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../data/class.js"), require("../value-types/value-type.js"), require("./utils.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global._class, global.valueType, global.utils);
    global.vec3 = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _class, _valueType, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.v3 = v3;
  _exports.Vec3 = void 0;
  _class = _interopRequireDefault(_class);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  /**
   * 三维向量。
   */
  var Vec3 = /*#__PURE__*/function (_ValueType) {
    _inherits(Vec3, _ValueType);

    _createClass(Vec3, null, [{
      key: "zero",
      // we use -z for view-dir

      /**
       * @zh 将目标赋值为零向量
       */
      value: function zero(out) {
        out.x = 0;
        out.y = 0;
        out.z = 0;
        return out;
      }
      /**
       * @zh 获得指定向量的拷贝
       */

    }, {
      key: "clone",
      value: function clone(a) {
        return new Vec3(a.x, a.y, a.z);
      }
      /**
       * @zh 复制目标向量
       */

    }, {
      key: "copy",
      value: function copy(out, a) {
        out.x = a.x;
        out.y = a.y;
        out.z = a.z;
        return out;
      }
      /**
       * @zh 设置向量值
       */

    }, {
      key: "set",
      value: function set(out, x, y, z) {
        out.x = x;
        out.y = y;
        out.z = z;
        return out;
      }
      /**
       * @zh 逐元素向量加法
       */

    }, {
      key: "add",
      value: function add(out, a, b) {
        out.x = a.x + b.x;
        out.y = a.y + b.y;
        out.z = a.z + b.z;
        return out;
      }
      /**
       * @zh 逐元素向量减法
       */

    }, {
      key: "subtract",
      value: function subtract(out, a, b) {
        out.x = a.x - b.x;
        out.y = a.y - b.y;
        out.z = a.z - b.z;
        return out;
      }
      /**
       * @zh 逐元素向量乘法 (分量积)
       */

    }, {
      key: "multiply",
      value: function multiply(out, a, b) {
        out.x = a.x * b.x;
        out.y = a.y * b.y;
        out.z = a.z * b.z;
        return out;
      }
      /**
       * @zh 逐元素向量除法
       */

    }, {
      key: "divide",
      value: function divide(out, a, b) {
        out.x = a.x / b.x;
        out.y = a.y / b.y;
        out.z = a.z / b.z;
        return out;
      }
      /**
       * @zh 逐元素向量向上取整
       */

    }, {
      key: "ceil",
      value: function ceil(out, a) {
        out.x = Math.ceil(a.x);
        out.y = Math.ceil(a.y);
        out.z = Math.ceil(a.z);
        return out;
      }
      /**
       * @zh 逐元素向量向下取整
       */

    }, {
      key: "floor",
      value: function floor(out, a) {
        out.x = Math.floor(a.x);
        out.y = Math.floor(a.y);
        out.z = Math.floor(a.z);
        return out;
      }
      /**
       * @zh 逐元素向量最小值
       */

    }, {
      key: "min",
      value: function min(out, a, b) {
        out.x = Math.min(a.x, b.x);
        out.y = Math.min(a.y, b.y);
        out.z = Math.min(a.z, b.z);
        return out;
      }
      /**
       * @zh 逐元素向量最大值
       */

    }, {
      key: "max",
      value: function max(out, a, b) {
        out.x = Math.max(a.x, b.x);
        out.y = Math.max(a.y, b.y);
        out.z = Math.max(a.z, b.z);
        return out;
      }
      /**
       * @zh 逐元素向量四舍五入取整
       */

    }, {
      key: "round",
      value: function round(out, a) {
        out.x = Math.round(a.x);
        out.y = Math.round(a.y);
        out.z = Math.round(a.z);
        return out;
      }
      /**
       * @zh 向量标量乘法
       */

    }, {
      key: "multiplyScalar",
      value: function multiplyScalar(out, a, b) {
        out.x = a.x * b;
        out.y = a.y * b;
        out.z = a.z * b;
        return out;
      }
      /**
       * @zh 逐元素向量乘加: A + B * scale
       */

    }, {
      key: "scaleAndAdd",
      value: function scaleAndAdd(out, a, b, scale) {
        out.x = a.x + b.x * scale;
        out.y = a.y + b.y * scale;
        out.z = a.z + b.z * scale;
        return out;
      }
      /**
       * @zh 求两向量的欧氏距离
       */

    }, {
      key: "distance",
      value: function distance(a, b) {
        var x = b.x - a.x;
        var y = b.y - a.y;
        var z = b.z - a.z;
        return Math.sqrt(x * x + y * y + z * z);
      }
      /**
       * @zh 求两向量的欧氏距离平方
       */

    }, {
      key: "squaredDistance",
      value: function squaredDistance(a, b) {
        var x = b.x - a.x;
        var y = b.y - a.y;
        var z = b.z - a.z;
        return x * x + y * y + z * z;
      }
      /**
       * @zh 求向量长度
       */

    }, {
      key: "len",
      value: function len(a) {
        var x = a.x;
        var y = a.y;
        var z = a.z;
        return Math.sqrt(x * x + y * y + z * z);
      }
      /**
       * @zh 求向量长度平方
       */

    }, {
      key: "lengthSqr",
      value: function lengthSqr(a) {
        var x = a.x;
        var y = a.y;
        var z = a.z;
        return x * x + y * y + z * z;
      }
      /**
       * @zh 逐元素向量取负
       */

    }, {
      key: "negate",
      value: function negate(out, a) {
        out.x = -a.x;
        out.y = -a.y;
        out.z = -a.z;
        return out;
      }
      /**
       * @zh 逐元素向量取倒数，接近 0 时返回 Infinity
       */

    }, {
      key: "invert",
      value: function invert(out, a) {
        out.x = 1.0 / a.x;
        out.y = 1.0 / a.y;
        out.z = 1.0 / a.z;
        return out;
      }
      /**
       * @zh 逐元素向量取倒数，接近 0 时返回 0
       */

    }, {
      key: "invertSafe",
      value: function invertSafe(out, a) {
        var x = a.x;
        var y = a.y;
        var z = a.z;

        if (Math.abs(x) < _utils.EPSILON) {
          out.x = 0;
        } else {
          out.x = 1.0 / x;
        }

        if (Math.abs(y) < _utils.EPSILON) {
          out.y = 0;
        } else {
          out.y = 1.0 / y;
        }

        if (Math.abs(z) < _utils.EPSILON) {
          out.z = 0;
        } else {
          out.z = 1.0 / z;
        }

        return out;
      }
      /**
       * @zh 归一化向量
       */

    }, {
      key: "normalize",
      value: function normalize(out, a) {
        var x = a.x;
        var y = a.y;
        var z = a.z;
        var len = x * x + y * y + z * z;

        if (len > 0) {
          len = 1 / Math.sqrt(len);
          out.x = x * len;
          out.y = y * len;
          out.z = z * len;
        }

        return out;
      }
      /**
       * @zh 向量点积（数量积）
       */

    }, {
      key: "dot",
      value: function dot(a, b) {
        return a.x * b.x + a.y * b.y + a.z * b.z;
      }
      /**
       * @zh 向量叉积（向量积）
       */

    }, {
      key: "cross",
      value: function cross(out, a, b) {
        var ax = a.x,
            ay = a.y,
            az = a.z;
        var bx = b.x,
            by = b.y,
            bz = b.z;
        out.x = ay * bz - az * by;
        out.y = az * bx - ax * bz;
        out.z = ax * by - ay * bx;
        return out;
      }
      /**
       * @zh 逐元素向量线性插值： A + t * (B - A)
       */

    }, {
      key: "lerp",
      value: function lerp(out, a, b, t) {
        out.x = a.x + t * (b.x - a.x);
        out.y = a.y + t * (b.y - a.y);
        out.z = a.z + t * (b.z - a.z);
        return out;
      }
      /**
       * @zh 生成一个在单位球体上均匀分布的随机向量
       * @param scale 生成的向量长度
       */

    }, {
      key: "random",
      value: function random(out, scale) {
        scale = scale || 1.0;
        var phi = (0, _utils.random)() * 2.0 * Math.PI;
        var cosTheta = (0, _utils.random)() * 2 - 1;
        var sinTheta = Math.sqrt(1 - cosTheta * cosTheta);
        out.x = sinTheta * Math.cos(phi) * scale;
        out.y = sinTheta * Math.sin(phi) * scale;
        out.z = cosTheta * scale;
        return out;
      }
      /**
       * @zh 向量与四维矩阵乘法，默认向量第四位为 1。
       */

    }, {
      key: "transformMat4",
      value: function transformMat4(out, a, m) {
        var x = a.x;
        var y = a.y;
        var z = a.z;
        var rhw = m.m03 * x + m.m07 * y + m.m11 * z + m.m15;
        rhw = rhw ? Math.abs(1 / rhw) : 1;
        out.x = (m.m00 * x + m.m04 * y + m.m08 * z + m.m12) * rhw;
        out.y = (m.m01 * x + m.m05 * y + m.m09 * z + m.m13) * rhw;
        out.z = (m.m02 * x + m.m06 * y + m.m10 * z + m.m14) * rhw;
        return out;
      }
      /**
       * @zh 向量与四维矩阵乘法，默认向量第四位为 0。
       */

    }, {
      key: "transformMat4Normal",
      value: function transformMat4Normal(out, a, m) {
        var x = a.x;
        var y = a.y;
        var z = a.z;
        var rhw = m.m03 * x + m.m07 * y + m.m11 * z;
        rhw = rhw ? Math.abs(1 / rhw) : 1;
        out.x = (m.m00 * x + m.m04 * y + m.m08 * z) * rhw;
        out.y = (m.m01 * x + m.m05 * y + m.m09 * z) * rhw;
        out.z = (m.m02 * x + m.m06 * y + m.m10 * z) * rhw;
        return out;
      }
      /**
       * @zh 向量与三维矩阵乘法
       */

    }, {
      key: "transformMat3",
      value: function transformMat3(out, a, m) {
        var x = a.x;
        var y = a.y;
        var z = a.z;
        out.x = x * m.m00 + y * m.m03 + z * m.m06;
        out.y = x * m.m01 + y * m.m04 + z * m.m07;
        out.z = x * m.m02 + y * m.m05 + z * m.m08;
        return out;
      }
      /**
       * @zh 向量仿射变换
       */

    }, {
      key: "transformAffine",
      value: function transformAffine(out, v, m) {
        var x = v.x;
        var y = v.y;
        var z = v.z;
        out.x = m.m00 * x + m.m04 * y + m.m08 * z + m.m12;
        out.y = m.m01 * x + m.m05 * y + m.m09 * z + m.m13;
        out.x = m.m02 * x + m.m06 * y + m.m10 * z + m.m14;
        return out;
      }
      /**
       * @zh 向量四元数乘法
       */

    }, {
      key: "transformQuat",
      value: function transformQuat(out, a, q) {
        // benchmarks: http://jsperf.com/quaternion-transform-Vec3-implementations
        // calculate quat * vec
        var ix = q.w * a.x + q.y * a.z - q.z * a.y;
        var iy = q.w * a.y + q.z * a.x - q.x * a.z;
        var iz = q.w * a.z + q.x * a.y - q.y * a.x;
        var iw = -q.x * a.x - q.y * a.y - q.z * a.z; // calculate result * inverse quat

        out.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;
        out.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;
        out.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;
        return out;
      }
      /**
       * @zh 以缩放 -> 旋转 -> 平移顺序变换向量
       */

    }, {
      key: "transformRTS",
      value: function transformRTS(out, a, r, t, s) {
        var x = a.x * s.x;
        var y = a.y * s.y;
        var z = a.z * s.z;
        var ix = r.w * x + r.y * z - r.z * y;
        var iy = r.w * y + r.z * x - r.x * z;
        var iz = r.w * z + r.x * y - r.y * x;
        var iw = -r.x * x - r.y * y - r.z * z;
        out.x = ix * r.w + iw * -r.x + iy * -r.z - iz * -r.y + t.x;
        out.y = iy * r.w + iw * -r.y + iz * -r.x - ix * -r.z + t.y;
        out.z = iz * r.w + iw * -r.z + ix * -r.y - iy * -r.x + t.z;
        return out;
      }
      /**
       * @zh 以平移 -> 旋转 -> 缩放顺序逆变换向量
       */

    }, {
      key: "transformInverseRTS",
      value: function transformInverseRTS(out, a, r, t, s) {
        var x = a.x - t.x;
        var y = a.y - t.y;
        var z = a.z - t.z;
        var ix = r.w * x - r.y * z + r.z * y;
        var iy = r.w * y - r.z * x + r.x * z;
        var iz = r.w * z - r.x * y + r.y * x;
        var iw = r.x * x + r.y * y + r.z * z;
        out.x = (ix * r.w + iw * r.x + iy * r.z - iz * r.y) / s.x;
        out.y = (iy * r.w + iw * r.y + iz * r.x - ix * r.z) / s.y;
        out.z = (iz * r.w + iw * r.z + ix * r.y - iy * r.x) / s.z;
        return out;
      }
      /**
       * @zh 绕 X 轴旋转向量指定弧度
       * @param v 待旋转向量
       * @param o 旋转中心
       * @param a 旋转弧度
       */

    }, {
      key: "rotateX",
      value: function rotateX(out, v, o, a) {
        // Translate point to the origin
        var x = v.x - o.x;
        var y = v.y - o.y;
        var z = v.z - o.z; // perform rotation

        var cos = Math.cos(a);
        var sin = Math.sin(a);
        var rx = x;
        var ry = y * cos - z * sin;
        var rz = y * sin + z * cos; // translate to correct position

        out.x = rx + o.x;
        out.y = ry + o.y;
        out.z = rz + o.z;
        return out;
      }
      /**
       * @zh 绕 Y 轴旋转向量指定弧度
       * @param v 待旋转向量
       * @param o 旋转中心
       * @param a 旋转弧度
       */

    }, {
      key: "rotateY",
      value: function rotateY(out, v, o, a) {
        // Translate point to the origin
        var x = v.x - o.x;
        var y = v.y - o.y;
        var z = v.z - o.z; // perform rotation

        var cos = Math.cos(a);
        var sin = Math.sin(a);
        var rx = z * sin + x * cos;
        var ry = y;
        var rz = z * cos - x * sin; // translate to correct position

        out.x = rx + o.x;
        out.y = ry + o.y;
        out.z = rz + o.z;
        return out;
      }
      /**
       * @zh 绕 Z 轴旋转向量指定弧度
       * @param v 待旋转向量
       * @param o 旋转中心
       * @param a 旋转弧度
       */

    }, {
      key: "rotateZ",
      value: function rotateZ(out, v, o, a) {
        // Translate point to the origin
        var x = v.x - o.x;
        var y = v.y - o.y;
        var z = v.z - o.z; // perform rotation

        var cos = Math.cos(a);
        var sin = Math.sin(a);
        var rx = x * cos - y * sin;
        var ry = x * sin + y * cos;
        var rz = z; // translate to correct position

        out.x = rx + o.x;
        out.y = ry + o.y;
        out.z = rz + o.z;
        return out;
      }
      /**
       * @zh 向量转数组
       * @param ofs 数组起始偏移量
       */

    }, {
      key: "toArray",
      value: function toArray(out, v) {
        var ofs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        out[ofs + 0] = v.x;
        out[ofs + 1] = v.y;
        out[ofs + 2] = v.z;
        return out;
      }
      /**
       * @zh 数组转向量
       * @param ofs 数组起始偏移量
       */

    }, {
      key: "fromArray",
      value: function fromArray(out, arr) {
        var ofs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        out.x = arr[ofs + 0];
        out.y = arr[ofs + 1];
        out.z = arr[ofs + 2];
        return out;
      }
      /**
       * @zh 向量等价判断
       */

    }, {
      key: "strictEquals",
      value: function strictEquals(a, b) {
        return a.x === b.x && a.y === b.y && a.z === b.z;
      }
      /**
       * @zh 排除浮点数误差的向量近似等价判断
       */

    }, {
      key: "equals",
      value: function equals(a, b) {
        var epsilon = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _utils.EPSILON;
        var a0 = a.x,
            a1 = a.y,
            a2 = a.z;
        var b0 = b.x,
            b1 = b.y,
            b2 = b.z;
        return Math.abs(a0 - b0) <= epsilon * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= epsilon * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= epsilon * Math.max(1.0, Math.abs(a2), Math.abs(b2));
      }
      /**
       * @zh 求两向量夹角弧度
       */

    }, {
      key: "angle",
      value: function angle(a, b) {
        Vec3.normalize(v3_1, a);
        Vec3.normalize(v3_2, b);
        var cosine = Vec3.dot(v3_1, v3_2);

        if (cosine > 1.0) {
          return 0;
        }

        if (cosine < -1.0) {
          return Math.PI;
        }

        return Math.acos(cosine);
      }
      /**
       * @zh 计算向量在指定平面上的投影
       * @param a 待投影向量
       * @param n 指定平面的法线
       */

    }, {
      key: "projectOnPlane",
      value: function projectOnPlane(out, a, n) {
        return Vec3.subtract(out, a, Vec3.project(out, a, n));
      }
      /**
       * @zh 计算向量在指定向量上的投影
       * @param a 待投影向量
       * @param n 目标向量
       */

    }, {
      key: "project",
      value: function project(out, a, b) {
        var sqrLen = Vec3.lengthSqr(b);

        if (sqrLen < 0.000001) {
          return Vec3.set(out, 0, 0, 0);
        } else {
          return Vec3.multiplyScalar(out, b, Vec3.dot(a, b) / sqrLen);
        }
      }
      /**
       * x 分量。
       */

    }]);

    function Vec3(x, y, z) {
      var _this;

      _classCallCheck(this, Vec3);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Vec3).call(this));

      if (x && _typeof(x) === 'object') {
        _this.x = x.x;
        _this.y = x.y;
        _this.z = x.z;
      } else {
        _this.x = x || 0;
        _this.y = y || 0;
        _this.z = z || 0;
      }

      return _this;
    }
    /**
     * @zh 克隆当前向量。
     */


    _createClass(Vec3, [{
      key: "clone",
      value: function clone() {
        return new Vec3(this.x, this.y, this.z);
      }
      /**
       * @zh 设置当前向量使其与指定向量相等。
       * @param other 相比较的向量。
       * @returns `this`
       */

    }, {
      key: "set",
      value: function set(x, y, z) {
        if (x && _typeof(x) === 'object') {
          this.x = x.x;
          this.y = x.y;
          this.z = x.z;
        } else {
          this.x = x || 0;
          this.y = y || 0;
          this.z = z || 0;
        }

        return this;
      }
      /**
       * @zh 判断当前向量是否在误差范围内与指定向量相等。
       * @param other 相比较的向量。
       * @param epsilon 允许的误差，应为非负数。
       * @returns 当两向量的各分量都在指定的误差范围内分别相等时，返回 `true`；否则返回 `false`。
       */

    }, {
      key: "equals",
      value: function equals(other) {
        var epsilon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _utils.EPSILON;
        return Math.abs(this.x - other.x) <= epsilon * Math.max(1.0, Math.abs(this.x), Math.abs(other.x)) && Math.abs(this.y - other.y) <= epsilon * Math.max(1.0, Math.abs(this.y), Math.abs(other.y)) && Math.abs(this.z - other.z) <= epsilon * Math.max(1.0, Math.abs(this.z), Math.abs(other.z));
      }
      /**
       * @zh 判断当前向量是否在误差范围内与指定分量的向量相等。
       * @param x 相比较的向量的 x 分量。
       * @param y 相比较的向量的 y 分量。
       * @param z 相比较的向量的 z 分量。
       * @param epsilon 允许的误差，应为非负数。
       * @returns 当两向量的各分量都在指定的误差范围内分别相等时，返回 `true`；否则返回 `false`。
       */

    }, {
      key: "equals3f",
      value: function equals3f(x, y, z) {
        var epsilon = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _utils.EPSILON;
        return Math.abs(this.x - x) <= epsilon * Math.max(1.0, Math.abs(this.x), Math.abs(x)) && Math.abs(this.y - y) <= epsilon * Math.max(1.0, Math.abs(this.y), Math.abs(y)) && Math.abs(this.z - z) <= epsilon * Math.max(1.0, Math.abs(this.z), Math.abs(z));
      }
      /**
       * @zh 判断当前向量是否与指定向量相等。
       * @param other 相比较的向量。
       * @returns 两向量的各分量都分别相等时返回 `true`；否则返回 `false`。
       */

    }, {
      key: "strictEquals",
      value: function strictEquals(other) {
        return this.x === other.x && this.y === other.y && this.z === other.z;
      }
      /**
       * @zh 判断当前向量是否与指定分量的向量相等。
       * @param x 指定向量的 x 分量。
       * @param y 指定向量的 y 分量。
       * @param z 指定向量的 z 分量。
       * @returns 两向量的各分量都分别相等时返回 `true`；否则返回 `false`。
       */

    }, {
      key: "strictEquals3f",
      value: function strictEquals3f(x, y, z) {
        return this.x === x && this.y === y && this.z === z;
      }
      /**
       * @zh 返回当前向量的字符串表示。
       * @returns 当前向量的字符串表示。
       */

    }, {
      key: "toString",
      value: function toString() {
        return "(".concat(this.x.toFixed(2), ", ").concat(this.y.toFixed(2), ", ").concat(this.z.toFixed(2), ")");
      }
      /**
       * @zh 根据指定的插值比率，从当前向量到目标向量之间做插值。
       * @param to 目标向量。
       * @param ratio 插值比率，范围为 [0,1]。
       */

    }, {
      key: "lerp",
      value: function lerp(to, ratio) {
        this.x = this.x + ratio * (to.x - this.x);
        this.y = this.y + ratio * (to.y - this.y);
        this.z = this.z + ratio * (to.z - this.z);
        return this;
      }
      /**
       * @zh 向量加法。将当前向量与指定向量的相加
       * @param other 指定的向量。
       */

    }, {
      key: "add",
      value: function add(other) {
        this.x = this.x + other.x;
        this.y = this.y + other.y;
        this.z = this.z + other.z;
        return this;
      }
      /**
       * @zh 向量加法。将当前向量与指定分量的向量相加
       * @param x 指定的向量的 x 分量。
       * @param y 指定的向量的 y 分量。
       * @param z 指定的向量的 z 分量。
       */

    }, {
      key: "add3f",
      value: function add3f(x, y, z) {
        this.x = this.x + x;
        this.y = this.y + y;
        this.z = this.z + z;
        return this;
      }
      /**
       * @zh 向量减法。将当前向量减去指定向量的结果。
       * @param other 减数向量。
       */

    }, {
      key: "subtract",
      value: function subtract(other) {
        this.x = this.x - other.x;
        this.y = this.y - other.y;
        this.z = this.z - other.z;
        return this;
      }
      /**
       * @zh 向量减法。将当前向量减去指定分量的向量
       * @param x 指定的向量的 x 分量。
       * @param y 指定的向量的 y 分量。
       * @param z 指定的向量的 z 分量。
       */

    }, {
      key: "subtract3f",
      value: function subtract3f(x, y, z) {
        this.x = this.x - x;
        this.y = this.y - y;
        this.z = this.z - z;
        return this;
      }
      /**
       * @zh 向量数乘。将当前向量数乘指定标量
       * @param scalar 标量乘数。
       */

    }, {
      key: "multiplyScalar",
      value: function multiplyScalar(scalar) {
        if (_typeof(scalar) === 'object') {
          console.warn('should use Vec3.multiply for vector * vector operation');
        }

        this.x = this.x * scalar;
        this.y = this.y * scalar;
        this.z = this.z * scalar;
        return this;
      }
      /**
       * @zh 向量乘法。将当前向量乘以与指定向量的结果赋值给当前向量。
       * @param other 指定的向量。
       */

    }, {
      key: "multiply",
      value: function multiply(other) {
        if (_typeof(other) !== 'object') {
          console.warn('should use Vec3.scale for vector * scalar operation');
        }

        this.x = this.x * other.x;
        this.y = this.y * other.y;
        this.z = this.z * other.z;
        return this;
      }
      /**
       * @zh 向量乘法。将当前向量与指定分量的向量相乘的结果赋值给当前向量。
       * @param x 指定的向量的 x 分量。
       * @param y 指定的向量的 y 分量。
       * @param z 指定的向量的 z 分量。
       */

    }, {
      key: "multiply3f",
      value: function multiply3f(x, y, z) {
        this.x = this.x * x;
        this.y = this.y * y;
        this.z = this.z * z;
        return this;
      }
      /**
       * @zh 向量逐元素相除。将当前向量与指定分量的向量相除的结果赋值给当前向量。
       * @param other 指定的向量
       */

    }, {
      key: "divide",
      value: function divide(other) {
        this.x = this.x / other.x;
        this.y = this.y / other.y;
        this.z = this.z / other.z;
        return this;
      }
      /**
       * @zh 向量逐元素相除。将当前向量与指定分量的向量相除的结果赋值给当前向量。
       * @param x 指定的向量的 x 分量。
       * @param y 指定的向量的 y 分量。
       * @param z 指定的向量的 z 分量。
       */

    }, {
      key: "divide3f",
      value: function divide3f(x, y, z) {
        this.x = this.x / x;
        this.y = this.y / y;
        this.z = this.z / z;
        return this;
      }
      /**
       * @zh 将当前向量的各个分量取反
       */

    }, {
      key: "negative",
      value: function negative() {
        this.x = -this.x;
        this.y = -this.y;
        this.z = -this.z;
        return this;
      }
      /**
       * @zh 设置当前向量的值，使其各个分量都处于指定的范围内。
       * @param minInclusive 每个分量都代表了对应分量允许的最小值。
       * @param maxInclusive 每个分量都代表了对应分量允许的最大值。
       * @returns `this`
       */

    }, {
      key: "clampf",
      value: function clampf(minInclusive, maxInclusive) {
        this.x = (0, _utils.clamp)(this.x, minInclusive.x, maxInclusive.x);
        this.y = (0, _utils.clamp)(this.y, minInclusive.y, maxInclusive.y);
        this.z = (0, _utils.clamp)(this.z, minInclusive.z, maxInclusive.z);
        return this;
      }
      /**
       * @zh 向量点乘。
       * @param other 指定的向量。
       * @returns 当前向量与指定向量点乘的结果。
       */

    }, {
      key: "dot",
      value: function dot(other) {
        return this.x * other.x + this.y * other.y + this.z * other.z;
      }
      /**
       * @zh 向量叉乘。将当前向量左叉乘指定向量
       * @param other 指定的向量。
       */

    }, {
      key: "cross",
      value: function cross(other) {
        var ax = this.x,
            ay = this.y,
            az = this.z;
        var bx = other.x,
            by = other.y,
            bz = other.z;
        this.x = ay * bz - az * by;
        this.y = az * bx - ax * bz;
        this.z = ax * by - ay * bx;
        return this;
      }
      /**
       * @zh 计算向量的长度（模）。
       * @returns 向量的长度（模）。
       */

    }, {
      key: "length",
      value: function length() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
      }
      /**
       * @zh 计算向量长度（模）的平方。
       * @returns 向量长度（模）的平方。
       */

    }, {
      key: "lengthSqr",
      value: function lengthSqr() {
        return this.x * this.x + this.y * this.y + this.z * this.z;
      }
      /**
       * @zh 将当前向量归一化
       */

    }, {
      key: "normalize",
      value: function normalize() {
        var x = this.x;
        var y = this.y;
        var z = this.z;
        var len = x * x + y * y + z * z;

        if (len > 0) {
          len = 1 / Math.sqrt(len);
          this.x = x * len;
          this.y = y * len;
          this.z = z * len;
        }

        return this;
      }
      /**
       * @zh 将当前向量视为 w 分量为 1 的四维向量，应用四维矩阵变换到当前矩阵
       * @param matrix 变换矩阵。
       */

    }, {
      key: "transformMat4",
      value: function transformMat4(matrix) {
        var x = this.x;
        var y = this.y;
        var z = this.z;
        var rhw = matrix.m03 * x + matrix.m07 * y + matrix.m11 * z + matrix.m15;
        rhw = rhw ? 1 / rhw : 1;
        this.x = (matrix.m00 * x + matrix.m04 * y + matrix.m08 * z + matrix.m12) * rhw;
        this.y = (matrix.m01 * x + matrix.m05 * y + matrix.m09 * z + matrix.m13) * rhw;
        this.z = (matrix.m02 * x + matrix.m06 * y + matrix.m10 * z + matrix.m14) * rhw;
        return this;
      }
    }]);

    return Vec3;
  }(_valueType.ValueType);

  _exports.Vec3 = Vec3;
  Vec3.UNIT_X = Object.freeze(new Vec3(1, 0, 0));
  Vec3.UNIT_Y = Object.freeze(new Vec3(0, 1, 0));
  Vec3.UNIT_Z = Object.freeze(new Vec3(0, 0, 1));
  Vec3.RIGHT = Object.freeze(new Vec3(1, 0, 0));
  Vec3.UP = Object.freeze(new Vec3(0, 1, 0));
  Vec3.FORWARD = Object.freeze(new Vec3(0, 0, -1));
  Vec3.ZERO = Object.freeze(new Vec3(0, 0, 0));
  Vec3.ONE = Object.freeze(new Vec3(1, 1, 1));
  Vec3.NEG_ONE = Object.freeze(new Vec3(-1, -1, -1));
  var v3_1 = new Vec3();
  var v3_2 = new Vec3();

  _class.default.fastDefine('cc.Vec3', Vec3, {
    x: 0,
    y: 0,
    z: 0
  });

  cc.Vec3 = Vec3;

  function v3(x, y, z) {
    return new Vec3(x, y, z);
  }

  cc.v3 = v3;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,