(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "@cocos/ammo", "../../core/math/index.js", "./ammo-shared-body.js", "../utils/array-collision-matrix.js", "../utils/tuple-dictionary.js", "./ammo-const.js", "./ammo-util.js", "./ammo-instance.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("@cocos/ammo"), require("../../core/math/index.js"), require("./ammo-shared-body.js"), require("../utils/array-collision-matrix.js"), require("../utils/tuple-dictionary.js"), require("./ammo-const.js"), require("./ammo-util.js"), require("./ammo-instance.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.ammo, global.index, global.ammoSharedBody, global.arrayCollisionMatrix, global.tupleDictionary, global.ammoConst, global.ammoUtil, global.ammoInstance);
    global.ammoWorld = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _ammo, _index, _ammoSharedBody, _arrayCollisionMatrix, _tupleDictionary, _ammoConst, _ammoUtil, _ammoInstance) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AmmoWorld = void 0;
  _ammo = _interopRequireDefault(_ammo);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var contactsPool = [];
  var v3_0 = new _index.Vec3();
  var v3_1 = new _index.Vec3();

  var AmmoWorld = /*#__PURE__*/function () {
    _createClass(AmmoWorld, [{
      key: "setAllowSleep",
      value: function setAllowSleep(v) {}
    }, {
      key: "setDefaultMaterial",
      value: function setDefaultMaterial(v) {}
    }, {
      key: "setGravity",
      value: function setGravity(gravity) {
        (0, _ammoUtil.cocos2AmmoVec3)(this._btGravity, gravity);

        this._btWorld.setGravity(this._btGravity);
      }
    }, {
      key: "impl",
      get: function get() {
        return this._btWorld;
      }
    }]);

    function AmmoWorld(options) {
      _classCallCheck(this, AmmoWorld);

      this._btWorld = void 0;
      this._btBroadphase = void 0;
      this._btSolver = void 0;
      this._btDispatcher = void 0;
      this._btGravity = void 0;
      this.bodies = [];
      this.ghosts = [];
      this.triggerArrayMat = new _arrayCollisionMatrix.ArrayCollisionMatrix();
      this.collisionArrayMat = new _arrayCollisionMatrix.ArrayCollisionMatrix();
      this.contactsDic = new _tupleDictionary.TupleDictionary();
      this.oldContactsDic = new _tupleDictionary.TupleDictionary();
      this.closeHitCB = new _ammo.default.ClosestRayResultCallback(new _ammo.default.btVector3(), new _ammo.default.btVector3());
      this.allHitsCB = new _ammo.default.AllHitsRayResultCallback(new _ammo.default.btVector3(), new _ammo.default.btVector3());
      var collisionConfiguration = new _ammo.default.btDefaultCollisionConfiguration();
      this._btDispatcher = new _ammo.default.btCollisionDispatcher(collisionConfiguration);
      this._btBroadphase = new _ammo.default.btDbvtBroadphase();
      this._btSolver = new _ammo.default.btSequentialImpulseConstraintSolver();
      this._btWorld = new _ammo.default.btDiscreteDynamicsWorld(this._btDispatcher, this._btBroadphase, this._btSolver, collisionConfiguration);
      this._btGravity = new _ammo.default.btVector3(0, -10, 0);

      this._btWorld.setGravity(this._btGravity);
    }

    _createClass(AmmoWorld, [{
      key: "step",
      value: function step(deltaTime, timeSinceLastCalled) {
        var maxSubStep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        if (this.bodies.length == 0 && this.ghosts.length == 0) return;
        if (timeSinceLastCalled == undefined) timeSinceLastCalled = deltaTime;

        this._btWorld.stepSimulation(timeSinceLastCalled, maxSubStep, deltaTime);

        for (var i = 0; i < this.bodies.length; i++) {
          this.bodies[i].syncPhysicsToScene();
        }
      }
    }, {
      key: "syncSceneToPhysics",
      value: function syncSceneToPhysics() {
        for (var i = 0; i < this.ghosts.length; i++) {
          this.ghosts[i].syncSceneToGhost();
        }

        for (var _i = 0; _i < this.bodies.length; _i++) {
          this.bodies[_i].syncSceneToPhysics();
        }
      }
    }, {
      key: "raycast",
      value: function raycast(worldRay, options, pool, results) {
        var from = (0, _ammoUtil.cocos2AmmoVec3)(this.allHitsCB.m_rayFromWorld, worldRay.o);
        worldRay.computeHit(v3_0, options.maxDistance);
        var to = (0, _ammoUtil.cocos2AmmoVec3)(this.allHitsCB.m_rayToWorld, v3_0);
        this.allHitsCB.m_collisionFilterGroup = -1;
        this.allHitsCB.m_collisionFilterMask = options.mask;
        this.allHitsCB.m_closestHitFraction = 1;
        this.allHitsCB.m_shapePart = -1;
        this.allHitsCB.m_collisionObject = null;
        this.allHitsCB.m_shapeParts.clear();
        this.allHitsCB.m_hitFractions.clear();
        this.allHitsCB.m_collisionObjects.clear(); // TODO: typing

        var hp = this.allHitsCB.m_hitPointWorld;
        var hn = this.allHitsCB.m_hitNormalWorld;
        hp.clear();
        hn.clear();

        this._btWorld.rayTest(from, to, this.allHitsCB);

        if (this.allHitsCB.hasHit()) {
          for (var i = 0, n = this.allHitsCB.m_collisionObjects.size(); i < n; i++) {
            var shapeIndex = this.allHitsCB.m_shapeParts.at(i);
            var btObj = this.allHitsCB.m_collisionObjects.at(i);
            var index = btObj.getUserIndex();
            var shared = _ammoInstance.AmmoInstance.bodyAndGhosts['KEY' + index]; // if (shared.wrappedShapes.length > shapeIndex) {

            var shape = shared.wrappedShapes[shapeIndex];
            (0, _ammoUtil.ammo2CocosVec3)(v3_0, hp.at(i));
            (0, _ammoUtil.ammo2CocosVec3)(v3_1, hn.at(i));

            var distance = _index.Vec3.distance(worldRay.o, v3_0);

            var r = pool.add();

            r._assign(v3_0, distance, shape.collider, v3_1);

            results.push(r); // }
          }

          return true;
        }

        return false;
      }
      /**
       * Ray cast, and return information of the closest hit.
       * @return True if any body was hit.
       */

    }, {
      key: "raycastClosest",
      value: function raycastClosest(worldRay, options, result) {
        var from = (0, _ammoUtil.cocos2AmmoVec3)(this.closeHitCB.m_rayFromWorld, worldRay.o);
        worldRay.computeHit(v3_0, options.maxDistance);
        var to = (0, _ammoUtil.cocos2AmmoVec3)(this.closeHitCB.m_rayToWorld, v3_0);
        this.closeHitCB.m_collisionFilterGroup = -1;
        this.closeHitCB.m_collisionFilterMask = options.mask;
        this.closeHitCB.m_closestHitFraction = 1;
        this.closeHitCB.m_collisionObject = null;

        this._btWorld.rayTest(from, to, this.closeHitCB);

        if (this.closeHitCB.hasHit()) {
          var btObj = this.closeHitCB.m_collisionObject;
          var index = btObj.getUserIndex();
          var shared = _ammoInstance.AmmoInstance.bodyAndGhosts['KEY' + index];
          var shapeIndex = this.closeHitCB.m_shapePart;
          var shape = shared.wrappedShapes[shapeIndex];
          (0, _ammoUtil.ammo2CocosVec3)(v3_0, this.closeHitCB.m_hitPointWorld);
          (0, _ammoUtil.ammo2CocosVec3)(v3_1, this.closeHitCB.m_hitNormalWorld);

          var distance = _index.Vec3.distance(worldRay.o, v3_0);

          result._assign(v3_0, distance, shape.collider, v3_1);

          return true;
        }

        return false;
      }
    }, {
      key: "getSharedBody",
      value: function getSharedBody(node, wrappedBody) {
        return _ammoSharedBody.AmmoSharedBody.getSharedBody(node, this, wrappedBody);
      }
    }, {
      key: "addSharedBody",
      value: function addSharedBody(sharedBody) {
        var i = this.bodies.indexOf(sharedBody);

        if (i < 0) {
          this.bodies.push(sharedBody);

          this._btWorld.addRigidBody(sharedBody.body, sharedBody.collisionFilterGroup, sharedBody.collisionFilterMask);
        }
      }
    }, {
      key: "removeSharedBody",
      value: function removeSharedBody(sharedBody) {
        var i = this.bodies.indexOf(sharedBody);

        if (i >= 0) {
          this.bodies.splice(i, 1);

          this._btWorld.removeRigidBody(sharedBody.body);
        }
      }
    }, {
      key: "addGhostObject",
      value: function addGhostObject(sharedBody) {
        var i = this.ghosts.indexOf(sharedBody);

        if (i < 0) {
          this.ghosts.push(sharedBody);

          this._btWorld.addCollisionObject(sharedBody.ghost, sharedBody.collisionFilterGroup, sharedBody.collisionFilterMask);
        }
      }
    }, {
      key: "removeGhostObject",
      value: function removeGhostObject(sharedBody) {
        var i = this.ghosts.indexOf(sharedBody);

        if (i >= 0) {
          this.ghosts.splice(i, 1);

          this._btWorld.removeCollisionObject(sharedBody.ghost);
        }
      }
    }, {
      key: "emitEvents",
      value: function emitEvents() {
        var numManifolds = this._btDispatcher.getNumManifolds();

        for (var i = 0; i < numManifolds; i++) {
          var manifold = this._btDispatcher.getManifoldByIndexInternal(i);

          var numContacts = manifold.getNumContacts();

          for (var j = 0; j < numContacts; j++) {
            var manifoldPoint = manifold.getContactPoint(j);
            var d = manifoldPoint.getDistance();

            if (d <= 0.0001) {
              var s0 = manifoldPoint.getShape0();
              var s1 = manifoldPoint.getShape1();
              var shape0 = void 0;
              var shape1 = void 0;

              if (s0.isCompound()) {
                var com = _ammo.default.castObject(s0, _ammo.default.btCompoundShape);

                shape0 = com.getChildShape(manifoldPoint.m_index0).wrapped;
              } else {
                shape0 = s0.wrapped;
              }

              if (s1.isCompound()) {
                var _com = _ammo.default.castObject(s1, _ammo.default.btCompoundShape);

                shape1 = _com.getChildShape(manifoldPoint.m_index1).wrapped;
              } else {
                shape1 = s1.wrapped;
              } // current contact


              var item = this.contactsDic.get(shape0.id, shape1.id);

              if (item == null) {
                item = this.contactsDic.set(shape0.id, shape1.id, {
                  shape0: shape0,
                  shape1: shape1,
                  contacts: []
                });
              }

              item.contacts.push(manifoldPoint);
            }
          }
        } // is enter or stay


        var dicL = this.contactsDic.getLength();

        while (dicL--) {
          for (var _j = _ammoConst.CollisionEventObject.contacts.length; _j--;) {
            contactsPool.push(_ammoConst.CollisionEventObject.contacts.pop());
          }

          var key = this.contactsDic.getKeyByIndex(dicL);
          var data = this.contactsDic.getDataByKey(key);
          var _shape = data.shape0;
          var _shape2 = data.shape1;
          this.oldContactsDic.set(_shape.id, _shape2.id, data);
          var collider0 = _shape.collider;
          var collider1 = _shape2.collider;

          if (collider0 && collider1) {
            var isTrigger = collider0.isTrigger || collider1.isTrigger;

            if (isTrigger) {
              if (this.triggerArrayMat.get(_shape.id, _shape2.id)) {
                _ammoConst.TriggerEventObject.type = 'onTriggerStay';
              } else {
                _ammoConst.TriggerEventObject.type = 'onTriggerEnter';
                this.triggerArrayMat.set(_shape.id, _shape2.id, true);
              }

              _ammoConst.TriggerEventObject.selfCollider = collider0;
              _ammoConst.TriggerEventObject.otherCollider = collider1;
              collider0.emit(_ammoConst.TriggerEventObject.type, _ammoConst.TriggerEventObject);
              _ammoConst.TriggerEventObject.selfCollider = collider1;
              _ammoConst.TriggerEventObject.otherCollider = collider0;
              collider1.emit(_ammoConst.TriggerEventObject.type, _ammoConst.TriggerEventObject);
            } else {
              var body0 = collider0.attachedRigidBody;
              var body1 = collider1.attachedRigidBody;

              if (body0 && body1) {
                if (body0.isSleeping && body1.isSleeping) continue;
              } else if (body0 == null && body1) {
                if (body1.isSleeping) continue;
              } else if (body1 == null && body0) {
                if (body0.isSleeping) continue;
              }

              if (this.collisionArrayMat.get(_shape.id, _shape2.id)) {
                _ammoConst.CollisionEventObject.type = 'onCollisionStay';
              } else {
                _ammoConst.CollisionEventObject.type = 'onCollisionEnter';
                this.collisionArrayMat.set(_shape.id, _shape2.id, true);
              }

              for (var _i2 = 0; _i2 < data.contacts.length; _i2++) {
                var cq = data.contacts[_i2];

                if (contactsPool.length > 0) {
                  var c = contactsPool.pop();
                  (0, _ammoUtil.ammo2CocosVec3)(c.contactA, cq.m_localPointA);
                  (0, _ammoUtil.ammo2CocosVec3)(c.contactB, cq.m_localPointB);
                  (0, _ammoUtil.ammo2CocosVec3)(c.normal, cq.m_normalWorldOnB);

                  _ammoConst.CollisionEventObject.contacts.push(c);
                } else {
                  var _c = {
                    contactA: (0, _ammoUtil.ammo2CocosVec3)(new _index.Vec3(), cq.m_localPointA),
                    contactB: (0, _ammoUtil.ammo2CocosVec3)(new _index.Vec3(), cq.m_localPointB),
                    normal: (0, _ammoUtil.ammo2CocosVec3)(new _index.Vec3(), cq.m_normalWorldOnB)
                  };

                  _ammoConst.CollisionEventObject.contacts.push(_c);
                }
              }

              _ammoConst.CollisionEventObject.selfCollider = collider0;
              _ammoConst.CollisionEventObject.otherCollider = collider1;
              collider0.emit(_ammoConst.CollisionEventObject.type, _ammoConst.CollisionEventObject);
              _ammoConst.CollisionEventObject.selfCollider = collider1;
              _ammoConst.CollisionEventObject.otherCollider = collider0;
              collider1.emit(_ammoConst.CollisionEventObject.type, _ammoConst.CollisionEventObject);
            }

            if (this.oldContactsDic.get(_shape.id, _shape2.id) == null) {
              this.oldContactsDic.set(_shape.id, _shape2.id, data);
            }
          }
        } // is exit


        var oldDicL = this.oldContactsDic.getLength();

        while (oldDicL--) {
          var _key = this.oldContactsDic.getKeyByIndex(oldDicL);

          var _data = this.oldContactsDic.getDataByKey(_key);

          var _shape3 = _data.shape0;
          var _shape4 = _data.shape1;
          var _collider = _shape3.collider;
          var _collider2 = _shape4.collider;

          if (_collider && _collider2) {
            var _isTrigger = _collider.isTrigger || _collider2.isTrigger;

            if (this.contactsDic.getDataByKey(_key) == null) {
              if (_isTrigger) {
                // emit exit
                if (this.triggerArrayMat.get(_shape3.id, _shape4.id)) {
                  _ammoConst.TriggerEventObject.type = 'onTriggerExit';
                  _ammoConst.TriggerEventObject.selfCollider = _collider;
                  _ammoConst.TriggerEventObject.otherCollider = _collider2;

                  _collider.emit(_ammoConst.TriggerEventObject.type, _ammoConst.TriggerEventObject);

                  _ammoConst.TriggerEventObject.selfCollider = _collider2;
                  _ammoConst.TriggerEventObject.otherCollider = _collider;

                  _collider2.emit(_ammoConst.TriggerEventObject.type, _ammoConst.TriggerEventObject);

                  this.triggerArrayMat.set(_shape3.id, _shape4.id, false);
                  this.oldContactsDic.set(_shape3.id, _shape4.id, null);
                }
              } else {
                // emit exit
                if (this.collisionArrayMat.get(_shape3.id, _shape4.id)) {
                  for (var _j2 = _ammoConst.CollisionEventObject.contacts.length; _j2--;) {
                    contactsPool.push(_ammoConst.CollisionEventObject.contacts.pop());
                  }

                  for (var _i3 = 0; _i3 < _data.contacts.length; _i3++) {
                    var _cq = _data.contacts[_i3];

                    if (contactsPool.length > 0) {
                      var _c2 = contactsPool.pop();

                      (0, _ammoUtil.ammo2CocosVec3)(_c2.contactA, _cq.m_localPointA);
                      (0, _ammoUtil.ammo2CocosVec3)(_c2.contactB, _cq.m_localPointB);
                      (0, _ammoUtil.ammo2CocosVec3)(_c2.normal, _cq.m_normalWorldOnB);

                      _ammoConst.CollisionEventObject.contacts.push(_c2);
                    } else {
                      var _c3 = {
                        contactA: (0, _ammoUtil.ammo2CocosVec3)(new _index.Vec3(), _cq.m_localPointA),
                        contactB: (0, _ammoUtil.ammo2CocosVec3)(new _index.Vec3(), _cq.m_localPointB),
                        normal: (0, _ammoUtil.ammo2CocosVec3)(new _index.Vec3(), _cq.m_normalWorldOnB)
                      };

                      _ammoConst.CollisionEventObject.contacts.push(_c3);
                    }
                  }

                  _ammoConst.CollisionEventObject.type = 'onCollisionExit';
                  _ammoConst.CollisionEventObject.selfCollider = _collider;
                  _ammoConst.CollisionEventObject.otherCollider = _collider2;

                  _collider.emit(_ammoConst.CollisionEventObject.type, _ammoConst.CollisionEventObject);

                  _ammoConst.CollisionEventObject.selfCollider = _collider2;
                  _ammoConst.CollisionEventObject.otherCollider = _collider;

                  _collider2.emit(_ammoConst.CollisionEventObject.type, _ammoConst.CollisionEventObject);

                  this.collisionArrayMat.set(_shape3.id, _shape4.id, false);
                  this.oldContactsDic.set(_shape3.id, _shape4.id, null);
                }
              }
            }
          }
        }

        this.contactsDic.reset();
      }
    }]);

    return AmmoWorld;
  }();

  _exports.AmmoWorld = AmmoWorld;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,