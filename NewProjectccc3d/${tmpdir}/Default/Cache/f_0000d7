(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../core/components/index.js", "../../core/data/class-decorator.js", "../../core/math/index.js", "../../core/value-types/index.js", "../../core/math/utils.js", "./sprite-component.js", "../../core/platform/debug.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../core/components/index.js"), require("../../core/data/class-decorator.js"), require("../../core/math/index.js"), require("../../core/value-types/index.js"), require("../../core/math/utils.js"), require("./sprite-component.js"), require("../../core/platform/debug.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.classDecorator, global.index, global.index, global.utils, global.spriteComponent, global.debug);
    global.progressBarComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _classDecorator, _index2, _index3, _utils, _spriteComponent, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ProgressBarComponent = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _class3, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  /**
   * @en
   * Enum for ProgressBar mode.
   *
   * @zh
   * 进度条模式。
   */
  var Mode;

  (function (Mode) {
    Mode[Mode["HORIZONTAL"] = 0] = "HORIZONTAL";
    Mode[Mode["VERTICAL"] = 1] = "VERTICAL";
    Mode[Mode["FILLED"] = 2] = "FILLED";
  })(Mode || (Mode = {}));

  (0, _index3.Enum)(Mode);
  /**
   * @en
   * Visual indicator of progress in some operation.
   * Displays a bar to the user representing how far the operation has progressed.
   *
   * @zh
   * 进度条组件，可用于显示加载资源时的进度。
   *
   * @example
   * ```typescript
   * // update progressBar
   * update(dt) {
   *     var progress = progressBar.progress;
   *     if (progress > 0) {
   *         progress += dt;
   *     }
   *     else {
   *         progress = 1;
   *     }
   *     progressBar.progress = progress;
   * }
   * ```
   */

  var // @executeInEditMode
  ProgressBarComponent = (_dec = (0, _classDecorator.ccclass)('cc.ProgressBarComponent'), _dec2 = (0, _classDecorator.help)('i18n:cc.ProgressBarComponent'), _dec3 = (0, _classDecorator.executionOrder)(110), _dec4 = (0, _classDecorator.menu)('UI/ProgressBar'), _dec5 = (0, _classDecorator.property)({
    type: _spriteComponent.SpriteComponent,
    tooltip: '进度条显示用的 Sprite 节点，可以动态改变尺寸'
  }), _dec6 = (0, _classDecorator.property)({
    type: Mode,
    tooltip: '进度条显示模式，目前支持水平和垂直两种'
  }), _dec7 = (0, _classDecorator.property)({
    tooltip: '进度条在 progress 为 1 时的最大长度'
  }), _dec8 = (0, _classDecorator.property)({
    range: [0, 1, 0.1],
    slide: true,
    tooltip: '当前进度指示，范围从 0 到 1'
  }), _dec9 = (0, _classDecorator.property)({
    tooltip: '是否反向驱动进度条'
  }), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Component) {
    _inherits(ProgressBarComponent, _Component);

    function ProgressBarComponent() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, ProgressBarComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ProgressBarComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _initializerDefineProperty(_this, "_barSprite", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_mode", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_totalLength", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_progress", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_reverse", _descriptor5, _assertThisInitialized(_this));

      return _this;
    }

    _createClass(ProgressBarComponent, [{
      key: "_initBarSprite",
      value: function _initBarSprite() {
        if (this._barSprite) {
          var entity = this._barSprite.node;

          if (!entity) {
            return;
          }

          var nodeSize = this.node.getContentSize();
          var nodeAnchor = this.node.getAnchorPoint();
          var barSpriteSize = entity.getContentSize(); // if (entity.parent === this.node) {
          //     this.node.setContentSize(barSpriteSize);
          // }

          if (this._barSprite.fillType === _spriteComponent.SpriteComponent.FillType.RADIAL) {
            this._mode = Mode.FILLED;
          }

          if (this._mode === Mode.HORIZONTAL) {
            this.totalLength = barSpriteSize.width;
          } else if (this._mode === Mode.VERTICAL) {
            this.totalLength = barSpriteSize.height;
          } else {
            this.totalLength = this._barSprite.fillRange;
          }

          if (entity.parent === this.node) {
            var x = -nodeSize.width * nodeAnchor.x;
            entity.setPosition(x, 0, 0);
          }
        }
      }
    }, {
      key: "_updateBarStatus",
      value: function _updateBarStatus() {
        if (this._barSprite) {
          var entity = this._barSprite.node;

          if (!entity) {
            return;
          }

          var entityAnchorPoint = entity.getAnchorPoint();
          var entitySize = entity.getContentSize();
          var entityPosition = entity.getPosition();
          var anchorPoint = new _index2.Vec2(0, 0.5);
          var progress = (0, _utils.clamp01)(this._progress);
          var actualLenth = this._totalLength * progress;
          var finalContentSize = entitySize;
          var totalWidth = 0;
          var totalHeight = 0;

          switch (this._mode) {
            case Mode.HORIZONTAL:
              if (this._reverse) {
                anchorPoint = new _index2.Vec2(1, 0.5);
              }

              finalContentSize = new _index2.Size(actualLenth, entitySize.height);
              totalWidth = this._totalLength;
              totalHeight = entitySize.height;
              break;

            case Mode.VERTICAL:
              if (this._reverse) {
                anchorPoint = new _index2.Vec2(0.5, 1);
              } else {
                anchorPoint = new _index2.Vec2(0.5, 0);
              }

              finalContentSize = new _index2.Size(entitySize.width, actualLenth);
              totalWidth = entitySize.width;
              totalHeight = this._totalLength;
              break;
          } // handling filled mode


          if (this._mode === Mode.FILLED) {
            if (this._barSprite.type !== _spriteComponent.SpriteComponent.Type.FILLED) {
              (0, _debug.warn)('ProgressBar FILLED mode only works when barSprite\'s Type is FILLED!');
            } else {
              if (this._reverse) {
                actualLenth = actualLenth * -1;
              }

              this._barSprite.fillRange = actualLenth;
            }
          } else {
            if (this._barSprite.type !== _spriteComponent.SpriteComponent.Type.FILLED) {
              var anchorOffsetX = anchorPoint.x - entityAnchorPoint.x;
              var anchorOffsetY = anchorPoint.y - entityAnchorPoint.y;
              var finalPosition = new _index2.Vec3(totalWidth * anchorOffsetX, totalHeight * anchorOffsetY, 0);
              entity.setPosition(entityPosition.x + finalPosition.x, entityPosition.y + finalPosition.y, entityPosition.z);
              entity.setAnchorPoint(anchorPoint);
              entity.setContentSize(finalContentSize);
            } else {
              (0, _debug.warn)('ProgressBar non-FILLED mode only works when barSprite\'s Type is non-FILLED!');
            }
          }
        }
      }
    }, {
      key: "barSprite",

      /**
       * @en
       * The targeted Sprite which will be changed progressively.
       *
       * @zh
       * 用来显示进度条比例的 Sprite 对象。
       */
      get: function get() {
        return this._barSprite;
      },
      set: function set(value) {
        if (this._barSprite === value) {
          return;
        }

        this._barSprite = value;

        this._initBarSprite();
      }
      /**
       * @en
       * The progress mode, there are two modes supported now: horizontal and vertical.
       *
       * @zh
       * 进度条的模式。
       */

    }, {
      key: "mode",
      get: function get() {
        return this._mode;
      },
      set: function set(value) {
        if (this._mode === value) {
          return;
        }

        this._mode = value;

        if (this._barSprite) {
          var entity = this._barSprite.node;

          if (!entity) {
            return;
          }

          var entitySize = entity.getContentSize();

          if (this._mode === Mode.HORIZONTAL) {
            this.totalLength = entitySize.width;
          } else if (this._mode === Mode.VERTICAL) {
            this.totalLength = entitySize.height;
          } else if (this._mode === Mode.FILLED) {
            this.totalLength = this._barSprite.fillRange;
          }
        }
      }
      /**
       * @en
       * The total width or height of the bar sprite.
       *
       * @zh
       * 进度条实际的总长度。
       */

    }, {
      key: "totalLength",
      get: function get() {
        return this._totalLength;
      },
      set: function set(value) {
        if (this._mode === Mode.FILLED) {
          value = (0, _utils.clamp01)(value);
        }

        this._totalLength = value;

        this._updateBarStatus();
      }
      /**
       * @en
       * The current progress of the bar sprite. The valid value is between 0-1.
       *
       * @zh
       * 当前进度值，该数值的区间是 0-1 之间。
       */

    }, {
      key: "progress",
      get: function get() {
        return this._progress;
      },
      set: function set(value) {
        if (this._progress === value) {
          return;
        }

        this._progress = value;

        this._updateBarStatus();
      }
      /**
       * @en
       * Whether reverse the progress direction of the bar sprite.
       *
       * @zh
       * 进度条是否进行反方向变化。
       */

    }, {
      key: "reverse",
      get: function get() {
        return this._reverse;
      },
      set: function set(value) {
        if (this._reverse === value) {
          return;
        }

        this._reverse = value;

        if (this._barSprite) {
          this._barSprite.fillStart = 1 - this._barSprite.fillStart;
        }

        this._updateBarStatus();
      }
    }]);

    return ProgressBarComponent;
  }(_index.Component), _class3.Mode = Mode, _temp), (_applyDecoratedDescriptor(_class2.prototype, "barSprite", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "barSprite"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "mode", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "mode"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "totalLength", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "totalLength"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "progress", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "progress"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "reverse", [_dec9], Object.getOwnPropertyDescriptor(_class2.prototype, "reverse"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_barSprite", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_mode", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return Mode.HORIZONTAL;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_totalLength", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 1;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_progress", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0.1;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_reverse", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  })), _class2)) || _class) || _class) || _class) || _class);
  _exports.ProgressBarComponent = ProgressBarComponent;
  cc.ProgressBarComponent = ProgressBarComponent;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,