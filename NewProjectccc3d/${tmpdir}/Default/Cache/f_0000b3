(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../data/class-decorator.js", "../geometry/index.js", "../gfx/define.js", "../gfx/device.js", "../math/index.js", "../renderer/core/program-lib.js", "../renderer/scene/camera.js", "../scene-graph/index.js", "../utils/js.js", "./define.js", "./pipeline-serialization.js", "./render-flow.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../data/class-decorator.js"), require("../geometry/index.js"), require("../gfx/define.js"), require("../gfx/device.js"), require("../math/index.js"), require("../renderer/core/program-lib.js"), require("../renderer/scene/camera.js"), require("../scene-graph/index.js"), require("../utils/js.js"), require("./define.js"), require("./pipeline-serialization.js"), require("./render-flow.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.classDecorator, global.index, global.define, global.device, global.index, global.programLib, global.camera, global.index, global.js, global.define, global.pipelineSerialization, global.renderFlow);
    global.renderPipeline = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _classDecorator, _index, _define, _device, _index2, _programLib, _camera, _index3, _js, _define2, _pipelineSerialization, _renderFlow) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RenderPipeline = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  var v3_1 = new _index2.Vec3();
  /**
   * @en Render pipeline information descriptor
   * @zh 渲染流程描述信息。
   */

  /**
   * @en Render pipeline describes how we handle the rendering process for all render objects in the related render scene root.
   * It contains some general pipeline configurations, necessary rendering resources and some [[RenderFlow]]s.
   * The rendering process function [[render]] is invoked by [[Root]] for all [[RenderView]]s.
   * @zh 渲染管线对象决定了引擎对相关渲染场景下的所有渲染对象实施的完整渲染流程。
   * 这个类主要包含一些通用的管线配置，必要的渲染资源和一些 [[RenderFlow]]。
   * 渲染流程函数 [[render]] 会由 [[Root]] 发起调用并对所有 [[RenderView]] 执行预设的渲染流程。
   */
  var RenderPipeline = (_dec = (0, _classDecorator.ccclass)('RenderPipeline'), _dec2 = (0, _classDecorator.property)({
    type: [_renderFlow.RenderFlow],
    visible: true
  }), _dec3 = (0, _classDecorator.property)({
    type: [_pipelineSerialization.RenderTextureDesc]
  }), _dec4 = (0, _classDecorator.property)({
    type: [_pipelineSerialization.FrameBufferDesc]
  }), _dec5 = (0, _classDecorator.property)({
    type: [_pipelineSerialization.RenderPassDesc]
  }), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function () {
    function RenderPipeline() {
      _classCallCheck(this, RenderPipeline);

      this._root = null;
      this._device = null;
      this._renderObjects = [];

      _initializerDefineProperty(this, "_flows", _descriptor, this);

      this._activeFlows = [];
      this._isHDRSupported = false;
      this._isHDR = false;
      this._lightMeterScale = 10000.0;
      this._fboCount = 0;
      this._colorFmt = _define.GFXFormat.UNKNOWN;
      this._depthStencilFmt = _define.GFXFormat.UNKNOWN;
      this._shadingWidth = 0.0;
      this._shadingHeight = 0.0;
      this._shadingScale = 1.0;
      this._curIdx = 'shading';
      this._prevIdx = 'shading1';
      this._usePostProcess = false;
      this._useMSAA = false;
      this._useSMAA = false;
      this._quadVB = null;
      this._quadIB = null;
      this._quadIA = null;
      this._uboGlobal = new _define2.UBOGlobal();
      this._globalBindings = new Map();
      this._defaultTex = null;
      this._defaultTexView = null;
      this._fpScale = 1.0 / 1024.0;
      this._fpScaleInv = 1024.0;
      this._macros = {};
      this._useDynamicBatching = false;

      _initializerDefineProperty(this, "renderTextures", _descriptor2, this);

      _initializerDefineProperty(this, "framebuffers", _descriptor3, this);

      _initializerDefineProperty(this, "renderPasses", _descriptor4, this);

      this._renderTextures = new Map();
      this._textureViews = new Map();
      this._frameBuffers = new Map();
      this._renderPasses = new Map();
    }

    _createClass(RenderPipeline, [{
      key: "getTextureView",

      /**
       * @en Fetch the [[TextureView]] referred by the name in the current pipeline
       * @zh 获取当前管线中名字对应的 [[TextureView]] 对象
       * @param name 名字
       */
      value: function getTextureView(name) {
        return this._textureViews.get(name);
      }
      /**
       * @en Get the [[RenderTexture]] referred by the name in the current pipeline
       * @zh 获取当前管线中名字对应的 [[RenderTexture]] 对象
       * @param name 名字
       */

    }, {
      key: "getRenderTexture",
      value: function getRenderTexture(name) {
        return this._renderTextures.get(name);
      }
      /**
       * @en Get the [[FrameBuffer]] referred by the name in the current pipeline
       * @zh 获取当前管线中名字对应的 [[FrameBuffer]] 对象
       * @param name 名字
       */

    }, {
      key: "getFrameBuffer",
      value: function getFrameBuffer(name) {
        return this._frameBuffers.get(name);
      }
      /**
       * @en The initialization process, user shouldn't use it in most case, only useful when need to generate render pipeline programmatically.
       * @zh 初始化函数，正常情况下不会用到，仅用于程序化生成渲染管线的情况。
       * @param info The render pipeline information
       */

    }, {
      key: "initialize",
      value: function initialize(info) {
        this._usePostProcess = info.enablePostProcess !== undefined ? info.enablePostProcess : false;
        this._isHDR = info.enableHDR !== undefined ? info.enableHDR : false; // Config Anti-Aliasing

        this._useSMAA = info.enableSMAA !== undefined ? info.enableSMAA : false;
        this._useMSAA = info.enableMSAA !== undefined ? info.enableMSAA : false;

        if (info.renderTextures) {
          this.renderTextures = info.renderTextures;
        }

        if (info.framebuffers) {
          this.framebuffers = info.framebuffers;
        }

        if (info.renderPasses) {
          this.renderPasses = info.renderPasses;
        }
      }
      /**
       * @en Activate the render pipeline after loaded, it mainly activate the flows
       * @zh 当渲染管线资源加载完成后，启用管线，主要是启用管线内的 flow
       * @param root The render scene root which will use this render pipeline
       */

    }, {
      key: "activate",
      value: function activate(root) {
        this._root = root;
        this._device = root.device;

        if (!this._initRenderResource()) {
          console.error('RenderPipeline:' + this.name + ' startup failed!');
          return false;
        }

        for (var i = 0; i < this._flows.length; i++) {
          var flow = this._flows[i];

          if (flow.type === _pipelineSerialization.RenderFlowType.SCENE) {
            flow.activate(this);
            this.activateFlow(flow);
          }
        }

        return true;
      }
      /**
       * @en Destroy the pipeline.
       * @zh 销毁函数。
       */

    }, {
      key: "render",

      /**
       * @en Render function, it basically run the render process of all flows in sequence for the given view.
       * @zh 渲染函数，对指定的渲染视图按顺序执行所有渲染流程。
       * @param view Render view。
       */
      value: function render(view) {
        for (var i = 0; i < view.flows.length; i++) {
          view.flows[i].render(view);
        }
      }
      /**
       * @en Rebuild the render pipeline.
       * @zh 重新构建管线函数。
       */

    }, {
      key: "rebuild",
      value: function rebuild() {
        this.updateMacros();
      }
      /**
       * @en Reset the size of the render target
       * @zh 重置渲染目标的尺寸。
       * @param width The screen width
       * @param height The screen height
       */

    }, {
      key: "resize",
      value: function resize(width, height) {
        var w = Math.floor(width * this._shadingScale);
        var h = Math.floor(height * this._shadingScale);

        if (w > this._shadingWidth || h > this._shadingHeight) {
          // this._shadingScale = Math.min(this._shadingWidth / width, this._shadingHeight / height);
          // console.info('Resizing shading scale: ' + this._shadingScale);
          this.resizeFBOs(w, h);
        }

        for (var i = 0; i < this._flows.length; i++) {
          this._flows[i].resize(width, height);
        }
      }
      /**
       * @en Swap the frame buffer.
       * @zh 交换帧缓冲。
       */

    }, {
      key: "swapFBOs",
      value: function swapFBOs() {
        var temp = this._curIdx;
        this._curIdx = this._prevIdx;
        this._prevIdx = temp;
      }
      /**
       * @en Add a render pass.
       * @zh 添加渲染过程。
       * @param stage The render stage id
       * @param renderPass The render pass setting for the stage
       */

    }, {
      key: "addRenderPass",
      value: function addRenderPass(stage, renderPass) {
        if (renderPass) {
          this._renderPasses.set(stage, renderPass);
        }
      }
      /**
       * @en Get the render pass for the given stage
       * @zh 获取指定阶段的渲染过程。
       * @param stage The render stage id
       */

    }, {
      key: "getRenderPass",
      value: function getRenderPass(stage) {
        var renderPass = this._renderPasses.get(stage);

        if (renderPass) {
          return renderPass;
        } else {
          return null;
        }
      }
      /**
       * @en Remove the render pass for a given stage id
       * @zh 移除指定阶段的渲染过程。
       * @param stage The render stage id
       */

    }, {
      key: "removeRenderPass",
      value: function removeRenderPass(stage) {
        this._renderPasses["delete"](stage);
      }
      /**
       * @en Clear all render passes
       * @zh 清空渲染过程。
       */

    }, {
      key: "clearRenderPasses",
      value: function clearRenderPasses() {
        this._renderPasses.clear();
      }
      /**
       * @en Destroy all render flows
       * @zh 销毁全部渲染流程。
       */

    }, {
      key: "destroyFlows",
      value: function destroyFlows() {
        for (var i = 0; i < this._flows.length; i++) {
          this._flows[i].destroy();
        }

        this._flows = [];
      }
      /**
       * @en Get the flow with the given name
       * @zh 获取指定名称的渲染流程。
       * @param name The name of the flow
       */

    }, {
      key: "getFlow",
      value: function getFlow(name) {
        for (var i = 0; i < this._flows.length; i++) {
          if (this._flows[i].name === name) {
            return this._flows[i];
          }
        }

        return null;
      }
      /**
       * @en Update the macros
       * @zh 更新宏定义。
       */

    }, {
      key: "updateMacros",
      value: function updateMacros() {
        _programLib.programLib.destroyShaderByDefines(this._macros);

        this._macros.CC_USE_HDR = this._isHDR;
        this._macros.CC_SUPPORT_FLOAT_TEXTURE = this.device.hasFeature(_device.GFXFeature.TEXTURE_FLOAT);

        for (var i = 0; i < this._root.scenes.length; i++) {
          this._root.scenes[i].onGlobalPipelineStateChanged();
        }
      }
      /**
       * @en Update all UBOs for the given render view
       * @zh 为指定的渲染视图更新所有 UBO。
       * @param view The render view
       */

    }, {
      key: "updateUBOs",
      value: function updateUBOs(view) {
        var camera = view.camera;
        var scene = camera.scene;
        var device = this._root.device;
        var mainLight = scene.mainLight;
        var ambient = scene.ambient;
        var fv = this._uboGlobal.view; // update UBOGlobal

        fv[_define2.UBOGlobal.TIME_OFFSET] = this._root.cumulativeTime;
        fv[_define2.UBOGlobal.TIME_OFFSET + 1] = this._root.frameTime;
        fv[_define2.UBOGlobal.TIME_OFFSET + 2] = cc.director.getTotalFrames();
        fv[_define2.UBOGlobal.SCREEN_SIZE_OFFSET] = device.width;
        fv[_define2.UBOGlobal.SCREEN_SIZE_OFFSET + 1] = device.height;
        fv[_define2.UBOGlobal.SCREEN_SIZE_OFFSET + 2] = 1.0 / fv[_define2.UBOGlobal.SCREEN_SIZE_OFFSET];
        fv[_define2.UBOGlobal.SCREEN_SIZE_OFFSET + 3] = 1.0 / fv[_define2.UBOGlobal.SCREEN_SIZE_OFFSET + 1];
        fv[_define2.UBOGlobal.SCREEN_SCALE_OFFSET] = camera.width / this._shadingWidth * this._shadingScale;
        fv[_define2.UBOGlobal.SCREEN_SCALE_OFFSET + 1] = camera.height / this._shadingHeight * this._shadingScale;
        fv[_define2.UBOGlobal.SCREEN_SCALE_OFFSET + 2] = 1.0 / fv[_define2.UBOGlobal.SCREEN_SCALE_OFFSET];
        fv[_define2.UBOGlobal.SCREEN_SCALE_OFFSET + 3] = 1.0 / fv[_define2.UBOGlobal.SCREEN_SCALE_OFFSET + 1];
        fv[_define2.UBOGlobal.NATIVE_SIZE_OFFSET] = this._shadingWidth;
        fv[_define2.UBOGlobal.NATIVE_SIZE_OFFSET + 1] = this._shadingHeight;
        fv[_define2.UBOGlobal.NATIVE_SIZE_OFFSET + 2] = 1.0 / fv[_define2.UBOGlobal.NATIVE_SIZE_OFFSET];
        fv[_define2.UBOGlobal.NATIVE_SIZE_OFFSET + 3] = 1.0 / fv[_define2.UBOGlobal.NATIVE_SIZE_OFFSET + 1];

        _index2.Mat4.toArray(fv, camera.matView, _define2.UBOGlobal.MAT_VIEW_OFFSET);

        _index2.Mat4.toArray(fv, camera.node.worldMatrix, _define2.UBOGlobal.MAT_VIEW_INV_OFFSET);

        _index2.Mat4.toArray(fv, camera.matProj, _define2.UBOGlobal.MAT_PROJ_OFFSET);

        _index2.Mat4.toArray(fv, camera.matProjInv, _define2.UBOGlobal.MAT_PROJ_INV_OFFSET);

        _index2.Mat4.toArray(fv, camera.matViewProj, _define2.UBOGlobal.MAT_VIEW_PROJ_OFFSET);

        _index2.Mat4.toArray(fv, camera.matViewProjInv, _define2.UBOGlobal.MAT_VIEW_PROJ_INV_OFFSET);

        _index2.Vec3.toArray(fv, camera.position, _define2.UBOGlobal.CAMERA_POS_OFFSET);

        var exposure = camera.exposure;
        fv[_define2.UBOGlobal.EXPOSURE_OFFSET] = exposure;
        fv[_define2.UBOGlobal.EXPOSURE_OFFSET + 1] = 1.0 / exposure;
        fv[_define2.UBOGlobal.EXPOSURE_OFFSET + 2] = this._isHDR ? 1.0 : 0.0;
        fv[_define2.UBOGlobal.EXPOSURE_OFFSET + 3] = this._fpScale / exposure;

        if (mainLight) {
          _index2.Vec3.toArray(fv, mainLight.direction, _define2.UBOGlobal.MAIN_LIT_DIR_OFFSET);

          _index2.Vec3.toArray(fv, mainLight.color, _define2.UBOGlobal.MAIN_LIT_COLOR_OFFSET);

          if (mainLight.useColorTemperature) {
            var colorTempRGB = mainLight.colorTemperatureRGB;
            fv[_define2.UBOGlobal.MAIN_LIT_COLOR_OFFSET] *= colorTempRGB.x;
            fv[_define2.UBOGlobal.MAIN_LIT_COLOR_OFFSET + 1] *= colorTempRGB.y;
            fv[_define2.UBOGlobal.MAIN_LIT_COLOR_OFFSET + 2] *= colorTempRGB.z;
          }

          if (this._isHDR) {
            fv[_define2.UBOGlobal.MAIN_LIT_COLOR_OFFSET + 3] = mainLight.illuminance * this._fpScale;
          } else {
            fv[_define2.UBOGlobal.MAIN_LIT_COLOR_OFFSET + 3] = mainLight.illuminance * exposure;
          }
        } else {
          _index2.Vec3.toArray(fv, _index2.Vec3.UNIT_Z, _define2.UBOGlobal.MAIN_LIT_DIR_OFFSET);

          _index2.Vec4.toArray(fv, _index2.Vec4.ZERO, _define2.UBOGlobal.MAIN_LIT_COLOR_OFFSET);
        }

        var skyColor = ambient.skyColor;

        if (this._isHDR) {
          skyColor[3] = ambient.skyIllum * this._fpScale;
        } else {
          skyColor[3] = ambient.skyIllum * exposure;
        }

        this._uboGlobal.view.set(skyColor, _define2.UBOGlobal.AMBIENT_SKY_OFFSET);

        this._uboGlobal.view.set(ambient.groundAlbedo, _define2.UBOGlobal.AMBIENT_GROUND_OFFSET); // update ubos


        this._globalBindings.get(_define2.UBOGlobal.BLOCK.name).buffer.update(this._uboGlobal.view);
      }
      /**
       * @en Do scene culling based on the given render view.
       * @zh 基于指定渲染视图做场景裁剪。
       * @param view The render view
       */

    }, {
      key: "sceneCulling",
      value: function sceneCulling(view) {
        var camera = view.camera;
        var scene = camera.scene;
        this._renderObjects.length = 0;
        var mainLight = scene.mainLight;
        var planarShadows = scene.planarShadows;

        if (mainLight) {
          mainLight.update();

          if (planarShadows.enabled && mainLight.node.hasChangedFlags) {
            planarShadows.updateDirLight(mainLight);
          }
        }

        if (scene.skybox.enabled && camera.clearFlag & _camera.SKYBOX_FLAG) {
          this.addVisibleModel(scene.skybox, camera);
        }

        var models = scene.models;
        var stamp = cc.director.getTotalFrames();

        for (var i = 0; i < models.length; i++) {
          var model = models[i]; // filter model by view visibility

          if (model.enabled) {
            var vis = view.visibility & _index3.Layers.BitMask.UI_2D;

            if (vis) {
              if (model.node && view.visibility === model.node.layer || view.visibility === model.visFlags) {
                model.updateTransform(stamp);
                model.updateUBOs(stamp);
                this.addVisibleModel(model, camera);
              }
            } else {
              if (model.node && (view.visibility & model.node.layer) === model.node.layer || view.visibility & model.visFlags) {
                model.updateTransform(stamp); // frustum culling

                if (model.worldBounds && !_index.intersect.aabb_frustum(model.worldBounds, camera.frustum)) {
                  continue;
                }

                model.updateUBOs(stamp);
                this.addVisibleModel(model, camera);
              }
            }
          }
        }

        if (planarShadows.enabled) {
          planarShadows.updateCommandBuffers(camera.frustum, stamp);
        }
      }
    }, {
      key: "_initRenderResource",
      value: function _initRenderResource() {
        if (this._usePostProcess) {
          if (this._device.hasFeature(_device.GFXFeature.FORMAT_R11G11B10F) || this._device.hasFeature(_device.GFXFeature.TEXTURE_HALF_FLOAT) || this._device.hasFeature(_device.GFXFeature.TEXTURE_FLOAT)) {
            this._isHDRSupported = true;
          }

          this._fboCount = 1;

          if (this._useMSAA) {
            this._useMSAA = this.device.hasFeature(_device.GFXFeature.MSAA);
          }
        }

        if (this._isHDR && this._isHDRSupported) {
          // Try to use HDR format
          if (this._device.hasFeature(_device.GFXFeature.COLOR_HALF_FLOAT) && this._device.hasFeature(_device.GFXFeature.TEXTURE_HALF_FLOAT_LINEAR)) {
            if (this._device.hasFeature(_device.GFXFeature.FORMAT_R11G11B10F)) {
              this._colorFmt = _define.GFXFormat.R11G11B10F;
              this._isHDR = true;
            } else if (this._device.hasFeature(_device.GFXFeature.TEXTURE_HALF_FLOAT)) {
              this._colorFmt = _define.GFXFormat.RGBA16F;
              this._isHDR = true;
            }
          } else if (this._device.hasFeature(_device.GFXFeature.COLOR_FLOAT) && this._device.hasFeature(_device.GFXFeature.TEXTURE_FLOAT_LINEAR)) {
            if (this._device.hasFeature(_device.GFXFeature.TEXTURE_FLOAT)) {
              this._colorFmt = _define.GFXFormat.RGBA32F;
              this._isHDR = true;
            }
          }
        }

        if (!this._isHDR) {
          this._colorFmt = _define.GFXFormat.RGBA8;
        }

        if (this._device.depthBits === 24) {
          if (this._device.stencilBits === 8) {
            this._depthStencilFmt = _define.GFXFormat.D24S8;
          } else {
            this._depthStencilFmt = _define.GFXFormat.D24;
          }
        } else {
          this._depthStencilFmt = _define.GFXFormat.D16;
        } // colorFmt = GFXFormat.RGBA16F;
        // this._shadingScale = this._device.devicePixelRatio;


        this._shadingScale = 1.0;
        this._shadingWidth = Math.floor(this._device.width);
        this._shadingHeight = Math.floor(this._device.height);
        console.info('USE_POST_PROCESS: ' + this._usePostProcess);

        if (this._usePostProcess) {
          console.info('USE_MSAA: ' + this._useMSAA);
          console.info('USE_SMAA: ' + this._useSMAA);
          console.info('USE_HDR: ' + this._isHDR);
        }

        console.info('SHADING_SIZE: ' + this._shadingWidth + ' x ' + this._shadingHeight);
        console.info('SHADING_SCALE: ' + this._shadingScale.toFixed(4));
        console.info('SHADING_COLOR_FORMAT: ' + _define.GFXFormatInfos[this._colorFmt].name);
        console.info('SHADING_DEPTH_FORMAT: ' + _define.GFXFormatInfos[this._depthStencilFmt].name);

        for (var i = 0; i < this.renderTextures.length; i++) {
          var rtd = this.renderTextures[i];

          this._renderTextures.set(rtd.name, this._device.createTexture({
            type: rtd.type,
            usage: rtd.usage,
            format: this._getTextureFormat(rtd.format, rtd.usage),
            width: rtd.width === -1 ? this._shadingWidth : rtd.width,
            height: rtd.height === -1 ? this._shadingHeight : rtd.height
          }));

          var rt = this._renderTextures.get(rtd.name);

          if (rt == null) {
            console.error('RenderTexture:' + rtd.name + ' not found!');
            return false;
          }

          this._textureViews.set(rtd.name, this._device.createTextureView({
            texture: rt,
            type: rtd.viewType,
            format: this._getTextureFormat(rtd.format, rtd.usage)
          }));
        }

        for (var _i = 0; _i < this.renderPasses.length; _i++) {
          var rpd = this.renderPasses[_i];

          this._renderPasses.set(rpd.index, this._device.createRenderPass({
            colorAttachments: rpd.colorAttachments,
            depthStencilAttachment: rpd.depthStencilAttachment
          }));
        }

        for (var _i2 = 0; _i2 < this.framebuffers.length; _i2++) {
          var fbd = this.framebuffers[_i2];

          var rp = this._renderPasses.get(fbd.renderPass);

          if (rp == null) {
            console.error('RenderPass:' + fbd.renderPass + ' not found!');
            return false;
          }

          var tvs = [];

          for (var j = 0; j < fbd.colorViews.length; j++) {
            var tv = this._textureViews.get(fbd.colorViews[j]);

            if (tv == null) {
              console.error('TextureView:' + fbd.colorViews[j] + ' not found!');
              return false;
            }

            tvs.push(tv);
          }

          var dsv = this._textureViews.get(fbd.depthStencilView);

          this._frameBuffers.set(fbd.name, this._device.createFramebuffer({
            renderPass: rp,
            colorViews: tvs,
            depthStencilView: dsv
          }));
        }

        if (!this.createQuadInputAssembler()) {
          return false;
        }

        if (!this.createUBOs()) {
          return false;
        }

        var mainWindow = this._root.mainWindow;
        var windowPass = null;

        if (mainWindow) {
          windowPass = mainWindow.renderPass;
        }

        if (!windowPass) {
          console.error('RenderPass of main window is null.');
          return false;
        }

        this.addRenderPass(_define2.RenderPassStage.DEFAULT, windowPass); // update global defines when all states initialized.

        this.updateMacros();
        return true;
      }
      /**
       * @en Internal destroy function
       * @zh 内部销毁函数。
       */

    }, {
      key: "_destroy",
      value: function _destroy() {
        this.destroyFlows();
        this.clearRenderPasses();
        this.destroyQuadInputAssembler();
        this.destroyUBOs();

        var rtIter = this._renderTextures.values();

        var rtRes = rtIter.next();

        while (!rtRes.done) {
          rtRes.value.destroy();
          rtRes = rtIter.next();
        }

        var tvIter = this._textureViews.values();

        var tvRes = tvIter.next();

        while (!tvRes.done) {
          tvRes.value.destroy();
          tvRes = tvIter.next();
        }

        var rpIter = this._renderPasses.values();

        var rpRes = rpIter.next();

        while (!rpRes.done) {
          rpRes.value.destroy();
          rpRes = rpIter.next();
        }

        var fbIter = this._frameBuffers.values();

        var fbRes = fbIter.next();

        while (!fbRes.done) {
          fbRes.value.destroy();
          fbRes = fbIter.next();
        }
      }
      /**
       * @en Resize all frame buffers
       * @zh 重置帧缓冲大小。
       * @param width The screen width
       * @param height The screen height
       */

    }, {
      key: "resizeFBOs",
      value: function resizeFBOs(width, height) {
        var _this = this;

        this._shadingWidth = width;
        this._shadingHeight = height;

        for (var i = 0; i < this.renderTextures.length; i++) {
          var rt = this.renderTextures[i];

          this._renderTextures.get(rt.name).resize(width, height);

          this._textureViews.get(rt.name).destroy();

          this._textureViews.get(rt.name).initialize({
            texture: this._renderTextures.get(rt.name),
            type: rt.viewType,
            format: this._getTextureFormat(rt.format, rt.usage)
          });
        }

        for (var _i3 = 0; _i3 < this.framebuffers.length; _i3++) {
          var fb = this.framebuffers[_i3];

          this._frameBuffers.get(fb.name).destroy();

          this._frameBuffers.get(fb.name).initialize({
            renderPass: this._renderPasses.get(fb.renderPass),
            colorViews: fb.colorViews.map(function (value) {
              return _this._textureViews.get(value);
            }, this),
            depthStencilView: this._textureViews.get(fb.depthStencilView)
          });
        }

        console.info('Resizing shading fbos: ' + this._shadingWidth + 'x' + this._shadingHeight);
      }
      /**
       * @en Create input assembler for quad
       * @zh 创建四边形输入汇集器。
       */

    }, {
      key: "createQuadInputAssembler",
      value: function createQuadInputAssembler() {
        // create vertex buffer
        var vbStride = Float32Array.BYTES_PER_ELEMENT * 4;
        var vbSize = vbStride * 4;
        this._quadVB = this._device.createBuffer({
          usage: _define.GFXBufferUsageBit.VERTEX | _define.GFXBufferUsageBit.TRANSFER_DST,
          memUsage: _define.GFXMemoryUsageBit.HOST | _define.GFXMemoryUsageBit.DEVICE,
          size: vbSize,
          stride: vbStride
        });

        if (!this._quadVB) {
          return false;
        }

        var verts = new Float32Array(4 * 4);
        var n = 0;
        verts[n++] = -1.0;
        verts[n++] = -1.0;
        verts[n++] = 0.0;
        verts[n++] = 0.0;
        verts[n++] = 1.0;
        verts[n++] = -1.0;
        verts[n++] = 1.0;
        verts[n++] = 0.0;
        verts[n++] = -1.0;
        verts[n++] = 1.0;
        verts[n++] = 0.0;
        verts[n++] = 1.0;
        verts[n++] = 1.0;
        verts[n++] = 1.0;
        verts[n++] = 1.0;
        verts[n++] = 1.0;

        this._quadVB.update(verts); // create index buffer


        var ibStride = Uint8Array.BYTES_PER_ELEMENT;
        var ibSize = ibStride * 6;
        this._quadIB = this._device.createBuffer({
          usage: _define.GFXBufferUsageBit.INDEX | _define.GFXBufferUsageBit.TRANSFER_DST,
          memUsage: _define.GFXMemoryUsageBit.HOST | _define.GFXMemoryUsageBit.DEVICE,
          size: ibSize,
          stride: ibStride
        });

        if (!this._quadIB) {
          return false;
        }

        var indices = new Uint8Array(6);
        indices[0] = 0;
        indices[1] = 1;
        indices[2] = 2;
        indices[3] = 1;
        indices[4] = 3;
        indices[5] = 2;

        this._quadIB.update(indices); // create input assembler


        var attributes = [{
          name: 'a_position',
          format: _define.GFXFormat.RG32F
        }, {
          name: 'a_texCoord',
          format: _define.GFXFormat.RG32F
        }];
        this._quadIA = this._device.createInputAssembler({
          attributes: attributes,
          vertexBuffers: [this._quadVB],
          indexBuffer: this._quadIB
        });
        return true;
      }
      /**
       * @en Destroy input assembler for quad
       * @zh 销毁四边形输入汇集器。
       */

    }, {
      key: "destroyQuadInputAssembler",
      value: function destroyQuadInputAssembler() {
        if (this._quadVB) {
          this._quadVB.destroy();

          this._quadVB = null;
        }

        if (this._quadIB) {
          this._quadIB.destroy();

          this._quadIB = null;
        }

        if (this._quadIA) {
          this._quadIA.destroy();

          this._quadIA = null;
        }
      }
      /**
       * @en Create all UBOs.
       * @zh 创建所有 UBO。
       */

    }, {
      key: "createUBOs",
      value: function createUBOs() {
        if (!this._globalBindings.get(_define2.UBOGlobal.BLOCK.name)) {
          var globalUBO = this._root.device.createBuffer({
            usage: _define.GFXBufferUsageBit.UNIFORM | _define.GFXBufferUsageBit.TRANSFER_DST,
            memUsage: _define.GFXMemoryUsageBit.HOST | _define.GFXMemoryUsageBit.DEVICE,
            size: _define2.UBOGlobal.SIZE
          });

          this._globalBindings.set(_define2.UBOGlobal.BLOCK.name, {
            type: _define.GFXBindingType.UNIFORM_BUFFER,
            blockInfo: _define2.UBOGlobal.BLOCK,
            buffer: globalUBO
          });
        }

        if (!this._globalBindings.get(_define2.UBOShadow.BLOCK.name)) {
          var shadowUBO = this._root.device.createBuffer({
            usage: _define.GFXBufferUsageBit.UNIFORM | _define.GFXBufferUsageBit.TRANSFER_DST,
            memUsage: _define.GFXMemoryUsageBit.HOST | _define.GFXMemoryUsageBit.DEVICE,
            size: _define2.UBOShadow.SIZE
          });

          this._globalBindings.set(_define2.UBOShadow.BLOCK.name, {
            type: _define.GFXBindingType.UNIFORM_BUFFER,
            blockInfo: _define2.UBOShadow.BLOCK,
            buffer: shadowUBO
          });
        }

        if (!this._globalBindings.get(_define2.UNIFORM_ENVIRONMENT.name)) {
          this._globalBindings.set(_define2.UNIFORM_ENVIRONMENT.name, {
            type: _define.GFXBindingType.SAMPLER,
            samplerInfo: _define2.UNIFORM_ENVIRONMENT
          });
        }

        return true;
      }
      /**
       * @en Destroy all UBOs
       * @zh 销毁全部 UBO。
       */

    }, {
      key: "destroyUBOs",
      value: function destroyUBOs() {
        var globalUBO = this._globalBindings.get(_define2.UBOGlobal.BLOCK.name);

        if (globalUBO) {
          globalUBO.buffer.destroy();

          this._globalBindings["delete"](_define2.UBOGlobal.BLOCK.name);
        }

        var shadowUBO = this._globalBindings.get(_define2.UBOShadow.BLOCK.name);

        if (shadowUBO) {
          shadowUBO.buffer.destroy();

          this._globalBindings["delete"](_define2.UBOShadow.BLOCK.name);
        }
      }
      /**
       * @en Add a visible model in the given camera as a render object in the pipeline
       * @zh 向当前管线添加指定摄像机中的可见对象。
       * @param model The visible model
       * @param camera The camera from which the model can be seen
       */

    }, {
      key: "addVisibleModel",
      value: function addVisibleModel(model, camera) {
        var depth = 0;

        if (model.node) {
          _index2.Vec3.subtract(v3_1, model.node.worldPosition, camera.position);

          depth = _index2.Vec3.dot(v3_1, camera.forward);
        }

        this._renderObjects.push({
          model: model,
          depth: depth
        });
      }
      /**
       * @en Activate a render flow.
       * @zh 激活一个 RenderFlow，将其添加到可执行的 RenderFlow 数组中
       * @param flow The render flow
       */

    }, {
      key: "activateFlow",
      value: function activateFlow(flow) {
        this._activeFlows.push(flow);

        this._activeFlows.sort(function (a, b) {
          return a.priority - b.priority;
        });
      }
    }, {
      key: "_getTextureFormat",
      value: function _getTextureFormat(format, usage) {
        if (format === _define.GFXFormat.UNKNOWN) {
          if (usage & _define.GFXTextureUsageBit.COLOR_ATTACHMENT) {
            return this._colorFmt;
          } else if (usage & _define.GFXTextureUsageBit.DEPTH_STENCIL_ATTACHMENT) {
            return this._depthStencilFmt;
          } else {
            return _define.GFXFormat.UNKNOWN;
          }
        } else {
          return format;
        }
      }
    }, {
      key: "root",

      /**
       * @en Render scene's root object.
       * @zh 渲染场景的根对象。
       * @readonly
       */
      get: function get() {
        return this._root;
      }
      /**
       * @en Rendering backend level GFX device object.
       * @zh 渲染后端层 GFX 设备对象。
       * @readonly
       */

    }, {
      key: "device",
      get: function get() {
        return this._device;
      }
      /**
       * @en Name of the render pipeline.
       * @zh 名称。
       * @readonly
       */

    }, {
      key: "name",
      get: function get() {
        return _js.js.getClassName(this.constructor);
      }
      /**
       * @en The list for render objects, only available after the scene culling of the current frame.
       * @zh 渲染对象数组，仅在当前帧的场景剔除完成后有效。
       * @readonly
       */

    }, {
      key: "renderObjects",
      get: function get() {
        return this._renderObjects;
      }
      /**
       * @en The list for render flows.
       * @zh 渲染流程数组。
       * @readonly
       */

    }, {
      key: "flows",
      get: function get() {
        return this._flows;
      }
      /**
       * @en Currently activated flows.
       * @zh 当前开启的渲染流程
       * @readonly
       */

    }, {
      key: "activeFlows",
      get: function get() {
        return this._activeFlows;
      }
      /**
       * @en Whether enable the post process phase.
       * @zh 是否启用后期处理。
       * @readonly
       */

    }, {
      key: "usePostProcess",
      get: function get() {
        return this._usePostProcess;
      }
      /**
       * @en Whether support HDR in the current environment.
       * @zh 当前运行环境是否支持 HDR。
       * @readonly
       */

    }, {
      key: "isHDRSupported",
      get: function get() {
        return this._isHDRSupported;
      }
      /**
       * @en Whether the current pipeline is HDR enabled pipeline.
       * @zh 当前渲染管线是否为启用了 HDR 的管线。
       * @readonly
       */

    }, {
      key: "isHDR",
      get: function get() {
        return this._isHDR;
      }
      /**
       * @en The scale used for shading program.
       * @zh 着色尺寸缩放。
       * @readonly
       */

    }, {
      key: "shadingScale",
      get: function get() {
        return this._shadingScale;
      }
      /**
       * @en The scale for the distance of light (in meter).
       * @zh 灯光距离缩放系数（以米为单位）。
       */

    }, {
      key: "lightMeterScale",
      set: function set(scale) {
        this._lightMeterScale = scale;
      },
      get: function get() {
        return this._lightMeterScale;
      }
      /**
       * @en Whether activate MSAA anti aliasing.
       * @zh 是否启用 MSAA 抗锯齿。
       * @readonly
       */

    }, {
      key: "useMSAA",
      get: function get() {
        return this._useMSAA;
      }
      /**
       * @en Whether activate SMAA anti aliasing.
       * @zh 启用 SMAA 抗锯齿。
       * @readonly
       */

    }, {
      key: "useSMAA",
      get: function get() {
        return this._useSMAA;
      }
      /**
       * @en The input assembler for quad.
       * @zh 四边形的渲染输入汇集器。
       * @readonly
       */

    }, {
      key: "quadIA",
      get: function get() {
        return this._quadIA;
      }
      /**
       * @en The default global bindings.
       * @zh 默认的全局绑定表。
       * @readonly
       */

    }, {
      key: "globalBindings",
      get: function get() {
        return this._globalBindings;
      }
      /**
       * @en The default texture.
       * @zh 默认纹理。
       * @readonly
       */

    }, {
      key: "defaultTexture",
      get: function get() {
        return this._defaultTex;
      }
      /**
       * @en The scale for float precision.
       * @zh 浮点精度缩放。
       * @readonly
       */

    }, {
      key: "fpScale",
      get: function get() {
        return this._fpScale;
      }
      /**
       * @en The inverse scale of float precision.
       * @zh 浮点精度缩放的倒数。
       * @readonly
       */

    }, {
      key: "fpScaleInv",
      get: function get() {
        return this._fpScaleInv;
      }
      /**
       * @en The macros for this pipeline.
       * @zh 管线宏定义。
       * @readonly
       */

    }, {
      key: "macros",
      get: function get() {
        return this._macros;
      }
      /**
       * @en The default global uniform buffer object data
       * @zh 默认的全局 UBO 数据。
       * @readonly
       */

    }, {
      key: "defaultGlobalUBOData",
      get: function get() {
        return this._uboGlobal.view;
      }
      /**
       * @en The current frame buffer id for shading
       * @zh 当前帧缓冲 id
       * @readonly
       */

    }, {
      key: "currShading",
      get: function get() {
        return this._curIdx;
      }
      /**
       * @en The previous frame buffer id for shading
       * @zh 前一个帧缓冲 id
       * @readonly
       */

    }, {
      key: "prevShading",
      get: function get() {
        return this._prevIdx;
      }
      /**
       * @en Whether use dynamic batching in this pipeline
       * @zh 是否启用动态合批。
       * @readonly
       */

    }, {
      key: "useDynamicBatching",
      get: function get() {
        return this._useDynamicBatching;
      }
    }]);

    return RenderPipeline;
  }(), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_flows", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return [];
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "renderTextures", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return [];
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "framebuffers", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return [];
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "renderPasses", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return [];
    }
  })), _class2)) || _class);
  _exports.RenderPipeline = RenderPipeline;
  cc.RenderPipeline = RenderPipeline;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,