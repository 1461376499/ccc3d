(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./js.js", "../default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./js.js"), require("../default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.js, global.defaultConstants);
    global.misc = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _js, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.propertyDefine = propertyDefine;
  _exports.nextPOT = nextPOT;
  _exports.pushToMap = pushToMap;
  _exports.contains = contains;
  _exports.isDomNode = isDomNode;
  _exports.callInNextTick = callInNextTick;
  _exports.tryCatchFunctor_EDITOR = tryCatchFunctor_EDITOR;
  _exports.isPlainEmptyObj_DEV = isPlainEmptyObj_DEV;
  _exports.cloneable_DEV = cloneable_DEV;
  _exports.BASE64_VALUES = _exports.BUILTIN_CLASSID_RE = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  var BUILTIN_CLASSID_RE = /^(?:cc|dragonBones|sp|ccsg)\..+/;
  _exports.BUILTIN_CLASSID_RE = BUILTIN_CLASSID_RE;
  var BASE64_KEYS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
  var values = new Array(123); // max char code in base64Keys

  for (var i = 0; i < 123; ++i) {
    values[i] = 64;
  } // fill with placeholder('=') index


  for (var _i = 0; _i < 64; ++_i) {
    values[BASE64_KEYS.charCodeAt(_i)] = _i;
  } // decoded value indexed by base64 char code


  var BASE64_VALUES = values;
  /**
   * misc utilities
   * @class misc
   * @static
   */

  /**
   * @method propertyDefine
   * @param {Function} ctor
   * @param {Array} sameNameGetSets
   * @param {Object} diffNameGetSets
   */

  _exports.BASE64_VALUES = BASE64_VALUES;

  function propertyDefine(ctor, sameNameGetSets, diffNameGetSets) {
    function define(np, propName, getter, setter) {
      var pd = Object.getOwnPropertyDescriptor(np, propName);

      if (pd) {
        if (pd.get) {
          np[getter] = pd.get;
        }

        if (pd.set && setter) {
          np[setter] = pd.set;
        }
      } else {
        var getterFunc = np[getter];

        if (_defaultConstants.DEV && !getterFunc) {
          var clsName = cc.Class._isCCClass(ctor) && (0, _js.getClassName)(ctor) || ctor.name || '(anonymous class)';
          cc.warnID(5700, propName, getter, clsName);
        } else {
          (0, _js.getset)(np, propName, getterFunc, np[setter]);
        }
      }
    }

    var propName,
        np = ctor.prototype;

    for (var _i2 = 0; _i2 < sameNameGetSets.length; _i2++) {
      propName = sameNameGetSets[_i2];
      var suffix = propName[0].toUpperCase() + propName.slice(1);
      define(np, propName, 'get' + suffix, 'set' + suffix);
    }

    for (propName in diffNameGetSets) {
      var gs = diffNameGetSets[propName];
      define(np, propName, gs[0], gs[1]);
    }
  }
  /**
   * @method nextPOT
   * @param {Number} x
   * @return {Number}
   */


  function nextPOT(x) {
    x = x - 1;
    x = x | x >> 1;
    x = x | x >> 2;
    x = x | x >> 4;
    x = x | x >> 8;
    x = x | x >> 16;
    return x + 1;
  } // set value to map, if key exists, push to array


  function pushToMap(map, key, value, pushFront) {
    var exists = map[key];

    if (exists) {
      if (Array.isArray(exists)) {
        if (pushFront) {
          exists.push(exists[0]);
          exists[0] = value;
        } else {
          exists.push(value);
        }
      } else {
        map[key] = pushFront ? [value, exists] : [exists, value];
      }
    } else {
      map[key] = value;
    }
  }

  function contains(refNode, otherNode) {
    if (typeof refNode.contains === 'function') {
      return refNode.contains(otherNode);
    } else if (typeof refNode.compareDocumentPosition === 'function') {
      return !!(refNode.compareDocumentPosition(otherNode) & 16);
    } else {
      var node = otherNode.parentNode;

      if (node) {
        do {
          if (node === refNode) {
            return true;
          } else {
            node = node.parentNode;
          }
        } while (node !== null);
      }

      return false;
    }
  }

  function isDomNode(obj) {
    if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object' && typeof Node === 'function') {
      // If "TypeError: Right-hand side of 'instanceof' is not callback" is thrown,
      // it should because window.Node was overwritten.
      return obj instanceof Node;
    } else {
      return obj && _typeof(obj) === 'object' && typeof obj.nodeType === 'number' && typeof obj.nodeName === 'string';
    }
  }

  function callInNextTick(callback, p1, p2) {
    if (_defaultConstants.EDITOR) {
      if (callback) {
        // @ts-ignore
        process.nextTick(function () {
          callback(p1, p2);
        });
      }
    } else {
      if (callback) {
        setTimeout(function () {
          callback(p1, p2);
        }, 0);
      }
    }
  } // use anonymous function here to ensure it will not being hoisted without EDITOR


  function tryCatchFunctor_EDITOR(funcName) {
    return Function('target', 'try {\n' + '  target.' + funcName + '();\n' + '}\n' + 'catch (e) {\n' + '  cc._throw(e);\n' + '}');
  }

  function isPlainEmptyObj_DEV(obj) {
    if (!obj || obj.constructor !== Object) {
      return false;
    } // jshint ignore: start


    for (var k in obj) {
      return false;
    } // jshint ignore: end


    return true;
  }

  function cloneable_DEV(obj) {
    return obj && typeof obj.clone === 'function' && (obj.constructor && obj.constructor.prototype.hasOwnProperty('clone') || obj.hasOwnProperty('clone'));
  } // if (TEST) {
  //     // editor mocks using in unit tests
  //     if (typeof Editor === 'undefined') {
  //         window.Editor = {
  //             UuidUtils: {
  //                 NonUuidMark: '.',
  //                 uuid () {
  //                     return '' + ((new Date()).getTime() + Math.random());
  //                 },
  //             },
  //         };
  //     }
  // }


  cc.misc = {
    BUILTIN_CLASSID_RE: BUILTIN_CLASSID_RE,
    BASE64_VALUES: BASE64_VALUES,
    propertyDefine: propertyDefine,
    nextPOT: nextPOT,
    pushToMap: pushToMap,
    contains: contains,
    isDomNode: isDomNode,
    callInNextTick: callInNextTick,
    tryCatchFunctor_EDITOR: tryCatchFunctor_EDITOR,
    isPlainEmptyObj_DEV: isPlainEmptyObj_DEV,
    cloneable_DEV: cloneable_DEV
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,