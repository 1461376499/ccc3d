(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../../core/data/class-decorator.js", "../../../core/math/index.js", "../../../core/index.js", "../instance.js", "../../../core/default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../../core/data/class-decorator.js"), require("../../../core/math/index.js"), require("../../../core/index.js"), require("../instance.js"), require("../../../core/default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.classDecorator, global.index, global.index, global.instance, global.defaultConstants);
    global.rigidBodyComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _classDecorator, _index, _index2, _instance, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RigidBodyComponent = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  /**
   * @en
   * Rigid body component.
   * @zh
   * 刚体组件。
   */
  var RigidBodyComponent = (_dec = (0, _classDecorator.ccclass)('cc.RigidBodyComponent'), _dec2 = (0, _classDecorator.help)('i18n:cc.RigidBodyComponent'), _dec3 = (0, _classDecorator.executionOrder)(99), _dec4 = (0, _classDecorator.menu)('Physics/RigidBody'), _dec5 = (0, _classDecorator.property)({
    displayOrder: 0,
    tooltip: '刚体的质量'
  }), _dec6 = (0, _classDecorator.property)({
    displayOrder: 1,
    tooltip: '线性阻尼'
  }), _dec7 = (0, _classDecorator.property)({
    displayOrder: 2,
    tooltip: '旋转阻尼'
  }), _dec8 = (0, _classDecorator.property)({
    displayOrder: 3,
    tooltip: '刚体是否由物理系统控制运动'
  }), _dec9 = (0, _classDecorator.property)({
    displayOrder: 4,
    tooltip: '刚体是否使用重力'
  }), _dec10 = (0, _classDecorator.property)({
    displayOrder: 5,
    tooltip: '刚体是否固定旋转'
  }), _dec11 = (0, _classDecorator.property)({
    displayOrder: 6,
    tooltip: '线性速度的因子，可以用来控制每个轴方向上的速度的缩放'
  }), _dec12 = (0, _classDecorator.property)({
    displayOrder: 7,
    tooltip: '旋转速度的因子，可以用来控制每个轴方向上的旋转速度的缩放'
  }), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = (0, _classDecorator.executeInEditMode)(_class = (0, _classDecorator.disallowMultiple)(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
    _inherits(RigidBodyComponent, _Component);

    _createClass(RigidBodyComponent, [{
      key: "allowSleep",
      /// PUBLIC PROPERTY GETTER\SETTER ///

      /**
       * @en
       * Gets or sets whether hibernation is allowed.
       * @zh
       * 获取或设置是否允许休眠。
       */
      // @property({
      //     displayOrder: -1,
      // })
      get: function get() {
        return this._allowSleep;
      },
      set: function set(v) {
        this._allowSleep = v;

        if (!_defaultConstants.EDITOR && !_defaultConstants.PHYSICS_BUILTIN) {
          this._body.setAllowSleep(v);
        }
      }
      /**
       * @en
       * Gets or sets the mass of the rigid body.
       * @zh
       * 获取或设置刚体的质量。
       */

    }, {
      key: "mass",
      get: function get() {
        return this._mass;
      },
      set: function set(value) {
        this._mass = value;

        if (!_defaultConstants.EDITOR && !_defaultConstants.PHYSICS_BUILTIN) {
          this._body.setMass(value);
        }
      }
      /**
       * @en
       * Gets or sets linear damping.
       * @zh
       * 获取或设置线性阻尼。
       */

    }, {
      key: "linearDamping",
      get: function get() {
        return this._linearDamping;
      },
      set: function set(value) {
        this._linearDamping = value;

        if (!_defaultConstants.EDITOR && !_defaultConstants.PHYSICS_BUILTIN) {
          this._body.setLinearDamping(value);
        }
      }
      /**
       * @en
       * Gets or sets the rotation damping.
       * @zh
       * 获取或设置旋转阻尼。
       */

    }, {
      key: "angularDamping",
      get: function get() {
        return this._angularDamping;
      },
      set: function set(value) {
        this._angularDamping = value;

        if (!_defaultConstants.EDITOR && !_defaultConstants.PHYSICS_BUILTIN) {
          this._body.setAngularDamping(value);
        }
      }
      /**
       * @en
       * Gets or sets whether a rigid body is controlled by a physical system.
       * @zh
       * 获取或设置刚体是否由物理系统控制运动。
       */

    }, {
      key: "isKinematic",
      get: function get() {
        return this._isKinematic;
      },
      set: function set(value) {
        this._isKinematic = value;

        if (!_defaultConstants.EDITOR && !_defaultConstants.PHYSICS_BUILTIN) {
          this._body.setIsKinematic(value);
        }
      }
      /**
       * @en
       * Gets or sets whether a rigid body uses gravity.
       * @zh
       * 获取或设置刚体是否使用重力。
       */

    }, {
      key: "useGravity",
      get: function get() {
        return this._useGravity;
      },
      set: function set(value) {
        this._useGravity = value;

        if (!_defaultConstants.EDITOR && !_defaultConstants.PHYSICS_BUILTIN) {
          this._body.useGravity(value);
        }
      }
      /**
       * @en
       * Gets or sets whether the rigid body is fixed for rotation.
       * @zh
       * 获取或设置刚体是否固定旋转。
       */

    }, {
      key: "fixedRotation",
      get: function get() {
        return this._fixedRotation;
      },
      set: function set(value) {
        this._fixedRotation = value;

        if (!_defaultConstants.EDITOR && !_defaultConstants.PHYSICS_BUILTIN) {
          this._body.fixRotation(value);
        }
      }
      /**
       * @en
       * Gets or sets the linear velocity factor that can be used to control the scaling of the velocity in each axis direction.
       * @zh
       * 获取或设置线性速度的因子，可以用来控制每个轴方向上的速度的缩放。
       */

    }, {
      key: "linearFactor",
      get: function get() {
        return this._linearFactor;
      },
      set: function set(value) {
        _index.Vec3.copy(this._linearFactor, value);

        if (!_defaultConstants.EDITOR && !_defaultConstants.PHYSICS_BUILTIN) {
          this._body.setLinearFactor(this._linearFactor);
        }
      }
      /**
       * @en
       * Gets or sets the rotation speed factor that can be used to control the scaling of the rotation speed in each axis direction.
       * @zh
       * 获取或设置旋转速度的因子，可以用来控制每个轴方向上的旋转速度的缩放。
       */

    }, {
      key: "angularFactor",
      get: function get() {
        return this._angularFactor;
      },
      set: function set(value) {
        _index.Vec3.copy(this._angularFactor, value);

        if (!_defaultConstants.EDITOR && !_defaultConstants.PHYSICS_BUILTIN) {
          this._body.setAngularFactor(this._angularFactor);
        }
      }
      /**
       * @en
       * Gets whether it is the state of awake.
       * @zh
       * 获取是否是唤醒的状态。
       */

    }, {
      key: "isAwake",
      get: function get() {
        if (!_defaultConstants.PHYSICS_BUILTIN && this._assertOnload) {
          return this._body.isAwake;
        }

        return false;
      }
      /**
       * @en
       * Gets whether you can enter a dormant state.
       * @zh
       * 获取是否是可进入休眠的状态。
       */

    }, {
      key: "isSleepy",
      get: function get() {
        if (!_defaultConstants.PHYSICS_BUILTIN && this._assertOnload) {
          return this._body.isSleepy;
        }

        return false;
      }
      /**
       * @en
       * Gets whether the state is dormant.
       * @zh
       * 获取是否是正在休眠的状态。
       */

    }, {
      key: "isSleeping",
      get: function get() {
        if (!_defaultConstants.PHYSICS_BUILTIN && this._assertOnload) {
          return this._body.isSleeping;
        }

        return false;
      }
      /**
       * @en
       * Gets the wrapper object, through which the lowLevel instance can be accessed.
       * @zh
       * 获取封装对象，通过此对象可以访问到底层实例。
       */

    }, {
      key: "body",
      get: function get() {
        return this._body;
      }
    }, {
      key: "_assertOnload",
      get: function get() {
        var r = this._isOnLoadCalled == 0;

        if (r) {
          (0, _index2.error)('[Physics]: Please make sure that the node has been added to the scene');
        }

        return !r;
      }
    }]);

    function RigidBodyComponent() {
      var _this;

      _classCallCheck(this, RigidBodyComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(RigidBodyComponent).call(this));
      _this._allowSleep = true;

      _initializerDefineProperty(_this, "_mass", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_linearDamping", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_angularDamping", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_fixedRotation", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_isKinematic", _descriptor5, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_useGravity", _descriptor6, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_linearFactor", _descriptor7, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_angularFactor", _descriptor8, _assertThisInitialized(_this));

      if (!_defaultConstants.EDITOR && !_defaultConstants.PHYSICS_BUILTIN) {
        _this._body = (0, _instance.createRigidBody)();
      }

      return _this;
    } /// COMPONENT LIFECYCLE ///


    _createClass(RigidBodyComponent, [{
      key: "__preload",
      value: function __preload() {
        if (!_defaultConstants.EDITOR && !_defaultConstants.PHYSICS_BUILTIN) {
          this._body.initialize(this);
        }
      }
    }, {
      key: "onEnable",
      value: function onEnable() {
        if (!_defaultConstants.EDITOR && !_defaultConstants.PHYSICS_BUILTIN) {
          this._body.onEnable();
        }
      }
    }, {
      key: "onDisable",
      value: function onDisable() {
        if (!_defaultConstants.EDITOR && !_defaultConstants.PHYSICS_BUILTIN) {
          this._body.onDisable();
        }
      }
    }, {
      key: "onDestroy",
      value: function onDestroy() {
        if (!_defaultConstants.EDITOR && !_defaultConstants.PHYSICS_BUILTIN) {
          this._body.onDestroy();
        }
      } /// PUBLIC METHOD ///

      /**
       * @en
       * Apply force to a world point. This could, for example, be a point on the Body surface.
       * @zh
       * 在世界空间中，相对于刚体的质心的某点上对刚体施加作用力。
       * @param force - 作用力
       * @param relativePoint - 作用点，相对于刚体的质心
       */

    }, {
      key: "applyForce",
      value: function applyForce(force, relativePoint) {
        if (!_defaultConstants.PHYSICS_BUILTIN && this._assertOnload) {
          this._body.applyForce(force, relativePoint);
        }
      }
      /**
       * @en
       * Apply force to a local point. This could, for example, be a point on the Body surface.
       * @zh
       * 在本地空间中，相对于刚体的质心的某点上对刚体施加作用力。
       * @param force - 作用力
       * @param localPoint - 作用点
       */

    }, {
      key: "applyLocalForce",
      value: function applyLocalForce(force, localPoint) {
        if (!_defaultConstants.PHYSICS_BUILTIN && this._assertOnload) {
          this._body.applyLocalForce(force, localPoint);
        }
      }
      /**
       * @en
       * In world space, impulse is applied to the rigid body at some point relative to the center of mass of the rigid body.
       * @zh
       * 在世界空间中，相对于刚体的质心的某点上对刚体施加冲量。
       * @param impulse - 冲量
       * @param relativePoint - 作用点，相对于刚体的中心点
       */

    }, {
      key: "applyImpulse",
      value: function applyImpulse(impulse, relativePoint) {
        if (!_defaultConstants.PHYSICS_BUILTIN && this._assertOnload) {
          this._body.applyImpulse(impulse, relativePoint);
        }
      }
      /**
       * @en
       * In local space, impulse is applied to the rigid body at some point relative to the center of mass of the rigid body.
       * @zh
       * 在本地空间中，相对于刚体的质心的某点上对刚体施加冲量。
       * @param impulse - 冲量
       * @param localPoint - 作用点
       */

    }, {
      key: "applyLocalImpulse",
      value: function applyLocalImpulse(impulse, localPoint) {
        if (!_defaultConstants.PHYSICS_BUILTIN && this._assertOnload) {
          this._body.applyLocalImpulse(impulse, localPoint);
        }
      }
      /**
       * @en
       * In world space, torque is applied to the rigid body.
       * @zh
       * 在世界空间中，对刚体施加扭矩。
       * @param torque - 扭矩
       */

    }, {
      key: "applyTorque",
      value: function applyTorque(torque) {
        if (!_defaultConstants.PHYSICS_BUILTIN && this._assertOnload) {
          this._body.applyTorque(torque);
        }
      }
      /**
       * @zh
       * 在本地空间中，对刚体施加扭矩。
       * @param torque - 扭矩
       */

    }, {
      key: "applyLocalTorque",
      value: function applyLocalTorque(torque) {
        if (!_defaultConstants.PHYSICS_BUILTIN && this._assertOnload) {
          this._body.applyLocalTorque(torque);
        }
      }
      /**
       * @en
       * Wake up the rigid body.
       * @zh
       * 唤醒刚体。
       */

    }, {
      key: "wakeUp",
      value: function wakeUp() {
        if (!_defaultConstants.PHYSICS_BUILTIN && this._assertOnload) {
          this._body.wakeUp();
        }
      }
      /**
       * @en
       * Dormancy of rigid body.
       * @zh
       * 休眠刚体。
       */

    }, {
      key: "sleep",
      value: function sleep() {
        if (!_defaultConstants.PHYSICS_BUILTIN && this._assertOnload) {
          this._body.sleep();
        }
      }
      /**
       * @en
       * Gets the linear velocity.
       * @zh
       * 获取线性速度。
       * @param out 速度 Vec3
       */

    }, {
      key: "getLinearVelocity",
      value: function getLinearVelocity(out) {
        if (!_defaultConstants.PHYSICS_BUILTIN && this._assertOnload) {
          this._body.getLinearVelocity(out);
        }
      }
      /**
       * @en
       * Sets the linear velocity.
       * @zh
       * 设置线性速度。
       * @param value 速度 Vec3
       */

    }, {
      key: "setLinearVelocity",
      value: function setLinearVelocity(value) {
        if (!_defaultConstants.PHYSICS_BUILTIN && this._assertOnload) {
          this._body.setLinearVelocity(value);
        }
      }
      /**
       * @en
       * Gets the angular velocity.
       * @zh
       * 获取旋转速度。
       * @param out 速度 Vec3
       */

    }, {
      key: "getAngularVelocity",
      value: function getAngularVelocity(out) {
        if (!_defaultConstants.PHYSICS_BUILTIN && this._assertOnload) {
          this._body.getAngularVelocity(out);
        }
      }
      /**
       * @en
       * Sets the angular velocity.
       * @zh
       * 设置旋转速度。
       * @param value 速度 Vec3
       */

    }, {
      key: "setAngularVelocity",
      value: function setAngularVelocity(value) {
        if (!_defaultConstants.PHYSICS_BUILTIN && this._assertOnload) {
          this._body.setAngularVelocity(value);
        }
      } /// GROUP MASK ///

      /**
       * @en
       * Sets the group value.
       * @zh
       * 设置分组值。
       * @param v - 整数，范围为 2 的 0 次方 到 2 的 31 次方
       */

    }, {
      key: "setGroup",
      value: function setGroup(v) {
        if (!_defaultConstants.PHYSICS_BUILTIN && this._assertOnload) {
          this._body.setGroup(v);
        }
      }
      /**
       * @en
       * Gets the group value.
       * @zh
       * 获取分组值。
       * @returns 整数，范围为 2 的 0 次方 到 2 的 31 次方
       */

    }, {
      key: "getGroup",
      value: function getGroup() {
        if (!_defaultConstants.PHYSICS_BUILTIN && this._assertOnload) {
          return this._body.getGroup();
        }

        return 0;
      }
      /**
       * @en
       * Add a grouping value to fill in the group you want to join.
       * @zh
       * 添加分组值，可填要加入的 group。
       * @param v - 整数，范围为 2 的 0 次方 到 2 的 31 次方
       */

    }, {
      key: "addGroup",
      value: function addGroup(v) {
        if (!_defaultConstants.PHYSICS_BUILTIN && this._assertOnload) {
          this._body.addGroup(v);
        }
      }
      /**
       * @en
       * Subtract the grouping value to fill in the group to be removed.
       * @zh
       * 减去分组值，可填要移除的 group。
       * @param v - 整数，范围为 2 的 0 次方 到 2 的 31 次方
       */

    }, {
      key: "removeGroup",
      value: function removeGroup(v) {
        if (!_defaultConstants.PHYSICS_BUILTIN && this._assertOnload) {
          this._body.removeGroup(v);
        }
      }
      /**
       * @en
       * Gets the mask value.
       * @zh
       * 获取掩码值。
       * @returns 整数，范围为 2 的 0 次方 到 2 的 31 次方
       */

    }, {
      key: "getMask",
      value: function getMask() {
        if (!_defaultConstants.PHYSICS_BUILTIN && this._assertOnload) {
          return this._body.getMask();
        }

        return 0;
      }
      /**
       * @en
       * Sets the mask value.
       * @zh
       * 设置掩码值。
       * @param v - 整数，范围为 2 的 0 次方 到 2 的 31 次方
       */

    }, {
      key: "setMask",
      value: function setMask(v) {
        if (!_defaultConstants.PHYSICS_BUILTIN && this._assertOnload) {
          this._body.setMask(v);
        }
      }
      /**
       * @en
       * Add mask values to fill in groups that need to be checked.
       * @zh
       * 添加掩码值，可填入需要检查的 group。
       * @param v - 整数，范围为 2 的 0 次方 到 2 的 31 次方
       */

    }, {
      key: "addMask",
      value: function addMask(v) {
        if (!_defaultConstants.PHYSICS_BUILTIN && this._assertOnload) {
          this._body.addMask(v);
        }
      }
      /**
       * @en
       * Subtract the mask value to fill in the group that does not need to be checked.
       * @zh
       * 减去掩码值，可填入不需要检查的 group。
       * @param v - 整数，范围为 2 的 0 次方 到 2 的 31 次方
       */

    }, {
      key: "removeMask",
      value: function removeMask(v) {
        if (!_defaultConstants.PHYSICS_BUILTIN && this._assertOnload) {
          this._body.removeMask(v);
        }
      }
    }]);

    return RigidBodyComponent;
  }(_index2.Component), _temp), (_applyDecoratedDescriptor(_class2.prototype, "mass", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "mass"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "linearDamping", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "linearDamping"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "angularDamping", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "angularDamping"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "isKinematic", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "isKinematic"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "useGravity", [_dec9], Object.getOwnPropertyDescriptor(_class2.prototype, "useGravity"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "fixedRotation", [_dec10], Object.getOwnPropertyDescriptor(_class2.prototype, "fixedRotation"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "linearFactor", [_dec11], Object.getOwnPropertyDescriptor(_class2.prototype, "linearFactor"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "angularFactor", [_dec12], Object.getOwnPropertyDescriptor(_class2.prototype, "angularFactor"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_mass", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 1;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_linearDamping", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0.1;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_angularDamping", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0.1;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_fixedRotation", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_isKinematic", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "_useGravity", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "_linearFactor", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _index.Vec3(1, 1, 1);
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "_angularFactor", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _index.Vec3(1, 1, 1);
    }
  })), _class2)) || _class) || _class) || _class) || _class) || _class) || _class);
  _exports.RigidBodyComponent = RigidBodyComponent;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,