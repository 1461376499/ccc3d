(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../../core/math/index.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../../core/math/index.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index);
    global.sliced = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.sliced = void 0;

  /*
   Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
  
   http://www.cocos.com
  
   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated engine source code (the "Software"), a limited,
   worldwide, royalty-free, non-assignable, revocable and non-exclusive license
   to use Cocos Creator solely to develop games on your target platforms. You shall
   not use Cocos Creator software for developing other software or tools that's
   used for developing games. You are not granted to publish, distribute,
   sublicense, and/or sell copies of Cocos Creator.
  
   The software or tools in this License Agreement are licensed, not sold.
   Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
  
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.
  */

  /**
   * @category ui-assembler
   */
  var vec3_temp = new _index.Vec3();
  var matrix = new _index.Mat4();
  /**
   * sliced 组装器
   * 可通过 cc.UI.sliced 获取该组装器。
   */

  var sliced = {
    useModel: false,
    createData: function createData(sprite) {
      var renderData = sprite.requestRenderData(); // 0-4 for local verts
      // 5-20 for world verts

      renderData.dataLength = 20;
      renderData.vertexCount = 16;
      renderData.indiceCount = 54;
      return renderData;
    },
    updateRenderData: function updateRenderData(sprite) {
      var frame = sprite.spriteFrame; // TODO: Material API design and export from editor could affect the material activation process
      // need to update the logic here
      // if (frame) {
      //     if (!frame._original && dynamicAtlasManager) {
      //         dynamicAtlasManager.insertSpriteFrame(frame);
      //     }
      //     if (sprite._material._texture !== frame._texture) {
      //         sprite._activateMaterial();
      //     }
      // }

      var renderData = sprite.renderData;

      if (renderData && frame) {
        var vertDirty = renderData.vertDirty;

        if (vertDirty) {
          this.updateVerts(sprite);
          this.updateWorldVerts(sprite);
        }
      }
    },
    updateVerts: function updateVerts(sprite) {
      var renderData = sprite.renderData;
      var datas = renderData.datas;
      var node = sprite.node;
      var width = node.width;
      var height = node.height;
      var appx = node.anchorX * width;
      var appy = node.anchorY * height;
      var frame = sprite.spriteFrame;
      var leftWidth = frame.insetLeft;
      var rightWidth = frame.insetRight;
      var topHeight = frame.insetTop;
      var bottomHeight = frame.insetBottom;
      var sizableWidth = width - leftWidth - rightWidth;
      var sizableHeight = height - topHeight - bottomHeight;
      var xScale = width / (leftWidth + rightWidth);
      var yScale = height / (topHeight + bottomHeight);
      xScale = isNaN(xScale) || xScale > 1 ? 1 : xScale;
      yScale = isNaN(yScale) || yScale > 1 ? 1 : yScale;
      sizableWidth = sizableWidth < 0 ? 0 : sizableWidth;
      sizableHeight = sizableHeight < 0 ? 0 : sizableHeight;
      datas[0].x = -appx;
      datas[0].y = -appy;
      datas[1].x = leftWidth * xScale - appx;
      datas[1].y = bottomHeight * yScale - appy;
      datas[2].x = datas[1].x + sizableWidth;
      datas[2].y = datas[1].y + sizableHeight;
      datas[3].x = width - appx;
      datas[3].y = height - appy;
      renderData.vertDirty = false;
    },
    fillBuffers: function fillBuffers(sprite, renderer) {
      if (sprite.node.hasChangedFlags) {
        this.updateWorldVerts(sprite);
      }

      var buffer = renderer.currBufferBatch;
      var renderData = sprite.renderData; // const node: Node = sprite.node;
      // const color: Color = sprite.color;

      var datas = renderData.datas;
      var vertexOffset = buffer.byteOffset >> 2;
      var vertexCount = renderData.vertexCount;
      var indiceOffset = buffer.indiceOffset;
      var vertexId = buffer.vertexOffset;
      var uvSliced = sprite.spriteFrame.uvSliced;
      var isRecreate = buffer.request(vertexCount, renderData.indiceCount);

      if (!isRecreate) {
        buffer = renderer.currBufferBatch;
        vertexOffset = 0;
        indiceOffset = 0;
        vertexId = 0;
      } // buffer data may be realloc, need get reference after request.


      var vbuf = buffer.vData; // const  uintbuf = buffer._uintVData,

      var ibuf = buffer.iData;

      for (var i = 4; i < 20; ++i) {
        var vert = datas[i];
        var uvs = uvSliced[i - 4];
        vbuf[vertexOffset++] = vert.x;
        vbuf[vertexOffset++] = vert.y;
        vbuf[vertexOffset++] = vert.z;
        vbuf[vertexOffset++] = uvs.u;
        vbuf[vertexOffset++] = uvs.v;

        _index.Color.toArray(vbuf, sprite.color, vertexOffset);

        vertexOffset += 4; // uintbuf[vertexOffset++] = color;
      }

      for (var r = 0; r < 3; ++r) {
        for (var c = 0; c < 3; ++c) {
          var start = vertexId + r * 4 + c;
          ibuf[indiceOffset++] = start;
          ibuf[indiceOffset++] = start + 1;
          ibuf[indiceOffset++] = start + 4;
          ibuf[indiceOffset++] = start + 1;
          ibuf[indiceOffset++] = start + 5;
          ibuf[indiceOffset++] = start + 4;
        }
      }
    },
    updateWorldVerts: function updateWorldVerts(sprite) {
      var node = sprite.node;
      var datas = sprite.renderData.datas;
      node.getWorldMatrix(matrix);

      for (var row = 0; row < 4; ++row) {
        var rowD = datas[row];

        for (var col = 0; col < 4; ++col) {
          var colD = datas[col];
          var world = datas[4 + row * 4 + col];

          _index.Vec3.set(vec3_temp, colD.x, rowD.y, 0);

          _index.Vec3.transformMat4(world, vec3_temp, matrix);
        }
      }
    }
  };
  _exports.sliced = sliced;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,