(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../core/data/class-decorator.js", "../../core/math/index.js", "../../core/value-types/index.js", "./gradient.js", "../../core/default-constants.js", "../../core/index.js", "../../core/assets/asset-enum.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../core/data/class-decorator.js"), require("../../core/math/index.js"), require("../../core/value-types/index.js"), require("./gradient.js"), require("../../core/default-constants.js"), require("../../core/index.js"), require("../../core/assets/asset-enum.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.classDecorator, global.index, global.index, global.gradient, global.defaultConstants, global.index, global.assetEnum);
    global.gradientRange = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _classDecorator, _index, _index2, _gradient, _defaultConstants, _index3, _assetEnum) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.packGradientRange = packGradientRange;
  _exports.default = void 0;
  _gradient = _interopRequireWildcard(_gradient);

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _class3, _temp;

  function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  // tslint:disable: max-line-length
  var SerializableTable = _defaultConstants.EDITOR && [['_mode', 'color'], ['_mode', 'gradient'], ['_mode', 'colorMin', 'colorMax'], ['_mode', 'gradientMin', 'gradientMax'], ['_mode', 'gradient']];
  var Mode = (0, _index2.Enum)({
    Color: 0,
    Gradient: 1,
    TwoColors: 2,
    TwoGradients: 3,
    RandomColor: 4
  });
  var GradientRange = (_dec = (0, _classDecorator.ccclass)('cc.GradientRange'), _dec2 = (0, _classDecorator.property)({
    type: Mode
  }), _dec3 = (0, _classDecorator.property)({
    type: _gradient.default
  }), _dec4 = (0, _classDecorator.property)({
    type: _gradient.default
  }), _dec5 = (0, _classDecorator.property)({
    type: _gradient.default
  }), _dec6 = (0, _classDecorator.property)({
    type: Mode
  }), _dec(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function () {
    function GradientRange() {
      _classCallCheck(this, GradientRange);

      _initializerDefineProperty(this, "color", _descriptor, this);

      _initializerDefineProperty(this, "colorMin", _descriptor2, this);

      _initializerDefineProperty(this, "colorMax", _descriptor3, this);

      _initializerDefineProperty(this, "gradient", _descriptor4, this);

      _initializerDefineProperty(this, "gradientMin", _descriptor5, this);

      _initializerDefineProperty(this, "gradientMax", _descriptor6, this);

      _initializerDefineProperty(this, "_mode", _descriptor7, this);

      this._color = _index.Color.WHITE.clone();
    }

    _createClass(GradientRange, [{
      key: "evaluate",
      value: function evaluate(time, rndRatio) {
        switch (this._mode) {
          case Mode.Color:
            return this.color;

          case Mode.TwoColors:
            _index.Color.lerp(this._color, this.colorMin, this.colorMax, rndRatio);

            return this._color;

          case Mode.RandomColor:
            return this.gradient.randomColor();

          case Mode.Gradient:
            return this.gradient.evaluate(time);

          case Mode.TwoGradients:
            _index.Color.lerp(this._color, this.gradientMin.evaluate(time), this.gradientMax.evaluate(time), rndRatio);

            return this._color;

          default:
            return this.color;
        }
      }
    }, {
      key: "_onBeforeSerialize",
      value: function _onBeforeSerialize(props) {
        return SerializableTable[this._mode];
      }
    }, {
      key: "mode",

      /**
       * @zh 渐变色类型 [[Mode]]。
       */
      get: function get() {
        return this._mode;
      },
      set: function set(m) {
        if (_defaultConstants.EDITOR) {
          if (m === Mode.RandomColor) {
            if (this.gradient.colorKeys.length === 0) {
              this.gradient.colorKeys.push(new _gradient.ColorKey());
            }

            if (this.gradient.alphaKeys.length === 0) {
              this.gradient.alphaKeys.push(new _gradient.AlphaKey());
            }
          }
        }

        this._mode = m;
      }
    }]);

    return GradientRange;
  }(), _class3.Mode = Mode, _temp), (_applyDecoratedDescriptor(_class2.prototype, "mode", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "mode"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "color", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _index.Color.WHITE.clone();
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "colorMin", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _index.Color.WHITE.clone();
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "colorMax", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _index.Color.WHITE.clone();
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "gradient", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _gradient.default();
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "gradientMin", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _gradient.default();
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "gradientMax", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _gradient.default();
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "_mode", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return Mode.Color;
    }
  })), _class2)) || _class);
  _exports.default = GradientRange;

  // CCClass.fastDefine('cc.GradientRange', GradientRange, {
  //     mode: Mode.Color,
  //     color: cc.Color.WHITE.clone(),
  //     colorMin: cc.Color.WHITE.clone(),
  //     colorMax: cc.Color.WHITE.clone(),
  //     gradient: new Gradient(),
  //     gradientMin: null,
  //     gradientMax: null
  // });
  function evaluateGradient(gr, time, index) {
    switch (gr.mode) {
      case Mode.Color:
        return gr.color;

      case Mode.TwoColors:
        return index === 0 ? gr.colorMin : gr.colorMax;

      case Mode.RandomColor:
        return gr.gradient.randomColor();

      case Mode.Gradient:
        return gr.gradient.evaluate(time);

      case Mode.TwoGradients:
        return index === 0 ? gr.gradientMin.evaluate(time) : gr.gradientMax.evaluate(time);

      default:
        return gr.color;
    }
  }

  function evaluateHeight(gr) {
    switch (gr.mode) {
      case Mode.TwoColors:
        return 2;

      case Mode.TwoGradients:
        return 2;

      default:
        return 1;
    }
  }

  function packGradientRange(samples, gr) {
    var height = evaluateHeight(gr);
    var data = new Uint8Array(samples * height * 4);
    var interval = 1.0 / (samples - 1);
    var offset = 0;

    for (var h = 0; h < height; h++) {
      for (var j = 0; j < samples; j++) {
        var color = evaluateGradient(gr, interval * j, h);
        data[offset] = color.r;
        data[offset + 1] = color.g;
        data[offset + 2] = color.b;
        data[offset + 3] = color.a;
        offset += 4;
      }
    }

    var texture = new _index3.Texture2D();
    texture.create(samples, height, _assetEnum.PixelFormat.RGBA8888);
    texture.setFilters(_assetEnum.Filter.LINEAR, _assetEnum.Filter.LINEAR);
    texture.setWrapMode(_assetEnum.WrapMode.CLAMP_TO_EDGE, _assetEnum.WrapMode.CLAMP_TO_EDGE);
    texture.uploadData(data);
    return texture;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,