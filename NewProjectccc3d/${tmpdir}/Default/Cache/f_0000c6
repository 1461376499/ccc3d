(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../3d/builtin/init.js", "../../assets/texture-base.js", "../../data/class-decorator.js", "../../gfx/define.js", "../../renderer/core/pass.js", "../../renderer/core/pass-utils.js", "../../renderer/core/sampler-lib.js", "../../platform/debug.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../3d/builtin/init.js"), require("../../assets/texture-base.js"), require("../../data/class-decorator.js"), require("../../gfx/define.js"), require("../../renderer/core/pass.js"), require("../../renderer/core/pass-utils.js"), require("../../renderer/core/sampler-lib.js"), require("../../platform/debug.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.init, global.textureBase, global.classDecorator, global.define, global.pass, global.passUtils, global.samplerLib, global.debug);
    global.uniform = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _init, _textureBase, _classDecorator, _define, _pass, _passUtils, _samplerLib, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.UniformProxyFactory = void 0;

  var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  /**
   * @en
   * Value proxy factory for setting uniform on material target.
   * @zh
   * 用于设置材质目标上指定 Uniform 的曲线值代理工厂。
   */
  var UniformProxyFactory = (_dec = (0, _classDecorator.ccclass)('cc.animation.UniformProxyFactory'), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function () {
    /**
     * @en Pass index.
     * @zh Pass 索引。
     */

    /**
     * @en Uniform name.
     * @zh Uniform 名称。
     */

    /**
     * @en
     * Specify the aimed channel of the uniform.
     * Use this when you're aiming at a single channel of the uniform instead of who uniform.
     * For example, only green(1) channel of a color uniform.
     * @zh
     * 指定目标 Uniform 的通道。
     * 当你希望设置 Uniform 单独的通道而非整个 Uniform 时应该当使用此字段。
     * 例如，仅设置颜色 Uniform 的红色通道。
     */
    function UniformProxyFactory(uniformName, passIndex) {
      _classCallCheck(this, UniformProxyFactory);

      _initializerDefineProperty(this, "passIndex", _descriptor, this);

      _initializerDefineProperty(this, "uniformName", _descriptor2, this);

      _initializerDefineProperty(this, "channelIndex", _descriptor3, this);

      this.passIndex = passIndex || 0;
      this.uniformName = uniformName || '';
    }

    _createClass(UniformProxyFactory, [{
      key: "forTarget",
      value: function forTarget(target) {
        var pass = target.passes[this.passIndex];
        var handle = pass.getHandle(this.uniformName);

        if (handle === undefined) {
          throw new Error("Material \"".concat(target.name, "\" has no uniform \"").concat(this.uniformName, "\""));
        }

        var bindingType = _pass.Pass.getBindingTypeFromHandle(handle);

        if (bindingType === _define.GFXBindingType.UNIFORM_BUFFER) {
          var realHandle = this.channelIndex === undefined ? handle : pass.getHandle(this.uniformName, this.channelIndex, _define.GFXType.FLOAT);

          if (realHandle === undefined) {
            throw new Error("Uniform \"".concat(this.uniformName, " (in material ").concat(target.name, ") has no channel ").concat(this.channelIndex, "\""));
          }

          if (isUniformArray(pass, this.uniformName)) {
            return {
              set: function set(value) {
                pass.setUniformArray(realHandle, value);
              }
            };
          } else {
            return {
              set: function set(value) {
                pass.setUniform(realHandle, value);
              }
            };
          }
        } else if (bindingType === _define.GFXBindingType.SAMPLER) {
          var binding = _pass.Pass.getBindingFromHandle(handle);

          var prop = pass.properties[this.uniformName];
          var texName = prop && prop.value ? prop.value + '-texture' : (0, _passUtils.getDefaultFromType)(prop.type);

          var dftTex = _init.builtinResMgr.get(texName);

          if (!dftTex) {
            (0, _debug.warn)("Illegal texture default value: ".concat(texName, "."));
            dftTex = _init.builtinResMgr.get('default-texture');
          }

          return {
            set: function set(value) {
              if (!value) {
                value = dftTex;
              }

              var tv = value.getGFXTextureView();

              if (!tv || !tv.texture.width || !tv.texture.height) {
                return;
              }

              pass.bindTextureView(binding, tv);

              if (value instanceof _textureBase.TextureBase) {
                pass.bindSampler(binding, _samplerLib.samplerLib.getSampler(cc.game._gfxDevice, value.getSamplerHash()));
              }
            }
          };
        } else {
          throw new Error("Animations are not available for uniforms with binding type ".concat(bindingType, "."));
        }
      }
    }]);

    return UniformProxyFactory;
  }(), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "passIndex", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "uniformName", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return '';
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "channelIndex", [_classDecorator.float], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return undefined;
    }
  })), _class2)) || _class);
  _exports.UniformProxyFactory = UniformProxyFactory;

  function isUniformArray(pass, name) {
    var _iterator = _createForOfIteratorHelper(pass.shaderInfo.blocks),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var block = _step.value;

        var _iterator2 = _createForOfIteratorHelper(block.members),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var uniform = _step2.value;

            if (uniform.name === name) {
              return uniform.count > 1;
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return false;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkY6L2plbmtpbnMvd29ya3NwYWNlL0NyZWF0b3JfM0QvZWRpdG9yLTNkL3Jlc291cmNlcy8zZC9lbmdpbmUvY29jb3MvY29yZS9hbmltYXRpb24vdmFsdWUtcHJveHktZmFjdG9yaWVzL3VuaWZvcm0udHMiXSwibmFtZXMiOlsiVW5pZm9ybVByb3h5RmFjdG9yeSIsInVuaWZvcm1OYW1lIiwicGFzc0luZGV4IiwidGFyZ2V0IiwicGFzcyIsInBhc3NlcyIsImhhbmRsZSIsImdldEhhbmRsZSIsInVuZGVmaW5lZCIsIkVycm9yIiwibmFtZSIsImJpbmRpbmdUeXBlIiwiUGFzcyIsImdldEJpbmRpbmdUeXBlRnJvbUhhbmRsZSIsIkdGWEJpbmRpbmdUeXBlIiwiVU5JRk9STV9CVUZGRVIiLCJyZWFsSGFuZGxlIiwiY2hhbm5lbEluZGV4IiwiR0ZYVHlwZSIsIkZMT0FUIiwiaXNVbmlmb3JtQXJyYXkiLCJzZXQiLCJ2YWx1ZSIsInNldFVuaWZvcm1BcnJheSIsInNldFVuaWZvcm0iLCJTQU1QTEVSIiwiYmluZGluZyIsImdldEJpbmRpbmdGcm9tSGFuZGxlIiwicHJvcCIsInByb3BlcnRpZXMiLCJ0ZXhOYW1lIiwidHlwZSIsImRmdFRleCIsImJ1aWx0aW5SZXNNZ3IiLCJnZXQiLCJ0diIsImdldEdGWFRleHR1cmVWaWV3IiwidGV4dHVyZSIsIndpZHRoIiwiaGVpZ2h0IiwiYmluZFRleHR1cmVWaWV3IiwiVGV4dHVyZUJhc2UiLCJiaW5kU2FtcGxlciIsInNhbXBsZXJMaWIiLCJnZXRTYW1wbGVyIiwiY2MiLCJnYW1lIiwiX2dmeERldmljZSIsImdldFNhbXBsZXJIYXNoIiwicHJvcGVydHkiLCJmbG9hdCIsInNoYWRlckluZm8iLCJibG9ja3MiLCJibG9jayIsIm1lbWJlcnMiLCJ1bmlmb3JtIiwiY291bnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnQkE7Ozs7OztNQU9hQSxtQixXQURaLDZCQUFR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L1xyXG5cclxuaW1wb3J0IHsgYnVpbHRpblJlc01nciB9IGZyb20gJy4uLy4uLzNkL2J1aWx0aW4vaW5pdCc7XHJcbmltcG9ydCB7IE1hdGVyaWFsIH0gZnJvbSAnLi4vLi4vYXNzZXRzL21hdGVyaWFsJztcclxuaW1wb3J0IHsgU3ByaXRlRnJhbWUgfSBmcm9tICcuLi8uLi9hc3NldHMvc3ByaXRlLWZyYW1lJztcclxuaW1wb3J0IHsgVGV4dHVyZUJhc2UgfSBmcm9tICcuLi8uLi9hc3NldHMvdGV4dHVyZS1iYXNlJztcclxuaW1wb3J0IHsgY2NjbGFzcywgZmxvYXQsIHByb3BlcnR5IH0gZnJvbSAnLi4vLi4vZGF0YS9jbGFzcy1kZWNvcmF0b3InO1xyXG5pbXBvcnQgeyBHRlhCaW5kaW5nVHlwZSwgR0ZYVHlwZSB9IGZyb20gJy4uLy4uL2dmeC9kZWZpbmUnO1xyXG5pbXBvcnQgeyBQYXNzIH0gZnJvbSAnLi4vLi4vcmVuZGVyZXIvY29yZS9wYXNzJztcclxuaW1wb3J0IHsgZ2V0RGVmYXVsdEZyb21UeXBlIH0gZnJvbSAnLi4vLi4vcmVuZGVyZXIvY29yZS9wYXNzLXV0aWxzJztcclxuaW1wb3J0IHsgc2FtcGxlckxpYiB9IGZyb20gJy4uLy4uL3JlbmRlcmVyL2NvcmUvc2FtcGxlci1saWInO1xyXG5pbXBvcnQgeyBJVmFsdWVQcm94eSwgSVZhbHVlUHJveHlGYWN0b3J5IH0gZnJvbSAnLi4vdmFsdWUtcHJveHknO1xyXG5pbXBvcnQgeyB3YXJuIH0gZnJvbSAnLi4vLi4vcGxhdGZvcm0vZGVidWcnO1xyXG5cclxuLyoqXHJcbiAqIEBlblxyXG4gKiBWYWx1ZSBwcm94eSBmYWN0b3J5IGZvciBzZXR0aW5nIHVuaWZvcm0gb24gbWF0ZXJpYWwgdGFyZ2V0LlxyXG4gKiBAemhcclxuICog55So5LqO6K6+572u5p2Q6LSo55uu5qCH5LiK5oyH5a6aIFVuaWZvcm0g55qE5puy57q/5YC85Luj55CG5bel5Y6C44CCXHJcbiAqL1xyXG5AY2NjbGFzcygnY2MuYW5pbWF0aW9uLlVuaWZvcm1Qcm94eUZhY3RvcnknKVxyXG5leHBvcnQgY2xhc3MgVW5pZm9ybVByb3h5RmFjdG9yeSBpbXBsZW1lbnRzIElWYWx1ZVByb3h5RmFjdG9yeSB7XHJcbiAgICAvKipcclxuICAgICAqIEBlbiBQYXNzIGluZGV4LlxyXG4gICAgICogQHpoIFBhc3Mg57Si5byV44CCXHJcbiAgICAgKi9cclxuICAgIEBwcm9wZXJ0eVxyXG4gICAgcHVibGljIHBhc3NJbmRleDogbnVtYmVyID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlbiBVbmlmb3JtIG5hbWUuXHJcbiAgICAgKiBAemggVW5pZm9ybSDlkI3np7DjgIJcclxuICAgICAqL1xyXG4gICAgQHByb3BlcnR5XHJcbiAgICBwdWJsaWMgdW5pZm9ybU5hbWU6IHN0cmluZyA9ICcnO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGVuXHJcbiAgICAgKiBTcGVjaWZ5IHRoZSBhaW1lZCBjaGFubmVsIG9mIHRoZSB1bmlmb3JtLlxyXG4gICAgICogVXNlIHRoaXMgd2hlbiB5b3UncmUgYWltaW5nIGF0IGEgc2luZ2xlIGNoYW5uZWwgb2YgdGhlIHVuaWZvcm0gaW5zdGVhZCBvZiB3aG8gdW5pZm9ybS5cclxuICAgICAqIEZvciBleGFtcGxlLCBvbmx5IGdyZWVuKDEpIGNoYW5uZWwgb2YgYSBjb2xvciB1bmlmb3JtLlxyXG4gICAgICogQHpoXHJcbiAgICAgKiDmjIflrprnm67moIcgVW5pZm9ybSDnmoTpgJrpgZPjgIJcclxuICAgICAqIOW9k+S9oOW4jOacm+iuvue9riBVbmlmb3JtIOWNleeLrOeahOmAmumBk+iAjOmdnuaVtOS4qiBVbmlmb3JtIOaXtuW6lOivpeW9k+S9v+eUqOatpOWtl+auteOAglxyXG4gICAgICog5L6L5aaC77yM5LuF6K6+572u6aKc6ImyIFVuaWZvcm0g55qE57qi6Imy6YCa6YGT44CCXHJcbiAgICAgKi9cclxuICAgIEBmbG9hdFxyXG4gICAgcHVibGljIGNoYW5uZWxJbmRleDogbnVtYmVyIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yICh1bmlmb3JtTmFtZT86IHN0cmluZywgcGFzc0luZGV4PzogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5wYXNzSW5kZXggPSBwYXNzSW5kZXggfHwgMDtcclxuICAgICAgICB0aGlzLnVuaWZvcm1OYW1lID0gdW5pZm9ybU5hbWUgfHwgJyc7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGZvclRhcmdldCAodGFyZ2V0OiBNYXRlcmlhbCk6IElWYWx1ZVByb3h5IHtcclxuICAgICAgICBjb25zdCBwYXNzID0gdGFyZ2V0LnBhc3Nlc1t0aGlzLnBhc3NJbmRleF07XHJcbiAgICAgICAgY29uc3QgaGFuZGxlID0gcGFzcy5nZXRIYW5kbGUodGhpcy51bmlmb3JtTmFtZSk7XHJcbiAgICAgICAgaWYgKGhhbmRsZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTWF0ZXJpYWwgXCIke3RhcmdldC5uYW1lfVwiIGhhcyBubyB1bmlmb3JtIFwiJHt0aGlzLnVuaWZvcm1OYW1lfVwiYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGJpbmRpbmdUeXBlID0gUGFzcy5nZXRCaW5kaW5nVHlwZUZyb21IYW5kbGUoaGFuZGxlKTtcclxuICAgICAgICBpZiAoYmluZGluZ1R5cGUgPT09IEdGWEJpbmRpbmdUeXBlLlVOSUZPUk1fQlVGRkVSKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlYWxIYW5kbGUgPSB0aGlzLmNoYW5uZWxJbmRleCA9PT0gdW5kZWZpbmVkID8gaGFuZGxlIDogcGFzcy5nZXRIYW5kbGUodGhpcy51bmlmb3JtTmFtZSwgdGhpcy5jaGFubmVsSW5kZXgsIEdGWFR5cGUuRkxPQVQpO1xyXG4gICAgICAgICAgICBpZiAocmVhbEhhbmRsZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuaWZvcm0gXCIke3RoaXMudW5pZm9ybU5hbWV9IChpbiBtYXRlcmlhbCAke3RhcmdldC5uYW1lfSkgaGFzIG5vIGNoYW5uZWwgJHt0aGlzLmNoYW5uZWxJbmRleH1cImApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpc1VuaWZvcm1BcnJheShwYXNzLCB0aGlzLnVuaWZvcm1OYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXQ6ICh2YWx1ZTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3Muc2V0VW5pZm9ybUFycmF5KHJlYWxIYW5kbGUsIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0OiAodmFsdWU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXNzLnNldFVuaWZvcm0ocmVhbEhhbmRsZSwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChiaW5kaW5nVHlwZSA9PT0gR0ZYQmluZGluZ1R5cGUuU0FNUExFUikge1xyXG4gICAgICAgICAgICBjb25zdCBiaW5kaW5nID0gUGFzcy5nZXRCaW5kaW5nRnJvbUhhbmRsZShoYW5kbGUpO1xyXG4gICAgICAgICAgICBjb25zdCBwcm9wID0gcGFzcy5wcm9wZXJ0aWVzW3RoaXMudW5pZm9ybU5hbWVdO1xyXG4gICAgICAgICAgICBjb25zdCB0ZXhOYW1lID0gcHJvcCAmJiBwcm9wLnZhbHVlID8gcHJvcC52YWx1ZSArICctdGV4dHVyZScgOiBnZXREZWZhdWx0RnJvbVR5cGUocHJvcC50eXBlKSBhcyBzdHJpbmc7XHJcbiAgICAgICAgICAgIGxldCBkZnRUZXggPSBidWlsdGluUmVzTWdyLmdldDxUZXh0dXJlQmFzZT4odGV4TmFtZSk7XHJcbiAgICAgICAgICAgIGlmICghZGZ0VGV4KSB7XHJcbiAgICAgICAgICAgICAgICB3YXJuKGBJbGxlZ2FsIHRleHR1cmUgZGVmYXVsdCB2YWx1ZTogJHt0ZXhOYW1lfS5gKTtcclxuICAgICAgICAgICAgICAgIGRmdFRleCA9IGJ1aWx0aW5SZXNNZ3IuZ2V0PFRleHR1cmVCYXNlPignZGVmYXVsdC10ZXh0dXJlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHNldDogKHZhbHVlOiBUZXh0dXJlQmFzZSB8IFNwcml0ZUZyYW1lKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSkgeyB2YWx1ZSA9IGRmdFRleDsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHR2ID0gdmFsdWUuZ2V0R0ZYVGV4dHVyZVZpZXcoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXR2IHx8ICF0di50ZXh0dXJlLndpZHRoIHx8ICF0di50ZXh0dXJlLmhlaWdodCkgeyByZXR1cm47IH1cclxuICAgICAgICAgICAgICAgICAgICBwYXNzLmJpbmRUZXh0dXJlVmlldyhiaW5kaW5nLCB0dik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgVGV4dHVyZUJhc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFzcy5iaW5kU2FtcGxlcihiaW5kaW5nLCBzYW1wbGVyTGliLmdldFNhbXBsZXIoY2MuZ2FtZS5fZ2Z4RGV2aWNlLCB2YWx1ZS5nZXRTYW1wbGVySGFzaCgpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEFuaW1hdGlvbnMgYXJlIG5vdCBhdmFpbGFibGUgZm9yIHVuaWZvcm1zIHdpdGggYmluZGluZyB0eXBlICR7YmluZGluZ1R5cGV9LmApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaXNVbmlmb3JtQXJyYXkgKHBhc3M6IFBhc3MsIG5hbWU6IHN0cmluZykge1xyXG4gICAgZm9yIChjb25zdCBibG9jayBvZiBwYXNzLnNoYWRlckluZm8uYmxvY2tzKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCB1bmlmb3JtIG9mIGJsb2NrLm1lbWJlcnMpIHtcclxuICAgICAgICAgICAgaWYgKHVuaWZvcm0ubmFtZSA9PT0gbmFtZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuaWZvcm0uY291bnQgPiAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcbiJdfQ==