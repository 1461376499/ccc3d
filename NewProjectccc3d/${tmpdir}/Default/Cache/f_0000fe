(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../utils/js.js", "./class.js", "./object.js", "./utils/attribute.js", "./utils/compiler.js", "../default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../utils/js.js"), require("./class.js"), require("./object.js"), require("./utils/attribute.js"), require("./utils/compiler.js"), require("../default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.js, global._class, global.object, global.attribute, global.compiler, global.defaultConstants);
    global.instantiateJit = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, js, _class, _object, Attr, _compiler, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.equalsToDefault = equalsToDefault;
  _exports.compile = compile;
  js = _interopRequireWildcard(js);
  _class = _interopRequireDefault(_class);
  Attr = _interopRequireWildcard(Attr);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  // @ts-ignore
  var Destroyed = _object.CCObject.Flags.Destroyed; // @ts-ignore

  var PersistentMask = _object.CCObject.Flags.PersistentMask;
  var DEFAULT = Attr.DELIMETER + 'default';
  var IDENTIFIER_RE = _class.default.IDENTIFIER_RE;
  var VAR = 'var ';
  var LOCAL_OBJ = 'o';
  var LOCAL_TEMP_OBJ = 't';
  var LOCAL_ARRAY = 'a';
  var LINE_INDEX_OF_NEW_OBJ = 0;
  var DEFAULT_MODULE_CACHE = {
    'cc.Node': 'cc.Node',
    'cc.Sprite': 'cc.Sprite',
    'cc.Label': 'cc.Label',
    'cc.Button': 'cc.Button',
    'cc.Widget': 'cc.Widget',
    'cc.Animation': 'cc.Animation',
    'cc.ClickEvent': false,
    'cc.PrefabInfo': false
  };
  var escapeForJS = _class.default.escapeForJS; // HELPER CLASSES
  // ('foo', 'bar')
  // -> 'var foo = bar;'

  var Declaration = /*#__PURE__*/function () {
    function Declaration(varName, expression) {
      _classCallCheck(this, Declaration);

      this.varName = void 0;
      this.expression = void 0;
      this.varName = varName;
      this.expression = expression;
    }

    _createClass(Declaration, [{
      key: "toString",
      value: function toString() {
        return VAR + this.varName + '=' + this.expression + ';';
      }
    }]);

    return Declaration;
  }(); // ('a =', 'var b = x')
  // -> 'var b = a = x';
  // ('a =', 'x')
  // -> 'a = x';


  function mergeDeclaration(statement, expression) {
    if (expression instanceof Declaration) {
      return new Declaration(expression.varName, statement + expression.expression);
    } else {
      return statement + expression;
    }
  } // ('a', ['var b = x', 'b.foo = bar'])
  // -> 'var b = a = x;'
  // -> 'b.foo = bar;'
  // ('a', 'var b = x')
  // -> 'var b = a = x;'
  // ('a', 'x')
  // -> 'a = x;'


  function writeAssignment(codeArray, statement, expression) {
    if (Array.isArray(expression)) {
      expression[0] = mergeDeclaration(statement, expression[0]);
      codeArray.push(expression);
    } else {
      codeArray.push(mergeDeclaration(statement, expression) + ';');
    }
  } // ('foo', 'bar')
  // -> 'targetExpression.foo = bar'
  // ('foo1', 'bar1')
  // ('foo2', 'bar2')
  // -> 't = targetExpression;'
  // -> 't.foo1 = bar1;'
  // -> 't.foo2 = bar2;'


  var Assignments = /*#__PURE__*/function () {
    function Assignments(targetExpression) {
      _classCallCheck(this, Assignments);

      this._exps = void 0;
      this._targetExp = void 0;
      this._exps = [];
      this._targetExp = targetExpression;
    }

    _createClass(Assignments, [{
      key: "append",
      value: function append(key, expression) {
        this._exps.push([key, expression]);
      }
    }, {
      key: "writeCode",
      value: function writeCode(codeArray) {
        var targetVar;

        if (this._exps.length > 1) {
          codeArray.push(LOCAL_TEMP_OBJ + '=' + this._targetExp + ';');
          targetVar = LOCAL_TEMP_OBJ;
        } else if (this._exps.length === 1) {
          targetVar = this._targetExp;
        } else {
          return;
        } // tslint:disable: prefer-for-of


        for (var i = 0; i < this._exps.length; i++) {
          var pair = this._exps[i];
          writeAssignment(codeArray, targetVar + getPropAccessor(pair[0]) + '=', pair[1]);
        }
      }
    }]);

    return Assignments;
  }();

  Assignments.pool = void 0;
  Assignments.pool = new js.Pool(function (obj) {
    obj._exps.length = 0;
    obj._targetExp = null;
  }, 1); // @ts-ignore

  Assignments.pool.get = function (targetExpression) {
    var cache = this._get() || new Assignments();
    cache._targetExp = targetExpression;
    return cache;
  }; // HELPER FUNCTIONS


  function getPropAccessor(key) {
    return IDENTIFIER_RE.test(key) ? '.' + key : '[' + escapeForJS(key) + ']';
  } //

  /*
   * Variables:
   * {Object[]} O - objs list
   * {Function[]} F - constructor list
   * {Node} [R] - specify an instantiated prefabRoot that all references to prefabRoot in prefab will redirect to
   * {Object} o - current creating object
   */


  var Parser = /*#__PURE__*/function () {
    /*
    * @method constructor
    * @param {Object} obj - the object to parse
    * @param {Node} [parent]
    */
    function Parser(obj, parent) {
      _classCallCheck(this, Parser);

      this.parent = void 0;
      this.objsToClear_iN$t = void 0;
      this.codeArray = void 0;
      this.objs = void 0;
      this.funcs = void 0;
      this.funcModuleCache = void 0;
      this.globalVariables = void 0;
      this.globalVariableId = void 0;
      this.localVariableId = void 0;
      this.result = void 0;
      this.parent = parent;
      this.objsToClear_iN$t = []; // used to reset _iN$t variable

      this.codeArray = []; // datas for generated code

      this.objs = [];
      this.funcs = [];
      this.funcModuleCache = js.createMap();
      js.mixin(this.funcModuleCache, DEFAULT_MODULE_CACHE); // {String[]} - variable names for circular references,
      //              not really global, just local variables shared between sub functions

      this.globalVariables = []; // incremental id for new global variables

      this.globalVariableId = 0; // incremental id for new local variables

      this.localVariableId = 0; // generate codeArray
      // if (Array.isArray(obj)) {
      //    this.codeArray.push(this.instantiateArray(obj));
      // }
      // else {

      this.codeArray.push(VAR + LOCAL_OBJ + ',' + LOCAL_TEMP_OBJ + ';', 'if(R){', LOCAL_OBJ + '=R;', '}else{', LOCAL_OBJ + '=R=new ' + this.getFuncModule(obj.constructor, true) + '();', '}');
      obj._iN$t = {
        globalVar: 'R'
      };
      this.objsToClear_iN$t.push(obj);
      this.enumerateObject(this.codeArray, obj); // }
      // generate code

      var globalVariablesDeclaration;

      if (this.globalVariables.length > 0) {
        globalVariablesDeclaration = VAR + this.globalVariables.join(',') + ';';
      }

      var code = (0, _compiler.flattenCodeArray)(['return (function(R){', globalVariablesDeclaration || [], this.codeArray, 'return o;', '})']); // generate method and bind with objs

      this.result = Function('O', 'F', code)(this.objs, this.funcs); // if (TEST && !isPhantomJS) {
      //     console.log(code);
      // }
      // cleanup

      for (var i = 0, len = this.objsToClear_iN$t.length; i < len; ++i) {
        this.objsToClear_iN$t[i]._iN$t = null;
      }

      this.objsToClear_iN$t.length = 0;
    }

    _createClass(Parser, [{
      key: "getFuncModule",
      value: function getFuncModule(func, usedInNew) {
        var clsName = js.getClassName(func);

        if (clsName) {
          var cache = this.funcModuleCache[clsName];

          if (cache) {
            return cache;
          } else if (cache === undefined) {
            var clsNameIsModule = clsName.indexOf('.') !== -1;

            if (clsNameIsModule) {
              try {
                // ensure is module
                clsNameIsModule = func === Function('return ' + clsName)();

                if (clsNameIsModule) {
                  this.funcModuleCache[clsName] = clsName;
                  return clsName;
                }
              } catch (e) {}
            }
          }
        }

        var index = this.funcs.indexOf(func);

        if (index < 0) {
          index = this.funcs.length;
          this.funcs.push(func);
        }

        var res = 'F[' + index + ']';

        if (usedInNew) {
          res = '(' + res + ')';
        }

        this.funcModuleCache[clsName] = res;
        return res;
      }
    }, {
      key: "getObjRef",
      value: function getObjRef(obj) {
        var index = this.objs.indexOf(obj);

        if (index < 0) {
          index = this.objs.length;
          this.objs.push(obj);
        }

        return 'O[' + index + ']';
      }
    }, {
      key: "setValueType",
      value: function setValueType(codeArray, defaultValue, srcValue, targetExpression) {
        // @ts-ignore
        var assignments = Assignments.pool.get(targetExpression);
        var fastDefinedProps = defaultValue.constructor.__props__;

        if (!fastDefinedProps) {
          fastDefinedProps = Object.keys(defaultValue);
        }

        for (var i = 0; i < fastDefinedProps.length; i++) {
          var propName = fastDefinedProps[i];
          var prop = srcValue[propName];

          if (defaultValue[propName] === prop) {
            continue;
          }

          var expression = this.enumerateField(srcValue, propName, prop);
          assignments.append(propName, expression);
        }

        assignments.writeCode(codeArray);
        Assignments.pool.put(assignments);
      }
    }, {
      key: "enumerateCCClass",
      value: function enumerateCCClass(codeArray, obj, klass) {
        var props = klass.__values__;
        var attrs = Attr.getClassAttrs(klass);

        for (var p = 0; p < props.length; p++) {
          var key = props[p];
          var val = obj[key];
          var defaultValue = attrs[key + DEFAULT];

          if (equalsToDefault(defaultValue, val)) {
            continue;
          }

          if (_typeof(val) === 'object' && val instanceof cc.ValueType) {
            defaultValue = _class.default.getDefault(defaultValue);

            if (defaultValue && defaultValue.constructor === val.constructor) {
              // fast case
              var targetExpression = LOCAL_OBJ + getPropAccessor(key);
              this.setValueType(codeArray, defaultValue, val, targetExpression);
              continue;
            }
          }

          this.setObjProp(codeArray, obj, key, val);
        }
      }
    }, {
      key: "instantiateArray",
      value: function instantiateArray(value) {
        if (value.length === 0) {
          return '[]';
        }

        var arrayVar = LOCAL_ARRAY + ++this.localVariableId;
        var declaration = new Declaration(arrayVar, 'new Array(' + value.length + ')');
        var codeArray = [declaration]; // assign a _iN$t flag to indicate that this object has been parsed.

        value._iN$t = {
          globalVar: '',
          // the name of declared global variable used to access this object
          source: codeArray // the source code array for this object

        };
        this.objsToClear_iN$t.push(value);

        for (var i = 0; i < value.length; ++i) {
          var statement = arrayVar + '[' + i + ']=';
          var expression = this.enumerateField(value, i, value[i]);
          writeAssignment(codeArray, statement, expression);
        }

        return codeArray;
      }
    }, {
      key: "enumerateField",
      value: function enumerateField(obj, key, value) {
        if (_typeof(value) === 'object' && value) {
          var _iN$t = value._iN$t;

          if (_iN$t) {
            // parsed
            var globalVar = _iN$t.globalVar;

            if (!globalVar) {
              // declare a global var
              globalVar = _iN$t.globalVar = 'v' + ++this.globalVariableId;
              this.globalVariables.push(globalVar); // insert assignment statement to assign to global var

              var line = _iN$t.source[LINE_INDEX_OF_NEW_OBJ];
              _iN$t.source[LINE_INDEX_OF_NEW_OBJ] = mergeDeclaration(globalVar + '=', line); // if (typeof line ==='string' && line.startsWith(VAR)) {
              //     // var o=xxx -> var o=global=xxx
              //     var LEN_OF_VAR_O = 5;
              //     _iN$t.source[LINE_INDEX_OF_NEW_OBJ] = line.slice(0, LEN_OF_VAR_O) + '=' + globalVar + line.slice(LEN_OF_VAR_O);
              // }
            }

            return globalVar;
          } else if (Array.isArray(value)) {
            return this.instantiateArray(value);
          } else {
            return this.instantiateObj(value);
          }
        } else if (typeof value === 'function') {
          return this.getFuncModule(value);
        } else if (typeof value === 'string') {
          return escapeForJS(value);
        } else {
          if (key === '_objFlags' && obj instanceof _object.CCObject) {
            value &= PersistentMask;
          }

          return value;
        }
      }
    }, {
      key: "setObjProp",
      value: function setObjProp(codeArray, obj, key, value) {
        var statement = LOCAL_OBJ + getPropAccessor(key) + '=';
        var expression = this.enumerateField(obj, key, value);
        writeAssignment(codeArray, statement, expression);
      } // codeArray - the source code array for this object

    }, {
      key: "enumerateObject",
      value: function enumerateObject(codeArray, obj) {
        var klass = obj.constructor;

        if (cc.Class._isCCClass(klass)) {
          this.enumerateCCClass(codeArray, obj, klass);
        } else {
          // primitive javascript object
          for (var key in obj) {
            if (!obj.hasOwnProperty(key) || key.charCodeAt(0) === 95 && key.charCodeAt(1) === 95 && // starts with "__"
            key !== '__type__') {
              continue;
            }

            var value = obj[key];

            if (_typeof(value) === 'object' && value && value === obj._iN$t) {
              continue;
            }

            this.setObjProp(codeArray, obj, key, value);
          }
        }
      }
    }, {
      key: "instantiateObj",
      value: function instantiateObj(obj) {
        if (obj instanceof cc.ValueType) {
          return _class.default.getNewValueTypeCode(obj);
        }

        if (obj instanceof cc.Asset) {
          // register to asset list and just return the reference.
          return this.getObjRef(obj);
        }

        if (obj._objFlags & Destroyed) {
          // the same as cc.isValid(obj)
          return null;
        }

        var createCode;
        var ctor = obj.constructor;

        if (cc.Class._isCCClass(ctor)) {
          if (this.parent) {
            if (this.parent instanceof cc.Component) {
              if (obj instanceof cc._BaseNode || obj instanceof cc.Component) {
                return this.getObjRef(obj);
              }
            } else if (this.parent instanceof cc._BaseNode) {
              if (obj instanceof cc._BaseNode) {
                if (!obj.isChildOf(this.parent)) {
                  // should not clone other nodes if not descendant
                  return this.getObjRef(obj);
                }
              } else if (obj instanceof cc.Component) {
                if (!obj.node.isChildOf(this.parent)) {
                  // should not clone other component if not descendant
                  return this.getObjRef(obj);
                }
              }
            }
          }

          createCode = new Declaration(LOCAL_OBJ, 'new ' + this.getFuncModule(ctor, true) + '()');
        } else if (ctor === Object) {
          createCode = new Declaration(LOCAL_OBJ, '{}');
        } else if (!ctor) {
          createCode = new Declaration(LOCAL_OBJ, 'Object.create(null)');
        } else {
          // do not clone unknown type
          return this.getObjRef(obj);
        }

        var codeArray = [createCode]; // assign a _iN$t flag to indicate that this object has been parsed.

        obj._iN$t = {
          globalVar: '',
          // the name of declared global variable used to access this object
          source: codeArray // the source code array for this object
          // propName: '',     // the propName this object defined in its source code,
          //                  // if defined, use LOCAL_OBJ.propName to access the obj, else just use o

        };
        this.objsToClear_iN$t.push(obj);
        this.enumerateObject(codeArray, obj);
        return ['(function(){', codeArray, 'return o;})();'];
      }
    }]);

    return Parser;
  }();

  function equalsToDefault(def, value) {
    if (typeof def === 'function') {
      try {
        def = def();
      } catch (e) {
        return false;
      }
    }

    if (def === value) {
      return true;
    }

    if (def && value) {
      if (def instanceof cc.ValueType && def.equals(value)) {
        return true;
      }

      if (Array.isArray(def) && Array.isArray(value) || def.constructor === Object && value.constructor === Object) {
        try {
          return Array.isArray(def) && Array.isArray(value) && def.length === 0 && value.length === 0;
        } catch (e) {}
      }
    }

    return false;
  }

  function compile(node) {
    var root = node instanceof cc._BaseNode && node;
    var parser = new Parser(node, root);
    return parser.result;
  }

  if (_defaultConstants.TEST) {
    cc._Test.IntantiateJit = {
      equalsToDefault: equalsToDefault,
      compile: compile
    };
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,