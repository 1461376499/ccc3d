(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../default-constants.js", "../../assets/material.js", "../../components/component.js", "../../data/class-decorator.js", "../../renderer/core/material-instance.js", "../../scene-graph/layers.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../default-constants.js"), require("../../assets/material.js"), require("../../components/component.js"), require("../../data/class-decorator.js"), require("../../renderer/core/material-instance.js"), require("../../scene-graph/layers.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.defaultConstants, global.material, global.component, global.classDecorator, global.materialInstance, global.layers);
    global.renderableComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _defaultConstants, _material, _component, _classDecorator, _materialInstance, _layers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RenderableComponent = void 0;

  var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  var _matInsInfo = {
    parent: null,
    owner: null,
    subModelIdx: 0
  };
  var RenderableComponent = (_dec = (0, _classDecorator.ccclass)('cc.RenderableComponent'), _dec2 = (0, _classDecorator.property)({
    type: [_material.Material]
  }), _dec3 = (0, _classDecorator.property)({
    visible: false
  }), _dec4 = (0, _classDecorator.property)({
    type: _material.Material,
    displayName: 'Materials'
  }), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
    _inherits(RenderableComponent, _Component);

    function RenderableComponent() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, RenderableComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RenderableComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _initializerDefineProperty(_this, "_materials", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_visFlags", _descriptor2, _assertThisInitialized(_this));

      _this._materialInstances = [];
      _this._models = [];
      return _this;
    }

    _createClass(RenderableComponent, [{
      key: "getMaterial",

      /**
       * @en Get the shared material asset of the specified sub-model.
       * @zh 获取指定子模型的共享材质资源。
       */
      value: function getMaterial(idx) {
        if (idx < 0 || idx >= this._materials.length) {
          return null;
        }

        return this._materials[idx];
      }
      /**
       * @en Set the shared material asset of the specified sub-model,
       * new material instance will be created automatically if the sub-model is already using one.
       * @zh 设置指定子模型的 sharedMaterial，如果对应位置有材质实例则会创建一个对应的材质实例。
       */

    }, {
      key: "setMaterial",
      value: function setMaterial(material, index) {
        if (material && material instanceof _materialInstance.MaterialInstance) {
          console.error('Can\'t set a material instance to a sharedMaterial slot');
        }

        this._materials[index] = material;
        var inst = this._materialInstances[index];

        if (inst) {
          if (inst.parent !== this._materials[index]) {
            inst.destroy();
            this._materialInstances[index] = null;

            this._onMaterialModified(index, this._materials[index]);
          }
        } else {
          this._onMaterialModified(index, this._materials[index]);
        }
      }
    }, {
      key: "getMaterialInstance",

      /**
       * @en Get the material instance of the specified sub-model.
       * @zh 获取指定子模型的材质实例。
       */
      value: function getMaterialInstance(idx) {
        var mat = this._materials[idx];

        if (!mat) {
          return null;
        }

        if (this._materialInstances[idx] == null) {
          _matInsInfo.parent = this._materials[idx];
          _matInsInfo.owner = this;
          _matInsInfo.subModelIdx = idx;
          var instantiated = new _materialInstance.MaterialInstance(_matInsInfo);
          this.setMaterialInstance(idx, instantiated);
        }

        return this._materialInstances[idx];
      }
      /**
       * @en Set the material instance of the specified sub-model.
       * @zh 获取指定子模型的材质实例。
       */

    }, {
      key: "setMaterialInstance",
      value: function setMaterialInstance(index, matInst) {
        if (matInst && matInst.parent) {
          if (matInst !== this._materialInstances[index]) {
            this._materialInstances[index] = matInst;

            this._onMaterialModified(index, matInst);
          }
        } else {
          if (matInst !== this._materials[index]) {
            this.setMaterial(matInst, index);
          }
        }
      }
      /**
       * @en Get the actual rendering material of the specified sub-model.
       * (material instance if there is one, or the shared material asset)
       * @zh 获取指定位置可供渲染的材质，如果有材质实例则使用材质实例，如果没有则使用材质资源
       */

    }, {
      key: "getRenderMaterial",
      value: function getRenderMaterial(index) {
        return this._materialInstances[index] || this._materials[index];
      }
    }, {
      key: "_collectModels",
      value: function _collectModels() {
        return this._models;
      }
    }, {
      key: "_attachToScene",
      value: function _attachToScene() {}
    }, {
      key: "_detachFromScene",
      value: function _detachFromScene() {}
    }, {
      key: "_onMaterialModified",
      value: function _onMaterialModified(index, material) {}
    }, {
      key: "_onRebuildPSO",
      value: function _onRebuildPSO(index, material) {}
    }, {
      key: "_clearMaterials",
      value: function _clearMaterials() {}
    }, {
      key: "_onVisibilityChange",
      value: function _onVisibilityChange(val) {}
    }, {
      key: "visibility",
      get: function get() {
        return this._visFlags;
      },
      set: function set(val) {
        this._visFlags = val;

        this._onVisibilityChange(val);
      }
    }, {
      key: "sharedMaterials",
      get: function get() {
        // if we don't create an array copy, the editor will modify the original array directly.
        return _defaultConstants.EDITOR && this._materials.slice() || this._materials;
      },
      set: function set(val) {
        for (var i = 0; i < val.length; i++) {
          if (val[i] !== this._materials[i]) {
            this.setMaterial(val[i], i);
          }
        }

        if (val.length < this._materials.length) {
          for (var _i = val.length; _i < this._materials.length; _i++) {
            this.setMaterial(null, _i);
          }

          this._materials.splice(val.length);
        }
      }
      /**
       * @en The materials of the model.
       * @zh 模型材质。
       */

    }, {
      key: "materials",
      get: function get() {
        for (var i = 0; i < this._materials.length; i++) {
          this._materialInstances[i] = this.getMaterialInstance(i);
        }

        return this._materialInstances;
      },
      set: function set(val) {
        var dLen = val.length - this._materials.length;

        if (dLen > 0) {
          this._materials.length = val.length;
          this._materialInstances.length = val.length;
        } else if (dLen < 0) {
          for (var i = this._materials.length - dLen; i < this._materials.length; ++i) {
            this.setMaterialInstance(i, null);
          }
        }

        for (var _i2 = 0; _i2 < this._materialInstances.length; _i2++) {
          // tslint:disable-next-line: triple-equals
          if (this._materialInstances[_i2] != val[_i2]) {
            this.setMaterialInstance(_i2, val[_i2]);
          }
        }
      }
    }, {
      key: "sharedMaterial",
      get: function get() {
        return this.getMaterial(0);
      }
    }, {
      key: "material",
      get: function get() {
        return this.getMaterialInstance(0);
      },
      set: function set(val) {
        if (this._materials.length === 1 && this._materials[0] === val) {
          return;
        }

        this.setMaterialInstance(0, val);
      }
    }]);

    return RenderableComponent;
  }(_component.Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_materials", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return [];
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_visFlags", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _layers.Layers.Enum.NONE;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "visibility", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "visibility"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "sharedMaterials", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "sharedMaterials"), _class2.prototype)), _class2)) || _class);
  _exports.RenderableComponent = RenderableComponent;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,