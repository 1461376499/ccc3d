(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../default-constants.js", "../../animation/skeletal-animation-data-hub.js", "../../animation/transform-utils.js", "../../geometry/index.js", "../../gfx/define.js", "../../gfx/device.js", "../../math/index.js", "../../pipeline/define.js", "../core/sampler-lib.js", "../core/texture-buffer-pool.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../default-constants.js"), require("../../animation/skeletal-animation-data-hub.js"), require("../../animation/transform-utils.js"), require("../../geometry/index.js"), require("../../gfx/define.js"), require("../../gfx/device.js"), require("../../math/index.js"), require("../../pipeline/define.js"), require("../core/sampler-lib.js"), require("../core/texture-buffer-pool.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.defaultConstants, global.skeletalAnimationDataHub, global.transformUtils, global.index, global.define, global.device, global.index, global.define, global.samplerLib, global.textureBufferPool);
    global.skeletalAnimationUtils = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _defaultConstants, _skeletalAnimationDataHub, _transformUtils, _index, _define, _device, _index2, _define2, _samplerLib, _textureBufferPool) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.selectJointsMediumFormat = selectJointsMediumFormat;
  _exports.JointAnimationInfo = _exports.JointTexturePool = _exports.jointTextureSamplerHash = _exports.MINIMUM_JOINT_TEXTURE_SIZE = _exports.uploadJointData = void 0;

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  // change here and cc-skinning.chunk to use other skinning algorithms
  var uploadJointData = uploadJointDataLBS;
  _exports.uploadJointData = uploadJointData;
  var MINIMUM_JOINT_TEXTURE_SIZE = _defaultConstants.EDITOR ? 2040 : 480; // have to be multiples of 12

  _exports.MINIMUM_JOINT_TEXTURE_SIZE = MINIMUM_JOINT_TEXTURE_SIZE;

  function selectJointsMediumFormat(device) {
    if (device.hasFeature(_device.GFXFeature.TEXTURE_FLOAT)) {
      return _define.GFXFormat.RGBA32F;
    } else {
      return _define.GFXFormat.RGBA8;
    }
  } // negative zeros cannot be decoded correctly at GLSL 100 minimum highp float precision, 1/1024
  // and it has a significant impact on the final transformation


  function makeStable(n) {
    return n ? n : 0;
  } // Linear Blending Skinning


  function uploadJointDataLBS(out, base, mat, firstBone) {
    out[base + 0] = makeStable(mat.m00);
    out[base + 1] = makeStable(mat.m01);
    out[base + 2] = makeStable(mat.m02);
    out[base + 3] = makeStable(mat.m12);
    out[base + 4] = makeStable(mat.m04);
    out[base + 5] = makeStable(mat.m05);
    out[base + 6] = makeStable(mat.m06);
    out[base + 7] = makeStable(mat.m13);
    out[base + 8] = makeStable(mat.m08);
    out[base + 9] = makeStable(mat.m09);
    out[base + 10] = makeStable(mat.m10);
    out[base + 11] = makeStable(mat.m14);
  }

  var dq_0 = new _index2.Quat();
  var dq_1 = new _index2.Quat();
  var v3_1 = new _index2.Vec3();
  var qt_1 = new _index2.Quat();
  var v3_2 = new _index2.Vec3(); // Dual Quaternion Skinning

  function uploadJointDataDQS(out, base, mat, firstBone) {
    _index2.Mat4.toRTS(mat, qt_1, v3_1, v3_2); // sign consistency


    if (firstBone) {
      _index2.Quat.copy(dq_0, qt_1);
    } else if (_index2.Quat.dot(dq_0, qt_1) < 0) {
      _index2.Quat.multiplyScalar(qt_1, qt_1, -1);
    } // conversion


    _index2.Quat.set(dq_1, v3_1.x, v3_1.y, v3_1.z, 0);

    _index2.Quat.multiplyScalar(dq_1, _index2.Quat.multiply(dq_1, dq_1, qt_1), 0.5); // upload


    out[base + 0] = makeStable(qt_1.x);
    out[base + 1] = makeStable(qt_1.y);
    out[base + 2] = makeStable(qt_1.z);
    out[base + 3] = makeStable(qt_1.w);
    out[base + 4] = makeStable(dq_1.x);
    out[base + 5] = makeStable(dq_1.y);
    out[base + 6] = makeStable(dq_1.z);
    out[base + 7] = makeStable(dq_1.w);
    out[base + 8] = makeStable(v3_2.x);
    out[base + 9] = makeStable(v3_2.y);
    out[base + 10] = makeStable(v3_2.z);
  }

  function roundUpTextureSize(targetLength, formatSize) {
    var formatScale = 4 / Math.sqrt(formatSize);
    return Math.ceil(Math.max(MINIMUM_JOINT_TEXTURE_SIZE * formatScale, targetLength) / 12) * 12;
  }

  var jointTextureSamplerHash = (0, _samplerLib.genSamplerHash)([_define.GFXFilter.POINT, _define.GFXFilter.POINT, _define.GFXFilter.NONE, _define.GFXAddress.CLAMP, _define.GFXAddress.CLAMP, _define.GFXAddress.CLAMP]);
  _exports.jointTextureSamplerHash = jointTextureSamplerHash;
  var v3_3 = new _index2.Vec3();
  var v3_4 = new _index2.Vec3();
  var v3_min = new _index2.Vec3();
  var v3_max = new _index2.Vec3();
  var m4_1 = new _index2.Mat4();
  var m4_2 = new _index2.Mat4();
  var ab_1 = new _index.aabb();
  // Have to use some big number to replace the actual 'Infinity'.
  // For (Infinity - Infinity) evaluates to NaN
  var Inf = Number.MAX_SAFE_INTEGER;

  var JointTexturePool = /*#__PURE__*/function () {
    _createClass(JointTexturePool, [{
      key: "pixelsPerJoint",
      // per skeleton per clip
      // hash -> chunkIdx
      get: function get() {
        return this._pixelsPerJoint;
      }
    }]);

    function JointTexturePool(device) {
      _classCallCheck(this, JointTexturePool);

      this._device = void 0;
      this._pool = void 0;
      this._textureBuffers = new Map();
      this._formatSize = void 0;
      this._pixelsPerJoint = void 0;
      this._customPool = void 0;
      this._chunkIdxMap = new Map();
      this._device = device;
      var format = selectJointsMediumFormat(this._device);
      this._formatSize = _define.GFXFormatInfos[format].size;
      this._pixelsPerJoint = 48 / this._formatSize;
      this._pool = new _textureBufferPool.TextureBufferPool(device);

      this._pool.initialize({
        format: format,
        roundUpFn: roundUpTextureSize
      });

      this._customPool = new _textureBufferPool.TextureBufferPool(device);

      this._customPool.initialize({
        format: format,
        roundUpFn: roundUpTextureSize
      });
    }

    _createClass(JointTexturePool, [{
      key: "clear",
      value: function clear() {
        this._pool.destroy();

        this._textureBuffers.clear();
      }
    }, {
      key: "registerCustomTextureLayouts",
      value: function registerCustomTextureLayouts(layouts) {
        for (var i = 0; i < layouts.length; i++) {
          var layout = layouts[i];

          var chunkIdx = this._customPool.createChunk(layout.textureLength);

          for (var j = 0; j < layout.contents.length; j++) {
            var content = layout.contents[j];
            var skeleton = content.skeleton;

            this._chunkIdxMap.set(skeleton, chunkIdx); // include default pose too


            for (var k = 0; k < content.clips.length; k++) {
              var clip = content.clips[k];

              this._chunkIdxMap.set(skeleton ^ clip, chunkIdx);
            }
          }
        }
      }
      /**
       * @en
       * Get joint texture for the default pose.
       * @zh
       * 获取默认姿势的骨骼贴图。
       */

    }, {
      key: "getDefaultPoseTexture",
      value: function getDefaultPoseTexture(skeleton, mesh, skinningRoot) {
        var hash = skeleton.hash ^ 0; // may not equal to skeleton.hash

        var texture = this._textureBuffers.get(hash) || null;

        if (texture && texture.bounds.has(mesh.hash)) {
          texture.refCount++;
          return texture;
        }

        var joints = skeleton.joints,
            bindposes = skeleton.bindposes;
        var textureBuffer = null;
        var buildTexture = false;
        var jointCount = joints.length;

        if (!texture) {
          var bufSize = jointCount * 12;

          var customChunkIdx = this._chunkIdxMap.get(hash);

          var handle = customChunkIdx !== undefined ? this._customPool.alloc(bufSize * Float32Array.BYTES_PER_ELEMENT, customChunkIdx) : this._pool.alloc(bufSize * Float32Array.BYTES_PER_ELEMENT);

          if (!handle) {
            return texture;
          }

          texture = {
            pixelOffset: handle.start / this._formatSize,
            refCount: 1,
            bounds: new Map(),
            skeletonHash: skeleton.hash,
            clipHash: 0,
            readyToBeDeleted: false,
            handle: handle
          };
          textureBuffer = new Float32Array(bufSize);
          buildTexture = true;
        } else {
          texture.refCount++;
        }

        _index2.Vec3.set(v3_min, Inf, Inf, Inf);

        _index2.Vec3.set(v3_max, -Inf, -Inf, -Inf);

        var boneSpaceBounds = mesh.getBoneSpaceBounds(skeleton);

        for (var j = 0, offset = 0; j < jointCount; j++, offset += 12) {
          var node = skinningRoot.getChildByPath(joints[j]);
          var mat = node ? (0, _transformUtils.getWorldTransformUntilRoot)(node, skinningRoot, m4_1) : skeleton.inverseBindposes[j];
          var bound = boneSpaceBounds[j];

          if (bound) {
            _index.aabb.transform(ab_1, bound, mat);

            ab_1.getBoundary(v3_3, v3_4);

            _index2.Vec3.min(v3_min, v3_min, v3_3);

            _index2.Vec3.max(v3_max, v3_max, v3_4);
          }

          if (buildTexture) {
            if (node) {
              _index2.Mat4.multiply(mat, mat, bindposes[j]);
            }

            uploadJointData(textureBuffer, offset, node ? mat : _index2.Mat4.IDENTITY, j === 0);
          }
        }

        var bounds = [new _index.aabb()];
        texture.bounds.set(mesh.hash, bounds);

        _index.aabb.fromPoints(bounds[0], v3_min, v3_max);

        if (buildTexture) {
          this._pool.update(texture.handle, textureBuffer.buffer);

          this._textureBuffers.set(hash, texture);
        }

        return texture;
      }
      /**
       * @en
       * Get joint texture for the specified animation clip.
       * @zh
       * 获取指定动画片段的骨骼贴图。
       */

    }, {
      key: "getSequencePoseTexture",
      value: function getSequencePoseTexture(skeleton, clip, mesh, skinningRoot) {
        var hash = skeleton.hash ^ clip.hash;
        var texture = this._textureBuffers.get(hash) || null;

        if (texture && texture.bounds.has(mesh.hash)) {
          texture.refCount++;
          return texture;
        }

        var joints = skeleton.joints,
            bindposes = skeleton.bindposes;

        var clipData = _skeletalAnimationDataHub.SkelAnimDataHub.getOrExtract(clip);

        var frames = clipData.info.frames;
        var textureBuffer = null;
        var buildTexture = false;
        var jointCount = joints.length;

        if (!texture) {
          var bufSize = jointCount * 12 * frames;

          var customChunkIdx = this._chunkIdxMap.get(hash);

          var handle = customChunkIdx !== undefined ? this._customPool.alloc(bufSize * Float32Array.BYTES_PER_ELEMENT, customChunkIdx) : this._pool.alloc(bufSize * Float32Array.BYTES_PER_ELEMENT);

          if (!handle) {
            return null;
          }

          var animInfos = this._createAnimInfos(skeleton, clip, skinningRoot);

          texture = {
            pixelOffset: handle.start / this._formatSize,
            refCount: 1,
            bounds: new Map(),
            skeletonHash: skeleton.hash,
            clipHash: clip.hash,
            readyToBeDeleted: false,
            handle: handle,
            animInfos: animInfos
          };
          textureBuffer = new Float32Array(bufSize);
          buildTexture = true;
        } else {
          texture.refCount++;
        }

        var boneSpaceBounds = mesh.getBoneSpaceBounds(skeleton);
        var bounds = [];
        texture.bounds.set(mesh.hash, bounds);

        for (var f = 0; f < frames; f++) {
          bounds.push(new _index.aabb(Inf, Inf, Inf, -Inf, -Inf, -Inf));
        }

        for (var _f = 0, offset = 0; _f < frames; _f++) {
          var bound = bounds[_f];

          for (var j = 0; j < jointCount; j++, offset += 12) {
            var _j = texture.animInfos[j],
                curveData = _j.curveData,
                downstream = _j.downstream,
                bindposeIdx = _j.bindposeIdx,
                bindposeCorrection = _j.bindposeCorrection;
            var mat = void 0;
            var transformValid = true;

            if (curveData && downstream) {
              // curve & static two-way combination
              mat = _index2.Mat4.multiply(m4_1, curveData[_f], downstream);
            } else if (curveData) {
              // there is a curve directly controlling the joint
              mat = curveData[_f];
            } else if (downstream) {
              // fallback to default pose if no animation curve can be found upstream
              mat = downstream;
            } else {
              // bottom line: render the original mesh as-is
              mat = skeleton.inverseBindposes[bindposeIdx];
              transformValid = false;
            }

            var boneSpaceBound = boneSpaceBounds[j];

            if (boneSpaceBound) {
              var transform = bindposeCorrection ? _index2.Mat4.multiply(m4_2, mat, bindposeCorrection) : mat;

              _index.aabb.transform(ab_1, boneSpaceBound, transform);

              ab_1.getBoundary(v3_3, v3_4);

              _index2.Vec3.min(bound.center, bound.center, v3_3);

              _index2.Vec3.max(bound.halfExtents, bound.halfExtents, v3_4);
            }

            if (buildTexture) {
              if (transformValid) {
                _index2.Mat4.multiply(m4_1, mat, bindposes[bindposeIdx]);
              }

              uploadJointData(textureBuffer, offset, transformValid ? m4_1 : _index2.Mat4.IDENTITY, j === 0);
            }
          }

          _index.aabb.fromPoints(bound, bound.center, bound.halfExtents);
        }

        if (buildTexture) {
          this._pool.update(texture.handle, textureBuffer.buffer);

          this._textureBuffers.set(hash, texture);
        }

        return texture;
      }
    }, {
      key: "releaseHandle",
      value: function releaseHandle(handle) {
        if (handle.refCount > 0) {
          handle.refCount--;
        }

        if (!handle.refCount && handle.readyToBeDeleted) {
          var hash = handle.skeletonHash ^ handle.clipHash;

          var customChunkIdx = this._chunkIdxMap.get(hash);

          (customChunkIdx !== undefined ? this._customPool : this._pool).free(handle.handle);

          if (this._textureBuffers.get(hash) === handle) {
            this._textureBuffers["delete"](hash);
          }
        }
      }
    }, {
      key: "releaseSkeleton",
      value: function releaseSkeleton(skeleton) {
        var it = this._textureBuffers.values();

        var res = it.next();

        while (!res.done) {
          var handle = res.value;

          if (handle.skeletonHash === skeleton.hash) {
            handle.readyToBeDeleted = true;

            if (handle.refCount) {
              // delete handle record immediately so new allocations with the same asset could work
              this._textureBuffers["delete"](handle.skeletonHash ^ handle.clipHash);
            } else {
              this.releaseHandle(handle);
            }
          }

          res = it.next();
        }
      }
    }, {
      key: "releaseAnimationClip",
      value: function releaseAnimationClip(clip) {
        var it = this._textureBuffers.values();

        var res = it.next();

        while (!res.done) {
          var handle = res.value;

          if (handle.clipHash === clip.hash) {
            handle.readyToBeDeleted = true;

            if (handle.refCount) {
              // delete handle record immediately so new allocations with the same asset could work
              this._textureBuffers["delete"](handle.skeletonHash ^ handle.clipHash);
            } else {
              this.releaseHandle(handle);
            }
          }

          res = it.next();
        }
      }
    }, {
      key: "_createAnimInfos",
      value: function _createAnimInfos(skeleton, clip, skinningRoot) {
        var animInfos = [];
        var joints = skeleton.joints,
            bindposes = skeleton.bindposes;
        var jointCount = joints.length;

        var clipData = _skeletalAnimationDataHub.SkelAnimDataHub.getOrExtract(clip);

        for (var j = 0; j < jointCount; j++) {
          var animPath = joints[j];
          var source = clipData.data[animPath];
          var animNode = skinningRoot.getChildByPath(animPath);
          var downstream = void 0;
          var correctionPath = void 0;

          while (!source) {
            var idx = animPath.lastIndexOf('/');
            animPath = animPath.substring(0, idx);
            source = clipData.data[animPath];

            if (animNode) {
              if (!downstream) {
                downstream = new _index2.Mat4();
              }

              _index2.Mat4.fromRTS(m4_1, animNode.rotation, animNode.position, animNode.scale);

              _index2.Mat4.multiply(downstream, m4_1, downstream);

              animNode = animNode.parent;
            } else {
              // record the nearest curve path if no downstream pose is present
              correctionPath = animPath;
            }

            if (idx < 0) {
              break;
            }
          } // the default behavior, just use the bindpose for current joint directly


          var bindposeIdx = j;
          var bindposeCorrection = void 0;
          /**
           * It is regularly observed that developers may choose to delete the whole
           * skeleton node tree for skinning models that only use baked animations,
           * to reduce prefab file size.
           *
           * This becomes troublesome in some cases during baking though, e.g. when a
           * skeleton joint node is not directly controlled by any animation curve,
           * but its parent nodes are. Due to lack of proper downstream default pose,
           * the joint transform can not be calculated accurately.
           *
           * We address this issue by employing some pragmatic approximation.
           * Specifically, by multiplying the bindpose of the joint corresponding to
           * the nearest curve, instead of the actual target joint. This effectively
           * merges the skinning influence of the 'incomplete' joint into its nearest
           * parent with accurate transform data.
           * It gives more visually-plausible results compared to the naive approach
           * for most cases we've covered.
           */

          if (correctionPath !== undefined && source) {
            // just use the previous joint if the exact path is not found
            bindposeIdx = j - 1;

            for (var t = 0; t < jointCount; t++) {
              if (joints[t] === correctionPath) {
                bindposeIdx = t;
                bindposeCorrection = new _index2.Mat4();

                _index2.Mat4.multiply(bindposeCorrection, bindposes[t], skeleton.inverseBindposes[j]);

                break;
              }
            }
          }

          animInfos.push({
            curveData: source && source.worldMatrix.values,
            downstream: downstream,
            bindposeIdx: bindposeIdx,
            bindposeCorrection: bindposeCorrection
          });
        }

        return animInfos;
      }
    }]);

    return JointTexturePool;
  }();

  _exports.JointTexturePool = JointTexturePool;

  var JointAnimationInfo = /*#__PURE__*/function () {
    // per node
    function JointAnimationInfo(device) {
      _classCallCheck(this, JointAnimationInfo);

      this._pool = new Map();
      this._device = void 0;
      this._device = device;
    }

    _createClass(JointAnimationInfo, [{
      key: "getData",
      value: function getData() {
        var nodeID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '-1';

        var res = this._pool.get(nodeID);

        if (res) {
          return res;
        }

        var buffer = this._device.createBuffer({
          usage: _define.GFXBufferUsageBit.UNIFORM | _define.GFXBufferUsageBit.TRANSFER_DST,
          memUsage: _define.GFXMemoryUsageBit.HOST | _define.GFXMemoryUsageBit.DEVICE,
          size: _define2.UBOSkinningAnimation.SIZE,
          stride: _define2.UBOSkinningAnimation.SIZE
        });

        var data = new Float32Array([0, 0, 0, 0]);
        buffer.update(data);
        var info = {
          buffer: buffer,
          data: data,
          dirty: false
        };

        this._pool.set(nodeID, info);

        return info;
      }
    }, {
      key: "destroy",
      value: function destroy(nodeID) {
        var info = this._pool.get(nodeID);

        if (!info) {
          return;
        }

        info.buffer.destroy();

        this._pool["delete"](nodeID);
      }
    }, {
      key: "switchClip",
      value: function switchClip(info, clip) {
        info.data[0] = 0;
        info.buffer.update(info.data);
        info.dirty = false;
        return info;
      }
    }, {
      key: "clear",
      value: function clear() {
        var _iterator = _createForOfIteratorHelper(this._pool.values()),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var info = _step.value;
            info.buffer.destroy();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        this._pool.clear();
      }
    }]);

    return JointAnimationInfo;
  }();

  _exports.JointAnimationInfo = JointAnimationInfo;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,