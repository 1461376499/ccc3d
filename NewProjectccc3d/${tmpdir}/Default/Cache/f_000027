(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../memop/cached-array.js", "../../platform/index.js", "../define.js", "../webgl/webgl-define.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../memop/cached-array.js"), require("../../platform/index.js"), require("../define.js"), require("../webgl/webgl-define.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.cachedArray, global.index, global.define, global.webglDefine);
    global.webgl2Commands = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _cachedArray, _index, _define, _webglDefine) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.GFXFormatToWebGLType = GFXFormatToWebGLType;
  _exports.GFXFormatToWebGLInternalFormat = GFXFormatToWebGLInternalFormat;
  _exports.GFXFormatToWebGLFormat = GFXFormatToWebGLFormat;
  _exports.WebGL2CmdFuncCreateBuffer = WebGL2CmdFuncCreateBuffer;
  _exports.WebGL2CmdFuncDestroyBuffer = WebGL2CmdFuncDestroyBuffer;
  _exports.WebGL2CmdFuncResizeBuffer = WebGL2CmdFuncResizeBuffer;
  _exports.WebGL2CmdFuncUpdateBuffer = WebGL2CmdFuncUpdateBuffer;
  _exports.WebGL2CmdFuncCreateTexture = WebGL2CmdFuncCreateTexture;
  _exports.WebGL2CmdFuncDestroyTexture = WebGL2CmdFuncDestroyTexture;
  _exports.WebGL2CmdFuncResizeTexture = WebGL2CmdFuncResizeTexture;
  _exports.WebGL2CmdFuncCreateSampler = WebGL2CmdFuncCreateSampler;
  _exports.WebGL2CmdFuncDestroySampler = WebGL2CmdFuncDestroySampler;
  _exports.WebGL2CmdFuncCreateFramebuffer = WebGL2CmdFuncCreateFramebuffer;
  _exports.WebGL2CmdFuncDestroyFramebuffer = WebGL2CmdFuncDestroyFramebuffer;
  _exports.WebGL2CmdFuncCreateShader = WebGL2CmdFuncCreateShader;
  _exports.WebGL2CmdFuncDestroyShader = WebGL2CmdFuncDestroyShader;
  _exports.WebGL2CmdFuncCreateInputAssember = WebGL2CmdFuncCreateInputAssember;
  _exports.WebGL2CmdFuncDestroyInputAssembler = WebGL2CmdFuncDestroyInputAssembler;
  _exports.WebGL2CmdFuncBeginRenderPass = WebGL2CmdFuncBeginRenderPass;
  _exports.WebGL2CmdFuncBindStates = WebGL2CmdFuncBindStates;
  _exports.WebGL2CmdFuncDraw = WebGL2CmdFuncDraw;
  _exports.WebGL2CmdFuncExecuteCmds = WebGL2CmdFuncExecuteCmds;
  _exports.WebGL2CmdFuncCopyTexImagesToTexture = WebGL2CmdFuncCopyTexImagesToTexture;
  _exports.WebGL2CmdFuncCopyBuffersToTexture = WebGL2CmdFuncCopyBuffersToTexture;
  _exports.WebGL2CmdFuncBlitFramebuffer = WebGL2CmdFuncBlitFramebuffer;
  _exports.WebGL2CmdPackage = _exports.WebGL2CmdCopyBufferToTexture = _exports.WebGL2GFXBufferTextureCopy = _exports.WebGL2GFXTextureSubres = _exports.WebGL2CmdUpdateBuffer = _exports.WebGL2CmdDraw = _exports.WebGL2CmdBindStates = _exports.WebGL2CmdBeginRenderPass = _exports.WebGL2CmdObject = _exports.WebGL2Cmd = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var WebGLWraps = [0x2901, // WebGLRenderingContext.REPEAT
  0x8370, // WebGLRenderingContext.MIRRORED_REPEAT
  0x812F, // WebGLRenderingContext.CLAMP_TO_EDGE
  0x812F // WebGLRenderingContext.CLAMP_TO_EDGE
  ];
  var SAMPLES = [1, 2, 4, 8, 16, 32, 64];

  var _f32v4 = new Float32Array(4); // tslint:disable: max-line-length


  function CmpF32NotEuqal(a, b) {
    var c = a - b;
    return c > 0.000001 || c < -0.000001;
  }

  function GFXFormatToWebGLType(format, gl) {
    switch (format) {
      case _define.GFXFormat.R8:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.R8SN:
        return gl.BYTE;

      case _define.GFXFormat.R8UI:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.R8I:
        return gl.BYTE;

      case _define.GFXFormat.R16F:
        return gl.HALF_FLOAT;

      case _define.GFXFormat.R16UI:
        return gl.UNSIGNED_SHORT;

      case _define.GFXFormat.R16I:
        return gl.SHORT;

      case _define.GFXFormat.R32F:
        return gl.FLOAT;

      case _define.GFXFormat.R32UI:
        return gl.UNSIGNED_INT;

      case _define.GFXFormat.R32I:
        return gl.INT;

      case _define.GFXFormat.RG8:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.RG8SN:
        return gl.BYTE;

      case _define.GFXFormat.RG8UI:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.RG8I:
        return gl.BYTE;

      case _define.GFXFormat.RG16F:
        return gl.HALF_FLOAT;

      case _define.GFXFormat.RG16UI:
        return gl.UNSIGNED_SHORT;

      case _define.GFXFormat.RG16I:
        return gl.SHORT;

      case _define.GFXFormat.RG32F:
        return gl.FLOAT;

      case _define.GFXFormat.RG32UI:
        return gl.UNSIGNED_INT;

      case _define.GFXFormat.RG32I:
        return gl.INT;

      case _define.GFXFormat.RGB8:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.SRGB8:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.RGB8SN:
        return gl.BYTE;

      case _define.GFXFormat.RGB8UI:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.RGB8I:
        return gl.BYTE;

      case _define.GFXFormat.RGB16F:
        return gl.HALF_FLOAT;

      case _define.GFXFormat.RGB16UI:
        return gl.UNSIGNED_SHORT;

      case _define.GFXFormat.RGB16I:
        return gl.SHORT;

      case _define.GFXFormat.RGB32F:
        return gl.FLOAT;

      case _define.GFXFormat.RGB32UI:
        return gl.UNSIGNED_INT;

      case _define.GFXFormat.RGB32I:
        return gl.INT;

      case _define.GFXFormat.RGBA8:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.SRGB8_A8:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.RGBA8SN:
        return gl.BYTE;

      case _define.GFXFormat.RGBA8UI:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.RGBA8I:
        return gl.BYTE;

      case _define.GFXFormat.RGBA16F:
        return gl.HALF_FLOAT;

      case _define.GFXFormat.RGBA16UI:
        return gl.UNSIGNED_SHORT;

      case _define.GFXFormat.RGBA16I:
        return gl.SHORT;

      case _define.GFXFormat.RGBA32F:
        return gl.FLOAT;

      case _define.GFXFormat.RGBA32UI:
        return gl.UNSIGNED_INT;

      case _define.GFXFormat.RGBA32I:
        return gl.INT;

      case _define.GFXFormat.R5G6B5:
        return gl.UNSIGNED_SHORT_5_6_5;

      case _define.GFXFormat.R11G11B10F:
        return gl.UNSIGNED_INT_10F_11F_11F_REV;

      case _define.GFXFormat.RGB5A1:
        return gl.UNSIGNED_SHORT_5_5_5_1;

      case _define.GFXFormat.RGBA4:
        return gl.UNSIGNED_SHORT_4_4_4_4;

      case _define.GFXFormat.RGB10A2:
        return gl.UNSIGNED_INT_2_10_10_10_REV;

      case _define.GFXFormat.RGB10A2UI:
        return gl.UNSIGNED_INT_2_10_10_10_REV;

      case _define.GFXFormat.RGB9E5:
        return gl.FLOAT;

      case _define.GFXFormat.D16:
        return gl.UNSIGNED_SHORT;

      case _define.GFXFormat.D16S8:
        return gl.UNSIGNED_INT_24_8;
      // no D16S8 support

      case _define.GFXFormat.D24:
        return gl.UNSIGNED_INT;

      case _define.GFXFormat.D24S8:
        return gl.UNSIGNED_INT_24_8;

      case _define.GFXFormat.D32F:
        return gl.FLOAT;

      case _define.GFXFormat.D32F_S8:
        return gl.FLOAT_32_UNSIGNED_INT_24_8_REV;

      case _define.GFXFormat.BC1:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.BC1_SRGB:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.BC2:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.BC2_SRGB:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.BC3:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.BC3_SRGB:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.BC4:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.BC4_SNORM:
        return gl.BYTE;

      case _define.GFXFormat.BC5:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.BC5_SNORM:
        return gl.BYTE;

      case _define.GFXFormat.BC6H_SF16:
        return gl.FLOAT;

      case _define.GFXFormat.BC6H_UF16:
        return gl.FLOAT;

      case _define.GFXFormat.BC7:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.BC7_SRGB:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.ETC_RGB8:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.ETC2_RGB8:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.ETC2_SRGB8:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.ETC2_RGB8_A1:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.ETC2_SRGB8_A1:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.ETC2_RGB8:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.ETC2_SRGB8:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.EAC_R11:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.EAC_R11SN:
        return gl.BYTE;

      case _define.GFXFormat.EAC_RG11:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.EAC_RG11SN:
        return gl.BYTE;

      case _define.GFXFormat.PVRTC_RGB2:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.PVRTC_RGBA2:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.PVRTC_RGB4:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.PVRTC_RGBA4:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.PVRTC2_2BPP:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.PVRTC2_4BPP:
        return gl.UNSIGNED_BYTE;

      default:
        {
          return gl.UNSIGNED_BYTE;
        }
    }
  }

  function GFXFormatToWebGLInternalFormat(format, gl) {
    switch (format) {
      case _define.GFXFormat.A8:
        return gl.ALPHA;

      case _define.GFXFormat.L8:
        return gl.LUMINANCE;

      case _define.GFXFormat.LA8:
        return gl.LUMINANCE_ALPHA;

      case _define.GFXFormat.R8:
        return gl.R8;

      case _define.GFXFormat.R8SN:
        return gl.R8_SNORM;

      case _define.GFXFormat.R8UI:
        return gl.R8UI;

      case _define.GFXFormat.R8I:
        return gl.R8I;

      case _define.GFXFormat.RG8:
        return gl.RG8;

      case _define.GFXFormat.RG8SN:
        return gl.RG8_SNORM;

      case _define.GFXFormat.RG8UI:
        return gl.RG8UI;

      case _define.GFXFormat.RG8I:
        return gl.RG8I;

      case _define.GFXFormat.RGB8:
        return gl.RGB8;

      case _define.GFXFormat.RGB8SN:
        return gl.RGB8_SNORM;

      case _define.GFXFormat.RGB8UI:
        return gl.RGB8UI;

      case _define.GFXFormat.RGB8I:
        return gl.RGB8I;

      case _define.GFXFormat.RGBA8:
        return gl.RGBA8;

      case _define.GFXFormat.RGBA8SN:
        return gl.RGBA8_SNORM;

      case _define.GFXFormat.RGBA8UI:
        return gl.RGBA8UI;

      case _define.GFXFormat.RGBA8I:
        return gl.RGBA8I;

      case _define.GFXFormat.R16I:
        return gl.R16I;

      case _define.GFXFormat.R16UI:
        return gl.R16UI;

      case _define.GFXFormat.R16F:
        return gl.R16F;

      case _define.GFXFormat.RG16I:
        return gl.RG16I;

      case _define.GFXFormat.RG16UI:
        return gl.RG16UI;

      case _define.GFXFormat.RG16F:
        return gl.RG16F;

      case _define.GFXFormat.RGB16I:
        return gl.RGB16I;

      case _define.GFXFormat.RGB16UI:
        return gl.RGB16UI;

      case _define.GFXFormat.RGB16F:
        return gl.RGB16F;

      case _define.GFXFormat.RGBA16I:
        return gl.RGBA16I;

      case _define.GFXFormat.RGBA16UI:
        return gl.RGBA16UI;

      case _define.GFXFormat.RGBA16F:
        return gl.RGBA16F;

      case _define.GFXFormat.R32I:
        return gl.R32I;

      case _define.GFXFormat.R32UI:
        return gl.R32UI;

      case _define.GFXFormat.R32F:
        return gl.R32F;

      case _define.GFXFormat.RG32I:
        return gl.RG32I;

      case _define.GFXFormat.RG32UI:
        return gl.RG32UI;

      case _define.GFXFormat.RG32F:
        return gl.RG32F;

      case _define.GFXFormat.RGB32I:
        return gl.RGB32I;

      case _define.GFXFormat.RGB32UI:
        return gl.RGB32UI;

      case _define.GFXFormat.RGB32F:
        return gl.RGB32F;

      case _define.GFXFormat.RGBA32I:
        return gl.RGBA32I;

      case _define.GFXFormat.RGBA32UI:
        return gl.RGBA32UI;

      case _define.GFXFormat.RGBA32F:
        return gl.RGBA32F;

      case _define.GFXFormat.R5G6B5:
        return gl.RGB565;

      case _define.GFXFormat.RGB5A1:
        return gl.RGB5_A1;

      case _define.GFXFormat.RGBA4:
        return gl.RGBA4;

      case _define.GFXFormat.RGB10A2:
        return gl.RGB10_A2;

      case _define.GFXFormat.RGB10A2UI:
        return gl.RGB10_A2UI;

      case _define.GFXFormat.R11G11B10F:
        return gl.R11F_G11F_B10F;

      case _define.GFXFormat.D16:
        return gl.DEPTH_COMPONENT16;

      case _define.GFXFormat.D16S8:
        return gl.DEPTH24_STENCIL8;
      // no D16S8 support

      case _define.GFXFormat.D24:
        return gl.DEPTH_COMPONENT24;

      case _define.GFXFormat.D24S8:
        return gl.DEPTH24_STENCIL8;

      case _define.GFXFormat.D32F:
        return gl.DEPTH_COMPONENT32F;

      case _define.GFXFormat.D32F_S8:
        return gl.DEPTH32F_STENCIL8;

      case _define.GFXFormat.BC1:
        return _webglDefine.WebGLEXT.COMPRESSED_RGB_S3TC_DXT1_EXT;

      case _define.GFXFormat.BC1_ALPHA:
        return _webglDefine.WebGLEXT.COMPRESSED_RGBA_S3TC_DXT1_EXT;

      case _define.GFXFormat.BC1_SRGB:
        return _webglDefine.WebGLEXT.COMPRESSED_SRGB_S3TC_DXT1_EXT;

      case _define.GFXFormat.BC1_SRGB_ALPHA:
        return _webglDefine.WebGLEXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;

      case _define.GFXFormat.BC2:
        return _webglDefine.WebGLEXT.COMPRESSED_RGBA_S3TC_DXT3_EXT;

      case _define.GFXFormat.BC2_SRGB:
        return _webglDefine.WebGLEXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;

      case _define.GFXFormat.BC3:
        return _webglDefine.WebGLEXT.COMPRESSED_RGBA_S3TC_DXT5_EXT;

      case _define.GFXFormat.BC3_SRGB:
        return _webglDefine.WebGLEXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;

      case _define.GFXFormat.ETC_RGB8:
        return _webglDefine.WebGLEXT.COMPRESSED_RGB_ETC1_WEBGL;

      case _define.GFXFormat.ETC2_RGB8:
        return _webglDefine.WebGLEXT.COMPRESSED_RGB8_ETC2;

      case _define.GFXFormat.ETC2_SRGB8:
        return _webglDefine.WebGLEXT.COMPRESSED_SRGB8_ETC2;

      case _define.GFXFormat.ETC2_RGB8_A1:
        return _webglDefine.WebGLEXT.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;

      case _define.GFXFormat.ETC2_SRGB8_A1:
        return _webglDefine.WebGLEXT.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2;

      case _define.GFXFormat.ETC2_RGBA8:
        return _webglDefine.WebGLEXT.COMPRESSED_RGBA8_ETC2_EAC;

      case _define.GFXFormat.ETC2_SRGB8_A8:
        return _webglDefine.WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;

      case _define.GFXFormat.EAC_R11:
        return _webglDefine.WebGLEXT.COMPRESSED_R11_EAC;

      case _define.GFXFormat.EAC_R11SN:
        return _webglDefine.WebGLEXT.COMPRESSED_SIGNED_R11_EAC;

      case _define.GFXFormat.EAC_RG11:
        return _webglDefine.WebGLEXT.COMPRESSED_RG11_EAC;

      case _define.GFXFormat.EAC_RG11SN:
        return _webglDefine.WebGLEXT.COMPRESSED_SIGNED_RG11_EAC;

      case _define.GFXFormat.PVRTC_RGB2:
        return _webglDefine.WebGLEXT.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;

      case _define.GFXFormat.PVRTC_RGBA2:
        return _webglDefine.WebGLEXT.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

      case _define.GFXFormat.PVRTC_RGB4:
        return _webglDefine.WebGLEXT.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;

      case _define.GFXFormat.PVRTC_RGBA4:
        return _webglDefine.WebGLEXT.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;

      default:
        {
          console.error('Unsupported GFXFormat, convert to WebGL internal format failed.');
          return gl.RGBA;
        }
    }
  }

  function GFXFormatToWebGLFormat(format, gl) {
    switch (format) {
      case _define.GFXFormat.A8:
        return gl.ALPHA;

      case _define.GFXFormat.L8:
        return gl.LUMINANCE;

      case _define.GFXFormat.LA8:
        return gl.LUMINANCE_ALPHA;

      case _define.GFXFormat.R8:
      case _define.GFXFormat.R8SN:
        return gl.RED;

      case _define.GFXFormat.R8UI:
      case _define.GFXFormat.R8I:
        return gl.RED;

      case _define.GFXFormat.RG8:
      case _define.GFXFormat.RG8SN:
      case _define.GFXFormat.RG8UI:
      case _define.GFXFormat.RG8I:
        return gl.RG;

      case _define.GFXFormat.RGB8:
      case _define.GFXFormat.RGB8SN:
      case _define.GFXFormat.RGB8UI:
      case _define.GFXFormat.RGB8I:
        return gl.RGB;

      case _define.GFXFormat.RGBA8:
      case _define.GFXFormat.RGBA8SN:
      case _define.GFXFormat.RGBA8UI:
      case _define.GFXFormat.RGBA8I:
        return gl.RGBA;

      case _define.GFXFormat.R16UI:
      case _define.GFXFormat.R16I:
      case _define.GFXFormat.R16F:
        return gl.RED;

      case _define.GFXFormat.RG16UI:
      case _define.GFXFormat.RG16I:
      case _define.GFXFormat.RG16F:
        return gl.RG;

      case _define.GFXFormat.RGB16UI:
      case _define.GFXFormat.RGB16I:
      case _define.GFXFormat.RGB16F:
        return gl.RGB;

      case _define.GFXFormat.RGBA16UI:
      case _define.GFXFormat.RGBA16I:
      case _define.GFXFormat.RGBA16F:
        return gl.RGBA;

      case _define.GFXFormat.R32UI:
      case _define.GFXFormat.R32I:
      case _define.GFXFormat.R32F:
        return gl.RED;

      case _define.GFXFormat.RG32UI:
      case _define.GFXFormat.RG32I:
      case _define.GFXFormat.RG32F:
        return gl.RG;

      case _define.GFXFormat.RGB32UI:
      case _define.GFXFormat.RGB32I:
      case _define.GFXFormat.RGB32F:
        return gl.RGB;

      case _define.GFXFormat.RGBA32UI:
      case _define.GFXFormat.RGBA32I:
      case _define.GFXFormat.RGBA32F:
        return gl.RGBA;

      case _define.GFXFormat.RGB10A2:
        return gl.RGBA;

      case _define.GFXFormat.R11G11B10F:
        return gl.RGB;

      case _define.GFXFormat.R5G6B5:
        return gl.RGB;

      case _define.GFXFormat.RGB5A1:
        return gl.RGBA;

      case _define.GFXFormat.RGBA4:
        return gl.RGBA;

      case _define.GFXFormat.D16:
        return gl.DEPTH_COMPONENT;

      case _define.GFXFormat.D16S8:
        return gl.DEPTH_STENCIL;

      case _define.GFXFormat.D24:
        return gl.DEPTH_COMPONENT;

      case _define.GFXFormat.D24S8:
        return gl.DEPTH_STENCIL;

      case _define.GFXFormat.D32F:
        return gl.DEPTH_COMPONENT;

      case _define.GFXFormat.D32F_S8:
        return gl.DEPTH_STENCIL;

      case _define.GFXFormat.BC1:
        return _webglDefine.WebGLEXT.COMPRESSED_RGB_S3TC_DXT1_EXT;

      case _define.GFXFormat.BC1_ALPHA:
        return _webglDefine.WebGLEXT.COMPRESSED_RGBA_S3TC_DXT1_EXT;

      case _define.GFXFormat.BC1_SRGB:
        return _webglDefine.WebGLEXT.COMPRESSED_SRGB_S3TC_DXT1_EXT;

      case _define.GFXFormat.BC1_SRGB_ALPHA:
        return _webglDefine.WebGLEXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;

      case _define.GFXFormat.BC2:
        return _webglDefine.WebGLEXT.COMPRESSED_RGBA_S3TC_DXT3_EXT;

      case _define.GFXFormat.BC2_SRGB:
        return _webglDefine.WebGLEXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;

      case _define.GFXFormat.BC3:
        return _webglDefine.WebGLEXT.COMPRESSED_RGBA_S3TC_DXT5_EXT;

      case _define.GFXFormat.BC3_SRGB:
        return _webglDefine.WebGLEXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;

      case _define.GFXFormat.ETC_RGB8:
        return _webglDefine.WebGLEXT.COMPRESSED_RGB_ETC1_WEBGL;

      case _define.GFXFormat.ETC2_RGB8:
        return _webglDefine.WebGLEXT.COMPRESSED_RGB8_ETC2;

      case _define.GFXFormat.ETC2_SRGB8:
        return _webglDefine.WebGLEXT.COMPRESSED_SRGB8_ETC2;

      case _define.GFXFormat.ETC2_RGB8_A1:
        return _webglDefine.WebGLEXT.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;

      case _define.GFXFormat.ETC2_SRGB8_A1:
        return _webglDefine.WebGLEXT.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2;

      case _define.GFXFormat.ETC2_RGBA8:
        return _webglDefine.WebGLEXT.COMPRESSED_RGBA8_ETC2_EAC;

      case _define.GFXFormat.ETC2_SRGB8_A8:
        return _webglDefine.WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;

      case _define.GFXFormat.EAC_R11:
        return _webglDefine.WebGLEXT.COMPRESSED_R11_EAC;

      case _define.GFXFormat.EAC_R11SN:
        return _webglDefine.WebGLEXT.COMPRESSED_SIGNED_R11_EAC;

      case _define.GFXFormat.EAC_RG11:
        return _webglDefine.WebGLEXT.COMPRESSED_RG11_EAC;

      case _define.GFXFormat.EAC_RG11SN:
        return _webglDefine.WebGLEXT.COMPRESSED_SIGNED_RG11_EAC;

      case _define.GFXFormat.PVRTC_RGB2:
        return _webglDefine.WebGLEXT.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;

      case _define.GFXFormat.PVRTC_RGBA2:
        return _webglDefine.WebGLEXT.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

      case _define.GFXFormat.PVRTC_RGB4:
        return _webglDefine.WebGLEXT.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;

      case _define.GFXFormat.PVRTC_RGBA4:
        return _webglDefine.WebGLEXT.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;

      default:
        {
          console.error('Unsupported GFXFormat, convert to WebGL format failed.');
          return gl.RGBA;
        }
    }
  }

  function GFXTypeToWebGLType(type, gl) {
    switch (type) {
      case _define.GFXType.BOOL:
        return gl.BOOL;

      case _define.GFXType.BOOL2:
        return gl.BOOL_VEC2;

      case _define.GFXType.BOOL3:
        return gl.BOOL_VEC3;

      case _define.GFXType.BOOL4:
        return gl.BOOL_VEC4;

      case _define.GFXType.INT:
        return gl.INT;

      case _define.GFXType.INT2:
        return gl.INT_VEC2;

      case _define.GFXType.INT3:
        return gl.INT_VEC3;

      case _define.GFXType.INT4:
        return gl.INT_VEC4;

      case _define.GFXType.UINT:
        return gl.UNSIGNED_INT;

      case _define.GFXType.FLOAT:
        return gl.FLOAT;

      case _define.GFXType.FLOAT2:
        return gl.FLOAT_VEC2;

      case _define.GFXType.FLOAT3:
        return gl.FLOAT_VEC3;

      case _define.GFXType.FLOAT4:
        return gl.FLOAT_VEC4;

      case _define.GFXType.MAT2:
        return gl.FLOAT_MAT2;

      case _define.GFXType.MAT2X3:
        return gl.FLOAT_MAT2x3;

      case _define.GFXType.MAT2X4:
        return gl.FLOAT_MAT2x4;

      case _define.GFXType.MAT3X2:
        return gl.FLOAT_MAT3x2;

      case _define.GFXType.MAT3:
        return gl.FLOAT_MAT3;

      case _define.GFXType.MAT3X4:
        return gl.FLOAT_MAT3x4;

      case _define.GFXType.MAT4X2:
        return gl.FLOAT_MAT4x2;

      case _define.GFXType.MAT4X3:
        return gl.FLOAT_MAT4x3;

      case _define.GFXType.MAT4:
        return gl.FLOAT_MAT4;

      case _define.GFXType.SAMPLER2D:
        return gl.SAMPLER_2D;

      case _define.GFXType.SAMPLER2D_ARRAY:
        return gl.SAMPLER_2D_ARRAY;

      case _define.GFXType.SAMPLER3D:
        return gl.SAMPLER_3D;

      case _define.GFXType.SAMPLER_CUBE:
        return gl.SAMPLER_CUBE;

      default:
        {
          console.error('Unsupported GLType, convert to GL type failed.');
          return _define.GFXType.UNKNOWN;
        }
    }
  }

  function WebGLTypeToGFXType(glType, gl) {
    switch (glType) {
      case gl.BOOL:
        return _define.GFXType.BOOL;

      case gl.BOOL_VEC2:
        return _define.GFXType.BOOL2;

      case gl.BOOL_VEC3:
        return _define.GFXType.BOOL3;

      case gl.BOOL_VEC4:
        return _define.GFXType.BOOL4;

      case gl.INT:
        return _define.GFXType.INT;

      case gl.INT_VEC2:
        return _define.GFXType.INT2;

      case gl.INT_VEC3:
        return _define.GFXType.INT3;

      case gl.INT_VEC4:
        return _define.GFXType.INT4;

      case gl.UNSIGNED_INT:
        return _define.GFXType.UINT;

      case gl.UNSIGNED_INT_VEC2:
        return _define.GFXType.UINT2;

      case gl.UNSIGNED_INT_VEC3:
        return _define.GFXType.UINT3;

      case gl.UNSIGNED_INT_VEC4:
        return _define.GFXType.UINT4;

      case gl.UNSIGNED_INT:
        return _define.GFXType.UINT;

      case gl.FLOAT:
        return _define.GFXType.FLOAT;

      case gl.FLOAT_VEC2:
        return _define.GFXType.FLOAT2;

      case gl.FLOAT_VEC3:
        return _define.GFXType.FLOAT3;

      case gl.FLOAT_VEC4:
        return _define.GFXType.FLOAT4;

      case gl.FLOAT_MAT2:
        return _define.GFXType.MAT2;

      case gl.FLOAT_MAT2x3:
        return _define.GFXType.MAT2X3;

      case gl.FLOAT_MAT2x4:
        return _define.GFXType.MAT2X4;

      case gl.FLOAT_MAT3x2:
        return _define.GFXType.MAT3X2;

      case gl.FLOAT_MAT3:
        return _define.GFXType.MAT3;

      case gl.FLOAT_MAT3x4:
        return _define.GFXType.MAT3X4;

      case gl.FLOAT_MAT4x2:
        return _define.GFXType.MAT4X2;

      case gl.FLOAT_MAT4x3:
        return _define.GFXType.MAT4X3;

      case gl.FLOAT_MAT4:
        return _define.GFXType.MAT4;

      case gl.SAMPLER_2D:
        return _define.GFXType.SAMPLER2D;

      case gl.SAMPLER_2D_ARRAY:
        return _define.GFXType.SAMPLER2D_ARRAY;

      case gl.SAMPLER_3D:
        return _define.GFXType.SAMPLER3D;

      case gl.SAMPLER_CUBE:
        return _define.GFXType.SAMPLER_CUBE;

      default:
        {
          console.error('Unsupported GLType, convert to GFXType failed.');
          return _define.GFXType.UNKNOWN;
        }
    }
  }

  function WebGLGetTypeSize(glType, gl) {
    switch (glType) {
      case gl.BOOL:
        return 4;

      case gl.BOOL_VEC2:
        return 8;

      case gl.BOOL_VEC3:
        return 12;

      case gl.BOOL_VEC4:
        return 16;

      case gl.INT:
        return 4;

      case gl.INT_VEC2:
        return 8;

      case gl.INT_VEC3:
        return 12;

      case gl.INT_VEC4:
        return 16;

      case gl.UNSIGNED_INT:
        return 4;

      case gl.UNSIGNED_INT_VEC2:
        return 8;

      case gl.UNSIGNED_INT_VEC3:
        return 12;

      case gl.UNSIGNED_INT_VEC4:
        return 16;

      case gl.FLOAT:
        return 4;

      case gl.FLOAT_VEC2:
        return 8;

      case gl.FLOAT_VEC3:
        return 12;

      case gl.FLOAT_VEC4:
        return 16;

      case gl.FLOAT_MAT2:
        return 16;

      case gl.FLOAT_MAT2x3:
        return 24;

      case gl.FLOAT_MAT2x4:
        return 32;

      case gl.FLOAT_MAT3x2:
        return 24;

      case gl.FLOAT_MAT3:
        return 36;

      case gl.FLOAT_MAT3x4:
        return 48;

      case gl.FLOAT_MAT4x2:
        return 32;

      case gl.FLOAT_MAT4x3:
        return 48;

      case gl.FLOAT_MAT4:
        return 64;

      case gl.SAMPLER_2D:
        return 4;

      case gl.SAMPLER_2D_ARRAY:
        return 4;

      case gl.SAMPLER_2D_ARRAY_SHADOW:
        return 4;

      case gl.SAMPLER_3D:
        return 4;

      case gl.SAMPLER_CUBE:
        return 4;

      case gl.INT_SAMPLER_2D:
        return 4;

      case gl.INT_SAMPLER_2D_ARRAY:
        return 4;

      case gl.INT_SAMPLER_3D:
        return 4;

      case gl.INT_SAMPLER_CUBE:
        return 4;

      case gl.UNSIGNED_INT_SAMPLER_2D:
        return 4;

      case gl.UNSIGNED_INT_SAMPLER_2D_ARRAY:
        return 4;

      case gl.UNSIGNED_INT_SAMPLER_3D:
        return 4;

      case gl.UNSIGNED_INT_SAMPLER_CUBE:
        return 4;

      default:
        {
          console.error('Unsupported GLType, get type failed.');
          return 0;
        }
    }
  }

  function WebGLGetComponentCount(glType, gl) {
    switch (glType) {
      case gl.FLOAT_MAT2:
        return 2;

      case gl.FLOAT_MAT2x3:
        return 2;

      case gl.FLOAT_MAT2x4:
        return 2;

      case gl.FLOAT_MAT3x2:
        return 3;

      case gl.FLOAT_MAT3:
        return 3;

      case gl.FLOAT_MAT3x4:
        return 3;

      case gl.FLOAT_MAT4x2:
        return 4;

      case gl.FLOAT_MAT4x3:
        return 4;

      case gl.FLOAT_MAT4:
        return 4;

      default:
        {
          return 1;
        }
    }
  }

  var WebGLCmpFuncs = [0x0200, // WebGLRenderingContext.NEVER,
  0x0201, // WebGLRenderingContext.LESS,
  0x0202, // WebGLRenderingContext.EQUAL,
  0x0203, // WebGLRenderingContext.LEQUAL,
  0x0204, // WebGLRenderingContext.GREATER,
  0x0205, // WebGLRenderingContext.NOTEQUAL,
  0x0206, // WebGLRenderingContext.GEQUAL,
  0x0207 // WebGLRenderingContext.ALWAYS,
  ];
  var WebGLStencilOps = [0x0000, // WebGLRenderingContext.ZERO,
  0x1E00, // WebGLRenderingContext.KEEP,
  0x1E01, // WebGLRenderingContext.REPLACE,
  0x1E02, // WebGLRenderingContext.INCR,
  0x1E03, // WebGLRenderingContext.DECR,
  0x150A, // WebGLRenderingContext.INVERT,
  0x8507, // WebGLRenderingContext.INCR_WRAP,
  0x8508 // WebGLRenderingContext.DECR_WRAP,
  ];
  var WebGLBlendOps = [0x8006, // WebGLRenderingContext.FUNC_ADD,
  0x800A, // WebGLRenderingContext.FUNC_SUBTRACT,
  0x800B, // WebGLRenderingContext.FUNC_REVERSE_SUBTRACT,
  0x8006, // WebGLRenderingContext.FUNC_ADD,
  0x8006 // WebGLRenderingContext.FUNC_ADD,
  ];
  var WebGLBlendFactors = [0x0000, // WebGLRenderingContext.ZERO,
  0x0001, // WebGLRenderingContext.ONE,
  0x0302, // WebGLRenderingContext.SRC_ALPHA,
  0x0304, // WebGLRenderingContext.DST_ALPHA,
  0x0303, // WebGLRenderingContext.ONE_MINUS_SRC_ALPHA,
  0x0305, // WebGLRenderingContext.ONE_MINUS_DST_ALPHA,
  0x0300, // WebGLRenderingContext.SRC_COLOR,
  0x0306, // WebGLRenderingContext.DST_COLOR,
  0x0301, // WebGLRenderingContext.ONE_MINUS_SRC_COLOR,
  0x0307, // WebGLRenderingContext.ONE_MINUS_DST_COLOR,
  0x0308, // WebGLRenderingContext.SRC_ALPHA_SATURATE,
  0x8001, // WebGLRenderingContext.CONSTANT_COLOR,
  0x8002, // WebGLRenderingContext.ONE_MINUS_CONSTANT_COLOR,
  0x8003, // WebGLRenderingContext.CONSTANT_ALPHA,
  0x8004 // WebGLRenderingContext.ONE_MINUS_CONSTANT_ALPHA,
  ];
  var WebGL2Cmd;
  _exports.WebGL2Cmd = WebGL2Cmd;

  (function (WebGL2Cmd) {
    WebGL2Cmd[WebGL2Cmd["BEGIN_RENDER_PASS"] = 0] = "BEGIN_RENDER_PASS";
    WebGL2Cmd[WebGL2Cmd["END_RENDER_PASS"] = 1] = "END_RENDER_PASS";
    WebGL2Cmd[WebGL2Cmd["BIND_STATES"] = 2] = "BIND_STATES";
    WebGL2Cmd[WebGL2Cmd["DRAW"] = 3] = "DRAW";
    WebGL2Cmd[WebGL2Cmd["UPDATE_BUFFER"] = 4] = "UPDATE_BUFFER";
    WebGL2Cmd[WebGL2Cmd["COPY_BUFFER_TO_TEXTURE"] = 5] = "COPY_BUFFER_TO_TEXTURE";
    WebGL2Cmd[WebGL2Cmd["COUNT"] = 6] = "COUNT";
  })(WebGL2Cmd || (_exports.WebGL2Cmd = WebGL2Cmd = {}));

  var WebGL2CmdObject = function WebGL2CmdObject(type) {
    _classCallCheck(this, WebGL2CmdObject);

    this.cmdType = void 0;
    this.refCount = 0;
    this.cmdType = type;
  };

  _exports.WebGL2CmdObject = WebGL2CmdObject;

  var WebGL2CmdBeginRenderPass = /*#__PURE__*/function (_WebGL2CmdObject) {
    _inherits(WebGL2CmdBeginRenderPass, _WebGL2CmdObject);

    function WebGL2CmdBeginRenderPass() {
      var _this;

      _classCallCheck(this, WebGL2CmdBeginRenderPass);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(WebGL2CmdBeginRenderPass).call(this, WebGL2Cmd.BEGIN_RENDER_PASS));
      _this.gpuFramebuffer = null;
      _this.renderArea = {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      };
      _this.clearFlag = _define.GFXClearFlag.NONE;
      _this.clearColors = [];
      _this.clearDepth = 1.0;
      _this.clearStencil = 0;
      return _this;
    }

    _createClass(WebGL2CmdBeginRenderPass, [{
      key: "clear",
      value: function clear() {
        this.gpuFramebuffer = null;
        this.clearColors.length = 0;
      }
    }]);

    return WebGL2CmdBeginRenderPass;
  }(WebGL2CmdObject);

  _exports.WebGL2CmdBeginRenderPass = WebGL2CmdBeginRenderPass;

  var WebGL2CmdBindStates = /*#__PURE__*/function (_WebGL2CmdObject2) {
    _inherits(WebGL2CmdBindStates, _WebGL2CmdObject2);

    function WebGL2CmdBindStates() {
      var _this2;

      _classCallCheck(this, WebGL2CmdBindStates);

      _this2 = _possibleConstructorReturn(this, _getPrototypeOf(WebGL2CmdBindStates).call(this, WebGL2Cmd.BIND_STATES));
      _this2.gpuPipelineState = null;
      _this2.gpuBindingLayout = null;
      _this2.gpuInputAssembler = null;
      _this2.viewport = null;
      _this2.scissor = null;
      _this2.lineWidth = null;
      _this2.depthBias = null;
      _this2.blendConstants = null;
      _this2.depthBounds = null;
      _this2.stencilWriteMask = null;
      _this2.stencilCompareMask = null;
      return _this2;
    }

    _createClass(WebGL2CmdBindStates, [{
      key: "clear",
      value: function clear() {
        this.gpuPipelineState = null;
        this.gpuBindingLayout = null;
        this.gpuInputAssembler = null;
        this.viewport = null;
        this.scissor = null;
        this.lineWidth = null;
        this.depthBias = null;
        this.blendConstants = null;
        this.depthBounds = null;
        this.stencilWriteMask = null;
        this.stencilCompareMask = null;
      }
    }]);

    return WebGL2CmdBindStates;
  }(WebGL2CmdObject);

  _exports.WebGL2CmdBindStates = WebGL2CmdBindStates;

  var WebGL2CmdDraw = /*#__PURE__*/function (_WebGL2CmdObject3) {
    _inherits(WebGL2CmdDraw, _WebGL2CmdObject3);

    function WebGL2CmdDraw() {
      var _this3;

      _classCallCheck(this, WebGL2CmdDraw);

      _this3 = _possibleConstructorReturn(this, _getPrototypeOf(WebGL2CmdDraw).call(this, WebGL2Cmd.DRAW));
      _this3.drawInfo = {
        vertexCount: 0,
        firstVertex: 0,
        indexCount: 0,
        firstIndex: 0,
        vertexOffset: 0,
        instanceCount: 0,
        firstInstance: 0
      };
      return _this3;
    }

    _createClass(WebGL2CmdDraw, [{
      key: "clear",
      value: function clear() {}
    }]);

    return WebGL2CmdDraw;
  }(WebGL2CmdObject);

  _exports.WebGL2CmdDraw = WebGL2CmdDraw;

  var WebGL2CmdUpdateBuffer = /*#__PURE__*/function (_WebGL2CmdObject4) {
    _inherits(WebGL2CmdUpdateBuffer, _WebGL2CmdObject4);

    function WebGL2CmdUpdateBuffer() {
      var _this4;

      _classCallCheck(this, WebGL2CmdUpdateBuffer);

      _this4 = _possibleConstructorReturn(this, _getPrototypeOf(WebGL2CmdUpdateBuffer).call(this, WebGL2Cmd.UPDATE_BUFFER));
      _this4.gpuBuffer = null;
      _this4.buffer = null;
      _this4.offset = 0;
      _this4.size = 0;
      return _this4;
    }

    _createClass(WebGL2CmdUpdateBuffer, [{
      key: "clear",
      value: function clear() {
        this.gpuBuffer = null;
        this.buffer = null;
      }
    }]);

    return WebGL2CmdUpdateBuffer;
  }(WebGL2CmdObject);

  _exports.WebGL2CmdUpdateBuffer = WebGL2CmdUpdateBuffer;

  var WebGL2GFXTextureSubres = function WebGL2GFXTextureSubres() {
    _classCallCheck(this, WebGL2GFXTextureSubres);

    this.baseMipLevel = 0;
    this.levelCount = 1;
    this.baseArrayLayer = 0;
    this.layerCount = 1;
  };

  _exports.WebGL2GFXTextureSubres = WebGL2GFXTextureSubres;

  var WebGL2GFXBufferTextureCopy = function WebGL2GFXBufferTextureCopy() {
    _classCallCheck(this, WebGL2GFXBufferTextureCopy);

    this.buffOffset = 0;
    this.buffStride = 0;
    this.buffTexHeight = 0;
    this.texOffset = [0, 0, 0];
    this.texExtent = [0, 0, 0];
    this.texSubres = new WebGL2GFXTextureSubres();
  };

  _exports.WebGL2GFXBufferTextureCopy = WebGL2GFXBufferTextureCopy;

  var WebGL2CmdCopyBufferToTexture = /*#__PURE__*/function (_WebGL2CmdObject5) {
    _inherits(WebGL2CmdCopyBufferToTexture, _WebGL2CmdObject5);

    function WebGL2CmdCopyBufferToTexture() {
      var _this5;

      _classCallCheck(this, WebGL2CmdCopyBufferToTexture);

      _this5 = _possibleConstructorReturn(this, _getPrototypeOf(WebGL2CmdCopyBufferToTexture).call(this, WebGL2Cmd.COPY_BUFFER_TO_TEXTURE));
      _this5.gpuBuffer = null;
      _this5.gpuTexture = null;
      _this5.dstLayout = null;
      _this5.regions = [];
      return _this5;
    }

    _createClass(WebGL2CmdCopyBufferToTexture, [{
      key: "clear",
      value: function clear() {
        this.gpuBuffer = null;
        this.gpuTexture = null;
        this.dstLayout = null;
        this.regions.length = 0;
      }
    }]);

    return WebGL2CmdCopyBufferToTexture;
  }(WebGL2CmdObject);

  _exports.WebGL2CmdCopyBufferToTexture = WebGL2CmdCopyBufferToTexture;

  var WebGL2CmdPackage = /*#__PURE__*/function () {
    function WebGL2CmdPackage() {
      _classCallCheck(this, WebGL2CmdPackage);

      this.cmds = new _cachedArray.CachedArray(1);
      this.beginRenderPassCmds = new _cachedArray.CachedArray(1);
      this.bindStatesCmds = new _cachedArray.CachedArray(1);
      this.drawCmds = new _cachedArray.CachedArray(1);
      this.updateBufferCmds = new _cachedArray.CachedArray(1);
      this.copyBufferToTextureCmds = new _cachedArray.CachedArray(1);
    }

    _createClass(WebGL2CmdPackage, [{
      key: "clearCmds",
      value: function clearCmds(allocator) {
        if (this.beginRenderPassCmds.length) {
          allocator.beginRenderPassCmdPool.freeCmds(this.beginRenderPassCmds);
          this.beginRenderPassCmds.clear();
        }

        if (this.bindStatesCmds.length) {
          allocator.bindStatesCmdPool.freeCmds(this.bindStatesCmds);
          this.bindStatesCmds.clear();
        }

        if (this.drawCmds.length) {
          allocator.drawCmdPool.freeCmds(this.drawCmds);
          this.drawCmds.clear();
        }

        if (this.updateBufferCmds.length) {
          allocator.updateBufferCmdPool.freeCmds(this.updateBufferCmds);
          this.updateBufferCmds.clear();
        }

        if (this.copyBufferToTextureCmds.length) {
          allocator.copyBufferToTextureCmdPool.freeCmds(this.copyBufferToTextureCmds);
          this.copyBufferToTextureCmds.clear();
        }

        this.cmds.clear();
      }
    }]);

    return WebGL2CmdPackage;
  }();

  _exports.WebGL2CmdPackage = WebGL2CmdPackage;

  function WebGL2CmdFuncCreateBuffer(device, gpuBuffer) {
    var gl = device.gl;
    var cache = device.stateCache;
    var glUsage = gpuBuffer.memUsage & _define.GFXMemoryUsageBit.HOST ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;

    if (gpuBuffer.usage & _define.GFXBufferUsageBit.VERTEX) {
      gpuBuffer.glTarget = gl.ARRAY_BUFFER;
      var glBuffer = gl.createBuffer();

      if (glBuffer) {
        gpuBuffer.glBuffer = glBuffer;

        if (gpuBuffer.size > 0) {
          if (device.useVAO) {
            if (cache.glVAO) {
              gl.bindVertexArray(null);
              cache.glVAO = null;
            }
          }

          if (device.stateCache.glArrayBuffer !== gpuBuffer.glBuffer) {
            gl.bindBuffer(gl.ARRAY_BUFFER, gpuBuffer.glBuffer);
            device.stateCache.glArrayBuffer = gpuBuffer.glBuffer;
          }

          gl.bufferData(gl.ARRAY_BUFFER, gpuBuffer.size, glUsage);
          gl.bindBuffer(gl.ARRAY_BUFFER, null);
          device.stateCache.glArrayBuffer = null;
        }
      }
    } else if (gpuBuffer.usage & _define.GFXBufferUsageBit.INDEX) {
      gpuBuffer.glTarget = gl.ELEMENT_ARRAY_BUFFER;

      var _glBuffer = gl.createBuffer();

      if (_glBuffer) {
        gpuBuffer.glBuffer = _glBuffer;

        if (gpuBuffer.size > 0) {
          if (device.useVAO) {
            if (cache.glVAO) {
              gl.bindVertexArray(null);
              cache.glVAO = null;
            }
          }

          if (device.stateCache.glElementArrayBuffer !== gpuBuffer.glBuffer) {
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);
            device.stateCache.glElementArrayBuffer = gpuBuffer.glBuffer;
          }

          gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.size, glUsage);
          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
          device.stateCache.glElementArrayBuffer = null;
        }
      }
    } else if (gpuBuffer.usage & _define.GFXBufferUsageBit.UNIFORM) {
      gpuBuffer.glTarget = gl.UNIFORM_BUFFER;

      var _glBuffer2 = gl.createBuffer();

      if (_glBuffer2 && gpuBuffer.size > 0) {
        gpuBuffer.glBuffer = _glBuffer2;

        if (device.stateCache.glUniformBuffer !== gpuBuffer.glBuffer) {
          gl.bindBuffer(gl.UNIFORM_BUFFER, gpuBuffer.glBuffer);
          device.stateCache.glUniformBuffer = gpuBuffer.glBuffer;
        }

        gl.bufferData(gl.UNIFORM_BUFFER, gpuBuffer.size, glUsage);
        gl.bindBuffer(gl.UNIFORM_BUFFER, null);
        device.stateCache.glUniformBuffer = null;
      }
    } else if (gpuBuffer.usage & _define.GFXBufferUsageBit.INDIRECT) {
      gpuBuffer.glTarget = gl.NONE;
    } else if (gpuBuffer.usage & _define.GFXBufferUsageBit.TRANSFER_DST) {
      gpuBuffer.glTarget = gl.NONE;
    } else if (gpuBuffer.usage & _define.GFXBufferUsageBit.TRANSFER_SRC) {
      gpuBuffer.glTarget = gl.NONE;
    } else {
      console.error('Unsupported GFXBufferType, create buffer failed.');
      gpuBuffer.glTarget = gl.NONE;
    }
  }

  function WebGL2CmdFuncDestroyBuffer(device, gpuBuffer) {
    var gl = device.gl;

    if (gpuBuffer.glBuffer) {
      // Firefox 75+ implicitly unbind whatever buffer there was on the slot sometimes
      // can be reproduced in the static batching scene at https://github.com/cocos-creator/test-cases-3d
      switch (gpuBuffer.glTarget) {
        case gl.ARRAY_BUFFER:
          if (device.useVAO && device.stateCache.glVAO) {
            gl.bindVertexArray(null);
            device.stateCache.glVAO = null;
          }

          gl.bindBuffer(gl.ARRAY_BUFFER, null);
          device.stateCache.glArrayBuffer = null;
          break;

        case gl.ELEMENT_ARRAY_BUFFER:
          if (device.useVAO && device.stateCache.glVAO) {
            gl.bindVertexArray(null);
            device.stateCache.glVAO = null;
          }

          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
          device.stateCache.glElementArrayBuffer = null;
          break;

        case gl.UNIFORM_BUFFER:
          gl.bindBuffer(gl.UNIFORM_BUFFER, null);
          device.stateCache.glUniformBuffer = null;
          break;
      }

      gl.deleteBuffer(gpuBuffer.glBuffer);
      gpuBuffer.glBuffer = null;
    }
  }

  function WebGL2CmdFuncResizeBuffer(device, gpuBuffer) {
    var gl = device.gl;
    var cache = device.stateCache;
    var glUsage = gpuBuffer.memUsage & _define.GFXMemoryUsageBit.HOST ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;

    if (gpuBuffer.usage & _define.GFXBufferUsageBit.VERTEX) {
      if (device.useVAO) {
        if (cache.glVAO) {
          gl.bindVertexArray(null);
          cache.glVAO = null;
        }
      }

      if (cache.glArrayBuffer !== gpuBuffer.glBuffer) {
        gl.bindBuffer(gl.ARRAY_BUFFER, gpuBuffer.glBuffer);
      }

      if (gpuBuffer.buffer) {
        gl.bufferData(gl.ARRAY_BUFFER, gpuBuffer.buffer, glUsage);
      } else {
        gl.bufferData(gl.ARRAY_BUFFER, gpuBuffer.size, glUsage);
      }

      gl.bindBuffer(gl.ARRAY_BUFFER, null);
      cache.glArrayBuffer = null;
    } else if (gpuBuffer.usage & _define.GFXBufferUsageBit.INDEX) {
      if (device.useVAO) {
        if (cache.glVAO) {
          gl.bindVertexArray(null);
          cache.glVAO = null;
        }
      }

      if (device.stateCache.glElementArrayBuffer !== gpuBuffer.glBuffer) {
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);
      }

      if (gpuBuffer.buffer) {
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.buffer, glUsage);
      } else {
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.size, glUsage);
      }

      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
      device.stateCache.glElementArrayBuffer = null;
    } else if (gpuBuffer.usage & _define.GFXBufferUsageBit.UNIFORM) {
      if (device.stateCache.glUniformBuffer !== gpuBuffer.glBuffer) {
        gl.bindBuffer(gl.UNIFORM_BUFFER, gpuBuffer.glBuffer);
      }

      gl.bufferData(gl.UNIFORM_BUFFER, gpuBuffer.size, glUsage);
      gl.bindBuffer(gl.UNIFORM_BUFFER, null);
      device.stateCache.glUniformBuffer = null;
    } else if (gpuBuffer.usage & _define.GFXBufferUsageBit.INDIRECT || gpuBuffer.usage & _define.GFXBufferUsageBit.TRANSFER_DST || gpuBuffer.usage & _define.GFXBufferUsageBit.TRANSFER_SRC) {
      gpuBuffer.glTarget = gl.NONE;
    } else {
      console.error('Unsupported GFXBufferType, create buffer failed.');
      gpuBuffer.glTarget = gl.NONE;
    }
  }

  function WebGL2CmdFuncUpdateBuffer(device, gpuBuffer, buffer, offset, size) {
    if (gpuBuffer.usage & _define.GFXBufferUsageBit.INDIRECT) {
      gpuBuffer.indirects = buffer.drawInfos;
    } else {
      var buff = buffer;
      var gl = device.gl;
      var cache = device.stateCache;

      switch (gpuBuffer.glTarget) {
        case gl.ARRAY_BUFFER:
          {
            if (cache.glVAO) {
              gl.bindVertexArray(null);
              cache.glVAO = null;
            }

            if (cache.glArrayBuffer !== gpuBuffer.glBuffer) {
              gl.bindBuffer(gl.ARRAY_BUFFER, gpuBuffer.glBuffer);
              cache.glArrayBuffer = gpuBuffer.glBuffer;
            }

            if (size === buff.byteLength) {
              gl.bufferSubData(gpuBuffer.glTarget, offset, buff);
            } else {
              gl.bufferSubData(gpuBuffer.glTarget, offset, buff.slice(0, size));
            }

            break;
          }

        case gl.ELEMENT_ARRAY_BUFFER:
          {
            if (cache.glVAO) {
              gl.bindVertexArray(null);
              cache.glVAO = null;
            }

            if (cache.glElementArrayBuffer !== gpuBuffer.glBuffer) {
              gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);
              cache.glElementArrayBuffer = gpuBuffer.glBuffer;
            }

            if (size === buff.byteLength) {
              gl.bufferSubData(gpuBuffer.glTarget, offset, buff);
            } else {
              gl.bufferSubData(gpuBuffer.glTarget, offset, buff.slice(0, size));
            }

            break;
          }

        case gl.UNIFORM_BUFFER:
          {
            if (cache.glUniformBuffer !== gpuBuffer.glBuffer) {
              gl.bindBuffer(gl.UNIFORM_BUFFER, gpuBuffer.glBuffer);
              cache.glUniformBuffer = gpuBuffer.glBuffer;
            }

            if (size === buff.byteLength) {
              gl.bufferSubData(gpuBuffer.glTarget, offset, buff); // if (gl.getBufferParameter(gl.UNIFORM_BUFFER, gl.BUFFER_SIZE) !== buff.length * 4) { debugger; }
            } else {
              gl.bufferSubData(gpuBuffer.glTarget, offset, new Float32Array(buff, 0, size / 4));
            }

            break;
          }

        default:
          {
            console.error('Unsupported GFXBufferType, update buffer failed.');
            return;
          }
      }
    }
  }

  function WebGL2CmdFuncCreateTexture(device, gpuTexture) {
    var gl = device.gl;
    gpuTexture.glInternelFmt = GFXFormatToWebGLInternalFormat(gpuTexture.format, gl);
    gpuTexture.glFormat = GFXFormatToWebGLFormat(gpuTexture.format, gl);
    gpuTexture.glType = GFXFormatToWebGLType(gpuTexture.format, gl);
    var w = gpuTexture.width;
    var h = gpuTexture.height;

    switch (gpuTexture.viewType) {
      case _define.GFXTextureViewType.TV2D:
        {
          gpuTexture.viewType = _define.GFXTextureViewType.TV2D;
          gpuTexture.glTarget = gl.TEXTURE_2D;
          var maxSize = Math.max(w, h);

          if (maxSize > device.maxTextureSize) {
            (0, _index.errorID)(9100, maxSize, device.maxTextureSize);
          }

          if (gpuTexture.samples === _define.GFXSampleCount.X1) {
            var glTexture = gl.createTexture();

            if (glTexture && gpuTexture.size > 0) {
              gpuTexture.glTexture = glTexture;
              var glTexUnit = device.stateCache.glTexUnits[device.stateCache.texUnit];

              if (glTexUnit.glTexture !== gpuTexture.glTexture) {
                gl.bindTexture(gl.TEXTURE_2D, gpuTexture.glTexture);
                glTexUnit.glTexture = gpuTexture.glTexture;
              }

              if (!_define.GFXFormatInfos[gpuTexture.format].isCompressed) {
                for (var i = 0; i < gpuTexture.mipLevel; ++i) {
                  gl.texImage2D(gl.TEXTURE_2D, i, gpuTexture.glInternelFmt, w, h, 0, gpuTexture.glFormat, gpuTexture.glType, null);
                  w = Math.max(1, w >> 1);
                  h = Math.max(1, h >> 1);
                }
              } else {
                if (gpuTexture.glInternelFmt !== _webglDefine.WebGLEXT.COMPRESSED_RGB_ETC1_WEBGL) {
                  for (var _i = 0; _i < gpuTexture.mipLevel; ++_i) {
                    var imgSize = (0, _define.GFXFormatSize)(gpuTexture.format, w, h, 1);
                    var view = new Uint8Array(imgSize);
                    gl.compressedTexImage2D(gl.TEXTURE_2D, _i, gpuTexture.glInternelFmt, w, h, 0, view);
                    w = Math.max(1, w >> 1);
                    h = Math.max(1, h >> 1);
                  }
                } else {
                  // init 2 x 2 texture
                  var _imgSize = (0, _define.GFXFormatSize)(gpuTexture.format, 2, 2, 1);

                  var _view = new Uint8Array(_imgSize);

                  gl.compressedTexImage2D(gl.TEXTURE_2D, 0, gpuTexture.glInternelFmt, 2, 2, 0, _view);
                }
              }
              /*
              if (gpuTexture.isPowerOf2) {
                  gpuTexture.glWrapS = gl.REPEAT;
                  gpuTexture.glWrapT = gl.REPEAT;
              } else {
                  gpuTexture.glWrapS = gl.CLAMP_TO_EDGE;
                  gpuTexture.glWrapT = gl.CLAMP_TO_EDGE;
              }
              gpuTexture.glMinFilter = gl.LINEAR;
              gpuTexture.glMagFilter = gl.LINEAR;
              gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_WRAP_S, gpuTexture.glWrapS);
              gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_WRAP_T, gpuTexture.glWrapT);
              gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_MIN_FILTER, gpuTexture.glMinFilter);
              gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_MAG_FILTER, gpuTexture.glMagFilter);
              */

            } else {
              gl.deleteTexture(glTexture);
            }
          } else {
            var glRenderbuffer = gl.createRenderbuffer();

            if (glRenderbuffer && gpuTexture.size > 0) {
              gpuTexture.glRenderbuffer = glRenderbuffer;

              if (device.stateCache.glRenderbuffer !== gpuTexture.glRenderbuffer) {
                gl.bindRenderbuffer(gl.RENDERBUFFER, gpuTexture.glRenderbuffer);
                device.stateCache.glRenderbuffer = gpuTexture.glRenderbuffer;
              }

              gl.renderbufferStorageMultisample(gl.RENDERBUFFER, SAMPLES[gpuTexture.samples], gpuTexture.glInternelFmt, gpuTexture.width, gpuTexture.height);
            }
          }

          break;
        }

      case _define.GFXTextureViewType.CUBE:
        {
          gpuTexture.viewType = _define.GFXTextureViewType.CUBE;
          gpuTexture.glTarget = gl.TEXTURE_CUBE_MAP;

          var _maxSize = Math.max(w, h);

          if (_maxSize > device.maxCubeMapTextureSize) {
            (0, _index.errorID)(9100, _maxSize, device.maxTextureSize);
          }

          var _glTexture = gl.createTexture();

          if (_glTexture && gpuTexture.size > 0) {
            gpuTexture.glTexture = _glTexture;
            var _glTexUnit = device.stateCache.glTexUnits[device.stateCache.texUnit];

            if (_glTexUnit.glTexture !== gpuTexture.glTexture) {
              gl.bindTexture(gl.TEXTURE_CUBE_MAP, gpuTexture.glTexture);
              _glTexUnit.glTexture = gpuTexture.glTexture;
            }

            if (!_define.GFXFormatInfos[gpuTexture.format].isCompressed) {
              for (var f = 0; f < 6; ++f) {
                w = gpuTexture.width;
                h = gpuTexture.height;

                for (var _i2 = 0; _i2 < gpuTexture.mipLevel; ++_i2) {
                  gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, _i2, gpuTexture.glInternelFmt, w, h, 0, gpuTexture.glFormat, gpuTexture.glType, null);
                  w = Math.max(1, w >> 1);
                  h = Math.max(1, h >> 1);
                }
              }
            } else {
              if (gpuTexture.glInternelFmt !== _webglDefine.WebGLEXT.COMPRESSED_RGB_ETC1_WEBGL) {
                for (var _f = 0; _f < 6; ++_f) {
                  w = gpuTexture.width;
                  h = gpuTexture.height;

                  for (var _i3 = 0; _i3 < gpuTexture.mipLevel; ++_i3) {
                    var _imgSize2 = (0, _define.GFXFormatSize)(gpuTexture.format, w, h, 1);

                    var _view2 = new Uint8Array(_imgSize2);

                    gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + _f, _i3, gpuTexture.glInternelFmt, w, h, 0, _view2);
                    w = Math.max(1, w >> 1);
                    h = Math.max(1, h >> 1);
                  }
                }
              } else {
                for (var _f2 = 0; _f2 < 6; ++_f2) {
                  var _imgSize3 = (0, _define.GFXFormatSize)(gpuTexture.format, 2, 2, 1);

                  var _view3 = new Uint8Array(_imgSize3);

                  gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + _f2, 0, gpuTexture.glInternelFmt, 2, 2, 0, _view3);
                }
              }
            }
            /*
            if (gpuTexture.isPowerOf2) {
                gpuTexture.glWrapS = gl.REPEAT;
                gpuTexture.glWrapT = gl.REPEAT;
            } else {
                gpuTexture.glWrapS = gl.CLAMP_TO_EDGE;
                gpuTexture.glWrapT = gl.CLAMP_TO_EDGE;
            }
            gpuTexture.glMinFilter = gl.LINEAR;
            gpuTexture.glMagFilter = gl.LINEAR;
              gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_WRAP_S, gpuTexture.glWrapS);
            gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_WRAP_T, gpuTexture.glWrapT);
            gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_MIN_FILTER, gpuTexture.glMinFilter);
            gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_MAG_FILTER, gpuTexture.glMagFilter);
            */

          }

          break;
        }

      default:
        {
          console.error('Unsupported GFXTextureType, create texture failed.');
          gpuTexture.viewType = _define.GFXTextureViewType.TV2D;
          gpuTexture.glTarget = gl.TEXTURE_2D;
        }
    }
  }

  function WebGL2CmdFuncDestroyTexture(device, gpuTexture) {
    if (gpuTexture.glTexture) {
      device.gl.deleteTexture(gpuTexture.glTexture);
      gpuTexture.glTexture = null;
    }

    if (gpuTexture.glRenderbuffer) {
      device.gl.deleteRenderbuffer(gpuTexture.glRenderbuffer);
      gpuTexture.glRenderbuffer = null;
    }
  }

  function WebGL2CmdFuncResizeTexture(device, gpuTexture) {
    var gl = device.gl;
    gpuTexture.glInternelFmt = GFXFormatToWebGLInternalFormat(gpuTexture.format, gl);
    gpuTexture.glFormat = GFXFormatToWebGLFormat(gpuTexture.format, gl);
    gpuTexture.glType = GFXFormatToWebGLType(gpuTexture.format, gl);
    var w = gpuTexture.width;
    var h = gpuTexture.height;

    switch (gpuTexture.viewType) {
      case _define.GFXTextureViewType.TV2D:
        {
          gpuTexture.viewType = _define.GFXTextureViewType.TV2D;
          gpuTexture.glTarget = gl.TEXTURE_2D;
          var maxSize = Math.max(w, h);

          if (maxSize > device.maxTextureSize) {
            (0, _index.errorID)(9100, maxSize, device.maxTextureSize);
          }

          if (gpuTexture.samples === _define.GFXSampleCount.X1) {
            var glTexUnit = device.stateCache.glTexUnits[device.stateCache.texUnit];

            if (glTexUnit.glTexture !== gpuTexture.glTexture) {
              gl.bindTexture(gl.TEXTURE_2D, gpuTexture.glTexture);
              glTexUnit.glTexture = gpuTexture.glTexture;
            }

            if (!_define.GFXFormatInfos[gpuTexture.format].isCompressed) {
              for (var i = 0; i < gpuTexture.mipLevel; ++i) {
                gl.texImage2D(gl.TEXTURE_2D, i, gpuTexture.glInternelFmt, w, h, 0, gpuTexture.glFormat, gpuTexture.glType, null);
                w = Math.max(1, w >> 1);
                h = Math.max(1, h >> 1);
              }
            } else {
              if (gpuTexture.glInternelFmt !== _webglDefine.WebGLEXT.COMPRESSED_RGB_ETC1_WEBGL) {
                for (var _i4 = 0; _i4 < gpuTexture.mipLevel; ++_i4) {
                  var imgSize = (0, _define.GFXFormatSize)(gpuTexture.format, w, h, 1);
                  var view = new Uint8Array(imgSize);
                  gl.compressedTexImage2D(gl.TEXTURE_2D, _i4, gpuTexture.glInternelFmt, w, h, 0, view);
                  w = Math.max(1, w >> 1);
                  h = Math.max(1, h >> 1);
                }
              }
            }
          } else {
            var glRenderbuffer = gl.createRenderbuffer();

            if (glRenderbuffer && gpuTexture.size > 0) {
              gpuTexture.glRenderbuffer = glRenderbuffer;

              if (device.stateCache.glRenderbuffer !== gpuTexture.glRenderbuffer) {
                gl.bindRenderbuffer(gl.RENDERBUFFER, gpuTexture.glRenderbuffer);
                device.stateCache.glRenderbuffer = gpuTexture.glRenderbuffer;
              }

              gl.renderbufferStorageMultisample(gl.RENDERBUFFER, SAMPLES[gpuTexture.samples], gpuTexture.glInternelFmt, gpuTexture.width, gpuTexture.height);
            }
          }

          break;
        }

      case _define.GFXTextureViewType.CUBE:
        {
          gpuTexture.viewType = _define.GFXTextureViewType.CUBE;
          gpuTexture.glTarget = gl.TEXTURE_CUBE_MAP;

          var _maxSize2 = Math.max(w, h);

          if (_maxSize2 > device.maxCubeMapTextureSize) {
            (0, _index.errorID)(9100, _maxSize2, device.maxTextureSize);
          }

          var _glTexUnit2 = device.stateCache.glTexUnits[device.stateCache.texUnit];

          if (_glTexUnit2.glTexture !== gpuTexture.glTexture) {
            gl.bindTexture(gl.TEXTURE_CUBE_MAP, gpuTexture.glTexture);
            _glTexUnit2.glTexture = gpuTexture.glTexture;
          }

          if (!_define.GFXFormatInfos[gpuTexture.format].isCompressed) {
            for (var f = 0; f < 6; ++f) {
              w = gpuTexture.width;
              h = gpuTexture.height;

              for (var _i5 = 0; _i5 < gpuTexture.mipLevel; ++_i5) {
                gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, _i5, gpuTexture.glInternelFmt, w, h, 0, gpuTexture.glFormat, gpuTexture.glType, null);
                w = Math.max(1, w >> 1);
                h = Math.max(1, h >> 1);
              }
            }
          } else {
            if (gpuTexture.glInternelFmt !== _webglDefine.WebGLEXT.COMPRESSED_RGB_ETC1_WEBGL) {
              for (var _f3 = 0; _f3 < 6; ++_f3) {
                w = gpuTexture.width;
                h = gpuTexture.height;

                for (var _i6 = 0; _i6 < gpuTexture.mipLevel; ++_i6) {
                  var _imgSize4 = (0, _define.GFXFormatSize)(gpuTexture.format, w, h, 1);

                  var _view4 = new Uint8Array(_imgSize4);

                  gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + _f3, _i6, gpuTexture.glInternelFmt, w, h, 0, _view4);
                  w = Math.max(1, w >> 1);
                  h = Math.max(1, h >> 1);
                }
              }
            }
          }

          break;
        }

      default:
        {
          console.error('Unsupported GFXTextureType, create texture failed.');
          gpuTexture.viewType = _define.GFXTextureViewType.TV2D;
          gpuTexture.glTarget = gl.TEXTURE_2D;
        }
    }
  }

  function WebGL2CmdFuncCreateSampler(device, gpuSampler) {
    var gl = device.gl;
    var glSampler = gl.createSampler();

    if (glSampler) {
      if (gpuSampler.minFilter === _define.GFXFilter.LINEAR || gpuSampler.minFilter === _define.GFXFilter.ANISOTROPIC) {
        if (gpuSampler.mipFilter === _define.GFXFilter.LINEAR || gpuSampler.mipFilter === _define.GFXFilter.ANISOTROPIC) {
          gpuSampler.glMinFilter = gl.LINEAR_MIPMAP_LINEAR;
        } else if (gpuSampler.mipFilter === _define.GFXFilter.POINT) {
          gpuSampler.glMinFilter = gl.LINEAR_MIPMAP_NEAREST;
        } else {
          gpuSampler.glMinFilter = gl.LINEAR;
        }
      } else {
        if (gpuSampler.mipFilter === _define.GFXFilter.LINEAR || gpuSampler.mipFilter === _define.GFXFilter.ANISOTROPIC) {
          gpuSampler.glMinFilter = gl.NEAREST_MIPMAP_LINEAR;
        } else if (gpuSampler.mipFilter === _define.GFXFilter.POINT) {
          gpuSampler.glMinFilter = gl.NEAREST_MIPMAP_NEAREST;
        } else {
          gpuSampler.glMinFilter = gl.NEAREST;
        }
      }

      if (gpuSampler.magFilter === _define.GFXFilter.LINEAR || gpuSampler.magFilter === _define.GFXFilter.ANISOTROPIC) {
        gpuSampler.glMagFilter = gl.LINEAR;
      } else {
        gpuSampler.glMagFilter = gl.NEAREST;
      }

      gpuSampler.glWrapS = WebGLWraps[gpuSampler.addressU];
      gpuSampler.glWrapT = WebGLWraps[gpuSampler.addressV];
      gpuSampler.glWrapR = WebGLWraps[gpuSampler.addressW];
      gpuSampler.glSampler = glSampler;
      gl.samplerParameteri(glSampler, gl.TEXTURE_MIN_FILTER, gpuSampler.glMinFilter);
      gl.samplerParameteri(glSampler, gl.TEXTURE_MAG_FILTER, gpuSampler.glMagFilter);
      gl.samplerParameteri(glSampler, gl.TEXTURE_WRAP_S, gpuSampler.glWrapS);
      gl.samplerParameteri(glSampler, gl.TEXTURE_WRAP_T, gpuSampler.glWrapT);
      gl.samplerParameteri(glSampler, gl.TEXTURE_WRAP_R, gpuSampler.glWrapR);
      gl.samplerParameterf(glSampler, gl.TEXTURE_MIN_LOD, gpuSampler.minLOD);
      gl.samplerParameterf(glSampler, gl.TEXTURE_MAX_LOD, gpuSampler.maxLOD);
    }
  }

  function WebGL2CmdFuncDestroySampler(device, gpuSampler) {
    if (gpuSampler.glSampler) {
      device.gl.deleteSampler(gpuSampler.glSampler);
      gpuSampler.glSampler = null;
    }
  }

  function WebGL2CmdFuncCreateFramebuffer(device, gpuFramebuffer) {
    if (gpuFramebuffer.isOffscreen) {
      var gl = device.gl;
      var attachments = [];
      var glFramebuffer = gl.createFramebuffer();

      if (glFramebuffer) {
        gpuFramebuffer.glFramebuffer = glFramebuffer;

        if (device.stateCache.glFramebuffer !== gpuFramebuffer.glFramebuffer) {
          gl.bindFramebuffer(gl.FRAMEBUFFER, gpuFramebuffer.glFramebuffer);
          device.stateCache.glFramebuffer = gpuFramebuffer.glFramebuffer;
        }

        for (var i = 0; i < gpuFramebuffer.gpuColorViews.length; ++i) {
          var cv = gpuFramebuffer.gpuColorViews[i];

          if (cv) {
            if (cv.gpuTexture.glTexture) {
              gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, cv.gpuTexture.glTarget, cv.gpuTexture.glTexture, cv.baseLevel);
            } else {
              gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.RENDERBUFFER, cv.gpuTexture.glRenderbuffer);
            }

            attachments.push(gl.COLOR_ATTACHMENT0 + i);
          }
        }

        var dsv = gpuFramebuffer.gpuDepthStencilView;

        if (dsv) {
          var glAttachment = _define.GFXFormatInfos[dsv.format].hasStencil ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;

          if (dsv.gpuTexture.glTexture) {
            gl.framebufferTexture2D(gl.FRAMEBUFFER, glAttachment, dsv.gpuTexture.glTarget, dsv.gpuTexture.glTexture, dsv.baseLevel);
          } else {
            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, glAttachment, gl.RENDERBUFFER, dsv.gpuTexture.glRenderbuffer);
          }
        }

        gl.drawBuffers(attachments);
        var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);

        if (status !== gl.FRAMEBUFFER_COMPLETE) {
          switch (status) {
            case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
              {
                console.error('glCheckFramebufferStatus() - FRAMEBUFFER_INCOMPLETE_ATTACHMENT');
                break;
              }

            case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
              {
                console.error('glCheckFramebufferStatus() - FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT');
                break;
              }

            case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
              {
                console.error('glCheckFramebufferStatus() - FRAMEBUFFER_INCOMPLETE_DIMENSIONS');
                break;
              }

            case gl.FRAMEBUFFER_UNSUPPORTED:
              {
                console.error('glCheckFramebufferStatus() - FRAMEBUFFER_UNSUPPORTED');
                break;
              }

            default:
          }
        }
      }
    }
  }

  function WebGL2CmdFuncDestroyFramebuffer(device, gpuFramebuffer) {
    if (gpuFramebuffer.glFramebuffer) {
      device.gl.deleteFramebuffer(gpuFramebuffer.glFramebuffer);
      gpuFramebuffer.glFramebuffer = null;
    }
  }

  function WebGL2CmdFuncCreateShader(device, gpuShader) {
    var gl = device.gl;

    var _loop = function _loop(k) {
      var gpuStage = gpuShader.gpuStages[k];
      var glShaderType = 0;
      var shaderTypeStr = '';
      var lineNumber = 1;

      switch (gpuStage.type) {
        case _define.GFXShaderType.VERTEX:
          {
            shaderTypeStr = 'VertexShader';
            glShaderType = gl.VERTEX_SHADER;
            break;
          }

        case _define.GFXShaderType.FRAGMENT:
          {
            shaderTypeStr = 'FragmentShader';
            glShaderType = gl.FRAGMENT_SHADER;
            break;
          }

        default:
          {
            console.error('Unsupported GFXShaderType.');
            return {
              v: void 0
            };
          }
      }

      var glShader = gl.createShader(glShaderType);

      if (glShader) {
        gpuStage.glShader = glShader;
        gl.shaderSource(gpuStage.glShader, '#version 300 es\n' + gpuStage.source);
        gl.compileShader(gpuStage.glShader);

        if (!gl.getShaderParameter(gpuStage.glShader, gl.COMPILE_STATUS)) {
          console.error(shaderTypeStr + ' in \'' + gpuShader.name + '\' compilation failed.');
          console.error('Shader source dump:', gpuStage.source.replace(/^|\n/g, function () {
            return "\n".concat(lineNumber++, " ");
          }));
          console.error(gl.getShaderInfoLog(gpuStage.glShader));

          for (var l = 0; l < gpuShader.gpuStages.length; l++) {
            var stage = gpuShader.gpuStages[k];

            if (stage.glShader) {
              gl.deleteShader(stage.glShader);
              stage.glShader = null;
            }
          }

          return {
            v: void 0
          };
        }
      }
    };

    for (var k = 0; k < gpuShader.gpuStages.length; k++) {
      var _ret = _loop(k);

      if (_typeof(_ret) === "object") return _ret.v;
    }

    var glProgram = gl.createProgram();

    if (!glProgram) {
      return;
    }

    gpuShader.glProgram = glProgram; // link program

    for (var _k = 0; _k < gpuShader.gpuStages.length; _k++) {
      var gpuStage = gpuShader.gpuStages[_k];
      gl.attachShader(gpuShader.glProgram, gpuStage.glShader);
    }

    gl.linkProgram(gpuShader.glProgram); // detach & delete immediately

    for (var _k2 = 0; _k2 < gpuShader.gpuStages.length; _k2++) {
      var _gpuStage = gpuShader.gpuStages[_k2];

      if (_gpuStage.glShader) {
        gl.detachShader(gpuShader.glProgram, _gpuStage.glShader);
        gl.deleteShader(_gpuStage.glShader);
        _gpuStage.glShader = null;
      }
    }

    if (gl.getProgramParameter(gpuShader.glProgram, gl.LINK_STATUS)) {
      console.info('Shader \'' + gpuShader.name + '\' compilation successed.');
    } else {
      console.error('Failed to link shader \'' + gpuShader.name + '\'.');
      console.error(gl.getProgramInfoLog(gpuShader.glProgram));
      return;
    } // parse inputs


    var activeAttribCount = gl.getProgramParameter(gpuShader.glProgram, gl.ACTIVE_ATTRIBUTES);
    gpuShader.glInputs = new Array(activeAttribCount);

    for (var i = 0; i < activeAttribCount; ++i) {
      var attribInfo = gl.getActiveAttrib(gpuShader.glProgram, i);

      if (attribInfo) {
        var varName = void 0;
        var nameOffset = attribInfo.name.indexOf('[');

        if (nameOffset !== -1) {
          varName = attribInfo.name.substr(0, nameOffset);
        } else {
          varName = attribInfo.name;
        }

        var glLoc = gl.getAttribLocation(gpuShader.glProgram, varName);
        var type = WebGLTypeToGFXType(attribInfo.type, gl);
        var stride = WebGLGetTypeSize(attribInfo.type, gl);
        gpuShader.glInputs[i] = {
          binding: glLoc,
          name: varName,
          type: type,
          stride: stride,
          count: attribInfo.size,
          size: stride * attribInfo.size,
          glType: attribInfo.type,
          glLoc: glLoc
        };
      }
    } // create uniform blocks


    var activeBlockCount = gl.getProgramParameter(gpuShader.glProgram, gl.ACTIVE_UNIFORM_BLOCKS);
    var blockName;
    var blockIdx;
    var blockSize;
    var blockBinding;
    var blockUniformCount;
    var uIndices;
    var indices; // let glUniformTypes: GLenum[];

    var glUniformSizes;
    var glUniformOffsets; // let glUniformArrayStride: GLint[];

    var glUniformInfo;

    if (activeBlockCount) {
      gpuShader.glBlocks = new Array(activeBlockCount);

      for (var b = 0; b < activeBlockCount; ++b) {
        blockName = gl.getActiveUniformBlockName(gpuShader.glProgram, b);

        var _nameOffset = blockName.indexOf('[');

        if (_nameOffset !== -1) {
          blockName = blockName.substr(0, _nameOffset);
        } // blockIdx = gl.getUniformBlockIndex(gpuShader.glProgram, blockName);


        blockBinding = -1;

        for (var _k3 = 0; _k3 < gpuShader.blocks.length; _k3++) {
          var block = gpuShader.blocks[_k3];

          if (block.name === blockName) {
            blockBinding = block.binding;
            break;
          }
        }

        if (blockBinding < 0) {
          (0, _index.error)("Block '".concat(blockName, "' does not bound"));
        } else {
          // blockIdx = gl.getUniformBlockIndex(gpuShader.glProgram, blockName);
          blockIdx = b;
          blockSize = gl.getActiveUniformBlockParameter(gpuShader.glProgram, blockIdx, gl.UNIFORM_BLOCK_DATA_SIZE);
          blockUniformCount = gl.getActiveUniformBlockParameter(gpuShader.glProgram, blockIdx, gl.UNIFORM_BLOCK_ACTIVE_UNIFORMS);
          gl.uniformBlockBinding(gpuShader.glProgram, blockIdx, blockBinding);
          var glBlock = {
            binding: blockBinding,
            idx: blockIdx,
            name: blockName,
            size: blockSize,
            glUniforms: new Array(blockUniformCount),
            glActiveUniforms: [],
            isUniformPackage: false
          };
          gpuShader.glBlocks[b] = glBlock;
          uIndices = gl.getActiveUniformBlockParameter(gpuShader.glProgram, blockIdx, gl.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES);
          indices = new Array(uIndices.length);

          for (var n = 0; n < uIndices.length; ++n) {
            indices[n] = uIndices[n];
          } // glUniformTypes = gl.getActiveUniforms(gpuShader.glProgram, indices, gl.UNIFORM_TYPE);


          glUniformSizes = gl.getActiveUniforms(gpuShader.glProgram, indices, gl.UNIFORM_SIZE);
          glUniformOffsets = gl.getActiveUniforms(gpuShader.glProgram, indices, gl.UNIFORM_OFFSET); // glUniformArrayStride = gl.getActiveUniforms(gpuShader.glProgram, indices, gl.UNIFORM_ARRAY_STRIDE);

          for (var u = 0; u < blockUniformCount; ++u) {
            glUniformInfo = gl.getActiveUniform(gpuShader.glProgram, uIndices[u]);

            if (glUniformInfo) {
              var _stride = WebGLGetTypeSize(glUniformInfo.type, gl);

              var size = glUniformSizes[u] * _stride;
              var begin = glUniformOffsets[u] / 4;
              var count = size / 4;
              var array = new Array(count);
              array.fill(0);
              glBlock.glUniforms[u] = {
                binding: -1,
                name: glUniformInfo.name,
                type: WebGLTypeToGFXType(glUniformInfo.type, gl),
                stride: _stride,
                count: glUniformInfo.size,
                size: size,
                offset: glUniformOffsets[u],
                glType: glUniformInfo.type,
                glLoc: -1,
                array: array,
                begin: begin
              };
            }
          }
        }
      }
    } // create uniform samplers


    if (gpuShader.samplers.length > 0) {
      gpuShader.glSamplers = new Array(gpuShader.samplers.length);

      for (var _i7 = 0; _i7 < gpuShader.samplers.length; ++_i7) {
        var sampler = gpuShader.samplers[_i7];
        gpuShader.glSamplers[_i7] = {
          binding: sampler.binding,
          name: sampler.name,
          type: sampler.type,
          units: [],
          glType: GFXTypeToWebGLType(sampler.type, gl),
          glLoc: -1
        };
      }
    } // parse uniforms


    var activeUniformCount = gl.getProgramParameter(gpuShader.glProgram, gl.ACTIVE_UNIFORMS);
    var unitIdx = 0;
    var glActiveSamplers = [];

    for (var _i8 = 0; _i8 < activeUniformCount; ++_i8) {
      var uniformInfo = gl.getActiveUniform(gpuShader.glProgram, _i8);

      if (uniformInfo) {
        var _glLoc = gl.getUniformLocation(gpuShader.glProgram, uniformInfo.name);

        if (_glLoc !== null) {
          var _varName = void 0;

          var _nameOffset2 = uniformInfo.name.indexOf('[');

          if (_nameOffset2 !== -1) {
            _varName = uniformInfo.name.substr(0, _nameOffset2);
          } else {
            _varName = uniformInfo.name;
          }

          var isSampler = uniformInfo.type === gl.SAMPLER_2D || uniformInfo.type === gl.SAMPLER_CUBE;

          if (isSampler) {
            for (var _k4 = 0; _k4 < gpuShader.glSamplers.length; _k4++) {
              var glSampler = gpuShader.glSamplers[_k4];

              if (glSampler.name === _varName) {
                // let varSize = stride * uniformInfo.size;
                for (var t = 0; t < uniformInfo.size; ++t) {
                  glSampler.units.push(unitIdx + t);
                }

                glSampler.glLoc = _glLoc;
                unitIdx += uniformInfo.size;
                glActiveSamplers.push(glSampler);
                break;
              }
            } // for

          }
        }
      }
    } // for


    if (glActiveSamplers.length) {
      if (device.stateCache.glProgram !== gpuShader.glProgram) {
        gl.useProgram(gpuShader.glProgram);
        device.stateCache.glProgram = gpuShader.glProgram;
      }

      for (var _k5 = 0; _k5 < glActiveSamplers.length; _k5++) {
        var _glSampler = glActiveSamplers[_k5];
        gl.uniform1iv(_glSampler.glLoc, _glSampler.units);
      }
    }
  }

  function WebGL2CmdFuncDestroyShader(device, gpuShader) {
    if (gpuShader.glProgram) {
      device.gl.deleteProgram(gpuShader.glProgram);
      gpuShader.glProgram = null;
    }
  }

  function WebGL2CmdFuncCreateInputAssember(device, gpuInputAssembler) {
    var gl = device.gl;
    gpuInputAssembler.glAttribs = new Array(gpuInputAssembler.attributes.length);
    var offsets = [0, 0, 0, 0, 0, 0, 0, 0];

    for (var i = 0; i < gpuInputAssembler.attributes.length; ++i) {
      var attrib = gpuInputAssembler.attributes[i];
      var stream = attrib.stream !== undefined ? attrib.stream : 0; // if (stream < gpuInputAssembler.gpuVertexBuffers.length) {

      var gpuBuffer = gpuInputAssembler.gpuVertexBuffers[stream];
      var glType = GFXFormatToWebGLType(attrib.format, gl);
      var size = _define.GFXFormatInfos[attrib.format].size;
      gpuInputAssembler.glAttribs[i] = {
        name: attrib.name,
        glBuffer: gpuBuffer.glBuffer,
        glType: glType,
        size: size,
        count: _define.GFXFormatInfos[attrib.format].count,
        stride: gpuBuffer.stride,
        componentCount: WebGLGetComponentCount(glType, gl),
        isNormalized: attrib.isNormalized !== undefined ? attrib.isNormalized : false,
        isInstanced: attrib.isInstanced !== undefined ? attrib.isInstanced : false,
        offset: offsets[stream]
      };
      offsets[stream] += size;
    }
  }

  function WebGL2CmdFuncDestroyInputAssembler(device, gpuInputAssembler) {
    var it = gpuInputAssembler.glVAOs.values();
    var res = it.next();

    while (!res.done) {
      device.gl.deleteVertexArray(res.value);
      res = it.next();
    }

    gpuInputAssembler.glVAOs.clear();
  }

  var gfxStateCache = {
    gpuInputAssembler: null,
    gpuShader: null,
    glPrimitive: 0
  };

  function WebGL2CmdFuncBeginRenderPass(device, gpuFramebuffer, renderArea, clearFlag, clearColors, clearDepth, clearStencil) {
    gfxStateCache.gpuInputAssembler = null;
    gfxStateCache.gpuShader = null;
    var gl = device.gl;
    var cache = device.stateCache;
    var clears = 0;

    if (gpuFramebuffer) {
      if (cache.glFramebuffer !== gpuFramebuffer.glFramebuffer) {
        gl.bindFramebuffer(gl.FRAMEBUFFER, gpuFramebuffer.glFramebuffer);
        cache.glFramebuffer = gpuFramebuffer.glFramebuffer;
      }

      if (cache.viewport.left !== renderArea.x || cache.viewport.top !== renderArea.y || cache.viewport.width !== renderArea.width || cache.viewport.height !== renderArea.height) {
        gl.viewport(renderArea.x, renderArea.y, renderArea.width, renderArea.height);
        cache.viewport.left = renderArea.x;
        cache.viewport.top = renderArea.y;
        cache.viewport.width = renderArea.width;
        cache.viewport.height = renderArea.height;
      }

      if (cache.scissorRect.x !== renderArea.x || cache.scissorRect.y !== renderArea.y || cache.scissorRect.width !== renderArea.width || cache.scissorRect.height !== renderArea.height) {
        gl.scissor(renderArea.x, renderArea.y, renderArea.width, renderArea.height);
        cache.scissorRect.x = renderArea.x;
        cache.scissorRect.y = renderArea.y;
        cache.scissorRect.width = renderArea.width;
        cache.scissorRect.height = renderArea.height;
      }

      var curGPURenderPass = gpuFramebuffer.gpuRenderPass;
      var invalidateAttachments = [];

      for (var j = 0; j < clearColors.length; ++j) {
        var colorAttachment = curGPURenderPass.colorAttachments[j];

        if (colorAttachment.format !== _define.GFXFormat.UNKNOWN) {
          switch (colorAttachment.loadOp) {
            case _define.GFXLoadOp.LOAD:
              break;
            // GL default behavior

            case _define.GFXLoadOp.CLEAR:
              {
                if (clearFlag & _define.GFXClearFlag.COLOR) {
                  if (cache.bs.targets[0].blendColorMask !== _define.GFXColorMask.ALL) {
                    gl.colorMask(true, true, true, true);
                  }

                  if (!gpuFramebuffer.isOffscreen) {
                    var clearColor = clearColors[0];
                    gl.clearColor(clearColor.r, clearColor.g, clearColor.b, clearColor.a);
                    clears |= gl.COLOR_BUFFER_BIT;
                  } else {
                    _f32v4[0] = clearColors[j].r;
                    _f32v4[1] = clearColors[j].g;
                    _f32v4[2] = clearColors[j].b;
                    _f32v4[3] = clearColors[j].a;
                    gl.clearBufferfv(gl.COLOR, j, _f32v4);
                  }
                }

                break;
              }

            case _define.GFXLoadOp.DISCARD:
              {
                // invalidate the framebuffer
                invalidateAttachments.push(gl.COLOR_ATTACHMENT0 + j);
                break;
              }

            default:
          }
        }
      } // if (curGPURenderPass)


      if (curGPURenderPass.depthStencilAttachment) {
        if (curGPURenderPass.depthStencilAttachment.format !== _define.GFXFormat.UNKNOWN) {
          switch (curGPURenderPass.depthStencilAttachment.depthLoadOp) {
            case _define.GFXLoadOp.LOAD:
              break;
            // GL default behavior

            case _define.GFXLoadOp.CLEAR:
              {
                if (clearFlag & _define.GFXClearFlag.DEPTH) {
                  if (!cache.dss.depthWrite) {
                    gl.depthMask(true);
                  }

                  gl.clearDepth(clearDepth);
                  clears |= gl.DEPTH_BUFFER_BIT;
                }

                break;
              }

            case _define.GFXLoadOp.DISCARD:
              {
                // invalidate the framebuffer
                invalidateAttachments.push(gl.DEPTH_ATTACHMENT);
                break;
              }

            default:
          }

          if (_define.GFXFormatInfos[curGPURenderPass.depthStencilAttachment.format].hasStencil) {
            switch (curGPURenderPass.depthStencilAttachment.stencilLoadOp) {
              case _define.GFXLoadOp.LOAD:
                break;
              // GL default behavior

              case _define.GFXLoadOp.CLEAR:
                {
                  if (clearFlag & _define.GFXClearFlag.STENCIL) {
                    if (!cache.dss.stencilWriteMaskFront) {
                      gl.stencilMaskSeparate(gl.FRONT, 0xffff);
                    }

                    if (!cache.dss.stencilWriteMaskBack) {
                      gl.stencilMaskSeparate(gl.BACK, 0xffff);
                    }

                    gl.clearStencil(clearStencil);
                    clears |= gl.STENCIL_BUFFER_BIT;
                  }

                  break;
                }

              case _define.GFXLoadOp.DISCARD:
                {
                  // invalidate the framebuffer
                  invalidateAttachments.push(gl.STENCIL_ATTACHMENT);
                  break;
                }

              default:
            }
          }
        }
      } // if (curGPURenderPass.depthStencilAttachment)


      if (invalidateAttachments.length) {
        gl.invalidateFramebuffer(gl.FRAMEBUFFER, invalidateAttachments);
      }

      if (clears) {
        gl.clear(clears);
      } // restore states


      if (clears & gl.COLOR_BUFFER_BIT) {
        var colorMask = cache.bs.targets[0].blendColorMask;

        if (colorMask !== _define.GFXColorMask.ALL) {
          var r = (colorMask & _define.GFXColorMask.R) !== _define.GFXColorMask.NONE;
          var g = (colorMask & _define.GFXColorMask.G) !== _define.GFXColorMask.NONE;
          var b = (colorMask & _define.GFXColorMask.B) !== _define.GFXColorMask.NONE;
          var a = (colorMask & _define.GFXColorMask.A) !== _define.GFXColorMask.NONE;
          gl.colorMask(r, g, b, a);
        }
      }

      if (clears & gl.DEPTH_BUFFER_BIT && !cache.dss.depthWrite) {
        gl.depthMask(false);
      }

      if (clears & gl.STENCIL_BUFFER_BIT) {
        if (!cache.dss.stencilWriteMaskFront) {
          gl.stencilMaskSeparate(gl.FRONT, 0);
        }

        if (!cache.dss.stencilWriteMaskBack) {
          gl.stencilMaskSeparate(gl.BACK, 0);
        }
      }
    } // if (gpuFramebuffer)

  }

  function WebGL2CmdFuncBindStates(device, gpuPipelineState, gpuBindingLayout, gpuInputAssembler, viewport, scissor, lineWidth, depthBias, blendConstants, depthBounds, stencilWriteMask, stencilCompareMask) {
    var gl = device.gl;
    var cache = device.stateCache;
    var isShaderChanged = false;
    var gpuShader = null;

    if (gpuPipelineState) {
      gfxStateCache.glPrimitive = gpuPipelineState.glPrimitive;

      if (gpuPipelineState.gpuShader) {
        var glProgram = gpuPipelineState.gpuShader.glProgram;

        if (cache.glProgram !== glProgram) {
          gl.useProgram(glProgram);
          cache.glProgram = glProgram;
          isShaderChanged = true;
        }

        gfxStateCache.gpuShader = gpuShader = gpuPipelineState.gpuShader;
      } // rasterizer state


      var rs = gpuPipelineState.rs;

      if (rs) {
        if (cache.rs.cullMode !== rs.cullMode) {
          switch (rs.cullMode) {
            case _define.GFXCullMode.NONE:
              {
                gl.disable(gl.CULL_FACE);
                break;
              }

            case _define.GFXCullMode.FRONT:
              {
                gl.enable(gl.CULL_FACE);
                gl.cullFace(gl.FRONT);
                break;
              }

            case _define.GFXCullMode.BACK:
              {
                gl.enable(gl.CULL_FACE);
                gl.cullFace(gl.BACK);
                break;
              }

            default:
          }

          device.stateCache.rs.cullMode = rs.cullMode;
        }

        var isFrontFaceCCW = device.reverseCW ? !rs.isFrontFaceCCW : rs.isFrontFaceCCW;

        if (device.stateCache.rs.isFrontFaceCCW !== isFrontFaceCCW) {
          gl.frontFace(isFrontFaceCCW ? gl.CCW : gl.CW);
          device.stateCache.rs.isFrontFaceCCW = isFrontFaceCCW;
        }

        if (device.stateCache.rs.depthBias !== rs.depthBias || device.stateCache.rs.depthBiasSlop !== rs.depthBiasSlop) {
          gl.polygonOffset(rs.depthBias, rs.depthBiasSlop);
          device.stateCache.rs.depthBias = rs.depthBias;
          device.stateCache.rs.depthBiasSlop = rs.depthBiasSlop;
        }

        if (device.stateCache.rs.lineWidth !== rs.lineWidth) {
          gl.lineWidth(rs.lineWidth);
          device.stateCache.rs.lineWidth = rs.lineWidth;
        }
      } // rasterizater state
      // depth-stencil state


      var dss = gpuPipelineState.dss;

      if (dss) {
        if (cache.dss.depthTest !== dss.depthTest) {
          if (dss.depthTest) {
            gl.enable(gl.DEPTH_TEST);
          } else {
            gl.disable(gl.DEPTH_TEST);
          }

          cache.dss.depthTest = dss.depthTest;
        }

        if (cache.dss.depthWrite !== dss.depthWrite) {
          gl.depthMask(dss.depthWrite);
          cache.dss.depthWrite = dss.depthWrite;
        }

        if (cache.dss.depthFunc !== dss.depthFunc) {
          gl.depthFunc(WebGLCmpFuncs[dss.depthFunc]);
          cache.dss.depthFunc = dss.depthFunc;
        } // front


        if (cache.dss.stencilTestFront !== dss.stencilTestFront || cache.dss.stencilTestBack !== dss.stencilTestBack) {
          if (dss.stencilTestFront || dss.stencilTestBack) {
            gl.enable(gl.STENCIL_TEST);
          } else {
            gl.disable(gl.STENCIL_TEST);
          }

          cache.dss.stencilTestFront = dss.stencilTestFront;
          cache.dss.stencilTestBack = dss.stencilTestBack;
        }

        if (cache.dss.stencilFuncFront !== dss.stencilFuncFront || cache.dss.stencilRefFront !== dss.stencilRefFront || cache.dss.stencilReadMaskFront !== dss.stencilReadMaskFront) {
          gl.stencilFuncSeparate(gl.FRONT, WebGLCmpFuncs[dss.stencilFuncFront], dss.stencilRefFront, dss.stencilReadMaskFront);
          cache.dss.stencilFuncFront = dss.stencilFuncFront;
          cache.dss.stencilRefFront = dss.stencilRefFront;
          cache.dss.stencilReadMaskFront = dss.stencilReadMaskFront;
        }

        if (cache.dss.stencilFailOpFront !== dss.stencilFailOpFront || cache.dss.stencilZFailOpFront !== dss.stencilZFailOpFront || cache.dss.stencilPassOpFront !== dss.stencilPassOpFront) {
          gl.stencilOpSeparate(gl.FRONT, WebGLStencilOps[dss.stencilFailOpFront], WebGLStencilOps[dss.stencilZFailOpFront], WebGLStencilOps[dss.stencilPassOpFront]);
          cache.dss.stencilFailOpFront = dss.stencilFailOpFront;
          cache.dss.stencilZFailOpFront = dss.stencilZFailOpFront;
          cache.dss.stencilPassOpFront = dss.stencilPassOpFront;
        }

        if (cache.dss.stencilWriteMaskFront !== dss.stencilWriteMaskFront) {
          gl.stencilMaskSeparate(gl.FRONT, dss.stencilWriteMaskFront);
          cache.dss.stencilWriteMaskFront = dss.stencilWriteMaskFront;
        } // back


        if (cache.dss.stencilFuncBack !== dss.stencilFuncBack || cache.dss.stencilRefBack !== dss.stencilRefBack || cache.dss.stencilReadMaskBack !== dss.stencilReadMaskBack) {
          gl.stencilFuncSeparate(gl.BACK, WebGLCmpFuncs[dss.stencilFuncBack], dss.stencilRefBack, dss.stencilReadMaskBack);
          cache.dss.stencilFuncBack = dss.stencilFuncBack;
          cache.dss.stencilRefBack = dss.stencilRefBack;
          cache.dss.stencilReadMaskBack = dss.stencilReadMaskBack;
        }

        if (cache.dss.stencilFailOpBack !== dss.stencilFailOpBack || cache.dss.stencilZFailOpBack !== dss.stencilZFailOpBack || cache.dss.stencilPassOpBack !== dss.stencilPassOpBack) {
          gl.stencilOpSeparate(gl.BACK, WebGLStencilOps[dss.stencilFailOpBack], WebGLStencilOps[dss.stencilZFailOpBack], WebGLStencilOps[dss.stencilPassOpBack]);
          cache.dss.stencilFailOpBack = dss.stencilFailOpBack;
          cache.dss.stencilZFailOpBack = dss.stencilZFailOpBack;
          cache.dss.stencilPassOpBack = dss.stencilPassOpBack;
        }

        if (cache.dss.stencilWriteMaskBack !== dss.stencilWriteMaskBack) {
          gl.stencilMaskSeparate(gl.BACK, dss.stencilWriteMaskBack);
          cache.dss.stencilWriteMaskBack = dss.stencilWriteMaskBack;
        }
      } // depth-stencil state
      // blend state


      var bs = gpuPipelineState.bs;

      if (bs) {
        if (cache.bs.isA2C !== bs.isA2C) {
          if (bs.isA2C) {
            gl.enable(gl.SAMPLE_ALPHA_TO_COVERAGE);
          } else {
            gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
          }

          cache.bs.isA2C = bs.isA2C;
        }

        if (cache.bs.blendColor[0] !== bs.blendColor[0] || cache.bs.blendColor[1] !== bs.blendColor[1] || cache.bs.blendColor[2] !== bs.blendColor[2] || cache.bs.blendColor[3] !== bs.blendColor[3]) {
          gl.blendColor(bs.blendColor[0], bs.blendColor[1], bs.blendColor[2], bs.blendColor[3]);
          cache.bs.blendColor[0] = bs.blendColor[0];
          cache.bs.blendColor[1] = bs.blendColor[1];
          cache.bs.blendColor[2] = bs.blendColor[2];
          cache.bs.blendColor[3] = bs.blendColor[3];
        }

        var target0 = bs.targets[0];
        var target0Cache = cache.bs.targets[0];

        if (target0Cache.blend !== target0.blend) {
          if (target0.blend) {
            gl.enable(gl.BLEND);
          } else {
            gl.disable(gl.BLEND);
          }

          target0Cache.blend = target0.blend;
        }

        if (target0Cache.blendEq !== target0.blendEq || target0Cache.blendAlphaEq !== target0.blendAlphaEq) {
          gl.blendEquationSeparate(WebGLBlendOps[target0.blendEq], WebGLBlendOps[target0.blendAlphaEq]);
          target0Cache.blendEq = target0.blendEq;
          target0Cache.blendAlphaEq = target0.blendAlphaEq;
        }

        if (target0Cache.blendSrc !== target0.blendSrc || target0Cache.blendDst !== target0.blendDst || target0Cache.blendSrcAlpha !== target0.blendSrcAlpha || target0Cache.blendDstAlpha !== target0.blendDstAlpha) {
          gl.blendFuncSeparate(WebGLBlendFactors[target0.blendSrc], WebGLBlendFactors[target0.blendDst], WebGLBlendFactors[target0.blendSrcAlpha], WebGLBlendFactors[target0.blendDstAlpha]);
          target0Cache.blendSrc = target0.blendSrc;
          target0Cache.blendDst = target0.blendDst;
          target0Cache.blendSrcAlpha = target0.blendSrcAlpha;
          target0Cache.blendDstAlpha = target0.blendDstAlpha;
        }

        if (target0Cache.blendColorMask !== target0.blendColorMask) {
          gl.colorMask((target0.blendColorMask & _define.GFXColorMask.R) !== _define.GFXColorMask.NONE, (target0.blendColorMask & _define.GFXColorMask.G) !== _define.GFXColorMask.NONE, (target0.blendColorMask & _define.GFXColorMask.B) !== _define.GFXColorMask.NONE, (target0.blendColorMask & _define.GFXColorMask.A) !== _define.GFXColorMask.NONE);
          target0Cache.blendColorMask = target0.blendColorMask;
        }
      } // blend state

    } // bind pso


    if (gpuBindingLayout && gpuShader) {
      var gpuBindings = gpuBindingLayout.gpuBindings;

      for (var j = 0; j < gpuBindings.length; j++) {
        var gpuBinding = gpuBindings[j];

        switch (gpuBinding.type) {
          case _define.GFXBindingType.UNIFORM_BUFFER:
            {
              if (gpuBinding.gpuBuffer) {
                for (var k = 0; k < gpuShader.glBlocks.length; k++) {
                  var glBlock = gpuShader.glBlocks[k];

                  if (glBlock.binding === gpuBinding.binding) {
                    if (cache.glBindUBOs[glBlock.binding] !== gpuBinding.gpuBuffer.glBuffer) {
                      gl.bindBufferBase(gl.UNIFORM_BUFFER, glBlock.binding, gpuBinding.gpuBuffer.glBuffer); // gl.bindBufferRange(gl.UNIFORM_BUFFER, glBlock.binding, gpuBinding.gpuBuffer.glBuffer, 0, gpuBinding.gpuBuffer.size);

                      cache.glBindUBOs[glBlock.binding] = gpuBinding.gpuBuffer.glBuffer;
                      cache.glUniformBuffer = gpuBinding.gpuBuffer.glBuffer;
                    }

                    break;
                  }
                }
              } // if


              break;
            }

          case _define.GFXBindingType.SAMPLER:
            {
              if (!gpuBinding.gpuSampler) {
                (0, _index.error)("Sampler binding point ".concat(gpuBinding.binding, " '").concat(gpuBinding.name, "' is not bounded"));
              } else {
                var glSampler = null;

                for (var _k6 = 0; _k6 < gpuShader.glSamplers.length; _k6++) {
                  var sampler = gpuShader.glSamplers[_k6];

                  if (sampler.binding === gpuBinding.binding) {
                    glSampler = sampler;
                    break;
                  }
                }

                if (glSampler) {
                  for (var _k7 = 0; _k7 < glSampler.units.length; _k7++) {
                    var texUnit = glSampler.units[_k7];
                    var glTexUnit = cache.glTexUnits[texUnit];

                    if (gpuBinding.gpuTexView && gpuBinding.gpuTexView.gpuTexture.size > 0) {
                      var gpuTexture = gpuBinding.gpuTexView.gpuTexture;

                      if (glTexUnit.glTexture !== gpuTexture.glTexture) {
                        if (cache.texUnit !== texUnit) {
                          gl.activeTexture(gl.TEXTURE0 + texUnit);
                          cache.texUnit = texUnit;
                        }

                        if (gpuTexture.glTexture) {
                          gl.bindTexture(gpuTexture.glTarget, gpuTexture.glTexture);
                        } else {
                          gl.bindTexture(gpuTexture.glTarget, device.nullTex2D.gpuTexture.glTexture);
                        }

                        glTexUnit.glTexture = gpuTexture.glTexture;
                      }

                      var gpuSampler = gpuBinding.gpuSampler;

                      if (cache.glSamplerUnits[texUnit] !== gpuSampler.glSampler) {
                        gl.bindSampler(texUnit, gpuSampler.glSampler);
                        cache.glSamplerUnits[texUnit] = gpuSampler.glSampler;
                      }
                    }
                  }
                } // if

              }

              break;
            }
        }
      }
    } // bind binding layout


    if (gpuInputAssembler && gpuShader && (isShaderChanged || gfxStateCache.gpuInputAssembler !== gpuInputAssembler)) {
      gfxStateCache.gpuInputAssembler = gpuInputAssembler;

      if (device.useVAO) {
        // check vao
        var glVAO = gpuInputAssembler.glVAOs.get(gpuShader.glProgram);

        if (!glVAO) {
          glVAO = gl.createVertexArray();
          gpuInputAssembler.glVAOs.set(gpuShader.glProgram, glVAO);
          gl.bindVertexArray(glVAO);
          gl.bindBuffer(gl.ARRAY_BUFFER, null);
          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
          var glAttrib;

          for (var _j = 0; _j < gpuShader.glInputs.length; _j++) {
            var glInput = gpuShader.glInputs[_j];
            glAttrib = null;

            for (var _k8 = 0; _k8 < gpuInputAssembler.glAttribs.length; _k8++) {
              var attrib = gpuInputAssembler.glAttribs[_k8];

              if (attrib.name === glInput.name) {
                glAttrib = attrib;
                break;
              }
            }

            if (glAttrib) {
              gl.bindBuffer(gl.ARRAY_BUFFER, glAttrib.glBuffer);

              for (var c = 0; c < glAttrib.componentCount; ++c) {
                var glLoc = glInput.glLoc + c;
                var attribOffset = glAttrib.offset + glAttrib.size * c;
                gl.enableVertexAttribArray(glLoc);
                cache.glCurrentAttribLocs[glLoc] = true;
                gl.vertexAttribPointer(glLoc, glAttrib.count, glAttrib.glType, glAttrib.isNormalized, glAttrib.stride, attribOffset);
                gl.vertexAttribDivisor(glLoc, glAttrib.isInstanced ? 1 : 0);
              }
            }
          }

          var gpuBuffer = gpuInputAssembler.gpuIndexBuffer;

          if (gpuBuffer) {
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);
          }

          gl.bindVertexArray(null);
          gl.bindBuffer(gl.ARRAY_BUFFER, null);
          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
          cache.glArrayBuffer = null;
          cache.glElementArrayBuffer = null;
        }

        if (cache.glVAO !== glVAO) {
          gl.bindVertexArray(glVAO);
          cache.glVAO = glVAO;
        }
      } else {
        for (var a = 0; a < device.maxVertexAttributes; ++a) {
          cache.glCurrentAttribLocs[a] = false;
        }

        for (var _j2 = 0; _j2 < gpuShader.glInputs.length; _j2++) {
          var _glInput = gpuShader.glInputs[_j2];
          var _glAttrib = null;

          for (var _k9 = 0; _k9 < gpuInputAssembler.glAttribs.length; _k9++) {
            var _attrib = gpuInputAssembler.glAttribs[_k9];

            if (_attrib.name === _glInput.name) {
              _glAttrib = _attrib;
              break;
            }
          }

          if (_glAttrib) {
            if (cache.glArrayBuffer !== _glAttrib.glBuffer) {
              gl.bindBuffer(gl.ARRAY_BUFFER, _glAttrib.glBuffer);
              cache.glArrayBuffer = _glAttrib.glBuffer;
            }

            for (var _c = 0; _c < _glAttrib.componentCount; ++_c) {
              var _glLoc2 = _glInput.glLoc + _c;

              var _attribOffset = _glAttrib.offset + _glAttrib.size * _c;

              if (!cache.glEnabledAttribLocs[_glLoc2] && _glLoc2 >= 0) {
                gl.enableVertexAttribArray(_glLoc2);
                cache.glEnabledAttribLocs[_glLoc2] = true;
              }

              cache.glCurrentAttribLocs[_glLoc2] = true;
              gl.vertexAttribPointer(_glLoc2, _glAttrib.count, _glAttrib.glType, _glAttrib.isNormalized, _glAttrib.stride, _attribOffset);
              gl.vertexAttribDivisor(_glLoc2, _glAttrib.isInstanced ? 1 : 0);
            }
          }
        } // for


        var _gpuBuffer = gpuInputAssembler.gpuIndexBuffer;

        if (_gpuBuffer) {
          if (cache.glElementArrayBuffer !== _gpuBuffer.glBuffer) {
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, _gpuBuffer.glBuffer);
            cache.glElementArrayBuffer = _gpuBuffer.glBuffer;
          }
        }

        for (var _a = 0; _a < device.maxVertexAttributes; ++_a) {
          if (cache.glEnabledAttribLocs[_a] !== cache.glCurrentAttribLocs[_a]) {
            gl.disableVertexAttribArray(_a);
            cache.glEnabledAttribLocs[_a] = false;
          }
        }
      } // if (device.useVAO)

    }

    if (gpuPipelineState) {
      for (var _k10 = 0; _k10 < gpuPipelineState.dynamicStates.length; _k10++) {
        var dynamicState = gpuPipelineState.dynamicStates[_k10];

        switch (dynamicState) {
          case _define.GFXDynamicState.VIEWPORT:
            {
              if (viewport) {
                if (cache.viewport.left !== viewport.left || cache.viewport.top !== viewport.top || cache.viewport.width !== viewport.width || cache.viewport.height !== viewport.height) {
                  gl.viewport(viewport.left, viewport.top, viewport.width, viewport.height);
                  cache.viewport.left = viewport.left;
                  cache.viewport.top = viewport.top;
                  cache.viewport.width = viewport.width;
                  cache.viewport.height = viewport.height;
                }
              }

              break;
            }

          case _define.GFXDynamicState.SCISSOR:
            {
              if (scissor) {
                if (cache.scissorRect.x !== scissor.x || cache.scissorRect.y !== scissor.y || cache.scissorRect.width !== scissor.width || cache.scissorRect.height !== scissor.height) {
                  gl.scissor(scissor.x, scissor.y, scissor.width, scissor.height);
                  cache.scissorRect.x = scissor.x;
                  cache.scissorRect.y = scissor.y;
                  cache.scissorRect.width = scissor.width;
                  cache.scissorRect.height = scissor.height;
                }
              }

              break;
            }

          case _define.GFXDynamicState.LINE_WIDTH:
            {
              if (lineWidth) {
                if (cache.rs.lineWidth !== lineWidth) {
                  gl.lineWidth(lineWidth);
                  cache.rs.lineWidth = lineWidth;
                }
              }

              break;
            }

          case _define.GFXDynamicState.DEPTH_BIAS:
            {
              if (depthBias) {
                if (cache.rs.depthBias !== depthBias.constantFactor || cache.rs.depthBiasSlop !== depthBias.slopeFactor) {
                  gl.polygonOffset(depthBias.constantFactor, depthBias.slopeFactor);
                  cache.rs.depthBias = depthBias.constantFactor;
                  cache.rs.depthBiasSlop = depthBias.slopeFactor;
                }
              }

              break;
            }

          case _define.GFXDynamicState.BLEND_CONSTANTS:
            {
              if (blendConstants) {
                if (cache.bs.blendColor[0] !== blendConstants[0] || cache.bs.blendColor[1] !== blendConstants[1] || cache.bs.blendColor[2] !== blendConstants[2] || cache.bs.blendColor[3] !== blendConstants[3]) {
                  gl.blendColor(blendConstants[0], blendConstants[1], blendConstants[2], blendConstants[3]);
                  cache.bs.blendColor[0] = blendConstants[0];
                  cache.bs.blendColor[1] = blendConstants[1];
                  cache.bs.blendColor[2] = blendConstants[2];
                  cache.bs.blendColor[3] = blendConstants[3];
                }
              }

              break;
            }

          case _define.GFXDynamicState.STENCIL_WRITE_MASK:
            {
              if (stencilWriteMask) {
                switch (stencilWriteMask.face) {
                  case _define.GFXStencilFace.FRONT:
                    {
                      if (cache.dss.stencilWriteMaskFront !== stencilWriteMask.writeMask) {
                        gl.stencilMaskSeparate(gl.FRONT, stencilWriteMask.writeMask);
                        cache.dss.stencilWriteMaskFront = stencilWriteMask.writeMask;
                      }

                      break;
                    }

                  case _define.GFXStencilFace.BACK:
                    {
                      if (cache.dss.stencilWriteMaskBack !== stencilWriteMask.writeMask) {
                        gl.stencilMaskSeparate(gl.BACK, stencilWriteMask.writeMask);
                        cache.dss.stencilWriteMaskBack = stencilWriteMask.writeMask;
                      }

                      break;
                    }

                  case _define.GFXStencilFace.ALL:
                    {
                      if (cache.dss.stencilWriteMaskFront !== stencilWriteMask.writeMask || cache.dss.stencilWriteMaskBack !== stencilWriteMask.writeMask) {
                        gl.stencilMask(stencilWriteMask.writeMask);
                        cache.dss.stencilWriteMaskFront = stencilWriteMask.writeMask;
                        cache.dss.stencilWriteMaskBack = stencilWriteMask.writeMask;
                      }

                      break;
                    }
                }
              }

              break;
            }

          case _define.GFXDynamicState.STENCIL_COMPARE_MASK:
            {
              if (stencilCompareMask) {
                switch (stencilCompareMask.face) {
                  case _define.GFXStencilFace.FRONT:
                    {
                      if (cache.dss.stencilRefFront !== stencilCompareMask.reference || cache.dss.stencilReadMaskFront !== stencilCompareMask.compareMask) {
                        gl.stencilFuncSeparate(gl.FRONT, WebGLCmpFuncs[cache.dss.stencilFuncFront], stencilCompareMask.reference, stencilCompareMask.compareMask);
                        cache.dss.stencilRefFront = stencilCompareMask.reference;
                        cache.dss.stencilReadMaskFront = stencilCompareMask.compareMask;
                      }

                      break;
                    }

                  case _define.GFXStencilFace.BACK:
                    {
                      if (cache.dss.stencilRefBack !== stencilCompareMask.reference || cache.dss.stencilReadMaskBack !== stencilCompareMask.compareMask) {
                        gl.stencilFuncSeparate(gl.BACK, WebGLCmpFuncs[cache.dss.stencilFuncBack], stencilCompareMask.reference, stencilCompareMask.compareMask);
                        cache.dss.stencilRefBack = stencilCompareMask.reference;
                        cache.dss.stencilReadMaskBack = stencilCompareMask.compareMask;
                      }

                      break;
                    }

                  case _define.GFXStencilFace.ALL:
                    {
                      if (cache.dss.stencilRefFront !== stencilCompareMask.reference || cache.dss.stencilReadMaskFront !== stencilCompareMask.compareMask || cache.dss.stencilRefBack !== stencilCompareMask.reference || cache.dss.stencilReadMaskBack !== stencilCompareMask.compareMask) {
                        gl.stencilFunc(WebGLCmpFuncs[cache.dss.stencilFuncBack], stencilCompareMask.reference, stencilCompareMask.compareMask);
                        cache.dss.stencilRefFront = stencilCompareMask.reference;
                        cache.dss.stencilReadMaskFront = stencilCompareMask.compareMask;
                        cache.dss.stencilRefBack = stencilCompareMask.reference;
                        cache.dss.stencilReadMaskBack = stencilCompareMask.compareMask;
                      }

                      break;
                    }
                }
              }

              break;
            }
        } // switch

      } // for

    } // if

  }

  function WebGL2CmdFuncDraw(device, drawInfo) {
    var gl = device.gl;
    var gpuInputAssembler = gfxStateCache.gpuInputAssembler,
        gpuShader = gfxStateCache.gpuShader,
        glPrimitive = gfxStateCache.glPrimitive;

    if (gpuInputAssembler && gpuShader) {
      if (gpuInputAssembler.gpuIndirectBuffer) {
        var indirects = gpuInputAssembler.gpuIndirectBuffer.indirects;

        for (var k = 0; k < indirects.length; k++) {
          var subDrawInfo = indirects[k];
          var gpuBuffer = gpuInputAssembler.gpuIndexBuffer;

          if (subDrawInfo.instanceCount) {
            if (gpuBuffer && subDrawInfo.indexCount > -1) {
              var offset = subDrawInfo.firstIndex * gpuBuffer.stride;
              gl.drawElementsInstanced(glPrimitive, subDrawInfo.indexCount, gpuInputAssembler.glIndexType, offset, subDrawInfo.instanceCount);
            } else {
              gl.drawArraysInstanced(glPrimitive, subDrawInfo.firstVertex, subDrawInfo.vertexCount, subDrawInfo.instanceCount);
            }
          } else {
            if (gpuBuffer && subDrawInfo.indexCount > -1) {
              var _offset = subDrawInfo.firstIndex * gpuBuffer.stride;

              gl.drawElements(glPrimitive, subDrawInfo.indexCount, gpuInputAssembler.glIndexType, _offset);
            } else {
              gl.drawArrays(glPrimitive, subDrawInfo.firstVertex, subDrawInfo.vertexCount);
            }
          }
        }
      } else {
        if (drawInfo.instanceCount) {
          if (gpuInputAssembler.gpuIndexBuffer && drawInfo.indexCount > -1) {
            var _offset2 = drawInfo.firstIndex * gpuInputAssembler.gpuIndexBuffer.stride;

            gl.drawElementsInstanced(glPrimitive, drawInfo.indexCount, gpuInputAssembler.glIndexType, _offset2, drawInfo.instanceCount);
          } else {
            gl.drawArraysInstanced(glPrimitive, drawInfo.firstVertex, drawInfo.vertexCount, drawInfo.instanceCount);
          }
        } else {
          if (gpuInputAssembler.gpuIndexBuffer && drawInfo.indexCount > -1) {
            var _offset3 = drawInfo.firstIndex * gpuInputAssembler.gpuIndexBuffer.stride;

            gl.drawElements(glPrimitive, drawInfo.indexCount, gpuInputAssembler.glIndexType, _offset3);
          } else {
            gl.drawArrays(glPrimitive, drawInfo.firstVertex, drawInfo.vertexCount);
          }
        }
      }
    }
  }

  var cmdIds = new Array(WebGL2Cmd.COUNT);

  function WebGL2CmdFuncExecuteCmds(device, cmdPackage) {
    cmdIds.fill(0);

    for (var i = 0; i < cmdPackage.cmds.length; ++i) {
      var cmd = cmdPackage.cmds.array[i];
      var cmdId = cmdIds[cmd]++;

      switch (cmd) {
        case WebGL2Cmd.BEGIN_RENDER_PASS:
          {
            var cmd0 = cmdPackage.beginRenderPassCmds.array[cmdId];
            WebGL2CmdFuncBeginRenderPass(device, cmd0.gpuFramebuffer, cmd0.renderArea, cmd0.clearFlag, cmd0.clearColors, cmd0.clearDepth, cmd0.clearStencil);
            break;
          }

        /*
        case WebGL2Cmd.END_RENDER_PASS: {
            // WebGL 2.0 doesn't support store operation of attachments.
            // GFXStoreOp.Store is the default GL behavior.
            break;
        }
        */

        case WebGL2Cmd.BIND_STATES:
          {
            var cmd2 = cmdPackage.bindStatesCmds.array[cmdId];
            WebGL2CmdFuncBindStates(device, cmd2.gpuPipelineState, cmd2.gpuBindingLayout, cmd2.gpuInputAssembler, cmd2.viewport, cmd2.scissor, cmd2.lineWidth, cmd2.depthBias, cmd2.blendConstants, cmd2.depthBounds, cmd2.stencilWriteMask, cmd2.stencilCompareMask);
            break;
          }

        case WebGL2Cmd.DRAW:
          {
            var cmd3 = cmdPackage.drawCmds.array[cmdId];
            WebGL2CmdFuncDraw(device, cmd3.drawInfo);
            break;
          }

        case WebGL2Cmd.UPDATE_BUFFER:
          {
            var cmd4 = cmdPackage.updateBufferCmds.array[cmdId];
            WebGL2CmdFuncUpdateBuffer(device, cmd4.gpuBuffer, cmd4.buffer, cmd4.offset, cmd4.size);
            break;
          }

        case WebGL2Cmd.COPY_BUFFER_TO_TEXTURE:
          {
            var cmd5 = cmdPackage.copyBufferToTextureCmds.array[cmdId];
            WebGL2CmdFuncCopyBuffersToTexture(device, [cmd5.gpuBuffer.buffer], cmd5.gpuTexture, cmd5.regions);
            break;
          }
      } // switch

    } // for

  }

  function WebGL2CmdFuncCopyTexImagesToTexture(device, texImages, gpuTexture, regions) {
    var gl = device.gl;
    var glTexUnit = device.stateCache.glTexUnits[device.stateCache.texUnit];

    if (glTexUnit.glTexture !== gpuTexture.glTexture) {
      gl.bindTexture(gpuTexture.glTarget, gpuTexture.glTexture);
      glTexUnit.glTexture = gpuTexture.glTexture;
    }

    var m = 0;
    var n = 0;
    var f = 0;

    switch (gpuTexture.glTarget) {
      case gl.TEXTURE_2D:
        {
          for (var k = 0; k < regions.length; k++) {
            var region = regions[k];

            for (m = region.texSubres.baseMipLevel; m < region.texSubres.levelCount; ++m) {
              gl.texSubImage2D(gl.TEXTURE_2D, m, region.texOffset.x, region.texOffset.y, gpuTexture.glFormat, gpuTexture.glType, texImages[n++]);
            }
          }

          break;
        }

      case gl.TEXTURE_CUBE_MAP:
        {
          for (var _k11 = 0; _k11 < regions.length; _k11++) {
            var _region = regions[_k11];
            var fcount = _region.texSubres.baseArrayLayer + _region.texSubres.layerCount;

            for (f = _region.texSubres.baseArrayLayer; f < fcount; ++f) {
              var mcount = _region.texSubres.baseMipLevel + _region.texSubres.levelCount;

              for (m = _region.texSubres.baseMipLevel; m < mcount; ++m) {
                gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, m, _region.texOffset.x, _region.texOffset.y, gpuTexture.glFormat, gpuTexture.glType, texImages[n++]);
              }
            }
          }

          break;
        }

      default:
        {
          console.error('Unsupported GL texture type, copy buffer to texture failed.');
        }
    }

    if (gpuTexture.flags & _define.GFXTextureFlagBit.GEN_MIPMAP) {
      gl.generateMipmap(gpuTexture.glTarget);
    }
  }

  function WebGL2CmdFuncCopyBuffersToTexture(device, buffers, gpuTexture, regions) {
    var gl = device.gl;
    var glTexUnit = device.stateCache.glTexUnits[device.stateCache.texUnit];

    if (glTexUnit.glTexture !== gpuTexture.glTexture) {
      gl.bindTexture(gpuTexture.glTarget, gpuTexture.glTexture);
      glTexUnit.glTexture = gpuTexture.glTexture;
    }

    var m = 0;
    var n = 0;
    var w = 1;
    var h = 1;
    var f = 0;
    var fmtInfo = _define.GFXFormatInfos[gpuTexture.format];
    var isCompressed = fmtInfo.isCompressed;

    switch (gpuTexture.glTarget) {
      case gl.TEXTURE_2D:
        {
          for (var k = 0; k < regions.length; k++) {
            var region = regions[k];
            w = region.texExtent.width;
            h = region.texExtent.height;

            for (m = region.texSubres.baseMipLevel; m < region.texSubres.levelCount; ++m) {
              var pixels = buffers[n++];

              if (!isCompressed) {
                gl.texSubImage2D(gl.TEXTURE_2D, m, region.texOffset.x, region.texOffset.y, w, h, gpuTexture.glFormat, gpuTexture.glType, pixels);
              } else {
                if (gpuTexture.glInternelFmt !== _webglDefine.WebGLEXT.COMPRESSED_RGB_ETC1_WEBGL) {
                  gl.compressedTexSubImage2D(gl.TEXTURE_2D, m, region.texOffset.x, region.texOffset.y, w, h, gpuTexture.glFormat, pixels);
                } else {
                  gl.compressedTexImage2D(gl.TEXTURE_2D, m, gpuTexture.glInternelFmt, w, h, 0, pixels);
                }
              }

              w = Math.max(1, w >> 1);
              h = Math.max(1, w >> 1);
            }
          }

          break;
        }

      case gl.TEXTURE_CUBE_MAP:
        {
          for (var _k12 = 0; _k12 < regions.length; _k12++) {
            var _region2 = regions[_k12];
            var fcount = _region2.texSubres.baseArrayLayer + _region2.texSubres.layerCount;

            for (f = _region2.texSubres.baseArrayLayer; f < fcount; ++f) {
              w = _region2.texExtent.width;
              h = _region2.texExtent.height;
              var mcount = _region2.texSubres.baseMipLevel + _region2.texSubres.levelCount;

              for (m = _region2.texSubres.baseMipLevel; m < mcount; ++m) {
                var _pixels = buffers[n++];

                if (!isCompressed) {
                  gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, m, _region2.texOffset.x, _region2.texOffset.y, w, h, gpuTexture.glFormat, gpuTexture.glType, _pixels);
                } else {
                  if (gpuTexture.glInternelFmt !== _webglDefine.WebGLEXT.COMPRESSED_RGB_ETC1_WEBGL) {
                    gl.compressedTexSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, m, _region2.texOffset.x, _region2.texOffset.y, w, h, gpuTexture.glFormat, _pixels);
                  } else {
                    gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, m, gpuTexture.glInternelFmt, w, h, 0, _pixels);
                  }
                }

                w = Math.max(1, w >> 1);
                h = Math.max(1, w >> 1);
              }
            }
          }

          break;
        }

      default:
        {
          console.error('Unsupported GL texture type, copy buffer to texture failed.');
        }
    }

    if (gpuTexture.flags & _define.GFXTextureFlagBit.GEN_MIPMAP) {
      gl.generateMipmap(gpuTexture.glTarget);
    }
  }

  function WebGL2CmdFuncBlitFramebuffer(device, src, dst, srcRect, dstRect, filter) {
    var gl = device.gl;

    if (device.stateCache.glReadFramebuffer !== src.glFramebuffer) {
      gl.bindFramebuffer(gl.READ_FRAMEBUFFER, src.glFramebuffer);
      device.stateCache.glReadFramebuffer = src.glFramebuffer;
    }

    var rebindFBO = dst.glFramebuffer !== device.stateCache.glFramebuffer;

    if (rebindFBO) {
      gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, dst.glFramebuffer);
    }

    var mask = 0;

    if (src.gpuColorViews.length > 0) {
      mask |= gl.COLOR_BUFFER_BIT;
    }

    if (src.gpuDepthStencilView) {
      mask |= gl.DEPTH_BUFFER_BIT;

      if (_define.GFXFormatInfos[src.gpuDepthStencilView.format].hasStencil) {
        mask |= gl.STENCIL_BUFFER_BIT;
      }
    }

    var glFilter = filter === _define.GFXFilter.LINEAR || filter === _define.GFXFilter.ANISOTROPIC ? gl.LINEAR : gl.NEAREST;
    gl.blitFramebuffer(srcRect.x, srcRect.y, srcRect.x + srcRect.width, srcRect.y + srcRect.height, dstRect.x, dstRect.y, dstRect.x + dstRect.width, dstRect.y + dstRect.height, mask, glFilter);

    if (rebindFBO) {
      gl.bindFramebuffer(gl.FRAMEBUFFER, device.stateCache.glFramebuffer);
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkY6L2plbmtpbnMvd29ya3NwYWNlL0NyZWF0b3JfM0QvZWRpdG9yLTNkL3Jlc291cmNlcy8zZC9lbmdpbmUvY29jb3MvY29yZS9nZngvd2ViZ2wyL3dlYmdsMi1jb21tYW5kcy50cyJdLCJuYW1lcyI6WyJXZWJHTFdyYXBzIiwiU0FNUExFUyIsIl9mMzJ2NCIsIkZsb2F0MzJBcnJheSIsIkNtcEYzMk5vdEV1cWFsIiwiYSIsImIiLCJjIiwiR0ZYRm9ybWF0VG9XZWJHTFR5cGUiLCJmb3JtYXQiLCJnbCIsIkdGWEZvcm1hdCIsIlI4IiwiVU5TSUdORURfQllURSIsIlI4U04iLCJCWVRFIiwiUjhVSSIsIlI4SSIsIlIxNkYiLCJIQUxGX0ZMT0FUIiwiUjE2VUkiLCJVTlNJR05FRF9TSE9SVCIsIlIxNkkiLCJTSE9SVCIsIlIzMkYiLCJGTE9BVCIsIlIzMlVJIiwiVU5TSUdORURfSU5UIiwiUjMySSIsIklOVCIsIlJHOCIsIlJHOFNOIiwiUkc4VUkiLCJSRzhJIiwiUkcxNkYiLCJSRzE2VUkiLCJSRzE2SSIsIlJHMzJGIiwiUkczMlVJIiwiUkczMkkiLCJSR0I4IiwiU1JHQjgiLCJSR0I4U04iLCJSR0I4VUkiLCJSR0I4SSIsIlJHQjE2RiIsIlJHQjE2VUkiLCJSR0IxNkkiLCJSR0IzMkYiLCJSR0IzMlVJIiwiUkdCMzJJIiwiUkdCQTgiLCJTUkdCOF9BOCIsIlJHQkE4U04iLCJSR0JBOFVJIiwiUkdCQThJIiwiUkdCQTE2RiIsIlJHQkExNlVJIiwiUkdCQTE2SSIsIlJHQkEzMkYiLCJSR0JBMzJVSSIsIlJHQkEzMkkiLCJSNUc2QjUiLCJVTlNJR05FRF9TSE9SVF81XzZfNSIsIlIxMUcxMUIxMEYiLCJVTlNJR05FRF9JTlRfMTBGXzExRl8xMUZfUkVWIiwiUkdCNUExIiwiVU5TSUdORURfU0hPUlRfNV81XzVfMSIsIlJHQkE0IiwiVU5TSUdORURfU0hPUlRfNF80XzRfNCIsIlJHQjEwQTIiLCJVTlNJR05FRF9JTlRfMl8xMF8xMF8xMF9SRVYiLCJSR0IxMEEyVUkiLCJSR0I5RTUiLCJEMTYiLCJEMTZTOCIsIlVOU0lHTkVEX0lOVF8yNF84IiwiRDI0IiwiRDI0UzgiLCJEMzJGIiwiRDMyRl9TOCIsIkZMT0FUXzMyX1VOU0lHTkVEX0lOVF8yNF84X1JFViIsIkJDMSIsIkJDMV9TUkdCIiwiQkMyIiwiQkMyX1NSR0IiLCJCQzMiLCJCQzNfU1JHQiIsIkJDNCIsIkJDNF9TTk9STSIsIkJDNSIsIkJDNV9TTk9STSIsIkJDNkhfU0YxNiIsIkJDNkhfVUYxNiIsIkJDNyIsIkJDN19TUkdCIiwiRVRDX1JHQjgiLCJFVEMyX1JHQjgiLCJFVEMyX1NSR0I4IiwiRVRDMl9SR0I4X0ExIiwiRVRDMl9TUkdCOF9BMSIsIkVBQ19SMTEiLCJFQUNfUjExU04iLCJFQUNfUkcxMSIsIkVBQ19SRzExU04iLCJQVlJUQ19SR0IyIiwiUFZSVENfUkdCQTIiLCJQVlJUQ19SR0I0IiwiUFZSVENfUkdCQTQiLCJQVlJUQzJfMkJQUCIsIlBWUlRDMl80QlBQIiwiR0ZYRm9ybWF0VG9XZWJHTEludGVybmFsRm9ybWF0IiwiQTgiLCJBTFBIQSIsIkw4IiwiTFVNSU5BTkNFIiwiTEE4IiwiTFVNSU5BTkNFX0FMUEhBIiwiUjhfU05PUk0iLCJSRzhfU05PUk0iLCJSR0I4X1NOT1JNIiwiUkdCQThfU05PUk0iLCJSR0I1NjUiLCJSR0I1X0ExIiwiUkdCMTBfQTIiLCJSR0IxMF9BMlVJIiwiUjExRl9HMTFGX0IxMEYiLCJERVBUSF9DT01QT05FTlQxNiIsIkRFUFRIMjRfU1RFTkNJTDgiLCJERVBUSF9DT01QT05FTlQyNCIsIkRFUFRIX0NPTVBPTkVOVDMyRiIsIkRFUFRIMzJGX1NURU5DSUw4IiwiV2ViR0xFWFQiLCJDT01QUkVTU0VEX1JHQl9TM1RDX0RYVDFfRVhUIiwiQkMxX0FMUEhBIiwiQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUMV9FWFQiLCJDT01QUkVTU0VEX1NSR0JfUzNUQ19EWFQxX0VYVCIsIkJDMV9TUkdCX0FMUEhBIiwiQ09NUFJFU1NFRF9TUkdCX0FMUEhBX1MzVENfRFhUMV9FWFQiLCJDT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQzX0VYVCIsIkNPTVBSRVNTRURfU1JHQl9BTFBIQV9TM1RDX0RYVDNfRVhUIiwiQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUNV9FWFQiLCJDT01QUkVTU0VEX1NSR0JfQUxQSEFfUzNUQ19EWFQ1X0VYVCIsIkNPTVBSRVNTRURfUkdCX0VUQzFfV0VCR0wiLCJDT01QUkVTU0VEX1JHQjhfRVRDMiIsIkNPTVBSRVNTRURfU1JHQjhfRVRDMiIsIkNPTVBSRVNTRURfUkdCOF9QVU5DSFRIUk9VR0hfQUxQSEExX0VUQzIiLCJDT01QUkVTU0VEX1NSR0I4X1BVTkNIVEhST1VHSF9BTFBIQTFfRVRDMiIsIkVUQzJfUkdCQTgiLCJDT01QUkVTU0VEX1JHQkE4X0VUQzJfRUFDIiwiRVRDMl9TUkdCOF9BOCIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0VUQzJfRUFDIiwiQ09NUFJFU1NFRF9SMTFfRUFDIiwiQ09NUFJFU1NFRF9TSUdORURfUjExX0VBQyIsIkNPTVBSRVNTRURfUkcxMV9FQUMiLCJDT01QUkVTU0VEX1NJR05FRF9SRzExX0VBQyIsIkNPTVBSRVNTRURfUkdCX1BWUlRDXzJCUFBWMV9JTUciLCJDT01QUkVTU0VEX1JHQkFfUFZSVENfMkJQUFYxX0lNRyIsIkNPTVBSRVNTRURfUkdCX1BWUlRDXzRCUFBWMV9JTUciLCJDT01QUkVTU0VEX1JHQkFfUFZSVENfNEJQUFYxX0lNRyIsImNvbnNvbGUiLCJlcnJvciIsIlJHQkEiLCJHRlhGb3JtYXRUb1dlYkdMRm9ybWF0IiwiUkVEIiwiUkciLCJSR0IiLCJERVBUSF9DT01QT05FTlQiLCJERVBUSF9TVEVOQ0lMIiwiR0ZYVHlwZVRvV2ViR0xUeXBlIiwidHlwZSIsIkdGWFR5cGUiLCJCT09MIiwiQk9PTDIiLCJCT09MX1ZFQzIiLCJCT09MMyIsIkJPT0xfVkVDMyIsIkJPT0w0IiwiQk9PTF9WRUM0IiwiSU5UMiIsIklOVF9WRUMyIiwiSU5UMyIsIklOVF9WRUMzIiwiSU5UNCIsIklOVF9WRUM0IiwiVUlOVCIsIkZMT0FUMiIsIkZMT0FUX1ZFQzIiLCJGTE9BVDMiLCJGTE9BVF9WRUMzIiwiRkxPQVQ0IiwiRkxPQVRfVkVDNCIsIk1BVDIiLCJGTE9BVF9NQVQyIiwiTUFUMlgzIiwiRkxPQVRfTUFUMngzIiwiTUFUMlg0IiwiRkxPQVRfTUFUMng0IiwiTUFUM1gyIiwiRkxPQVRfTUFUM3gyIiwiTUFUMyIsIkZMT0FUX01BVDMiLCJNQVQzWDQiLCJGTE9BVF9NQVQzeDQiLCJNQVQ0WDIiLCJGTE9BVF9NQVQ0eDIiLCJNQVQ0WDMiLCJGTE9BVF9NQVQ0eDMiLCJNQVQ0IiwiRkxPQVRfTUFUNCIsIlNBTVBMRVIyRCIsIlNBTVBMRVJfMkQiLCJTQU1QTEVSMkRfQVJSQVkiLCJTQU1QTEVSXzJEX0FSUkFZIiwiU0FNUExFUjNEIiwiU0FNUExFUl8zRCIsIlNBTVBMRVJfQ1VCRSIsIlVOS05PV04iLCJXZWJHTFR5cGVUb0dGWFR5cGUiLCJnbFR5cGUiLCJVTlNJR05FRF9JTlRfVkVDMiIsIlVJTlQyIiwiVU5TSUdORURfSU5UX1ZFQzMiLCJVSU5UMyIsIlVOU0lHTkVEX0lOVF9WRUM0IiwiVUlOVDQiLCJXZWJHTEdldFR5cGVTaXplIiwiU0FNUExFUl8yRF9BUlJBWV9TSEFET1ciLCJJTlRfU0FNUExFUl8yRCIsIklOVF9TQU1QTEVSXzJEX0FSUkFZIiwiSU5UX1NBTVBMRVJfM0QiLCJJTlRfU0FNUExFUl9DVUJFIiwiVU5TSUdORURfSU5UX1NBTVBMRVJfMkQiLCJVTlNJR05FRF9JTlRfU0FNUExFUl8yRF9BUlJBWSIsIlVOU0lHTkVEX0lOVF9TQU1QTEVSXzNEIiwiVU5TSUdORURfSU5UX1NBTVBMRVJfQ1VCRSIsIldlYkdMR2V0Q29tcG9uZW50Q291bnQiLCJXZWJHTENtcEZ1bmNzIiwiV2ViR0xTdGVuY2lsT3BzIiwiV2ViR0xCbGVuZE9wcyIsIldlYkdMQmxlbmRGYWN0b3JzIiwiV2ViR0wyQ21kIiwiV2ViR0wyQ21kT2JqZWN0IiwiY21kVHlwZSIsInJlZkNvdW50IiwiV2ViR0wyQ21kQmVnaW5SZW5kZXJQYXNzIiwiQkVHSU5fUkVOREVSX1BBU1MiLCJncHVGcmFtZWJ1ZmZlciIsInJlbmRlckFyZWEiLCJ4IiwieSIsIndpZHRoIiwiaGVpZ2h0IiwiY2xlYXJGbGFnIiwiR0ZYQ2xlYXJGbGFnIiwiTk9ORSIsImNsZWFyQ29sb3JzIiwiY2xlYXJEZXB0aCIsImNsZWFyU3RlbmNpbCIsImxlbmd0aCIsIldlYkdMMkNtZEJpbmRTdGF0ZXMiLCJCSU5EX1NUQVRFUyIsImdwdVBpcGVsaW5lU3RhdGUiLCJncHVCaW5kaW5nTGF5b3V0IiwiZ3B1SW5wdXRBc3NlbWJsZXIiLCJ2aWV3cG9ydCIsInNjaXNzb3IiLCJsaW5lV2lkdGgiLCJkZXB0aEJpYXMiLCJibGVuZENvbnN0YW50cyIsImRlcHRoQm91bmRzIiwic3RlbmNpbFdyaXRlTWFzayIsInN0ZW5jaWxDb21wYXJlTWFzayIsIldlYkdMMkNtZERyYXciLCJEUkFXIiwiZHJhd0luZm8iLCJ2ZXJ0ZXhDb3VudCIsImZpcnN0VmVydGV4IiwiaW5kZXhDb3VudCIsImZpcnN0SW5kZXgiLCJ2ZXJ0ZXhPZmZzZXQiLCJpbnN0YW5jZUNvdW50IiwiZmlyc3RJbnN0YW5jZSIsIldlYkdMMkNtZFVwZGF0ZUJ1ZmZlciIsIlVQREFURV9CVUZGRVIiLCJncHVCdWZmZXIiLCJidWZmZXIiLCJvZmZzZXQiLCJzaXplIiwiV2ViR0wyR0ZYVGV4dHVyZVN1YnJlcyIsImJhc2VNaXBMZXZlbCIsImxldmVsQ291bnQiLCJiYXNlQXJyYXlMYXllciIsImxheWVyQ291bnQiLCJXZWJHTDJHRlhCdWZmZXJUZXh0dXJlQ29weSIsImJ1ZmZPZmZzZXQiLCJidWZmU3RyaWRlIiwiYnVmZlRleEhlaWdodCIsInRleE9mZnNldCIsInRleEV4dGVudCIsInRleFN1YnJlcyIsIldlYkdMMkNtZENvcHlCdWZmZXJUb1RleHR1cmUiLCJDT1BZX0JVRkZFUl9UT19URVhUVVJFIiwiZ3B1VGV4dHVyZSIsImRzdExheW91dCIsInJlZ2lvbnMiLCJXZWJHTDJDbWRQYWNrYWdlIiwiY21kcyIsIkNhY2hlZEFycmF5IiwiYmVnaW5SZW5kZXJQYXNzQ21kcyIsImJpbmRTdGF0ZXNDbWRzIiwiZHJhd0NtZHMiLCJ1cGRhdGVCdWZmZXJDbWRzIiwiY29weUJ1ZmZlclRvVGV4dHVyZUNtZHMiLCJhbGxvY2F0b3IiLCJiZWdpblJlbmRlclBhc3NDbWRQb29sIiwiZnJlZUNtZHMiLCJjbGVhciIsImJpbmRTdGF0ZXNDbWRQb29sIiwiZHJhd0NtZFBvb2wiLCJ1cGRhdGVCdWZmZXJDbWRQb29sIiwiY29weUJ1ZmZlclRvVGV4dHVyZUNtZFBvb2wiLCJXZWJHTDJDbWRGdW5jQ3JlYXRlQnVmZmVyIiwiZGV2aWNlIiwiY2FjaGUiLCJzdGF0ZUNhY2hlIiwiZ2xVc2FnZSIsIm1lbVVzYWdlIiwiR0ZYTWVtb3J5VXNhZ2VCaXQiLCJIT1NUIiwiRFlOQU1JQ19EUkFXIiwiU1RBVElDX0RSQVciLCJ1c2FnZSIsIkdGWEJ1ZmZlclVzYWdlQml0IiwiVkVSVEVYIiwiZ2xUYXJnZXQiLCJBUlJBWV9CVUZGRVIiLCJnbEJ1ZmZlciIsImNyZWF0ZUJ1ZmZlciIsInVzZVZBTyIsImdsVkFPIiwiYmluZFZlcnRleEFycmF5IiwiZ2xBcnJheUJ1ZmZlciIsImJpbmRCdWZmZXIiLCJidWZmZXJEYXRhIiwiSU5ERVgiLCJFTEVNRU5UX0FSUkFZX0JVRkZFUiIsImdsRWxlbWVudEFycmF5QnVmZmVyIiwiVU5JRk9STSIsIlVOSUZPUk1fQlVGRkVSIiwiZ2xVbmlmb3JtQnVmZmVyIiwiSU5ESVJFQ1QiLCJUUkFOU0ZFUl9EU1QiLCJUUkFOU0ZFUl9TUkMiLCJXZWJHTDJDbWRGdW5jRGVzdHJveUJ1ZmZlciIsImRlbGV0ZUJ1ZmZlciIsIldlYkdMMkNtZEZ1bmNSZXNpemVCdWZmZXIiLCJXZWJHTDJDbWRGdW5jVXBkYXRlQnVmZmVyIiwiaW5kaXJlY3RzIiwiZHJhd0luZm9zIiwiYnVmZiIsImJ5dGVMZW5ndGgiLCJidWZmZXJTdWJEYXRhIiwic2xpY2UiLCJXZWJHTDJDbWRGdW5jQ3JlYXRlVGV4dHVyZSIsImdsSW50ZXJuZWxGbXQiLCJnbEZvcm1hdCIsInciLCJoIiwidmlld1R5cGUiLCJHRlhUZXh0dXJlVmlld1R5cGUiLCJUVjJEIiwiVEVYVFVSRV8yRCIsIm1heFNpemUiLCJNYXRoIiwibWF4IiwibWF4VGV4dHVyZVNpemUiLCJzYW1wbGVzIiwiR0ZYU2FtcGxlQ291bnQiLCJYMSIsImdsVGV4dHVyZSIsImNyZWF0ZVRleHR1cmUiLCJnbFRleFVuaXQiLCJnbFRleFVuaXRzIiwidGV4VW5pdCIsImJpbmRUZXh0dXJlIiwiR0ZYRm9ybWF0SW5mb3MiLCJpc0NvbXByZXNzZWQiLCJpIiwibWlwTGV2ZWwiLCJ0ZXhJbWFnZTJEIiwiaW1nU2l6ZSIsInZpZXciLCJVaW50OEFycmF5IiwiY29tcHJlc3NlZFRleEltYWdlMkQiLCJkZWxldGVUZXh0dXJlIiwiZ2xSZW5kZXJidWZmZXIiLCJjcmVhdGVSZW5kZXJidWZmZXIiLCJiaW5kUmVuZGVyYnVmZmVyIiwiUkVOREVSQlVGRkVSIiwicmVuZGVyYnVmZmVyU3RvcmFnZU11bHRpc2FtcGxlIiwiQ1VCRSIsIlRFWFRVUkVfQ1VCRV9NQVAiLCJtYXhDdWJlTWFwVGV4dHVyZVNpemUiLCJmIiwiVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YIiwiV2ViR0wyQ21kRnVuY0Rlc3Ryb3lUZXh0dXJlIiwiZGVsZXRlUmVuZGVyYnVmZmVyIiwiV2ViR0wyQ21kRnVuY1Jlc2l6ZVRleHR1cmUiLCJXZWJHTDJDbWRGdW5jQ3JlYXRlU2FtcGxlciIsImdwdVNhbXBsZXIiLCJnbFNhbXBsZXIiLCJjcmVhdGVTYW1wbGVyIiwibWluRmlsdGVyIiwiR0ZYRmlsdGVyIiwiTElORUFSIiwiQU5JU09UUk9QSUMiLCJtaXBGaWx0ZXIiLCJnbE1pbkZpbHRlciIsIkxJTkVBUl9NSVBNQVBfTElORUFSIiwiUE9JTlQiLCJMSU5FQVJfTUlQTUFQX05FQVJFU1QiLCJORUFSRVNUX01JUE1BUF9MSU5FQVIiLCJORUFSRVNUX01JUE1BUF9ORUFSRVNUIiwiTkVBUkVTVCIsIm1hZ0ZpbHRlciIsImdsTWFnRmlsdGVyIiwiZ2xXcmFwUyIsImFkZHJlc3NVIiwiZ2xXcmFwVCIsImFkZHJlc3NWIiwiZ2xXcmFwUiIsImFkZHJlc3NXIiwic2FtcGxlclBhcmFtZXRlcmkiLCJURVhUVVJFX01JTl9GSUxURVIiLCJURVhUVVJFX01BR19GSUxURVIiLCJURVhUVVJFX1dSQVBfUyIsIlRFWFRVUkVfV1JBUF9UIiwiVEVYVFVSRV9XUkFQX1IiLCJzYW1wbGVyUGFyYW1ldGVyZiIsIlRFWFRVUkVfTUlOX0xPRCIsIm1pbkxPRCIsIlRFWFRVUkVfTUFYX0xPRCIsIm1heExPRCIsIldlYkdMMkNtZEZ1bmNEZXN0cm95U2FtcGxlciIsImRlbGV0ZVNhbXBsZXIiLCJXZWJHTDJDbWRGdW5jQ3JlYXRlRnJhbWVidWZmZXIiLCJpc09mZnNjcmVlbiIsImF0dGFjaG1lbnRzIiwiZ2xGcmFtZWJ1ZmZlciIsImNyZWF0ZUZyYW1lYnVmZmVyIiwiYmluZEZyYW1lYnVmZmVyIiwiRlJBTUVCVUZGRVIiLCJncHVDb2xvclZpZXdzIiwiY3YiLCJmcmFtZWJ1ZmZlclRleHR1cmUyRCIsIkNPTE9SX0FUVEFDSE1FTlQwIiwiYmFzZUxldmVsIiwiZnJhbWVidWZmZXJSZW5kZXJidWZmZXIiLCJwdXNoIiwiZHN2IiwiZ3B1RGVwdGhTdGVuY2lsVmlldyIsImdsQXR0YWNobWVudCIsImhhc1N0ZW5jaWwiLCJERVBUSF9TVEVOQ0lMX0FUVEFDSE1FTlQiLCJERVBUSF9BVFRBQ0hNRU5UIiwiZHJhd0J1ZmZlcnMiLCJzdGF0dXMiLCJjaGVja0ZyYW1lYnVmZmVyU3RhdHVzIiwiRlJBTUVCVUZGRVJfQ09NUExFVEUiLCJGUkFNRUJVRkZFUl9JTkNPTVBMRVRFX0FUVEFDSE1FTlQiLCJGUkFNRUJVRkZFUl9JTkNPTVBMRVRFX01JU1NJTkdfQVRUQUNITUVOVCIsIkZSQU1FQlVGRkVSX0lOQ09NUExFVEVfRElNRU5TSU9OUyIsIkZSQU1FQlVGRkVSX1VOU1VQUE9SVEVEIiwiV2ViR0wyQ21kRnVuY0Rlc3Ryb3lGcmFtZWJ1ZmZlciIsImRlbGV0ZUZyYW1lYnVmZmVyIiwiV2ViR0wyQ21kRnVuY0NyZWF0ZVNoYWRlciIsImdwdVNoYWRlciIsImsiLCJncHVTdGFnZSIsImdwdVN0YWdlcyIsImdsU2hhZGVyVHlwZSIsInNoYWRlclR5cGVTdHIiLCJsaW5lTnVtYmVyIiwiR0ZYU2hhZGVyVHlwZSIsIlZFUlRFWF9TSEFERVIiLCJGUkFHTUVOVCIsIkZSQUdNRU5UX1NIQURFUiIsImdsU2hhZGVyIiwiY3JlYXRlU2hhZGVyIiwic2hhZGVyU291cmNlIiwic291cmNlIiwiY29tcGlsZVNoYWRlciIsImdldFNoYWRlclBhcmFtZXRlciIsIkNPTVBJTEVfU1RBVFVTIiwibmFtZSIsInJlcGxhY2UiLCJnZXRTaGFkZXJJbmZvTG9nIiwibCIsInN0YWdlIiwiZGVsZXRlU2hhZGVyIiwiZ2xQcm9ncmFtIiwiY3JlYXRlUHJvZ3JhbSIsImF0dGFjaFNoYWRlciIsImxpbmtQcm9ncmFtIiwiZGV0YWNoU2hhZGVyIiwiZ2V0UHJvZ3JhbVBhcmFtZXRlciIsIkxJTktfU1RBVFVTIiwiaW5mbyIsImdldFByb2dyYW1JbmZvTG9nIiwiYWN0aXZlQXR0cmliQ291bnQiLCJBQ1RJVkVfQVRUUklCVVRFUyIsImdsSW5wdXRzIiwiQXJyYXkiLCJhdHRyaWJJbmZvIiwiZ2V0QWN0aXZlQXR0cmliIiwidmFyTmFtZSIsIm5hbWVPZmZzZXQiLCJpbmRleE9mIiwic3Vic3RyIiwiZ2xMb2MiLCJnZXRBdHRyaWJMb2NhdGlvbiIsInN0cmlkZSIsImJpbmRpbmciLCJjb3VudCIsImFjdGl2ZUJsb2NrQ291bnQiLCJBQ1RJVkVfVU5JRk9STV9CTE9DS1MiLCJibG9ja05hbWUiLCJibG9ja0lkeCIsImJsb2NrU2l6ZSIsImJsb2NrQmluZGluZyIsImJsb2NrVW5pZm9ybUNvdW50IiwidUluZGljZXMiLCJpbmRpY2VzIiwiZ2xVbmlmb3JtU2l6ZXMiLCJnbFVuaWZvcm1PZmZzZXRzIiwiZ2xVbmlmb3JtSW5mbyIsImdsQmxvY2tzIiwiZ2V0QWN0aXZlVW5pZm9ybUJsb2NrTmFtZSIsImJsb2NrcyIsImJsb2NrIiwiZ2V0QWN0aXZlVW5pZm9ybUJsb2NrUGFyYW1ldGVyIiwiVU5JRk9STV9CTE9DS19EQVRBX1NJWkUiLCJVTklGT1JNX0JMT0NLX0FDVElWRV9VTklGT1JNUyIsInVuaWZvcm1CbG9ja0JpbmRpbmciLCJnbEJsb2NrIiwiaWR4IiwiZ2xVbmlmb3JtcyIsImdsQWN0aXZlVW5pZm9ybXMiLCJpc1VuaWZvcm1QYWNrYWdlIiwiVU5JRk9STV9CTE9DS19BQ1RJVkVfVU5JRk9STV9JTkRJQ0VTIiwibiIsImdldEFjdGl2ZVVuaWZvcm1zIiwiVU5JRk9STV9TSVpFIiwiVU5JRk9STV9PRkZTRVQiLCJ1IiwiZ2V0QWN0aXZlVW5pZm9ybSIsImJlZ2luIiwiYXJyYXkiLCJmaWxsIiwic2FtcGxlcnMiLCJnbFNhbXBsZXJzIiwic2FtcGxlciIsInVuaXRzIiwiYWN0aXZlVW5pZm9ybUNvdW50IiwiQUNUSVZFX1VOSUZPUk1TIiwidW5pdElkeCIsImdsQWN0aXZlU2FtcGxlcnMiLCJ1bmlmb3JtSW5mbyIsImdldFVuaWZvcm1Mb2NhdGlvbiIsImlzU2FtcGxlciIsInQiLCJ1c2VQcm9ncmFtIiwidW5pZm9ybTFpdiIsIldlYkdMMkNtZEZ1bmNEZXN0cm95U2hhZGVyIiwiZGVsZXRlUHJvZ3JhbSIsIldlYkdMMkNtZEZ1bmNDcmVhdGVJbnB1dEFzc2VtYmVyIiwiZ2xBdHRyaWJzIiwiYXR0cmlidXRlcyIsIm9mZnNldHMiLCJhdHRyaWIiLCJzdHJlYW0iLCJ1bmRlZmluZWQiLCJncHVWZXJ0ZXhCdWZmZXJzIiwiY29tcG9uZW50Q291bnQiLCJpc05vcm1hbGl6ZWQiLCJpc0luc3RhbmNlZCIsIldlYkdMMkNtZEZ1bmNEZXN0cm95SW5wdXRBc3NlbWJsZXIiLCJpdCIsImdsVkFPcyIsInZhbHVlcyIsInJlcyIsIm5leHQiLCJkb25lIiwiZGVsZXRlVmVydGV4QXJyYXkiLCJ2YWx1ZSIsImdmeFN0YXRlQ2FjaGUiLCJnbFByaW1pdGl2ZSIsIldlYkdMMkNtZEZ1bmNCZWdpblJlbmRlclBhc3MiLCJjbGVhcnMiLCJsZWZ0IiwidG9wIiwic2Npc3NvclJlY3QiLCJjdXJHUFVSZW5kZXJQYXNzIiwiZ3B1UmVuZGVyUGFzcyIsImludmFsaWRhdGVBdHRhY2htZW50cyIsImoiLCJjb2xvckF0dGFjaG1lbnQiLCJjb2xvckF0dGFjaG1lbnRzIiwibG9hZE9wIiwiR0ZYTG9hZE9wIiwiTE9BRCIsIkNMRUFSIiwiQ09MT1IiLCJicyIsInRhcmdldHMiLCJibGVuZENvbG9yTWFzayIsIkdGWENvbG9yTWFzayIsIkFMTCIsImNvbG9yTWFzayIsImNsZWFyQ29sb3IiLCJyIiwiZyIsIkNPTE9SX0JVRkZFUl9CSVQiLCJjbGVhckJ1ZmZlcmZ2IiwiRElTQ0FSRCIsImRlcHRoU3RlbmNpbEF0dGFjaG1lbnQiLCJkZXB0aExvYWRPcCIsIkRFUFRIIiwiZHNzIiwiZGVwdGhXcml0ZSIsImRlcHRoTWFzayIsIkRFUFRIX0JVRkZFUl9CSVQiLCJzdGVuY2lsTG9hZE9wIiwiU1RFTkNJTCIsInN0ZW5jaWxXcml0ZU1hc2tGcm9udCIsInN0ZW5jaWxNYXNrU2VwYXJhdGUiLCJGUk9OVCIsInN0ZW5jaWxXcml0ZU1hc2tCYWNrIiwiQkFDSyIsIlNURU5DSUxfQlVGRkVSX0JJVCIsIlNURU5DSUxfQVRUQUNITUVOVCIsImludmFsaWRhdGVGcmFtZWJ1ZmZlciIsIlIiLCJHIiwiQiIsIkEiLCJXZWJHTDJDbWRGdW5jQmluZFN0YXRlcyIsImlzU2hhZGVyQ2hhbmdlZCIsInJzIiwiY3VsbE1vZGUiLCJHRlhDdWxsTW9kZSIsImRpc2FibGUiLCJDVUxMX0ZBQ0UiLCJlbmFibGUiLCJjdWxsRmFjZSIsImlzRnJvbnRGYWNlQ0NXIiwicmV2ZXJzZUNXIiwiZnJvbnRGYWNlIiwiQ0NXIiwiQ1ciLCJkZXB0aEJpYXNTbG9wIiwicG9seWdvbk9mZnNldCIsImRlcHRoVGVzdCIsIkRFUFRIX1RFU1QiLCJkZXB0aEZ1bmMiLCJzdGVuY2lsVGVzdEZyb250Iiwic3RlbmNpbFRlc3RCYWNrIiwiU1RFTkNJTF9URVNUIiwic3RlbmNpbEZ1bmNGcm9udCIsInN0ZW5jaWxSZWZGcm9udCIsInN0ZW5jaWxSZWFkTWFza0Zyb250Iiwic3RlbmNpbEZ1bmNTZXBhcmF0ZSIsInN0ZW5jaWxGYWlsT3BGcm9udCIsInN0ZW5jaWxaRmFpbE9wRnJvbnQiLCJzdGVuY2lsUGFzc09wRnJvbnQiLCJzdGVuY2lsT3BTZXBhcmF0ZSIsInN0ZW5jaWxGdW5jQmFjayIsInN0ZW5jaWxSZWZCYWNrIiwic3RlbmNpbFJlYWRNYXNrQmFjayIsInN0ZW5jaWxGYWlsT3BCYWNrIiwic3RlbmNpbFpGYWlsT3BCYWNrIiwic3RlbmNpbFBhc3NPcEJhY2siLCJpc0EyQyIsIlNBTVBMRV9BTFBIQV9UT19DT1ZFUkFHRSIsImJsZW5kQ29sb3IiLCJ0YXJnZXQwIiwidGFyZ2V0MENhY2hlIiwiYmxlbmQiLCJCTEVORCIsImJsZW5kRXEiLCJibGVuZEFscGhhRXEiLCJibGVuZEVxdWF0aW9uU2VwYXJhdGUiLCJibGVuZFNyYyIsImJsZW5kRHN0IiwiYmxlbmRTcmNBbHBoYSIsImJsZW5kRHN0QWxwaGEiLCJibGVuZEZ1bmNTZXBhcmF0ZSIsImdwdUJpbmRpbmdzIiwiZ3B1QmluZGluZyIsIkdGWEJpbmRpbmdUeXBlIiwiZ2xCaW5kVUJPcyIsImJpbmRCdWZmZXJCYXNlIiwiU0FNUExFUiIsImdwdVRleFZpZXciLCJhY3RpdmVUZXh0dXJlIiwiVEVYVFVSRTAiLCJudWxsVGV4MkQiLCJnbFNhbXBsZXJVbml0cyIsImJpbmRTYW1wbGVyIiwiZ2V0IiwiY3JlYXRlVmVydGV4QXJyYXkiLCJzZXQiLCJnbEF0dHJpYiIsImdsSW5wdXQiLCJhdHRyaWJPZmZzZXQiLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsImdsQ3VycmVudEF0dHJpYkxvY3MiLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwidmVydGV4QXR0cmliRGl2aXNvciIsImdwdUluZGV4QnVmZmVyIiwibWF4VmVydGV4QXR0cmlidXRlcyIsImdsRW5hYmxlZEF0dHJpYkxvY3MiLCJkaXNhYmxlVmVydGV4QXR0cmliQXJyYXkiLCJkeW5hbWljU3RhdGVzIiwiZHluYW1pY1N0YXRlIiwiR0ZYRHluYW1pY1N0YXRlIiwiVklFV1BPUlQiLCJTQ0lTU09SIiwiTElORV9XSURUSCIsIkRFUFRIX0JJQVMiLCJjb25zdGFudEZhY3RvciIsInNsb3BlRmFjdG9yIiwiQkxFTkRfQ09OU1RBTlRTIiwiU1RFTkNJTF9XUklURV9NQVNLIiwiZmFjZSIsIkdGWFN0ZW5jaWxGYWNlIiwid3JpdGVNYXNrIiwic3RlbmNpbE1hc2siLCJTVEVOQ0lMX0NPTVBBUkVfTUFTSyIsInJlZmVyZW5jZSIsImNvbXBhcmVNYXNrIiwic3RlbmNpbEZ1bmMiLCJXZWJHTDJDbWRGdW5jRHJhdyIsImdwdUluZGlyZWN0QnVmZmVyIiwic3ViRHJhd0luZm8iLCJkcmF3RWxlbWVudHNJbnN0YW5jZWQiLCJnbEluZGV4VHlwZSIsImRyYXdBcnJheXNJbnN0YW5jZWQiLCJkcmF3RWxlbWVudHMiLCJkcmF3QXJyYXlzIiwiY21kSWRzIiwiQ09VTlQiLCJXZWJHTDJDbWRGdW5jRXhlY3V0ZUNtZHMiLCJjbWRQYWNrYWdlIiwiY21kIiwiY21kSWQiLCJjbWQwIiwiY21kMiIsImNtZDMiLCJjbWQ0IiwiY21kNSIsIldlYkdMMkNtZEZ1bmNDb3B5QnVmZmVyc1RvVGV4dHVyZSIsIldlYkdMMkNtZEZ1bmNDb3B5VGV4SW1hZ2VzVG9UZXh0dXJlIiwidGV4SW1hZ2VzIiwibSIsInJlZ2lvbiIsInRleFN1YkltYWdlMkQiLCJmY291bnQiLCJtY291bnQiLCJmbGFncyIsIkdGWFRleHR1cmVGbGFnQml0IiwiR0VOX01JUE1BUCIsImdlbmVyYXRlTWlwbWFwIiwiYnVmZmVycyIsImZtdEluZm8iLCJwaXhlbHMiLCJjb21wcmVzc2VkVGV4U3ViSW1hZ2UyRCIsIldlYkdMMkNtZEZ1bmNCbGl0RnJhbWVidWZmZXIiLCJzcmMiLCJkc3QiLCJzcmNSZWN0IiwiZHN0UmVjdCIsImZpbHRlciIsImdsUmVhZEZyYW1lYnVmZmVyIiwiUkVBRF9GUkFNRUJVRkZFUiIsInJlYmluZEZCTyIsIkRSQVdfRlJBTUVC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QUFDbmhCLENBRHZCLEVBQzBCbWhCLE9BQU8sQ0FBQ3BoQixDQUFSLEdBQVlvaEIsT0FBTyxDQUFDbGhCLEtBRDlDLEVBQ3FEa2hCLE9BQU8sQ0FBQ25oQixDQUFSLEdBQVltaEIsT0FBTyxDQUFDamhCLE1BRHpFLEVBRUlraEIsT0FBTyxDQUFDcmhCLENBRlosRUFFZXFoQixPQUFPLENBQUNwaEIsQ0FGdkIsRUFFMEJvaEIsT0FBTyxDQUFDcmhCLENBQVIsR0FBWXFoQixPQUFPLENBQUNuaEIsS0FGOUMsRUFFcURtaEIsT0FBTyxDQUFDcGhCLENBQVIsR0FBWW9oQixPQUFPLENBQUNsaEIsTUFGekUsRUFHSXdoQixJQUhKLEVBR1VDLFFBSFY7O0FBS0EsUUFBSUgsU0FBSixFQUFlO0FBQ1h4d0IsTUFBQUEsRUFBRSxDQUFDeWIsZUFBSCxDQUFtQnpiLEVBQUUsQ0FBQzBiLFdBQXRCLEVBQW1DakksTUFBTSxDQUFDRSxVQUFQLENBQWtCNEgsYUFBckQ7QUFDSDtBQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2FjaGVkQXJyYXkgfSBmcm9tICcuLi8uLi9tZW1vcC9jYWNoZWQtYXJyYXknO1xyXG5pbXBvcnQgeyBlcnJvciwgZXJyb3JJRCB9IGZyb20gJy4uLy4uL3BsYXRmb3JtJztcclxuaW1wb3J0IHsgR0ZYQnVmZmVyU291cmNlLCBJR0ZYRHJhd0luZm8sIElHRlhJbmRpcmVjdEJ1ZmZlciB9IGZyb20gJy4uL2J1ZmZlcic7XHJcbmltcG9ydCB7XHJcbiAgICBHRlhCaW5kaW5nVHlwZSxcclxuICAgIEdGWEJ1ZmZlclRleHR1cmVDb3B5LFxyXG4gICAgR0ZYQnVmZmVyVXNhZ2VCaXQsXHJcbiAgICBHRlhDbGVhckZsYWcsXHJcbiAgICBHRlhDb2xvck1hc2ssXHJcbiAgICBHRlhDdWxsTW9kZSxcclxuICAgIEdGWER5bmFtaWNTdGF0ZSxcclxuICAgIEdGWEZpbHRlcixcclxuICAgIEdGWEZvcm1hdCxcclxuICAgIEdGWEZvcm1hdEluZm9zLFxyXG4gICAgR0ZYRm9ybWF0U2l6ZSxcclxuICAgIEdGWExvYWRPcCxcclxuICAgIEdGWE1lbW9yeVVzYWdlQml0LFxyXG4gICAgR0ZYU2FtcGxlQ291bnQsXHJcbiAgICBHRlhTaGFkZXJUeXBlLFxyXG4gICAgR0ZYU3RlbmNpbEZhY2UsXHJcbiAgICBHRlhUZXh0dXJlRmxhZ0JpdCxcclxuICAgIEdGWFRleHR1cmVMYXlvdXQsXHJcbiAgICBHRlhUZXh0dXJlVmlld1R5cGUsXHJcbiAgICBHRlhUeXBlLFxyXG4gICAgSUdGWENvbG9yLFxyXG4gICAgSUdGWEZvcm1hdEluZm8sXHJcbiAgICBJR0ZYUmVjdCxcclxuICAgIElHRlhWaWV3cG9ydCxcclxufSBmcm9tICcuLi9kZWZpbmUnO1xyXG5pbXBvcnQgeyBXZWJHTEVYVCB9IGZyb20gJy4uL3dlYmdsL3dlYmdsLWRlZmluZSc7XHJcbmltcG9ydCB7IFdlYkdMMkdGWENvbW1hbmRBbGxvY2F0b3IgfSBmcm9tICcuL3dlYmdsMi1jb21tYW5kLWFsbG9jYXRvcic7XHJcbmltcG9ydCB7XHJcbiAgICBJV2ViR0wyRGVwdGhCaWFzLFxyXG4gICAgSVdlYkdMMkRlcHRoQm91bmRzLFxyXG4gICAgSVdlYkdMMlN0ZW5jaWxDb21wYXJlTWFzayxcclxuICAgIElXZWJHTDJTdGVuY2lsV3JpdGVNYXNrLFxyXG59IGZyb20gJy4vd2ViZ2wyLWNvbW1hbmQtYnVmZmVyJztcclxuaW1wb3J0IHsgV2ViR0wyR0ZYRGV2aWNlIH0gZnJvbSAnLi93ZWJnbDItZGV2aWNlJztcclxuaW1wb3J0IHtcclxuICAgIElXZWJHTDJHUFVJbnB1dEFzc2VtYmxlcixcclxuICAgIElXZWJHTDJHUFVVbmlmb3JtLFxyXG4gICAgV2ViR0wyQXR0cmliLFxyXG4gICAgV2ViR0wyR1BVQmluZGluZ0xheW91dCxcclxuICAgIFdlYkdMMkdQVUJ1ZmZlcixcclxuICAgIFdlYkdMMkdQVUZyYW1lYnVmZmVyLFxyXG4gICAgV2ViR0wyR1BVSW5wdXQsXHJcbiAgICBXZWJHTDJHUFVQaXBlbGluZVN0YXRlLFxyXG4gICAgV2ViR0wyR1BVU2FtcGxlcixcclxuICAgIFdlYkdMMkdQVVNoYWRlcixcclxuICAgIFdlYkdMMkdQVVRleHR1cmUsXHJcbiAgICBXZWJHTDJHUFVVbmlmb3JtQmxvY2ssXHJcbiAgICBXZWJHTDJHUFVVbmlmb3JtU2FtcGxlcixcclxufSBmcm9tICcuL3dlYmdsMi1ncHUtb2JqZWN0cyc7XHJcblxyXG5jb25zdCBXZWJHTFdyYXBzOiBHTGVudW1bXSA9IFtcclxuICAgIDB4MjkwMSwgLy8gV2ViR0xSZW5kZXJpbmdDb250ZXh0LlJFUEVBVFxyXG4gICAgMHg4MzcwLCAvLyBXZWJHTFJlbmRlcmluZ0NvbnRleHQuTUlSUk9SRURfUkVQRUFUXHJcbiAgICAweDgxMkYsIC8vIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5DTEFNUF9UT19FREdFXHJcbiAgICAweDgxMkYsIC8vIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5DTEFNUF9UT19FREdFXHJcbl07XHJcblxyXG5jb25zdCBTQU1QTEVTOiBudW1iZXJbXSA9IFtcclxuICAgIDEsXHJcbiAgICAyLFxyXG4gICAgNCxcclxuICAgIDgsXHJcbiAgICAxNixcclxuICAgIDMyLFxyXG4gICAgNjQsXHJcbl07XHJcblxyXG5jb25zdCBfZjMydjQgPSBuZXcgRmxvYXQzMkFycmF5KDQpO1xyXG5cclxuLy8gdHNsaW50OmRpc2FibGU6IG1heC1saW5lLWxlbmd0aFxyXG5cclxuZnVuY3Rpb24gQ21wRjMyTm90RXVxYWwgKGE6IG51bWJlciwgYjogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBjID0gYSAtIGI7XHJcbiAgICByZXR1cm4gKGMgPiAwLjAwMDAwMSB8fCBjIDwgLTAuMDAwMDAxKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIEdGWEZvcm1hdFRvV2ViR0xUeXBlIChmb3JtYXQ6IEdGWEZvcm1hdCwgZ2w6IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpOiBHTGVudW0ge1xyXG4gICAgc3dpdGNoIChmb3JtYXQpIHtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SODogcmV0dXJuIGdsLlVOU0lHTkVEX0JZVEU7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUjhTTjogcmV0dXJuIGdsLkJZVEU7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUjhVSTogcmV0dXJuIGdsLlVOU0lHTkVEX0JZVEU7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUjhJOiByZXR1cm4gZ2wuQllURTtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SMTZGOiByZXR1cm4gZ2wuSEFMRl9GTE9BVDtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SMTZVSTogcmV0dXJuIGdsLlVOU0lHTkVEX1NIT1JUO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlIxNkk6IHJldHVybiBnbC5TSE9SVDtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SMzJGOiByZXR1cm4gZ2wuRkxPQVQ7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUjMyVUk6IHJldHVybiBnbC5VTlNJR05FRF9JTlQ7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUjMySTogcmV0dXJuIGdsLklOVDtcclxuXHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkc4OiByZXR1cm4gZ2wuVU5TSUdORURfQllURTtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SRzhTTjogcmV0dXJuIGdsLkJZVEU7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkc4VUk6IHJldHVybiBnbC5VTlNJR05FRF9CWVRFO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHOEk6IHJldHVybiBnbC5CWVRFO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHMTZGOiByZXR1cm4gZ2wuSEFMRl9GTE9BVDtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SRzE2VUk6IHJldHVybiBnbC5VTlNJR05FRF9TSE9SVDtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SRzE2STogcmV0dXJuIGdsLlNIT1JUO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHMzJGOiByZXR1cm4gZ2wuRkxPQVQ7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkczMlVJOiByZXR1cm4gZ2wuVU5TSUdORURfSU5UO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHMzJJOiByZXR1cm4gZ2wuSU5UO1xyXG5cclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SR0I4OiByZXR1cm4gZ2wuVU5TSUdORURfQllURTtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5TUkdCODogcmV0dXJuIGdsLlVOU0lHTkVEX0JZVEU7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkdCOFNOOiByZXR1cm4gZ2wuQllURTtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SR0I4VUk6IHJldHVybiBnbC5VTlNJR05FRF9CWVRFO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHQjhJOiByZXR1cm4gZ2wuQllURTtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SR0IxNkY6IHJldHVybiBnbC5IQUxGX0ZMT0FUO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHQjE2VUk6IHJldHVybiBnbC5VTlNJR05FRF9TSE9SVDtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SR0IxNkk6IHJldHVybiBnbC5TSE9SVDtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SR0IzMkY6IHJldHVybiBnbC5GTE9BVDtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SR0IzMlVJOiByZXR1cm4gZ2wuVU5TSUdORURfSU5UO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHQjMySTogcmV0dXJuIGdsLklOVDtcclxuXHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkdCQTg6IHJldHVybiBnbC5VTlNJR05FRF9CWVRFO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlNSR0I4X0E4OiByZXR1cm4gZ2wuVU5TSUdORURfQllURTtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SR0JBOFNOOiByZXR1cm4gZ2wuQllURTtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SR0JBOFVJOiByZXR1cm4gZ2wuVU5TSUdORURfQllURTtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SR0JBOEk6IHJldHVybiBnbC5CWVRFO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHQkExNkY6IHJldHVybiBnbC5IQUxGX0ZMT0FUO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHQkExNlVJOiByZXR1cm4gZ2wuVU5TSUdORURfU0hPUlQ7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkdCQTE2STogcmV0dXJuIGdsLlNIT1JUO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHQkEzMkY6IHJldHVybiBnbC5GTE9BVDtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SR0JBMzJVSTogcmV0dXJuIGdsLlVOU0lHTkVEX0lOVDtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SR0JBMzJJOiByZXR1cm4gZ2wuSU5UO1xyXG5cclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SNUc2QjU6IHJldHVybiBnbC5VTlNJR05FRF9TSE9SVF81XzZfNTtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SMTFHMTFCMTBGOiByZXR1cm4gZ2wuVU5TSUdORURfSU5UXzEwRl8xMUZfMTFGX1JFVjtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SR0I1QTE6IHJldHVybiBnbC5VTlNJR05FRF9TSE9SVF81XzVfNV8xO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHQkE0OiByZXR1cm4gZ2wuVU5TSUdORURfU0hPUlRfNF80XzRfNDtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SR0IxMEEyOiByZXR1cm4gZ2wuVU5TSUdORURfSU5UXzJfMTBfMTBfMTBfUkVWO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHQjEwQTJVSTogcmV0dXJuIGdsLlVOU0lHTkVEX0lOVF8yXzEwXzEwXzEwX1JFVjtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SR0I5RTU6IHJldHVybiBnbC5GTE9BVDtcclxuXHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuRDE2OiByZXR1cm4gZ2wuVU5TSUdORURfU0hPUlQ7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuRDE2Uzg6IHJldHVybiBnbC5VTlNJR05FRF9JTlRfMjRfODsgLy8gbm8gRDE2Uzggc3VwcG9ydFxyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkQyNDogcmV0dXJuIGdsLlVOU0lHTkVEX0lOVDtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5EMjRTODogcmV0dXJuIGdsLlVOU0lHTkVEX0lOVF8yNF84O1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkQzMkY6IHJldHVybiBnbC5GTE9BVDtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5EMzJGX1M4OiByZXR1cm4gZ2wuRkxPQVRfMzJfVU5TSUdORURfSU5UXzI0XzhfUkVWO1xyXG5cclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5CQzE6IHJldHVybiBnbC5VTlNJR05FRF9CWVRFO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkJDMV9TUkdCOiByZXR1cm4gZ2wuVU5TSUdORURfQllURTtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5CQzI6IHJldHVybiBnbC5VTlNJR05FRF9CWVRFO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkJDMl9TUkdCOiByZXR1cm4gZ2wuVU5TSUdORURfQllURTtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5CQzM6IHJldHVybiBnbC5VTlNJR05FRF9CWVRFO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkJDM19TUkdCOiByZXR1cm4gZ2wuVU5TSUdORURfQllURTtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5CQzQ6IHJldHVybiBnbC5VTlNJR05FRF9CWVRFO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkJDNF9TTk9STTogcmV0dXJuIGdsLkJZVEU7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuQkM1OiByZXR1cm4gZ2wuVU5TSUdORURfQllURTtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5CQzVfU05PUk06IHJldHVybiBnbC5CWVRFO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkJDNkhfU0YxNjogcmV0dXJuIGdsLkZMT0FUO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkJDNkhfVUYxNjogcmV0dXJuIGdsLkZMT0FUO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkJDNzogcmV0dXJuIGdsLlVOU0lHTkVEX0JZVEU7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuQkM3X1NSR0I6IHJldHVybiBnbC5VTlNJR05FRF9CWVRFO1xyXG5cclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5FVENfUkdCODogcmV0dXJuIGdsLlVOU0lHTkVEX0JZVEU7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuRVRDMl9SR0I4OiByZXR1cm4gZ2wuVU5TSUdORURfQllURTtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5FVEMyX1NSR0I4OiByZXR1cm4gZ2wuVU5TSUdORURfQllURTtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5FVEMyX1JHQjhfQTE6IHJldHVybiBnbC5VTlNJR05FRF9CWVRFO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkVUQzJfU1JHQjhfQTE6IHJldHVybiBnbC5VTlNJR05FRF9CWVRFO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkVUQzJfUkdCODogcmV0dXJuIGdsLlVOU0lHTkVEX0JZVEU7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuRVRDMl9TUkdCODogcmV0dXJuIGdsLlVOU0lHTkVEX0JZVEU7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuRUFDX1IxMTogcmV0dXJuIGdsLlVOU0lHTkVEX0JZVEU7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuRUFDX1IxMVNOOiByZXR1cm4gZ2wuQllURTtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5FQUNfUkcxMTogcmV0dXJuIGdsLlVOU0lHTkVEX0JZVEU7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuRUFDX1JHMTFTTjogcmV0dXJuIGdsLkJZVEU7XHJcblxyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlBWUlRDX1JHQjI6IHJldHVybiBnbC5VTlNJR05FRF9CWVRFO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlBWUlRDX1JHQkEyOiByZXR1cm4gZ2wuVU5TSUdORURfQllURTtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5QVlJUQ19SR0I0OiByZXR1cm4gZ2wuVU5TSUdORURfQllURTtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5QVlJUQ19SR0JBNDogcmV0dXJuIGdsLlVOU0lHTkVEX0JZVEU7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUFZSVEMyXzJCUFA6IHJldHVybiBnbC5VTlNJR05FRF9CWVRFO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlBWUlRDMl80QlBQOiByZXR1cm4gZ2wuVU5TSUdORURfQllURTtcclxuXHJcbiAgICAgICAgZGVmYXVsdDoge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2wuVU5TSUdORURfQllURTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBHRlhGb3JtYXRUb1dlYkdMSW50ZXJuYWxGb3JtYXQgKGZvcm1hdDogR0ZYRm9ybWF0LCBnbDogV2ViR0wyUmVuZGVyaW5nQ29udGV4dCk6IEdMZW51bSB7XHJcbiAgICBzd2l0Y2ggKGZvcm1hdCkge1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkE4OiByZXR1cm4gZ2wuQUxQSEE7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuTDg6IHJldHVybiBnbC5MVU1JTkFOQ0U7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuTEE4OiByZXR1cm4gZ2wuTFVNSU5BTkNFX0FMUEhBO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlI4OiByZXR1cm4gZ2wuUjg7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUjhTTjogcmV0dXJuIGdsLlI4X1NOT1JNO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlI4VUk6IHJldHVybiBnbC5SOFVJO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlI4STogcmV0dXJuIGdsLlI4STtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SRzg6IHJldHVybiBnbC5SRzg7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkc4U046IHJldHVybiBnbC5SRzhfU05PUk07XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkc4VUk6IHJldHVybiBnbC5SRzhVSTtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SRzhJOiByZXR1cm4gZ2wuUkc4STtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SR0I4OiByZXR1cm4gZ2wuUkdCODtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SR0I4U046IHJldHVybiBnbC5SR0I4X1NOT1JNO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHQjhVSTogcmV0dXJuIGdsLlJHQjhVSTtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SR0I4STogcmV0dXJuIGdsLlJHQjhJO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHQkE4OiByZXR1cm4gZ2wuUkdCQTg7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkdCQThTTjogcmV0dXJuIGdsLlJHQkE4X1NOT1JNO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHQkE4VUk6IHJldHVybiBnbC5SR0JBOFVJO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHQkE4STogcmV0dXJuIGdsLlJHQkE4STtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SMTZJOiByZXR1cm4gZ2wuUjE2STtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SMTZVSTogcmV0dXJuIGdsLlIxNlVJO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlIxNkY6IHJldHVybiBnbC5SMTZGO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHMTZJOiByZXR1cm4gZ2wuUkcxNkk7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkcxNlVJOiByZXR1cm4gZ2wuUkcxNlVJO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHMTZGOiByZXR1cm4gZ2wuUkcxNkY7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkdCMTZJOiByZXR1cm4gZ2wuUkdCMTZJO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHQjE2VUk6IHJldHVybiBnbC5SR0IxNlVJO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHQjE2RjogcmV0dXJuIGdsLlJHQjE2RjtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SR0JBMTZJOiByZXR1cm4gZ2wuUkdCQTE2STtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SR0JBMTZVSTogcmV0dXJuIGdsLlJHQkExNlVJO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHQkExNkY6IHJldHVybiBnbC5SR0JBMTZGO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlIzMkk6IHJldHVybiBnbC5SMzJJO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlIzMlVJOiByZXR1cm4gZ2wuUjMyVUk7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUjMyRjogcmV0dXJuIGdsLlIzMkY7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkczMkk6IHJldHVybiBnbC5SRzMySTtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SRzMyVUk6IHJldHVybiBnbC5SRzMyVUk7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkczMkY6IHJldHVybiBnbC5SRzMyRjtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SR0IzMkk6IHJldHVybiBnbC5SR0IzMkk7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkdCMzJVSTogcmV0dXJuIGdsLlJHQjMyVUk7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkdCMzJGOiByZXR1cm4gZ2wuUkdCMzJGO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHQkEzMkk6IHJldHVybiBnbC5SR0JBMzJJO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHQkEzMlVJOiByZXR1cm4gZ2wuUkdCQTMyVUk7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkdCQTMyRjogcmV0dXJuIGdsLlJHQkEzMkY7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUjVHNkI1OiByZXR1cm4gZ2wuUkdCNTY1O1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHQjVBMTogcmV0dXJuIGdsLlJHQjVfQTE7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkdCQTQ6IHJldHVybiBnbC5SR0JBNDtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SR0IxMEEyOiByZXR1cm4gZ2wuUkdCMTBfQTI7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkdCMTBBMlVJOiByZXR1cm4gZ2wuUkdCMTBfQTJVSTtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SMTFHMTFCMTBGOiByZXR1cm4gZ2wuUjExRl9HMTFGX0IxMEY7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuRDE2OiByZXR1cm4gZ2wuREVQVEhfQ09NUE9ORU5UMTY7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuRDE2Uzg6IHJldHVybiBnbC5ERVBUSDI0X1NURU5DSUw4OyAvLyBubyBEMTZTOCBzdXBwb3J0XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuRDI0OiByZXR1cm4gZ2wuREVQVEhfQ09NUE9ORU5UMjQ7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuRDI0Uzg6IHJldHVybiBnbC5ERVBUSDI0X1NURU5DSUw4O1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkQzMkY6IHJldHVybiBnbC5ERVBUSF9DT01QT05FTlQzMkY7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuRDMyRl9TODogcmV0dXJuIGdsLkRFUFRIMzJGX1NURU5DSUw4O1xyXG5cclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5CQzE6IHJldHVybiBXZWJHTEVYVC5DT01QUkVTU0VEX1JHQl9TM1RDX0RYVDFfRVhUO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkJDMV9BTFBIQTogcmV0dXJuIFdlYkdMRVhULkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDFfRVhUO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkJDMV9TUkdCOiByZXR1cm4gV2ViR0xFWFQuQ09NUFJFU1NFRF9TUkdCX1MzVENfRFhUMV9FWFQ7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuQkMxX1NSR0JfQUxQSEE6IHJldHVybiBXZWJHTEVYVC5DT01QUkVTU0VEX1NSR0JfQUxQSEFfUzNUQ19EWFQxX0VYVDtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5CQzI6IHJldHVybiBXZWJHTEVYVC5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQzX0VYVDtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5CQzJfU1JHQjogcmV0dXJuIFdlYkdMRVhULkNPTVBSRVNTRURfU1JHQl9BTFBIQV9TM1RDX0RYVDNfRVhUO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkJDMzogcmV0dXJuIFdlYkdMRVhULkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDVfRVhUO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkJDM19TUkdCOiByZXR1cm4gV2ViR0xFWFQuQ09NUFJFU1NFRF9TUkdCX0FMUEhBX1MzVENfRFhUNV9FWFQ7XHJcblxyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkVUQ19SR0I4OiByZXR1cm4gV2ViR0xFWFQuQ09NUFJFU1NFRF9SR0JfRVRDMV9XRUJHTDtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5FVEMyX1JHQjg6IHJldHVybiBXZWJHTEVYVC5DT01QUkVTU0VEX1JHQjhfRVRDMjtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5FVEMyX1NSR0I4OiByZXR1cm4gV2ViR0xFWFQuQ09NUFJFU1NFRF9TUkdCOF9FVEMyO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkVUQzJfUkdCOF9BMTogcmV0dXJuIFdlYkdMRVhULkNPTVBSRVNTRURfUkdCOF9QVU5DSFRIUk9VR0hfQUxQSEExX0VUQzI7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuRVRDMl9TUkdCOF9BMTogcmV0dXJuIFdlYkdMRVhULkNPTVBSRVNTRURfU1JHQjhfUFVOQ0hUSFJPVUdIX0FMUEhBMV9FVEMyO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkVUQzJfUkdCQTg6IHJldHVybiBXZWJHTEVYVC5DT01QUkVTU0VEX1JHQkE4X0VUQzJfRUFDO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkVUQzJfU1JHQjhfQTg6IHJldHVybiBXZWJHTEVYVC5DT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9FVEMyX0VBQztcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5FQUNfUjExOiByZXR1cm4gV2ViR0xFWFQuQ09NUFJFU1NFRF9SMTFfRUFDO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkVBQ19SMTFTTjogcmV0dXJuIFdlYkdMRVhULkNPTVBSRVNTRURfU0lHTkVEX1IxMV9FQUM7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuRUFDX1JHMTE6IHJldHVybiBXZWJHTEVYVC5DT01QUkVTU0VEX1JHMTFfRUFDO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkVBQ19SRzExU046IHJldHVybiBXZWJHTEVYVC5DT01QUkVTU0VEX1NJR05FRF9SRzExX0VBQztcclxuXHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUFZSVENfUkdCMjogcmV0dXJuIFdlYkdMRVhULkNPTVBSRVNTRURfUkdCX1BWUlRDXzJCUFBWMV9JTUc7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUFZSVENfUkdCQTI6IHJldHVybiBXZWJHTEVYVC5DT01QUkVTU0VEX1JHQkFfUFZSVENfMkJQUFYxX0lNRztcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5QVlJUQ19SR0I0OiByZXR1cm4gV2ViR0xFWFQuQ09NUFJFU1NFRF9SR0JfUFZSVENfNEJQUFYxX0lNRztcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5QVlJUQ19SR0JBNDogcmV0dXJuIFdlYkdMRVhULkNPTVBSRVNTRURfUkdCQV9QVlJUQ180QlBQVjFfSU1HO1xyXG5cclxuICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1Vuc3VwcG9ydGVkIEdGWEZvcm1hdCwgY29udmVydCB0byBXZWJHTCBpbnRlcm5hbCBmb3JtYXQgZmFpbGVkLicpO1xyXG4gICAgICAgICAgICByZXR1cm4gZ2wuUkdCQTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBHRlhGb3JtYXRUb1dlYkdMRm9ybWF0IChmb3JtYXQ6IEdGWEZvcm1hdCwgZ2w6IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpOiBHTGVudW0ge1xyXG4gICAgc3dpdGNoIChmb3JtYXQpIHtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5BODogcmV0dXJuIGdsLkFMUEhBO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0Lkw4OiByZXR1cm4gZ2wuTFVNSU5BTkNFO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkxBODogcmV0dXJuIGdsLkxVTUlOQU5DRV9BTFBIQTtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SODpcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SOFNOOiByZXR1cm4gZ2wuUkVEO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlI4VUk6XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUjhJOiByZXR1cm4gZ2wuUkVEO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHODpcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SRzhTTjpcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SRzhVSTpcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SRzhJOiByZXR1cm4gZ2wuUkc7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkdCODpcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SR0I4U046XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkdCOFVJOlxyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHQjhJOiByZXR1cm4gZ2wuUkdCO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHQkE4OlxyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHQkE4U046XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkdCQThVSTpcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SR0JBOEk6IHJldHVybiBnbC5SR0JBO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlIxNlVJOlxyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlIxNkk6XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUjE2RjogcmV0dXJuIGdsLlJFRDtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SRzE2VUk6XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkcxNkk6XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkcxNkY6IHJldHVybiBnbC5SRztcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SR0IxNlVJOlxyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHQjE2STpcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SR0IxNkY6IHJldHVybiBnbC5SR0I7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkdCQTE2VUk6XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkdCQTE2STpcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SR0JBMTZGOiByZXR1cm4gZ2wuUkdCQTtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SMzJVSTpcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SMzJJOlxyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlIzMkY6IHJldHVybiBnbC5SRUQ7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkczMlVJOlxyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHMzJJOlxyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHMzJGOiByZXR1cm4gZ2wuUkc7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkdCMzJVSTpcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SR0IzMkk6XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkdCMzJGOiByZXR1cm4gZ2wuUkdCO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHQkEzMlVJOlxyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlJHQkEzMkk6XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkdCQTMyRjogcmV0dXJuIGdsLlJHQkE7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkdCMTBBMjogcmV0dXJuIGdsLlJHQkE7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUjExRzExQjEwRjogcmV0dXJuIGdsLlJHQjtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SNUc2QjU6IHJldHVybiBnbC5SR0I7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuUkdCNUExOiByZXR1cm4gZ2wuUkdCQTtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5SR0JBNDogcmV0dXJuIGdsLlJHQkE7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuRDE2OiByZXR1cm4gZ2wuREVQVEhfQ09NUE9ORU5UO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkQxNlM4OiByZXR1cm4gZ2wuREVQVEhfU1RFTkNJTDtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5EMjQ6IHJldHVybiBnbC5ERVBUSF9DT01QT05FTlQ7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuRDI0Uzg6IHJldHVybiBnbC5ERVBUSF9TVEVOQ0lMO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkQzMkY6IHJldHVybiBnbC5ERVBUSF9DT01QT05FTlQ7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuRDMyRl9TODogcmV0dXJuIGdsLkRFUFRIX1NURU5DSUw7XHJcblxyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkJDMTogcmV0dXJuIFdlYkdMRVhULkNPTVBSRVNTRURfUkdCX1MzVENfRFhUMV9FWFQ7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuQkMxX0FMUEhBOiByZXR1cm4gV2ViR0xFWFQuQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUMV9FWFQ7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuQkMxX1NSR0I6IHJldHVybiBXZWJHTEVYVC5DT01QUkVTU0VEX1NSR0JfUzNUQ19EWFQxX0VYVDtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5CQzFfU1JHQl9BTFBIQTogcmV0dXJuIFdlYkdMRVhULkNPTVBSRVNTRURfU1JHQl9BTFBIQV9TM1RDX0RYVDFfRVhUO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkJDMjogcmV0dXJuIFdlYkdMRVhULkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDNfRVhUO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkJDMl9TUkdCOiByZXR1cm4gV2ViR0xFWFQuQ09NUFJFU1NFRF9TUkdCX0FMUEhBX1MzVENfRFhUM19FWFQ7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuQkMzOiByZXR1cm4gV2ViR0xFWFQuQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUNV9FWFQ7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuQkMzX1NSR0I6IHJldHVybiBXZWJHTEVYVC5DT01QUkVTU0VEX1NSR0JfQUxQSEFfUzNUQ19EWFQ1X0VYVDtcclxuXHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuRVRDX1JHQjg6IHJldHVybiBXZWJHTEVYVC5DT01QUkVTU0VEX1JHQl9FVEMxX1dFQkdMO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkVUQzJfUkdCODogcmV0dXJuIFdlYkdMRVhULkNPTVBSRVNTRURfUkdCOF9FVEMyO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkVUQzJfU1JHQjg6IHJldHVybiBXZWJHTEVYVC5DT01QUkVTU0VEX1NSR0I4X0VUQzI7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuRVRDMl9SR0I4X0ExOiByZXR1cm4gV2ViR0xFWFQuQ09NUFJFU1NFRF9SR0I4X1BVTkNIVEhST1VHSF9BTFBIQTFfRVRDMjtcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5FVEMyX1NSR0I4X0ExOiByZXR1cm4gV2ViR0xFWFQuQ09NUFJFU1NFRF9TUkdCOF9QVU5DSFRIUk9VR0hfQUxQSEExX0VUQzI7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuRVRDMl9SR0JBODogcmV0dXJuIFdlYkdMRVhULkNPTVBSRVNTRURfUkdCQThfRVRDMl9FQUM7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuRVRDMl9TUkdCOF9BODogcmV0dXJuIFdlYkdMRVhULkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0VUQzJfRUFDO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LkVBQ19SMTE6IHJldHVybiBXZWJHTEVYVC5DT01QUkVTU0VEX1IxMV9FQUM7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuRUFDX1IxMVNOOiByZXR1cm4gV2ViR0xFWFQuQ09NUFJFU1NFRF9TSUdORURfUjExX0VBQztcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5FQUNfUkcxMTogcmV0dXJuIFdlYkdMRVhULkNPTVBSRVNTRURfUkcxMV9FQUM7XHJcbiAgICAgICAgY2FzZSBHRlhGb3JtYXQuRUFDX1JHMTFTTjogcmV0dXJuIFdlYkdMRVhULkNPTVBSRVNTRURfU0lHTkVEX1JHMTFfRUFDO1xyXG5cclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5QVlJUQ19SR0IyOiByZXR1cm4gV2ViR0xFWFQuQ09NUFJFU1NFRF9SR0JfUFZSVENfMkJQUFYxX0lNRztcclxuICAgICAgICBjYXNlIEdGWEZvcm1hdC5QVlJUQ19SR0JBMjogcmV0dXJuIFdlYkdMRVhULkNPTVBSRVNTRURfUkdCQV9QVlJUQ18yQlBQVjFfSU1HO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlBWUlRDX1JHQjQ6IHJldHVybiBXZWJHTEVYVC5DT01QUkVTU0VEX1JHQl9QVlJUQ180QlBQVjFfSU1HO1xyXG4gICAgICAgIGNhc2UgR0ZYRm9ybWF0LlBWUlRDX1JHQkE0OiByZXR1cm4gV2ViR0xFWFQuQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzRCUFBWMV9JTUc7XHJcblxyXG4gICAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignVW5zdXBwb3J0ZWQgR0ZYRm9ybWF0LCBjb252ZXJ0IHRvIFdlYkdMIGZvcm1hdCBmYWlsZWQuJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBnbC5SR0JBO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gR0ZYVHlwZVRvV2ViR0xUeXBlICh0eXBlOiBHRlhUeXBlLCBnbDogV2ViR0wyUmVuZGVyaW5nQ29udGV4dCk6IEdMZW51bSB7XHJcbiAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICBjYXNlIEdGWFR5cGUuQk9PTDogcmV0dXJuIGdsLkJPT0w7XHJcbiAgICAgICAgY2FzZSBHRlhUeXBlLkJPT0wyOiByZXR1cm4gZ2wuQk9PTF9WRUMyO1xyXG4gICAgICAgIGNhc2UgR0ZYVHlwZS5CT09MMzogcmV0dXJuIGdsLkJPT0xfVkVDMztcclxuICAgICAgICBjYXNlIEdGWFR5cGUuQk9PTDQ6IHJldHVybiBnbC5CT09MX1ZFQzQ7XHJcbiAgICAgICAgY2FzZSBHRlhUeXBlLklOVDogcmV0dXJuIGdsLklOVDtcclxuICAgICAgICBjYXNlIEdGWFR5cGUuSU5UMjogcmV0dXJuIGdsLklOVF9WRUMyO1xyXG4gICAgICAgIGNhc2UgR0ZYVHlwZS5JTlQzOiByZXR1cm4gZ2wuSU5UX1ZFQzM7XHJcbiAgICAgICAgY2FzZSBHRlhUeXBlLklOVDQ6IHJldHVybiBnbC5JTlRfVkVDNDtcclxuICAgICAgICBjYXNlIEdGWFR5cGUuVUlOVDogcmV0dXJuIGdsLlVOU0lHTkVEX0lOVDtcclxuICAgICAgICBjYXNlIEdGWFR5cGUuRkxPQVQ6IHJldHVybiBnbC5GTE9BVDtcclxuICAgICAgICBjYXNlIEdGWFR5cGUuRkxPQVQyOiByZXR1cm4gZ2wuRkxPQVRfVkVDMjtcclxuICAgICAgICBjYXNlIEdGWFR5cGUuRkxPQVQzOiByZXR1cm4gZ2wuRkxPQVRfVkVDMztcclxuICAgICAgICBjYXNlIEdGWFR5cGUuRkxPQVQ0OiByZXR1cm4gZ2wuRkxPQVRfVkVDNDtcclxuICAgICAgICBjYXNlIEdGWFR5cGUuTUFUMjogcmV0dXJuIGdsLkZMT0FUX01BVDI7XHJcbiAgICAgICAgY2FzZSBHRlhUeXBlLk1BVDJYMzogcmV0dXJuIGdsLkZMT0FUX01BVDJ4MztcclxuICAgICAgICBjYXNlIEdGWFR5cGUuTUFUMlg0OiByZXR1cm4gZ2wuRkxPQVRfTUFUMng0O1xyXG4gICAgICAgIGNhc2UgR0ZYVHlwZS5NQVQzWDI6IHJldHVybiBnbC5GTE9BVF9NQVQzeDI7XHJcbiAgICAgICAgY2FzZSBHRlhUeXBlLk1BVDM6IHJldHVybiBnbC5GTE9BVF9NQVQzO1xyXG4gICAgICAgIGNhc2UgR0ZYVHlwZS5NQVQzWDQ6IHJldHVybiBnbC5GTE9BVF9NQVQzeDQ7XHJcbiAgICAgICAgY2FzZSBHRlhUeXBlLk1BVDRYMjogcmV0dXJuIGdsLkZMT0FUX01BVDR4MjtcclxuICAgICAgICBjYXNlIEdGWFR5cGUuTUFUNFgzOiByZXR1cm4gZ2wuRkxPQVRfTUFUNHgzO1xyXG4gICAgICAgIGNhc2UgR0ZYVHlwZS5NQVQ0OiByZXR1cm4gZ2wuRkxPQVRfTUFUNDtcclxuICAgICAgICBjYXNlIEdGWFR5cGUuU0FNUExFUjJEOiByZXR1cm4gZ2wuU0FNUExFUl8yRDtcclxuICAgICAgICBjYXNlIEdGWFR5cGUuU0FNUExFUjJEX0FSUkFZOiByZXR1cm4gZ2wuU0FNUExFUl8yRF9BUlJBWTtcclxuICAgICAgICBjYXNlIEdGWFR5cGUuU0FNUExFUjNEOiByZXR1cm4gZ2wuU0FNUExFUl8zRDtcclxuICAgICAgICBjYXNlIEdGWFR5cGUuU0FNUExFUl9DVUJFOiByZXR1cm4gZ2wuU0FNUExFUl9DVUJFO1xyXG4gICAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignVW5zdXBwb3J0ZWQgR0xUeXBlLCBjb252ZXJ0IHRvIEdMIHR5cGUgZmFpbGVkLicpO1xyXG4gICAgICAgICAgICByZXR1cm4gR0ZYVHlwZS5VTktOT1dOO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gV2ViR0xUeXBlVG9HRlhUeXBlIChnbFR5cGU6IEdMZW51bSwgZ2w6IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQpOiBHRlhUeXBlIHtcclxuICAgIHN3aXRjaCAoZ2xUeXBlKSB7XHJcbiAgICAgICAgY2FzZSBnbC5CT09MOiByZXR1cm4gR0ZYVHlwZS5CT09MO1xyXG4gICAgICAgIGNhc2UgZ2wuQk9PTF9WRUMyOiByZXR1cm4gR0ZYVHlwZS5CT09MMjtcclxuICAgICAgICBjYXNlIGdsLkJPT0xfVkVDMzogcmV0dXJuIEdGWFR5cGUuQk9PTDM7XHJcbiAgICAgICAgY2FzZSBnbC5CT09MX1ZFQzQ6IHJldHVybiBHRlhUeXBlLkJPT0w0O1xyXG4gICAgICAgIGNhc2UgZ2wuSU5UOiByZXR1cm4gR0ZYVHlwZS5JTlQ7XHJcbiAgICAgICAgY2FzZSBnbC5JTlRfVkVDMjogcmV0dXJuIEdGWFR5cGUuSU5UMjtcclxuICAgICAgICBjYXNlIGdsLklOVF9WRUMzOiByZXR1cm4gR0ZYVHlwZS5JTlQzO1xyXG4gICAgICAgIGNhc2UgZ2wuSU5UX1ZFQzQ6IHJldHVybiBHRlhUeXBlLklOVDQ7XHJcbiAgICAgICAgY2FzZSBnbC5VTlNJR05FRF9JTlQ6IHJldHVybiBHRlhUeXBlLlVJTlQ7XHJcbiAgICAgICAgY2FzZSBnbC5VTlNJR05FRF9JTlRfVkVDMjogcmV0dXJuIEdGWFR5cGUuVUlOVDI7XHJcbiAgICAgICAgY2FzZSBnbC5VTlNJR05FRF9JTlRfVkVDMzogcmV0dXJuIEdGWFR5cGUuVUlOVDM7XHJcbiAgICAgICAgY2FzZSBnbC5VTlNJR05FRF9JTlRfVkVDNDogcmV0dXJuIEdGWFR5cGUuVUlOVDQ7XHJcbiAgICAgICAgY2FzZSBnbC5VTlNJR05FRF9JTlQ6IHJldHVybiBHRlhUeXBlLlVJTlQ7XHJcbiAgICAgICAgY2FzZSBnbC5GTE9BVDogcmV0dXJuIEdGWFR5cGUuRkxPQVQ7XHJcbiAgICAgICAgY2FzZSBnbC5GTE9BVF9WRUMyOiByZXR1cm4gR0ZYVHlwZS5GTE9BVDI7XHJcbiAgICAgICAgY2FzZSBnbC5GTE9BVF9WRUMzOiByZXR1cm4gR0ZYVHlwZS5GTE9BVDM7XHJcbiAgICAgICAgY2FzZSBnbC5GTE9BVF9WRUM0OiByZXR1cm4gR0ZYVHlwZS5GTE9BVDQ7XHJcbiAgICAgICAgY2FzZSBnbC5GTE9BVF9NQVQyOiByZXR1cm4gR0ZYVHlwZS5NQVQyO1xyXG4gICAgICAgIGNhc2UgZ2wuRkxPQVRfTUFUMngzOiByZXR1cm4gR0ZYVHlwZS5NQVQyWDM7XHJcbiAgICAgICAgY2FzZSBnbC5GTE9BVF9NQVQyeDQ6IHJldHVybiBHRlhUeXBlLk1BVDJYNDtcclxuICAgICAgICBjYXNlIGdsLkZMT0FUX01BVDN4MjogcmV0dXJuIEdGWFR5cGUuTUFUM1gyO1xyXG4gICAgICAgIGNhc2UgZ2wuRkxPQVRfTUFUMzogcmV0dXJuIEdGWFR5cGUuTUFUMztcclxuICAgICAgICBjYXNlIGdsLkZMT0FUX01BVDN4NDogcmV0dXJuIEdGWFR5cGUuTUFUM1g0O1xyXG4gICAgICAgIGNhc2UgZ2wuRkxPQVRfTUFUNHgyOiByZXR1cm4gR0ZYVHlwZS5NQVQ0WDI7XHJcbiAgICAgICAgY2FzZSBnbC5GTE9BVF9NQVQ0eDM6IHJldHVybiBHRlhUeXBlLk1BVDRYMztcclxuICAgICAgICBjYXNlIGdsLkZMT0FUX01BVDQ6IHJldHVybiBHRlhUeXBlLk1BVDQ7XHJcbiAgICAgICAgY2FzZSBnbC5TQU1QTEVSXzJEOiByZXR1cm4gR0ZYVHlwZS5TQU1QTEVSMkQ7XHJcbiAgICAgICAgY2FzZSBnbC5TQU1QTEVSXzJEX0FSUkFZOiByZXR1cm4gR0ZYVHlwZS5TQU1QTEVSMkRfQVJSQVk7XHJcbiAgICAgICAgY2FzZSBnbC5TQU1QTEVSXzNEOiByZXR1cm4gR0ZYVHlwZS5TQU1QTEVSM0Q7XHJcbiAgICAgICAgY2FzZSBnbC5TQU1QTEVSX0NVQkU6IHJldHVybiBHRlhUeXBlLlNBTVBMRVJfQ1VCRTtcclxuICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1Vuc3VwcG9ydGVkIEdMVHlwZSwgY29udmVydCB0byBHRlhUeXBlIGZhaWxlZC4nKTtcclxuICAgICAgICAgICAgcmV0dXJuIEdGWFR5cGUuVU5LTk9XTjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIFdlYkdMR2V0VHlwZVNpemUgKGdsVHlwZTogR0xlbnVtLCBnbDogV2ViR0wyUmVuZGVyaW5nQ29udGV4dCk6IEdGWFR5cGUge1xyXG4gICAgc3dpdGNoIChnbFR5cGUpIHtcclxuICAgICAgICBjYXNlIGdsLkJPT0w6IHJldHVybiA0O1xyXG4gICAgICAgIGNhc2UgZ2wuQk9PTF9WRUMyOiByZXR1cm4gODtcclxuICAgICAgICBjYXNlIGdsLkJPT0xfVkVDMzogcmV0dXJuIDEyO1xyXG4gICAgICAgIGNhc2UgZ2wuQk9PTF9WRUM0OiByZXR1cm4gMTY7XHJcbiAgICAgICAgY2FzZSBnbC5JTlQ6IHJldHVybiA0O1xyXG4gICAgICAgIGNhc2UgZ2wuSU5UX1ZFQzI6IHJldHVybiA4O1xyXG4gICAgICAgIGNhc2UgZ2wuSU5UX1ZFQzM6IHJldHVybiAxMjtcclxuICAgICAgICBjYXNlIGdsLklOVF9WRUM0OiByZXR1cm4gMTY7XHJcbiAgICAgICAgY2FzZSBnbC5VTlNJR05FRF9JTlQ6IHJldHVybiA0O1xyXG4gICAgICAgIGNhc2UgZ2wuVU5TSUdORURfSU5UX1ZFQzI6IHJldHVybiA4O1xyXG4gICAgICAgIGNhc2UgZ2wuVU5TSUdORURfSU5UX1ZFQzM6IHJldHVybiAxMjtcclxuICAgICAgICBjYXNlIGdsLlVOU0lHTkVEX0lOVF9WRUM0OiByZXR1cm4gMTY7XHJcbiAgICAgICAgY2FzZSBnbC5GTE9BVDogcmV0dXJuIDQ7XHJcbiAgICAgICAgY2FzZSBnbC5GTE9BVF9WRUMyOiByZXR1cm4gODtcclxuICAgICAgICBjYXNlIGdsLkZMT0FUX1ZFQzM6IHJldHVybiAxMjtcclxuICAgICAgICBjYXNlIGdsLkZMT0FUX1ZFQzQ6IHJldHVybiAxNjtcclxuICAgICAgICBjYXNlIGdsLkZMT0FUX01BVDI6IHJldHVybiAxNjtcclxuICAgICAgICBjYXNlIGdsLkZMT0FUX01BVDJ4MzogcmV0dXJuIDI0O1xyXG4gICAgICAgIGNhc2UgZ2wuRkxPQVRfTUFUMng0OiByZXR1cm4gMzI7XHJcbiAgICAgICAgY2FzZSBnbC5GTE9BVF9NQVQzeDI6IHJldHVybiAyNDtcclxuICAgICAgICBjYXNlIGdsLkZMT0FUX01BVDM6IHJldHVybiAzNjtcclxuICAgICAgICBjYXNlIGdsLkZMT0FUX01BVDN4NDogcmV0dXJuIDQ4O1xyXG4gICAgICAgIGNhc2UgZ2wuRkxPQVRfTUFUNHgyOiByZXR1cm4gMzI7XHJcbiAgICAgICAgY2FzZSBnbC5GTE9BVF9NQVQ0eDM6IHJldHVybiA0ODtcclxuICAgICAgICBjYXNlIGdsLkZMT0FUX01BVDQ6IHJldHVybiA2NDtcclxuICAgICAgICBjYXNlIGdsLlNBTVBMRVJfMkQ6IHJldHVybiA0O1xyXG4gICAgICAgIGNhc2UgZ2wuU0FNUExFUl8yRF9BUlJBWTogcmV0dXJuIDQ7XHJcbiAgICAgICAgY2FzZSBnbC5TQU1QTEVSXzJEX0FSUkFZX1NIQURPVzogcmV0dXJuIDQ7XHJcbiAgICAgICAgY2FzZSBnbC5TQU1QTEVSXzNEOiByZXR1cm4gNDtcclxuICAgICAgICBjYXNlIGdsLlNBTVBMRVJfQ1VCRTogcmV0dXJuIDQ7XHJcbiAgICAgICAgY2FzZSBnbC5JTlRfU0FNUExFUl8yRDogcmV0dXJuIDQ7XHJcbiAgICAgICAgY2FzZSBnbC5JTlRfU0FNUExFUl8yRF9BUlJBWTogcmV0dXJuIDQ7XHJcbiAgICAgICAgY2FzZSBnbC5JTlRfU0FNUExFUl8zRDogcmV0dXJuIDQ7XHJcbiAgICAgICAgY2FzZSBnbC5JTlRfU0FNUExFUl9DVUJFOiByZXR1cm4gNDtcclxuICAgICAgICBjYXNlIGdsLlVOU0lHTkVEX0lOVF9TQU1QTEVSXzJEOiByZXR1cm4gNDtcclxuICAgICAgICBjYXNlIGdsLlVOU0lHTkVEX0lOVF9TQU1QTEVSXzJEX0FSUkFZOiByZXR1cm4gNDtcclxuICAgICAgICBjYXNlIGdsLlVOU0lHTkVEX0lOVF9TQU1QTEVSXzNEOiByZXR1cm4gNDtcclxuICAgICAgICBjYXNlIGdsLlVOU0lHTkVEX0lOVF9TQU1QTEVSX0NVQkU6IHJldHVybiA0O1xyXG4gICAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignVW5zdXBwb3J0ZWQgR0xUeXBlLCBnZXQgdHlwZSBmYWlsZWQuJyk7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gV2ViR0xHZXRDb21wb25lbnRDb3VudCAoZ2xUeXBlOiBHTGVudW0sIGdsOiBXZWJHTDJSZW5kZXJpbmdDb250ZXh0KTogR0ZYVHlwZSB7XHJcbiAgICBzd2l0Y2ggKGdsVHlwZSkge1xyXG4gICAgICAgIGNhc2UgZ2wuRkxPQVRfTUFUMjogcmV0dXJuIDI7XHJcbiAgICAgICAgY2FzZSBnbC5GTE9BVF9NQVQyeDM6IHJldHVybiAyO1xyXG4gICAgICAgIGNhc2UgZ2wuRkxPQVRfTUFUMng0OiByZXR1cm4gMjtcclxuICAgICAgICBjYXNlIGdsLkZMT0FUX01BVDN4MjogcmV0dXJuIDM7XHJcbiAgICAgICAgY2FzZSBnbC5GTE9BVF9NQVQzOiByZXR1cm4gMztcclxuICAgICAgICBjYXNlIGdsLkZMT0FUX01BVDN4NDogcmV0dXJuIDM7XHJcbiAgICAgICAgY2FzZSBnbC5GTE9BVF9NQVQ0eDI6IHJldHVybiA0O1xyXG4gICAgICAgIGNhc2UgZ2wuRkxPQVRfTUFUNHgzOiByZXR1cm4gNDtcclxuICAgICAgICBjYXNlIGdsLkZMT0FUX01BVDQ6IHJldHVybiA0O1xyXG4gICAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5jb25zdCBXZWJHTENtcEZ1bmNzOiBHTGVudW1bXSA9IFtcclxuICAgIDB4MDIwMCwgLy8gV2ViR0xSZW5kZXJpbmdDb250ZXh0Lk5FVkVSLFxyXG4gICAgMHgwMjAxLCAvLyBXZWJHTFJlbmRlcmluZ0NvbnRleHQuTEVTUyxcclxuICAgIDB4MDIwMiwgLy8gV2ViR0xSZW5kZXJpbmdDb250ZXh0LkVRVUFMLFxyXG4gICAgMHgwMjAzLCAvLyBXZWJHTFJlbmRlcmluZ0NvbnRleHQuTEVRVUFMLFxyXG4gICAgMHgwMjA0LCAvLyBXZWJHTFJlbmRlcmluZ0NvbnRleHQuR1JFQVRFUixcclxuICAgIDB4MDIwNSwgLy8gV2ViR0xSZW5kZXJpbmdDb250ZXh0Lk5PVEVRVUFMLFxyXG4gICAgMHgwMjA2LCAvLyBXZWJHTFJlbmRlcmluZ0NvbnRleHQuR0VRVUFMLFxyXG4gICAgMHgwMjA3LCAvLyBXZWJHTFJlbmRlcmluZ0NvbnRleHQuQUxXQVlTLFxyXG5dO1xyXG5cclxuY29uc3QgV2ViR0xTdGVuY2lsT3BzOiBHTGVudW1bXSA9IFtcclxuICAgIDB4MDAwMCwgLy8gV2ViR0xSZW5kZXJpbmdDb250ZXh0LlpFUk8sXHJcbiAgICAweDFFMDAsIC8vIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5LRUVQLFxyXG4gICAgMHgxRTAxLCAvLyBXZWJHTFJlbmRlcmluZ0NvbnRleHQuUkVQTEFDRSxcclxuICAgIDB4MUUwMiwgLy8gV2ViR0xSZW5kZXJpbmdDb250ZXh0LklOQ1IsXHJcbiAgICAweDFFMDMsIC8vIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5ERUNSLFxyXG4gICAgMHgxNTBBLCAvLyBXZWJHTFJlbmRlcmluZ0NvbnRleHQuSU5WRVJULFxyXG4gICAgMHg4NTA3LCAvLyBXZWJHTFJlbmRlcmluZ0NvbnRleHQuSU5DUl9XUkFQLFxyXG4gICAgMHg4NTA4LCAvLyBXZWJHTFJlbmRlcmluZ0NvbnRleHQuREVDUl9XUkFQLFxyXG5dO1xyXG5cclxuY29uc3QgV2ViR0xCbGVuZE9wczogR0xlbnVtW10gPSBbXHJcbiAgICAweDgwMDYsIC8vIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5GVU5DX0FERCxcclxuICAgIDB4ODAwQSwgLy8gV2ViR0xSZW5kZXJpbmdDb250ZXh0LkZVTkNfU1VCVFJBQ1QsXHJcbiAgICAweDgwMEIsIC8vIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5GVU5DX1JFVkVSU0VfU1VCVFJBQ1QsXHJcbiAgICAweDgwMDYsIC8vIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5GVU5DX0FERCxcclxuICAgIDB4ODAwNiwgLy8gV2ViR0xSZW5kZXJpbmdDb250ZXh0LkZVTkNfQURELFxyXG5dO1xyXG5cclxuY29uc3QgV2ViR0xCbGVuZEZhY3RvcnM6IEdMZW51bVtdID0gW1xyXG4gICAgMHgwMDAwLCAvLyBXZWJHTFJlbmRlcmluZ0NvbnRleHQuWkVSTyxcclxuICAgIDB4MDAwMSwgLy8gV2ViR0xSZW5kZXJpbmdDb250ZXh0Lk9ORSxcclxuICAgIDB4MDMwMiwgLy8gV2ViR0xSZW5kZXJpbmdDb250ZXh0LlNSQ19BTFBIQSxcclxuICAgIDB4MDMwNCwgLy8gV2ViR0xSZW5kZXJpbmdDb250ZXh0LkRTVF9BTFBIQSxcclxuICAgIDB4MDMwMywgLy8gV2ViR0xSZW5kZXJpbmdDb250ZXh0Lk9ORV9NSU5VU19TUkNfQUxQSEEsXHJcbiAgICAweDAzMDUsIC8vIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5PTkVfTUlOVVNfRFNUX0FMUEhBLFxyXG4gICAgMHgwMzAwLCAvLyBXZWJHTFJlbmRlcmluZ0NvbnRleHQuU1JDX0NPTE9SLFxyXG4gICAgMHgwMzA2LCAvLyBXZWJHTFJlbmRlcmluZ0NvbnRleHQuRFNUX0NPTE9SLFxyXG4gICAgMHgwMzAxLCAvLyBXZWJHTFJlbmRlcmluZ0NvbnRleHQuT05FX01JTlVTX1NSQ19DT0xPUixcclxuICAgIDB4MDMwNywgLy8gV2ViR0xSZW5kZXJpbmdDb250ZXh0Lk9ORV9NSU5VU19EU1RfQ09MT1IsXHJcbiAgICAweDAzMDgsIC8vIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5TUkNfQUxQSEFfU0FUVVJBVEUsXHJcbiAgICAweDgwMDEsIC8vIFdlYkdMUmVuZGVyaW5nQ29udGV4dC5DT05TVEFOVF9DT0xPUixcclxuICAgIDB4ODAwMiwgLy8gV2ViR0xSZW5kZXJpbmdDb250ZXh0Lk9ORV9NSU5VU19DT05TVEFOVF9DT0xPUixcclxuICAgIDB4ODAwMywgLy8gV2ViR0xSZW5kZXJpbmdDb250ZXh0LkNPTlNUQU5UX0FMUEhBLFxyXG4gICAgMHg4MDA0LCAvLyBXZWJHTFJlbmRlcmluZ0NvbnRleHQuT05FX01JTlVTX0NPTlNUQU5UX0FMUEhBLFxyXG5dO1xyXG5cclxuZXhwb3J0IGVudW0gV2ViR0wyQ21kIHtcclxuICAgIEJFR0lOX1JFTkRFUl9QQVNTLFxyXG4gICAgRU5EX1JFTkRFUl9QQVNTLFxyXG4gICAgQklORF9TVEFURVMsXHJcbiAgICBEUkFXLFxyXG4gICAgVVBEQVRFX0JVRkZFUixcclxuICAgIENPUFlfQlVGRkVSX1RPX1RFWFRVUkUsXHJcbiAgICBDT1VOVCxcclxufVxyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFdlYkdMMkNtZE9iamVjdCB7XHJcbiAgICBwdWJsaWMgY21kVHlwZTogV2ViR0wyQ21kO1xyXG4gICAgcHVibGljIHJlZkNvdW50OiBudW1iZXIgPSAwO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yICh0eXBlOiBXZWJHTDJDbWQpIHtcclxuICAgICAgICB0aGlzLmNtZFR5cGUgPSB0eXBlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhYnN0cmFjdCBjbGVhciAoKTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFdlYkdMMkNtZEJlZ2luUmVuZGVyUGFzcyBleHRlbmRzIFdlYkdMMkNtZE9iamVjdCB7XHJcblxyXG4gICAgcHVibGljIGdwdUZyYW1lYnVmZmVyOiBXZWJHTDJHUFVGcmFtZWJ1ZmZlciB8IG51bGwgPSBudWxsO1xyXG4gICAgcHVibGljIHJlbmRlckFyZWE6IElHRlhSZWN0ID0geyB4OiAwLCB5OiAwLCB3aWR0aDogMCwgaGVpZ2h0OiAwIH07XHJcbiAgICBwdWJsaWMgY2xlYXJGbGFnOiBHRlhDbGVhckZsYWcgPSBHRlhDbGVhckZsYWcuTk9ORTtcclxuICAgIHB1YmxpYyBjbGVhckNvbG9yczogSUdGWENvbG9yW10gPSBbXTtcclxuICAgIHB1YmxpYyBjbGVhckRlcHRoOiBudW1iZXIgPSAxLjA7XHJcbiAgICBwdWJsaWMgY2xlYXJTdGVuY2lsOiBudW1iZXIgPSAwO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgICBzdXBlcihXZWJHTDJDbWQuQkVHSU5fUkVOREVSX1BBU1MpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGVhciAoKSB7XHJcbiAgICAgICAgdGhpcy5ncHVGcmFtZWJ1ZmZlciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jbGVhckNvbG9ycy5sZW5ndGggPSAwO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgV2ViR0wyQ21kQmluZFN0YXRlcyBleHRlbmRzIFdlYkdMMkNtZE9iamVjdCB7XHJcblxyXG4gICAgcHVibGljIGdwdVBpcGVsaW5lU3RhdGU6IFdlYkdMMkdQVVBpcGVsaW5lU3RhdGUgfCBudWxsID0gbnVsbDtcclxuICAgIHB1YmxpYyBncHVCaW5kaW5nTGF5b3V0OiBXZWJHTDJHUFVCaW5kaW5nTGF5b3V0IHwgbnVsbCA9IG51bGw7XHJcbiAgICBwdWJsaWMgZ3B1SW5wdXRBc3NlbWJsZXI6IElXZWJHTDJHUFVJbnB1dEFzc2VtYmxlciB8IG51bGwgPSBudWxsO1xyXG4gICAgcHVibGljIHZpZXdwb3J0OiBJR0ZYVmlld3BvcnQgfCBudWxsID0gbnVsbDtcclxuICAgIHB1YmxpYyBzY2lzc29yOiBJR0ZYUmVjdCB8IG51bGwgPSBudWxsO1xyXG4gICAgcHVibGljIGxpbmVXaWR0aDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XHJcbiAgICBwdWJsaWMgZGVwdGhCaWFzOiBJV2ViR0wyRGVwdGhCaWFzIHwgbnVsbCA9IG51bGw7XHJcbiAgICBwdWJsaWMgYmxlbmRDb25zdGFudHM6IG51bWJlcltdIHwgbnVsbCA9IG51bGw7XHJcbiAgICBwdWJsaWMgZGVwdGhCb3VuZHM6IElXZWJHTDJEZXB0aEJvdW5kcyB8IG51bGwgPSBudWxsO1xyXG4gICAgcHVibGljIHN0ZW5jaWxXcml0ZU1hc2s6IElXZWJHTDJTdGVuY2lsV3JpdGVNYXNrIHwgbnVsbCA9IG51bGw7XHJcbiAgICBwdWJsaWMgc3RlbmNpbENvbXBhcmVNYXNrOiBJV2ViR0wyU3RlbmNpbENvbXBhcmVNYXNrIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgIHN1cGVyKFdlYkdMMkNtZC5CSU5EX1NUQVRFUyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsZWFyICgpIHtcclxuICAgICAgICB0aGlzLmdwdVBpcGVsaW5lU3RhdGUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZ3B1QmluZGluZ0xheW91dCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5ncHVJbnB1dEFzc2VtYmxlciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy52aWV3cG9ydCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zY2lzc29yID0gbnVsbDtcclxuICAgICAgICB0aGlzLmxpbmVXaWR0aCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5kZXB0aEJpYXMgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuYmxlbmRDb25zdGFudHMgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZGVwdGhCb3VuZHMgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuc3RlbmNpbFdyaXRlTWFzayA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zdGVuY2lsQ29tcGFyZU1hc2sgPSBudWxsO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgV2ViR0wyQ21kRHJhdyBleHRlbmRzIFdlYkdMMkNtZE9iamVjdCB7XHJcbiAgICBwdWJsaWMgZHJhd0luZm86IElHRlhEcmF3SW5mbyA9IHtcclxuICAgICAgICB2ZXJ0ZXhDb3VudDogMCxcclxuICAgICAgICBmaXJzdFZlcnRleDogMCxcclxuICAgICAgICBpbmRleENvdW50OiAwLFxyXG4gICAgICAgIGZpcnN0SW5kZXg6IDAsXHJcbiAgICAgICAgdmVydGV4T2Zmc2V0OiAwLFxyXG4gICAgICAgIGluc3RhbmNlQ291bnQ6IDAsXHJcbiAgICAgICAgZmlyc3RJbnN0YW5jZTogMCxcclxuICAgIH07XHJcblxyXG4gICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgIHN1cGVyKFdlYkdMMkNtZC5EUkFXKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xlYXIgKCkge1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgV2ViR0wyQ21kVXBkYXRlQnVmZmVyIGV4dGVuZHMgV2ViR0wyQ21kT2JqZWN0IHtcclxuXHJcbiAgICBwdWJsaWMgZ3B1QnVmZmVyOiBXZWJHTDJHUFVCdWZmZXIgfCBudWxsID0gbnVsbDtcclxuICAgIHB1YmxpYyBidWZmZXI6IEdGWEJ1ZmZlclNvdXJjZSB8IG51bGwgPSBudWxsO1xyXG4gICAgcHVibGljIG9mZnNldDogbnVtYmVyID0gMDtcclxuICAgIHB1YmxpYyBzaXplOiBudW1iZXIgPSAwO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgICBzdXBlcihXZWJHTDJDbWQuVVBEQVRFX0JVRkZFUik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsZWFyICgpIHtcclxuICAgICAgICB0aGlzLmdwdUJ1ZmZlciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5idWZmZXIgPSBudWxsO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgV2ViR0wyR0ZYVGV4dHVyZVN1YnJlcyB7XHJcbiAgICBwdWJsaWMgYmFzZU1pcExldmVsOiBudW1iZXIgPSAwO1xyXG4gICAgcHVibGljIGxldmVsQ291bnQ6IG51bWJlciA9IDE7XHJcbiAgICBwdWJsaWMgYmFzZUFycmF5TGF5ZXI6IG51bWJlciA9IDA7XHJcbiAgICBwdWJsaWMgbGF5ZXJDb3VudDogbnVtYmVyID0gMTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFdlYkdMMkdGWEJ1ZmZlclRleHR1cmVDb3B5IHtcclxuICAgIHB1YmxpYyBidWZmT2Zmc2V0OiBudW1iZXIgPSAwO1xyXG4gICAgcHVibGljIGJ1ZmZTdHJpZGU6IG51bWJlciA9IDA7XHJcbiAgICBwdWJsaWMgYnVmZlRleEhlaWdodDogbnVtYmVyID0gMDtcclxuICAgIHB1YmxpYyB0ZXhPZmZzZXQ6IG51bWJlcltdID0gWzAsIDAsIDBdO1xyXG4gICAgcHVibGljIHRleEV4dGVudDogbnVtYmVyW10gPSBbMCwgMCwgMF07XHJcbiAgICBwdWJsaWMgdGV4U3VicmVzOiBXZWJHTDJHRlhUZXh0dXJlU3VicmVzID0gbmV3IFdlYkdMMkdGWFRleHR1cmVTdWJyZXMoKTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFdlYkdMMkNtZENvcHlCdWZmZXJUb1RleHR1cmUgZXh0ZW5kcyBXZWJHTDJDbWRPYmplY3Qge1xyXG5cclxuICAgIHB1YmxpYyBncHVCdWZmZXI6IFdlYkdMMkdQVUJ1ZmZlciB8IG51bGwgPSBudWxsO1xyXG4gICAgcHVibGljIGdwdVRleHR1cmU6IFdlYkdMMkdQVVRleHR1cmUgfCBudWxsID0gbnVsbDtcclxuICAgIHB1YmxpYyBkc3RMYXlvdXQ6IEdGWFRleHR1cmVMYXlvdXQgfCBudWxsID0gbnVsbDtcclxuICAgIHB1YmxpYyByZWdpb25zOiBHRlhCdWZmZXJUZXh0dXJlQ29weVtdID0gW107XHJcblxyXG4gICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgIHN1cGVyKFdlYkdMMkNtZC5DT1BZX0JVRkZFUl9UT19URVhUVVJFKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xlYXIgKCkge1xyXG4gICAgICAgIHRoaXMuZ3B1QnVmZmVyID0gbnVsbDtcclxuICAgICAgICB0aGlzLmdwdVRleHR1cmUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZHN0TGF5b3V0ID0gbnVsbDtcclxuICAgICAgICB0aGlzLnJlZ2lvbnMubGVuZ3RoID0gMDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFdlYkdMMkNtZFBhY2thZ2Uge1xyXG4gICAgcHVibGljIGNtZHM6IENhY2hlZEFycmF5PFdlYkdMMkNtZD4gPSBuZXcgQ2FjaGVkQXJyYXkoMSk7XHJcbiAgICBwdWJsaWMgYmVnaW5SZW5kZXJQYXNzQ21kczogQ2FjaGVkQXJyYXk8V2ViR0wyQ21kQmVnaW5SZW5kZXJQYXNzPiA9IG5ldyBDYWNoZWRBcnJheSgxKTtcclxuICAgIHB1YmxpYyBiaW5kU3RhdGVzQ21kczogQ2FjaGVkQXJyYXk8V2ViR0wyQ21kQmluZFN0YXRlcz4gPSBuZXcgQ2FjaGVkQXJyYXkoMSk7XHJcbiAgICBwdWJsaWMgZHJhd0NtZHM6IENhY2hlZEFycmF5PFdlYkdMMkNtZERyYXc+ID0gbmV3IENhY2hlZEFycmF5KDEpO1xyXG4gICAgcHVibGljIHVwZGF0ZUJ1ZmZlckNtZHM6IENhY2hlZEFycmF5PFdlYkdMMkNtZFVwZGF0ZUJ1ZmZlcj4gPSBuZXcgQ2FjaGVkQXJyYXkoMSk7XHJcbiAgICBwdWJsaWMgY29weUJ1ZmZlclRvVGV4dHVyZUNtZHM6IENhY2hlZEFycmF5PFdlYkdMMkNtZENvcHlCdWZmZXJUb1RleHR1cmU+ID0gbmV3IENhY2hlZEFycmF5KDEpO1xyXG5cclxuICAgIHB1YmxpYyBjbGVhckNtZHMgKGFsbG9jYXRvcjogV2ViR0wyR0ZYQ29tbWFuZEFsbG9jYXRvcikge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5iZWdpblJlbmRlclBhc3NDbWRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBhbGxvY2F0b3IuYmVnaW5SZW5kZXJQYXNzQ21kUG9vbC5mcmVlQ21kcyh0aGlzLmJlZ2luUmVuZGVyUGFzc0NtZHMpO1xyXG4gICAgICAgICAgICB0aGlzLmJlZ2luUmVuZGVyUGFzc0NtZHMuY2xlYXIoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmJpbmRTdGF0ZXNDbWRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBhbGxvY2F0b3IuYmluZFN0YXRlc0NtZFBvb2wuZnJlZUNtZHModGhpcy5iaW5kU3RhdGVzQ21kcyk7XHJcbiAgICAgICAgICAgIHRoaXMuYmluZFN0YXRlc0NtZHMuY2xlYXIoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmRyYXdDbWRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBhbGxvY2F0b3IuZHJhd0NtZFBvb2wuZnJlZUNtZHModGhpcy5kcmF3Q21kcyk7XHJcbiAgICAgICAgICAgIHRoaXMuZHJhd0NtZHMuY2xlYXIoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnVwZGF0ZUJ1ZmZlckNtZHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGFsbG9jYXRvci51cGRhdGVCdWZmZXJDbWRQb29sLmZyZWVDbWRzKHRoaXMudXBkYXRlQnVmZmVyQ21kcyk7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQnVmZmVyQ21kcy5jbGVhcigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY29weUJ1ZmZlclRvVGV4dHVyZUNtZHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGFsbG9jYXRvci5jb3B5QnVmZmVyVG9UZXh0dXJlQ21kUG9vbC5mcmVlQ21kcyh0aGlzLmNvcHlCdWZmZXJUb1RleHR1cmVDbWRzKTtcclxuICAgICAgICAgICAgdGhpcy5jb3B5QnVmZmVyVG9UZXh0dXJlQ21kcy5jbGVhcigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jbWRzLmNsZWFyKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBXZWJHTDJDbWRGdW5jQ3JlYXRlQnVmZmVyIChkZXZpY2U6IFdlYkdMMkdGWERldmljZSwgZ3B1QnVmZmVyOiBXZWJHTDJHUFVCdWZmZXIpIHtcclxuXHJcbiAgICBjb25zdCBnbCA9IGRldmljZS5nbDtcclxuICAgIGNvbnN0IGNhY2hlID0gZGV2aWNlLnN0YXRlQ2FjaGU7XHJcbiAgICBjb25zdCBnbFVzYWdlOiBHTGVudW0gPSBncHVCdWZmZXIubWVtVXNhZ2UgJiBHRlhNZW1vcnlVc2FnZUJpdC5IT1NUID8gZ2wuRFlOQU1JQ19EUkFXIDogZ2wuU1RBVElDX0RSQVc7XHJcblxyXG4gICAgaWYgKGdwdUJ1ZmZlci51c2FnZSAmIEdGWEJ1ZmZlclVzYWdlQml0LlZFUlRFWCkge1xyXG5cclxuICAgICAgICBncHVCdWZmZXIuZ2xUYXJnZXQgPSBnbC5BUlJBWV9CVUZGRVI7XHJcbiAgICAgICAgY29uc3QgZ2xCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcclxuXHJcbiAgICAgICAgaWYgKGdsQnVmZmVyKSB7XHJcbiAgICAgICAgICAgIGdwdUJ1ZmZlci5nbEJ1ZmZlciA9IGdsQnVmZmVyO1xyXG4gICAgICAgICAgICBpZiAoZ3B1QnVmZmVyLnNpemUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGV2aWNlLnVzZVZBTykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYWNoZS5nbFZBTykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbC5iaW5kVmVydGV4QXJyYXkobnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLmdsVkFPID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGRldmljZS5zdGF0ZUNhY2hlLmdsQXJyYXlCdWZmZXIgIT09IGdwdUJ1ZmZlci5nbEJ1ZmZlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBncHVCdWZmZXIuZ2xCdWZmZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRldmljZS5zdGF0ZUNhY2hlLmdsQXJyYXlCdWZmZXIgPSBncHVCdWZmZXIuZ2xCdWZmZXI7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIGdwdUJ1ZmZlci5zaXplLCBnbFVzYWdlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICBkZXZpY2Uuc3RhdGVDYWNoZS5nbEFycmF5QnVmZmVyID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoZ3B1QnVmZmVyLnVzYWdlICYgR0ZYQnVmZmVyVXNhZ2VCaXQuSU5ERVgpIHtcclxuXHJcbiAgICAgICAgZ3B1QnVmZmVyLmdsVGFyZ2V0ID0gZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVI7XHJcbiAgICAgICAgY29uc3QgZ2xCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcclxuICAgICAgICBpZiAoZ2xCdWZmZXIpIHtcclxuICAgICAgICAgICAgZ3B1QnVmZmVyLmdsQnVmZmVyID0gZ2xCdWZmZXI7XHJcbiAgICAgICAgICAgIGlmIChncHVCdWZmZXIuc2l6ZSA+IDApIHtcclxuICAgICAgICAgICAgICAgIGlmIChkZXZpY2UudXNlVkFPKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhY2hlLmdsVkFPKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLmJpbmRWZXJ0ZXhBcnJheShudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUuZ2xWQU8gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZGV2aWNlLnN0YXRlQ2FjaGUuZ2xFbGVtZW50QXJyYXlCdWZmZXIgIT09IGdwdUJ1ZmZlci5nbEJ1ZmZlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIGdwdUJ1ZmZlci5nbEJ1ZmZlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgZGV2aWNlLnN0YXRlQ2FjaGUuZ2xFbGVtZW50QXJyYXlCdWZmZXIgPSBncHVCdWZmZXIuZ2xCdWZmZXI7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgZ3B1QnVmZmVyLnNpemUsIGdsVXNhZ2UpO1xyXG5cclxuICAgICAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgZGV2aWNlLnN0YXRlQ2FjaGUuZ2xFbGVtZW50QXJyYXlCdWZmZXIgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIGlmIChncHVCdWZmZXIudXNhZ2UgJiBHRlhCdWZmZXJVc2FnZUJpdC5VTklGT1JNKSB7XHJcblxyXG4gICAgICAgIGdwdUJ1ZmZlci5nbFRhcmdldCA9IGdsLlVOSUZPUk1fQlVGRkVSO1xyXG4gICAgICAgIGNvbnN0IGdsQnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XHJcbiAgICAgICAgaWYgKGdsQnVmZmVyICYmIGdwdUJ1ZmZlci5zaXplID4gMCkge1xyXG4gICAgICAgICAgICBncHVCdWZmZXIuZ2xCdWZmZXIgPSBnbEJ1ZmZlcjtcclxuICAgICAgICAgICAgaWYgKGRldmljZS5zdGF0ZUNhY2hlLmdsVW5pZm9ybUJ1ZmZlciAhPT0gZ3B1QnVmZmVyLmdsQnVmZmVyKSB7XHJcbiAgICAgICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLlVOSUZPUk1fQlVGRkVSLCBncHVCdWZmZXIuZ2xCdWZmZXIpO1xyXG4gICAgICAgICAgICAgICAgZGV2aWNlLnN0YXRlQ2FjaGUuZ2xVbmlmb3JtQnVmZmVyID0gZ3B1QnVmZmVyLmdsQnVmZmVyO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnbC5idWZmZXJEYXRhKGdsLlVOSUZPUk1fQlVGRkVSLCBncHVCdWZmZXIuc2l6ZSwgZ2xVc2FnZSk7XHJcblxyXG4gICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLlVOSUZPUk1fQlVGRkVSLCBudWxsKTtcclxuICAgICAgICAgICAgZGV2aWNlLnN0YXRlQ2FjaGUuZ2xVbmlmb3JtQnVmZmVyID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKGdwdUJ1ZmZlci51c2FnZSAmIEdGWEJ1ZmZlclVzYWdlQml0LklORElSRUNUKSB7XHJcbiAgICAgICAgZ3B1QnVmZmVyLmdsVGFyZ2V0ID0gZ2wuTk9ORTtcclxuICAgIH0gZWxzZSBpZiAoZ3B1QnVmZmVyLnVzYWdlICYgR0ZYQnVmZmVyVXNhZ2VCaXQuVFJBTlNGRVJfRFNUKSB7XHJcbiAgICAgICAgZ3B1QnVmZmVyLmdsVGFyZ2V0ID0gZ2wuTk9ORTtcclxuICAgIH0gZWxzZSBpZiAoZ3B1QnVmZmVyLnVzYWdlICYgR0ZYQnVmZmVyVXNhZ2VCaXQuVFJBTlNGRVJfU1JDKSB7XHJcbiAgICAgICAgZ3B1QnVmZmVyLmdsVGFyZ2V0ID0gZ2wuTk9ORTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignVW5zdXBwb3J0ZWQgR0ZYQnVmZmVyVHlwZSwgY3JlYXRlIGJ1ZmZlciBmYWlsZWQuJyk7XHJcbiAgICAgICAgZ3B1QnVmZmVyLmdsVGFyZ2V0ID0gZ2wuTk9ORTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFdlYkdMMkNtZEZ1bmNEZXN0cm95QnVmZmVyIChkZXZpY2U6IFdlYkdMMkdGWERldmljZSwgZ3B1QnVmZmVyOiBXZWJHTDJHUFVCdWZmZXIpIHtcclxuICAgIGNvbnN0IGdsID0gZGV2aWNlLmdsO1xyXG4gICAgaWYgKGdwdUJ1ZmZlci5nbEJ1ZmZlcikge1xyXG4gICAgICAgIC8vIEZpcmVmb3ggNzUrIGltcGxpY2l0bHkgdW5iaW5kIHdoYXRldmVyIGJ1ZmZlciB0aGVyZSB3YXMgb24gdGhlIHNsb3Qgc29tZXRpbWVzXHJcbiAgICAgICAgLy8gY2FuIGJlIHJlcHJvZHVjZWQgaW4gdGhlIHN0YXRpYyBiYXRjaGluZyBzY2VuZSBhdCBodHRwczovL2dpdGh1Yi5jb20vY29jb3MtY3JlYXRvci90ZXN0LWNhc2VzLTNkXHJcbiAgICAgICAgc3dpdGNoIChncHVCdWZmZXIuZ2xUYXJnZXQpIHtcclxuICAgICAgICAgICAgY2FzZSBnbC5BUlJBWV9CVUZGRVI6XHJcbiAgICAgICAgICAgICAgICBpZiAoZGV2aWNlLnVzZVZBTyAmJiBkZXZpY2Uuc3RhdGVDYWNoZS5nbFZBTykge1xyXG4gICAgICAgICAgICAgICAgICAgIGdsLmJpbmRWZXJ0ZXhBcnJheShudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICBkZXZpY2Uuc3RhdGVDYWNoZS5nbFZBTyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICBkZXZpY2Uuc3RhdGVDYWNoZS5nbEFycmF5QnVmZmVyID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSOlxyXG4gICAgICAgICAgICAgICAgaWYgKGRldmljZS51c2VWQU8gJiYgZGV2aWNlLnN0YXRlQ2FjaGUuZ2xWQU8pIHtcclxuICAgICAgICAgICAgICAgICAgICBnbC5iaW5kVmVydGV4QXJyYXkobnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGV2aWNlLnN0YXRlQ2FjaGUuZ2xWQU8gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICBkZXZpY2Uuc3RhdGVDYWNoZS5nbEVsZW1lbnRBcnJheUJ1ZmZlciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBnbC5VTklGT1JNX0JVRkZFUjpcclxuICAgICAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuVU5JRk9STV9CVUZGRVIsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgZGV2aWNlLnN0YXRlQ2FjaGUuZ2xVbmlmb3JtQnVmZmVyID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2wuZGVsZXRlQnVmZmVyKGdwdUJ1ZmZlci5nbEJ1ZmZlcik7XHJcbiAgICAgICAgZ3B1QnVmZmVyLmdsQnVmZmVyID0gbnVsbDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFdlYkdMMkNtZEZ1bmNSZXNpemVCdWZmZXIgKGRldmljZTogV2ViR0wyR0ZYRGV2aWNlLCBncHVCdWZmZXI6IFdlYkdMMkdQVUJ1ZmZlcikge1xyXG5cclxuICAgIGNvbnN0IGdsID0gZGV2aWNlLmdsO1xyXG4gICAgY29uc3QgY2FjaGUgPSBkZXZpY2Uuc3RhdGVDYWNoZTtcclxuICAgIGNvbnN0IGdsVXNhZ2U6IEdMZW51bSA9IGdwdUJ1ZmZlci5tZW1Vc2FnZSAmIEdGWE1lbW9yeVVzYWdlQml0LkhPU1QgPyBnbC5EWU5BTUlDX0RSQVcgOiBnbC5TVEFUSUNfRFJBVztcclxuXHJcbiAgICBpZiAoZ3B1QnVmZmVyLnVzYWdlICYgR0ZYQnVmZmVyVXNhZ2VCaXQuVkVSVEVYKSB7XHJcbiAgICAgICAgaWYgKGRldmljZS51c2VWQU8pIHtcclxuICAgICAgICAgICAgaWYgKGNhY2hlLmdsVkFPKSB7XHJcbiAgICAgICAgICAgICAgICBnbC5iaW5kVmVydGV4QXJyYXkobnVsbCk7XHJcbiAgICAgICAgICAgICAgICBjYWNoZS5nbFZBTyA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjYWNoZS5nbEFycmF5QnVmZmVyICE9PSBncHVCdWZmZXIuZ2xCdWZmZXIpIHtcclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIGdwdUJ1ZmZlci5nbEJ1ZmZlcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZ3B1QnVmZmVyLmJ1ZmZlcikge1xyXG4gICAgICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgZ3B1QnVmZmVyLmJ1ZmZlciwgZ2xVc2FnZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIGdwdUJ1ZmZlci5zaXplLCBnbFVzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIG51bGwpO1xyXG4gICAgICAgIGNhY2hlLmdsQXJyYXlCdWZmZXIgPSBudWxsO1xyXG4gICAgfSBlbHNlIGlmIChncHVCdWZmZXIudXNhZ2UgJiBHRlhCdWZmZXJVc2FnZUJpdC5JTkRFWCkge1xyXG4gICAgICAgIGlmIChkZXZpY2UudXNlVkFPKSB7XHJcbiAgICAgICAgICAgIGlmIChjYWNoZS5nbFZBTykge1xyXG4gICAgICAgICAgICAgICAgZ2wuYmluZFZlcnRleEFycmF5KG51bGwpO1xyXG4gICAgICAgICAgICAgICAgY2FjaGUuZ2xWQU8gPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZGV2aWNlLnN0YXRlQ2FjaGUuZ2xFbGVtZW50QXJyYXlCdWZmZXIgIT09IGdwdUJ1ZmZlci5nbEJ1ZmZlcikge1xyXG4gICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBncHVCdWZmZXIuZ2xCdWZmZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGdwdUJ1ZmZlci5idWZmZXIpIHtcclxuICAgICAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgZ3B1QnVmZmVyLmJ1ZmZlciwgZ2xVc2FnZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgZ3B1QnVmZmVyLnNpemUsIGdsVXNhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBudWxsKTtcclxuICAgICAgICBkZXZpY2Uuc3RhdGVDYWNoZS5nbEVsZW1lbnRBcnJheUJ1ZmZlciA9IG51bGw7XHJcbiAgICB9IGVsc2UgaWYgKGdwdUJ1ZmZlci51c2FnZSAmIEdGWEJ1ZmZlclVzYWdlQml0LlVOSUZPUk0pIHtcclxuICAgICAgICBpZiAoZGV2aWNlLnN0YXRlQ2FjaGUuZ2xVbmlmb3JtQnVmZmVyICE9PSBncHVCdWZmZXIuZ2xCdWZmZXIpIHtcclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5VTklGT1JNX0JVRkZFUiwgZ3B1QnVmZmVyLmdsQnVmZmVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuVU5JRk9STV9CVUZGRVIsIGdwdUJ1ZmZlci5zaXplLCBnbFVzYWdlKTtcclxuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLlVOSUZPUk1fQlVGRkVSLCBudWxsKTtcclxuICAgICAgICBkZXZpY2Uuc3RhdGVDYWNoZS5nbFVuaWZvcm1CdWZmZXIgPSBudWxsO1xyXG4gICAgfSBlbHNlIGlmICgoZ3B1QnVmZmVyLnVzYWdlICYgR0ZYQnVmZmVyVXNhZ2VCaXQuSU5ESVJFQ1QpIHx8XHJcbiAgICAgICAgICAgIChncHVCdWZmZXIudXNhZ2UgJiBHRlhCdWZmZXJVc2FnZUJpdC5UUkFOU0ZFUl9EU1QpIHx8XHJcbiAgICAgICAgICAgIChncHVCdWZmZXIudXNhZ2UgJiBHRlhCdWZmZXJVc2FnZUJpdC5UUkFOU0ZFUl9TUkMpKSB7XHJcbiAgICAgICAgZ3B1QnVmZmVyLmdsVGFyZ2V0ID0gZ2wuTk9ORTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignVW5zdXBwb3J0ZWQgR0ZYQnVmZmVyVHlwZSwgY3JlYXRlIGJ1ZmZlciBmYWlsZWQuJyk7XHJcbiAgICAgICAgZ3B1QnVmZmVyLmdsVGFyZ2V0ID0gZ2wuTk9ORTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFdlYkdMMkNtZEZ1bmNVcGRhdGVCdWZmZXIgKGRldmljZTogV2ViR0wyR0ZYRGV2aWNlLCBncHVCdWZmZXI6IFdlYkdMMkdQVUJ1ZmZlciwgYnVmZmVyOiBHRlhCdWZmZXJTb3VyY2UsIG9mZnNldDogbnVtYmVyLCBzaXplOiBudW1iZXIpIHtcclxuXHJcbiAgICBpZiAoZ3B1QnVmZmVyLnVzYWdlICYgR0ZYQnVmZmVyVXNhZ2VCaXQuSU5ESVJFQ1QpIHtcclxuICAgICAgICBncHVCdWZmZXIuaW5kaXJlY3RzID0gKGJ1ZmZlciBhcyBJR0ZYSW5kaXJlY3RCdWZmZXIpLmRyYXdJbmZvcztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgYnVmZiA9IGJ1ZmZlciBhcyBBcnJheUJ1ZmZlcjtcclxuICAgICAgICBjb25zdCBnbCA9IGRldmljZS5nbDtcclxuICAgICAgICBjb25zdCBjYWNoZSA9IGRldmljZS5zdGF0ZUNhY2hlO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKGdwdUJ1ZmZlci5nbFRhcmdldCkge1xyXG4gICAgICAgICAgICBjYXNlIGdsLkFSUkFZX0JVRkZFUjoge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlLmdsVkFPKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2wuYmluZFZlcnRleEFycmF5KG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhY2hlLmdsVkFPID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY2FjaGUuZ2xBcnJheUJ1ZmZlciAhPT0gZ3B1QnVmZmVyLmdsQnVmZmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIGdwdUJ1ZmZlci5nbEJ1ZmZlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FjaGUuZ2xBcnJheUJ1ZmZlciA9IGdwdUJ1ZmZlci5nbEJ1ZmZlcjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc2l6ZSA9PT0gYnVmZi5ieXRlTGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2wuYnVmZmVyU3ViRGF0YShncHVCdWZmZXIuZ2xUYXJnZXQsIG9mZnNldCwgYnVmZik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGdsLmJ1ZmZlclN1YkRhdGEoZ3B1QnVmZmVyLmdsVGFyZ2V0LCBvZmZzZXQsIGJ1ZmYuc2xpY2UoMCwgc2l6ZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUjoge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlLmdsVkFPKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2wuYmluZFZlcnRleEFycmF5KG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhY2hlLmdsVkFPID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY2FjaGUuZ2xFbGVtZW50QXJyYXlCdWZmZXIgIT09IGdwdUJ1ZmZlci5nbEJ1ZmZlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIGdwdUJ1ZmZlci5nbEJ1ZmZlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FjaGUuZ2xFbGVtZW50QXJyYXlCdWZmZXIgPSBncHVCdWZmZXIuZ2xCdWZmZXI7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHNpemUgPT09IGJ1ZmYuYnl0ZUxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGdsLmJ1ZmZlclN1YkRhdGEoZ3B1QnVmZmVyLmdsVGFyZ2V0LCBvZmZzZXQsIGJ1ZmYpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBnbC5idWZmZXJTdWJEYXRhKGdwdUJ1ZmZlci5nbFRhcmdldCwgb2Zmc2V0LCBidWZmLnNsaWNlKDAsIHNpemUpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgZ2wuVU5JRk9STV9CVUZGRVI6IHtcclxuICAgICAgICAgICAgICAgIGlmIChjYWNoZS5nbFVuaWZvcm1CdWZmZXIgIT09IGdwdUJ1ZmZlci5nbEJ1ZmZlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuVU5JRk9STV9CVUZGRVIsIGdwdUJ1ZmZlci5nbEJ1ZmZlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FjaGUuZ2xVbmlmb3JtQnVmZmVyID0gZ3B1QnVmZmVyLmdsQnVmZmVyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzaXplID09PSBidWZmLmJ5dGVMZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBnbC5idWZmZXJTdWJEYXRhKGdwdUJ1ZmZlci5nbFRhcmdldCwgb2Zmc2V0LCBidWZmKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpZiAoZ2wuZ2V0QnVmZmVyUGFyYW1ldGVyKGdsLlVOSUZPUk1fQlVGRkVSLCBnbC5CVUZGRVJfU0laRSkgIT09IGJ1ZmYubGVuZ3RoICogNCkgeyBkZWJ1Z2dlcjsgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBnbC5idWZmZXJTdWJEYXRhKGdwdUJ1ZmZlci5nbFRhcmdldCwgb2Zmc2V0LCBuZXcgRmxvYXQzMkFycmF5KGJ1ZmYsIDAsIHNpemUgLyA0KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbnN1cHBvcnRlZCBHRlhCdWZmZXJUeXBlLCB1cGRhdGUgYnVmZmVyIGZhaWxlZC4nKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFdlYkdMMkNtZEZ1bmNDcmVhdGVUZXh0dXJlIChkZXZpY2U6IFdlYkdMMkdGWERldmljZSwgZ3B1VGV4dHVyZTogV2ViR0wyR1BVVGV4dHVyZSkge1xyXG5cclxuICAgIGNvbnN0IGdsID0gZGV2aWNlLmdsO1xyXG5cclxuICAgIGdwdVRleHR1cmUuZ2xJbnRlcm5lbEZtdCA9IEdGWEZvcm1hdFRvV2ViR0xJbnRlcm5hbEZvcm1hdChncHVUZXh0dXJlLmZvcm1hdCwgZ2wpO1xyXG4gICAgZ3B1VGV4dHVyZS5nbEZvcm1hdCA9IEdGWEZvcm1hdFRvV2ViR0xGb3JtYXQoZ3B1VGV4dHVyZS5mb3JtYXQsIGdsKTtcclxuICAgIGdwdVRleHR1cmUuZ2xUeXBlID0gR0ZYRm9ybWF0VG9XZWJHTFR5cGUoZ3B1VGV4dHVyZS5mb3JtYXQsIGdsKTtcclxuXHJcbiAgICBsZXQgdyA9IGdwdVRleHR1cmUud2lkdGg7XHJcbiAgICBsZXQgaCA9IGdwdVRleHR1cmUuaGVpZ2h0O1xyXG5cclxuICAgIHN3aXRjaCAoZ3B1VGV4dHVyZS52aWV3VHlwZSkge1xyXG4gICAgICAgIGNhc2UgR0ZYVGV4dHVyZVZpZXdUeXBlLlRWMkQ6IHtcclxuICAgICAgICAgICAgZ3B1VGV4dHVyZS52aWV3VHlwZSA9IEdGWFRleHR1cmVWaWV3VHlwZS5UVjJEO1xyXG4gICAgICAgICAgICBncHVUZXh0dXJlLmdsVGFyZ2V0ID0gZ2wuVEVYVFVSRV8yRDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG1heFNpemUgPSBNYXRoLm1heCh3LCBoKTtcclxuICAgICAgICAgICAgaWYgKG1heFNpemUgPiBkZXZpY2UubWF4VGV4dHVyZVNpemUpIHtcclxuICAgICAgICAgICAgICAgIGVycm9ySUQoOTEwMCwgbWF4U2l6ZSwgZGV2aWNlLm1heFRleHR1cmVTaXplKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGdwdVRleHR1cmUuc2FtcGxlcyA9PT0gR0ZYU2FtcGxlQ291bnQuWDEpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGdsVGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcclxuICAgICAgICAgICAgICAgIGlmIChnbFRleHR1cmUgJiYgZ3B1VGV4dHVyZS5zaXplID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGdwdVRleHR1cmUuZ2xUZXh0dXJlID0gZ2xUZXh0dXJlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGdsVGV4VW5pdCA9IGRldmljZS5zdGF0ZUNhY2hlLmdsVGV4VW5pdHNbZGV2aWNlLnN0YXRlQ2FjaGUudGV4VW5pdF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChnbFRleFVuaXQuZ2xUZXh0dXJlICE9PSBncHVUZXh0dXJlLmdsVGV4dHVyZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBncHVUZXh0dXJlLmdsVGV4dHVyZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsVGV4VW5pdC5nbFRleHR1cmUgPSBncHVUZXh0dXJlLmdsVGV4dHVyZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghR0ZYRm9ybWF0SW5mb3NbZ3B1VGV4dHVyZS5mb3JtYXRdLmlzQ29tcHJlc3NlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdwdVRleHR1cmUubWlwTGV2ZWw7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCBpLCBncHVUZXh0dXJlLmdsSW50ZXJuZWxGbXQsIHcsIGgsIDAsIGdwdVRleHR1cmUuZ2xGb3JtYXQsIGdwdVRleHR1cmUuZ2xUeXBlLCBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcgPSBNYXRoLm1heCgxLCB3ID4+IDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaCA9IE1hdGgubWF4KDEsIGggPj4gMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ3B1VGV4dHVyZS5nbEludGVybmVsRm10ICE9PSBXZWJHTEVYVC5DT01QUkVTU0VEX1JHQl9FVEMxX1dFQkdMKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdwdVRleHR1cmUubWlwTGV2ZWw7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGltZ1NpemUgPSBHRlhGb3JtYXRTaXplKGdwdVRleHR1cmUuZm9ybWF0LCB3LCBoLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2aWV3OiBVaW50OEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoaW1nU2l6ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2wuY29tcHJlc3NlZFRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgaSwgZ3B1VGV4dHVyZS5nbEludGVybmVsRm10LCB3LCBoLCAwLCB2aWV3KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ID0gTWF0aC5tYXgoMSwgdyA+PiAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoID0gTWF0aC5tYXgoMSwgaCA+PiAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGluaXQgMiB4IDIgdGV4dHVyZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW1nU2l6ZSA9IEdGWEZvcm1hdFNpemUoZ3B1VGV4dHVyZS5mb3JtYXQsIDIsIDIsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmlldzogVWludDhBcnJheSA9IG5ldyBVaW50OEFycmF5KGltZ1NpemUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2wuY29tcHJlc3NlZFRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ3B1VGV4dHVyZS5nbEludGVybmVsRm10LCAyLCAyLCAwLCB2aWV3KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvKlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChncHVUZXh0dXJlLmlzUG93ZXJPZjIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ3B1VGV4dHVyZS5nbFdyYXBTID0gZ2wuUkVQRUFUO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBncHVUZXh0dXJlLmdsV3JhcFQgPSBnbC5SRVBFQVQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ3B1VGV4dHVyZS5nbFdyYXBTID0gZ2wuQ0xBTVBfVE9fRURHRTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ3B1VGV4dHVyZS5nbFdyYXBUID0gZ2wuQ0xBTVBfVE9fRURHRTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZ3B1VGV4dHVyZS5nbE1pbkZpbHRlciA9IGdsLkxJTkVBUjtcclxuICAgICAgICAgICAgICAgICAgICBncHVUZXh0dXJlLmdsTWFnRmlsdGVyID0gZ2wuTElORUFSO1xyXG4gICAgICAgICAgICAgICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ3B1VGV4dHVyZS5nbFRhcmdldCwgZ2wuVEVYVFVSRV9XUkFQX1MsIGdwdVRleHR1cmUuZ2xXcmFwUyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShncHVUZXh0dXJlLmdsVGFyZ2V0LCBnbC5URVhUVVJFX1dSQVBfVCwgZ3B1VGV4dHVyZS5nbFdyYXBUKTtcclxuICAgICAgICAgICAgICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdwdVRleHR1cmUuZ2xUYXJnZXQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ3B1VGV4dHVyZS5nbE1pbkZpbHRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShncHVUZXh0dXJlLmdsVGFyZ2V0LCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdwdVRleHR1cmUuZ2xNYWdGaWx0ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBnbC5kZWxldGVUZXh0dXJlKGdsVGV4dHVyZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBnbFJlbmRlcmJ1ZmZlciA9IGdsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGdsUmVuZGVyYnVmZmVyICYmIGdwdVRleHR1cmUuc2l6ZSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBncHVUZXh0dXJlLmdsUmVuZGVyYnVmZmVyID0gZ2xSZW5kZXJidWZmZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRldmljZS5zdGF0ZUNhY2hlLmdsUmVuZGVyYnVmZmVyICE9PSBncHVUZXh0dXJlLmdsUmVuZGVyYnVmZmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLmJpbmRSZW5kZXJidWZmZXIoZ2wuUkVOREVSQlVGRkVSLCBncHVUZXh0dXJlLmdsUmVuZGVyYnVmZmVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGV2aWNlLnN0YXRlQ2FjaGUuZ2xSZW5kZXJidWZmZXIgPSBncHVUZXh0dXJlLmdsUmVuZGVyYnVmZmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZ2wucmVuZGVyYnVmZmVyU3RvcmFnZU11bHRpc2FtcGxlKGdsLlJFTkRFUkJVRkZFUiwgU0FNUExFU1tncHVUZXh0dXJlLnNhbXBsZXNdLCBncHVUZXh0dXJlLmdsSW50ZXJuZWxGbXQsIGdwdVRleHR1cmUud2lkdGgsIGdwdVRleHR1cmUuaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSBHRlhUZXh0dXJlVmlld1R5cGUuQ1VCRToge1xyXG4gICAgICAgICAgICBncHVUZXh0dXJlLnZpZXdUeXBlID0gR0ZYVGV4dHVyZVZpZXdUeXBlLkNVQkU7XHJcbiAgICAgICAgICAgIGdwdVRleHR1cmUuZ2xUYXJnZXQgPSBnbC5URVhUVVJFX0NVQkVfTUFQO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgbWF4U2l6ZSA9IE1hdGgubWF4KHcsIGgpO1xyXG4gICAgICAgICAgICBpZiAobWF4U2l6ZSA+IGRldmljZS5tYXhDdWJlTWFwVGV4dHVyZVNpemUpIHtcclxuICAgICAgICAgICAgICAgIGVycm9ySUQoOTEwMCwgbWF4U2l6ZSwgZGV2aWNlLm1heFRleHR1cmVTaXplKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgZ2xUZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xyXG4gICAgICAgICAgICBpZiAoZ2xUZXh0dXJlICYmIGdwdVRleHR1cmUuc2l6ZSA+IDApIHtcclxuICAgICAgICAgICAgICAgIGdwdVRleHR1cmUuZ2xUZXh0dXJlID0gZ2xUZXh0dXJlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZ2xUZXhVbml0ID0gZGV2aWNlLnN0YXRlQ2FjaGUuZ2xUZXhVbml0c1tkZXZpY2Uuc3RhdGVDYWNoZS50ZXhVbml0XTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZ2xUZXhVbml0LmdsVGV4dHVyZSAhPT0gZ3B1VGV4dHVyZS5nbFRleHR1cmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFX0NVQkVfTUFQLCBncHVUZXh0dXJlLmdsVGV4dHVyZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2xUZXhVbml0LmdsVGV4dHVyZSA9IGdwdVRleHR1cmUuZ2xUZXh0dXJlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICghR0ZYRm9ybWF0SW5mb3NbZ3B1VGV4dHVyZS5mb3JtYXRdLmlzQ29tcHJlc3NlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGYgPSAwOyBmIDwgNjsgKytmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHcgPSBncHVUZXh0dXJlLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoID0gZ3B1VGV4dHVyZS5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3B1VGV4dHVyZS5taXBMZXZlbDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGYsIGksIGdwdVRleHR1cmUuZ2xJbnRlcm5lbEZtdCwgdywgaCwgMCwgZ3B1VGV4dHVyZS5nbEZvcm1hdCwgZ3B1VGV4dHVyZS5nbFR5cGUsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdyA9IE1hdGgubWF4KDEsIHcgPj4gMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoID0gTWF0aC5tYXgoMSwgaCA+PiAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdwdVRleHR1cmUuZ2xJbnRlcm5lbEZtdCAhPT0gV2ViR0xFWFQuQ09NUFJFU1NFRF9SR0JfRVRDMV9XRUJHTCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBmID0gMDsgZiA8IDY7ICsrZikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdyA9IGdwdVRleHR1cmUud2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoID0gZ3B1VGV4dHVyZS5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdwdVRleHR1cmUubWlwTGV2ZWw7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGltZ1NpemUgPSBHRlhGb3JtYXRTaXplKGdwdVRleHR1cmUuZm9ybWF0LCB3LCBoLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2aWV3OiBVaW50OEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoaW1nU2l6ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2wuY29tcHJlc3NlZFRleEltYWdlMkQoZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICsgZiwgaSwgZ3B1VGV4dHVyZS5nbEludGVybmVsRm10LCB3LCBoLCAwLCB2aWV3KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ID0gTWF0aC5tYXgoMSwgdyA+PiAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoID0gTWF0aC5tYXgoMSwgaCA+PiAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgZiA9IDA7IGYgPCA2OyArK2YpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGltZ1NpemUgPSBHRlhGb3JtYXRTaXplKGdwdVRleHR1cmUuZm9ybWF0LCAyLCAyLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZpZXc6IFVpbnQ4QXJyYXkgPSBuZXcgVWludDhBcnJheShpbWdTaXplKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsLmNvbXByZXNzZWRUZXhJbWFnZTJEKGdsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGYsIDAsIGdwdVRleHR1cmUuZ2xJbnRlcm5lbEZtdCwgMiwgMiwgMCwgdmlldyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgICAgIGlmIChncHVUZXh0dXJlLmlzUG93ZXJPZjIpIHtcclxuICAgICAgICAgICAgICAgICAgICBncHVUZXh0dXJlLmdsV3JhcFMgPSBnbC5SRVBFQVQ7XHJcbiAgICAgICAgICAgICAgICAgICAgZ3B1VGV4dHVyZS5nbFdyYXBUID0gZ2wuUkVQRUFUO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBncHVUZXh0dXJlLmdsV3JhcFMgPSBnbC5DTEFNUF9UT19FREdFO1xyXG4gICAgICAgICAgICAgICAgICAgIGdwdVRleHR1cmUuZ2xXcmFwVCA9IGdsLkNMQU1QX1RPX0VER0U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBncHVUZXh0dXJlLmdsTWluRmlsdGVyID0gZ2wuTElORUFSO1xyXG4gICAgICAgICAgICAgICAgZ3B1VGV4dHVyZS5nbE1hZ0ZpbHRlciA9IGdsLkxJTkVBUjtcclxuXHJcbiAgICAgICAgICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdwdVRleHR1cmUuZ2xUYXJnZXQsIGdsLlRFWFRVUkVfV1JBUF9TLCBncHVUZXh0dXJlLmdsV3JhcFMpO1xyXG4gICAgICAgICAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShncHVUZXh0dXJlLmdsVGFyZ2V0LCBnbC5URVhUVVJFX1dSQVBfVCwgZ3B1VGV4dHVyZS5nbFdyYXBUKTtcclxuICAgICAgICAgICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ3B1VGV4dHVyZS5nbFRhcmdldCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBncHVUZXh0dXJlLmdsTWluRmlsdGVyKTtcclxuICAgICAgICAgICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ3B1VGV4dHVyZS5nbFRhcmdldCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBncHVUZXh0dXJlLmdsTWFnRmlsdGVyKTtcclxuICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignVW5zdXBwb3J0ZWQgR0ZYVGV4dHVyZVR5cGUsIGNyZWF0ZSB0ZXh0dXJlIGZhaWxlZC4nKTtcclxuICAgICAgICAgICAgZ3B1VGV4dHVyZS52aWV3VHlwZSA9IEdGWFRleHR1cmVWaWV3VHlwZS5UVjJEO1xyXG4gICAgICAgICAgICBncHVUZXh0dXJlLmdsVGFyZ2V0ID0gZ2wuVEVYVFVSRV8yRDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBXZWJHTDJDbWRGdW5jRGVzdHJveVRleHR1cmUgKGRldmljZTogV2ViR0wyR0ZYRGV2aWNlLCBncHVUZXh0dXJlOiBXZWJHTDJHUFVUZXh0dXJlKSB7XHJcbiAgICBpZiAoZ3B1VGV4dHVyZS5nbFRleHR1cmUpIHtcclxuICAgICAgICBkZXZpY2UuZ2wuZGVsZXRlVGV4dHVyZShncHVUZXh0dXJlLmdsVGV4dHVyZSk7XHJcbiAgICAgICAgZ3B1VGV4dHVyZS5nbFRleHR1cmUgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChncHVUZXh0dXJlLmdsUmVuZGVyYnVmZmVyKSB7XHJcbiAgICAgICAgZGV2aWNlLmdsLmRlbGV0ZVJlbmRlcmJ1ZmZlcihncHVUZXh0dXJlLmdsUmVuZGVyYnVmZmVyKTtcclxuICAgICAgICBncHVUZXh0dXJlLmdsUmVuZGVyYnVmZmVyID0gbnVsbDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFdlYkdMMkNtZEZ1bmNSZXNpemVUZXh0dXJlIChkZXZpY2U6IFdlYkdMMkdGWERldmljZSwgZ3B1VGV4dHVyZTogV2ViR0wyR1BVVGV4dHVyZSkge1xyXG5cclxuICAgIGNvbnN0IGdsID0gZGV2aWNlLmdsO1xyXG5cclxuICAgIGdwdVRleHR1cmUuZ2xJbnRlcm5lbEZtdCA9IEdGWEZvcm1hdFRvV2ViR0xJbnRlcm5hbEZvcm1hdChncHVUZXh0dXJlLmZvcm1hdCwgZ2wpO1xyXG4gICAgZ3B1VGV4dHVyZS5nbEZvcm1hdCA9IEdGWEZvcm1hdFRvV2ViR0xGb3JtYXQoZ3B1VGV4dHVyZS5mb3JtYXQsIGdsKTtcclxuICAgIGdwdVRleHR1cmUuZ2xUeXBlID0gR0ZYRm9ybWF0VG9XZWJHTFR5cGUoZ3B1VGV4dHVyZS5mb3JtYXQsIGdsKTtcclxuXHJcbiAgICBsZXQgdyA9IGdwdVRleHR1cmUud2lkdGg7XHJcbiAgICBsZXQgaCA9IGdwdVRleHR1cmUuaGVpZ2h0O1xyXG5cclxuICAgIHN3aXRjaCAoZ3B1VGV4dHVyZS52aWV3VHlwZSkge1xyXG4gICAgICAgIGNhc2UgR0ZYVGV4dHVyZVZpZXdUeXBlLlRWMkQ6IHtcclxuICAgICAgICAgICAgZ3B1VGV4dHVyZS52aWV3VHlwZSA9IEdGWFRleHR1cmVWaWV3VHlwZS5UVjJEO1xyXG4gICAgICAgICAgICBncHVUZXh0dXJlLmdsVGFyZ2V0ID0gZ2wuVEVYVFVSRV8yRDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG1heFNpemUgPSBNYXRoLm1heCh3LCBoKTtcclxuICAgICAgICAgICAgaWYgKG1heFNpemUgPiBkZXZpY2UubWF4VGV4dHVyZVNpemUpIHtcclxuICAgICAgICAgICAgICAgIGVycm9ySUQoOTEwMCwgbWF4U2l6ZSwgZGV2aWNlLm1heFRleHR1cmVTaXplKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGdwdVRleHR1cmUuc2FtcGxlcyA9PT0gR0ZYU2FtcGxlQ291bnQuWDEpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGdsVGV4VW5pdCA9IGRldmljZS5zdGF0ZUNhY2hlLmdsVGV4VW5pdHNbZGV2aWNlLnN0YXRlQ2FjaGUudGV4VW5pdF07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGdsVGV4VW5pdC5nbFRleHR1cmUgIT09IGdwdVRleHR1cmUuZ2xUZXh0dXJlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgZ3B1VGV4dHVyZS5nbFRleHR1cmUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGdsVGV4VW5pdC5nbFRleHR1cmUgPSBncHVUZXh0dXJlLmdsVGV4dHVyZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIUdGWEZvcm1hdEluZm9zW2dwdVRleHR1cmUuZm9ybWF0XS5pc0NvbXByZXNzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdwdVRleHR1cmUubWlwTGV2ZWw7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIGksIGdwdVRleHR1cmUuZ2xJbnRlcm5lbEZtdCwgdywgaCwgMCwgZ3B1VGV4dHVyZS5nbEZvcm1hdCwgZ3B1VGV4dHVyZS5nbFR5cGUsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3ID0gTWF0aC5tYXgoMSwgdyA+PiAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaCA9IE1hdGgubWF4KDEsIGggPj4gMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZ3B1VGV4dHVyZS5nbEludGVybmVsRm10ICE9PSBXZWJHTEVYVC5DT01QUkVTU0VEX1JHQl9FVEMxX1dFQkdMKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3B1VGV4dHVyZS5taXBMZXZlbDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbWdTaXplID0gR0ZYRm9ybWF0U2l6ZShncHVUZXh0dXJlLmZvcm1hdCwgdywgaCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2aWV3OiBVaW50OEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoaW1nU2l6ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbC5jb21wcmVzc2VkVGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCBpLCBncHVUZXh0dXJlLmdsSW50ZXJuZWxGbXQsIHcsIGgsIDAsIHZpZXcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdyA9IE1hdGgubWF4KDEsIHcgPj4gMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoID0gTWF0aC5tYXgoMSwgaCA+PiAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGdsUmVuZGVyYnVmZmVyID0gZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ2xSZW5kZXJidWZmZXIgJiYgZ3B1VGV4dHVyZS5zaXplID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGdwdVRleHR1cmUuZ2xSZW5kZXJidWZmZXIgPSBnbFJlbmRlcmJ1ZmZlcjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGV2aWNlLnN0YXRlQ2FjaGUuZ2xSZW5kZXJidWZmZXIgIT09IGdwdVRleHR1cmUuZ2xSZW5kZXJidWZmZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihnbC5SRU5ERVJCVUZGRVIsIGdwdVRleHR1cmUuZ2xSZW5kZXJidWZmZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXZpY2Uuc3RhdGVDYWNoZS5nbFJlbmRlcmJ1ZmZlciA9IGdwdVRleHR1cmUuZ2xSZW5kZXJidWZmZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBnbC5yZW5kZXJidWZmZXJTdG9yYWdlTXVsdGlzYW1wbGUoZ2wuUkVOREVSQlVGRkVSLCBTQU1QTEVTW2dwdVRleHR1cmUuc2FtcGxlc10sIGdwdVRleHR1cmUuZ2xJbnRlcm5lbEZtdCwgZ3B1VGV4dHVyZS53aWR0aCwgZ3B1VGV4dHVyZS5oZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXNlIEdGWFRleHR1cmVWaWV3VHlwZS5DVUJFOiB7XHJcbiAgICAgICAgICAgIGdwdVRleHR1cmUudmlld1R5cGUgPSBHRlhUZXh0dXJlVmlld1R5cGUuQ1VCRTtcclxuICAgICAgICAgICAgZ3B1VGV4dHVyZS5nbFRhcmdldCA9IGdsLlRFWFRVUkVfQ1VCRV9NQVA7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBtYXhTaXplID0gTWF0aC5tYXgodywgaCk7XHJcbiAgICAgICAgICAgIGlmIChtYXhTaXplID4gZGV2aWNlLm1heEN1YmVNYXBUZXh0dXJlU2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgZXJyb3JJRCg5MTAwLCBtYXhTaXplLCBkZXZpY2UubWF4VGV4dHVyZVNpemUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBnbFRleFVuaXQgPSBkZXZpY2Uuc3RhdGVDYWNoZS5nbFRleFVuaXRzW2RldmljZS5zdGF0ZUNhY2hlLnRleFVuaXRdO1xyXG5cclxuICAgICAgICAgICAgaWYgKGdsVGV4VW5pdC5nbFRleHR1cmUgIT09IGdwdVRleHR1cmUuZ2xUZXh0dXJlKSB7XHJcbiAgICAgICAgICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFX0NVQkVfTUFQLCBncHVUZXh0dXJlLmdsVGV4dHVyZSk7XHJcbiAgICAgICAgICAgICAgICBnbFRleFVuaXQuZ2xUZXh0dXJlID0gZ3B1VGV4dHVyZS5nbFRleHR1cmU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghR0ZYRm9ybWF0SW5mb3NbZ3B1VGV4dHVyZS5mb3JtYXRdLmlzQ29tcHJlc3NlZCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgZiA9IDA7IGYgPCA2OyArK2YpIHtcclxuICAgICAgICAgICAgICAgICAgICB3ID0gZ3B1VGV4dHVyZS53aWR0aDtcclxuICAgICAgICAgICAgICAgICAgICBoID0gZ3B1VGV4dHVyZS5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBncHVUZXh0dXJlLm1pcExldmVsOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggKyBmLCBpLCBncHVUZXh0dXJlLmdsSW50ZXJuZWxGbXQsIHcsIGgsIDAsIGdwdVRleHR1cmUuZ2xGb3JtYXQsIGdwdVRleHR1cmUuZ2xUeXBlLCBudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdyA9IE1hdGgubWF4KDEsIHcgPj4gMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGggPSBNYXRoLm1heCgxLCBoID4+IDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChncHVUZXh0dXJlLmdsSW50ZXJuZWxGbXQgIT09IFdlYkdMRVhULkNPTVBSRVNTRURfUkdCX0VUQzFfV0VCR0wpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBmID0gMDsgZiA8IDY7ICsrZikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3ID0gZ3B1VGV4dHVyZS53aWR0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaCA9IGdwdVRleHR1cmUuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdwdVRleHR1cmUubWlwTGV2ZWw7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW1nU2l6ZSA9IEdGWEZvcm1hdFNpemUoZ3B1VGV4dHVyZS5mb3JtYXQsIHcsIGgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmlldzogVWludDhBcnJheSA9IG5ldyBVaW50OEFycmF5KGltZ1NpemUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2wuY29tcHJlc3NlZFRleEltYWdlMkQoZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICsgZiwgaSwgZ3B1VGV4dHVyZS5nbEludGVybmVsRm10LCB3LCBoLCAwLCB2aWV3KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcgPSBNYXRoLm1heCgxLCB3ID4+IDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaCA9IE1hdGgubWF4KDEsIGggPj4gMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignVW5zdXBwb3J0ZWQgR0ZYVGV4dHVyZVR5cGUsIGNyZWF0ZSB0ZXh0dXJlIGZhaWxlZC4nKTtcclxuICAgICAgICAgICAgZ3B1VGV4dHVyZS52aWV3VHlwZSA9IEdGWFRleHR1cmVWaWV3VHlwZS5UVjJEO1xyXG4gICAgICAgICAgICBncHVUZXh0dXJlLmdsVGFyZ2V0ID0gZ2wuVEVYVFVSRV8yRDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBXZWJHTDJDbWRGdW5jQ3JlYXRlU2FtcGxlciAoZGV2aWNlOiBXZWJHTDJHRlhEZXZpY2UsIGdwdVNhbXBsZXI6IFdlYkdMMkdQVVNhbXBsZXIpIHtcclxuXHJcbiAgICBjb25zdCBnbCA9IGRldmljZS5nbDtcclxuICAgIGNvbnN0IGdsU2FtcGxlciA9IGdsLmNyZWF0ZVNhbXBsZXIoKTtcclxuICAgIGlmIChnbFNhbXBsZXIpIHtcclxuICAgICAgICBpZiAoZ3B1U2FtcGxlci5taW5GaWx0ZXIgPT09IEdGWEZpbHRlci5MSU5FQVIgfHwgZ3B1U2FtcGxlci5taW5GaWx0ZXIgPT09IEdGWEZpbHRlci5BTklTT1RST1BJQykge1xyXG4gICAgICAgICAgICBpZiAoZ3B1U2FtcGxlci5taXBGaWx0ZXIgPT09IEdGWEZpbHRlci5MSU5FQVIgfHwgZ3B1U2FtcGxlci5taXBGaWx0ZXIgPT09IEdGWEZpbHRlci5BTklTT1RST1BJQykge1xyXG4gICAgICAgICAgICAgICAgZ3B1U2FtcGxlci5nbE1pbkZpbHRlciA9IGdsLkxJTkVBUl9NSVBNQVBfTElORUFSO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGdwdVNhbXBsZXIubWlwRmlsdGVyID09PSBHRlhGaWx0ZXIuUE9JTlQpIHtcclxuICAgICAgICAgICAgICAgIGdwdVNhbXBsZXIuZ2xNaW5GaWx0ZXIgPSBnbC5MSU5FQVJfTUlQTUFQX05FQVJFU1Q7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBncHVTYW1wbGVyLmdsTWluRmlsdGVyID0gZ2wuTElORUFSO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGdwdVNhbXBsZXIubWlwRmlsdGVyID09PSBHRlhGaWx0ZXIuTElORUFSIHx8IGdwdVNhbXBsZXIubWlwRmlsdGVyID09PSBHRlhGaWx0ZXIuQU5JU09UUk9QSUMpIHtcclxuICAgICAgICAgICAgICAgIGdwdVNhbXBsZXIuZ2xNaW5GaWx0ZXIgPSBnbC5ORUFSRVNUX01JUE1BUF9MSU5FQVI7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZ3B1U2FtcGxlci5taXBGaWx0ZXIgPT09IEdGWEZpbHRlci5QT0lOVCkge1xyXG4gICAgICAgICAgICAgICAgZ3B1U2FtcGxlci5nbE1pbkZpbHRlciA9IGdsLk5FQVJFU1RfTUlQTUFQX05FQVJFU1Q7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBncHVTYW1wbGVyLmdsTWluRmlsdGVyID0gZ2wuTkVBUkVTVDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGdwdVNhbXBsZXIubWFnRmlsdGVyID09PSBHRlhGaWx0ZXIuTElORUFSIHx8IGdwdVNhbXBsZXIubWFnRmlsdGVyID09PSBHRlhGaWx0ZXIuQU5JU09UUk9QSUMpIHtcclxuICAgICAgICAgICAgZ3B1U2FtcGxlci5nbE1hZ0ZpbHRlciA9IGdsLkxJTkVBUjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBncHVTYW1wbGVyLmdsTWFnRmlsdGVyID0gZ2wuTkVBUkVTVDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdwdVNhbXBsZXIuZ2xXcmFwUyA9IFdlYkdMV3JhcHNbZ3B1U2FtcGxlci5hZGRyZXNzVV07XHJcbiAgICAgICAgZ3B1U2FtcGxlci5nbFdyYXBUID0gV2ViR0xXcmFwc1tncHVTYW1wbGVyLmFkZHJlc3NWXTtcclxuICAgICAgICBncHVTYW1wbGVyLmdsV3JhcFIgPSBXZWJHTFdyYXBzW2dwdVNhbXBsZXIuYWRkcmVzc1ddO1xyXG5cclxuICAgICAgICBncHVTYW1wbGVyLmdsU2FtcGxlciA9IGdsU2FtcGxlcjtcclxuICAgICAgICBnbC5zYW1wbGVyUGFyYW1ldGVyaShnbFNhbXBsZXIsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ3B1U2FtcGxlci5nbE1pbkZpbHRlcik7XHJcbiAgICAgICAgZ2wuc2FtcGxlclBhcmFtZXRlcmkoZ2xTYW1wbGVyLCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdwdVNhbXBsZXIuZ2xNYWdGaWx0ZXIpO1xyXG4gICAgICAgIGdsLnNhbXBsZXJQYXJhbWV0ZXJpKGdsU2FtcGxlciwgZ2wuVEVYVFVSRV9XUkFQX1MsIGdwdVNhbXBsZXIuZ2xXcmFwUyk7XHJcbiAgICAgICAgZ2wuc2FtcGxlclBhcmFtZXRlcmkoZ2xTYW1wbGVyLCBnbC5URVhUVVJFX1dSQVBfVCwgZ3B1U2FtcGxlci5nbFdyYXBUKTtcclxuICAgICAgICBnbC5zYW1wbGVyUGFyYW1ldGVyaShnbFNhbXBsZXIsIGdsLlRFWFRVUkVfV1JBUF9SLCBncHVTYW1wbGVyLmdsV3JhcFIpO1xyXG4gICAgICAgIGdsLnNhbXBsZXJQYXJhbWV0ZXJmKGdsU2FtcGxlciwgZ2wuVEVYVFVSRV9NSU5fTE9ELCBncHVTYW1wbGVyLm1pbkxPRCk7XHJcbiAgICAgICAgZ2wuc2FtcGxlclBhcmFtZXRlcmYoZ2xTYW1wbGVyLCBnbC5URVhUVVJFX01BWF9MT0QsIGdwdVNhbXBsZXIubWF4TE9EKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFdlYkdMMkNtZEZ1bmNEZXN0cm95U2FtcGxlciAoZGV2aWNlOiBXZWJHTDJHRlhEZXZpY2UsIGdwdVNhbXBsZXI6IFdlYkdMMkdQVVNhbXBsZXIpIHtcclxuICAgIGlmIChncHVTYW1wbGVyLmdsU2FtcGxlcikge1xyXG4gICAgICAgIGRldmljZS5nbC5kZWxldGVTYW1wbGVyKGdwdVNhbXBsZXIuZ2xTYW1wbGVyKTtcclxuICAgICAgICBncHVTYW1wbGVyLmdsU2FtcGxlciA9IG51bGw7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBXZWJHTDJDbWRGdW5jQ3JlYXRlRnJhbWVidWZmZXIgKGRldmljZTogV2ViR0wyR0ZYRGV2aWNlLCBncHVGcmFtZWJ1ZmZlcjogV2ViR0wyR1BVRnJhbWVidWZmZXIpIHtcclxuXHJcbiAgICBpZiAoZ3B1RnJhbWVidWZmZXIuaXNPZmZzY3JlZW4pIHtcclxuXHJcbiAgICAgICAgY29uc3QgZ2wgPSBkZXZpY2UuZ2w7XHJcbiAgICAgICAgY29uc3QgYXR0YWNobWVudHM6IEdMZW51bVtdID0gW107XHJcblxyXG4gICAgICAgIGNvbnN0IGdsRnJhbWVidWZmZXIgPSBnbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xyXG4gICAgICAgIGlmIChnbEZyYW1lYnVmZmVyKSB7XHJcbiAgICAgICAgICAgIGdwdUZyYW1lYnVmZmVyLmdsRnJhbWVidWZmZXIgPSBnbEZyYW1lYnVmZmVyO1xyXG5cclxuICAgICAgICAgICAgaWYgKGRldmljZS5zdGF0ZUNhY2hlLmdsRnJhbWVidWZmZXIgIT09IGdwdUZyYW1lYnVmZmVyLmdsRnJhbWVidWZmZXIpIHtcclxuICAgICAgICAgICAgICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZ3B1RnJhbWVidWZmZXIuZ2xGcmFtZWJ1ZmZlcik7XHJcbiAgICAgICAgICAgICAgICBkZXZpY2Uuc3RhdGVDYWNoZS5nbEZyYW1lYnVmZmVyID0gZ3B1RnJhbWVidWZmZXIuZ2xGcmFtZWJ1ZmZlcjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBncHVGcmFtZWJ1ZmZlci5ncHVDb2xvclZpZXdzLmxlbmd0aDsgKytpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgY3YgPSBncHVGcmFtZWJ1ZmZlci5ncHVDb2xvclZpZXdzW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGN2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN2LmdwdVRleHR1cmUuZ2xUZXh0dXJlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2wuRlJBTUVCVUZGRVIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbC5DT0xPUl9BVFRBQ0hNRU5UMCArIGksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdi5ncHVUZXh0dXJlLmdsVGFyZ2V0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3YuZ3B1VGV4dHVyZS5nbFRleHR1cmUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdi5iYXNlTGV2ZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2wuRlJBTUVCVUZGRVIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbC5DT0xPUl9BVFRBQ0hNRU5UMCArIGksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbC5SRU5ERVJCVUZGRVIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdi5ncHVUZXh0dXJlLmdsUmVuZGVyYnVmZmVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYXR0YWNobWVudHMucHVzaChnbC5DT0xPUl9BVFRBQ0hNRU5UMCArIGkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBkc3YgPSBncHVGcmFtZWJ1ZmZlci5ncHVEZXB0aFN0ZW5jaWxWaWV3O1xyXG4gICAgICAgICAgICBpZiAoZHN2KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBnbEF0dGFjaG1lbnQgPSBHRlhGb3JtYXRJbmZvc1tkc3YuZm9ybWF0XS5oYXNTdGVuY2lsID8gZ2wuREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5UIDogZ2wuREVQVEhfQVRUQUNITUVOVDtcclxuICAgICAgICAgICAgICAgIGlmIChkc3YuZ3B1VGV4dHVyZS5nbFRleHR1cmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBnbC5mcmFtZWJ1ZmZlclRleHR1cmUyRChcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2wuRlJBTUVCVUZGRVIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsQXR0YWNobWVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHN2LmdwdVRleHR1cmUuZ2xUYXJnZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRzdi5ncHVUZXh0dXJlLmdsVGV4dHVyZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHN2LmJhc2VMZXZlbCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGdsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbC5GUkFNRUJVRkZFUixcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2xBdHRhY2htZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbC5SRU5ERVJCVUZGRVIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRzdi5ncHVUZXh0dXJlLmdsUmVuZGVyYnVmZmVyLFxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdsLmRyYXdCdWZmZXJzKGF0dGFjaG1lbnRzKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXR1cyA9IGdsLmNoZWNrRnJhbWVidWZmZXJTdGF0dXMoZ2wuRlJBTUVCVUZGRVIpO1xyXG4gICAgICAgICAgICBpZiAoc3RhdHVzICE9PSBnbC5GUkFNRUJVRkZFUl9DT01QTEVURSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChzdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIGdsLkZSQU1FQlVGRkVSX0lOQ09NUExFVEVfQVRUQUNITUVOVDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdnbENoZWNrRnJhbWVidWZmZXJTdGF0dXMoKSAtIEZSQU1FQlVGRkVSX0lOQ09NUExFVEVfQVRUQUNITUVOVCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBnbC5GUkFNRUJVRkZFUl9JTkNPTVBMRVRFX01JU1NJTkdfQVRUQUNITUVOVDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdnbENoZWNrRnJhbWVidWZmZXJTdGF0dXMoKSAtIEZSQU1FQlVGRkVSX0lOQ09NUExFVEVfTUlTU0lOR19BVFRBQ0hNRU5UJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIGdsLkZSQU1FQlVGRkVSX0lOQ09NUExFVEVfRElNRU5TSU9OUzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdnbENoZWNrRnJhbWVidWZmZXJTdGF0dXMoKSAtIEZSQU1FQlVGRkVSX0lOQ09NUExFVEVfRElNRU5TSU9OUycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBnbC5GUkFNRUJVRkZFUl9VTlNVUFBPUlRFRDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdnbENoZWNrRnJhbWVidWZmZXJTdGF0dXMoKSAtIEZSQU1FQlVGRkVSX1VOU1VQUE9SVEVEJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gV2ViR0wyQ21kRnVuY0Rlc3Ryb3lGcmFtZWJ1ZmZlciAoZGV2aWNlOiBXZWJHTDJHRlhEZXZpY2UsIGdwdUZyYW1lYnVmZmVyOiBXZWJHTDJHUFVGcmFtZWJ1ZmZlcikge1xyXG4gICAgaWYgKGdwdUZyYW1lYnVmZmVyLmdsRnJhbWVidWZmZXIpIHtcclxuICAgICAgICBkZXZpY2UuZ2wuZGVsZXRlRnJhbWVidWZmZXIoZ3B1RnJhbWVidWZmZXIuZ2xGcmFtZWJ1ZmZlcik7XHJcbiAgICAgICAgZ3B1RnJhbWVidWZmZXIuZ2xGcmFtZWJ1ZmZlciA9IG51bGw7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBXZWJHTDJDbWRGdW5jQ3JlYXRlU2hhZGVyIChkZXZpY2U6IFdlYkdMMkdGWERldmljZSwgZ3B1U2hhZGVyOiBXZWJHTDJHUFVTaGFkZXIpIHtcclxuICAgIGNvbnN0IGdsID0gZGV2aWNlLmdsO1xyXG5cclxuICAgIGZvciAobGV0IGsgPSAwOyBrIDwgZ3B1U2hhZGVyLmdwdVN0YWdlcy5sZW5ndGg7IGsrKykge1xyXG4gICAgICAgIGNvbnN0IGdwdVN0YWdlID0gZ3B1U2hhZGVyLmdwdVN0YWdlc1trXTtcclxuXHJcbiAgICAgICAgbGV0IGdsU2hhZGVyVHlwZTogR0xlbnVtID0gMDtcclxuICAgICAgICBsZXQgc2hhZGVyVHlwZVN0ciA9ICcnO1xyXG4gICAgICAgIGxldCBsaW5lTnVtYmVyID0gMTtcclxuXHJcbiAgICAgICAgc3dpdGNoIChncHVTdGFnZS50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgR0ZYU2hhZGVyVHlwZS5WRVJURVg6IHtcclxuICAgICAgICAgICAgICAgIHNoYWRlclR5cGVTdHIgPSAnVmVydGV4U2hhZGVyJztcclxuICAgICAgICAgICAgICAgIGdsU2hhZGVyVHlwZSA9IGdsLlZFUlRFWF9TSEFERVI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIEdGWFNoYWRlclR5cGUuRlJBR01FTlQ6IHtcclxuICAgICAgICAgICAgICAgIHNoYWRlclR5cGVTdHIgPSAnRnJhZ21lbnRTaGFkZXInO1xyXG4gICAgICAgICAgICAgICAgZ2xTaGFkZXJUeXBlID0gZ2wuRlJBR01FTlRfU0hBREVSO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGVmYXVsdDoge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignVW5zdXBwb3J0ZWQgR0ZYU2hhZGVyVHlwZS4nKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZ2xTaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoZ2xTaGFkZXJUeXBlKTtcclxuICAgICAgICBpZiAoZ2xTaGFkZXIpIHtcclxuICAgICAgICAgICAgZ3B1U3RhZ2UuZ2xTaGFkZXIgPSBnbFNoYWRlcjtcclxuICAgICAgICAgICAgZ2wuc2hhZGVyU291cmNlKGdwdVN0YWdlLmdsU2hhZGVyLCAnI3ZlcnNpb24gMzAwIGVzXFxuJyArIGdwdVN0YWdlLnNvdXJjZSk7XHJcbiAgICAgICAgICAgIGdsLmNvbXBpbGVTaGFkZXIoZ3B1U3RhZ2UuZ2xTaGFkZXIpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoZ3B1U3RhZ2UuZ2xTaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihzaGFkZXJUeXBlU3RyICsgJyBpbiBcXCcnICsgZ3B1U2hhZGVyLm5hbWUgKyAnXFwnIGNvbXBpbGF0aW9uIGZhaWxlZC4nKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1NoYWRlciBzb3VyY2UgZHVtcDonLCBncHVTdGFnZS5zb3VyY2UucmVwbGFjZSgvXnxcXG4vZywgKCkgPT4gYFxcbiR7bGluZU51bWJlcisrfSBgKSk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGdsLmdldFNoYWRlckluZm9Mb2coZ3B1U3RhZ2UuZ2xTaGFkZXIpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBsID0gMDsgbCA8IGdwdVNoYWRlci5ncHVTdGFnZXMubGVuZ3RoOyBsKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGFnZSA9IGdwdVNoYWRlci5ncHVTdGFnZXNba107XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWdlLmdsU2hhZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLmRlbGV0ZVNoYWRlcihzdGFnZS5nbFNoYWRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YWdlLmdsU2hhZGVyID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZ2xQcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xyXG4gICAgaWYgKCFnbFByb2dyYW0pIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgZ3B1U2hhZGVyLmdsUHJvZ3JhbSA9IGdsUHJvZ3JhbTtcclxuXHJcbiAgICAvLyBsaW5rIHByb2dyYW1cclxuICAgIGZvciAobGV0IGsgPSAwOyBrIDwgZ3B1U2hhZGVyLmdwdVN0YWdlcy5sZW5ndGg7IGsrKykge1xyXG4gICAgICAgIGNvbnN0IGdwdVN0YWdlID0gZ3B1U2hhZGVyLmdwdVN0YWdlc1trXTtcclxuICAgICAgICBnbC5hdHRhY2hTaGFkZXIoZ3B1U2hhZGVyLmdsUHJvZ3JhbSwgZ3B1U3RhZ2UuZ2xTaGFkZXIhKTtcclxuICAgIH1cclxuXHJcbiAgICBnbC5saW5rUHJvZ3JhbShncHVTaGFkZXIuZ2xQcm9ncmFtKTtcclxuXHJcbiAgICAvLyBkZXRhY2ggJiBkZWxldGUgaW1tZWRpYXRlbHlcclxuICAgIGZvciAobGV0IGsgPSAwOyBrIDwgZ3B1U2hhZGVyLmdwdVN0YWdlcy5sZW5ndGg7IGsrKykge1xyXG4gICAgICAgIGNvbnN0IGdwdVN0YWdlID0gZ3B1U2hhZGVyLmdwdVN0YWdlc1trXTtcclxuICAgICAgICBpZiAoZ3B1U3RhZ2UuZ2xTaGFkZXIpIHtcclxuICAgICAgICAgICAgZ2wuZGV0YWNoU2hhZGVyKGdwdVNoYWRlci5nbFByb2dyYW0sIGdwdVN0YWdlLmdsU2hhZGVyKTtcclxuICAgICAgICAgICAgZ2wuZGVsZXRlU2hhZGVyKGdwdVN0YWdlLmdsU2hhZGVyKTtcclxuICAgICAgICAgICAgZ3B1U3RhZ2UuZ2xTaGFkZXIgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihncHVTaGFkZXIuZ2xQcm9ncmFtLCBnbC5MSU5LX1NUQVRVUykpIHtcclxuICAgICAgICBjb25zb2xlLmluZm8oJ1NoYWRlciBcXCcnICsgZ3B1U2hhZGVyLm5hbWUgKyAnXFwnIGNvbXBpbGF0aW9uIHN1Y2Nlc3NlZC4nKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGxpbmsgc2hhZGVyIFxcJycgKyBncHVTaGFkZXIubmFtZSArICdcXCcuJyk7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihnbC5nZXRQcm9ncmFtSW5mb0xvZyhncHVTaGFkZXIuZ2xQcm9ncmFtKSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHBhcnNlIGlucHV0c1xyXG4gICAgY29uc3QgYWN0aXZlQXR0cmliQ291bnQgPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKGdwdVNoYWRlci5nbFByb2dyYW0sIGdsLkFDVElWRV9BVFRSSUJVVEVTKTtcclxuICAgIGdwdVNoYWRlci5nbElucHV0cyA9IG5ldyBBcnJheTxXZWJHTDJHUFVJbnB1dD4oYWN0aXZlQXR0cmliQ291bnQpO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWN0aXZlQXR0cmliQ291bnQ7ICsraSkge1xyXG4gICAgICAgIGNvbnN0IGF0dHJpYkluZm8gPSBnbC5nZXRBY3RpdmVBdHRyaWIoZ3B1U2hhZGVyLmdsUHJvZ3JhbSwgaSk7XHJcbiAgICAgICAgaWYgKGF0dHJpYkluZm8pIHtcclxuICAgICAgICAgICAgbGV0IHZhck5hbWU6IHN0cmluZztcclxuICAgICAgICAgICAgY29uc3QgbmFtZU9mZnNldCA9IGF0dHJpYkluZm8ubmFtZS5pbmRleE9mKCdbJyk7XHJcbiAgICAgICAgICAgIGlmIChuYW1lT2Zmc2V0ICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgdmFyTmFtZSA9IGF0dHJpYkluZm8ubmFtZS5zdWJzdHIoMCwgbmFtZU9mZnNldCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXJOYW1lID0gYXR0cmliSW5mby5uYW1lO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBnbExvYyA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKGdwdVNoYWRlci5nbFByb2dyYW0sIHZhck5hbWUpO1xyXG4gICAgICAgICAgICBjb25zdCB0eXBlID0gV2ViR0xUeXBlVG9HRlhUeXBlKGF0dHJpYkluZm8udHlwZSwgZ2wpO1xyXG4gICAgICAgICAgICBjb25zdCBzdHJpZGUgPSBXZWJHTEdldFR5cGVTaXplKGF0dHJpYkluZm8udHlwZSwgZ2wpO1xyXG5cclxuICAgICAgICAgICAgZ3B1U2hhZGVyLmdsSW5wdXRzW2ldID0ge1xyXG4gICAgICAgICAgICAgICAgYmluZGluZzogZ2xMb2MsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiB2YXJOYW1lLFxyXG4gICAgICAgICAgICAgICAgdHlwZSxcclxuICAgICAgICAgICAgICAgIHN0cmlkZSxcclxuICAgICAgICAgICAgICAgIGNvdW50OiBhdHRyaWJJbmZvLnNpemUsXHJcbiAgICAgICAgICAgICAgICBzaXplOiBzdHJpZGUgKiBhdHRyaWJJbmZvLnNpemUsXHJcblxyXG4gICAgICAgICAgICAgICAgZ2xUeXBlOiBhdHRyaWJJbmZvLnR5cGUsXHJcbiAgICAgICAgICAgICAgICBnbExvYyxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY3JlYXRlIHVuaWZvcm0gYmxvY2tzXHJcbiAgICBjb25zdCBhY3RpdmVCbG9ja0NvdW50ID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihncHVTaGFkZXIuZ2xQcm9ncmFtLCBnbC5BQ1RJVkVfVU5JRk9STV9CTE9DS1MpO1xyXG4gICAgbGV0IGJsb2NrTmFtZTogc3RyaW5nO1xyXG4gICAgbGV0IGJsb2NrSWR4OiBudW1iZXI7XHJcbiAgICBsZXQgYmxvY2tTaXplOiBudW1iZXI7XHJcbiAgICBsZXQgYmxvY2tCaW5kaW5nOiBudW1iZXI7XHJcblxyXG4gICAgbGV0IGJsb2NrVW5pZm9ybUNvdW50OiBudW1iZXI7XHJcbiAgICBsZXQgdUluZGljZXM6IFVpbnQzMkFycmF5O1xyXG4gICAgbGV0IGluZGljZXM6IG51bWJlcltdO1xyXG4gICAgLy8gbGV0IGdsVW5pZm9ybVR5cGVzOiBHTGVudW1bXTtcclxuICAgIGxldCBnbFVuaWZvcm1TaXplczogR0xlbnVtW107XHJcbiAgICBsZXQgZ2xVbmlmb3JtT2Zmc2V0czogR0xlbnVtW107XHJcbiAgICAvLyBsZXQgZ2xVbmlmb3JtQXJyYXlTdHJpZGU6IEdMaW50W107XHJcbiAgICBsZXQgZ2xVbmlmb3JtSW5mbzogV2ViR0xBY3RpdmVJbmZvIHwgbnVsbDtcclxuXHJcbiAgICBpZiAoYWN0aXZlQmxvY2tDb3VudCkge1xyXG4gICAgICAgIGdwdVNoYWRlci5nbEJsb2NrcyA9IG5ldyBBcnJheTxXZWJHTDJHUFVVbmlmb3JtQmxvY2s+KGFjdGl2ZUJsb2NrQ291bnQpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBiID0gMDsgYiA8IGFjdGl2ZUJsb2NrQ291bnQ7ICsrYikge1xyXG5cclxuICAgICAgICAgICAgYmxvY2tOYW1lID0gZ2wuZ2V0QWN0aXZlVW5pZm9ybUJsb2NrTmFtZShncHVTaGFkZXIuZ2xQcm9ncmFtLCBiKSE7XHJcbiAgICAgICAgICAgIGNvbnN0IG5hbWVPZmZzZXQgPSBibG9ja05hbWUuaW5kZXhPZignWycpO1xyXG4gICAgICAgICAgICBpZiAobmFtZU9mZnNldCAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIGJsb2NrTmFtZSA9IGJsb2NrTmFtZS5zdWJzdHIoMCwgbmFtZU9mZnNldCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGJsb2NrSWR4ID0gZ2wuZ2V0VW5pZm9ybUJsb2NrSW5kZXgoZ3B1U2hhZGVyLmdsUHJvZ3JhbSwgYmxvY2tOYW1lKTtcclxuICAgICAgICAgICAgYmxvY2tCaW5kaW5nID0gLTE7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgZ3B1U2hhZGVyLmJsb2Nrcy5sZW5ndGg7IGsrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYmxvY2sgPSBncHVTaGFkZXIuYmxvY2tzW2tdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJsb2NrLm5hbWUgPT09IGJsb2NrTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJsb2NrQmluZGluZyA9IGJsb2NrLmJpbmRpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChibG9ja0JpbmRpbmcgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICBlcnJvcihgQmxvY2sgJyR7YmxvY2tOYW1lfScgZG9lcyBub3QgYm91bmRgKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIGJsb2NrSWR4ID0gZ2wuZ2V0VW5pZm9ybUJsb2NrSW5kZXgoZ3B1U2hhZGVyLmdsUHJvZ3JhbSwgYmxvY2tOYW1lKTtcclxuICAgICAgICAgICAgICAgIGJsb2NrSWR4ID0gYjtcclxuICAgICAgICAgICAgICAgIGJsb2NrU2l6ZSA9IGdsLmdldEFjdGl2ZVVuaWZvcm1CbG9ja1BhcmFtZXRlcihncHVTaGFkZXIuZ2xQcm9ncmFtLCBibG9ja0lkeCwgZ2wuVU5JRk9STV9CTE9DS19EQVRBX1NJWkUpO1xyXG4gICAgICAgICAgICAgICAgYmxvY2tVbmlmb3JtQ291bnQgPSBnbC5nZXRBY3RpdmVVbmlmb3JtQmxvY2tQYXJhbWV0ZXIoZ3B1U2hhZGVyLmdsUHJvZ3JhbSwgYmxvY2tJZHgsIGdsLlVOSUZPUk1fQkxPQ0tfQUNUSVZFX1VOSUZPUk1TKTtcclxuXHJcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtQmxvY2tCaW5kaW5nKGdwdVNoYWRlci5nbFByb2dyYW0sIGJsb2NrSWR4LCBibG9ja0JpbmRpbmcpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGdsQmxvY2s6IFdlYkdMMkdQVVVuaWZvcm1CbG9jayA9IHtcclxuICAgICAgICAgICAgICAgICAgICBiaW5kaW5nOiBibG9ja0JpbmRpbmcsXHJcbiAgICAgICAgICAgICAgICAgICAgaWR4OiBibG9ja0lkeCxcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBibG9ja05hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogYmxvY2tTaXplLFxyXG4gICAgICAgICAgICAgICAgICAgIGdsVW5pZm9ybXM6IG5ldyBBcnJheTxJV2ViR0wyR1BVVW5pZm9ybT4oYmxvY2tVbmlmb3JtQ291bnQpLFxyXG4gICAgICAgICAgICAgICAgICAgIGdsQWN0aXZlVW5pZm9ybXM6IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgIGlzVW5pZm9ybVBhY2thZ2U6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBncHVTaGFkZXIuZ2xCbG9ja3NbYl0gPSBnbEJsb2NrO1xyXG5cclxuICAgICAgICAgICAgICAgIHVJbmRpY2VzID0gZ2wuZ2V0QWN0aXZlVW5pZm9ybUJsb2NrUGFyYW1ldGVyKGdwdVNoYWRlci5nbFByb2dyYW0sIGJsb2NrSWR4LCBnbC5VTklGT1JNX0JMT0NLX0FDVElWRV9VTklGT1JNX0lORElDRVMpO1xyXG4gICAgICAgICAgICAgICAgaW5kaWNlcyA9IG5ldyBBcnJheSh1SW5kaWNlcy5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPCB1SW5kaWNlcy5sZW5ndGg7ICsrbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGljZXNbbl0gPSB1SW5kaWNlc1tuXTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBnbFVuaWZvcm1UeXBlcyA9IGdsLmdldEFjdGl2ZVVuaWZvcm1zKGdwdVNoYWRlci5nbFByb2dyYW0sIGluZGljZXMsIGdsLlVOSUZPUk1fVFlQRSk7XHJcbiAgICAgICAgICAgICAgICBnbFVuaWZvcm1TaXplcyA9IGdsLmdldEFjdGl2ZVVuaWZvcm1zKGdwdVNoYWRlci5nbFByb2dyYW0sIGluZGljZXMsIGdsLlVOSUZPUk1fU0laRSk7XHJcbiAgICAgICAgICAgICAgICBnbFVuaWZvcm1PZmZzZXRzID0gZ2wuZ2V0QWN0aXZlVW5pZm9ybXMoZ3B1U2hhZGVyLmdsUHJvZ3JhbSwgaW5kaWNlcywgZ2wuVU5JRk9STV9PRkZTRVQpO1xyXG4gICAgICAgICAgICAgICAgLy8gZ2xVbmlmb3JtQXJyYXlTdHJpZGUgPSBnbC5nZXRBY3RpdmVVbmlmb3JtcyhncHVTaGFkZXIuZ2xQcm9ncmFtLCBpbmRpY2VzLCBnbC5VTklGT1JNX0FSUkFZX1NUUklERSk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgdSA9IDA7IHUgPCBibG9ja1VuaWZvcm1Db3VudDsgKyt1KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2xVbmlmb3JtSW5mbyA9IGdsLmdldEFjdGl2ZVVuaWZvcm0oZ3B1U2hhZGVyLmdsUHJvZ3JhbSwgdUluZGljZXNbdV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChnbFVuaWZvcm1JbmZvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0cmlkZSA9IFdlYkdMR2V0VHlwZVNpemUoZ2xVbmlmb3JtSW5mby50eXBlLCBnbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNpemUgPSBnbFVuaWZvcm1TaXplc1t1XSAqIHN0cmlkZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYmVnaW4gPSBnbFVuaWZvcm1PZmZzZXRzW3VdIC8gNDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY291bnQgPSBzaXplIC8gNDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXJyYXkgPSBuZXcgQXJyYXk8bnVtYmVyPihjb3VudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5LmZpbGwoMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbEJsb2NrLmdsVW5pZm9ybXNbdV0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaW5kaW5nOiAtMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGdsVW5pZm9ybUluZm8ubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFdlYkdMVHlwZVRvR0ZYVHlwZShnbFVuaWZvcm1JbmZvLnR5cGUsIGdsKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmlkZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50OiBnbFVuaWZvcm1JbmZvLnNpemUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBnbFVuaWZvcm1PZmZzZXRzW3VdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xUeXBlOiBnbFVuaWZvcm1JbmZvLnR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbExvYzogLTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBjcmVhdGUgdW5pZm9ybSBzYW1wbGVyc1xyXG4gICAgaWYgKGdwdVNoYWRlci5zYW1wbGVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgZ3B1U2hhZGVyLmdsU2FtcGxlcnMgPSBuZXcgQXJyYXk8V2ViR0wyR1BVVW5pZm9ybVNhbXBsZXI+KGdwdVNoYWRlci5zYW1wbGVycy5sZW5ndGgpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdwdVNoYWRlci5zYW1wbGVycy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBjb25zdCBzYW1wbGVyID0gZ3B1U2hhZGVyLnNhbXBsZXJzW2ldO1xyXG4gICAgICAgICAgICBncHVTaGFkZXIuZ2xTYW1wbGVyc1tpXSA9IHtcclxuICAgICAgICAgICAgICAgIGJpbmRpbmc6IHNhbXBsZXIuYmluZGluZyxcclxuICAgICAgICAgICAgICAgIG5hbWU6IHNhbXBsZXIubmFtZSxcclxuICAgICAgICAgICAgICAgIHR5cGU6IHNhbXBsZXIudHlwZSxcclxuICAgICAgICAgICAgICAgIHVuaXRzOiBbXSxcclxuICAgICAgICAgICAgICAgIGdsVHlwZTogR0ZYVHlwZVRvV2ViR0xUeXBlKHNhbXBsZXIudHlwZSwgZ2wpLFxyXG4gICAgICAgICAgICAgICAgZ2xMb2M6IC0xLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBwYXJzZSB1bmlmb3Jtc1xyXG4gICAgY29uc3QgYWN0aXZlVW5pZm9ybUNvdW50ID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihncHVTaGFkZXIuZ2xQcm9ncmFtLCBnbC5BQ1RJVkVfVU5JRk9STVMpO1xyXG4gICAgbGV0IHVuaXRJZHggPSAwO1xyXG5cclxuICAgIGNvbnN0IGdsQWN0aXZlU2FtcGxlcnM6IFdlYkdMMkdQVVVuaWZvcm1TYW1wbGVyW10gPSBbXTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFjdGl2ZVVuaWZvcm1Db3VudDsgKytpKSB7XHJcbiAgICAgICAgY29uc3QgdW5pZm9ybUluZm8gPSBnbC5nZXRBY3RpdmVVbmlmb3JtKGdwdVNoYWRlci5nbFByb2dyYW0sIGkpO1xyXG4gICAgICAgIGlmICh1bmlmb3JtSW5mbykge1xyXG4gICAgICAgICAgICBjb25zdCBnbExvYyA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihncHVTaGFkZXIuZ2xQcm9ncmFtLCB1bmlmb3JtSW5mby5uYW1lKTtcclxuICAgICAgICAgICAgaWYgKGdsTG9jICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmFyTmFtZTogc3RyaW5nO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZU9mZnNldCA9IHVuaWZvcm1JbmZvLm5hbWUuaW5kZXhPZignWycpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5hbWVPZmZzZXQgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyTmFtZSA9IHVuaWZvcm1JbmZvLm5hbWUuc3Vic3RyKDAsIG5hbWVPZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXJOYW1lID0gdW5pZm9ybUluZm8ubmFtZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBpc1NhbXBsZXIgPSAodW5pZm9ybUluZm8udHlwZSA9PT0gZ2wuU0FNUExFUl8yRCkgfHxcclxuICAgICAgICAgICAgICAgICAgICAodW5pZm9ybUluZm8udHlwZSA9PT0gZ2wuU0FNUExFUl9DVUJFKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaXNTYW1wbGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBncHVTaGFkZXIuZ2xTYW1wbGVycy5sZW5ndGg7IGsrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBnbFNhbXBsZXIgPSBncHVTaGFkZXIuZ2xTYW1wbGVyc1trXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdsU2FtcGxlci5uYW1lID09PSB2YXJOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsZXQgdmFyU2l6ZSA9IHN0cmlkZSAqIHVuaWZvcm1JbmZvLnNpemU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCB1bmlmb3JtSW5mby5zaXplOyArK3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbFNhbXBsZXIudW5pdHMucHVzaCh1bml0SWR4ICsgdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xTYW1wbGVyLmdsTG9jID0gZ2xMb2M7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pdElkeCArPSB1bmlmb3JtSW5mby5zaXplO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xBY3RpdmVTYW1wbGVycy5wdXNoKGdsU2FtcGxlcik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IC8vIGZvclxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSAvLyBmb3JcclxuXHJcbiAgICBpZiAoZ2xBY3RpdmVTYW1wbGVycy5sZW5ndGgpIHtcclxuICAgICAgICBpZiAoZGV2aWNlLnN0YXRlQ2FjaGUuZ2xQcm9ncmFtICE9PSBncHVTaGFkZXIuZ2xQcm9ncmFtKSB7XHJcbiAgICAgICAgICAgIGdsLnVzZVByb2dyYW0oZ3B1U2hhZGVyLmdsUHJvZ3JhbSk7XHJcbiAgICAgICAgICAgIGRldmljZS5zdGF0ZUNhY2hlLmdsUHJvZ3JhbSA9IGdwdVNoYWRlci5nbFByb2dyYW07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IGdsQWN0aXZlU2FtcGxlcnMubGVuZ3RoOyBrKyspIHtcclxuICAgICAgICAgICAgY29uc3QgZ2xTYW1wbGVyID0gZ2xBY3RpdmVTYW1wbGVyc1trXTtcclxuICAgICAgICAgICAgZ2wudW5pZm9ybTFpdihnbFNhbXBsZXIuZ2xMb2MsIGdsU2FtcGxlci51bml0cyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gV2ViR0wyQ21kRnVuY0Rlc3Ryb3lTaGFkZXIgKGRldmljZTogV2ViR0wyR0ZYRGV2aWNlLCBncHVTaGFkZXI6IFdlYkdMMkdQVVNoYWRlcikge1xyXG4gICAgaWYgKGdwdVNoYWRlci5nbFByb2dyYW0pIHtcclxuICAgICAgICBkZXZpY2UuZ2wuZGVsZXRlUHJvZ3JhbShncHVTaGFkZXIuZ2xQcm9ncmFtKTtcclxuICAgICAgICBncHVTaGFkZXIuZ2xQcm9ncmFtID0gbnVsbDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFdlYkdMMkNtZEZ1bmNDcmVhdGVJbnB1dEFzc2VtYmVyIChkZXZpY2U6IFdlYkdMMkdGWERldmljZSwgZ3B1SW5wdXRBc3NlbWJsZXI6IElXZWJHTDJHUFVJbnB1dEFzc2VtYmxlcikge1xyXG5cclxuICAgIGNvbnN0IGdsID0gZGV2aWNlLmdsO1xyXG5cclxuICAgIGdwdUlucHV0QXNzZW1ibGVyLmdsQXR0cmlicyA9IG5ldyBBcnJheTxXZWJHTDJBdHRyaWI+KGdwdUlucHV0QXNzZW1ibGVyLmF0dHJpYnV0ZXMubGVuZ3RoKTtcclxuXHJcbiAgICBjb25zdCBvZmZzZXRzID0gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3B1SW5wdXRBc3NlbWJsZXIuYXR0cmlidXRlcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIGNvbnN0IGF0dHJpYiA9IGdwdUlucHV0QXNzZW1ibGVyLmF0dHJpYnV0ZXNbaV07XHJcblxyXG4gICAgICAgIGNvbnN0IHN0cmVhbSA9IGF0dHJpYi5zdHJlYW0gIT09IHVuZGVmaW5lZCA/IGF0dHJpYi5zdHJlYW0gOiAwO1xyXG4gICAgICAgIC8vIGlmIChzdHJlYW0gPCBncHVJbnB1dEFzc2VtYmxlci5ncHVWZXJ0ZXhCdWZmZXJzLmxlbmd0aCkge1xyXG5cclxuICAgICAgICBjb25zdCBncHVCdWZmZXIgPSBncHVJbnB1dEFzc2VtYmxlci5ncHVWZXJ0ZXhCdWZmZXJzW3N0cmVhbV07XHJcblxyXG4gICAgICAgIGNvbnN0IGdsVHlwZSA9IEdGWEZvcm1hdFRvV2ViR0xUeXBlKGF0dHJpYi5mb3JtYXQsIGdsKTtcclxuICAgICAgICBjb25zdCBzaXplID0gR0ZYRm9ybWF0SW5mb3NbYXR0cmliLmZvcm1hdF0uc2l6ZTtcclxuXHJcbiAgICAgICAgZ3B1SW5wdXRBc3NlbWJsZXIuZ2xBdHRyaWJzW2ldID0ge1xyXG4gICAgICAgICAgICBuYW1lOiBhdHRyaWIubmFtZSxcclxuICAgICAgICAgICAgZ2xCdWZmZXI6IGdwdUJ1ZmZlci5nbEJ1ZmZlcixcclxuICAgICAgICAgICAgZ2xUeXBlLFxyXG4gICAgICAgICAgICBzaXplLFxyXG4gICAgICAgICAgICBjb3VudDogR0ZYRm9ybWF0SW5mb3NbYXR0cmliLmZvcm1hdF0uY291bnQsXHJcbiAgICAgICAgICAgIHN0cmlkZTogZ3B1QnVmZmVyLnN0cmlkZSxcclxuICAgICAgICAgICAgY29tcG9uZW50Q291bnQ6IFdlYkdMR2V0Q29tcG9uZW50Q291bnQoZ2xUeXBlLCBnbCksXHJcbiAgICAgICAgICAgIGlzTm9ybWFsaXplZDogKGF0dHJpYi5pc05vcm1hbGl6ZWQgIT09IHVuZGVmaW5lZCA/IGF0dHJpYi5pc05vcm1hbGl6ZWQgOiBmYWxzZSksXHJcbiAgICAgICAgICAgIGlzSW5zdGFuY2VkOiAoYXR0cmliLmlzSW5zdGFuY2VkICE9PSB1bmRlZmluZWQgPyBhdHRyaWIuaXNJbnN0YW5jZWQgOiBmYWxzZSksXHJcbiAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0c1tzdHJlYW1dLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIG9mZnNldHNbc3RyZWFtXSArPSBzaXplO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gV2ViR0wyQ21kRnVuY0Rlc3Ryb3lJbnB1dEFzc2VtYmxlciAoZGV2aWNlOiBXZWJHTDJHRlhEZXZpY2UsIGdwdUlucHV0QXNzZW1ibGVyOiBJV2ViR0wyR1BVSW5wdXRBc3NlbWJsZXIpIHtcclxuICAgIGNvbnN0IGl0ID0gZ3B1SW5wdXRBc3NlbWJsZXIuZ2xWQU9zLnZhbHVlcygpO1xyXG4gICAgbGV0IHJlcyA9IGl0Lm5leHQoKTtcclxuICAgIHdoaWxlICghcmVzLmRvbmUpIHtcclxuICAgICAgICBkZXZpY2UuZ2wuZGVsZXRlVmVydGV4QXJyYXkocmVzLnZhbHVlKTtcclxuICAgICAgICByZXMgPSBpdC5uZXh0KCk7XHJcbiAgICB9XHJcbiAgICBncHVJbnB1dEFzc2VtYmxlci5nbFZBT3MuY2xlYXIoKTtcclxufVxyXG5cclxuaW50ZXJmYWNlIElXZWJHTDJHRlhTdGF0ZUNhY2hlIHtcclxuICAgIGdwdUlucHV0QXNzZW1ibGVyOiBJV2ViR0wyR1BVSW5wdXRBc3NlbWJsZXIgfCBudWxsO1xyXG4gICAgZ3B1U2hhZGVyOiBXZWJHTDJHUFVTaGFkZXIgfCBudWxsO1xyXG4gICAgZ2xQcmltaXRpdmU6IG51bWJlcjtcclxufVxyXG5jb25zdCBnZnhTdGF0ZUNhY2hlOiBJV2ViR0wyR0ZYU3RhdGVDYWNoZSA9IHtcclxuICAgIGdwdUlucHV0QXNzZW1ibGVyOiBudWxsLFxyXG4gICAgZ3B1U2hhZGVyOiBudWxsLFxyXG4gICAgZ2xQcmltaXRpdmU6IDAsXHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gV2ViR0wyQ21kRnVuY0JlZ2luUmVuZGVyUGFzcyAoXHJcbiAgICBkZXZpY2U6IFdlYkdMMkdGWERldmljZSxcclxuICAgIGdwdUZyYW1lYnVmZmVyOiBXZWJHTDJHUFVGcmFtZWJ1ZmZlciB8IG51bGwsXHJcbiAgICByZW5kZXJBcmVhOiBJR0ZYUmVjdCxcclxuICAgIGNsZWFyRmxhZzogR0ZYQ2xlYXJGbGFnLFxyXG4gICAgY2xlYXJDb2xvcnM6IElHRlhDb2xvcltdLFxyXG4gICAgY2xlYXJEZXB0aDogbnVtYmVyLFxyXG4gICAgY2xlYXJTdGVuY2lsOiBudW1iZXIpIHtcclxuXHJcbiAgICBnZnhTdGF0ZUNhY2hlLmdwdUlucHV0QXNzZW1ibGVyID0gbnVsbDtcclxuICAgIGdmeFN0YXRlQ2FjaGUuZ3B1U2hhZGVyID0gbnVsbDtcclxuXHJcbiAgICBjb25zdCBnbCA9IGRldmljZS5nbDtcclxuICAgIGNvbnN0IGNhY2hlID0gZGV2aWNlLnN0YXRlQ2FjaGU7XHJcblxyXG4gICAgbGV0IGNsZWFyczogR0xiaXRmaWVsZCA9IDA7XHJcblxyXG4gICAgaWYgKGdwdUZyYW1lYnVmZmVyKSB7XHJcbiAgICAgICAgaWYgKGNhY2hlLmdsRnJhbWVidWZmZXIgIT09IGdwdUZyYW1lYnVmZmVyLmdsRnJhbWVidWZmZXIpIHtcclxuICAgICAgICAgICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBncHVGcmFtZWJ1ZmZlci5nbEZyYW1lYnVmZmVyKTtcclxuICAgICAgICAgICAgY2FjaGUuZ2xGcmFtZWJ1ZmZlciA9IGdwdUZyYW1lYnVmZmVyLmdsRnJhbWVidWZmZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2FjaGUudmlld3BvcnQubGVmdCAhPT0gcmVuZGVyQXJlYS54IHx8XHJcbiAgICAgICAgICAgIGNhY2hlLnZpZXdwb3J0LnRvcCAhPT0gcmVuZGVyQXJlYS55IHx8XHJcbiAgICAgICAgICAgIGNhY2hlLnZpZXdwb3J0LndpZHRoICE9PSByZW5kZXJBcmVhLndpZHRoIHx8XHJcbiAgICAgICAgICAgIGNhY2hlLnZpZXdwb3J0LmhlaWdodCAhPT0gcmVuZGVyQXJlYS5oZWlnaHQpIHtcclxuXHJcbiAgICAgICAgICAgIGdsLnZpZXdwb3J0KHJlbmRlckFyZWEueCwgcmVuZGVyQXJlYS55LCByZW5kZXJBcmVhLndpZHRoLCByZW5kZXJBcmVhLmhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICBjYWNoZS52aWV3cG9ydC5sZWZ0ID0gcmVuZGVyQXJlYS54O1xyXG4gICAgICAgICAgICBjYWNoZS52aWV3cG9ydC50b3AgPSByZW5kZXJBcmVhLnk7XHJcbiAgICAgICAgICAgIGNhY2hlLnZpZXdwb3J0LndpZHRoID0gcmVuZGVyQXJlYS53aWR0aDtcclxuICAgICAgICAgICAgY2FjaGUudmlld3BvcnQuaGVpZ2h0ID0gcmVuZGVyQXJlYS5oZWlnaHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2FjaGUuc2Npc3NvclJlY3QueCAhPT0gcmVuZGVyQXJlYS54IHx8XHJcbiAgICAgICAgICAgIGNhY2hlLnNjaXNzb3JSZWN0LnkgIT09IHJlbmRlckFyZWEueSB8fFxyXG4gICAgICAgICAgICBjYWNoZS5zY2lzc29yUmVjdC53aWR0aCAhPT0gcmVuZGVyQXJlYS53aWR0aCB8fFxyXG4gICAgICAgICAgICBjYWNoZS5zY2lzc29yUmVjdC5oZWlnaHQgIT09IHJlbmRlckFyZWEuaGVpZ2h0KSB7XHJcblxyXG4gICAgICAgICAgICBnbC5zY2lzc29yKHJlbmRlckFyZWEueCwgcmVuZGVyQXJlYS55LCByZW5kZXJBcmVhLndpZHRoLCByZW5kZXJBcmVhLmhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICBjYWNoZS5zY2lzc29yUmVjdC54ID0gcmVuZGVyQXJlYS54O1xyXG4gICAgICAgICAgICBjYWNoZS5zY2lzc29yUmVjdC55ID0gcmVuZGVyQXJlYS55O1xyXG4gICAgICAgICAgICBjYWNoZS5zY2lzc29yUmVjdC53aWR0aCA9IHJlbmRlckFyZWEud2lkdGg7XHJcbiAgICAgICAgICAgIGNhY2hlLnNjaXNzb3JSZWN0LmhlaWdodCA9IHJlbmRlckFyZWEuaGVpZ2h0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgY3VyR1BVUmVuZGVyUGFzcyA9IGdwdUZyYW1lYnVmZmVyLmdwdVJlbmRlclBhc3M7XHJcbiAgICAgICAgY29uc3QgaW52YWxpZGF0ZUF0dGFjaG1lbnRzOiBHTGVudW1bXSA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNsZWFyQ29sb3JzLmxlbmd0aDsgKytqKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yQXR0YWNobWVudCA9IGN1ckdQVVJlbmRlclBhc3MuY29sb3JBdHRhY2htZW50c1tqXTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb2xvckF0dGFjaG1lbnQuZm9ybWF0ICE9PSBHRlhGb3JtYXQuVU5LTk9XTikge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChjb2xvckF0dGFjaG1lbnQubG9hZE9wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBHRlhMb2FkT3AuTE9BRDogYnJlYWs7IC8vIEdMIGRlZmF1bHQgYmVoYXZpb3JcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEdGWExvYWRPcC5DTEVBUjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2xlYXJGbGFnICYgR0ZYQ2xlYXJGbGFnLkNPTE9SKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FjaGUuYnMudGFyZ2V0c1swXS5ibGVuZENvbG9yTWFzayAhPT0gR0ZYQ29sb3JNYXNrLkFMTCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsLmNvbG9yTWFzayh0cnVlLCB0cnVlLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWdwdUZyYW1lYnVmZmVyLmlzT2Zmc2NyZWVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xlYXJDb2xvciA9IGNsZWFyQ29sb3JzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsLmNsZWFyQ29sb3IoY2xlYXJDb2xvci5yLCBjbGVhckNvbG9yLmcsIGNsZWFyQ29sb3IuYiwgY2xlYXJDb2xvci5hKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhcnMgfD0gZ2wuQ09MT1JfQlVGRkVSX0JJVDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2YzMnY0WzBdID0gY2xlYXJDb2xvcnNbal0ucjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZjMydjRbMV0gPSBjbGVhckNvbG9yc1tqXS5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9mMzJ2NFsyXSA9IGNsZWFyQ29sb3JzW2pdLmI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2YzMnY0WzNdID0gY2xlYXJDb2xvcnNbal0uYTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbC5jbGVhckJ1ZmZlcmZ2KGdsLkNPTE9SLCBqLCBfZjMydjQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEdGWExvYWRPcC5ESVNDQVJEOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGludmFsaWRhdGUgdGhlIGZyYW1lYnVmZmVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGludmFsaWRhdGVBdHRhY2htZW50cy5wdXNoKGdsLkNPTE9SX0FUVEFDSE1FTlQwICsgaik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSAvLyBpZiAoY3VyR1BVUmVuZGVyUGFzcylcclxuXHJcbiAgICAgICAgaWYgKGN1ckdQVVJlbmRlclBhc3MuZGVwdGhTdGVuY2lsQXR0YWNobWVudCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKGN1ckdQVVJlbmRlclBhc3MuZGVwdGhTdGVuY2lsQXR0YWNobWVudC5mb3JtYXQgIT09IEdGWEZvcm1hdC5VTktOT1dOKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGN1ckdQVVJlbmRlclBhc3MuZGVwdGhTdGVuY2lsQXR0YWNobWVudC5kZXB0aExvYWRPcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgR0ZYTG9hZE9wLkxPQUQ6IGJyZWFrOyAvLyBHTCBkZWZhdWx0IGJlaGF2aW9yXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBHRlhMb2FkT3AuQ0xFQVI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsZWFyRmxhZyAmIEdGWENsZWFyRmxhZy5ERVBUSCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjYWNoZS5kc3MuZGVwdGhXcml0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsLmRlcHRoTWFzayh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbC5jbGVhckRlcHRoKGNsZWFyRGVwdGgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFycyB8PSBnbC5ERVBUSF9CVUZGRVJfQklUO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEdGWExvYWRPcC5ESVNDQVJEOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGludmFsaWRhdGUgdGhlIGZyYW1lYnVmZmVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGludmFsaWRhdGVBdHRhY2htZW50cy5wdXNoKGdsLkRFUFRIX0FUVEFDSE1FTlQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoR0ZYRm9ybWF0SW5mb3NbY3VyR1BVUmVuZGVyUGFzcy5kZXB0aFN0ZW5jaWxBdHRhY2htZW50LmZvcm1hdF0uaGFzU3RlbmNpbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoY3VyR1BVUmVuZGVyUGFzcy5kZXB0aFN0ZW5jaWxBdHRhY2htZW50LnN0ZW5jaWxMb2FkT3ApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBHRlhMb2FkT3AuTE9BRDogYnJlYWs7IC8vIEdMIGRlZmF1bHQgYmVoYXZpb3JcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBHRlhMb2FkT3AuQ0xFQVI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbGVhckZsYWcgJiBHRlhDbGVhckZsYWcuU1RFTkNJTCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2FjaGUuZHNzLnN0ZW5jaWxXcml0ZU1hc2tGcm9udCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbC5zdGVuY2lsTWFza1NlcGFyYXRlKGdsLkZST05ULCAweGZmZmYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjYWNoZS5kc3Muc3RlbmNpbFdyaXRlTWFza0JhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2wuc3RlbmNpbE1hc2tTZXBhcmF0ZShnbC5CQUNLLCAweGZmZmYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2wuY2xlYXJTdGVuY2lsKGNsZWFyU3RlbmNpbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJzIHw9IGdsLlNURU5DSUxfQlVGRkVSX0JJVDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgR0ZYTG9hZE9wLkRJU0NBUkQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGludmFsaWRhdGUgdGhlIGZyYW1lYnVmZmVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnZhbGlkYXRlQXR0YWNobWVudHMucHVzaChnbC5TVEVOQ0lMX0FUVEFDSE1FTlQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IC8vIGlmIChjdXJHUFVSZW5kZXJQYXNzLmRlcHRoU3RlbmNpbEF0dGFjaG1lbnQpXHJcblxyXG4gICAgICAgIGlmIChpbnZhbGlkYXRlQXR0YWNobWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGdsLmludmFsaWRhdGVGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgaW52YWxpZGF0ZUF0dGFjaG1lbnRzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjbGVhcnMpIHtcclxuICAgICAgICAgICAgZ2wuY2xlYXIoY2xlYXJzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHJlc3RvcmUgc3RhdGVzXHJcbiAgICAgICAgaWYgKGNsZWFycyAmIGdsLkNPTE9SX0JVRkZFUl9CSVQpIHtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yTWFzayA9IGNhY2hlLmJzLnRhcmdldHNbMF0uYmxlbmRDb2xvck1hc2s7XHJcbiAgICAgICAgICAgIGlmIChjb2xvck1hc2sgIT09IEdGWENvbG9yTWFzay5BTEwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSAoY29sb3JNYXNrICYgR0ZYQ29sb3JNYXNrLlIpICE9PSBHRlhDb2xvck1hc2suTk9ORTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGcgPSAoY29sb3JNYXNrICYgR0ZYQ29sb3JNYXNrLkcpICE9PSBHRlhDb2xvck1hc2suTk9ORTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGIgPSAoY29sb3JNYXNrICYgR0ZYQ29sb3JNYXNrLkIpICE9PSBHRlhDb2xvck1hc2suTk9ORTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGEgPSAoY29sb3JNYXNrICYgR0ZYQ29sb3JNYXNrLkEpICE9PSBHRlhDb2xvck1hc2suTk9ORTtcclxuICAgICAgICAgICAgICAgIGdsLmNvbG9yTWFzayhyLCBnLCBiLCBhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKChjbGVhcnMgJiBnbC5ERVBUSF9CVUZGRVJfQklUKSAmJlxyXG4gICAgICAgICAgICAhY2FjaGUuZHNzLmRlcHRoV3JpdGUpIHtcclxuICAgICAgICAgICAgZ2wuZGVwdGhNYXNrKGZhbHNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjbGVhcnMgJiBnbC5TVEVOQ0lMX0JVRkZFUl9CSVQpIHtcclxuICAgICAgICAgICAgaWYgKCFjYWNoZS5kc3Muc3RlbmNpbFdyaXRlTWFza0Zyb250KSB7XHJcbiAgICAgICAgICAgICAgICBnbC5zdGVuY2lsTWFza1NlcGFyYXRlKGdsLkZST05ULCAwKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFjYWNoZS5kc3Muc3RlbmNpbFdyaXRlTWFza0JhY2spIHtcclxuICAgICAgICAgICAgICAgIGdsLnN0ZW5jaWxNYXNrU2VwYXJhdGUoZ2wuQkFDSywgMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9IC8vIGlmIChncHVGcmFtZWJ1ZmZlcilcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFdlYkdMMkNtZEZ1bmNCaW5kU3RhdGVzIChcclxuICAgIGRldmljZTogV2ViR0wyR0ZYRGV2aWNlLFxyXG4gICAgZ3B1UGlwZWxpbmVTdGF0ZTogV2ViR0wyR1BVUGlwZWxpbmVTdGF0ZSB8IG51bGwsXHJcbiAgICBncHVCaW5kaW5nTGF5b3V0OiBXZWJHTDJHUFVCaW5kaW5nTGF5b3V0IHwgbnVsbCxcclxuICAgIGdwdUlucHV0QXNzZW1ibGVyOiBJV2ViR0wyR1BVSW5wdXRBc3NlbWJsZXIgfCBudWxsLFxyXG4gICAgdmlld3BvcnQ6IElHRlhWaWV3cG9ydCB8IG51bGwsXHJcbiAgICBzY2lzc29yOiBJR0ZYUmVjdCB8IG51bGwsXHJcbiAgICBsaW5lV2lkdGg6IG51bWJlciB8IG51bGwsXHJcbiAgICBkZXB0aEJpYXM6IElXZWJHTDJEZXB0aEJpYXMgfCBudWxsLFxyXG4gICAgYmxlbmRDb25zdGFudHM6IG51bWJlcltdIHwgbnVsbCxcclxuICAgIGRlcHRoQm91bmRzOiBJV2ViR0wyRGVwdGhCb3VuZHMgfCBudWxsLFxyXG4gICAgc3RlbmNpbFdyaXRlTWFzazogSVdlYkdMMlN0ZW5jaWxXcml0ZU1hc2sgfCBudWxsLFxyXG4gICAgc3RlbmNpbENvbXBhcmVNYXNrOiBJV2ViR0wyU3RlbmNpbENvbXBhcmVNYXNrIHwgbnVsbCkge1xyXG5cclxuICAgIGNvbnN0IGdsID0gZGV2aWNlLmdsO1xyXG4gICAgY29uc3QgY2FjaGUgPSBkZXZpY2Uuc3RhdGVDYWNoZTtcclxuXHJcbiAgICBsZXQgaXNTaGFkZXJDaGFuZ2VkID0gZmFsc2U7XHJcbiAgICBsZXQgZ3B1U2hhZGVyOiBXZWJHTDJHUFVTaGFkZXIgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgICBpZiAoZ3B1UGlwZWxpbmVTdGF0ZSkge1xyXG4gICAgICAgIGdmeFN0YXRlQ2FjaGUuZ2xQcmltaXRpdmUgPSBncHVQaXBlbGluZVN0YXRlLmdsUHJpbWl0aXZlO1xyXG5cclxuICAgICAgICBpZiAoZ3B1UGlwZWxpbmVTdGF0ZS5ncHVTaGFkZXIpIHtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGdsUHJvZ3JhbSA9IGdwdVBpcGVsaW5lU3RhdGUuZ3B1U2hhZGVyLmdsUHJvZ3JhbTtcclxuICAgICAgICAgICAgaWYgKGNhY2hlLmdsUHJvZ3JhbSAhPT0gZ2xQcm9ncmFtKSB7XHJcbiAgICAgICAgICAgICAgICBnbC51c2VQcm9ncmFtKGdsUHJvZ3JhbSk7XHJcbiAgICAgICAgICAgICAgICBjYWNoZS5nbFByb2dyYW0gPSBnbFByb2dyYW07XHJcbiAgICAgICAgICAgICAgICBpc1NoYWRlckNoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZnhTdGF0ZUNhY2hlLmdwdVNoYWRlciA9IGdwdVNoYWRlciA9IGdwdVBpcGVsaW5lU3RhdGUuZ3B1U2hhZGVyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gcmFzdGVyaXplciBzdGF0ZVxyXG4gICAgICAgIGNvbnN0IHJzID0gZ3B1UGlwZWxpbmVTdGF0ZS5ycztcclxuICAgICAgICBpZiAocnMpIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChjYWNoZS5ycy5jdWxsTW9kZSAhPT0gcnMuY3VsbE1vZGUpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAocnMuY3VsbE1vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIEdGWEN1bGxNb2RlLk5PTkU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2wuZGlzYWJsZShnbC5DVUxMX0ZBQ0UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBHRlhDdWxsTW9kZS5GUk9OVDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbC5lbmFibGUoZ2wuQ1VMTF9GQUNFKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2wuY3VsbEZhY2UoZ2wuRlJPTlQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBHRlhDdWxsTW9kZS5CQUNLOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLmVuYWJsZShnbC5DVUxMX0ZBQ0UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbC5jdWxsRmFjZShnbC5CQUNLKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZGV2aWNlLnN0YXRlQ2FjaGUucnMuY3VsbE1vZGUgPSBycy5jdWxsTW9kZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgaXNGcm9udEZhY2VDQ1cgPSBkZXZpY2UucmV2ZXJzZUNXID8gIXJzLmlzRnJvbnRGYWNlQ0NXIDogcnMuaXNGcm9udEZhY2VDQ1c7XHJcbiAgICAgICAgICAgIGlmIChkZXZpY2Uuc3RhdGVDYWNoZS5ycy5pc0Zyb250RmFjZUNDVyAhPT0gaXNGcm9udEZhY2VDQ1cpIHtcclxuICAgICAgICAgICAgICAgIGdsLmZyb250RmFjZShpc0Zyb250RmFjZUNDVyA/IGdsLkNDVyA6IGdsLkNXKTtcclxuICAgICAgICAgICAgICAgIGRldmljZS5zdGF0ZUNhY2hlLnJzLmlzRnJvbnRGYWNlQ0NXID0gaXNGcm9udEZhY2VDQ1c7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICgoZGV2aWNlLnN0YXRlQ2FjaGUucnMuZGVwdGhCaWFzICE9PSBycy5kZXB0aEJpYXMpIHx8XHJcbiAgICAgICAgICAgICAgICAoZGV2aWNlLnN0YXRlQ2FjaGUucnMuZGVwdGhCaWFzU2xvcCAhPT0gcnMuZGVwdGhCaWFzU2xvcCkpIHtcclxuICAgICAgICAgICAgICAgIGdsLnBvbHlnb25PZmZzZXQocnMuZGVwdGhCaWFzLCBycy5kZXB0aEJpYXNTbG9wKTtcclxuICAgICAgICAgICAgICAgIGRldmljZS5zdGF0ZUNhY2hlLnJzLmRlcHRoQmlhcyA9IHJzLmRlcHRoQmlhcztcclxuICAgICAgICAgICAgICAgIGRldmljZS5zdGF0ZUNhY2hlLnJzLmRlcHRoQmlhc1Nsb3AgPSBycy5kZXB0aEJpYXNTbG9wO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZGV2aWNlLnN0YXRlQ2FjaGUucnMubGluZVdpZHRoICE9PSBycy5saW5lV2lkdGgpIHtcclxuICAgICAgICAgICAgICAgIGdsLmxpbmVXaWR0aChycy5saW5lV2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgZGV2aWNlLnN0YXRlQ2FjaGUucnMubGluZVdpZHRoID0gcnMubGluZVdpZHRoO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gLy8gcmFzdGVyaXphdGVyIHN0YXRlXHJcblxyXG4gICAgICAgIC8vIGRlcHRoLXN0ZW5jaWwgc3RhdGVcclxuICAgICAgICBjb25zdCBkc3MgPSBncHVQaXBlbGluZVN0YXRlLmRzcztcclxuICAgICAgICBpZiAoZHNzKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoY2FjaGUuZHNzLmRlcHRoVGVzdCAhPT0gZHNzLmRlcHRoVGVzdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRzcy5kZXB0aFRlc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICBnbC5lbmFibGUoZ2wuREVQVEhfVEVTVCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGdsLmRpc2FibGUoZ2wuREVQVEhfVEVTVCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYWNoZS5kc3MuZGVwdGhUZXN0ID0gZHNzLmRlcHRoVGVzdDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNhY2hlLmRzcy5kZXB0aFdyaXRlICE9PSBkc3MuZGVwdGhXcml0ZSkge1xyXG4gICAgICAgICAgICAgICAgZ2wuZGVwdGhNYXNrKGRzcy5kZXB0aFdyaXRlKTtcclxuICAgICAgICAgICAgICAgIGNhY2hlLmRzcy5kZXB0aFdyaXRlID0gZHNzLmRlcHRoV3JpdGU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjYWNoZS5kc3MuZGVwdGhGdW5jICE9PSBkc3MuZGVwdGhGdW5jKSB7XHJcbiAgICAgICAgICAgICAgICBnbC5kZXB0aEZ1bmMoV2ViR0xDbXBGdW5jc1tkc3MuZGVwdGhGdW5jXSk7XHJcbiAgICAgICAgICAgICAgICBjYWNoZS5kc3MuZGVwdGhGdW5jID0gZHNzLmRlcHRoRnVuYztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gZnJvbnRcclxuICAgICAgICAgICAgaWYgKChjYWNoZS5kc3Muc3RlbmNpbFRlc3RGcm9udCAhPT0gZHNzLnN0ZW5jaWxUZXN0RnJvbnQpIHx8XHJcbiAgICAgICAgICAgICAgICAoY2FjaGUuZHNzLnN0ZW5jaWxUZXN0QmFjayAhPT0gZHNzLnN0ZW5jaWxUZXN0QmFjaykpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkc3Muc3RlbmNpbFRlc3RGcm9udCB8fCBkc3Muc3RlbmNpbFRlc3RCYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2wuZW5hYmxlKGdsLlNURU5DSUxfVEVTVCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGdsLmRpc2FibGUoZ2wuU1RFTkNJTF9URVNUKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhY2hlLmRzcy5zdGVuY2lsVGVzdEZyb250ID0gZHNzLnN0ZW5jaWxUZXN0RnJvbnQ7XHJcbiAgICAgICAgICAgICAgICBjYWNoZS5kc3Muc3RlbmNpbFRlc3RCYWNrID0gZHNzLnN0ZW5jaWxUZXN0QmFjaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKChjYWNoZS5kc3Muc3RlbmNpbEZ1bmNGcm9udCAhPT0gZHNzLnN0ZW5jaWxGdW5jRnJvbnQpIHx8XHJcbiAgICAgICAgICAgICAgICAoY2FjaGUuZHNzLnN0ZW5jaWxSZWZGcm9udCAhPT0gZHNzLnN0ZW5jaWxSZWZGcm9udCkgfHxcclxuICAgICAgICAgICAgICAgIChjYWNoZS5kc3Muc3RlbmNpbFJlYWRNYXNrRnJvbnQgIT09IGRzcy5zdGVuY2lsUmVhZE1hc2tGcm9udCkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBnbC5zdGVuY2lsRnVuY1NlcGFyYXRlKFxyXG4gICAgICAgICAgICAgICAgICAgIGdsLkZST05ULFxyXG4gICAgICAgICAgICAgICAgICAgIFdlYkdMQ21wRnVuY3NbZHNzLnN0ZW5jaWxGdW5jRnJvbnRdLFxyXG4gICAgICAgICAgICAgICAgICAgIGRzcy5zdGVuY2lsUmVmRnJvbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgZHNzLnN0ZW5jaWxSZWFkTWFza0Zyb250KTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYWNoZS5kc3Muc3RlbmNpbEZ1bmNGcm9udCA9IGRzcy5zdGVuY2lsRnVuY0Zyb250O1xyXG4gICAgICAgICAgICAgICAgY2FjaGUuZHNzLnN0ZW5jaWxSZWZGcm9udCA9IGRzcy5zdGVuY2lsUmVmRnJvbnQ7XHJcbiAgICAgICAgICAgICAgICBjYWNoZS5kc3Muc3RlbmNpbFJlYWRNYXNrRnJvbnQgPSBkc3Muc3RlbmNpbFJlYWRNYXNrRnJvbnQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICgoY2FjaGUuZHNzLnN0ZW5jaWxGYWlsT3BGcm9udCAhPT0gZHNzLnN0ZW5jaWxGYWlsT3BGcm9udCkgfHxcclxuICAgICAgICAgICAgICAgIChjYWNoZS5kc3Muc3RlbmNpbFpGYWlsT3BGcm9udCAhPT0gZHNzLnN0ZW5jaWxaRmFpbE9wRnJvbnQpIHx8XHJcbiAgICAgICAgICAgICAgICAoY2FjaGUuZHNzLnN0ZW5jaWxQYXNzT3BGcm9udCAhPT0gZHNzLnN0ZW5jaWxQYXNzT3BGcm9udCkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBnbC5zdGVuY2lsT3BTZXBhcmF0ZShcclxuICAgICAgICAgICAgICAgICAgICBnbC5GUk9OVCxcclxuICAgICAgICAgICAgICAgICAgICBXZWJHTFN0ZW5jaWxPcHNbZHNzLnN0ZW5jaWxGYWlsT3BGcm9udF0sXHJcbiAgICAgICAgICAgICAgICAgICAgV2ViR0xTdGVuY2lsT3BzW2Rzcy5zdGVuY2lsWkZhaWxPcEZyb250XSxcclxuICAgICAgICAgICAgICAgICAgICBXZWJHTFN0ZW5jaWxPcHNbZHNzLnN0ZW5jaWxQYXNzT3BGcm9udF0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhY2hlLmRzcy5zdGVuY2lsRmFpbE9wRnJvbnQgPSBkc3Muc3RlbmNpbEZhaWxPcEZyb250O1xyXG4gICAgICAgICAgICAgICAgY2FjaGUuZHNzLnN0ZW5jaWxaRmFpbE9wRnJvbnQgPSBkc3Muc3RlbmNpbFpGYWlsT3BGcm9udDtcclxuICAgICAgICAgICAgICAgIGNhY2hlLmRzcy5zdGVuY2lsUGFzc09wRnJvbnQgPSBkc3Muc3RlbmNpbFBhc3NPcEZyb250O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoY2FjaGUuZHNzLnN0ZW5jaWxXcml0ZU1hc2tGcm9udCAhPT0gZHNzLnN0ZW5jaWxXcml0ZU1hc2tGcm9udCkge1xyXG4gICAgICAgICAgICAgICAgZ2wuc3RlbmNpbE1hc2tTZXBhcmF0ZShnbC5GUk9OVCwgZHNzLnN0ZW5jaWxXcml0ZU1hc2tGcm9udCk7XHJcbiAgICAgICAgICAgICAgICBjYWNoZS5kc3Muc3RlbmNpbFdyaXRlTWFza0Zyb250ID0gZHNzLnN0ZW5jaWxXcml0ZU1hc2tGcm9udDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gYmFja1xyXG4gICAgICAgICAgICBpZiAoKGNhY2hlLmRzcy5zdGVuY2lsRnVuY0JhY2sgIT09IGRzcy5zdGVuY2lsRnVuY0JhY2spIHx8XHJcbiAgICAgICAgICAgICAgICAoY2FjaGUuZHNzLnN0ZW5jaWxSZWZCYWNrICE9PSBkc3Muc3RlbmNpbFJlZkJhY2spIHx8XHJcbiAgICAgICAgICAgICAgICAoY2FjaGUuZHNzLnN0ZW5jaWxSZWFkTWFza0JhY2sgIT09IGRzcy5zdGVuY2lsUmVhZE1hc2tCYWNrKSkge1xyXG5cclxuICAgICAgICAgICAgICAgIGdsLnN0ZW5jaWxGdW5jU2VwYXJhdGUoXHJcbiAgICAgICAgICAgICAgICAgICAgZ2wuQkFDSyxcclxuICAgICAgICAgICAgICAgICAgICBXZWJHTENtcEZ1bmNzW2Rzcy5zdGVuY2lsRnVuY0JhY2tdLFxyXG4gICAgICAgICAgICAgICAgICAgIGRzcy5zdGVuY2lsUmVmQmFjayxcclxuICAgICAgICAgICAgICAgICAgICBkc3Muc3RlbmNpbFJlYWRNYXNrQmFjayk7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FjaGUuZHNzLnN0ZW5jaWxGdW5jQmFjayA9IGRzcy5zdGVuY2lsRnVuY0JhY2s7XHJcbiAgICAgICAgICAgICAgICBjYWNoZS5kc3Muc3RlbmNpbFJlZkJhY2sgPSBkc3Muc3RlbmNpbFJlZkJhY2s7XHJcbiAgICAgICAgICAgICAgICBjYWNoZS5kc3Muc3RlbmNpbFJlYWRNYXNrQmFjayA9IGRzcy5zdGVuY2lsUmVhZE1hc2tCYWNrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoKGNhY2hlLmRzcy5zdGVuY2lsRmFpbE9wQmFjayAhPT0gZHNzLnN0ZW5jaWxGYWlsT3BCYWNrKSB8fFxyXG4gICAgICAgICAgICAgICAgKGNhY2hlLmRzcy5zdGVuY2lsWkZhaWxPcEJhY2sgIT09IGRzcy5zdGVuY2lsWkZhaWxPcEJhY2spIHx8XHJcbiAgICAgICAgICAgICAgICAoY2FjaGUuZHNzLnN0ZW5jaWxQYXNzT3BCYWNrICE9PSBkc3Muc3RlbmNpbFBhc3NPcEJhY2spKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgZ2wuc3RlbmNpbE9wU2VwYXJhdGUoXHJcbiAgICAgICAgICAgICAgICAgICAgZ2wuQkFDSyxcclxuICAgICAgICAgICAgICAgICAgICBXZWJHTFN0ZW5jaWxPcHNbZHNzLnN0ZW5jaWxGYWlsT3BCYWNrXSxcclxuICAgICAgICAgICAgICAgICAgICBXZWJHTFN0ZW5jaWxPcHNbZHNzLnN0ZW5jaWxaRmFpbE9wQmFja10sXHJcbiAgICAgICAgICAgICAgICAgICAgV2ViR0xTdGVuY2lsT3BzW2Rzcy5zdGVuY2lsUGFzc09wQmFja10pO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhY2hlLmRzcy5zdGVuY2lsRmFpbE9wQmFjayA9IGRzcy5zdGVuY2lsRmFpbE9wQmFjaztcclxuICAgICAgICAgICAgICAgIGNhY2hlLmRzcy5zdGVuY2lsWkZhaWxPcEJhY2sgPSBkc3Muc3RlbmNpbFpGYWlsT3BCYWNrO1xyXG4gICAgICAgICAgICAgICAgY2FjaGUuZHNzLnN0ZW5jaWxQYXNzT3BCYWNrID0gZHNzLnN0ZW5jaWxQYXNzT3BCYWNrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoY2FjaGUuZHNzLnN0ZW5jaWxXcml0ZU1hc2tCYWNrICE9PSBkc3Muc3RlbmNpbFdyaXRlTWFza0JhY2spIHtcclxuICAgICAgICAgICAgICAgIGdsLnN0ZW5jaWxNYXNrU2VwYXJhdGUoZ2wuQkFDSywgZHNzLnN0ZW5jaWxXcml0ZU1hc2tCYWNrKTtcclxuICAgICAgICAgICAgICAgIGNhY2hlLmRzcy5zdGVuY2lsV3JpdGVNYXNrQmFjayA9IGRzcy5zdGVuY2lsV3JpdGVNYXNrQmFjaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gLy8gZGVwdGgtc3RlbmNpbCBzdGF0ZVxyXG5cclxuICAgICAgICAvLyBibGVuZCBzdGF0ZVxyXG4gICAgICAgIGNvbnN0IGJzID0gZ3B1UGlwZWxpbmVTdGF0ZS5icztcclxuICAgICAgICBpZiAoYnMpIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChjYWNoZS5icy5pc0EyQyAhPT0gYnMuaXNBMkMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChicy5pc0EyQykge1xyXG4gICAgICAgICAgICAgICAgICAgIGdsLmVuYWJsZShnbC5TQU1QTEVfQUxQSEFfVE9fQ09WRVJBR0UpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBnbC5kaXNhYmxlKGdsLlNBTVBMRV9BTFBIQV9UT19DT1ZFUkFHRSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYWNoZS5icy5pc0EyQyA9IGJzLmlzQTJDO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoKGNhY2hlLmJzLmJsZW5kQ29sb3JbMF0gIT09IGJzLmJsZW5kQ29sb3JbMF0pIHx8XHJcbiAgICAgICAgICAgICAgICAoY2FjaGUuYnMuYmxlbmRDb2xvclsxXSAhPT0gYnMuYmxlbmRDb2xvclsxXSkgfHxcclxuICAgICAgICAgICAgICAgIChjYWNoZS5icy5ibGVuZENvbG9yWzJdICE9PSBicy5ibGVuZENvbG9yWzJdKSB8fFxyXG4gICAgICAgICAgICAgICAgKGNhY2hlLmJzLmJsZW5kQ29sb3JbM10gIT09IGJzLmJsZW5kQ29sb3JbM10pKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgZ2wuYmxlbmRDb2xvcihicy5ibGVuZENvbG9yWzBdLCBicy5ibGVuZENvbG9yWzFdLCBicy5ibGVuZENvbG9yWzJdLCBicy5ibGVuZENvbG9yWzNdKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjYWNoZS5icy5ibGVuZENvbG9yWzBdID0gYnMuYmxlbmRDb2xvclswXTtcclxuICAgICAgICAgICAgICAgIGNhY2hlLmJzLmJsZW5kQ29sb3JbMV0gPSBicy5ibGVuZENvbG9yWzFdO1xyXG4gICAgICAgICAgICAgICAgY2FjaGUuYnMuYmxlbmRDb2xvclsyXSA9IGJzLmJsZW5kQ29sb3JbMl07XHJcbiAgICAgICAgICAgICAgICBjYWNoZS5icy5ibGVuZENvbG9yWzNdID0gYnMuYmxlbmRDb2xvclszXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0MCA9IGJzLnRhcmdldHNbMF07XHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldDBDYWNoZSA9IGNhY2hlLmJzLnRhcmdldHNbMF07XHJcblxyXG4gICAgICAgICAgICBpZiAodGFyZ2V0MENhY2hlLmJsZW5kICE9PSB0YXJnZXQwLmJsZW5kKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0MC5ibGVuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGdsLmVuYWJsZShnbC5CTEVORCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGdsLmRpc2FibGUoZ2wuQkxFTkQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0MENhY2hlLmJsZW5kID0gdGFyZ2V0MC5ibGVuZDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCh0YXJnZXQwQ2FjaGUuYmxlbmRFcSAhPT0gdGFyZ2V0MC5ibGVuZEVxKSB8fFxyXG4gICAgICAgICAgICAgICAgKHRhcmdldDBDYWNoZS5ibGVuZEFscGhhRXEgIT09IHRhcmdldDAuYmxlbmRBbHBoYUVxKSkge1xyXG5cclxuICAgICAgICAgICAgICAgIGdsLmJsZW5kRXF1YXRpb25TZXBhcmF0ZShXZWJHTEJsZW5kT3BzW3RhcmdldDAuYmxlbmRFcV0sIFdlYkdMQmxlbmRPcHNbdGFyZ2V0MC5ibGVuZEFscGhhRXFdKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0YXJnZXQwQ2FjaGUuYmxlbmRFcSA9IHRhcmdldDAuYmxlbmRFcTtcclxuICAgICAgICAgICAgICAgIHRhcmdldDBDYWNoZS5ibGVuZEFscGhhRXEgPSB0YXJnZXQwLmJsZW5kQWxwaGFFcTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCh0YXJnZXQwQ2FjaGUuYmxlbmRTcmMgIT09IHRhcmdldDAuYmxlbmRTcmMpIHx8XHJcbiAgICAgICAgICAgICAgICAodGFyZ2V0MENhY2hlLmJsZW5kRHN0ICE9PSB0YXJnZXQwLmJsZW5kRHN0KSB8fFxyXG4gICAgICAgICAgICAgICAgKHRhcmdldDBDYWNoZS5ibGVuZFNyY0FscGhhICE9PSB0YXJnZXQwLmJsZW5kU3JjQWxwaGEpIHx8XHJcbiAgICAgICAgICAgICAgICAodGFyZ2V0MENhY2hlLmJsZW5kRHN0QWxwaGEgIT09IHRhcmdldDAuYmxlbmREc3RBbHBoYSkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBnbC5ibGVuZEZ1bmNTZXBhcmF0ZShcclxuICAgICAgICAgICAgICAgICAgICBXZWJHTEJsZW5kRmFjdG9yc1t0YXJnZXQwLmJsZW5kU3JjXSxcclxuICAgICAgICAgICAgICAgICAgICBXZWJHTEJsZW5kRmFjdG9yc1t0YXJnZXQwLmJsZW5kRHN0XSxcclxuICAgICAgICAgICAgICAgICAgICBXZWJHTEJsZW5kRmFjdG9yc1t0YXJnZXQwLmJsZW5kU3JjQWxwaGFdLFxyXG4gICAgICAgICAgICAgICAgICAgIFdlYkdMQmxlbmRGYWN0b3JzW3RhcmdldDAuYmxlbmREc3RBbHBoYV0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHRhcmdldDBDYWNoZS5ibGVuZFNyYyA9IHRhcmdldDAuYmxlbmRTcmM7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXQwQ2FjaGUuYmxlbmREc3QgPSB0YXJnZXQwLmJsZW5kRHN0O1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0MENhY2hlLmJsZW5kU3JjQWxwaGEgPSB0YXJnZXQwLmJsZW5kU3JjQWxwaGE7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXQwQ2FjaGUuYmxlbmREc3RBbHBoYSA9IHRhcmdldDAuYmxlbmREc3RBbHBoYTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRhcmdldDBDYWNoZS5ibGVuZENvbG9yTWFzayAhPT0gdGFyZ2V0MC5ibGVuZENvbG9yTWFzaykge1xyXG5cclxuICAgICAgICAgICAgICAgIGdsLmNvbG9yTWFzayhcclxuICAgICAgICAgICAgICAgICAgICAodGFyZ2V0MC5ibGVuZENvbG9yTWFzayAmIEdGWENvbG9yTWFzay5SKSAhPT0gR0ZYQ29sb3JNYXNrLk5PTkUsXHJcbiAgICAgICAgICAgICAgICAgICAgKHRhcmdldDAuYmxlbmRDb2xvck1hc2sgJiBHRlhDb2xvck1hc2suRykgIT09IEdGWENvbG9yTWFzay5OT05FLFxyXG4gICAgICAgICAgICAgICAgICAgICh0YXJnZXQwLmJsZW5kQ29sb3JNYXNrICYgR0ZYQ29sb3JNYXNrLkIpICE9PSBHRlhDb2xvck1hc2suTk9ORSxcclxuICAgICAgICAgICAgICAgICAgICAodGFyZ2V0MC5ibGVuZENvbG9yTWFzayAmIEdGWENvbG9yTWFzay5BKSAhPT0gR0ZYQ29sb3JNYXNrLk5PTkUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRhcmdldDBDYWNoZS5ibGVuZENvbG9yTWFzayA9IHRhcmdldDAuYmxlbmRDb2xvck1hc2s7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IC8vIGJsZW5kIHN0YXRlXHJcbiAgICB9IC8vIGJpbmQgcHNvXHJcblxyXG4gICAgaWYgKGdwdUJpbmRpbmdMYXlvdXQgJiYgZ3B1U2hhZGVyKSB7XHJcbiAgICAgICAgY29uc3QgZ3B1QmluZGluZ3MgPSBncHVCaW5kaW5nTGF5b3V0LmdwdUJpbmRpbmdzO1xyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZ3B1QmluZGluZ3MubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgY29uc3QgZ3B1QmluZGluZyA9IGdwdUJpbmRpbmdzW2pdO1xyXG5cclxuICAgICAgICAgICAgc3dpdGNoIChncHVCaW5kaW5nLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgR0ZYQmluZGluZ1R5cGUuVU5JRk9STV9CVUZGRVI6IHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdwdUJpbmRpbmcuZ3B1QnVmZmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgZ3B1U2hhZGVyLmdsQmxvY2tzLmxlbmd0aDsgaysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBnbEJsb2NrID0gZ3B1U2hhZGVyLmdsQmxvY2tzW2tdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdsQmxvY2suYmluZGluZyA9PT0gZ3B1QmluZGluZy5iaW5kaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhY2hlLmdsQmluZFVCT3NbZ2xCbG9jay5iaW5kaW5nXSAhPT0gZ3B1QmluZGluZy5ncHVCdWZmZXIuZ2xCdWZmZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlckJhc2UoZ2wuVU5JRk9STV9CVUZGRVIsIGdsQmxvY2suYmluZGluZywgZ3B1QmluZGluZy5ncHVCdWZmZXIuZ2xCdWZmZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBnbC5iaW5kQnVmZmVyUmFuZ2UoZ2wuVU5JRk9STV9CVUZGRVIsIGdsQmxvY2suYmluZGluZywgZ3B1QmluZGluZy5ncHVCdWZmZXIuZ2xCdWZmZXIsIDAsIGdwdUJpbmRpbmcuZ3B1QnVmZmVyLnNpemUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZS5nbEJpbmRVQk9zW2dsQmxvY2suYmluZGluZ10gPSBncHVCaW5kaW5nLmdwdUJ1ZmZlci5nbEJ1ZmZlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUuZ2xVbmlmb3JtQnVmZmVyID0gZ3B1QmluZGluZy5ncHVCdWZmZXIuZ2xCdWZmZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gLy8gaWZcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgR0ZYQmluZGluZ1R5cGUuU0FNUExFUjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZ3B1QmluZGluZy5ncHVTYW1wbGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yKGBTYW1wbGVyIGJpbmRpbmcgcG9pbnQgJHtncHVCaW5kaW5nLmJpbmRpbmd9ICcke2dwdUJpbmRpbmcubmFtZX0nIGlzIG5vdCBib3VuZGVkYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBnbFNhbXBsZXI6IFdlYkdMMkdQVVVuaWZvcm1TYW1wbGVyIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IGdwdVNoYWRlci5nbFNhbXBsZXJzLmxlbmd0aDsgaysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzYW1wbGVyID0gZ3B1U2hhZGVyLmdsU2FtcGxlcnNba107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2FtcGxlci5iaW5kaW5nID09PSBncHVCaW5kaW5nLmJpbmRpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbFNhbXBsZXIgPSBzYW1wbGVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2xTYW1wbGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IGdsU2FtcGxlci51bml0cy5sZW5ndGg7IGsrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleFVuaXQgPSBnbFNhbXBsZXIudW5pdHNba107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGdsVGV4VW5pdCA9IGNhY2hlLmdsVGV4VW5pdHNbdGV4VW5pdF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChncHVCaW5kaW5nLmdwdVRleFZpZXcgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3B1QmluZGluZy5ncHVUZXhWaWV3LmdwdVRleHR1cmUuc2l6ZSA+IDApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGdwdVRleHR1cmUgPSBncHVCaW5kaW5nLmdwdVRleFZpZXcuZ3B1VGV4dHVyZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdsVGV4VW5pdC5nbFRleHR1cmUgIT09IGdwdVRleHR1cmUuZ2xUZXh0dXJlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FjaGUudGV4VW5pdCAhPT0gdGV4VW5pdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTAgKyB0ZXhVbml0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZS50ZXhVbml0ID0gdGV4VW5pdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChncHVUZXh0dXJlLmdsVGV4dHVyZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsLmJpbmRUZXh0dXJlKGdwdVRleHR1cmUuZ2xUYXJnZXQsIGdwdVRleHR1cmUuZ2xUZXh0dXJlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2wuYmluZFRleHR1cmUoZ3B1VGV4dHVyZS5nbFRhcmdldCwgZGV2aWNlLm51bGxUZXgyRCEuZ3B1VGV4dHVyZS5nbFRleHR1cmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xUZXhVbml0LmdsVGV4dHVyZSA9IGdwdVRleHR1cmUuZ2xUZXh0dXJlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBncHVTYW1wbGVyID0gZ3B1QmluZGluZy5ncHVTYW1wbGVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FjaGUuZ2xTYW1wbGVyVW5pdHNbdGV4VW5pdF0gIT09IGdwdVNhbXBsZXIuZ2xTYW1wbGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbC5iaW5kU2FtcGxlcih0ZXhVbml0LCBncHVTYW1wbGVyLmdsU2FtcGxlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZS5nbFNhbXBsZXJVbml0c1t0ZXhVbml0XSA9IGdwdVNhbXBsZXIuZ2xTYW1wbGVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IC8vIGlmXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0gLy8gYmluZCBiaW5kaW5nIGxheW91dFxyXG5cclxuICAgIGlmIChncHVJbnB1dEFzc2VtYmxlciAmJiBncHVTaGFkZXIgJiZcclxuICAgICAgICAoaXNTaGFkZXJDaGFuZ2VkIHx8IGdmeFN0YXRlQ2FjaGUuZ3B1SW5wdXRBc3NlbWJsZXIgIT09IGdwdUlucHV0QXNzZW1ibGVyKSkge1xyXG4gICAgICAgIGdmeFN0YXRlQ2FjaGUuZ3B1SW5wdXRBc3NlbWJsZXIgPSBncHVJbnB1dEFzc2VtYmxlcjtcclxuXHJcbiAgICAgICAgaWYgKGRldmljZS51c2VWQU8pIHtcclxuICAgICAgICAgICAgLy8gY2hlY2sgdmFvXHJcbiAgICAgICAgICAgIGxldCBnbFZBTyA9IGdwdUlucHV0QXNzZW1ibGVyLmdsVkFPcy5nZXQoZ3B1U2hhZGVyLmdsUHJvZ3JhbSEpO1xyXG4gICAgICAgICAgICBpZiAoIWdsVkFPKSB7XHJcbiAgICAgICAgICAgICAgICBnbFZBTyA9IGdsLmNyZWF0ZVZlcnRleEFycmF5KCkhO1xyXG4gICAgICAgICAgICAgICAgZ3B1SW5wdXRBc3NlbWJsZXIuZ2xWQU9zLnNldChncHVTaGFkZXIuZ2xQcm9ncmFtISwgZ2xWQU8pO1xyXG5cclxuICAgICAgICAgICAgICAgIGdsLmJpbmRWZXJ0ZXhBcnJheShnbFZBTyk7XHJcbiAgICAgICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBudWxsKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgZ2xBdHRyaWI6IFdlYkdMMkF0dHJpYiB8IG51bGw7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGdwdVNoYWRlci5nbElucHV0cy5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGdsSW5wdXQgPSBncHVTaGFkZXIuZ2xJbnB1dHNbal07XHJcbiAgICAgICAgICAgICAgICAgICAgZ2xBdHRyaWIgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IGdwdUlucHV0QXNzZW1ibGVyLmdsQXR0cmlicy5sZW5ndGg7IGsrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWIgPSBncHVJbnB1dEFzc2VtYmxlci5nbEF0dHJpYnNba107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRyaWIubmFtZSA9PT0gZ2xJbnB1dC5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbEF0dHJpYiA9IGF0dHJpYjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZ2xBdHRyaWIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIGdsQXR0cmliLmdsQnVmZmVyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgZ2xBdHRyaWIuY29tcG9uZW50Q291bnQ7ICsrYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZ2xMb2MgPSBnbElucHV0LmdsTG9jICsgYztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJpYk9mZnNldCA9IGdsQXR0cmliLm9mZnNldCArIGdsQXR0cmliLnNpemUgKiBjO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGdsTG9jKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLmdsQ3VycmVudEF0dHJpYkxvY3NbZ2xMb2NdID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGdsTG9jLCBnbEF0dHJpYi5jb3VudCwgZ2xBdHRyaWIuZ2xUeXBlLCBnbEF0dHJpYi5pc05vcm1hbGl6ZWQsIGdsQXR0cmliLnN0cmlkZSwgYXR0cmliT2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsLnZlcnRleEF0dHJpYkRpdmlzb3IoZ2xMb2MsIGdsQXR0cmliLmlzSW5zdGFuY2VkID8gMSA6IDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGdwdUJ1ZmZlciA9IGdwdUlucHV0QXNzZW1ibGVyLmdwdUluZGV4QnVmZmVyO1xyXG4gICAgICAgICAgICAgICAgaWYgKGdwdUJ1ZmZlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIGdwdUJ1ZmZlci5nbEJ1ZmZlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZ2wuYmluZFZlcnRleEFycmF5KG51bGwpO1xyXG4gICAgICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICBjYWNoZS5nbEFycmF5QnVmZmVyID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGNhY2hlLmdsRWxlbWVudEFycmF5QnVmZmVyID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNhY2hlLmdsVkFPICE9PSBnbFZBTykge1xyXG4gICAgICAgICAgICAgICAgZ2wuYmluZFZlcnRleEFycmF5KGdsVkFPKTtcclxuICAgICAgICAgICAgICAgIGNhY2hlLmdsVkFPID0gZ2xWQU87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBhID0gMDsgYSA8IGRldmljZS5tYXhWZXJ0ZXhBdHRyaWJ1dGVzOyArK2EpIHtcclxuICAgICAgICAgICAgICAgIGNhY2hlLmdsQ3VycmVudEF0dHJpYkxvY3NbYV0gPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBncHVTaGFkZXIuZ2xJbnB1dHMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGdsSW5wdXQgPSBncHVTaGFkZXIuZ2xJbnB1dHNbal07XHJcbiAgICAgICAgICAgICAgICBsZXQgZ2xBdHRyaWI6IFdlYkdMMkF0dHJpYiB8IG51bGwgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgZ3B1SW5wdXRBc3NlbWJsZXIuZ2xBdHRyaWJzLmxlbmd0aDsgaysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXR0cmliID0gZ3B1SW5wdXRBc3NlbWJsZXIuZ2xBdHRyaWJzW2tdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhdHRyaWIubmFtZSA9PT0gZ2xJbnB1dC5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsQXR0cmliID0gYXR0cmliO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGdsQXR0cmliKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhY2hlLmdsQXJyYXlCdWZmZXIgIT09IGdsQXR0cmliLmdsQnVmZmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBnbEF0dHJpYi5nbEJ1ZmZlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLmdsQXJyYXlCdWZmZXIgPSBnbEF0dHJpYi5nbEJ1ZmZlcjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgZ2xBdHRyaWIuY29tcG9uZW50Q291bnQ7ICsrYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBnbExvYyA9IGdsSW5wdXQuZ2xMb2MgKyBjO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWJPZmZzZXQgPSBnbEF0dHJpYi5vZmZzZXQgKyBnbEF0dHJpYi5zaXplICogYztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2FjaGUuZ2xFbmFibGVkQXR0cmliTG9jc1tnbExvY10gJiYgZ2xMb2MgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoZ2xMb2MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUuZ2xFbmFibGVkQXR0cmliTG9jc1tnbExvY10gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLmdsQ3VycmVudEF0dHJpYkxvY3NbZ2xMb2NdID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoZ2xMb2MsIGdsQXR0cmliLmNvdW50LCBnbEF0dHJpYi5nbFR5cGUsIGdsQXR0cmliLmlzTm9ybWFsaXplZCwgZ2xBdHRyaWIuc3RyaWRlLCBhdHRyaWJPZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJEaXZpc29yKGdsTG9jLCBnbEF0dHJpYi5pc0luc3RhbmNlZCA/IDEgOiAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gLy8gZm9yXHJcblxyXG4gICAgICAgICAgICBjb25zdCBncHVCdWZmZXIgPSBncHVJbnB1dEFzc2VtYmxlci5ncHVJbmRleEJ1ZmZlcjtcclxuICAgICAgICAgICAgaWYgKGdwdUJ1ZmZlcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlLmdsRWxlbWVudEFycmF5QnVmZmVyICE9PSBncHVCdWZmZXIuZ2xCdWZmZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBncHVCdWZmZXIuZ2xCdWZmZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhY2hlLmdsRWxlbWVudEFycmF5QnVmZmVyID0gZ3B1QnVmZmVyLmdsQnVmZmVyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBhID0gMDsgYSA8IGRldmljZS5tYXhWZXJ0ZXhBdHRyaWJ1dGVzOyArK2EpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjYWNoZS5nbEVuYWJsZWRBdHRyaWJMb2NzW2FdICE9PSBjYWNoZS5nbEN1cnJlbnRBdHRyaWJMb2NzW2FdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2wuZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5KGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhY2hlLmdsRW5hYmxlZEF0dHJpYkxvY3NbYV0gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gLy8gaWYgKGRldmljZS51c2VWQU8pXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGdwdVBpcGVsaW5lU3RhdGUpIHtcclxuICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IGdwdVBpcGVsaW5lU3RhdGUuZHluYW1pY1N0YXRlcy5sZW5ndGg7IGsrKykge1xyXG4gICAgICAgICAgICBjb25zdCBkeW5hbWljU3RhdGUgPSBncHVQaXBlbGluZVN0YXRlLmR5bmFtaWNTdGF0ZXNba107XHJcbiAgICAgICAgICAgIHN3aXRjaCAoZHluYW1pY1N0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEdGWER5bmFtaWNTdGF0ZS5WSUVXUE9SVDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2aWV3cG9ydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FjaGUudmlld3BvcnQubGVmdCAhPT0gdmlld3BvcnQubGVmdCB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUudmlld3BvcnQudG9wICE9PSB2aWV3cG9ydC50b3AgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLnZpZXdwb3J0LndpZHRoICE9PSB2aWV3cG9ydC53aWR0aCB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUudmlld3BvcnQuaGVpZ2h0ICE9PSB2aWV3cG9ydC5oZWlnaHQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbC52aWV3cG9ydCh2aWV3cG9ydC5sZWZ0LCB2aWV3cG9ydC50b3AsIHZpZXdwb3J0LndpZHRoLCB2aWV3cG9ydC5oZWlnaHQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLnZpZXdwb3J0LmxlZnQgPSB2aWV3cG9ydC5sZWZ0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUudmlld3BvcnQudG9wID0gdmlld3BvcnQudG9wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUudmlld3BvcnQud2lkdGggPSB2aWV3cG9ydC53aWR0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLnZpZXdwb3J0LmhlaWdodCA9IHZpZXdwb3J0LmhlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgR0ZYRHluYW1pY1N0YXRlLlNDSVNTT1I6IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2Npc3Nvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FjaGUuc2Npc3NvclJlY3QueCAhPT0gc2Npc3Nvci54IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZS5zY2lzc29yUmVjdC55ICE9PSBzY2lzc29yLnkgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLnNjaXNzb3JSZWN0LndpZHRoICE9PSBzY2lzc29yLndpZHRoIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZS5zY2lzc29yUmVjdC5oZWlnaHQgIT09IHNjaXNzb3IuaGVpZ2h0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2wuc2Npc3NvcihzY2lzc29yLngsIHNjaXNzb3IueSwgc2Npc3Nvci53aWR0aCwgc2Npc3Nvci5oZWlnaHQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLnNjaXNzb3JSZWN0LnggPSBzY2lzc29yLng7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZS5zY2lzc29yUmVjdC55ID0gc2Npc3Nvci55O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUuc2Npc3NvclJlY3Qud2lkdGggPSBzY2lzc29yLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUuc2Npc3NvclJlY3QuaGVpZ2h0ID0gc2Npc3Nvci5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlIEdGWER5bmFtaWNTdGF0ZS5MSU5FX1dJRFRIOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmVXaWR0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FjaGUucnMubGluZVdpZHRoICE9PSBsaW5lV2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsLmxpbmVXaWR0aChsaW5lV2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUucnMubGluZVdpZHRoID0gbGluZVdpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSBHRlhEeW5hbWljU3RhdGUuREVQVEhfQklBUzoge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXB0aEJpYXMpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoY2FjaGUucnMuZGVwdGhCaWFzICE9PSBkZXB0aEJpYXMuY29uc3RhbnRGYWN0b3IpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY2FjaGUucnMuZGVwdGhCaWFzU2xvcCAhPT0gZGVwdGhCaWFzLnNsb3BlRmFjdG9yKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2wucG9seWdvbk9mZnNldChkZXB0aEJpYXMuY29uc3RhbnRGYWN0b3IsIGRlcHRoQmlhcy5zbG9wZUZhY3Rvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZS5ycy5kZXB0aEJpYXMgPSBkZXB0aEJpYXMuY29uc3RhbnRGYWN0b3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZS5ycy5kZXB0aEJpYXNTbG9wID0gZGVwdGhCaWFzLnNsb3BlRmFjdG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSBHRlhEeW5hbWljU3RhdGUuQkxFTkRfQ09OU1RBTlRTOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJsZW5kQ29uc3RhbnRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoY2FjaGUuYnMuYmxlbmRDb2xvclswXSAhPT0gYmxlbmRDb25zdGFudHNbMF0pIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY2FjaGUuYnMuYmxlbmRDb2xvclsxXSAhPT0gYmxlbmRDb25zdGFudHNbMV0pIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY2FjaGUuYnMuYmxlbmRDb2xvclsyXSAhPT0gYmxlbmRDb25zdGFudHNbMl0pIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY2FjaGUuYnMuYmxlbmRDb2xvclszXSAhPT0gYmxlbmRDb25zdGFudHNbM10pKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2wuYmxlbmRDb2xvcihibGVuZENvbnN0YW50c1swXSwgYmxlbmRDb25zdGFudHNbMV0sIGJsZW5kQ29uc3RhbnRzWzJdLCBibGVuZENvbnN0YW50c1szXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUuYnMuYmxlbmRDb2xvclswXSA9IGJsZW5kQ29uc3RhbnRzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUuYnMuYmxlbmRDb2xvclsxXSA9IGJsZW5kQ29uc3RhbnRzWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUuYnMuYmxlbmRDb2xvclsyXSA9IGJsZW5kQ29uc3RhbnRzWzJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUuYnMuYmxlbmRDb2xvclszXSA9IGJsZW5kQ29uc3RhbnRzWzNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSBHRlhEeW5hbWljU3RhdGUuU1RFTkNJTF9XUklURV9NQVNLOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0ZW5jaWxXcml0ZU1hc2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChzdGVuY2lsV3JpdGVNYXNrLmZhY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgR0ZYU3RlbmNpbEZhY2UuRlJPTlQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FjaGUuZHNzLnN0ZW5jaWxXcml0ZU1hc2tGcm9udCAhPT0gc3RlbmNpbFdyaXRlTWFzay53cml0ZU1hc2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2wuc3RlbmNpbE1hc2tTZXBhcmF0ZShnbC5GUk9OVCwgc3RlbmNpbFdyaXRlTWFzay53cml0ZU1hc2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZS5kc3Muc3RlbmNpbFdyaXRlTWFza0Zyb250ID0gc3RlbmNpbFdyaXRlTWFzay53cml0ZU1hc2s7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBHRlhTdGVuY2lsRmFjZS5CQUNLOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhY2hlLmRzcy5zdGVuY2lsV3JpdGVNYXNrQmFjayAhPT0gc3RlbmNpbFdyaXRlTWFzay53cml0ZU1hc2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2wuc3RlbmNpbE1hc2tTZXBhcmF0ZShnbC5CQUNLLCBzdGVuY2lsV3JpdGVNYXNrLndyaXRlTWFzayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLmRzcy5zdGVuY2lsV3JpdGVNYXNrQmFjayA9IHN0ZW5jaWxXcml0ZU1hc2sud3JpdGVNYXNrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgR0ZYU3RlbmNpbEZhY2UuQUxMOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhY2hlLmRzcy5zdGVuY2lsV3JpdGVNYXNrRnJvbnQgIT09IHN0ZW5jaWxXcml0ZU1hc2sud3JpdGVNYXNrIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLmRzcy5zdGVuY2lsV3JpdGVNYXNrQmFjayAhPT0gc3RlbmNpbFdyaXRlTWFzay53cml0ZU1hc2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2wuc3RlbmNpbE1hc2soc3RlbmNpbFdyaXRlTWFzay53cml0ZU1hc2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZS5kc3Muc3RlbmNpbFdyaXRlTWFza0Zyb250ID0gc3RlbmNpbFdyaXRlTWFzay53cml0ZU1hc2s7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLmRzcy5zdGVuY2lsV3JpdGVNYXNrQmFjayA9IHN0ZW5jaWxXcml0ZU1hc2sud3JpdGVNYXNrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgR0ZYRHluYW1pY1N0YXRlLlNURU5DSUxfQ09NUEFSRV9NQVNLOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0ZW5jaWxDb21wYXJlTWFzaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHN0ZW5jaWxDb21wYXJlTWFzay5mYWNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEdGWFN0ZW5jaWxGYWNlLkZST05UOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhY2hlLmRzcy5zdGVuY2lsUmVmRnJvbnQgIT09IHN0ZW5jaWxDb21wYXJlTWFzay5yZWZlcmVuY2UgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUuZHNzLnN0ZW5jaWxSZWFkTWFza0Zyb250ICE9PSBzdGVuY2lsQ29tcGFyZU1hc2suY29tcGFyZU1hc2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2wuc3RlbmNpbEZ1bmNTZXBhcmF0ZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsLkZST05ULFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV2ViR0xDbXBGdW5jc1tjYWNoZS5kc3Muc3RlbmNpbEZ1bmNGcm9udF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGVuY2lsQ29tcGFyZU1hc2sucmVmZXJlbmNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RlbmNpbENvbXBhcmVNYXNrLmNvbXBhcmVNYXNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUuZHNzLnN0ZW5jaWxSZWZGcm9udCA9IHN0ZW5jaWxDb21wYXJlTWFzay5yZWZlcmVuY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLmRzcy5zdGVuY2lsUmVhZE1hc2tGcm9udCA9IHN0ZW5jaWxDb21wYXJlTWFzay5jb21wYXJlTWFzaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIEdGWFN0ZW5jaWxGYWNlLkJBQ0s6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FjaGUuZHNzLnN0ZW5jaWxSZWZCYWNrICE9PSBzdGVuY2lsQ29tcGFyZU1hc2sucmVmZXJlbmNlIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLmRzcy5zdGVuY2lsUmVhZE1hc2tCYWNrICE9PSBzdGVuY2lsQ29tcGFyZU1hc2suY29tcGFyZU1hc2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2wuc3RlbmNpbEZ1bmNTZXBhcmF0ZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsLkJBQ0ssXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXZWJHTENtcEZ1bmNzW2NhY2hlLmRzcy5zdGVuY2lsRnVuY0JhY2tdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RlbmNpbENvbXBhcmVNYXNrLnJlZmVyZW5jZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZW5jaWxDb21wYXJlTWFzay5jb21wYXJlTWFzayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLmRzcy5zdGVuY2lsUmVmQmFjayA9IHN0ZW5jaWxDb21wYXJlTWFzay5yZWZlcmVuY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLmRzcy5zdGVuY2lsUmVhZE1hc2tCYWNrID0gc3RlbmNpbENvbXBhcmVNYXNrLmNvbXBhcmVNYXNrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgR0ZYU3RlbmNpbEZhY2UuQUxMOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhY2hlLmRzcy5zdGVuY2lsUmVmRnJvbnQgIT09IHN0ZW5jaWxDb21wYXJlTWFzay5yZWZlcmVuY2UgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUuZHNzLnN0ZW5jaWxSZWFkTWFza0Zyb250ICE9PSBzdGVuY2lsQ29tcGFyZU1hc2suY29tcGFyZU1hc2sgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUuZHNzLnN0ZW5jaWxSZWZCYWNrICE9PSBzdGVuY2lsQ29tcGFyZU1hc2sucmVmZXJlbmNlIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLmRzcy5zdGVuY2lsUmVhZE1hc2tCYWNrICE9PSBzdGVuY2lsQ29tcGFyZU1hc2suY29tcGFyZU1hc2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2wuc3RlbmNpbEZ1bmMoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXZWJHTENtcEZ1bmNzW2NhY2hlLmRzcy5zdGVuY2lsRnVuY0JhY2tdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RlbmNpbENvbXBhcmVNYXNrLnJlZmVyZW5jZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZW5jaWxDb21wYXJlTWFzay5jb21wYXJlTWFzayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLmRzcy5zdGVuY2lsUmVmRnJvbnQgPSBzdGVuY2lsQ29tcGFyZU1hc2sucmVmZXJlbmNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZS5kc3Muc3RlbmNpbFJlYWRNYXNrRnJvbnQgPSBzdGVuY2lsQ29tcGFyZU1hc2suY29tcGFyZU1hc2s7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLmRzcy5zdGVuY2lsUmVmQmFjayA9IHN0ZW5jaWxDb21wYXJlTWFzay5yZWZlcmVuY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLmRzcy5zdGVuY2lsUmVhZE1hc2tCYWNrID0gc3RlbmNpbENvbXBhcmVNYXNrLmNvbXBhcmVNYXNrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSAvLyBzd2l0Y2hcclxuICAgICAgICB9IC8vIGZvclxyXG4gICAgfSAvLyBpZlxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gV2ViR0wyQ21kRnVuY0RyYXcgKGRldmljZTogV2ViR0wyR0ZYRGV2aWNlLCBkcmF3SW5mbzogSUdGWERyYXdJbmZvKSB7XHJcbiAgICBjb25zdCBnbCA9IGRldmljZS5nbDtcclxuICAgIGNvbnN0IHsgZ3B1SW5wdXRBc3NlbWJsZXIsIGdwdVNoYWRlciwgZ2xQcmltaXRpdmUgfSA9IGdmeFN0YXRlQ2FjaGU7XHJcblxyXG4gICAgaWYgKGdwdUlucHV0QXNzZW1ibGVyICYmIGdwdVNoYWRlcikge1xyXG4gICAgICAgIGlmIChncHVJbnB1dEFzc2VtYmxlci5ncHVJbmRpcmVjdEJ1ZmZlcikge1xyXG4gICAgICAgICAgICBjb25zdCBpbmRpcmVjdHMgPSBncHVJbnB1dEFzc2VtYmxlci5ncHVJbmRpcmVjdEJ1ZmZlci5pbmRpcmVjdHM7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgaW5kaXJlY3RzLmxlbmd0aDsgaysrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdWJEcmF3SW5mbyA9IGluZGlyZWN0c1trXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGdwdUJ1ZmZlciA9IGdwdUlucHV0QXNzZW1ibGVyLmdwdUluZGV4QnVmZmVyO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN1YkRyYXdJbmZvLmluc3RhbmNlQ291bnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZ3B1QnVmZmVyICYmIHN1YkRyYXdJbmZvLmluZGV4Q291bnQgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBzdWJEcmF3SW5mby5maXJzdEluZGV4ICogZ3B1QnVmZmVyLnN0cmlkZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2wuZHJhd0VsZW1lbnRzSW5zdGFuY2VkKGdsUHJpbWl0aXZlLCBzdWJEcmF3SW5mby5pbmRleENvdW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3B1SW5wdXRBc3NlbWJsZXIuZ2xJbmRleFR5cGUsIG9mZnNldCwgc3ViRHJhd0luZm8uaW5zdGFuY2VDb3VudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2wuZHJhd0FycmF5c0luc3RhbmNlZChnbFByaW1pdGl2ZSwgc3ViRHJhd0luZm8uZmlyc3RWZXJ0ZXgsIHN1YkRyYXdJbmZvLnZlcnRleENvdW50LCBzdWJEcmF3SW5mby5pbnN0YW5jZUNvdW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChncHVCdWZmZXIgJiYgc3ViRHJhd0luZm8uaW5kZXhDb3VudCA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IHN1YkRyYXdJbmZvLmZpcnN0SW5kZXggKiBncHVCdWZmZXIuc3RyaWRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbC5kcmF3RWxlbWVudHMoZ2xQcmltaXRpdmUsIHN1YkRyYXdJbmZvLmluZGV4Q291bnQsIGdwdUlucHV0QXNzZW1ibGVyLmdsSW5kZXhUeXBlLCBvZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLmRyYXdBcnJheXMoZ2xQcmltaXRpdmUsIHN1YkRyYXdJbmZvLmZpcnN0VmVydGV4LCBzdWJEcmF3SW5mby52ZXJ0ZXhDb3VudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGRyYXdJbmZvLmluc3RhbmNlQ291bnQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChncHVJbnB1dEFzc2VtYmxlci5ncHVJbmRleEJ1ZmZlciAmJiBkcmF3SW5mby5pbmRleENvdW50ID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBkcmF3SW5mby5maXJzdEluZGV4ICogZ3B1SW5wdXRBc3NlbWJsZXIuZ3B1SW5kZXhCdWZmZXIuc3RyaWRlO1xyXG4gICAgICAgICAgICAgICAgICAgIGdsLmRyYXdFbGVtZW50c0luc3RhbmNlZChnbFByaW1pdGl2ZSwgZHJhd0luZm8uaW5kZXhDb3VudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ3B1SW5wdXRBc3NlbWJsZXIuZ2xJbmRleFR5cGUsIG9mZnNldCwgZHJhd0luZm8uaW5zdGFuY2VDb3VudCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGdsLmRyYXdBcnJheXNJbnN0YW5jZWQoZ2xQcmltaXRpdmUsIGRyYXdJbmZvLmZpcnN0VmVydGV4LCBkcmF3SW5mby52ZXJ0ZXhDb3VudCwgZHJhd0luZm8uaW5zdGFuY2VDb3VudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ3B1SW5wdXRBc3NlbWJsZXIuZ3B1SW5kZXhCdWZmZXIgJiYgZHJhd0luZm8uaW5kZXhDb3VudCA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gZHJhd0luZm8uZmlyc3RJbmRleCAqIGdwdUlucHV0QXNzZW1ibGVyLmdwdUluZGV4QnVmZmVyLnN0cmlkZTtcclxuICAgICAgICAgICAgICAgICAgICBnbC5kcmF3RWxlbWVudHMoZ2xQcmltaXRpdmUsIGRyYXdJbmZvLmluZGV4Q291bnQsIGdwdUlucHV0QXNzZW1ibGVyLmdsSW5kZXhUeXBlLCBvZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBnbC5kcmF3QXJyYXlzKGdsUHJpbWl0aXZlLCBkcmF3SW5mby5maXJzdFZlcnRleCwgZHJhd0luZm8udmVydGV4Q291bnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5jb25zdCBjbWRJZHMgPSBuZXcgQXJyYXk8bnVtYmVyPihXZWJHTDJDbWQuQ09VTlQpO1xyXG5leHBvcnQgZnVuY3Rpb24gV2ViR0wyQ21kRnVuY0V4ZWN1dGVDbWRzIChkZXZpY2U6IFdlYkdMMkdGWERldmljZSwgY21kUGFja2FnZTogV2ViR0wyQ21kUGFja2FnZSkge1xyXG4gICAgY21kSWRzLmZpbGwoMCk7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjbWRQYWNrYWdlLmNtZHMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICBjb25zdCBjbWQgPSBjbWRQYWNrYWdlLmNtZHMuYXJyYXlbaV07XHJcbiAgICAgICAgY29uc3QgY21kSWQgPSBjbWRJZHNbY21kXSsrO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKGNtZCkge1xyXG4gICAgICAgICAgICBjYXNlIFdlYkdMMkNtZC5CRUdJTl9SRU5ERVJfUEFTUzoge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY21kMCA9IGNtZFBhY2thZ2UuYmVnaW5SZW5kZXJQYXNzQ21kcy5hcnJheVtjbWRJZF07XHJcbiAgICAgICAgICAgICAgICBXZWJHTDJDbWRGdW5jQmVnaW5SZW5kZXJQYXNzKGRldmljZSwgY21kMC5ncHVGcmFtZWJ1ZmZlciwgY21kMC5yZW5kZXJBcmVhLCBjbWQwLmNsZWFyRmxhZyxcclxuICAgICAgICAgICAgICAgICAgICBjbWQwLmNsZWFyQ29sb3JzLCBjbWQwLmNsZWFyRGVwdGgsIGNtZDAuY2xlYXJTdGVuY2lsKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgIGNhc2UgV2ViR0wyQ21kLkVORF9SRU5ERVJfUEFTUzoge1xyXG4gICAgICAgICAgICAgICAgLy8gV2ViR0wgMi4wIGRvZXNuJ3Qgc3VwcG9ydCBzdG9yZSBvcGVyYXRpb24gb2YgYXR0YWNobWVudHMuXHJcbiAgICAgICAgICAgICAgICAvLyBHRlhTdG9yZU9wLlN0b3JlIGlzIHRoZSBkZWZhdWx0IEdMIGJlaGF2aW9yLlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgY2FzZSBXZWJHTDJDbWQuQklORF9TVEFURVM6IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNtZDIgPSBjbWRQYWNrYWdlLmJpbmRTdGF0ZXNDbWRzLmFycmF5W2NtZElkXTtcclxuICAgICAgICAgICAgICAgIFdlYkdMMkNtZEZ1bmNCaW5kU3RhdGVzKGRldmljZSwgY21kMi5ncHVQaXBlbGluZVN0YXRlLCBjbWQyLmdwdUJpbmRpbmdMYXlvdXQsIGNtZDIuZ3B1SW5wdXRBc3NlbWJsZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgY21kMi52aWV3cG9ydCwgY21kMi5zY2lzc29yLCBjbWQyLmxpbmVXaWR0aCwgY21kMi5kZXB0aEJpYXMsIGNtZDIuYmxlbmRDb25zdGFudHMsXHJcbiAgICAgICAgICAgICAgICAgICAgY21kMi5kZXB0aEJvdW5kcywgY21kMi5zdGVuY2lsV3JpdGVNYXNrLCBjbWQyLnN0ZW5jaWxDb21wYXJlTWFzayk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIFdlYkdMMkNtZC5EUkFXOiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjbWQzOiBXZWJHTDJDbWREcmF3ID0gY21kUGFja2FnZS5kcmF3Q21kcy5hcnJheVtjbWRJZF07XHJcbiAgICAgICAgICAgICAgICBXZWJHTDJDbWRGdW5jRHJhdyhkZXZpY2UsIGNtZDMuZHJhd0luZm8pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBXZWJHTDJDbWQuVVBEQVRFX0JVRkZFUjoge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY21kNCA9IGNtZFBhY2thZ2UudXBkYXRlQnVmZmVyQ21kcy5hcnJheVtjbWRJZF07XHJcbiAgICAgICAgICAgICAgICBXZWJHTDJDbWRGdW5jVXBkYXRlQnVmZmVyKGRldmljZSwgY21kNC5ncHVCdWZmZXIgYXMgV2ViR0wyR1BVQnVmZmVyLCBjbWQ0LmJ1ZmZlciBhcyBHRlhCdWZmZXJTb3VyY2UsIGNtZDQub2Zmc2V0LCBjbWQ0LnNpemUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSBXZWJHTDJDbWQuQ09QWV9CVUZGRVJfVE9fVEVYVFVSRToge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY21kNSA9IGNtZFBhY2thZ2UuY29weUJ1ZmZlclRvVGV4dHVyZUNtZHMuYXJyYXlbY21kSWRdO1xyXG4gICAgICAgICAgICAgICAgV2ViR0wyQ21kRnVuY0NvcHlCdWZmZXJzVG9UZXh0dXJlKGRldmljZSwgWyhjbWQ1LmdwdUJ1ZmZlciBhcyBXZWJHTDJHUFVCdWZmZXIpLmJ1ZmZlciFdLCBjbWQ1LmdwdVRleHR1cmUgYXMgV2ViR0wyR1BVVGV4dHVyZSwgY21kNS5yZWdpb25zKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSAvLyBzd2l0Y2hcclxuICAgIH0gLy8gZm9yXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBXZWJHTDJDbWRGdW5jQ29weVRleEltYWdlc1RvVGV4dHVyZSAoXHJcbiAgICBkZXZpY2U6IFdlYkdMMkdGWERldmljZSxcclxuICAgIHRleEltYWdlczogVGV4SW1hZ2VTb3VyY2VbXSxcclxuICAgIGdwdVRleHR1cmU6IFdlYkdMMkdQVVRleHR1cmUsXHJcbiAgICByZWdpb25zOiBHRlhCdWZmZXJUZXh0dXJlQ29weVtdKSB7XHJcblxyXG4gICAgY29uc3QgZ2wgPSBkZXZpY2UuZ2w7XHJcbiAgICBjb25zdCBnbFRleFVuaXQgPSBkZXZpY2Uuc3RhdGVDYWNoZS5nbFRleFVuaXRzW2RldmljZS5zdGF0ZUNhY2hlLnRleFVuaXRdO1xyXG4gICAgaWYgKGdsVGV4VW5pdC5nbFRleHR1cmUgIT09IGdwdVRleHR1cmUuZ2xUZXh0dXJlKSB7XHJcbiAgICAgICAgZ2wuYmluZFRleHR1cmUoZ3B1VGV4dHVyZS5nbFRhcmdldCwgZ3B1VGV4dHVyZS5nbFRleHR1cmUpO1xyXG4gICAgICAgIGdsVGV4VW5pdC5nbFRleHR1cmUgPSBncHVUZXh0dXJlLmdsVGV4dHVyZTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgbSA9IDA7XHJcbiAgICBsZXQgbiA9IDA7XHJcbiAgICBsZXQgZiA9IDA7XHJcbiAgICBzd2l0Y2ggKGdwdVRleHR1cmUuZ2xUYXJnZXQpIHtcclxuICAgICAgICBjYXNlIGdsLlRFWFRVUkVfMkQ6IHtcclxuICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCByZWdpb25zLmxlbmd0aDsgaysrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZWdpb24gPSByZWdpb25zW2tdO1xyXG4gICAgICAgICAgICAgICAgZm9yIChtID0gcmVnaW9uLnRleFN1YnJlcy5iYXNlTWlwTGV2ZWw7IG0gPCByZWdpb24udGV4U3VicmVzLmxldmVsQ291bnQ7ICsrbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGdsLnRleFN1YkltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgbSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVnaW9uLnRleE9mZnNldC54LCByZWdpb24udGV4T2Zmc2V0LnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdwdVRleHR1cmUuZ2xGb3JtYXQsIGdwdVRleHR1cmUuZ2xUeXBlLCB0ZXhJbWFnZXNbbisrXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhc2UgZ2wuVEVYVFVSRV9DVUJFX01BUDoge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IHJlZ2lvbnMubGVuZ3RoOyBrKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2lvbiA9IHJlZ2lvbnNba107XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmY291bnQgPSByZWdpb24udGV4U3VicmVzLmJhc2VBcnJheUxheWVyICsgcmVnaW9uLnRleFN1YnJlcy5sYXllckNvdW50O1xyXG4gICAgICAgICAgICAgICAgZm9yIChmID0gcmVnaW9uLnRleFN1YnJlcy5iYXNlQXJyYXlMYXllcjsgZiA8IGZjb3VudDsgKytmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWNvdW50ID0gcmVnaW9uLnRleFN1YnJlcy5iYXNlTWlwTGV2ZWwgKyByZWdpb24udGV4U3VicmVzLmxldmVsQ291bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChtID0gcmVnaW9uLnRleFN1YnJlcy5iYXNlTWlwTGV2ZWw7IG0gPCBtY291bnQ7ICsrbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbC50ZXhTdWJJbWFnZTJEKGdsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCArIGYsIG0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdpb24udGV4T2Zmc2V0LngsIHJlZ2lvbi50ZXhPZmZzZXQueSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdwdVRleHR1cmUuZ2xGb3JtYXQsIGdwdVRleHR1cmUuZ2xUeXBlLCB0ZXhJbWFnZXNbbisrXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1Vuc3VwcG9ydGVkIEdMIHRleHR1cmUgdHlwZSwgY29weSBidWZmZXIgdG8gdGV4dHVyZSBmYWlsZWQuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChncHVUZXh0dXJlLmZsYWdzICYgR0ZYVGV4dHVyZUZsYWdCaXQuR0VOX01JUE1BUCkge1xyXG4gICAgICAgIGdsLmdlbmVyYXRlTWlwbWFwKGdwdVRleHR1cmUuZ2xUYXJnZXQpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gV2ViR0wyQ21kRnVuY0NvcHlCdWZmZXJzVG9UZXh0dXJlIChcclxuICAgIGRldmljZTogV2ViR0wyR0ZYRGV2aWNlLFxyXG4gICAgYnVmZmVyczogQXJyYXlCdWZmZXJWaWV3W10sXHJcbiAgICBncHVUZXh0dXJlOiBXZWJHTDJHUFVUZXh0dXJlLFxyXG4gICAgcmVnaW9uczogR0ZYQnVmZmVyVGV4dHVyZUNvcHlbXSkge1xyXG5cclxuICAgIGNvbnN0IGdsID0gZGV2aWNlLmdsO1xyXG4gICAgY29uc3QgZ2xUZXhVbml0ID0gZGV2aWNlLnN0YXRlQ2FjaGUuZ2xUZXhVbml0c1tkZXZpY2Uuc3RhdGVDYWNoZS50ZXhVbml0XTtcclxuICAgIGlmIChnbFRleFVuaXQuZ2xUZXh0dXJlICE9PSBncHVUZXh0dXJlLmdsVGV4dHVyZSkge1xyXG4gICAgICAgIGdsLmJpbmRUZXh0dXJlKGdwdVRleHR1cmUuZ2xUYXJnZXQsIGdwdVRleHR1cmUuZ2xUZXh0dXJlKTtcclxuICAgICAgICBnbFRleFVuaXQuZ2xUZXh0dXJlID0gZ3B1VGV4dHVyZS5nbFRleHR1cmU7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IG0gPSAwO1xyXG4gICAgbGV0IG4gPSAwO1xyXG4gICAgbGV0IHcgPSAxO1xyXG4gICAgbGV0IGggPSAxO1xyXG4gICAgbGV0IGYgPSAwO1xyXG4gICAgY29uc3QgZm10SW5mbzogSUdGWEZvcm1hdEluZm8gPSBHRlhGb3JtYXRJbmZvc1tncHVUZXh0dXJlLmZvcm1hdF07XHJcbiAgICBjb25zdCBpc0NvbXByZXNzZWQgPSBmbXRJbmZvLmlzQ29tcHJlc3NlZDtcclxuICAgIHN3aXRjaCAoZ3B1VGV4dHVyZS5nbFRhcmdldCkge1xyXG4gICAgICAgIGNhc2UgZ2wuVEVYVFVSRV8yRDoge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IHJlZ2lvbnMubGVuZ3RoOyBrKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2lvbiA9IHJlZ2lvbnNba107XHJcbiAgICAgICAgICAgICAgICB3ID0gcmVnaW9uLnRleEV4dGVudC53aWR0aDtcclxuICAgICAgICAgICAgICAgIGggPSByZWdpb24udGV4RXh0ZW50LmhlaWdodDtcclxuICAgICAgICAgICAgICAgIGZvciAobSA9IHJlZ2lvbi50ZXhTdWJyZXMuYmFzZU1pcExldmVsOyBtIDwgcmVnaW9uLnRleFN1YnJlcy5sZXZlbENvdW50OyArK20pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwaXhlbHMgPSBidWZmZXJzW24rK107XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0NvbXByZXNzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudGV4U3ViSW1hZ2UyRChnbC5URVhUVVJFXzJELCBtLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnaW9uLnRleE9mZnNldC54LCByZWdpb24udGV4T2Zmc2V0LnksIHcsIGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncHVUZXh0dXJlLmdsRm9ybWF0LCBncHVUZXh0dXJlLmdsVHlwZSwgcGl4ZWxzKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ3B1VGV4dHVyZS5nbEludGVybmVsRm10ICE9PSBXZWJHTEVYVC5DT01QUkVTU0VEX1JHQl9FVEMxX1dFQkdMKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbC5jb21wcmVzc2VkVGV4U3ViSW1hZ2UyRChnbC5URVhUVVJFXzJELCBtLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lvbi50ZXhPZmZzZXQueCwgcmVnaW9uLnRleE9mZnNldC55LCB3LCBoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdwdVRleHR1cmUuZ2xGb3JtYXQsIHBpeGVscyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbC5jb21wcmVzc2VkVGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCBtLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdwdVRleHR1cmUuZ2xJbnRlcm5lbEZtdCwgdywgaCwgMCwgcGl4ZWxzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB3ID0gTWF0aC5tYXgoMSwgdyA+PiAxKTtcclxuICAgICAgICAgICAgICAgICAgICBoID0gTWF0aC5tYXgoMSwgdyA+PiAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2FzZSBnbC5URVhUVVJFX0NVQkVfTUFQOiB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgcmVnaW9ucy5sZW5ndGg7IGsrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVnaW9uID0gcmVnaW9uc1trXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZjb3VudCA9IHJlZ2lvbi50ZXhTdWJyZXMuYmFzZUFycmF5TGF5ZXIgKyByZWdpb24udGV4U3VicmVzLmxheWVyQ291bnQ7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGYgPSByZWdpb24udGV4U3VicmVzLmJhc2VBcnJheUxheWVyOyBmIDwgZmNvdW50OyArK2YpIHtcclxuICAgICAgICAgICAgICAgICAgICB3ID0gcmVnaW9uLnRleEV4dGVudC53aWR0aDtcclxuICAgICAgICAgICAgICAgICAgICBoID0gcmVnaW9uLnRleEV4dGVudC5oZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1jb3VudCA9IHJlZ2lvbi50ZXhTdWJyZXMuYmFzZU1pcExldmVsICsgcmVnaW9uLnRleFN1YnJlcy5sZXZlbENvdW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobSA9IHJlZ2lvbi50ZXhTdWJyZXMuYmFzZU1pcExldmVsOyBtIDwgbWNvdW50OyArK20pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGl4ZWxzID0gYnVmZmVyc1tuKytdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0NvbXByZXNzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsLnRleFN1YkltYWdlMkQoZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICsgZiwgbSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdpb24udGV4T2Zmc2V0LngsIHJlZ2lvbi50ZXhPZmZzZXQueSwgdywgaCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncHVUZXh0dXJlLmdsRm9ybWF0LCBncHVUZXh0dXJlLmdsVHlwZSwgcGl4ZWxzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChncHVUZXh0dXJlLmdsSW50ZXJuZWxGbXQgIT09IFdlYkdMRVhULkNPTVBSRVNTRURfUkdCX0VUQzFfV0VCR0wpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbC5jb21wcmVzc2VkVGV4U3ViSW1hZ2UyRChnbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggKyBmLCBtLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdpb24udGV4T2Zmc2V0LngsIHJlZ2lvbi50ZXhPZmZzZXQueSwgdywgaCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3B1VGV4dHVyZS5nbEZvcm1hdCwgcGl4ZWxzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2wuY29tcHJlc3NlZFRleEltYWdlMkQoZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YICsgZiwgbSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3B1VGV4dHVyZS5nbEludGVybmVsRm10LCB3LCBoLCAwLCBwaXhlbHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3ID0gTWF0aC5tYXgoMSwgdyA+PiAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaCA9IE1hdGgubWF4KDEsIHcgPj4gMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1Vuc3VwcG9ydGVkIEdMIHRleHR1cmUgdHlwZSwgY29weSBidWZmZXIgdG8gdGV4dHVyZSBmYWlsZWQuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChncHVUZXh0dXJlLmZsYWdzICYgR0ZYVGV4dHVyZUZsYWdCaXQuR0VOX01JUE1BUCkge1xyXG4gICAgICAgIGdsLmdlbmVyYXRlTWlwbWFwKGdwdVRleHR1cmUuZ2xUYXJnZXQpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gV2ViR0wyQ21kRnVuY0JsaXRGcmFtZWJ1ZmZlciAoXHJcbiAgICBkZXZpY2U6IFdlYkdMMkdGWERldmljZSxcclxuICAgIHNyYzogV2ViR0wyR1BVRnJhbWVidWZmZXIsXHJcbiAgICBkc3Q6IFdlYkdMMkdQVUZyYW1lYnVmZmVyLFxyXG4gICAgc3JjUmVjdDogSUdGWFJlY3QsXHJcbiAgICBkc3RSZWN0OiBJR0ZYUmVjdCxcclxuICAgIGZpbHRlcjogR0ZYRmlsdGVyKSB7XHJcbiAgICBjb25zdCBnbCA9IGRldmljZS5nbDtcclxuXHJcbiAgICBpZiAoZGV2aWNlLnN0YXRlQ2FjaGUuZ2xSZWFkRnJhbWVidWZmZXIgIT09IHNyYy5nbEZyYW1lYnVmZmVyKSB7XHJcbiAgICAgICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLlJFQURfRlJBTUVCVUZGRVIsIHNyYy5nbEZyYW1lYnVmZmVyKTtcclxuICAgICAgICBkZXZpY2Uuc3RhdGVDYWNoZS5nbFJlYWRGcmFtZWJ1ZmZlciA9IHNyYy5nbEZyYW1lYnVmZmVyO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJlYmluZEZCTyA9IChkc3QuZ2xGcmFtZWJ1ZmZlciAhPT0gZGV2aWNlLnN0YXRlQ2FjaGUuZ2xGcmFtZWJ1ZmZlcik7XHJcbiAgICBpZiAocmViaW5kRkJPKSB7XHJcbiAgICAgICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkRSQVdfRlJBTUVCVUZGRVIsIGRzdC5nbEZyYW1lYnVmZmVyKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgbWFzayA9IDA7XHJcbiAgICBpZiAoc3JjLmdwdUNvbG9yVmlld3MubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIG1hc2sgfD0gZ2wuQ09MT1JfQlVGRkVSX0JJVDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoc3JjLmdwdURlcHRoU3RlbmNpbFZpZXcpIHtcclxuICAgICAgICBtYXNrIHw9IGdsLkRFUFRIX0JVRkZFUl9CSVQ7XHJcbiAgICAgICAgaWYgKEdGWEZvcm1hdEluZm9zW3NyYy5ncHVEZXB0aFN0ZW5jaWxWaWV3LmZvcm1hdF0uaGFzU3RlbmNpbCkge1xyXG4gICAgICAgICAgICBtYXNrIHw9IGdsLlNURU5DSUxfQlVGRkVSX0JJVDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZ2xGaWx0ZXIgPSAoZmlsdGVyID09PSBHRlhGaWx0ZXIuTElORUFSIHx8IGZpbHRlciA9PT0gR0ZYRmlsdGVyLkFOSVNPVFJPUElDKSA/IGdsLkxJTkVBUiA6IGdsLk5FQVJFU1Q7XHJcblxyXG4gICAgZ2wuYmxpdEZyYW1lYnVmZmVyKFxyXG4gICAgICAgIHNyY1JlY3QueCwgc3JjUmVjdC55LCBzcmNSZWN0LnggKyBzcmNSZWN0LndpZHRoLCBzcmNSZWN0LnkgKyBzcmNSZWN0LmhlaWdodCxcclxuICAgICAgICBkc3RSZWN0LngsIGRzdFJlY3QueSwgZHN0UmVjdC54ICsgZHN0UmVjdC53aWR0aCwgZHN0UmVjdC55ICsgZHN0UmVjdC5oZWlnaHQsXHJcbiAgICAgICAgbWFzaywgZ2xGaWx0ZXIpO1xyXG5cclxuICAgIGlmIChyZWJpbmRGQk8pIHtcclxuICAgICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIGRldmljZS5zdGF0ZUNhY2hlLmdsRnJhbWVidWZmZXIpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==