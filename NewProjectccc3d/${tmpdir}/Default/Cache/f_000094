(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../math/index.js", "./enums.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../math/index.js"), require("./enums.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.enums);
    global.sphere = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _enums) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _enums = _interopRequireDefault(_enums);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var _v3_tmp = new _index.Vec3();

  function maxComponent(v) {
    return Math.max(Math.max(v.x, v.y), v.z);
  }
  /**
   * @en
   * Basic Geometry: sphere.
   * @zh
   * 基础几何 轴对齐球。
   */
  // tslint:disable-next-line: class-name


  var sphere = /*#__PURE__*/function () {
    _createClass(sphere, [{
      key: "type",

      /**
       * @en
       * Gets the type of the shape.
       * @zh
       * 获取形状的类型。
       */
      get: function get() {
        return this._type;
      }
    }], [{
      key: "create",

      /**
       * @en
       * create a new sphere
       * @zh
       * 创建一个新的 sphere 实例。
       * @param cx 形状的相对于原点的 X 坐标。
       * @param cy 形状的相对于原点的 Y 坐标。
       * @param cz 形状的相对于原点的 Z 坐标。
       * @param r 球体的半径
       * @return {sphere} 返回一个 sphere。
       */
      value: function create(cx, cy, cz, r) {
        return new sphere(cx, cy, cz, r);
      }
      /**
       * @en
       * clone a new sphere
       * @zh
       * 克隆一个新的 sphere 实例。
       * @param {sphere} p 克隆的目标。
       * @return {sphere} 克隆出的示例。
       */

    }, {
      key: "clone",
      value: function clone(p) {
        return new sphere(p.center.x, p.center.y, p.center.z, p.radius);
      }
      /**
       * @en
       * copy the values from one sphere to another
       * @zh
       * 将从一个 sphere 的值复制到另一个 sphere。
       * @param {sphere} out 接受操作的 sphere。
       * @param {sphere} a 被复制的 sphere。
       * @return {sphere} out 接受操作的 sphere。
       */

    }, {
      key: "copy",
      value: function copy(out, p) {
        _index.Vec3.copy(out.center, p.center);

        out.radius = p.radius;
        return out;
      }
      /**
       * @en
       * create a new bounding sphere from two corner points
       * @zh
       * 从两个点创建一个新的 sphere。
       * @param out - 接受操作的 sphere。
       * @param minPos - sphere 的最小点。
       * @param maxPos - sphere 的最大点。
       * @returns {sphere} out 接受操作的 sphere。
       */

    }, {
      key: "fromPoints",
      value: function fromPoints(out, minPos, maxPos) {
        _index.Vec3.multiplyScalar(out.center, _index.Vec3.add(_v3_tmp, minPos, maxPos), 0.5);

        out.radius = _index.Vec3.subtract(_v3_tmp, maxPos, minPos).length() * 0.5;
        return out;
      }
      /**
       * @en
       * Set the components of a sphere to the given values
       * @zh 
       * 将球体的属性设置为给定的值。
       * @param {sphere} out 接受操作的 sphere。
       * @param cx 形状的相对于原点的 X 坐标。
       * @param cy 形状的相对于原点的 Y 坐标。
       * @param cz 形状的相对于原点的 Z 坐标。
       * @param {number} r 半径。
       * @return {sphere} out 接受操作的 sphere。
       * @function
       */

    }, {
      key: "set",
      value: function set(out, cx, cy, cz, r) {
        out.center.x = cx;
        out.center.y = cy;
        out.center.z = cz;
        out.radius = r;
        return out;
      }
      /**
       * @en
       * The center of this sphere.
       * @zh
       * 本地坐标的中心点。
       */

    }]);

    /**
     * @en
     * Construct a sphere.
     * @zh
     * 构造一个球。
     * @param cx 该球的世界坐标的 X 坐标。
     * @param cy 该球的世界坐标的 Y 坐标。
     * @param cz 该球的世界坐标的 Z 坐标。
     * @param {number} r 半径。
     */
    function sphere() {
      var cx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var cy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var cz = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;

      _classCallCheck(this, sphere);

      this.center = void 0;
      this.radius = void 0;
      this._type = void 0;
      this._type = _enums.default.SHAPE_SPHERE;
      this.center = new _index.Vec3(cx, cy, cz);
      this.radius = r;
    }
    /**
     * @en
     * Get a clone.
     * @zh
     * 获得克隆。
     */


    _createClass(sphere, [{
      key: "clone",
      value: function clone() {
        return sphere.clone(this);
      }
      /**
       * @en
       * Copy a sphere.
       * @zh
       * 拷贝对象。
       * @param a 拷贝的目标。
       */

    }, {
      key: "copy",
      value: function copy(a) {
        return sphere.copy(this, a);
      }
      /**
       * @en
       * Get the bounding points of this shape
       * @zh
       * 获取此形状的边界点。
       * @param {Vec3} minPos 最小点。
       * @param {Vec3} maxPos 最大点。
       */

    }, {
      key: "getBoundary",
      value: function getBoundary(minPos, maxPos) {
        _index.Vec3.set(minPos, this.center.x - this.radius, this.center.y - this.radius, this.center.z - this.radius);

        _index.Vec3.set(maxPos, this.center.x + this.radius, this.center.y + this.radius, this.center.z + this.radius);
      }
      /**
       * @en
       * Transform this shape
       * @zh
       * 将 out 根据这个 sphere 的数据进行变换。
       * @param m 变换的矩阵。
       * @param pos 变换的位置部分。
       * @param rot 变换的旋转部分。
       * @param scale 变换的缩放部分。
       * @param out 变换的目标。
       */

    }, {
      key: "transform",
      value: function transform(m, pos, rot, scale, out) {
        _index.Vec3.transformMat4(out.center, this.center, m);

        out.radius = this.radius * maxComponent(scale);
      }
      /**
       * @en
       * Translate and rotate this sphere.
       * @zh
       * 将 out 根据这个 sphere 的数据进行变换。
       * @param m 变换的矩阵。
       * @param rot 变换的旋转部分。
       * @param out 变换的目标。
       */

    }, {
      key: "translateAndRotate",
      value: function translateAndRotate(m, rot, out) {
        _index.Vec3.transformMat4(out.center, this.center, m);
      }
      /**
       * @en
       * Scaling this sphere.
       * @zh
       * 将 out 根据这个 sphere 的数据进行缩放。
       * @param scale 缩放值。
       * @param out 缩放的目标。
       */

    }, {
      key: "setScale",
      value: function setScale(scale, out) {
        out.radius = this.radius * maxComponent(scale);
      }
    }]);

    return sphere;
  }();

  _exports.default = sphere;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,