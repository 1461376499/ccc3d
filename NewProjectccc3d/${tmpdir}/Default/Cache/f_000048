(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./utils/deprecated.js", "./math/index.js", "./scheduler.js", "./3d/index.js", "./platform/index.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./utils/deprecated.js"), require("./math/index.js"), require("./scheduler.js"), require("./3d/index.js"), require("./platform/index.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.deprecated, global.index, global.scheduler, global.index, global.index);
    global.deprecated = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _deprecated, math, _scheduler, _index2, _index3) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.vmath = void 0;
  math = _interopRequireWildcard(math);

  function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  /**
   * @hidden
   */
  // VMATH
  var vmath = {};
  _exports.vmath = vmath;
  (0, _deprecated.replaceProperty)(vmath, 'vmath', [{
    name: 'vec2',
    newName: 'Vec2',
    target: math,
    targetName: 'math'
  }, {
    name: 'vec3',
    newName: 'Vec3',
    target: math,
    targetName: 'math'
  }, {
    name: 'vec4',
    newName: 'Vec4',
    target: math,
    targetName: 'math'
  }, {
    name: 'quat',
    newName: 'Quat',
    target: math,
    targetName: 'math'
  }, {
    name: 'mat3',
    newName: 'Mat3',
    target: math,
    targetName: 'math'
  }, {
    name: 'mat4',
    newName: 'Mat4',
    target: math,
    targetName: 'math'
  }, {
    name: 'color4',
    newName: 'Color',
    target: math,
    targetName: 'math'
  }, {
    name: 'rect',
    newName: 'Rect',
    target: math,
    targetName: 'math'
  }, {
    name: 'approx',
    newName: 'approx',
    target: math,
    targetName: 'math'
  }, {
    name: 'EPSILON',
    newName: 'EPSILON',
    target: math,
    targetName: 'math'
  }, {
    name: 'equals',
    newName: 'equals',
    target: math,
    targetName: 'math'
  }, {
    name: 'clamp',
    newName: 'clamp',
    target: math,
    targetName: 'math'
  }, {
    name: 'clamp01',
    newName: 'clamp01',
    target: math,
    targetName: 'math'
  }, {
    name: 'lerp',
    newName: 'lerp',
    target: math,
    targetName: 'math'
  }, {
    name: 'toRadian',
    newName: 'toRadian',
    target: math,
    targetName: 'math'
  }, {
    name: 'toDegree',
    newName: 'toDegree',
    target: math,
    targetName: 'math'
  }, {
    name: 'random',
    newName: 'random',
    target: math,
    targetName: 'math'
  }, {
    name: 'randomRange',
    newName: 'randomRange',
    target: math,
    targetName: 'math'
  }, {
    name: 'randomRangeInt',
    newName: 'randomRangeInt',
    target: math,
    targetName: 'math'
  }, {
    name: 'pseudoRandom',
    newName: 'pseudoRandom',
    target: math,
    targetName: 'math'
  }, {
    name: 'pseudoRandomRangeInt',
    newName: 'pseudoRandomRangeInt',
    target: math,
    targetName: 'math'
  }, {
    name: 'nextPow2',
    newName: 'nextPow2',
    target: math,
    targetName: 'math'
  }, {
    name: 'repeat',
    newName: 'repeat',
    target: math,
    targetName: 'math'
  }, {
    name: 'pingPong',
    newName: 'pingPong',
    target: math,
    targetName: 'math'
  }, {
    name: 'inverseLerp',
    newName: 'inverseLerp',
    target: math,
    targetName: 'math'
  }]);
  cc.vmath = vmath;
  // Scheduler
  (0, _deprecated.replaceProperty)(_scheduler.Scheduler.prototype, 'Scheduler.prototype', [{
    name: 'enableForTarget',
    newName: 'enableForTarget',
    target: _scheduler.Scheduler,
    targetName: 'Scheduler'
  }]); // Camera

  (0, _deprecated.replaceProperty)(_index2.CameraComponent.prototype, 'CameraComponent.prototype', [{
    name: 'color',
    newName: 'clearColor'
  }, {
    name: 'depth',
    newName: 'clearDepth'
  }, {
    name: 'stencil',
    newName: 'clearStencil'
  }]); // Events

  (0, _deprecated.replaceProperty)(_index3.EventTouch.prototype, 'EventTouch.prototype', [{
    name: 'getUILocationInView',
    newName: 'getLocationInView',
    target: _index3.EventTouch,
    targetName: 'EventTouch'
  }]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,