(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../math/index.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../math/index.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index);
    global.capsule = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = capsule;

  /**
   * @category 3d/primitive
   */
  var temp1 = new _index.Vec3(0, 0, 0);
  var temp2 = new _index.Vec3(0, 0, 0);
  /**
   * Generate a capsule with radiusTop radiusBottom 0.5, height 2, centered at origin,
   * but may be repositioned through the `center` option.
   * @zh
   * 生成一个胶囊体。
   * @param radiusTop 顶部半径。
   * @param radiusBottom 底部半径。
   * @param opts 胶囊体参数选项。
   */

  function capsule() {
    var radiusTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.5;
    var radiusBottom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;
    var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;
    var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    var torsoHeight = height - radiusTop - radiusBottom;
    var sides = opts.sides || 32;
    var heightSegments = opts.heightSegments || 32;
    var bottomProp = radiusBottom / height;
    var torProp = torsoHeight / height;
    var topProp = radiusTop / height;
    var bottomSegments = Math.floor(heightSegments * bottomProp);
    var topSegments = Math.floor(heightSegments * topProp);
    var torSegments = Math.floor(heightSegments * torProp);
    var topOffset = torsoHeight + radiusBottom - height / 2;
    var torOffset = radiusBottom - height / 2;
    var bottomOffset = radiusBottom - height / 2;
    var arc = opts.arc || 2.0 * Math.PI; // calculate vertex count

    var positions = [];
    var normals = [];
    var uvs = [];
    var indices = [];
    var maxRadius = Math.max(radiusTop, radiusBottom);
    var minPos = new _index.Vec3(-maxRadius, -height / 2, -maxRadius);
    var maxPos = new _index.Vec3(maxRadius, height / 2, maxRadius);
    var boundingRadius = height / 2;
    var index = 0;
    var indexArray = [];
    generateBottom();
    generateTorso();
    generateTop();
    return {
      positions: positions,
      normals: normals,
      uvs: uvs,
      indices: indices,
      minPos: minPos,
      maxPos: maxPos,
      boundingRadius: boundingRadius
    }; // =======================
    // internal fucntions
    // =======================

    function generateTorso() {
      // this will be used to calculate the normal
      var slope = (radiusTop - radiusBottom) / torsoHeight; // generate positions, normals and uvs

      for (var y = 0; y <= torSegments; y++) {
        var indexRow = [];
        var lat = y / torSegments;
        var radius = lat * (radiusTop - radiusBottom) + radiusBottom;

        for (var x = 0; x <= sides; ++x) {
          var u = x / sides;
          var v = lat * torProp + bottomProp;
          var theta = u * arc - arc / 4;
          var sinTheta = Math.sin(theta);
          var cosTheta = Math.cos(theta); // vertex

          positions.push(radius * sinTheta);
          positions.push(lat * torsoHeight + torOffset);
          positions.push(radius * cosTheta); // normal

          _index.Vec3.normalize(temp1, _index.Vec3.set(temp2, sinTheta, -slope, cosTheta));

          normals.push(temp1.x);
          normals.push(temp1.y);
          normals.push(temp1.z); // uv

          uvs.push(u, v); // save index of vertex in respective row

          indexRow.push(index); // increase index

          ++index;
        } // now save positions of the row in our index array


        indexArray.push(indexRow);
      } // generate indices


      for (var _y = 0; _y < torSegments; ++_y) {
        for (var _x = 0; _x < sides; ++_x) {
          // we use the index array to access the correct indices
          var i1 = indexArray[_y][_x];
          var i2 = indexArray[_y + 1][_x];
          var i3 = indexArray[_y + 1][_x + 1];
          var i4 = indexArray[_y][_x + 1]; // face one

          indices.push(i1);
          indices.push(i4);
          indices.push(i2); // face two

          indices.push(i4);
          indices.push(i3);
          indices.push(i2);
        }
      }
    }

    function generateBottom() {
      for (var lat = 0; lat <= bottomSegments; ++lat) {
        var theta = lat * Math.PI / bottomSegments / 2;
        var sinTheta = Math.sin(theta);
        var cosTheta = -Math.cos(theta);

        for (var lon = 0; lon <= sides; ++lon) {
          var phi = lon * 2 * Math.PI / sides - Math.PI / 2.0;
          var sinPhi = Math.sin(phi);
          var cosPhi = Math.cos(phi);
          var x = sinPhi * sinTheta;
          var y = cosTheta;
          var z = cosPhi * sinTheta;
          var u = lon / sides;
          var v = lat / heightSegments;
          positions.push(x * radiusBottom, y * radiusBottom + bottomOffset, z * radiusBottom);
          normals.push(x, y, z);
          uvs.push(u, v);

          if (lat < bottomSegments && lon < sides) {
            var seg1 = sides + 1;
            var a = seg1 * lat + lon;
            var b = seg1 * (lat + 1) + lon;
            var c = seg1 * (lat + 1) + lon + 1;
            var d = seg1 * lat + lon + 1;
            indices.push(a, d, b);
            indices.push(d, c, b);
          }

          ++index;
        }
      }
    }

    function generateTop() {
      for (var lat = 0; lat <= topSegments; ++lat) {
        var theta = lat * Math.PI / topSegments / 2 + Math.PI / 2;
        var sinTheta = Math.sin(theta);
        var cosTheta = -Math.cos(theta);

        for (var lon = 0; lon <= sides; ++lon) {
          var phi = lon * 2 * Math.PI / sides - Math.PI / 2.0;
          var sinPhi = Math.sin(phi);
          var cosPhi = Math.cos(phi);
          var x = sinPhi * sinTheta;
          var y = cosTheta;
          var z = cosPhi * sinTheta;
          var u = lon / sides;
          var v = lat / heightSegments + (1 - topProp);
          positions.push(x * radiusTop, y * radiusTop + topOffset, z * radiusTop);
          normals.push(x, y, z);
          uvs.push(u, v);

          if (lat < topSegments && lon < sides) {
            var seg1 = sides + 1;
            var a = seg1 * lat + lon + indexArray[torSegments][sides] + 1;
            var b = seg1 * (lat + 1) + lon + indexArray[torSegments][sides] + 1;
            var c = seg1 * (lat + 1) + lon + 1 + indexArray[torSegments][sides] + 1;
            var d = seg1 * lat + lon + 1 + indexArray[torSegments][sides] + 1;
            indices.push(a, d, b);
            indices.push(d, c, b);
          }
        }
      }
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkY6L2plbmtpbnMvd29ya3NwYWNlL0NyZWF0b3JfM0QvZWRpdG9yLTNkL3Jlc291cmNlcy8zZC9lbmdpbmUvY29jb3MvY29yZS9wcmltaXRpdmUvY2Fwc3VsZS50cyJdLCJuYW1lcyI6WyJ0ZW1wMSIsIlZlYzMiLCJ0ZW1wMiIsImNhcHN1bGUiLCJyYWRpdXNUb3AiLCJyYWRpdXNCb3R0b20iLCJoZWlnaHQiLCJvcHRzIiwidG9yc29IZWlnaHQiLCJzaWRlcyIsImhlaWdodFNlZ21lbnRzIiwiYm90dG9tUHJvcCIsInRvclByb3AiLCJ0b3BQcm9wIiwiYm90dG9tU2VnbWVudHMiLCJNYXRoIiwiZmxvb3IiLCJ0b3BTZWdtZW50cyIsInRvclNlZ21lbnRzIiwidG9wT2Zmc2V0IiwidG9yT2Zmc2V0IiwiYm90dG9tT2Zmc2V0IiwiYXJjIiwiUEkiLCJwb3NpdGlvbnMiLCJub3JtYWxzIiwidXZzIiwiaW5kaWNlcyIsIm1heFJhZGl1cyIsIm1heCIsIm1pblBvcyIsIm1heFBvcyIsImJvdW5kaW5nUmFkaXVzIiwiaW5kZXgiLCJpbmRleEFycmF5IiwiZ2VuZXJhdGVCb3R0b20iLCJnZW5lcmF0ZVRvcnNvIiwiZ2VuZXJhdGVUb3AiLCJzbG9wZSIsInkiLCJpbmRleFJvdyIsImxhdCIsInJhZGl1cyIsIngiLCJ1IiwidiIsInRoZXRhIiwic2luVGhldGEiLCJzaW4iLCJjb3NUaGV0YSIsImNvcyIsInB1c2giLCJub3JtYWxpemUiLCJzZXQiLCJ6IiwiaTEiLCJpMiIsImkzIiwiaTQiLCJsb24iLCJwaGkiLCJzaW5QaGkiLCJjb3NQaGkiLCJzZWcxIiwiYSIsImIiLCJjIiwiZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7O0FBbUJBLE1BQU1BLEtBQUssR0FBRyxJQUFJQyxXQUFKLENBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxDQUFmLENBQWQ7QUFDQSxNQUFNQyxLQUFLLEdBQUcsSUFBSUQsV0FBSixDQUFTLENBQVQsRUFBWSxDQUFa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c291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBjYXRlZ29yeSAzZC9wcmltaXRpdmVcclxuICovXHJcblxyXG5pbXBvcnQgeyBWZWMzIH0gZnJvbSAnLi4vbWF0aCc7XHJcblxyXG4vKipcclxuICogQGVuXHJcbiAqIFRoZSBkZWZpbml0aW9uIG9mIHRoZSBwYXJhbWV0ZXIgZm9yIGJ1aWxkaW5nIGEgY2Fwc3VsZS5cclxuICogQHpoXHJcbiAqIOiDtuWbiuS9k+WPguaVsOmAiemhueOAglxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJQ2Fwc3V0ZU9wdGlvbnMge1xyXG4gICAgc2lkZXM6IG51bWJlcjtcclxuICAgIGhlaWdodFNlZ21lbnRzOiBudW1iZXI7XHJcbiAgICBjYXBwZWQ6IGJvb2xlYW47XHJcbiAgICBhcmM6IG51bWJlcjtcclxufVxyXG5cclxuY29uc3QgdGVtcDEgPSBuZXcgVmVjMygwLCAwLCAwKTtcclxuY29uc3QgdGVtcDIgPSBuZXcgVmVjMygwLCAwLCAwKTtcclxuXHJcbi8qKlxyXG4gKiBHZW5lcmF0ZSBhIGNhcHN1bGUgd2l0aCByYWRpdXNUb3AgcmFkaXVzQm90dG9tIDAuNSwgaGVpZ2h0IDIsIGNlbnRlcmVkIGF0IG9yaWdpbixcclxuICogYnV0IG1heSBiZSByZXBvc2l0aW9uZWQgdGhyb3VnaCB0aGUgYGNlbnRlcmAgb3B0aW9uLlxyXG4gKiBAemhcclxuICog55Sf5oiQ5LiA5Liq6IO25ZuK5L2T44CCXHJcbiAqIEBwYXJhbSByYWRpdXNUb3Ag6aG26YOo5Y2K5b6E44CCXHJcbiAqIEBwYXJhbSByYWRpdXNCb3R0b20g5bqV6YOo5Y2K5b6E44CCXHJcbiAqIEBwYXJhbSBvcHRzIOiDtuWbiuS9k+WPguaVsOmAiemhueOAglxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2Fwc3VsZShyYWRpdXNUb3AgPSAwLjUsIHJhZGl1c0JvdHRvbSA9IDAuNSwgaGVpZ2h0ID0gMiwgb3B0czogUmVjdXJzaXZlUGFydGlhbDxJQ2Fwc3V0ZU9wdGlvbnM+ID0ge30pIHtcclxuICBjb25zdCB0b3Jzb0hlaWdodCA9IGhlaWdodCAtIHJhZGl1c1RvcCAtIHJhZGl1c0JvdHRvbTtcclxuICBjb25zdCBzaWRlcyA9IG9wdHMuc2lkZXMgfHwgMzI7XHJcbiAgY29uc3QgaGVpZ2h0U2VnbWVudHMgPSBvcHRzLmhlaWdodFNlZ21lbnRzIHx8IDMyO1xyXG4gIGNvbnN0IGJvdHRvbVByb3AgPSByYWRpdXNCb3R0b20gLyBoZWlnaHQ7XHJcbiAgY29uc3QgdG9yUHJvcCA9IHRvcnNvSGVpZ2h0IC8gaGVpZ2h0O1xyXG4gIGNvbnN0IHRvcFByb3AgPSByYWRpdXNUb3AgLyBoZWlnaHQ7XHJcbiAgY29uc3QgYm90dG9tU2VnbWVudHMgPSBNYXRoLmZsb29yKGhlaWdodFNlZ21lbnRzICogYm90dG9tUHJvcCk7XHJcbiAgY29uc3QgdG9wU2VnbWVudHMgPSBNYXRoLmZsb29yKGhlaWdodFNlZ21lbnRzICogdG9wUHJvcCk7XHJcbiAgY29uc3QgdG9yU2VnbWVudHMgPSBNYXRoLmZsb29yKGhlaWdodFNlZ21lbnRzICogdG9yUHJvcCk7XHJcbiAgY29uc3QgdG9wT2Zmc2V0ID0gdG9yc29IZWlnaHQgKyByYWRpdXNCb3R0b20gLSBoZWlnaHQgLyAyO1xyXG4gIGNvbnN0IHRvck9mZnNldCA9IHJhZGl1c0JvdHRvbSAtIGhlaWdodCAvIDI7XHJcbiAgY29uc3QgYm90dG9tT2Zmc2V0ID0gcmFkaXVzQm90dG9tIC0gaGVpZ2h0IC8gMjtcclxuXHJcbiAgY29uc3QgYXJjID0gb3B0cy5hcmMgfHwgMi4wICogTWF0aC5QSTtcclxuXHJcbiAgLy8gY2FsY3VsYXRlIHZlcnRleCBjb3VudFxyXG4gIGNvbnN0IHBvc2l0aW9uczogbnVtYmVyW10gPSBbXTtcclxuICBjb25zdCBub3JtYWxzOiBudW1iZXJbXSA9IFtdO1xyXG4gIGNvbnN0IHV2czogbnVtYmVyW10gPSBbXTtcclxuICBjb25zdCBpbmRpY2VzOiBudW1iZXJbXSA9IFtdO1xyXG4gIGNvbnN0IG1heFJhZGl1cyA9IE1hdGgubWF4KHJhZGl1c1RvcCwgcmFkaXVzQm90dG9tKTtcclxuICBjb25zdCBtaW5Qb3MgPSBuZXcgVmVjMygtbWF4UmFkaXVzLCAtaGVpZ2h0IC8gMiwgLW1heFJhZGl1cyk7XHJcbiAgY29uc3QgbWF4UG9zID0gbmV3IFZlYzMobWF4UmFkaXVzLCBoZWlnaHQgLyAyLCBtYXhSYWRpdXMpO1xyXG4gIGNvbnN0IGJvdW5kaW5nUmFkaXVzID0gaGVpZ2h0IC8gMjtcclxuXHJcbiAgbGV0IGluZGV4ID0gMDtcclxuICBjb25zdCBpbmRleEFycmF5OiBudW1iZXJbXVtdID0gW107XHJcblxyXG4gIGdlbmVyYXRlQm90dG9tKCk7XHJcblxyXG4gIGdlbmVyYXRlVG9yc28oKTtcclxuXHJcbiAgZ2VuZXJhdGVUb3AoKTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIHBvc2l0aW9ucyxcclxuICAgIG5vcm1hbHMsXHJcbiAgICB1dnMsXHJcbiAgICBpbmRpY2VzLFxyXG4gICAgbWluUG9zLFxyXG4gICAgbWF4UG9zLFxyXG4gICAgYm91bmRpbmdSYWRpdXMsXHJcbiAgfTtcclxuXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT1cclxuICAvLyBpbnRlcm5hbCBmdWNudGlvbnNcclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICBmdW5jdGlvbiBnZW5lcmF0ZVRvcnNvICgpIHtcclxuICAgIC8vIHRoaXMgd2lsbCBiZSB1c2VkIHRvIGNhbGN1bGF0ZSB0aGUgbm9ybWFsXHJcbiAgICBjb25zdCBzbG9wZSA9IChyYWRpdXNUb3AgLSByYWRpdXNCb3R0b20pIC8gdG9yc29IZWlnaHQ7XHJcblxyXG4gICAgLy8gZ2VuZXJhdGUgcG9zaXRpb25zLCBub3JtYWxzIGFuZCB1dnNcclxuICAgIGZvciAobGV0IHkgPSAwOyB5IDw9IHRvclNlZ21lbnRzOyB5KyspIHtcclxuXHJcbiAgICAgIGNvbnN0IGluZGV4Um93OiBudW1iZXJbXSA9IFtdO1xyXG4gICAgICBjb25zdCBsYXQgPSB5IC8gdG9yU2VnbWVudHM7XHJcbiAgICAgIGNvbnN0IHJhZGl1cyA9IGxhdCAqIChyYWRpdXNUb3AgLSByYWRpdXNCb3R0b20pICsgcmFkaXVzQm90dG9tO1xyXG5cclxuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPD0gc2lkZXM7ICsreCkge1xyXG4gICAgICAgIGNvbnN0IHUgPSB4IC8gc2lkZXM7XHJcbiAgICAgICAgY29uc3QgdiA9IGxhdCAqIHRvclByb3AgKyBib3R0b21Qcm9wO1xyXG4gICAgICAgIGNvbnN0IHRoZXRhID0gdSAqIGFyYyAtIChhcmMgLyA0KTtcclxuXHJcbiAgICAgICAgY29uc3Qgc2luVGhldGEgPSBNYXRoLnNpbih0aGV0YSk7XHJcbiAgICAgICAgY29uc3QgY29zVGhldGEgPSBNYXRoLmNvcyh0aGV0YSk7XHJcblxyXG4gICAgICAgIC8vIHZlcnRleFxyXG4gICAgICAgIHBvc2l0aW9ucy5wdXNoKHJhZGl1cyAqIHNpblRoZXRhKTtcclxuICAgICAgICBwb3NpdGlvbnMucHVzaChsYXQgKiB0b3Jzb0hlaWdodCArIHRvck9mZnNldCk7XHJcbiAgICAgICAgcG9zaXRpb25zLnB1c2gocmFkaXVzICogY29zVGhldGEpO1xyXG5cclxuICAgICAgICAvLyBub3JtYWxcclxuICAgICAgICBWZWMzLm5vcm1hbGl6ZSh0ZW1wMSwgVmVjMy5zZXQodGVtcDIsIHNpblRoZXRhLCAtc2xvcGUsIGNvc1RoZXRhKSk7XHJcbiAgICAgICAgbm9ybWFscy5wdXNoKHRlbXAxLngpO1xyXG4gICAgICAgIG5vcm1hbHMucHVzaCh0ZW1wMS55KTtcclxuICAgICAgICBub3JtYWxzLnB1c2godGVtcDEueik7XHJcblxyXG4gICAgICAgIC8vIHV2XHJcbiAgICAgICAgdXZzLnB1c2godSwgdik7XHJcbiAgICAgICAgLy8gc2F2ZSBpbmRleCBvZiB2ZXJ0ZXggaW4gcmVzcGVjdGl2ZSByb3dcclxuICAgICAgICBpbmRleFJvdy5wdXNoKGluZGV4KTtcclxuXHJcbiAgICAgICAgLy8gaW5jcmVhc2UgaW5kZXhcclxuICAgICAgICArK2luZGV4O1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBub3cgc2F2ZSBwb3NpdGlvbnMgb2YgdGhlIHJvdyBpbiBvdXIgaW5kZXggYXJyYXlcclxuICAgICAgaW5kZXhBcnJheS5wdXNoKGluZGV4Um93KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBnZW5lcmF0ZSBpbmRpY2VzXHJcbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHRvclNlZ21lbnRzOyArK3kpIHtcclxuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCBzaWRlczsgKyt4KSB7XHJcbiAgICAgICAgLy8gd2UgdXNlIHRoZSBpbmRleCBhcnJheSB0byBhY2Nlc3MgdGhlIGNvcnJlY3QgaW5kaWNlc1xyXG4gICAgICAgIGNvbnN0IGkxID0gaW5kZXhBcnJheVt5XVt4XTtcclxuICAgICAgICBjb25zdCBpMiA9IGluZGV4QXJyYXlbeSArIDFdW3hdO1xyXG4gICAgICAgIGNvbnN0IGkzID0gaW5kZXhBcnJheVt5ICsgMV1beCArIDFdO1xyXG4gICAgICAgIGNvbnN0IGk0ID0gaW5kZXhBcnJheVt5XVt4ICsgMV07XHJcblxyXG4gICAgICAgIC8vIGZhY2Ugb25lXHJcbiAgICAgICAgaW5kaWNlcy5wdXNoKGkxKTtcclxuICAgICAgICBpbmRpY2VzLnB1c2goaTQpO1xyXG4gICAgICAgIGluZGljZXMucHVzaChpMik7XHJcblxyXG4gICAgICAgIC8vIGZhY2UgdHdvXHJcbiAgICAgICAgaW5kaWNlcy5wdXNoKGk0KTtcclxuICAgICAgICBpbmRpY2VzLnB1c2goaTMpO1xyXG4gICAgICAgIGluZGljZXMucHVzaChpMik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGdlbmVyYXRlQm90dG9tICgpIHtcclxuICAgIGZvciAobGV0IGxhdCA9IDA7IGxhdCA8PSBib3R0b21TZWdtZW50czsgKytsYXQpIHtcclxuICAgICAgY29uc3QgdGhldGEgPSBsYXQgKiBNYXRoLlBJIC8gYm90dG9tU2VnbWVudHMgLyAyO1xyXG4gICAgICBjb25zdCBzaW5UaGV0YSA9IE1hdGguc2luKHRoZXRhKTtcclxuICAgICAgY29uc3QgY29zVGhldGEgPSAtTWF0aC5jb3ModGhldGEpO1xyXG5cclxuICAgICAgZm9yIChsZXQgbG9uID0gMDsgbG9uIDw9IHNpZGVzOyArK2xvbikge1xyXG4gICAgICAgIGNvbnN0IHBoaSA9IGxvbiAqIDIgKiBNYXRoLlBJIC8gc2lkZXMgLSBNYXRoLlBJIC8gMi4wO1xyXG4gICAgICAgIGNvbnN0IHNpblBoaSA9IE1hdGguc2luKHBoaSk7XHJcbiAgICAgICAgY29uc3QgY29zUGhpID0gTWF0aC5jb3MocGhpKTtcclxuXHJcbiAgICAgICAgY29uc3QgeCA9IHNpblBoaSAqIHNpblRoZXRhO1xyXG4gICAgICAgIGNvbnN0IHkgPSBjb3NUaGV0YTtcclxuICAgICAgICBjb25zdCB6ID0gY29zUGhpICogc2luVGhldGE7XHJcbiAgICAgICAgY29uc3QgdSA9IGxvbiAvIHNpZGVzO1xyXG4gICAgICAgIGNvbnN0IHYgPSBsYXQgLyBoZWlnaHRTZWdtZW50cztcclxuXHJcbiAgICAgICAgcG9zaXRpb25zLnB1c2goeCAqIHJhZGl1c0JvdHRvbSwgeSAqIHJhZGl1c0JvdHRvbSArIGJvdHRvbU9mZnNldCwgeiAqIHJhZGl1c0JvdHRvbSk7XHJcbiAgICAgICAgbm9ybWFscy5wdXNoKHgsIHksIHopO1xyXG4gICAgICAgIHV2cy5wdXNoKHUsIHYpO1xyXG5cclxuICAgICAgICBpZiAoKGxhdCA8IGJvdHRvbVNlZ21lbnRzKSAmJiAobG9uIDwgc2lkZXMpKSB7XHJcbiAgICAgICAgICBjb25zdCBzZWcxID0gc2lkZXMgKyAxO1xyXG4gICAgICAgICAgY29uc3QgYSA9IHNlZzEgKiBsYXQgKyBsb247XHJcbiAgICAgICAgICBjb25zdCBiID0gc2VnMSAqIChsYXQgKyAxKSArIGxvbjtcclxuICAgICAgICAgIGNvbnN0IGMgPSBzZWcxICogKGxhdCArIDEpICsgbG9uICsgMTtcclxuICAgICAgICAgIGNvbnN0IGQgPSBzZWcxICogbGF0ICsgbG9uICsgMTtcclxuXHJcbiAgICAgICAgICBpbmRpY2VzLnB1c2goYSwgZCwgYik7XHJcbiAgICAgICAgICBpbmRpY2VzLnB1c2goZCwgYywgYik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICArK2luZGV4O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBnZW5lcmF0ZVRvcCAoKSB7XHJcbiAgICBmb3IgKGxldCBsYXQgPSAwOyBsYXQgPD0gdG9wU2VnbWVudHM7ICsrbGF0KSB7XHJcbiAgICAgIGNvbnN0IHRoZXRhID0gbGF0ICogTWF0aC5QSSAvIHRvcFNlZ21lbnRzIC8gMiArIE1hdGguUEkgLyAyO1xyXG4gICAgICBjb25zdCBzaW5UaGV0YSA9IE1hdGguc2luKHRoZXRhKTtcclxuICAgICAgY29uc3QgY29zVGhldGEgPSAtTWF0aC5jb3ModGhldGEpO1xyXG5cclxuICAgICAgZm9yIChsZXQgbG9uID0gMDsgbG9uIDw9IHNpZGVzOyArK2xvbikge1xyXG4gICAgICAgIGNvbnN0IHBoaSA9IGxvbiAqIDIgKiBNYXRoLlBJIC8gc2lkZXMgLSBNYXRoLlBJIC8gMi4wO1xyXG4gICAgICAgIGNvbnN0IHNpblBoaSA9IE1hdGguc2luKHBoaSk7XHJcbiAgICAgICAgY29uc3QgY29zUGhpID0gTWF0aC5jb3MocGhpKTtcclxuXHJcbiAgICAgICAgY29uc3QgeCA9IHNpblBoaSAqIHNpblRoZXRhO1xyXG4gICAgICAgIGNvbnN0IHkgPSBjb3NUaGV0YTtcclxuICAgICAgICBjb25zdCB6ID0gY29zUGhpICogc2luVGhldGE7XHJcbiAgICAgICAgY29uc3QgdSA9IGxvbiAvIHNpZGVzO1xyXG4gICAgICAgIGNvbnN0IHYgPSBsYXQgLyBoZWlnaHRTZWdtZW50cyArICgxIC0gdG9wUHJvcCk7XHJcblxyXG4gICAgICAgIHBvc2l0aW9ucy5wdXNoKHggKiByYWRpdXNUb3AsIHkgKiByYWRpdXNUb3AgKyB0b3BPZmZzZXQsIHogKiByYWRpdXNUb3ApO1xyXG4gICAgICAgIG5vcm1hbHMucHVzaCh4LCB5LCB6KTtcclxuICAgICAgICB1dnMucHVzaCh1LCB2KTtcclxuXHJcbiAgICAgICAgaWYgKChsYXQgPCB0b3BTZWdtZW50cykgJiYgKGxvbiA8IHNpZGVzKSkge1xyXG4gICAgICAgICAgY29uc3Qgc2VnMSA9IHNpZGVzICsgMTtcclxuICAgICAgICAgIGNvbnN0IGEgPSBzZWcxICogbGF0ICsgbG9uICsgaW5kZXhBcnJheVt0b3JTZWdtZW50c11bc2lkZXNdICsgMTtcclxuICAgICAgICAgIGNvbnN0IGIgPSBzZWcxICogKGxhdCArIDEpICsgbG9uICsgaW5kZXhBcnJheVt0b3JTZWdtZW50c11bc2lkZXNdICsgMTtcclxuICAgICAgICAgIGNvbnN0IGMgPSBzZWcxICogKGxhdCArIDEpICsgbG9uICsgMSArIGluZGV4QXJyYXlbdG9yU2VnbWVudHNdW3NpZGVzXSArIDE7XHJcbiAgICAgICAgICBjb25zdCBkID0gc2VnMSAqIGxhdCArIGxvbiArIDEgKyBpbmRleEFycmF5W3RvclNlZ21lbnRzXVtzaWRlc10gKyAxO1xyXG5cclxuICAgICAgICAgIGluZGljZXMucHVzaChhLCBkLCBiKTtcclxuICAgICAgICAgIGluZGljZXMucHVzaChkLCBjLCBiKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19