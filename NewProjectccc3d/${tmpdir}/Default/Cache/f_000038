(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../gfx/pipeline-state.js", "../../pipeline/define.js", "./pass.js", "./pass-utils.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../gfx/pipeline-state.js"), require("../../pipeline/define.js"), require("./pass.js"), require("./pass-utils.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.pipelineState, global.define, global.pass, global.passUtils);
    global.passInstance = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _pipelineState, _define, _pass, _passUtils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.PassInstance = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  var PassInstance = /*#__PURE__*/function (_Pass) {
    _inherits(PassInstance, _Pass);

    _createClass(PassInstance, [{
      key: "parent",
      get: function get() {
        return this._parent;
      }
    }]);

    function PassInstance(parent, owner) {
      var _this;

      _classCallCheck(this, PassInstance);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(PassInstance).call(this, parent.device));
      _this._parent = void 0;
      _this._owner = void 0;
      _this._dontNotify = false;
      _this._parent = parent;
      _this._owner = owner;

      _this._doInit(_this._parent, true); // defines may change now


      var _iterator = _createForOfIteratorHelper(_this._shaderInfo.blocks),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var u = _step.value;

          if ((0, _define.isBuiltinBinding)(u.binding)) {
            continue;
          }

          var block = _this._blocks[u.binding];
          var parentBlock = _this._parent.blocks[u.binding];
          block.view.set(parentBlock.view);
          block.dirty = true;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var _iterator2 = _createForOfIteratorHelper(_this._shaderInfo.samplers),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _u = _step2.value;

          if ((0, _define.isBuiltinBinding)(_u.binding)) {
            continue;
          }

          _this._textureViews[_u.binding] = _this._parent._textureViews[_u.binding];
          _this._samplers[_u.binding] = _this._parent._samplers[_u.binding];
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return _this;
    }

    _createClass(PassInstance, [{
      key: "overridePipelineStates",
      value: function overridePipelineStates(original, overrides) {
        this._bs = new _pipelineState.GFXBlendState();
        this._dss = new _pipelineState.GFXDepthStencilState();
        this._rs = new _pipelineState.GFXRasterizerState();

        _pass.Pass.fillinPipelineInfo(this, original);

        _pass.Pass.fillinPipelineInfo(this, overrides);

        this._onStateChange();
      }
    }, {
      key: "tryCompile",
      value: function tryCompile(defineOverrides) {
        if (defineOverrides) {
          if (!(0, _passUtils.assignDefines)(this._defines, defineOverrides)) {
            return false;
          }
        }

        var res = _get(_getPrototypeOf(PassInstance.prototype), "tryCompile", this).call(this);

        this._onStateChange();

        return res;
      }
    }, {
      key: "beginChangeStatesSilently",
      value: function beginChangeStatesSilently() {
        this._dontNotify = true;
      }
    }, {
      key: "endChangeStatesSilently",
      value: function endChangeStatesSilently() {
        this._dontNotify = false;
      }
    }, {
      key: "_dynamicBatchingSync",
      value: function _dynamicBatchingSync() {
        this._defines.USE_BATCHING = this._defines.USE_INSTANCING = false;
      }
    }, {
      key: "_onStateChange",
      value: function _onStateChange() {
        this._hash = _pass.Pass.getPSOHash(this);

        this._owner.onPassStateChange(this._dontNotify);
      }
    }]);

    return PassInstance;
  }(_pass.Pass);

  _exports.PassInstance = PassInstance;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,