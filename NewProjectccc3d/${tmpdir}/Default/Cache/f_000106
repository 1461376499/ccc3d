(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../geometry/index.js", "../math/index.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../geometry/index.js"), require("../math/index.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.index);
    global.culling = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _index2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.cullLight = cullLight;
  _exports.cullDirectionalLight = cullDirectionalLight;
  _exports.cullSphereLight = cullSphereLight;
  _exports.cullSpotLight = cullSpotLight;
  _exports.calcDirectionalLightCullFrustum = _exports.cullSceneWithDirectionalLight = void 0;

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function cullLight(light, model) {
    // TODO:to add light mask & lightmapped model check.
    return false;
  }

  function cullDirectionalLight(light, model) {
    return cullLight(light, model);
  }

  function cullSphereLight(light, model) {
    return cullLight(light, model) || !!(model.worldBounds && !_index.intersect.aabb_aabb(model.worldBounds, light.aabb));
  }

  function cullSpotLight(light, model) {
    return cullLight(light, model) || !!(model.worldBounds && (!_index.intersect.aabb_aabb(model.worldBounds, light.aabb) || !_index.intersect.aabb_frustum(model.worldBounds, light.frustum)));
  }

  var cullSceneWithDirectionalLight = function () {
    var lightFrustum = new _index.frustum();
    lightFrustum.accurate = true;
    return function (out, modelToCull, sceneCamera, light, near, far, nearBias, stamp) {
      calcDirectionalLightCullFrustum(lightFrustum, sceneCamera, light, near, far, nearBias);

      var _iterator = _createForOfIteratorHelper(modelToCull),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var m = _step.value;

          if (!m.enabled || !m.worldBounds) {
            continue;
          }

          m.updateTransform(stamp);

          if (!_index.intersect.aabb_frustum(m.worldBounds, lightFrustum)) {
            continue;
          }

          m.updateUBOs(stamp);
          out.push(m);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    };
  }();

  _exports.cullSceneWithDirectionalLight = cullSceneWithDirectionalLight;

  var calcDirectionalLightCullFrustum = function () {
    var lightPos = new _index2.Vec3();
    var lightViewCenter = new _index2.Vec3();
    var lightRot = new _index2.Quat();
    var camFrustum = new _index.frustum();
    camFrustum.accurate = true;
    var lightViewMat = new _index2.Mat4();
    var lightVeiwMatInv = new _index2.Mat4();
    var minBoxCorner = new _index2.Vec3();
    var maxBoxCorner = new _index2.Vec3();
    return function (out, sceneCamera, light, near, far, nearBias) {
      _index2.Mat4.fromRT(lightViewMat, light.node.getWorldRotation(lightRot), sceneCamera.node.getWorldPosition(lightPos));

      _index2.Mat4.invert(lightVeiwMatInv, lightViewMat);

      sceneCamera.getSplitFrustum(camFrustum, near, far); // transform camera frustum to light space

      camFrustum.transform(lightVeiwMatInv);

      _index2.Vec3.set(minBoxCorner, camFrustum.vertices[0].x, camFrustum.vertices[0].y, camFrustum.vertices[0].z);

      _index2.Vec3.copy(maxBoxCorner, minBoxCorner); // calculate the light frustum corner


      for (var i = 1; i < camFrustum.vertices.length; i++) {
        minBoxCorner.x = Math.min(minBoxCorner.x, camFrustum.vertices[i].x);
        minBoxCorner.y = Math.min(minBoxCorner.y, camFrustum.vertices[i].y);
        minBoxCorner.z = Math.min(minBoxCorner.z, camFrustum.vertices[i].z);
        maxBoxCorner.x = Math.max(maxBoxCorner.x, camFrustum.vertices[i].x);
        maxBoxCorner.y = Math.max(maxBoxCorner.y, camFrustum.vertices[i].y);
        maxBoxCorner.z = Math.max(maxBoxCorner.z, camFrustum.vertices[i].z);
      } // calc the light world transform ,suppose that the light's position is at the camera's location.


      _index2.Vec3.set(lightViewCenter, (minBoxCorner.x + maxBoxCorner.x) / 2, (minBoxCorner.y + maxBoxCorner.y) / 2, maxBoxCorner.z);

      lightViewCenter.z += nearBias;

      _index2.Vec3.transformMat4(lightPos, lightViewCenter, lightViewMat);

      _index2.Mat4.fromRT(lightViewMat, light.node.getWorldRotation(lightRot), lightPos); // calc the light's frustum


      _index.frustum.createOrtho(out, maxBoxCorner.x - minBoxCorner.x, maxBoxCorner.y - minBoxCorner.y, 0, minBoxCorner.z - nearBias - maxBoxCorner.z, lightViewMat);
    };
  }();

  _exports.calcDirectionalLightCullFrustum = calcDirectionalLightCullFrustum;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,