(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../data/class-decorator.js", "../math/index.js", "../default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../data/class-decorator.js"), require("../math/index.js"), require("../default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.classDecorator, global.index, global.defaultConstants);
    global.prefabHelper = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _classDecorator, _index, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = syncWithPrefab;
  _exports.PrefabInfo = void 0;

  var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  var PrefabInfo = (_dec = (0, _classDecorator.ccclass)('cc.PrefabInfo'), _dec(_class = (_class2 = (_temp = function PrefabInfo() {
    _classCallCheck(this, PrefabInfo);

    _initializerDefineProperty(this, "root", _descriptor, this);

    _initializerDefineProperty(this, "asset", _descriptor2, this);

    _initializerDefineProperty(this, "fileId", _descriptor3, this);

    _initializerDefineProperty(this, "sync", _descriptor4, this);

    _initializerDefineProperty(this, "_synced", _descriptor5, this);
  } // _instantiate (cloned) {
  //     if (!cloned) {
  //         cloned = new cc._PrefabInfo();
  //     }
  //     cloned.root = this.root;
  //     cloned.asset = this.asset;
  //     cloned.fileId = this.fileId;
  //     cloned.sync = this.sync;
  //     cloned._synced = this._synced;
  //     return cloned;
  // }
  , _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "root", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "asset", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "fileId", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return '';
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "sync", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_synced", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return {
        "default": false,
        serializable: false
      };
    }
  })), _class2)) || _class);
  _exports.PrefabInfo = PrefabInfo;
  cc._PrefabInfo = PrefabInfo; // update node to make it sync with prefab

  function syncWithPrefab(node) {
    var _prefab = node._prefab; // non-reentrant

    _prefab._synced = true; //

    if (!_prefab.asset) {
      if (_defaultConstants.EDITOR) {// @ts-ignore
        // const NodeUtils = Editor.require('scene://utils/node');
        // // @ts-ignore
        // const PrefabUtils = Editor.require('scene://utils/prefab');
        // // @ts-ignore
        // cc.warn(Editor.T('MESSAGE.prefab.missing_prefab', { node: NodeUtils.getNodePath(node) }));
        // node.name += PrefabUtils.MISSING_PREFAB_SUFFIX;
      } else {
        cc.errorID(3701, node.name);
      }

      node._prefab = null;
      return;
    } // save root's preserved props to avoid overwritten by prefab


    var _objFlags = node._objFlags;
    var _parent = node._parent;
    var _id = node._id;
    var _name = node._name;
    var _active = node._active;
    var x = node._position.x;
    var y = node._position.y;
    var _quat = node._quat;
    var _localZOrder = node._localZOrder;
    var _globalZOrder = node._globalZOrder; // instantiate prefab

    cc.game._isCloning = true;

    if (_defaultConstants.SUPPORT_JIT) {
      _prefab.asset._doInstantiate(node);
    } else {
      // root in prefab asset is always synced
      var prefabRoot = _prefab.asset.data;
      prefabRoot._prefab._synced = true; // use node as the instantiated prefabRoot to make references to prefabRoot in prefab redirect to node

      prefabRoot._iN$t = node; // instantiate prefab and apply to node

      cc.instantiate._clone(prefabRoot, prefabRoot);
    }

    cc.game._isCloning = false; // restore preserved props

    node._objFlags = _objFlags;
    node._parent = _parent;
    node._id = _id;
    node._prefab = _prefab;
    node._name = _name;
    node._active = _active;
    node._position.x = x;
    node._position.y = y;

    _index.Quat.copy(node._quat, _quat);

    node._localZOrder = _localZOrder;
    node._globalZOrder = _globalZOrder;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,