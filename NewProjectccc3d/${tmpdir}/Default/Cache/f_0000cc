(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../3d/framework/skinning-model-component.js", "../math/index.js", "./animation-state.js", "./skeletal-animation-data-hub.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../3d/framework/skinning-model-component.js"), require("../math/index.js"), require("./animation-state.js"), require("./skeletal-animation-data-hub.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.skinningModelComponent, global.index, global.animationState, global.skeletalAnimationDataHub);
    global.skeletalAnimationState = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _skinningModelComponent, _index, _animationState, _skeletalAnimationDataHub) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SkeletalAnimationState = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  var m4_1 = new _index.Mat4();
  var m4_2 = new _index.Mat4();
  var noCurves = [];

  var SkeletalAnimationState = /*#__PURE__*/function (_AnimationState) {
    _inherits(SkeletalAnimationState, _AnimationState);

    function SkeletalAnimationState(clip) {
      var _this;

      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

      _classCallCheck(this, SkeletalAnimationState);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(SkeletalAnimationState).call(this, clip, name));
      _this._frames = 1;
      _this._bakedDuration = 0;
      _this._animInfo = null;
      _this._sockets = [];
      _this._animInfoMgr = void 0;
      _this._comps = [];
      _this._parent = null;
      _this._curvesInited = false;
      _this._animInfoMgr = cc.director.root.dataPoolManager.jointAnimationInfo;
      return _this;
    }

    _createClass(SkeletalAnimationState, [{
      key: "initialize",
      value: function initialize(root) {
        if (this._curveLoaded) {
          return;
        }

        this._comps.length = 0;
        var comps = root.getComponentsInChildren(_skinningModelComponent.SkinningModelComponent);

        for (var i = 0; i < comps.length; ++i) {
          var comp = comps[i];

          if (comp.skinningRoot === root) {
            this._comps.push(comp);
          }
        }

        this._parent = root.getComponent('cc.SkeletalAnimationComponent');
        var baked = this._parent.useBakedAnimation;

        _get(_getPrototypeOf(SkeletalAnimationState.prototype), "initialize", this).call(this, root, baked ? noCurves : undefined);

        this._curvesInited = !baked;

        var info = _skeletalAnimationDataHub.SkelAnimDataHub.getOrExtract(this.clip).info;

        this._frames = info.frames - 1;
        this._animInfo = this._animInfoMgr.getData(root.uuid);
        this._bakedDuration = this._frames / info.sample; // last key
      }
    }, {
      key: "onPlay",
      value: function onPlay() {
        _get(_getPrototypeOf(SkeletalAnimationState.prototype), "onPlay", this).call(this);

        var baked = this._parent.useBakedAnimation;

        if (baked) {
          this._sampleCurves = this._sampleCurvesBaked;
          this.duration = this._bakedDuration;

          this._animInfoMgr.switchClip(this._animInfo, this._clip);

          for (var i = 0; i < this._comps.length; ++i) {
            this._comps[i].uploadAnimation(this.clip);
          }
        } else {
          this._sampleCurves = _get(_getPrototypeOf(SkeletalAnimationState.prototype), "_sampleCurves", this);
          this.duration = this._clip.duration;

          if (!this._curvesInited) {
            this._curveLoaded = false;

            _get(_getPrototypeOf(SkeletalAnimationState.prototype), "initialize", this).call(this, this._targetNode);

            this._curvesInited = true;
          }
        }
      }
    }, {
      key: "rebuildSocketCurves",
      value: function rebuildSocketCurves(sockets) {
        this._sockets.length = 0;

        if (!this._targetNode) {
          return null;
        }

        var root = this._targetNode;

        for (var i = 0; i < sockets.length; ++i) {
          var socket = sockets[i];
          var targetNode = root.getChildByPath(socket.path);

          if (!socket.target) {
            continue;
          }

          var clipData = _skeletalAnimationDataHub.SkelAnimDataHub.getOrExtract(this.clip);

          var animPath = socket.path;
          var source = clipData.data[animPath];
          var animNode = targetNode;
          var downstream = void 0;

          while (!source) {
            var idx = animPath.lastIndexOf('/');
            animPath = animPath.substring(0, idx);
            source = clipData.data[animPath];

            if (animNode) {
              if (!downstream) {
                downstream = _index.Mat4.identity(m4_2);
              }

              _index.Mat4.fromRTS(m4_1, animNode.rotation, animNode.position, animNode.scale);

              _index.Mat4.multiply(downstream, m4_1, downstream);

              animNode = animNode.parent;
            }

            if (idx < 0) {
              break;
            }
          }

          var curveData = source && source.worldMatrix.values;
          var frames = clipData.info.frames;
          var transforms = [];

          for (var f = 0; f < frames; f++) {
            var mat = void 0;

            if (curveData && downstream) {
              // curve & static two-way combination
              mat = _index.Mat4.multiply(m4_1, curveData[f], downstream);
            } else if (curveData) {
              // there is a curve directly controlling the joint
              mat = curveData[f];
            } else if (downstream) {
              // fallback to default pose if no animation curve can be found upstream
              mat = downstream;
            } else {
              // bottom line: render the original mesh as-is
              mat = _index.Mat4.IDENTITY;
            }

            var tfm = {
              pos: new _index.Vec3(),
              rot: new _index.Quat(),
              scale: new _index.Vec3()
            };

            _index.Mat4.toRTS(mat, tfm.rot, tfm.pos, tfm.scale);

            transforms.push(tfm);
          }

          this._sockets.push({
            target: socket.target,
            frames: transforms
          });
        }
      }
    }, {
      key: "_sampleCurvesBaked",
      value: function _sampleCurvesBaked(ratio) {
        var info = this._animInfo;
        var curFrame = ratio * this._frames + 0.5 | 0;

        if (curFrame === info.data[0]) {
          return;
        }

        info.data[0] = curFrame;
        info.dirty = true;

        for (var i = 0; i < this._sockets.length; ++i) {
          var _this$_sockets$i = this._sockets[i],
              target = _this$_sockets$i.target,
              frames = _this$_sockets$i.frames;
          var _frames$curFrame = frames[curFrame],
              pos = _frames$curFrame.pos,
              rot = _frames$curFrame.rot,
              scale = _frames$curFrame.scale; // ratio guaranteed to be in [0, 1]

          target.setRTS(rot, pos, scale);
        }
      }
    }]);

    return SkeletalAnimationState;
  }(_animationState.AnimationState);

  _exports.SkeletalAnimationState = SkeletalAnimationState;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,