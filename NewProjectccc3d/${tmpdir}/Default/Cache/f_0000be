(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../assets/sprite-atlas.js", "../assets/asset.js", "../assets/sprite-frame.js", "../assets/texture-2d.js", "../assets/texture-cube.js", "../utils/js.js", "../utils/misc.js", "./asset-loader.js", "./asset-table.js", "./auto-release-utils.js", "./downloader.js", "./loader.js", "./loading-items.js", "./pipeline.js", "./released-asset-checker.js", "../default-constants.js", "../platform/debug.js", "../utils/path.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../assets/sprite-atlas.js"), require("../assets/asset.js"), require("../assets/sprite-frame.js"), require("../assets/texture-2d.js"), require("../assets/texture-cube.js"), require("../utils/js.js"), require("../utils/misc.js"), require("./asset-loader.js"), require("./asset-table.js"), require("./auto-release-utils.js"), require("./downloader.js"), require("./loader.js"), require("./loading-items.js"), require("./pipeline.js"), require("./released-asset-checker.js"), require("../default-constants.js"), require("../platform/debug.js"), require("../utils/path.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.spriteAtlas, global.asset, global.spriteFrame, global.texture2d, global.textureCube, global.js, global.misc, global.assetLoader, global.assetTable, global.autoReleaseUtils, global.downloader, global.loader, global.loadingItems, global.pipeline, global.releasedAssetChecker, global.defaultConstants, global.debug, global.path);
    global.CCLoader = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _spriteAtlas, _asset, _spriteFrame, _texture2d, _textureCube, _js, _misc, _assetLoader, _assetTable, _autoReleaseUtils, _downloader, _loader, _loadingItems, _pipeline, _releasedAssetChecker, _defaultConstants, _debug, path) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.loader = _exports.CCLoader = void 0;
  _assetLoader = _interopRequireDefault(_assetLoader);
  _downloader = _interopRequireDefault(_downloader);
  _loader = _interopRequireDefault(_loader);
  _releasedAssetChecker = _interopRequireDefault(_releasedAssetChecker);
  path = _interopRequireWildcard(path);

  function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  var assetTables = Object.create(null);
  assetTables.assets = new _assetTable.AssetTable();
  assetTables.internal = new _assetTable.AssetTable();

  function getXMLHttpRequest() {
    return window.XMLHttpRequest ? new window.XMLHttpRequest() : new ActiveXObject('MSXML2.XMLHTTP');
  }

  var _info = {
    url: null,
    raw: false
  };
  /*
   * @en Convert a resources by finding its real url with uuid, otherwise we will use the uuid or raw url as its url<br>
   * So we gurantee there will be url in result
   * @zh 通过使用 uuid 查找资源的真实 url 来转换资源，否则将使用 uuid 或原始 url 作为其 url<br>
   * 所以可以保证结果中会有 url
   * @param res
   */

  function getResWithUrl(res) {
    var id;
    var result;
    var isUuid;

    if (_typeof(res) === 'object') {
      result = res;

      if (res.url) {
        return result;
      } else {
        id = res.uuid;
      }
    } else {
      result = {};
      id = res;
    }

    isUuid = result.type ? result.type === 'uuid' : cc.AssetLibrary._uuidInSettings(id);

    cc.AssetLibrary._getAssetInfoInRuntime(id, _info);

    result.url = !isUuid ? id : _info.url;

    if (_info.url && result.type === 'uuid' && _info.raw) {
      result.type = null;
      result.isRawAsset = true;
    } else if (!isUuid) {
      result.isRawAsset = true;
    }

    return result;
  }

  var _sharedResources = [];
  var _sharedList = [];
  /**
   * @en Loader for resource loading process. The engine automatically initialize its singleton object {{loader}}.
   * @zh 资源加载管理器，引擎会自动创建一个单例对象 {{loader}}。
   */

  var CCLoader = /*#__PURE__*/function (_Pipeline) {
    _inherits(CCLoader, _Pipeline);

    /**
     * @en Gets a new XMLHttpRequest instance.
     * @zh 获取一个新的 XMLHttpRequest 的实例。
     */

    /**
     * @en The asset loader in loader's pipeline, it's by default the first pipe.<br>
     * It's used to identify an asset's type, and determine how to download it.
     * @zh loader 中的资源加载器，默认情况下是最先加载的。<br>
     * 用于标识资源的类型，并确定如何加载此资源。
     */

    /**
     * @en The md5 pipe in loader's pipeline, it could be absent if the project isn't build with md5 option.<br>
     * It's used to modify the url to the real downloadable url with md5 suffix.
     * @zh loader 中的 md5 加载管道，如果项目没有使用 md5 构建，则此项可能不存在。<br>
     * 用于修改带有 md5 后缀的真实可下载的 URL 。
     */

    /**
     * @en
     * The downloader in loader's pipeline, it's by default the second pipe.<br>
     * It's used to download files with several handlers: pure text, image, script, audio, font, uuid.<br>
     * You can add your own download function with addDownloadHandlers
     * @zh
     * loader 中的资源下载程序，默认情况下是第二个加载的。<br>
     * 它用于下载带有多个处理程序的文件：纯文本，图像，脚本，音频，字体，uuid。<br>
     * 您可以使用 addDownloadHandlers 来添加自己的下载函数
     */

    /**
     * @en
     * The loader in loader's pipeline, it's by default the third pipe.<br>
     * It's used to parse downloaded content with several handlers: JSON, image, plist, fnt, uuid.<br>
     * You can add your own download function with addLoadHandlers
     * @zh
     * loader 中的资源下载程序，默认情况下是第三个加载的。<br>
     * 它用于解析下载的内容及多个处理程序的文件：纯文本，图像，脚本，音频，字体，uuid。<br>
     * 您可以使用 addLoadHandlers 来添加自己的下载函数
     */

    /**
     * @en The default progression callback during the loading process, 
     * if no progression callback is passed to {{load}} function, then this default callback will be used.
     * @zh Loader 默认的进度回调函数，如果在调用 {{load}} 函数时没有指定进度回调函数的话，会调用默认进度回调函数。
     */
    function CCLoader() {
      var _this;

      _classCallCheck(this, CCLoader);

      var assetLoader = new _assetLoader.default();
      var downloader = new _downloader.default(); // tslint:disable-next-line: no-shadowed-letiable

      var loader = new _loader.default();
      _this = _possibleConstructorReturn(this, _getPrototypeOf(CCLoader).call(this, [assetLoader, downloader, loader]));
      _this.getXMLHttpRequest = void 0;
      _this.assetLoader = void 0;
      _this.md5Pipe = void 0;
      _this.downloader = void 0;
      _this.loader = void 0;
      _this.onProgress = void 0;
      _this._assetTables = void 0;
      _this._autoReleaseSetting = void 0;
      _this._releasedAssetChecker_DEBUG = void 0;
      _this.getXMLHttpRequest = getXMLHttpRequest;
      _this.assetLoader = assetLoader;
      _this.md5Pipe = null;
      _this.downloader = downloader;
      _this.loader = loader;
      _this.onProgress = null;
      _this._assetTables = assetTables; // assets to release automatically

      _this._autoReleaseSetting = (0, _js.createMap)(true);

      if (_defaultConstants.DEBUG) {
        _this._releasedAssetChecker_DEBUG = new _releasedAssetChecker.default();
      }

      return _this;
    }
    /**
     * @en Initialize with director
     * @zh 使用 {{director}} 初始化
     * @param director The director instance of engine
     */


    _createClass(CCLoader, [{
      key: "init",
      value: function init(director) {
        if (_defaultConstants.DEBUG) {
          var self = this;
          director.on(cc.Director.EVENT_AFTER_UPDATE, function () {
            self._releasedAssetChecker_DEBUG.checkCouldRelease(self._cache);
          });
        }
      }
      /**
       * @en Add custom supported types handler or modify existing type handler for download process.
       * @zh 为下载程序添加自定义支持的类型处理程序或修改现有的类型处理程序。
       * @example
       * ```typescript
       *  loader.addDownloadHandlers({
       *      // This will match all url with `.scene` extension or all url with `scene` type
       *      'scene' : function (url, callback) {}
       *  });
       * ```
       * @param extMap Handlers for corresponding type in a map
       */

    }, {
      key: "addDownloadHandlers",
      value: function addDownloadHandlers(extMap) {
        this.downloader.addHandlers(extMap);
      }
      /**
       * @en Add custom supported types handler or modify existing type handler for load process.
       * @zh 为加载程序添加自定义支持的类型处理程序或修改现有的类型处理程序。
       * @example
       * ```typescript
       *  loader.addLoadHandlers({
       *      // This will match all url with `.scene` extension or all url with `scene` type
       *      'scene' : function (url, callback) {}
       *  });
       * ```
       * @param extMap Handlers for corresponding type in a map
       */

    }, {
      key: "addLoadHandlers",
      value: function addLoadHandlers(extMap) {
        this.loader.addHandlers(extMap);
      } // tslint:disable: max-line-length

      /**
       * @en
       * Load resources with a progression callback and a complete callback.<br>
       * The progression callback is the same as Pipeline's [[LoadingItems.onProgress]] <br>
       * The complete callback is almost the same as Pipeline's [[LoadingItems.onComplete]] <br>
       * The only difference is when user pass a single url as resources, the complete callback will set its result directly as the second parameter.
       * @zh
       * 使用进度回调和完整回调加载资源。<br>
       * 进度回调与 Pipeline 的 [[LoadingItems.onProgress]] 相同<br>
       * 完整的回调与 Pipeline 的 [[LoadingItems.onComplete]] 几乎相同<br>
       * 唯一的区别是当用户将单个 URL 作为资源传递时，完整的回调将其结果直接设置为第二个参数。
       * @example
       * ```TypeScript
       * loader.load('a.png', function (err, tex) {
       *     cc.log('Result should be a texture: ' + (tex instanceof cc.Texture2D));
       * });
       *
       * loader.load('http://example.com/a.png', function (err, tex) {
       *     cc.log('Should load a texture from external url: ' + (tex instanceof cc.Texture2D));
       * });
       *
       * loader.load({url: 'http://example.com/getImageREST?file=a.png', type: 'png'}, function (err, tex) {
       *     cc.log('Should load a texture from RESTful API by specify the type: ' + (tex instanceof cc.Texture2D));
       * });
       *
       * loader.load(['a.png', 'b.json'], function (errors, results) {
       *     if (errors) {
       *         for (let i = 0; i < errors.length; i++) {
       *             cc.log('Error url [' + errors[i] + ']: ' + results.getError(errors[i]));
       *         }
       *     }
       *     let aTex = results.getContent('a.png');
       *     let bJsonObj = results.getContent('b.json');
       * });
       * ```
       * @param resources - Url list or load request list
       * @param progressCallback - Progression callback
       * @param {Number} progressCallback.completedCount - The number of the items that are already completed
       * @param {Number} progressCallback.totalCount - The total number of the items
       * @param {Object} progressCallback.item - The latest item which flow out the pipeline
       * @param completeCallback - Completion callback
       */

    }, {
      key: "load",
      value: function load(resources, progressCallback, completeCallback) {
        if (_defaultConstants.DEV && !resources) {
          return (0, _debug.error)('[loader.load] resources must be non-nil.');
        }

        if (completeCallback === undefined) {
          completeCallback = progressCallback;
          progressCallback = this.onProgress || null;
        }

        var self = this;
        var singleRes = false;
        var resList;
        var res;

        if (resources instanceof Array) {
          resList = resources;
        } else {
          if (resources) {
            singleRes = true;
            resList = [resources];
          } else {
            resList = [];
          }
        }

        _sharedResources.length = 0; // tslint:disable-next-line: prefer-for-of

        for (var i = 0; i < resList.length; ++i) {
          var resource = resList[i]; // Backward compatibility

          if (resource && resource.id) {
            (0, _debug.warnID)(4920, resource.id);

            if (!resource.uuid && !resource.url) {
              resource.url = resource.id;
            }
          }

          res = getResWithUrl(resource);

          if (!res.url && !res.uuid) {
            continue;
          }

          var item = this._cache[res.url];

          _sharedResources.push(item || res);
        }

        var queue = _loadingItems.LoadingItems.create(this, progressCallback, function (errors, items) {
          (0, _misc.callInNextTick)(function () {
            if (completeCallback) {
              if (singleRes) {
                var id = res.url;
                completeCallback.call(self, items.getError(id), items.getContent(id));
              } else {
                completeCallback.call(self, errors, items);
              }

              completeCallback = null;
            }

            items.destroy();
          });
        });

        _loadingItems.LoadingItems.initQueueDeps(queue);

        queue.append(_sharedResources);
        _sharedResources.length = 0;
      }
      /**
       * @en See: {{Pipeline.flowInDeps}}
       * @zh 参考：{{Pipeline.flowInDeps}}
       */

    }, {
      key: "flowInDeps",
      value: function flowInDeps(owner, urlList, callback) {
        _sharedList.length = 0; // tslint:disable-next-line: prefer-for-of

        for (var i = 0; i < urlList.length; ++i) {
          var res = getResWithUrl(urlList[i]);

          if (!res.url && !res.uuid) {
            continue;
          }

          var item = this._cache[res.url];

          if (item) {
            _sharedList.push(item);
          } else {
            _sharedList.push(res);
          }
        } // @ts-ignore


        var queue = _loadingItems.LoadingItems.create(this, owner ? function (completedCount, totalCount, item) {
          // @ts-ignore
          if (queue._ownerQueue && queue._ownerQueue.onProgress) {
            // @ts-ignore
            queue._ownerQueue._childOnProgress(item);
          }
        } : null, function (errors, items) {
          callback(errors, items); // Clear deps because it's already done
          // Each item will only flowInDeps once, so it's still safe here

          if (owner && owner.deps) {
            owner.deps.length = 0;
          }

          items.destroy();
        });

        if (owner) {
          var ownerQueue = _loadingItems.LoadingItems.getQueue(owner); // Set the root ownerQueue, if no ownerQueue defined in ownerQueue, it's the root


          queue._ownerQueue = ownerQueue && ownerQueue._ownerQueue || ownerQueue;
        }

        var accepted = queue.append(_sharedList, owner);
        _sharedList.length = 0;
        return accepted;
      }
    }, {
      key: "loadRes",

      /**
       * @en
       * Load assets from the "resources" folder inside the "assets" folder of your project.<br>
       * <br>
       * Note: All asset URLs in Creator use forward slashes, URLs using backslashes will not work.
       * @zh
       * 从项目的 “assets” 文件夹下的 “resources” 文件夹中加载资源<br>
       * <br>
       * 注意：Creator 中的所有资源 URL 都使用正斜杠，使用反斜杠的 URL 将不起作用。
       * @param url - The url of the asset to be loaded, this url should be related path without file extension to the `resources` folder.
       * @param type - If type is provided, only asset for correspond type will be loaded
       * @param progressCallback - Progression callback
       * @param {Number} progressCallback.completedCount - The number of the items that are already completed.
       * @param {Number} progressCallback.totalCount - The total number of the items.
       * @param {Object} progressCallback.item - The latest item which flow out the pipeline.
       * @param completeCallback - Completion callback
       * @param {Error} completeCallback.error - The error info or null if loaded successfully.
       * @param {Object} completeCallback.resource - The loaded resource if it can be found otherwise returns null.
       *
       * @example
       * ```typescript
       * // load the prefab (project/assets/resources/misc/character/cocos) from resources folder
       * loader.loadRes('misc/character/cocos', function (err, prefab) {
       *     if (err) {
       *         cc.error(err.message || err);
       *         return;
       *     }
       *     cc.log('Result should be a prefab: ' + (prefab instanceof cc.Prefab));
       * });
       *
       * // load the sprite frame of (project/assets/resources/imgs/cocos.png) from resources folder
       * loader.loadRes('imgs/cocos', cc.SpriteFrame, function (err, spriteFrame) {
       *     if (err) {
       *         cc.error(err.message || err);
       *         return;
       *     }
       *     cc.log('Result should be a sprite frame: ' + (spriteFrame instanceof cc.SpriteFrame));
       * });
       * ```
       */
      value: function loadRes(url, type, mount, progressCallback, completeCallback) {
        if (arguments.length !== 5) {
          completeCallback = progressCallback;
          progressCallback = mount;
          mount = 'assets';
        }

        var args = this._parseLoadResArgs(type, progressCallback, completeCallback);

        type = args.type;
        progressCallback = args.onProgress;
        completeCallback = args.onComplete;
        var self = this;

        var uuid = self._getResUuid(url, type, mount, true);

        if (uuid) {
          this.load({
            type: 'uuid',
            uuid: uuid
          }, progressCallback, function (err, asset) {
            if (asset) {
              // should not release these assets, even if they are static referenced in the scene.
              self.setAutoReleaseRecursively(uuid, false);
            }

            if (completeCallback) {
              completeCallback(err, asset);
            }
          });
        } else {
          self._urlNotFound(url, type, completeCallback);
        }
      }
      /**
       * @en
       * Load all assets in a folder inside the "assets/resources" folder of your project.<br>
       * <br>
       * Note: All asset URLs in Creator use forward slashes, URLs using backslashes will not work.
       * @zh
       * 将所有资产加载到项目 “assets / resources” 文件夹中
       * <br>
       * 注意：Creator 中的所有资源 URL 都使用正斜杠，使用反斜杠的 URL 将不起作用。
       * @param url The url of the directory to be loaded, this url should be related path to the `resources` folder.
       * @param type - If type is provided, only assets for correspond type will be loaded
       * @param progressCallback - Progression callback
       * @param {Number} progressCallback.completedCount - The number of the items that are already completed.
       * @param {Number} progressCallback.totalCount - The total number of the items.
       * @param {Object} progressCallback.item - The latest item which flow out the pipeline.
       * @param completeCallback - Completion callback
       * @param {Error} completeCallback.error - If one of the asset failed, the complete callback is immediately called
       *                                         with the error. If all assets are loaded successfully, error will be null.
       * @param {Asset[]|Array} completeCallback.assets - An array of all loaded assets.
       *                                             If nothing to load, assets will be an empty array.
       * @param {string[]} completeCallback.urls - An array that lists all the URLs of loaded assets.
       *
       * @example
       * ```typescript
       * // load the texture (resources/imgs/cocos.png) and the corresponding sprite frame
       * loader.loadResDir('imgs/cocos', function (err, assets) {
       *     if (err) {
       *         cc.error(err);
       *         return;
       *     }
       *     let texture = assets[0];
       *     let spriteFrame = assets[1];
       * });
       *
       * // load all textures in "resources/imgs/"
       * loader.loadResDir('imgs', cc.Texture2D, function (err, textures) {
       *     let texture1 = textures[0];
       *     let texture2 = textures[1];
       * });
       *
       * // load all JSONs in "resources/data/"
       * loader.loadResDir('data', function (err, objects, urls) {
       *     let data = objects[0];
       *     let url = urls[0];
       * });
       * ```
       */

    }, {
      key: "loadResDir",
      value: function loadResDir(url, type, mount, progressCallback, completeCallback) {
        if (arguments.length !== 5) {
          completeCallback = progressCallback;
          progressCallback = mount;
          mount = 'assets';
        }

        if (!assetTables[mount]) {
          return;
        }

        var args = this._parseLoadResArgs(type, progressCallback, completeCallback);

        type = args.type;
        progressCallback = args.onProgress;
        completeCallback = args.onComplete;
        var urls = [];
        var uuids = assetTables[mount].getUuidArray(url, type, urls);

        this._loadResUuids(uuids, progressCallback, function (errors, assetRes, urlRes) {
          // The spriteFrame url in spriteAtlas will be removed after build project
          // To show users the exact structure in asset panel, we need to return the spriteFrame assets in spriteAtlas
          var assetResLength = assetRes.length;

          for (var i = 0; i < assetResLength; ++i) {
            if (assetRes[i] instanceof _spriteAtlas.SpriteAtlas) {
              var spriteFrames = assetRes[i].getSpriteFrames(); // tslint:disable: forin

              for (var k in spriteFrames) {
                var sf = spriteFrames[k];
                assetRes.push(sf);

                if (urlRes) {
                  urlRes.push("".concat(urlRes[i], "/").concat(sf.name));
                }
              }
            }
          }

          if (completeCallback) {
            completeCallback(errors, assetRes, urlRes);
          }
        }, urls);
      }
      /**
       * @en This method is like [[loadRes]] except that it accepts array of url.
       * @zh 此方法除了接受 URL 数组参数外，与 [[loadRes]] 方法相同。
       *
       * @param url The url array of assets to be loaded, this url should be related path without extension to the `resources` folder.
       * @param type - If type is provided, only assets for correspond type will be loaded
       * @param progressCallback - Progression callback
       * @param {Number} progressCallback.completedCount - The number of the items that are already completed.
       * @param {Number} progressCallback.totalCount - The total number of the items.
       * @param {Object} progressCallback.item - The latest item which flow out the pipeline.
       * @param completeCallback - Completion callback
       * @param {Error} completeCallback.error - If one of the asset failed, the complete callback is immediately called
       *                                         with the error. If all assets are loaded successfully, error will be null.
       * @param {Asset[]|Array} completeCallback.assets - An array of all loaded assets.
       *                                                     If nothing to load, assets will be an empty array.
       * @example
       * ```typescript
       * // load the SpriteFrames from resources folder
       * let spriteFrames;
       * let urls = ['misc/characters/character_01', 'misc/weapons/weapons_01'];
       * loader.loadResArray(urls, cc.SpriteFrame, function (err, assets) {
       *     if (err) {
       *         cc.error(err);
       *         return;
       *     }
       *     spriteFrames = assets;
       *     // ...
       * });
       * ```
       */

    }, {
      key: "loadResArray",
      value: function loadResArray(urls, type, mount, progressCallback, completeCallback) {
        if (arguments.length !== 5) {
          completeCallback = progressCallback;
          progressCallback = mount;
          mount = 'assets';
        }

        var args = this._parseLoadResArgs(type, progressCallback, completeCallback);

        type = args.type;
        progressCallback = args.onProgress;
        completeCallback = args.onComplete;
        var uuids = []; // tslint:disable: prefer-for-of

        for (var i = 0; i < urls.length; i++) {
          var _url = urls[i];

          var uuid = this._getResUuid(_url, type, mount, true);

          if (uuid) {
            uuids.push(uuid);
          } else {
            this._urlNotFound(_url, type, completeCallback);

            return;
          }
        }

        this._loadResUuids(uuids, progressCallback, completeCallback);
      }
      /**
       * @en
       * Get resource data by id. <br>
       * When you load resources with [[load]] or [[loadRes]],
       * the url will be the unique identity of the resource.
       * After loaded, you can acquire them by passing the url to this API.
       * @zh
       * 根据 ID 获取资源数据。<br>
       * 当使用 [[load]] 或 [[loadRes]] 来加载资源时，<br>
       * URL 将是资源的唯一标识。<br>
       * 在完成加载之后，你可以通过将 URL 传递给此 API 来获取它们。
       * @param url The asset url, it should be related path without extension to the `resources` folder.
       * @param type If type is provided, the asset for correspond type will be returned
       */

    }, {
      key: "getRes",
      value: function getRes(url, type) {
        var item = this._cache[url];

        if (!item) {
          var uuid = this._getResUuid(url, type, null, true);

          if (uuid) {
            var ref = this._getReferenceKey(uuid);

            item = this._cache[ref];
          } else {
            return null;
          }
        }

        if (item && item.alias) {
          item = item.alias;
        }

        return item && item.complete ? item.content : null;
      }
      /**
       * @en Get total resources count in loader.
       * @zh 获取加载的总资源数量
       */

    }, {
      key: "getResCount",
      value: function getResCount() {
        return Object.keys(this._cache).length;
      }
      /**
       * @en
       * Get all resource dependencies of the requested asset in an array, including itself.<br>
       * The owner parameter accept the following types: 1. The asset itself; 2. The resource url; 3. The asset's uuid.<br>
       * The returned array stores the dependencies with their uuids, after retrieve dependencies,<br>
       * you can release them, access dependent assets by passing the uuid to [[getRes]], or other stuffs you want.<br>
       * For release all dependencies of an asset, please refer to [[release]]
       * Here is some examples:
       * @zh
       * 获取一个指定资源的所有依赖资源，包含它自身，并保存在数组中返回。<br>
       * owner 参数接收以下几种类型：1. 资源 asset 对象；2. 资源目录下的 url；3. 资源的 uuid。<br>
       * 返回的数组将仅保存依赖资源的 uuid，获取这些 uuid 后，你可以从 loader 释放这些资源；通过 [[getRes]] 获取某个资源或者进行其他你需要的操作。<br>
       * 想要释放一个资源及其依赖资源，可以参考 [[release]]。<br>
       * 下面是一些示例代码：
       * @example
       * ```typescript
       * // Release all dependencies of a loaded prefab
       * let deps = loader.getDependsRecursively(prefab);
       * loader.release(deps);
       * // Retrieve all dependent textures
       * let deps = loader.getDependsRecursively('prefabs/sample');
       * let textures = [];
       * for (let i = 0; i < deps.length; ++i) {
       *     let item = loader.getRes(deps[i]);
       *     if (item instanceof cc.Texture2D) {
       *         textures.push(item);
       *     }
       * }
       * ```
       * @param owner - The asset itself or the asset url or the asset uuid
       */

    }, {
      key: "getDependsRecursively",
      value: function getDependsRecursively(owner) {
        if (owner) {
          var key = this._getReferenceKey(owner);

          var assets = (0, _autoReleaseUtils.getDependsRecursively)(key);
          assets.push(key);
          return assets;
        } else {
          return [];
        }
      }
      /**
       * @en
       * Release the content of an asset or an array of assets by uuid.<br>
       * This method will not only remove the cache of the asset in loader, but also clean up its content.<br>
       * For example, if you release a texture, the texture asset and its gl texture data will be freed up.<br>
       * In complexe project, you can use this function with [[getDependsRecursively]] to free up memory in critical circumstances.<br>
       * Notice, this method may cause the texture to be unusable, if there are still other nodes use the same texture, they may turn to black and report gl errors.<br>
       * If you only want to remove the cache of an asset, please use [[Pipeline.removeItem]]
       * @zh
       * 通过 id（通常是资源 url）来释放一个资源或者一个资源数组。<br>
       * 这个方法不仅会从 loader 中删除资源的缓存引用，还会清理它的资源内容。<br>
       * 比如说，当你释放一个 texture 资源，这个 texture 和它的 gl 贴图数据都会被释放。<br>
       * 在复杂项目中，我们建议你结合 [[getDependsRecursively]] 来使用，便于在设备内存告急的情况下更快地释放不再需要的资源的内存。<br>
       * 注意，这个函数可能会导致资源贴图或资源所依赖的贴图不可用，如果场景中存在节点仍然依赖同样的贴图，它们可能会变黑并报 GL 错误。<br>
       * 如果你只想删除一个资源的缓存引用，请使用 [[Pipeline.removeItem]]
       *
       * @example
       * ```typescript
       * // Release a texture which is no longer need
       * loader.release(texture);
       * // Release all dependencies of a loaded prefab
       * let deps = loader.getDependsRecursively('prefabs/sample');
       * loader.release(deps);
       * // If there is no instance of this prefab in the scene, the prefab and its dependencies like textures, sprite frames, etc, will be freed up.
       * // If you have some other nodes share a texture in this prefab, you can skip it in two ways:
       * // 1. Forbid auto release a texture before release
       * loader.setAutoRelease(texture2d, false);
       * // 2. Remove it from the dependencies array
       * let deps = loader.getDependsRecursively('prefabs/sample');
       * let index = deps.indexOf(texture2d._uuid);
       * if (index !== -1)
       *     deps.splice(index, 1);
       * loader.release(deps);
       * ```
       * @param asset Asset or assets to be released
       */

    }, {
      key: "release",
      value: function release(asset) {
        if (Array.isArray(asset)) {
          for (var i = 0; i < asset.length; i++) {
            var key = asset[i];
            this.release(key);
          }
        } else if (asset) {
          var id = this._getReferenceKey(asset);

          var item = this.getItem(id);

          if (item) {
            var removed = this.removeItem(id);
            asset = item.content;

            if (asset instanceof _asset.Asset) {
              var nativeUrl = asset.nativeUrl;

              if (nativeUrl) {
                this.release(nativeUrl); // uncache loading item of native asset
              }

              asset.destroy();
            }

            if (_defaultConstants.DEBUG && removed) {
              this._releasedAssetChecker_DEBUG.setReleased(item, id);
            }
          }
        }
      }
      /**
       * @en Release the asset by its object. Refer to {{release}} for detailed informations.
       * @zh 通过资源对象自身来释放资源。详细信息请参考 {{release}}
       * @param asset The asset to be released
       */

    }, {
      key: "releaseAsset",
      value: function releaseAsset(asset) {
        var uuid = asset._uuid;

        if (uuid) {
          this.release(uuid);
        }
      }
      /**
       * @en Release the asset loaded by {{loadRes}}. Refer to {{release}} for detailed informations.
       * @zh 释放通过 {{loadRes}} 加载的资源。详细信息请参考 {{release}}
       * @param url The asset url, it should be related path without extension to the `resources` folder.
       * @param type If type is provided, the asset for correspond type will be returned
       */

    }, {
      key: "releaseRes",
      value: function releaseRes(url, type, mount) {
        var uuid = this._getResUuid(url, type, mount, true);

        if (uuid) {
          this.release(uuid);
        } else {
          (0, _debug.errorID)(4914, url);
        }
      }
      /**
       * @en Release the all assets loaded by {{loadResDir}}. Refer to {{release}} for detailed informations.
       * @zh 释放通过 {{loadResDir}} 加载的资源。详细信息请参考 {{release}}
       * @param url The url of the directory to release, it should be related path to the `resources` folder.
       * @param type If type is provided, the asset for correspond type will be returned
       */

    }, {
      key: "releaseResDir",
      value: function releaseResDir(url, type, mount) {
        mount = mount || 'assets';

        if (!assetTables[mount]) {
          return;
        }

        var uuids = assetTables[mount].getUuidArray(url, type);

        for (var i = 0; i < uuids.length; i++) {
          var uuid = uuids[i];
          this.release(uuid);
        }
      }
      /**
       * @en Resource all assets. Refer to {{release}} for detailed informations.
       * @zh 释放所有资源。详细信息请参考 {{release}}
       */

    }, {
      key: "releaseAll",
      value: function releaseAll() {
        for (var id in this._cache) {
          this.release(id);
        }
      } // AUTO RELEASE
      // override

    }, {
      key: "removeItem",
      value: function removeItem(key) {
        var removed = _pipeline.Pipeline.prototype.removeItem.call(this, key);

        delete this._autoReleaseSetting[key];
        return removed;
      }
      /**
       * @en
       * Indicates whether to release the asset when loading a new scene.<br>
       * By default, when loading a new scene, all assets in the previous scene will be released or preserved<br>
       * according to whether the previous scene checked the "Auto Release Assets" option.<br>
       * On the other hand, assets dynamically loaded by using `loader.loadRes` or `loader.loadResDir`<br>
       * will not be affected by that option, remain not released by default.<br>
       * Use this API to change the default behavior on a single asset, to force preserve or release specified asset when scene switching.<br>
       * <br>
       * See: {{setAutoReleaseRecursively}}, {{isAutoRelease}}
       * @zh
       * 设置当场景切换时是否自动释放资源。<br>
       * 默认情况下，当加载新场景时，旧场景的资源根据旧场景是否勾选“Auto Release Assets”，将会被释放或者保留。<br>
       * 而使用 `loader.loadRes` 或 `loader.loadResDir` 动态加载的资源，则不受场景设置的影响，默认不自动释放。<br>
       * 使用这个 API 可以在单个资源上改变这个默认行为，强制在切换场景时保留或者释放指定资源。<br>
       * <br>
       * 参考：{{setAutoReleaseRecursively}}，{{isAutoRelease}}
       *
       * @example
       * ```typescript
       * // auto release the texture event if "Auto Release Assets" disabled in current scene
       * loader.setAutoRelease(texture2d, true);
       * // don't release the texture even if "Auto Release Assets" enabled in current scene
       * loader.setAutoRelease(texture2d, false);
       * // first parameter can be url
       * loader.setAutoRelease(audioUrl, false);
       * ```
       * @param assetOrUrlOrUuid - The asset or its url or its uuid
       * @param autoRelease - Whether to release automatically during scene switch
       */

    }, {
      key: "setAutoRelease",
      value: function setAutoRelease(assetOrUrlOrUuid, autoRelease) {
        var key = this._getReferenceKey(assetOrUrlOrUuid);

        if (key) {
          this._autoReleaseSetting[key] = !!autoRelease;
        } else if (_defaultConstants.DEV) {
          (0, _debug.warnID)(4902);
        }
      }
      /**
       * @en
       * Indicates whether to release the asset and its referenced other assets when loading a new scene.<br>
       * By default, when loading a new scene, all assets in the previous scene will be released or preserved<br>
       * according to whether the previous scene checked the "Auto Release Assets" option.<br>
       * On the other hand, assets dynamically loaded by using `loader.loadRes` or `loader.loadResDir`<br>
       * will not be affected by that option, remain not released by default.<br>
       * Use this API to change the default behavior on the specified asset and its recursively referenced assets, to force preserve or release specified asset when scene switching.<br>
       * <br>
       * See: {{setAutoRelease}}, {{isAutoRelease}}
       * @zh
       * 设置当场景切换时是否自动释放资源及资源引用的其它资源。<br>
       * 默认情况下，当加载新场景时，旧场景的资源根据旧场景是否勾选“Auto Release Assets”，将会被释放或者保留。<br>
       * 而使用 `loader.loadRes` 或 `loader.loadResDir` 动态加载的资源，则不受场景设置的影响，默认不自动释放。<br>
       * 使用这个 API 可以在指定资源及资源递归引用到的所有资源上改变这个默认行为，强制在切换场景时保留或者释放指定资源。<br>
       * <br>
       * 参考：{{setAutoRelease}}，{{isAutoRelease}}
       *
       * @example
       * ```typescript
       * // auto release the SpriteFrame and its Texture event if "Auto Release Assets" disabled in current scene
       * loader.setAutoReleaseRecursively(spriteFrame, true);
       * // don't release the SpriteFrame and its Texture even if "Auto Release Assets" enabled in current scene
       * loader.setAutoReleaseRecursively(spriteFrame, false);
       * // don't release the Prefab and all the referenced assets
       * loader.setAutoReleaseRecursively(prefab, false);
       * ```
       * @param assetOrUrlOrUuid - The asset or its url or its uuid
       * @param autoRelease - Whether to release automatically during scene switch
       */

    }, {
      key: "setAutoReleaseRecursively",
      value: function setAutoReleaseRecursively(assetOrUrlOrUuid, autoRelease) {
        autoRelease = !!autoRelease;

        var key = this._getReferenceKey(assetOrUrlOrUuid);

        if (key) {
          this._autoReleaseSetting[key] = autoRelease;
          var depends = (0, _autoReleaseUtils.getDependsRecursively)(key);

          for (var i = 0; i < depends.length; i++) {
            var depend = depends[i];
            this._autoReleaseSetting[depend] = autoRelease;
          }
        } else if (_defaultConstants.DEV) {
          (0, _debug.warnID)(4902);
        }
      }
      /**
       * @en Returns whether the asset is configured as auto released, despite how "Auto Release Assets" property is set on scene asset.<br>
       * <br>
       * See: {{setAutoRelease}}, {{setAutoReleaseRecursively}}
       * @zh 返回指定的资源是否有被设置为自动释放，不论场景的“Auto Release Assets”如何设置。<br>
       * <br>
       * 参考：{{setAutoRelease}}，{{setAutoReleaseRecursively}}
       * @param {Asset|string} assetOrUrl - asset object or the raw asset's url
       * @returns {Boolean}
       */

    }, {
      key: "isAutoRelease",
      value: function isAutoRelease(assetOrUrl) {
        var key = this._getReferenceKey(assetOrUrl);

        if (key) {
          return !!this._autoReleaseSetting[key];
        }

        return false;
      }
      /**
       * @en Retrieve asset's uuid
       * @zh 获取资源的 uuid
       */

    }, {
      key: "_getResUuid",
      value: function _getResUuid(url, type, mount, quiet) {
        mount = mount || 'assets';
        var uuid = '';

        if (_defaultConstants.EDITOR) {
          var info = EditorExtends.Asset.getAssetInfoFromUrl("db://".concat(mount, "/resources/").concat(url));
          uuid = info ? info.uuid : '';
        } else {
          var assetTable = assetTables[mount];

          if (url && assetTable) {
            // Ignore parameter
            var index = url.indexOf('?');

            if (index !== -1) {
              url = url.substr(0, index);
            }

            uuid = assetTable.getUuid(url, type);

            if (!uuid) {
              var extname = path.extname(url);

              if (extname) {
                // strip extname
                url = url.slice(0, -extname.length);
                uuid = assetTable.getUuid(url, type);

                if (uuid && !quiet) {
                  (0, _debug.warnID)(4901, url, extname);
                }
              }
            }
          }
        }

        if (!uuid && type) {
          if ((0, _js.isChildClassOf)(type, _spriteFrame.SpriteFrame) || (0, _js.isChildClassOf)(type, _texture2d.Texture2D) || (0, _js.isChildClassOf)(type, _textureCube.TextureCube)) {
            (0, _debug.warnID)(4934);
          }
        }

        return uuid;
      }
      /**
       * @en Find the asset's reference id in loader, asset could be asset object, asset uuid or asset url
       * @zh 在 laoder 中找到资源的引用 id ，参数可以是资源对象、资源的 uuid 或者是资源的 url
       */

    }, {
      key: "_getReferenceKey",
      value: function _getReferenceKey(assetOrUrlOrUuid) {
        var key;

        if (_typeof(assetOrUrlOrUuid) === 'object') {
          key = assetOrUrlOrUuid._uuid || null;
        } else if (typeof assetOrUrlOrUuid === 'string') {
          key = this._getResUuid(assetOrUrlOrUuid, undefined, undefined, true) || assetOrUrlOrUuid;
        }

        if (!key) {
          (0, _debug.warnID)(4800, assetOrUrlOrUuid);
          return key;
        }

        cc.AssetLibrary._getAssetInfoInRuntime(key, _info);

        return this._cache[_info.url] ? _info.url : key;
      } // Operation when complete the request without found any asset

    }, {
      key: "_urlNotFound",
      value: function _urlNotFound(url, type, completeCallback) {
        (0, _misc.callInNextTick)(function () {
          url = cc.url.normalize(url);
          var info = "".concat(type ? (0, _js.getClassName)(type) : 'Asset', " in \"resources/").concat(url, "\" does not exist.");

          if (completeCallback) {
            completeCallback(new Error(info), []);
          }
        });
      }
    }, {
      key: "_parseLoadResArgs",
      value: function _parseLoadResArgs(type, onProgress, onComplete) {
        if (onComplete === undefined) {
          var isValidType = (0, _js.isChildClassOf)(type, cc.RawAsset);

          if (onProgress) {
            onComplete = onProgress;

            if (isValidType) {
              onProgress = this.onProgress || null;
            }
          } else if (onProgress === undefined && !isValidType) {
            onComplete = type;
            onProgress = this.onProgress || null;
            type = null;
          }

          if (onProgress !== undefined && !isValidType) {
            onProgress = type;
            type = null;
          }
        }

        return {
          type: type,
          onProgress: onProgress,
          onComplete: onComplete
        };
      } // Load assets with uuids

    }, {
      key: "_loadResUuids",
      value: function _loadResUuids(uuids, progressCallback, completeCallback, urls) {
        if (uuids.length > 0) {
          var self = this;
          var res = uuids.map(function (uuid) {
            return {
              type: 'uuid',
              uuid: uuid
            };
          });
          this.load(res, progressCallback, function (errors, items) {
            if (completeCallback) {
              var assetRes = [];
              var urlRes = urls && [];

              for (var i = 0; i < res.length; ++i) {
                var uuid = res[i].uuid;

                var id = self._getReferenceKey(uuid);

                var item = items.getContent(id);

                if (item) {
                  // should not release these assets, even if they are static referenced in the scene.
                  self.setAutoReleaseRecursively(uuid, false);
                  assetRes.push(item);

                  if (urlRes) {
                    urlRes.push(urls[i]);
                  }
                }
              }

              if (urls) {
                completeCallback(errors, assetRes, urlRes);
              } else {
                completeCallback(errors, assetRes);
              }
            }
          });
        } else {
          if (completeCallback) {
            (0, _misc.callInNextTick)(function () {
              if (urls) {
                completeCallback(null, [], []);
              } else {
                completeCallback(null, []);
              }
            });
          }
        }
      }
    }]);

    return CCLoader;
  }(_pipeline.Pipeline);
  /**
   * Singleton object of CCLoader
   */


  _exports.CCLoader = CCLoader;
  var loader = cc.loader = new CCLoader();
  _exports.loader = loader;

  if (_defaultConstants.EDITOR) {
    cc.loader.refreshUrl = function (uuid, oldUrl, newUrl) {
      var item = this._cache[uuid];

      if (item) {
        item.url = newUrl;
      }

      item = this._cache[oldUrl];

      if (item) {
        item.id = newUrl;
        item.url = newUrl;
        this._cache[newUrl] = item;
        delete this._cache[oldUrl];
      }
    };
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,