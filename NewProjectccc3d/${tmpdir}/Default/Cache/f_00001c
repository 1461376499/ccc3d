(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../define.js", "../sampler.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../define.js"), require("../sampler.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.define, global.sampler);
    global.webglSampler = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _define, _sampler) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.WebGLGFXSampler = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  var WebGLWraps = [0x2901, // WebGLRenderingContext.REPEAT,
  0x8370, // WebGLRenderingContext.MIRRORED_REPEAT,
  0x812F, // WebGLRenderingContext.CLAMP_TO_EDGE,
  0x812F // WebGLRenderingContext.CLAMP_TO_EDGE,
  ];

  var WebGLGFXSampler = /*#__PURE__*/function (_GFXSampler) {
    _inherits(WebGLGFXSampler, _GFXSampler);

    function WebGLGFXSampler() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, WebGLGFXSampler);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(WebGLGFXSampler)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this._gpuSampler = null;
      return _this;
    }

    _createClass(WebGLGFXSampler, [{
      key: "initialize",
      value: function initialize(info) {
        if (info.name !== undefined) {
          this._state.name = info.name;
        }

        if (info.minFilter !== undefined) {
          this._state.minFilter = info.minFilter;
        }

        if (info.magFilter !== undefined) {
          this._state.magFilter = info.magFilter;
        }

        if (info.mipFilter !== undefined) {
          this._state.mipFilter = info.mipFilter;
        }

        if (info.addressU !== undefined) {
          this._state.addressU = info.addressU;
        }

        if (info.addressV !== undefined) {
          this._state.addressV = info.addressV;
        }

        if (info.addressW !== undefined) {
          this._state.addressW = info.addressW;
        }

        if (info.maxAnisotropy !== undefined) {
          this._state.maxAnisotropy = info.maxAnisotropy;
        }

        if (info.cmpFunc !== undefined) {
          this._state.cmpFunc = info.cmpFunc;
        }

        if (info.borderColor !== undefined) {
          this._state.borderColor = info.borderColor;
        }

        if (info.minLOD !== undefined) {
          this._state.minLOD = info.minLOD;
        }

        if (info.maxLOD !== undefined) {
          this._state.maxLOD = info.maxLOD;
        }

        if (info.mipLODBias !== undefined) {
          this._state.mipLODBias = info.mipLODBias;
        }

        var glMinFilter = 0;
        var glMagFilter = 0;
        var minFilter = this._state.minFilter;
        var magFilter = this._state.magFilter;
        var mipFilter = this._state.mipFilter;

        if (minFilter === _define.GFXFilter.LINEAR || minFilter === _define.GFXFilter.ANISOTROPIC) {
          if (mipFilter === _define.GFXFilter.LINEAR || mipFilter === _define.GFXFilter.ANISOTROPIC) {
            glMinFilter = 0x2703; // WebGLRenderingContext.LINEAR_MIPMAP_LINEAR;
          } else if (mipFilter === _define.GFXFilter.POINT) {
            glMinFilter = 0x2701; // WebGLRenderingContext.LINEAR_MIPMAP_NEAREST;
          } else {
            glMinFilter = 0x2601; // WebGLRenderingContext.LINEAR;
          }
        } else {
          if (mipFilter === _define.GFXFilter.LINEAR || mipFilter === _define.GFXFilter.ANISOTROPIC) {
            glMinFilter = 0x2702; // WebGLRenderingContext.NEAREST_MIPMAP_LINEAR;
          } else if (mipFilter === _define.GFXFilter.POINT) {
            glMinFilter = 0x2700; // WebGLRenderingContext.NEAREST_MIPMAP_NEAREST;
          } else {
            glMinFilter = 0x2600; // WebGLRenderingContext.NEAREST;
          }
        }

        if (magFilter === _define.GFXFilter.LINEAR || magFilter === _define.GFXFilter.ANISOTROPIC) {
          glMagFilter = 0x2601; // WebGLRenderingContext.LINEAR;
        } else {
          glMagFilter = 0x2600; // WebGLRenderingContext.NEAREST;
        }

        var glWrapS = WebGLWraps[this._state.addressU];
        var glWrapT = WebGLWraps[this._state.addressV];
        var glWrapR = WebGLWraps[this._state.addressW];
        this._gpuSampler = {
          glMinFilter: glMinFilter,
          glMagFilter: glMagFilter,
          glWrapS: glWrapS,
          glWrapT: glWrapT,
          glWrapR: glWrapR
        };
        this._status = _define.GFXStatus.SUCCESS;
        return true;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this._gpuSampler = null;
        this._status = _define.GFXStatus.UNREADY;
      }
    }, {
      key: "gpuSampler",
      get: function get() {
        return this._gpuSampler;
      }
    }]);

    return WebGLGFXSampler;
  }(_sampler.GFXSampler);

  _exports.WebGLGFXSampler = WebGLGFXSampler;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,