(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../math/index.js", "./enums.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../math/index.js"), require("./enums.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.enums);
    global.triangle = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _enums) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _enums = _interopRequireDefault(_enums);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  /**
   * @en
   * Basic Geometry: triangle.
   * @zh
   * 基础几何 三角形。
   */
  // tslint:disable-next-line:class-name
  var triangle = /*#__PURE__*/function () {
    _createClass(triangle, [{
      key: "type",

      /**
       * @en
       * Gets the type of the shape.
       * @zh
       * 获取形状的类型。
       */
      get: function get() {
        return this._type;
      }
    }], [{
      key: "create",

      /**
       * @en
       * create a new triangle
       * @zh
       * 创建一个新的 triangle。
       * @param {number} ax a 点的 x 部分。
       * @param {number} ay a 点的 y 部分。
       * @param {number} az a 点的 z 部分。
       * @param {number} bx b 点的 x 部分。
       * @param {number} by b 点的 y 部分。
       * @param {number} bz b 点的 z 部分。
       * @param {number} cx c 点的 x 部分。
       * @param {number} cy c 点的 y 部分。
       * @param {number} cz c 点的 z 部分。
       * @return {triangle} 一个新的 triangle。
       */
      value: function create() {
        var ax = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var ay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var az = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var bx = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
        var by = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
        var bz = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
        var cx = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
        var cy = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
        var cz = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1;
        return new triangle(ax, ay, az, bx, by, bz, cx, cy, cz);
      }
      /**
       * @en
       * clone a new triangle
       * @zh
       * 克隆一个新的 triangle。
       * @param {triangle} t 克隆的目标。
       * @return {triangle} 克隆出的新对象。
       */

    }, {
      key: "clone",
      value: function clone(t) {
        return new triangle(t.a.x, t.a.y, t.a.z, t.b.x, t.b.y, t.b.z, t.c.x, t.c.y, t.c.z);
      }
      /**
       * @en
       * copy the values from one triangle to another
       * @zh
       * 将一个 triangle 的值复制到另一个 triangle。
       * @param {triangle} out 接受操作的 triangle。
       * @param {triangle} t 被复制的 triangle。
       * @return {triangle} out 接受操作的 triangle。
       */

    }, {
      key: "copy",
      value: function copy(out, t) {
        _index.Vec3.copy(out.a, t.a);

        _index.Vec3.copy(out.b, t.b);

        _index.Vec3.copy(out.c, t.c);

        return out;
      }
      /**
       * @en
       * Create a triangle from three points
       * @zh
       * 用三个点创建一个 triangle。
       * @param {triangle} out 接受操作的 triangle。
       * @param {Vec3} a a 点。
       * @param {Vec3} b b 点。
       * @param {Vec3} c c 点。
       * @return {triangle} out 接受操作的 triangle。
       */

    }, {
      key: "fromPoints",
      value: function fromPoints(out, a, b, c) {
        _index.Vec3.copy(out.a, a);

        _index.Vec3.copy(out.b, b);

        _index.Vec3.copy(out.c, c);

        return out;
      }
      /**
       * @en
       * Set the components of a triangle to the given values
       * @zh
       * 将给定三角形的属性设置为给定值。
       * @param {triangle} out 给定的三角形。
       * @param {number} ax a 点的 x 部分。
       * @param {number} ay a 点的 y 部分。
       * @param {number} az a 点的 z 部分。
       * @param {number} bx b 点的 x 部分。
       * @param {number} by b 点的 y 部分。
       * @param {number} bz b 点的 z 部分。
       * @param {number} cx c 点的 x 部分。
       * @param {number} cy c 点的 y 部分。
       * @param {number} cz c 点的 z 部分。
       * @return {triangle}
       * @function
       */

    }, {
      key: "set",
      value: function set(out, ax, ay, az, bx, by, bz, cx, cy, cz) {
        out.a.x = ax;
        out.a.y = ay;
        out.a.z = az;
        out.b.x = bx;
        out.b.y = by;
        out.b.z = bz;
        out.c.x = cx;
        out.c.y = cy;
        out.c.z = cz;
        return out;
      }
      /**
       * @en
       * Point a.
       * @zh
       * 点 a。
       */

    }]);

    /**
     * @en
     * Construct a triangle.
     * @zh
     * 构造一个三角形。
     * @param {number} ax a 点的 x 部分。
     * @param {number} ay a 点的 y 部分。
     * @param {number} az a 点的 z 部分。
     * @param {number} bx b 点的 x 部分。
     * @param {number} by b 点的 y 部分。
     * @param {number} bz b 点的 z 部分。
     * @param {number} cx c 点的 x 部分。
     * @param {number} cy c 点的 y 部分。
     * @param {number} cz c 点的 z 部分。
     */
    function triangle() {
      var ax = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var ay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var az = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var bx = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
      var by = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
      var bz = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
      var cx = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
      var cy = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;
      var cz = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;

      _classCallCheck(this, triangle);

      this.a = void 0;
      this.b = void 0;
      this.c = void 0;
      this._type = void 0;
      this._type = _enums.default.SHAPE_TRIANGLE;
      this.a = new _index.Vec3(ax, ay, az);
      this.b = new _index.Vec3(bx, by, bz);
      this.c = new _index.Vec3(cx, cy, cz);
    }

    return triangle;
  }();

  _exports.default = triangle;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,