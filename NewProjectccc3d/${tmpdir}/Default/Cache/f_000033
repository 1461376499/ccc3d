(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../gfx/define.js", "../../gfx/device.js", "../../gfx/pipeline-state.js", "../../pipeline/define.js", "./pass-utils.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../gfx/define.js"), require("../../gfx/device.js"), require("../../gfx/pipeline-state.js"), require("../../pipeline/define.js"), require("./pass-utils.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.define, global.device, global.pipelineState, global.define, global.passUtils);
    global.programLib = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _define, _device, _pipelineState, _define2, _passUtils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.programLib = void 0;

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function getBitCount(cnt) {
    return Math.ceil(Math.log2(Math.max(cnt, 2)));
  }

  function mapDefine(info, def) {
    switch (info.type) {
      case 'boolean':
        return (typeof def === 'number' ? def : def ? 1 : 0) + '';

      case 'string':
        return def !== undefined ? def : info.options[0];

      case 'number':
        return (def !== undefined ? def : info.range[0]) + '';
    }

    console.warn("unknown define type '".concat(info.type, "'"));
    return '-1'; // should neven happen
  }

  function prepareDefines(defs, tDefs) {
    var macros = [];

    var _iterator = _createForOfIteratorHelper(tDefs),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var tmpl = _step.value;
        var name = tmpl.name;
        var v = defs[name];

        var _value = mapDefine(tmpl, v);

        var isDefault = !v || v === '0';
        macros.push({
          name: name,
          value: _value,
          isDefault: isDefault
        });
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return macros;
  }

  function getShaderInstanceName(name, macros) {
    return name + macros.reduce(function (acc, cur) {
      return cur.isDefault ? acc : "".concat(acc, "|").concat(cur.name).concat(cur.value);
    }, '');
  }

  function insertBuiltinBindings(tmpl, source, type) {
    var target = tmpl.builtins[type];
    var blocks = tmpl.blocks;

    var _iterator2 = _createForOfIteratorHelper(target.blocks),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var b = _step2.value;
        var info = source.get(b.name);

        if (!info || info.type !== _define.GFXBindingType.UNIFORM_BUFFER) {
          console.warn("builtin UBO '".concat(b.name, "' not available!"));
          continue;
        }

        var builtin = Object.assign({
          defines: b.defines,
          size: getSize(info.blockInfo),
          bindingType: _define.GFXBindingType.UNIFORM_BUFFER,
          defaultValue: info.defaultValue
        }, info.blockInfo);
        blocks.push(builtin);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    var samplers = tmpl.samplers;

    var _iterator3 = _createForOfIteratorHelper(target.samplers),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var s = _step3.value;

        var _info = source.get(s.name);

        if (!_info || _info.type !== _define.GFXBindingType.SAMPLER) {
          console.warn("builtin sampler '".concat(s.name, "' not available!"));
          continue;
        }

        var _builtin = Object.assign({
          defines: s.defines,
          bindingType: _define.GFXBindingType.SAMPLER,
          defaultValue: _info.defaultValue
        }, _info.samplerInfo);

        samplers.push(_builtin);
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  }

  function getSize(block) {
    return block.members.reduce(function (s, m) {
      return s + (0, _define.GFXGetTypeSize)(m.type) * m.count;
    }, 0);
  }

  function genHandles(tmpl) {
    var handleMap = {}; // block member handles

    for (var i = 0; i < tmpl.blocks.length; i++) {
      var block = tmpl.blocks[i];
      var members = block.members;
      var offset = 0;

      for (var j = 0; j < members.length; j++) {
        var uniform = members[j];
        handleMap[uniform.name] = (0, _passUtils.genHandle)(_define.GFXBindingType.UNIFORM_BUFFER, block.binding, uniform.type, offset);
        offset += ((0, _define.GFXGetTypeSize)(uniform.type) >> 2) * uniform.count;
      }
    } // sampler handles


    for (var _i = 0; _i < tmpl.samplers.length; _i++) {
      var sampler = tmpl.samplers[_i];
      handleMap[sampler.name] = (0, _passUtils.genHandle)(_define.GFXBindingType.SAMPLER, sampler.binding, sampler.type);
    }

    return handleMap;
  }

  function dependencyCheck(dependencies, defines) {
    for (var i = 0; i < dependencies.length; i++) {
      var d = dependencies[i];

      if (d[0] === '!') {
        if (defines[d.slice(1)]) {
          return false;
        }
      } // negative dependency
      else if (!defines[d]) {
          return false;
        }
    }

    return true;
  }

  function getShaderBindings(tmpl, defines, outBlocks, outSamplers, bindings, outAttributes) {
    var blocks = tmpl.blocks,
        samplers = tmpl.samplers,
        attributes = tmpl.attributes;

    for (var i = 0; i < blocks.length; i++) {
      var block = blocks[i];

      if (!dependencyCheck(block.defines, defines)) {
        continue;
      }

      outBlocks.push(block);
      bindings.push(block);
    }

    for (var _i2 = 0; _i2 < samplers.length; _i2++) {
      var sampler = samplers[_i2];

      if (!dependencyCheck(sampler.defines, defines)) {
        continue;
      }

      outSamplers.push(sampler);
      bindings.push(sampler);
    }

    for (var _i3 = 0; _i3 < attributes.length; _i3++) {
      var attribute = attributes[_i3];

      if (!dependencyCheck(attribute.defines, defines)) {
        continue;
      }

      outAttributes.push(attribute);
    }
  }

  /**
   * @zh
   * 维护 shader 资源实例的全局管理器。
   */
  var ProgramLib = /*#__PURE__*/function () {
    function ProgramLib() {
      _classCallCheck(this, ProgramLib);

      this._templates = void 0;
      this._cache = void 0;
      this._templates = {};
      this._cache = {};
    }
    /**
     * @zh
     * 根据 effect 信息注册 shader 模板。
     */


    _createClass(ProgramLib, [{
      key: "define",
      value: function define(prog) {
        var curTmpl = this._templates[prog.name];

        if (curTmpl && curTmpl.hash === prog.hash) {
          return;
        }

        var tmpl = prog; // calculate option mask offset

        var offset = 0;

        var _iterator4 = _createForOfIteratorHelper(tmpl.defines),
            _step4;

        try {
          var _loop = function _loop() {
            var def = _step4.value;
            var cnt = 1;

            if (def.type === 'number') {
              var range = def.range;
              cnt = getBitCount(range[1] - range[0] + 1); // inclusive on both ends

              def._map = function (value) {
                return value - range[0];
              };
            } else if (def.type === 'string') {
              cnt = getBitCount(def.options.length);

              def._map = function (value) {
                return Math.max(0, def.options.findIndex(function (s) {
                  return s === value;
                }));
              };
            } else if (def.type === 'boolean') {
              def._map = function (value) {
                return value ? 1 : 0;
              };
            }

            def._offset = offset;
            offset += cnt;
          };

          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }

        if (offset > 31) {
          tmpl.uber = true;
        }

        tmpl.blocks.forEach(function (b) {
          b.bindingType = _define.GFXBindingType.UNIFORM_BUFFER;
          b.size = getSize(b);
        });
        tmpl.samplers.forEach(function (s) {
          return s.bindingType = _define.GFXBindingType.SAMPLER;
        });
        tmpl.handleMap = genHandles(tmpl);

        if (!tmpl.localsInited) {
          insertBuiltinBindings(tmpl, _define2.localBindingsDesc, 'locals');
          tmpl.localsInited = true;
        } // store it


        this._templates[prog.name] = tmpl;
      }
    }, {
      key: "getTemplate",
      value: function getTemplate(name) {
        return this._templates[name];
      }
      /**
       * @en
       * Does this library has the specified program?
       * @zh
       * 当前是否有已注册的指定名字的 shader？
       * @param name 目标 shader 名
       */

    }, {
      key: "hasProgram",
      value: function hasProgram(name) {
        return this._templates[name] !== undefined;
      }
      /**
       * @zh
       * 根据 shader 名和预处理宏列表获取 shader key。
       * @param name 目标 shader 名
       * @param defines 目标预处理宏列表
       */

    }, {
      key: "getKey",
      value: function getKey(name, defines) {
        var tmpl = this._templates[name];
        var tmplDefs = tmpl.defines;

        if (tmpl.uber) {
          var key = '';

          for (var i = 0; i < tmplDefs.length; i++) {
            var tmplDef = tmplDefs[i];
            var _value2 = defines[tmplDef.name];

            if (_value2 === undefined || !tmplDef._map) {
              continue;
            }

            var mapped = tmplDef._map(_value2);

            var offset = tmplDef._offset;
            key += offset + (mapped + '|');
          }

          return key + tmpl.hash;
        } else {
          var _key = 0;

          for (var _i4 = 0; _i4 < tmplDefs.length; _i4++) {
            var _tmplDef = tmplDefs[_i4];
            var _value3 = defines[_tmplDef.name];

            if (_value3 === undefined || !_tmplDef._map) {
              continue;
            }

            var _mapped = _tmplDef._map(_value3);

            var _offset = _tmplDef._offset;
            _key |= _mapped << _offset;
          }

          return "".concat(_key.toString(16), "|").concat(tmpl.hash);
        }
      }
      /**
       * @zh
       * 销毁所有完全满足指定预处理宏特征的 shader 实例。
       * @param defines 用于筛选的预处理宏列表
       */

    }, {
      key: "destroyShaderByDefines",
      value: function destroyShaderByDefines(defines) {
        var _this = this;

        var names = Object.keys(defines);

        if (!names.length) {
          return;
        }

        var regexes = names.map(function (cur) {
          var val = defines[cur];

          if (typeof val === 'boolean') {
            val = val ? '1' : '0';
          }

          return new RegExp(cur + val);
        });
        var keys = Object.keys(this._cache).filter(function (k) {
          return regexes.every(function (re) {
            return re.test(_this._cache[k].shader.name);
          });
        });

        var _iterator5 = _createForOfIteratorHelper(keys),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var k = _step5.value;
            var prog = this._cache[k].shader;
            console.log("destroyed shader ".concat(prog.name));
            prog.destroy();
            delete this._cache[k];
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      }
      /**
       * @zh
       * 获取指定 shader 的渲染资源实例
       * @param device 渲染设备 [[GFXDevice]]
       * @param name shader 名字
       * @param defines 预处理宏列表
       * @param pipeline 实际渲染命令执行时所属的 [[RenderPipeline]]
       */

    }, {
      key: "getGFXShader",
      value: function getGFXShader(device, name, defines, pipeline) {
        Object.assign(defines, pipeline.macros);
        var key = this.getKey(name, defines);
        var res = this._cache[key];

        if (res) {
          return res;
        } // get template


        var tmpl = this._templates[name];

        if (!tmpl.globalsInited) {
          insertBuiltinBindings(tmpl, pipeline.globalBindings, 'globals');
          tmpl.globalsInited = true;
        }

        var macroArray = prepareDefines(defines, tmpl.defines);
        var prefix = macroArray.reduce(function (acc, cur) {
          return "".concat(acc, "#define ").concat(cur.name, " ").concat(cur.value, "\n");
        }, '') + '\n';
        var src = tmpl.glsl3;

        switch (device.gfxAPI) {
          case _device.GFXAPI.WEBGL2:
            src = tmpl.glsl3;
            break;

          default:
            src = tmpl.glsl1;
            break;
        }

        var blocks = [];
        var samplers = [];
        var bindings = [];
        var inputState = new _pipelineState.GFXInputState();
        getShaderBindings(tmpl, defines, blocks, samplers, bindings, inputState.attributes);
        var shader = device.createShader({
          name: getShaderInstanceName(name, macroArray),
          blocks: blocks,
          samplers: samplers,
          stages: [{
            type: _define.GFXShaderType.VERTEX,
            source: prefix + src.vert
          }, {
            type: _define.GFXShaderType.FRAGMENT,
            source: prefix + src.frag
          }]
        });
        return this._cache[key] = {
          shader: shader,
          bindings: bindings,
          inputState: inputState
        };
      }
    }]);

    return ProgramLib;
  }();

  var programLib = new ProgramLib();
  _exports.programLib = programLib;
  cc.programLib = programLib;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,