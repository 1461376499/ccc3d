(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../gfx/define.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../gfx/define.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.define);
    global.stencilManager = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _define) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.StencilManager = _exports.Stage = void 0;

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  // import { GFXStencilOp } from '../../gfx/define';
  // Stage types
  var Stage;
  _exports.Stage = Stage;

  (function (Stage) {
    Stage[Stage["DISABLED"] = 0] = "DISABLED";
    Stage[Stage["CLEAR"] = 1] = "CLEAR";
    Stage[Stage["ENTER_LEVEL"] = 2] = "ENTER_LEVEL";
    Stage[Stage["ENABLED"] = 3] = "ENABLED";
    Stage[Stage["EXIT_LEVEL"] = 4] = "EXIT_LEVEL";
  })(Stage || (_exports.Stage = Stage = {}));

  var StencilManager = /*#__PURE__*/function () {
    function StencilManager() {
      _classCallCheck(this, StencilManager);

      this.stage = Stage.DISABLED;
      this._maskStack = [];
      this._stencilPattern = {
        stencilTest: true,
        func: _define.GFXComparisonFunc.ALWAYS,
        stencilMask: 0xffff,
        writeMask: 0xffff,
        failOp: _define.GFXStencilOp.KEEP,
        zFailOp: _define.GFXStencilOp.KEEP,
        passOp: _define.GFXStencilOp.KEEP,
        ref: 1
      };
      this._defaultPipelineState = {
        depthStencilState: {},
        rasterizerState: {},
        blendState: {}
      };
    }

    _createClass(StencilManager, [{
      key: "pushMask",
      value: function pushMask(mask) {
        this._maskStack.push(mask);
      }
    }, {
      key: "clear",
      value: function clear() {
        this.stage = Stage.CLEAR;
      }
    }, {
      key: "enterLevel",
      value: function enterLevel() {
        this.stage = Stage.ENTER_LEVEL;
      }
    }, {
      key: "enableMask",
      value: function enableMask() {
        this.stage = Stage.ENABLED;
      }
    }, {
      key: "exitMask",
      value: function exitMask() {
        if (this._maskStack.length === 0) {
          // cc.errorID(9001);
          return;
        }

        this._maskStack.pop();

        if (this._maskStack.length === 0) {
          this.stage = Stage.DISABLED;
        } else {
          this.stage = Stage.ENABLED;
        }
      }
    }, {
      key: "handleMaterial",
      value: function handleMaterial(mat) {
        var pattern = this._stencilPattern;

        if (this.stage === Stage.DISABLED) {
          pattern.stencilTest = false;
          pattern.func = _define.GFXComparisonFunc.ALWAYS;
          pattern.failOp = _define.GFXStencilOp.KEEP;
          pattern.stencilMask = pattern.writeMask = 0xffff;
          pattern.ref = 1;
        } else {
          pattern.stencilTest = true;

          if (this.stage === Stage.ENABLED) {
            pattern.func = _define.GFXComparisonFunc.EQUAL;
            pattern.failOp = _define.GFXStencilOp.KEEP;
            pattern.stencilMask = pattern.ref = this.getStencilRef();
            pattern.writeMask = this.getWriteMask();
          } else if (this.stage === Stage.CLEAR) {
            var mask = this._maskStack[this._maskStack.length - 1];
            pattern.func = _define.GFXComparisonFunc.NEVER;
            pattern.failOp = mask.inverted ? _define.GFXStencilOp.REPLACE : _define.GFXStencilOp.ZERO;
            pattern.writeMask = pattern.stencilMask = pattern.ref = this.getWriteMask();
          } else if (this.stage === Stage.ENTER_LEVEL) {
            var _mask = this._maskStack[this._maskStack.length - 1];
            pattern.func = _define.GFXComparisonFunc.NEVER;
            pattern.failOp = _mask.inverted ? _define.GFXStencilOp.ZERO : _define.GFXStencilOp.REPLACE;
            pattern.writeMask = pattern.stencilMask = pattern.ref = this.getWriteMask();
          }
        }

        var pass = mat.passes[0];

        if (this._changed(pass)) {
          var state = this._stencilPattern;
          this._defaultPipelineState.depthStencilState = {
            stencilTestFront: state.stencilTest,
            stencilFuncFront: state.func,
            stencilReadMaskFront: state.stencilMask,
            stencilWriteMaskFront: state.writeMask,
            stencilFailOpFront: state.failOp,
            stencilZFailOpFront: state.zFailOp,
            stencilPassOpFront: state.passOp,
            stencilRefFront: state.ref,
            stencilTestBack: state.stencilTest,
            stencilFuncBack: state.func,
            stencilReadMaskBack: state.stencilMask,
            stencilWriteMaskBack: state.writeMask,
            stencilFailOpBack: state.failOp,
            stencilZFailOpBack: state.zFailOp,
            stencilPassOpBack: state.passOp,
            stencilRefBack: state.ref
          };
          this._defaultPipelineState.blendState = pass.blendState;
          this._defaultPipelineState.rasterizerState = pass.rasterizerState;
          mat.overridePipelineStates(this._defaultPipelineState);
          return true;
        }

        return false;
      }
    }, {
      key: "getWriteMask",
      value: function getWriteMask() {
        return 1 << this._maskStack.length - 1;
      }
    }, {
      key: "getExitWriteMask",
      value: function getExitWriteMask() {
        return 1 << this._maskStack.length;
      }
    }, {
      key: "getStencilRef",
      value: function getStencilRef() {
        var result = 0;

        for (var i = 0; i < this._maskStack.length; ++i) {
          result += 0x00000001 << i;
        }

        return result;
      }
    }, {
      key: "reset",
      value: function reset() {
        // reset stack and stage
        this._maskStack.length = 0;
        this.stage = Stage.DISABLED;
      }
    }, {
      key: "_changed",
      value: function _changed(pass) {
        var stencilState = pass.depthStencilState;
        var pattern = this._stencilPattern;

        if (pattern.stencilTest !== stencilState.stencilTestFront || pattern.func !== stencilState.stencilFuncFront || pattern.failOp !== stencilState.stencilFailOpFront || pattern.zFailOp !== stencilState.stencilZFailOpFront || pattern.passOp !== stencilState.stencilPassOpFront || pattern.stencilMask !== stencilState.stencilReadMaskFront || pattern.writeMask !== stencilState.stencilWriteMaskFront || pattern.ref !== stencilState.stencilRefFront) {
          return true;
        }

        return false;
      }
    }]);

    return StencilManager;
  }();

  _exports.StencilManager = StencilManager;
  StencilManager.sharedManager = null;
  StencilManager.sharedManager = new StencilManager();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,