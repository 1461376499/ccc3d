(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../3d/framework/renderable-component.js", "../../data/class-decorator.js", "../../math/index.js", "../../platform/event-manager/event-enum.js", "../../value-types/enum.js", "../../3d/builtin/init.js", "../../assets/index.js", "../../gfx/define.js", "../../renderer/index.js", "../../renderer/ui/render-data.js", "./ui-component.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../3d/framework/renderable-component.js"), require("../../data/class-decorator.js"), require("../../math/index.js"), require("../../platform/event-manager/event-enum.js"), require("../../value-types/enum.js"), require("../../3d/builtin/init.js"), require("../../assets/index.js"), require("../../gfx/define.js"), require("../../renderer/index.js"), require("../../renderer/ui/render-data.js"), require("./ui-component.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.renderableComponent, global.classDecorator, global.index, global.eventEnum, global._enum, global.init, global.index, global.define, global.index, global.renderData, global.uiComponent);
    global.uiRenderComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _renderableComponent, _classDecorator, _index, _eventEnum, _enum, _init, _index2, _define, _index3, _renderData, _uiComponent) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.UIRenderComponent = _exports.InstanceMaterialType = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class3, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  // hack
  (0, _enum.ccenum)(_define.GFXBlendFactor);
  /**
   * @en
   * The shader property type of the material after instantiation.
   *
   * @zh
   * 实例后的材质的着色器属性类型。
   */

  var InstanceMaterialType;
  _exports.InstanceMaterialType = InstanceMaterialType;

  (function (InstanceMaterialType) {
    InstanceMaterialType[InstanceMaterialType["ADDCOLOR"] = 0] = "ADDCOLOR";
    InstanceMaterialType[InstanceMaterialType["ADDCOLORANDTEXTURE"] = 1] = "ADDCOLORANDTEXTURE";
    InstanceMaterialType[InstanceMaterialType["GRAYSCALE"] = 2] = "GRAYSCALE";
  })(InstanceMaterialType || (_exports.InstanceMaterialType = InstanceMaterialType = {}));

  var _matInsInfo = {
    parent: null,
    owner: null,
    subModelIdx: 0
  };
  /**
   * @en
   * Base class for components which supports rendering features.
   *
   * @zh
   * 所有支持渲染的 UI 组件的基类。
   */

  var UIRenderComponent = (_dec = (0, _classDecorator.ccclass)('cc.UIRenderComponent'), _dec2 = (0, _classDecorator.property)({
    type: _define.GFXBlendFactor,
    displayOrder: 0,
    tooltip: '原图混合模式'
  }), _dec3 = (0, _classDecorator.property)({
    type: _define.GFXBlendFactor,
    displayOrder: 1,
    tooltip: '目标混合模式'
  }), _dec4 = (0, _classDecorator.property)({
    displayOrder: 2,
    tooltip: '渲染颜色'
  }), _dec5 = (0, _classDecorator.property)({
    type: _index2.Material,
    displayOrder: 3,
    tooltip: '源材质',
    visible: false
  }), _dec(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_UIComponent) {
    _inherits(UIRenderComponent, _UIComponent);

    function UIRenderComponent() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, UIRenderComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(UIRenderComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _initializerDefineProperty(_this, "_srcBlendFactor", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_dstBlendFactor", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_color", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_sharedMaterial", _descriptor4, _assertThisInitialized(_this));

      _this._assembler = null;
      _this._postAssembler = null;
      _this._renderData = null;
      _this._renderDataFlag = true;
      _this._renderFlag = true;
      _this._delegateSrc = null;
      _this._material = null;
      _this._instanceMaterialType = InstanceMaterialType.ADDCOLORANDTEXTURE;
      _this._blendTemplate = {
        blendState: {
          targets: [{
            blendSrc: _define.GFXBlendFactor.SRC_ALPHA,
            blendDst: _define.GFXBlendFactor.ONE_MINUS_SRC_ALPHA
          }]
        },
        depthStencilState: {},
        rasterizerState: {}
      };
      return _this;
    }

    _createClass(UIRenderComponent, [{
      key: "__preload",
      value: function __preload() {
        _get(_getPrototypeOf(UIRenderComponent.prototype), "__preload", this).call(this);

        this._instanceMaterial();

        if (this._flushAssembler) {
          this._flushAssembler();
        }
      }
    }, {
      key: "onEnable",
      value: function onEnable() {
        _get(_getPrototypeOf(UIRenderComponent.prototype), "onEnable", this).call(this);

        this.node.on(_eventEnum.SystemEventType.ANCHOR_CHANGED, this._nodeStateChange, this);
        this.node.on(_eventEnum.SystemEventType.SIZE_CHANGED, this._nodeStateChange, this);
        this._renderFlag = this._canRender();
      }
    }, {
      key: "onDisable",
      value: function onDisable() {
        _get(_getPrototypeOf(UIRenderComponent.prototype), "onDisable", this).call(this);

        this.node.off(_eventEnum.SystemEventType.ANCHOR_CHANGED, this._nodeStateChange, this);
        this.node.off(_eventEnum.SystemEventType.SIZE_CHANGED, this._nodeStateChange, this);
        this._renderFlag = false;
      }
    }, {
      key: "onDestroy",
      value: function onDestroy() {
        _get(_getPrototypeOf(UIRenderComponent.prototype), "onDestroy", this).call(this);

        this.destroyRenderData();

        if (this._material) {
          this._material.destroy();
        }

        this._updateMaterial(null);

        this._renderData = null;
      }
      /**
       * @en
       * Marks the render data of the current component as modified so that the render data is recalculated.
       *
       * @zh
       * 标记当前组件的渲染数据为已修改状态，这样渲染数据才会重新计算。
       *
       * @param enable 是否标记为已修改。
       */

    }, {
      key: "markForUpdateRenderData",
      value: function markForUpdateRenderData() {
        var enable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        this._renderFlag = this._canRender();

        if (enable && this._renderFlag) {
          var renderData = this._renderData;

          if (renderData) {
            renderData.vertDirty = true;
          }

          this._renderDataFlag = enable;
        } else if (!enable) {
          this._renderDataFlag = enable;
        }
      }
      /**
       * @en
       * Request a new render data.
       *
       * @zh
       * 请求渲染数据。
       *
       * @return 渲染数据 RenderData。
       */

    }, {
      key: "requestRenderData",
      value: function requestRenderData() {
        var data = _renderData.RenderData.add();

        this._renderData = data;
        return data;
      }
      /**
       * @en
       * Destroy render data.
       *
       * @zh
       * 渲染数据销毁。
       */

    }, {
      key: "destroyRenderData",
      value: function destroyRenderData() {
        if (!this._renderData) {
          return;
        }

        _renderData.RenderData.remove(this._renderData);

        this._renderData = null;
      } // Don't call it unless you know your purpose.

    }, {
      key: "updateAssembler",
      value: function updateAssembler(render) {
        _get(_getPrototypeOf(UIRenderComponent.prototype), "updateAssembler", this).call(this, render);

        if (this._renderFlag) {
          this._checkAndUpdateRenderData();

          this._render(render);
        }
      } // Don't call it unless you know your purpose.

    }, {
      key: "postUpdateAssembler",
      value: function postUpdateAssembler(render) {
        _get(_getPrototypeOf(UIRenderComponent.prototype), "postUpdateAssembler", this).call(this, render);

        if (this._renderFlag) {
          this._postRender(render);
        }
      }
    }, {
      key: "_render",
      value: function _render(render) {}
    }, {
      key: "_postRender",
      value: function _postRender(render) {}
    }, {
      key: "_checkAndUpdateRenderData",
      value: function _checkAndUpdateRenderData() {
        if (this._renderDataFlag) {
          this._assembler.updateRenderData(this);

          this._renderDataFlag = false;
        }
      }
    }, {
      key: "_canRender",
      value: function _canRender() {
        return this.material !== null && this.enabled && (this._delegateSrc ? this._delegateSrc.activeInHierarchy : this.enabledInHierarchy);
      }
    }, {
      key: "_postCanRender",
      value: function _postCanRender() {}
    }, {
      key: "_updateColor",
      value: function _updateColor() {
        if (this._assembler && this._assembler.updateColor) {
          this._assembler.updateColor(this);
        }
      }
    }, {
      key: "_updateMaterial",
      value: function _updateMaterial(material) {
        this._material = material;

        this._updateBlendFunc();
      }
    }, {
      key: "_updateBlendFunc",
      value: function _updateBlendFunc() {
        if (!this._material) {
          return;
        }

        var target = this._blendTemplate.blendState.targets[0];

        if (target.blendDst !== this._dstBlendFactor || target.blendSrc !== this._srcBlendFactor) {
          target.blendDst = this._dstBlendFactor;
          target.blendSrc = this._srcBlendFactor;
          this._blendTemplate.depthStencilState = this._material.passes[0].depthStencilState;
          this._blendTemplate.rasterizerState = this._material.passes[0].rasterizerState;

          this._material.overridePipelineStates(this._blendTemplate, 0);
        }
      } // pos, rot, scale changed

    }, {
      key: "_nodeStateChange",
      value: function _nodeStateChange(type) {
        if (this._renderData) {
          this.markForUpdateRenderData();
        }

        var _iterator = _createForOfIteratorHelper(this.node.children),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var child = _step.value;
            var renderComp = child.getComponent(UIRenderComponent);

            if (renderComp) {
              renderComp.markForUpdateRenderData();
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }, {
      key: "_instanceMaterial",
      value: function _instanceMaterial() {
        var mat = null;
        _matInsInfo.owner = new _renderableComponent.RenderableComponent();

        if (this._sharedMaterial) {
          _matInsInfo.parent = this._sharedMaterial;
          mat = new _index3.MaterialInstance(_matInsInfo);
        } else {
          switch (this._instanceMaterialType) {
            case InstanceMaterialType.ADDCOLOR:
              _matInsInfo.parent = _init.builtinResMgr.get('ui-base-material');
              mat = new _index3.MaterialInstance(_matInsInfo);
              break;

            case InstanceMaterialType.ADDCOLORANDTEXTURE:
              _matInsInfo.parent = _init.builtinResMgr.get('ui-sprite-material');
              mat = new _index3.MaterialInstance(_matInsInfo);
              break;

            case InstanceMaterialType.GRAYSCALE:
              _matInsInfo.parent = _init.builtinResMgr.get('ui-sprite-gray-material');
              mat = new _index3.MaterialInstance(_matInsInfo);
              break;
          }
        }

        this._updateMaterial(mat);
      }
    }, {
      key: "srcBlendFactor",

      /**
       * @en
       * Specifies the blend mode for the original image, it will clone a new material object.
       *
       * @zh
       * 指定原图的混合模式，这会克隆一个新的材质对象，注意这带来的。
       *
       * @param value 原图混合模式。
       * @example
       * ```typescript
       * sprite.srcBlendFactor = GFXBlendFactor.ONE;
       * ```
       */
      get: function get() {
        return this._srcBlendFactor;
      },
      set: function set(value) {
        if (this._srcBlendFactor === value) {
          return;
        }

        this._srcBlendFactor = value;

        this._updateBlendFunc();
      }
      /**
       * @en
       * Specifies the blend mode for the target image.
       *
       * @zh
       * 指定目标的混合模式。
       *
       * @param value 目标混合模式。
       * @example
       * ```typescript
       * sprite.dstBlendFactor = GFXBlendFactor.ONE;
       * ```
       */

    }, {
      key: "dstBlendFactor",
      get: function get() {
        return this._dstBlendFactor;
      },
      set: function set(value) {
        if (this._dstBlendFactor === value) {
          return;
        }

        this._dstBlendFactor = value;

        this._updateBlendFunc();
      }
      /**
       * @en
       * Render color.
       *
       * @zh
       * 渲染颜色。
       *
       * @param value 渲染颜色。
       */

    }, {
      key: "color",
      get: function get() {
        return this._color;
      },
      set: function set(value) {
        if (this._color === value) {
          return;
        }

        this._color.set(value);

        this._updateColor();

        this.markForUpdateRenderData();
      }
      /**
       * @zh
       * 渲染使用材质，实际使用材质是实例后材质。
       *
       * @param value 源材质。
       */

    }, {
      key: "sharedMaterial",
      get: function get() {
        return this._sharedMaterial;
      },
      set: function set(value) {
        if (this._sharedMaterial === value) {
          return;
        }

        this._sharedMaterial = value;

        if (this._instanceMaterial) {
          this._instanceMaterial();
        }
      }
    }, {
      key: "material",
      get: function get() {
        if (!this._material) {
          if (this._instanceMaterial) {
            this._instanceMaterial();
          }
        }

        return this._material;
      }
    }, {
      key: "renderData",
      get: function get() {
        return this._renderData;
      } // Render data can be submitted even if it is not on the node tree

    }, {
      key: "delegateSrc",
      set: function set(value) {
        this._delegateSrc = value;
      }
    }]);

    return UIRenderComponent;
  }(_uiComponent.UIComponent), _class3.BlendState = _define.GFXBlendFactor, _class3.Assembler = null, _class3.PostAssembler = null, _temp), (_applyDecoratedDescriptor(_class2.prototype, "srcBlendFactor", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "srcBlendFactor"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "dstBlendFactor", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "dstBlendFactor"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "color", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "color"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "sharedMaterial", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "sharedMaterial"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_srcBlendFactor", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _define.GFXBlendFactor.SRC_ALPHA;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_dstBlendFactor", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _define.GFXBlendFactor.ONE_MINUS_SRC_ALPHA;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_color", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _index.Color.WHITE.clone();
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_sharedMaterial", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  })), _class2)) || _class);
  _exports.UIRenderComponent = UIRenderComponent;
  cc.UIRenderComponent = UIRenderComponent;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,