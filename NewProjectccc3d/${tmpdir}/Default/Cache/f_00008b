(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../gfx/define.js", "../scene-graph/layers.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../gfx/define.js"), require("../scene-graph/layers.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.define, global.layers);
    global.define = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _define, _layers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MODEL_ALWAYS_MASK = _exports.CAMERA_EDITOR_MASK = _exports.CAMERA_DEFAULT_MASK = _exports.UniformTangentMorphTexture = _exports.UniformLightingMapSampler = _exports.UniformNormalMorphTexture = _exports.UniformPositionMorphTexture = _exports.UBOMorph = _exports.UniformJointTexture = _exports.UBOSkinning = _exports.INST_JOINT_ANIM_INFO = _exports.UBOSkinningAnimation = _exports.UBOSkinningTexture = _exports.JOINT_UNIFORM_CAPACITY = _exports.UBOForwardLight = _exports.UBOLocalBatched = _exports.INST_MAT_WORLD = _exports.UBOLocal = _exports.localBindingsDesc = _exports.UNIFORM_ENVIRONMENT = _exports.UBOShadow = _exports.UBOGlobal = _exports.isBuiltinBinding = _exports.UniformBinding = _exports.RenderPriority = _exports.RenderPassStage = _exports.PIPELINE_FLOW_TONEMAP = _exports.PIPELINE_FLOW_SMAA = _exports.PIPELINE_FLOW_FORWARD = void 0;

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var PIPELINE_FLOW_FORWARD = 'ForwardFlow';
  _exports.PIPELINE_FLOW_FORWARD = PIPELINE_FLOW_FORWARD;
  var PIPELINE_FLOW_SMAA = 'SMAAFlow';
  _exports.PIPELINE_FLOW_SMAA = PIPELINE_FLOW_SMAA;
  var PIPELINE_FLOW_TONEMAP = 'ToneMapFlow';
  /**
   * @en The predefined render pass stage ids
   * @zh 预设的渲染阶段。
   */

  _exports.PIPELINE_FLOW_TONEMAP = PIPELINE_FLOW_TONEMAP;
  var RenderPassStage;
  _exports.RenderPassStage = RenderPassStage;

  (function (RenderPassStage) {
    RenderPassStage[RenderPassStage["DEFAULT"] = 100] = "DEFAULT";
  })(RenderPassStage || (_exports.RenderPassStage = RenderPassStage = {}));

  cc.RenderPassStage = RenderPassStage;
  /**
   * @en The predefined render priorities
   * @zh 预设的渲染优先级。
   */

  var RenderPriority;
  /**
   * @en Render object interface
   * @zh 渲染对象接口。
   */

  _exports.RenderPriority = RenderPriority;

  (function (RenderPriority) {
    RenderPriority[RenderPriority["MIN"] = 0] = "MIN";
    RenderPriority[RenderPriority["MAX"] = 255] = "MAX";
    RenderPriority[RenderPriority["DEFAULT"] = 128] = "DEFAULT";
  })(RenderPriority || (_exports.RenderPriority = RenderPriority = {}));

  var MAX_BINDING_SUPPORTED = 24; // from WebGL 2 spec

  /**
   * @en The uniform bindings
   * @zh Uniform 参数绑定。
   */

  var UniformBinding;
  /**
   * @en Check whether the given uniform binding is a builtin binding
   * @zh 检查指定的 UniformBinding 是否是引擎内置的
   * @param binding 
   */

  _exports.UniformBinding = UniformBinding;

  (function (UniformBinding) {
    UniformBinding[UniformBinding["UBO_GLOBAL"] = MAX_BINDING_SUPPORTED - 1] = "UBO_GLOBAL";
    UniformBinding[UniformBinding["UBO_SHADOW"] = MAX_BINDING_SUPPORTED - 2] = "UBO_SHADOW";
    UniformBinding[UniformBinding["UBO_LOCAL"] = MAX_BINDING_SUPPORTED - 3] = "UBO_LOCAL";
    UniformBinding[UniformBinding["UBO_FORWARD_LIGHTS"] = MAX_BINDING_SUPPORTED - 4] = "UBO_FORWARD_LIGHTS";
    UniformBinding[UniformBinding["UBO_SKINNING_ANIMATION"] = MAX_BINDING_SUPPORTED - 5] = "UBO_SKINNING_ANIMATION";
    UniformBinding[UniformBinding["UBO_SKINNING_TEXTURE"] = MAX_BINDING_SUPPORTED - 6] = "UBO_SKINNING_TEXTURE";
    UniformBinding[UniformBinding["UBO_UI"] = MAX_BINDING_SUPPORTED - 7] = "UBO_UI";
    UniformBinding[UniformBinding["UBO_MORPH"] = MAX_BINDING_SUPPORTED - 8] = "UBO_MORPH";
    UniformBinding[UniformBinding["UBO_BUILTIN_BINDING_END"] = MAX_BINDING_SUPPORTED - 9] = "UBO_BUILTIN_BINDING_END";
    UniformBinding[UniformBinding["SAMPLER_JOINTS"] = MAX_BINDING_SUPPORTED + 1] = "SAMPLER_JOINTS";
    UniformBinding[UniformBinding["SAMPLER_ENVIRONMENT"] = MAX_BINDING_SUPPORTED + 2] = "SAMPLER_ENVIRONMENT";
    UniformBinding[UniformBinding["SAMPLER_MORPH_POSITION"] = MAX_BINDING_SUPPORTED + 3] = "SAMPLER_MORPH_POSITION";
    UniformBinding[UniformBinding["SAMPLER_MORPH_NORMAL"] = MAX_BINDING_SUPPORTED + 4] = "SAMPLER_MORPH_NORMAL";
    UniformBinding[UniformBinding["SAMPLER_MORPH_TANGENT"] = MAX_BINDING_SUPPORTED + 5] = "SAMPLER_MORPH_TANGENT";
    UniformBinding[UniformBinding["SAMPLER_LIGHTING_MAP"] = MAX_BINDING_SUPPORTED + 6] = "SAMPLER_LIGHTING_MAP";
    UniformBinding[UniformBinding["CUSTUM_UBO_BINDING_END_POINT"] = UniformBinding.UBO_BUILTIN_BINDING_END] = "CUSTUM_UBO_BINDING_END_POINT";
    UniformBinding[UniformBinding["CUSTOM_SAMPLER_BINDING_START_POINT"] = MAX_BINDING_SUPPORTED + 7] = "CUSTOM_SAMPLER_BINDING_START_POINT";
  })(UniformBinding || (_exports.UniformBinding = UniformBinding = {}));

  var isBuiltinBinding = function isBuiltinBinding(binding) {
    return binding >= UniformBinding.CUSTUM_UBO_BINDING_END_POINT && binding < UniformBinding.CUSTOM_SAMPLER_BINDING_START_POINT;
  };
  /**
   * @en The global uniform buffer object
   * @zh 全局 UBO。
   */


  _exports.isBuiltinBinding = isBuiltinBinding;

  var UBOGlobal = function UBOGlobal() {
    _classCallCheck(this, UBOGlobal);

    this.view = new Float32Array(UBOGlobal.COUNT);
  };
  /**
   * @en The uniform buffer object for shadow
   * @zh 阴影 UBO。
   */


  _exports.UBOGlobal = UBOGlobal;
  UBOGlobal.TIME_OFFSET = 0;
  UBOGlobal.SCREEN_SIZE_OFFSET = UBOGlobal.TIME_OFFSET + 4;
  UBOGlobal.SCREEN_SCALE_OFFSET = UBOGlobal.SCREEN_SIZE_OFFSET + 4;
  UBOGlobal.NATIVE_SIZE_OFFSET = UBOGlobal.SCREEN_SCALE_OFFSET + 4;
  UBOGlobal.MAT_VIEW_OFFSET = UBOGlobal.NATIVE_SIZE_OFFSET + 4;
  UBOGlobal.MAT_VIEW_INV_OFFSET = UBOGlobal.MAT_VIEW_OFFSET + 16;
  UBOGlobal.MAT_PROJ_OFFSET = UBOGlobal.MAT_VIEW_INV_OFFSET + 16;
  UBOGlobal.MAT_PROJ_INV_OFFSET = UBOGlobal.MAT_PROJ_OFFSET + 16;
  UBOGlobal.MAT_VIEW_PROJ_OFFSET = UBOGlobal.MAT_PROJ_INV_OFFSET + 16;
  UBOGlobal.MAT_VIEW_PROJ_INV_OFFSET = UBOGlobal.MAT_VIEW_PROJ_OFFSET + 16;
  UBOGlobal.CAMERA_POS_OFFSET = UBOGlobal.MAT_VIEW_PROJ_INV_OFFSET + 16;
  UBOGlobal.EXPOSURE_OFFSET = UBOGlobal.CAMERA_POS_OFFSET + 4;
  UBOGlobal.MAIN_LIT_DIR_OFFSET = UBOGlobal.EXPOSURE_OFFSET + 4;
  UBOGlobal.MAIN_LIT_COLOR_OFFSET = UBOGlobal.MAIN_LIT_DIR_OFFSET + 4;
  UBOGlobal.AMBIENT_SKY_OFFSET = UBOGlobal.MAIN_LIT_COLOR_OFFSET + 4;
  UBOGlobal.AMBIENT_GROUND_OFFSET = UBOGlobal.AMBIENT_SKY_OFFSET + 4;
  UBOGlobal.COUNT = UBOGlobal.AMBIENT_GROUND_OFFSET + 4;
  UBOGlobal.SIZE = UBOGlobal.COUNT * 4;
  UBOGlobal.BLOCK = {
    binding: UniformBinding.UBO_GLOBAL,
    name: 'CCGlobal',
    members: [{
      name: 'cc_time',
      type: _define.GFXType.FLOAT4,
      count: 1
    }, {
      name: 'cc_screenSize',
      type: _define.GFXType.FLOAT4,
      count: 1
    }, {
      name: 'cc_screenScale',
      type: _define.GFXType.FLOAT4,
      count: 1
    }, {
      name: 'cc_nativeSize',
      type: _define.GFXType.FLOAT4,
      count: 1
    }, {
      name: 'cc_matView',
      type: _define.GFXType.MAT4,
      count: 1
    }, {
      name: 'cc_matViewInv',
      type: _define.GFXType.MAT4,
      count: 1
    }, {
      name: 'cc_matProj',
      type: _define.GFXType.MAT4,
      count: 1
    }, {
      name: 'cc_matProjInv',
      type: _define.GFXType.MAT4,
      count: 1
    }, {
      name: 'cc_matViewProj',
      type: _define.GFXType.MAT4,
      count: 1
    }, {
      name: 'cc_matViewProjInv',
      type: _define.GFXType.MAT4,
      count: 1
    }, {
      name: 'cc_cameraPos',
      type: _define.GFXType.FLOAT4,
      count: 1
    }, {
      name: 'cc_exposure',
      type: _define.GFXType.FLOAT4,
      count: 1
    }, {
      name: 'cc_mainLitDir',
      type: _define.GFXType.FLOAT4,
      count: 1
    }, {
      name: 'cc_mainLitColor',
      type: _define.GFXType.FLOAT4,
      count: 1
    }, {
      name: 'cc_ambientSky',
      type: _define.GFXType.FLOAT4,
      count: 1
    }, {
      name: 'cc_ambientGround',
      type: _define.GFXType.FLOAT4,
      count: 1
    }]
  };

  var UBOShadow = function UBOShadow() {
    _classCallCheck(this, UBOShadow);

    this.view = new Float32Array(UBOShadow.COUNT);
  };

  _exports.UBOShadow = UBOShadow;
  UBOShadow.MAT_LIGHT_PLANE_PROJ_OFFSET = 0;
  UBOShadow.SHADOW_COLOR_OFFSET = UBOShadow.MAT_LIGHT_PLANE_PROJ_OFFSET + 16;
  UBOShadow.COUNT = UBOShadow.SHADOW_COLOR_OFFSET + 4;
  UBOShadow.SIZE = UBOShadow.COUNT * 4;
  UBOShadow.BLOCK = {
    binding: UniformBinding.UBO_SHADOW,
    name: 'CCShadow',
    members: [{
      name: 'cc_matLightPlaneProj',
      type: _define.GFXType.MAT4,
      count: 1
    }, {
      name: 'cc_shadowColor',
      type: _define.GFXType.FLOAT4,
      count: 1
    }]
  };
  var UNIFORM_ENVIRONMENT = {
    binding: UniformBinding.SAMPLER_ENVIRONMENT,
    name: 'cc_environment',
    type: _define.GFXType.SAMPLER_CUBE,
    count: 1
  };
  _exports.UNIFORM_ENVIRONMENT = UNIFORM_ENVIRONMENT;
  var localBindingsDesc = new Map();
  /**
   * @en The local uniform buffer object
   * @zh 本地 UBO。
   */

  _exports.localBindingsDesc = localBindingsDesc;

  var UBOLocal = function UBOLocal() {
    _classCallCheck(this, UBOLocal);

    this.view = new Float32Array(UBOLocal.COUNT);
  };

  _exports.UBOLocal = UBOLocal;
  UBOLocal.MAT_WORLD_OFFSET = 0;
  UBOLocal.MAT_WORLD_IT_OFFSET = UBOLocal.MAT_WORLD_OFFSET + 16;
  UBOLocal.LIGHTINGMAP_UVPARAM = UBOLocal.MAT_WORLD_IT_OFFSET + 16;
  UBOLocal.COUNT = UBOLocal.LIGHTINGMAP_UVPARAM + 4;
  UBOLocal.SIZE = UBOLocal.COUNT * 4;
  UBOLocal.BLOCK = {
    binding: UniformBinding.UBO_LOCAL,
    name: 'CCLocal',
    members: [{
      name: 'cc_matWorld',
      type: _define.GFXType.MAT4,
      count: 1
    }, {
      name: 'cc_matWorldIT',
      type: _define.GFXType.MAT4,
      count: 1
    }, {
      name: 'cc_lightingMapUVParam',
      type: _define.GFXType.FLOAT4,
      count: 1
    }]
  };
  localBindingsDesc.set(UBOLocal.BLOCK.name, {
    type: _define.GFXBindingType.UNIFORM_BUFFER,
    blockInfo: UBOLocal.BLOCK
  });
  var INST_MAT_WORLD = 'a_matWorld0';
  _exports.INST_MAT_WORLD = INST_MAT_WORLD;

  var UBOLocalBatched = function UBOLocalBatched() {
    _classCallCheck(this, UBOLocalBatched);

    this.view = new Float32Array(UBOLocalBatched.COUNT);
  };

  _exports.UBOLocalBatched = UBOLocalBatched;
  UBOLocalBatched.BATCHING_COUNT = 10;
  UBOLocalBatched.MAT_WORLDS_OFFSET = 0;
  UBOLocalBatched.COUNT = 16 * UBOLocalBatched.BATCHING_COUNT;
  UBOLocalBatched.SIZE = UBOLocalBatched.COUNT * 4;
  UBOLocalBatched.BLOCK = {
    binding: UniformBinding.UBO_LOCAL,
    name: 'CCLocalBatched',
    members: [{
      name: 'cc_matWorlds',
      type: _define.GFXType.MAT4,
      count: UBOLocalBatched.BATCHING_COUNT
    }]
  };
  localBindingsDesc.set(UBOLocalBatched.BLOCK.name, {
    type: _define.GFXBindingType.UNIFORM_BUFFER,
    blockInfo: UBOLocalBatched.BLOCK
  });
  /**
   * @en The uniform buffer object for forward lighting
   * @zh 前向灯光 UBO。
   */

  var UBOForwardLight = function UBOForwardLight() {
    _classCallCheck(this, UBOForwardLight);

    this.view = new Float32Array(UBOForwardLight.COUNT);
  };

  _exports.UBOForwardLight = UBOForwardLight;
  UBOForwardLight.MAX_SPHERE_LIGHTS = 2;
  UBOForwardLight.MAX_SPOT_LIGHTS = 2;
  UBOForwardLight.SPHERE_LIGHT_POS_OFFSET = 0;
  UBOForwardLight.SPHERE_LIGHT_SIZE_RANGE_OFFSET = UBOForwardLight.SPHERE_LIGHT_POS_OFFSET + UBOForwardLight.MAX_SPHERE_LIGHTS * 4;
  UBOForwardLight.SPHERE_LIGHT_COLOR_OFFSET = UBOForwardLight.SPHERE_LIGHT_SIZE_RANGE_OFFSET + UBOForwardLight.MAX_SPHERE_LIGHTS * 4;
  UBOForwardLight.SPOT_LIGHT_POS_OFFSET = UBOForwardLight.SPHERE_LIGHT_COLOR_OFFSET + UBOForwardLight.MAX_SPOT_LIGHTS * 4;
  UBOForwardLight.SPOT_LIGHT_SIZE_RANGE_ANGLE_OFFSET = UBOForwardLight.SPOT_LIGHT_POS_OFFSET + UBOForwardLight.MAX_SPOT_LIGHTS * 4;
  UBOForwardLight.SPOT_LIGHT_DIR_OFFSET = UBOForwardLight.SPOT_LIGHT_SIZE_RANGE_ANGLE_OFFSET + UBOForwardLight.MAX_SPOT_LIGHTS * 4;
  UBOForwardLight.SPOT_LIGHT_COLOR_OFFSET = UBOForwardLight.SPOT_LIGHT_DIR_OFFSET + UBOForwardLight.MAX_SPOT_LIGHTS * 4;
  UBOForwardLight.COUNT = UBOForwardLight.SPOT_LIGHT_COLOR_OFFSET + UBOForwardLight.MAX_SPOT_LIGHTS * 4;
  UBOForwardLight.SIZE = UBOForwardLight.COUNT * 4;
  UBOForwardLight.BLOCK = {
    binding: UniformBinding.UBO_FORWARD_LIGHTS,
    name: 'CCForwardLight',
    members: [{
      name: 'cc_sphereLitPos',
      type: _define.GFXType.FLOAT4,
      count: UBOForwardLight.MAX_SPHERE_LIGHTS
    }, {
      name: 'cc_sphereLitSizeRange',
      type: _define.GFXType.FLOAT4,
      count: UBOForwardLight.MAX_SPHERE_LIGHTS
    }, {
      name: 'cc_sphereLitColor',
      type: _define.GFXType.FLOAT4,
      count: UBOForwardLight.MAX_SPHERE_LIGHTS
    }, {
      name: 'cc_spotLitPos',
      type: _define.GFXType.FLOAT4,
      count: UBOForwardLight.MAX_SPOT_LIGHTS
    }, {
      name: 'cc_spotLitSizeRangeAngle',
      type: _define.GFXType.FLOAT4,
      count: UBOForwardLight.MAX_SPOT_LIGHTS
    }, {
      name: 'cc_spotLitDir',
      type: _define.GFXType.FLOAT4,
      count: UBOForwardLight.MAX_SPOT_LIGHTS
    }, {
      name: 'cc_spotLitColor',
      type: _define.GFXType.FLOAT4,
      count: UBOForwardLight.MAX_SPOT_LIGHTS
    }]
  };
  localBindingsDesc.set(UBOForwardLight.BLOCK.name, {
    type: _define.GFXBindingType.UNIFORM_BUFFER,
    blockInfo: UBOForwardLight.BLOCK
  }); // The actual uniform vectors used is JointUniformCapacity * 3.
  // We think this is a reasonable default capacity considering MAX_VERTEX_UNIFORM_VECTORS in WebGL spec is just 128.
  // Skinning models with number of bones more than this capacity will be automatically switched to texture skinning.
  // But still, you can tweak this for your own need by changing the number below
  // and the JOINT_UNIFORM_CAPACITY macro in cc-skinning shader header.

  var JOINT_UNIFORM_CAPACITY = 30;
  /**
   * @en The uniform buffer object for skinning texture
   * @zh 骨骼贴图 UBO。
   */

  _exports.JOINT_UNIFORM_CAPACITY = JOINT_UNIFORM_CAPACITY;

  var UBOSkinningTexture = function UBOSkinningTexture() {
    _classCallCheck(this, UBOSkinningTexture);
  };

  _exports.UBOSkinningTexture = UBOSkinningTexture;
  UBOSkinningTexture.JOINTS_TEXTURE_INFO_OFFSET = 0;
  UBOSkinningTexture.COUNT = UBOSkinningTexture.JOINTS_TEXTURE_INFO_OFFSET + 4;
  UBOSkinningTexture.SIZE = UBOSkinningTexture.COUNT * 4;
  UBOSkinningTexture.BLOCK = {
    binding: UniformBinding.UBO_SKINNING_TEXTURE,
    name: 'CCSkinningTexture',
    members: [{
      name: 'cc_jointTextureInfo',
      type: _define.GFXType.FLOAT4,
      count: 1
    }]
  };
  localBindingsDesc.set(UBOSkinningTexture.BLOCK.name, {
    type: _define.GFXBindingType.UNIFORM_BUFFER,
    blockInfo: UBOSkinningTexture.BLOCK
  });

  var UBOSkinningAnimation = function UBOSkinningAnimation() {
    _classCallCheck(this, UBOSkinningAnimation);
  };

  _exports.UBOSkinningAnimation = UBOSkinningAnimation;
  UBOSkinningAnimation.JOINTS_ANIM_INFO_OFFSET = 0;
  UBOSkinningAnimation.COUNT = UBOSkinningAnimation.JOINTS_ANIM_INFO_OFFSET + 4;
  UBOSkinningAnimation.SIZE = UBOSkinningAnimation.COUNT * 4;
  UBOSkinningAnimation.BLOCK = {
    binding: UniformBinding.UBO_SKINNING_ANIMATION,
    name: 'CCSkinningAnimation',
    members: [{
      name: 'cc_jointAnimInfo',
      type: _define.GFXType.FLOAT4,
      count: 1
    }]
  };
  localBindingsDesc.set(UBOSkinningAnimation.BLOCK.name, {
    type: _define.GFXBindingType.UNIFORM_BUFFER,
    blockInfo: UBOSkinningAnimation.BLOCK
  });
  var INST_JOINT_ANIM_INFO = 'a_jointAnimInfo';
  _exports.INST_JOINT_ANIM_INFO = INST_JOINT_ANIM_INFO;

  var UBOSkinning = function UBOSkinning() {
    _classCallCheck(this, UBOSkinning);
  };

  _exports.UBOSkinning = UBOSkinning;
  UBOSkinning.JOINTS_OFFSET = 0;
  UBOSkinning.COUNT = UBOSkinning.JOINTS_OFFSET + JOINT_UNIFORM_CAPACITY * 12;
  UBOSkinning.SIZE = UBOSkinning.COUNT * 4;
  UBOSkinning.BLOCK = {
    binding: UniformBinding.UBO_SKINNING_TEXTURE,
    name: 'CCSkinning',
    members: [{
      name: 'cc_joints',
      type: _define.GFXType.FLOAT4,
      count: JOINT_UNIFORM_CAPACITY * 3
    }]
  };
  localBindingsDesc.set(UBOSkinning.BLOCK.name, {
    type: _define.GFXBindingType.UNIFORM_BUFFER,
    blockInfo: UBOSkinning.BLOCK
  });
  /**
   * @en The sampler for joint texture
   * @zh 骨骼纹理采样器。
   */

  var UniformJointTexture = {
    binding: UniformBinding.SAMPLER_JOINTS,
    name: 'cc_jointTexture',
    type: _define.GFXType.SAMPLER2D,
    count: 1
  };
  _exports.UniformJointTexture = UniformJointTexture;
  localBindingsDesc.set(UniformJointTexture.name, {
    type: _define.GFXBindingType.SAMPLER,
    samplerInfo: UniformJointTexture
  });
  /**
   * @en The uniform buffer object for morph setting
   * @zh 形变配置的 UBO
   */

  var UBOMorph = function UBOMorph() {
    _classCallCheck(this, UBOMorph);
  };

  _exports.UBOMorph = UBOMorph;
  UBOMorph.MAX_MORPH_TARGET_COUNT = 60;
  UBOMorph.OFFSET_OF_WEIGHTS = 0;
  UBOMorph.OFFSET_OF_DISPLACEMENT_TEXTURE_WIDTH = 4 * UBOMorph.MAX_MORPH_TARGET_COUNT;
  UBOMorph.OFFSET_OF_DISPLACEMENT_TEXTURE_HEIGHT = UBOMorph.OFFSET_OF_DISPLACEMENT_TEXTURE_WIDTH + 4;
  UBOMorph.COUNT_BASE_4_BYTES = 4 * Math.ceil(UBOMorph.MAX_MORPH_TARGET_COUNT / 4) + 4;
  UBOMorph.SIZE = UBOMorph.COUNT_BASE_4_BYTES * 4;
  UBOMorph.BLOCK = {
    binding: UniformBinding.UBO_MORPH,
    name: 'CCMorph',
    members: [{
      name: 'cc_displacementWeights',
      type: _define.GFXType.FLOAT4,
      count: UBOMorph.MAX_MORPH_TARGET_COUNT / 4
    }, {
      name: 'cc_displacementTextureInfo',
      type: _define.GFXType.FLOAT4,
      count: 1
    }]
  };
  localBindingsDesc.set(UBOMorph.BLOCK.name, {
    type: _define.GFXBindingType.UNIFORM_BUFFER,
    blockInfo: UBOMorph.BLOCK
  });
  /**
   * @en The sampler for morph texture of position
   * @zh 位置形变纹理采样器。
   */

  var UniformPositionMorphTexture = {
    binding: UniformBinding.SAMPLER_MORPH_POSITION,
    name: 'cc_PositionDisplacements',
    type: _define.GFXType.SAMPLER2D,
    count: 1
  };
  _exports.UniformPositionMorphTexture = UniformPositionMorphTexture;
  localBindingsDesc.set(UniformPositionMorphTexture.name, {
    type: _define.GFXBindingType.SAMPLER,
    samplerInfo: UniformPositionMorphTexture
  });
  /**
   * @en The sampler for morph texture of normal
   * @zh 法线形变纹理采样器。
   */

  var UniformNormalMorphTexture = {
    binding: UniformBinding.SAMPLER_MORPH_NORMAL,
    name: 'cc_NormalDisplacements',
    type: _define.GFXType.SAMPLER2D,
    count: 1
  };
  _exports.UniformNormalMorphTexture = UniformNormalMorphTexture;
  localBindingsDesc.set(UniformNormalMorphTexture.name, {
    type: _define.GFXBindingType.SAMPLER,
    samplerInfo: UniformNormalMorphTexture
  });
  /**
   * @en The sampler for light map texture
   * @zh 光照图纹理采样器。
   */

  var UniformLightingMapSampler = {
    binding: UniformBinding.SAMPLER_LIGHTING_MAP,
    name: 'cc_lightingMap',
    type: _define.GFXType.SAMPLER2D,
    count: 1
  };
  _exports.UniformLightingMapSampler = UniformLightingMapSampler;
  localBindingsDesc.set(UniformLightingMapSampler.name, {
    type: _define.GFXBindingType.SAMPLER,
    samplerInfo: UniformLightingMapSampler
  });
  /**
   * @en The sampler for morph texture of tangent
   * @zh 切线形变纹理采样器。
   */

  var UniformTangentMorphTexture = {
    binding: UniformBinding.SAMPLER_MORPH_TANGENT,
    name: 'cc_TangentDisplacements',
    type: _define.GFXType.SAMPLER2D,
    count: 1
  };
  _exports.UniformTangentMorphTexture = UniformTangentMorphTexture;
  localBindingsDesc.set(UniformTangentMorphTexture.name, {
    type: _define.GFXBindingType.SAMPLER,
    samplerInfo: UniformTangentMorphTexture
  });

  var CAMERA_DEFAULT_MASK = _layers.Layers.makeMaskExclude([_layers.Layers.BitMask.UI_2D, _layers.Layers.BitMask.GIZMOS, _layers.Layers.BitMask.EDITOR, _layers.Layers.BitMask.SCENE_GIZMO, _layers.Layers.BitMask.PROFILER]);

  _exports.CAMERA_DEFAULT_MASK = CAMERA_DEFAULT_MASK;

  var CAMERA_EDITOR_MASK = _layers.Layers.makeMaskExclude([_layers.Layers.BitMask.UI_2D, _layers.Layers.BitMask.PROFILER]);

  _exports.CAMERA_EDITOR_MASK = CAMERA_EDITOR_MASK;
  var MODEL_ALWAYS_MASK = _layers.Layers.Enum.ALL;
  _exports.MODEL_ALWAYS_MASK = MODEL_ALWAYS_MASK;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkY6L2plbmtpbnMvd29ya3NwYWNlL0NyZWF0b3JfM0QvZWRpdG9yLTNkL3Jlc291cmNlcy8zZC9lbmdpbmUvY29jb3MvY29yZS9waXBlbGluZS9kZWZpbmUudHMiXSwibmFtZXMiOlsiUElQRUxJTkVfRkxPV19GT1JXQVJEIiwiUElQRUxJTkVfRkxPV19TTUFBIiwiUElQRUxJTkVfRkxPV19UT05FTUFQIiwiUmVuZGVyUGFzc1N0YWdlIiwiY2MiLCJSZW5kZXJQcmlvcml0eSIsIk1BWF9CSU5ESU5HX1NVUFBPUlRFRCIsIlVuaWZvcm1CaW5kaW5nIiwiVUJPX0JVSUxUSU5fQklORElOR19FTkQiLCJpc0J1aWx0aW5CaW5kaW5nIiwiYmluZGluZyIsIkNVU1RVTV9VQk9fQklORElOR19FTkRfUE9JTlQiLCJDVVNUT01fU0FNUExFUl9CSU5ESU5HX1NUQVJUX1BPSU5UIiwiVUJPR2xvYmFsIiwidmlldyIsIkZsb2F0MzJBcnJheSIsIkNPVU5UIiwiVElNRV9PRkZTRVQiLCJTQ1JFRU5fU0laRV9PRkZTRVQiLCJTQ1JFRU5fU0NBTEVfT0ZGU0VUIiwiTkFUSVZFX1NJWkVfT0ZGU0VUIiwiTUFUX1ZJRVdfT0ZGU0VUIiwiTUFUX1ZJRVdfSU5WX09GRlNFVCIsIk1BVF9QUk9KX09GRlNFVCIsIk1BVF9QUk9KX0lOVl9PRkZTRVQiLCJNQVRfVklFV19QUk9KX09GRlNFVCIsIk1BVF9WSUVXX1BST0pfSU5WX09GRlNFVCIsIkNBTUVSQV9QT1NfT0ZGU0VUIiwiRVhQT1NVUkVfT0ZGU0VUIiwiTUFJTl9MSVRfRElSX09GRlNFVCIsIk1BSU5fTElUX0NPTE9SX09GRlNFVCIsIkFNQklFTlRfU0tZX09GRlNFVCIsIkFNQklFTlRfR1JPVU5EX09GRlNFVCIsIlNJWkUiLCJCTE9DSyIsIlVCT19HTE9CQUwiLCJuYW1lIiwibWVtYmVycyIsInR5cGUiLCJHRlhUeXBlIiwiRkxPQVQ0IiwiY291bnQiLCJNQVQ0IiwiVUJPU2hhZG93IiwiTUFUX0xJR0hUX1BMQU5FX1BST0pfT0ZGU0VUIiwiU0hBRE9XX0NPTE9SX09GRlNFVCIsIlVCT19TSEFET1ciLCJVTklGT1JNX0VOVklST05NRU5UIiwiU0FNUExFUl9FTlZJUk9OTUVOVCIsIlNBTVBMRVJfQ1VCRSIsImxvY2FsQmluZGluZ3NEZXNjIiwiTWFwIiwiVUJPTG9jYWwiLCJNQVRfV09STERfT0ZGU0VUIiwiTUFUX1dPUkxEX0lUX09GRlNFVCIsIkxJR0hUSU5HTUFQX1VWUEFSQU0iLCJVQk9fTE9DQUwiLCJzZXQiLCJHRlhCaW5kaW5nVHlwZSIsIlVOSUZPUk1fQlVGRkVSIiwiYmxvY2tJbmZvIiwiSU5TVF9NQVRfV09STEQiLCJVQk9Mb2NhbEJhdGNoZWQiLCJCQVRDSElOR19DT1VOVCIsIk1BVF9XT1JMRFNfT0ZGU0VUIiwiVUJPRm9yd2FyZExpZ2h0IiwiTUFYX1NQSEVSRV9MSUdIVFMiLCJNQVhfU1BPVF9MSUdIVFMiLCJTUEhFUkVfTElHSFRfUE9TX09GRlNFVCIsIlNQSEVSRV9MSUdIVF9TSVpFX1JBTkdFX09GRlNFVCIsIlNQSEVSRV9MSUdIVF9DT0xPUl9PRkZTRVQiLCJTUE9UX0xJR0hUX1BPU19PRkZTRVQiLCJTUE9UX0xJR0hUX1NJWkVfUkFOR0VfQU5HTEVfT0ZGU0VUIiwiU1BPVF9MSUdIVF9ESVJfT0ZGU0VUIiwiU1BPVF9MSUdIVF9DT0xPUl9PRkZTRVQiLCJVQk9fRk9SV0FSRF9MSUdIVFMiLCJKT0lOVF9VTklGT1JNX0NBUEFDSVRZIiwiVUJPU2tpbm5pbmdUZXh0dXJlIiwiSk9JTlRTX1RFWFRVUkVfSU5GT19PRkZTRVQiLCJVQk9fU0tJTk5JTkdfVEVYVFVSRSIsIlVCT1NraW5uaW5nQW5pbWF0aW9uIiwiSk9JTlRTX0FOSU1fSU5GT19PRkZTRVQiLCJVQk9fU0tJTk5JTkdfQU5JTUFUSU9OIiwiSU5TVF9KT0lOVF9BTklNX0lORk8iLCJVQk9Ta2lubmluZyIsIkpPSU5UU19PRkZTRVQiLCJVbmlmb3JtSm9pbnRUZXh0dXJlIiwiU0FNUExFUl9KT0lOVFMiLCJTQU1QTEVSMkQiLCJTQU1QTEVSIiwic2FtcGxlckluZm8iLCJVQk9Nb3JwaCIsIk1BWF9NT1JQSF9UQVJHRVRfQ09VTlQiLCJPRkZTRVRfT0ZfV0VJR0hUUyIsIk9GRlNFVF9PRl9ESVNQTEFDRU1FTlRfVEVYVFVSRV9XSURUSCIsIk9GRlNFVF9PRl9ESVNQTEFDRU1FTlRfVEVYVFVSRV9IRUlHSFQiLCJDT1VOVF9CQVNFXzRfQllURVMiLCJNYXRoIiwiY2VpbCIsIlVCT19NT1JQSCIsIlVuaWZvcm1Qb3NpdGlvbk1vcnBoVGV4dHVyZSIsIlNBTVBMRVJfTU9SUEhfUE9TSVRJT04iLCJVbmlmb3JtTm9ybWFsTW9ycGhUZXh0dXJlIiwiU0FNUExFUl9NT1JQSF9OT1JNQUwiLCJVbmlmb3JtTGlnaHRpbmdNYXBTYW1wbGVyIiwiU0FNUExFUl9MSUdIVElOR19NQVAiLCJVbmlmb3JtVGFuZ2VudE1vcnBoVGV4dHVyZSIsIlNBTVBMRVJfTU9SUEhfVEFOR0VOVCIsIkNBTUVSQV9ERUZBVUxUX01BU0siLCJMYXllcnMiLCJtYWtlTWFza0V4Y2x1ZGUiLCJCaXRNYXNrIiwiVUlfMkQiLCJHSVpNT1MiLCJFRElUT1IiLCJTQ0VORV9HSVpNTyIsIlBST0ZJTEVSIiwiQ0FNRVJBX0VESVRPUl9NQVNLIiwiTU9ERUxfQUxXQVlTX01BU0siLCJFbnVtIiwiQUxMIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZU8sTUFBTUEscUJBQTZCLEdBQUcsYUFBdEM7O0FBQ0EsTUFBTUMsa0JBQTBCLEdBQUcsVUFBbkM7O0FBQ0EsTUFBTUMscUJBQTZCLEdBQUcsYUFBdEM7QUFFUDs7Ozs7O01BSVlDLGU7OzthQUFBQSxlO0FBQUFBLElBQUFBLGUsQ0FBQUEsZTtLQUFBQSxlLGdDQUFBQSxlOztBQUdaQyxFQUFBQSxFQUFFLENBQUNELGVBQUgsR0FBcUJBLGVBQXJCO0FBRUE7Ozs7O01BSVlFLGM7QUFNWjs7Ozs7OzthQU5ZQSxjO0FBQUFBLElBQUFBLGMsQ0FBQUEsYztBQUFBQSxJQUFBQSxjLENBQUFBLGM7QUFBQUEsSUFBQUEsYyxDQUFB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V0FBVyxFQUFFZ0I7QUFGc0MsR0FBdkQ7O0FBa0JPLE1BQU1FLG1CQUFtQixHQUFHQyxlQUFPQyxlQUFQLENBQXVCLENBQUNELGVBQU9FLE9BQVAsQ0FBZUMsS0FBaEIsRUFBdUJILGVBQU9FLE9BQVAsQ0FBZUUsTUFBdEMsRUFBOENKLGVBQU9FLE9BQVAsQ0FBZUcsTUFBN0QsRUFDdERMLGVBQU9FLE9BQVAsQ0FBZUksV0FEdUMsRUFDMUJOLGVBQU9FLE9BQVAsQ0FBZUssUUFEVyxDQUF2QixDQUE1Qjs7OztBQUdBLE1BQU1DLGtCQUFrQixHQUFHUixlQUFPQyxlQUFQLENBQXVCLENBQUNELGVBQU9FLE9BQVAsQ0FBZUMsS0FBaEIsRUFBdUJILGVBQU9FLE9BQVAsQ0FBZUssUUFBdEMsQ0FBdkIsQ0FBM0I7OztBQUVBLE1BQU1FLGlCQUFpQixHQUFHVCxlQUFPVSxJQUFQLENBQVlDLEdBQXRDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBjYXRlZ29yeSBwaXBlbGluZVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEdGWEJ1ZmZlciB9IGZyb20gJy4uL2dmeC9idWZmZXInO1xyXG5pbXBvcnQgeyBHRlhDb21tYW5kQnVmZmVyIH0gZnJvbSAnLi4vZ2Z4L2NvbW1hbmQtYnVmZmVyJztcclxuaW1wb3J0IHsgR0ZYQmluZGluZ1R5cGUsIEdGWFR5cGUgfSBmcm9tICcuLi9nZngvZGVmaW5lJztcclxuaW1wb3J0IHsgR0ZYU2FtcGxlciB9IGZyb20gJy4uL2dmeC9zYW1wbGVyJztcclxuaW1wb3J0IHsgR0ZYVW5pZm9ybUJsb2NrLCBHRlhVbmlmb3JtU2FtcGxlciB9IGZyb20gJy4uL2dmeC9zaGFkZXInO1xyXG5pbXBvcnQgeyBHRlhUZXh0dXJlVmlldyB9IGZyb20gJy4uL2dmeC90ZXh0dXJlLXZpZXcnO1xyXG5pbXBvcnQgeyBQYXNzIH0gZnJvbSAnLi4vcmVuZGVyZXIvY29yZS9wYXNzJztcclxuaW1wb3J0IHsgTW9kZWwgfSBmcm9tICcuLi9yZW5kZXJlci9zY2VuZS9tb2RlbCc7XHJcbmltcG9ydCB7IFN1Yk1vZGVsIH0gZnJvbSAnLi4vcmVuZGVyZXIvc2NlbmUvc3VibW9kZWwnO1xyXG5pbXBvcnQgeyBMYXllcnMgfSBmcm9tICcuLi9zY2VuZS1ncmFwaC9sYXllcnMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFBJUEVMSU5FX0ZMT1dfRk9SV0FSRDogc3RyaW5nID0gJ0ZvcndhcmRGbG93JztcclxuZXhwb3J0IGNvbnN0IFBJUEVMSU5FX0ZMT1dfU01BQTogc3RyaW5nID0gJ1NNQUFGbG93JztcclxuZXhwb3J0IGNvbnN0IFBJUEVMSU5FX0ZMT1dfVE9ORU1BUDogc3RyaW5nID0gJ1RvbmVNYXBGbG93JztcclxuXHJcbi8qKlxyXG4gKiBAZW4gVGhlIHByZWRlZmluZWQgcmVuZGVyIHBhc3Mgc3RhZ2UgaWRzXHJcbiAqIEB6aCDpooTorr7nmoTmuLLmn5PpmLbmrrXjgIJcclxuICovXHJcbmV4cG9ydCBlbnVtIFJlbmRlclBhc3NTdGFnZSB7XHJcbiAgICBERUZBVUxUID0gMTAwLFxyXG59XHJcbmNjLlJlbmRlclBhc3NTdGFnZSA9IFJlbmRlclBhc3NTdGFnZTtcclxuXHJcbi8qKlxyXG4gKiBAZW4gVGhlIHByZWRlZmluZWQgcmVuZGVyIHByaW9yaXRpZXNcclxuICogQHpoIOmihOiuvueahOa4suafk+S8mOWFiOe6p+OAglxyXG4gKi9cclxuZXhwb3J0IGVudW0gUmVuZGVyUHJpb3JpdHkge1xyXG4gICAgTUlOID0gMCxcclxuICAgIE1BWCA9IDB4ZmYsXHJcbiAgICBERUZBVUxUID0gMHg4MCxcclxufVxyXG5cclxuLyoqXHJcbiAqIEBlbiBSZW5kZXIgb2JqZWN0IGludGVyZmFjZVxyXG4gKiBAemgg5riy5p+T5a+56LGh5o6l5Y+j44CCXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElSZW5kZXJPYmplY3Qge1xyXG4gICAgbW9kZWw6IE1vZGVsO1xyXG4gICAgZGVwdGg6IG51bWJlcjtcclxufVxyXG5cclxuLypcclxuICogQGVuIFRoZSByZW5kZXIgcGFzcyBpbnRlcmZhY2VcclxuICogQHpoIOa4suafk+i/h+eoi+aOpeWPo+OAglxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJUmVuZGVyUGFzcyB7XHJcbiAgICBoYXNoOiBudW1iZXI7XHJcbiAgICBkZXB0aDogbnVtYmVyO1xyXG4gICAgc2hhZGVySWQ6IG51bWJlcjtcclxuICAgIHN1Yk1vZGVsOiBTdWJNb2RlbDtcclxuICAgIGNtZEJ1ZmY6IEdGWENvbW1hbmRCdWZmZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZW4gUmVuZGVyIGJhdGNoIGludGVyZmFjZVxyXG4gKiBAemgg5riy5p+T5om55qyh5o6l5Y+j44CCXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElSZW5kZXJCYXRjaCB7XHJcbiAgICBwYXNzOiBQYXNzO1xyXG59XHJcblxyXG4vKipcclxuICogQGVuIFJlbmRlciBxdWV1ZSBkZXNjcmlwdG9yXHJcbiAqIEB6aCDmuLLmn5PpmJ/liJfmj4/ov7DjgIJcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVJlbmRlclF1ZXVlRGVzYyB7XHJcbiAgICBpc1RyYW5zcGFyZW50OiBib29sZWFuO1xyXG4gICAgcGhhc2VzOiBudW1iZXI7XHJcbiAgICBzb3J0RnVuYzogKGE6IElSZW5kZXJQYXNzLCBiOiBJUmVuZGVyUGFzcykgPT4gbnVtYmVyO1xyXG59XHJcblxyXG5jb25zdCBNQVhfQklORElOR19TVVBQT1JURUQgPSAyNDsgLy8gZnJvbSBXZWJHTCAyIHNwZWNcclxuXHJcbi8qKlxyXG4gKiBAZW4gVGhlIHVuaWZvcm0gYmluZGluZ3NcclxuICogQHpoIFVuaWZvcm0g5Y+C5pWw57uR5a6a44CCXHJcbiAqL1xyXG5leHBvcnQgZW51bSBVbmlmb3JtQmluZGluZyB7XHJcbiAgICAvLyBVQk9zXHJcbiAgICBVQk9fR0xPQkFMID0gTUFYX0JJTkRJTkdfU1VQUE9SVEVEIC0gMSxcclxuICAgIFVCT19TSEFET1cgPSBNQVhfQklORElOR19TVVBQT1JURUQgLSAyLFxyXG5cclxuICAgIFVCT19MT0NBTCA9IE1BWF9CSU5ESU5HX1NVUFBPUlRFRCAtIDMsXHJcbiAgICBVQk9fRk9SV0FSRF9MSUdIVFMgPSBNQVhfQklORElOR19TVVBQT1JURUQgLSA0LFxyXG4gICAgVUJPX1NLSU5OSU5HX0FOSU1BVElPTiA9IE1BWF9CSU5ESU5HX1NVUFBPUlRFRCAtIDUsXHJcbiAgICBVQk9fU0tJTk5JTkdfVEVYVFVSRSA9IE1BWF9CSU5ESU5HX1NVUFBPUlRFRCAtIDYsXHJcbiAgICBVQk9fVUkgPSBNQVhfQklORElOR19TVVBQT1JURUQgLSA3LFxyXG4gICAgVUJPX01PUlBIID0gTUFYX0JJTkRJTkdfU1VQUE9SVEVEIC0gOCxcclxuICAgIFVCT19CVUlMVElOX0JJTkRJTkdfRU5EID0gTUFYX0JJTkRJTkdfU1VQUE9SVEVEIC0gOSxcclxuXHJcbiAgICAvLyBzYW1wbGVyc1xyXG4gICAgU0FNUExFUl9KT0lOVFMgPSBNQVhfQklORElOR19TVVBQT1JURUQgKyAxLFxyXG4gICAgU0FNUExFUl9FTlZJUk9OTUVOVCA9IE1BWF9CSU5ESU5HX1NVUFBPUlRFRCArIDIsXHJcbiAgICBTQU1QTEVSX01PUlBIX1BPU0lUSU9OID0gTUFYX0JJTkRJTkdfU1VQUE9SVEVEICsgMyxcclxuICAgIFNBTVBMRVJfTU9SUEhfTk9STUFMID0gTUFYX0JJTkRJTkdfU1VQUE9SVEVEICsgNCxcclxuICAgIFNBTVBMRVJfTU9SUEhfVEFOR0VOVCA9IE1BWF9CSU5ESU5HX1NVUFBPUlRFRCArIDUsXHJcbiAgICBTQU1QTEVSX0xJR0hUSU5HX01BUCA9IE1BWF9CSU5ESU5HX1NVUFBPUlRFRCArIDYsXHJcblxyXG4gICAgLy8gcm9vbXMgbGVmdCBmb3IgY3VzdG9tIGJpbmRpbmdzXHJcbiAgICAvLyBlZmZlY3QgaW1wb3J0ZXIgcHJlcGFyZXMgYmluZGluZ3MgYWNjb3JkaW5nIHRvIHRoaXNcclxuICAgIENVU1RVTV9VQk9fQklORElOR19FTkRfUE9JTlQgPSBVbmlmb3JtQmluZGluZy5VQk9fQlVJTFRJTl9CSU5ESU5HX0VORCxcclxuICAgIENVU1RPTV9TQU1QTEVSX0JJTkRJTkdfU1RBUlRfUE9JTlQgPSBNQVhfQklORElOR19TVVBQT1JURUQgKyA3LFxyXG59XHJcblxyXG4vKipcclxuICogQGVuIENoZWNrIHdoZXRoZXIgdGhlIGdpdmVuIHVuaWZvcm0gYmluZGluZyBpcyBhIGJ1aWx0aW4gYmluZGluZ1xyXG4gKiBAemgg5qOA5p+l5oyH5a6a55qEIFVuaWZvcm1CaW5kaW5nIOaYr+WQpuaYr+W8leaTjuWGhee9rueahFxyXG4gKiBAcGFyYW0gYmluZGluZyBcclxuICovXHJcbmV4cG9ydCBjb25zdCBpc0J1aWx0aW5CaW5kaW5nID0gKGJpbmRpbmc6IG51bWJlcikgPT5cclxuICAgIGJpbmRpbmcgPj0gVW5pZm9ybUJpbmRpbmcuQ1VTVFVNX1VCT19CSU5ESU5HX0VORF9QT0lOVCAmJiBiaW5kaW5nIDwgVW5pZm9ybUJpbmRpbmcuQ1VTVE9NX1NBTVBMRVJfQklORElOR19TVEFSVF9QT0lOVDtcclxuXHJcbi8qKlxyXG4gKiBAZW4gVGhlIGdsb2JhbCB1bmlmb3JtIGJ1ZmZlciBvYmplY3RcclxuICogQHpoIOWFqOWxgCBVQk/jgIJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBVQk9HbG9iYWwge1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgVElNRV9PRkZTRVQ6IG51bWJlciA9IDA7XHJcbiAgICBwdWJsaWMgc3RhdGljIFNDUkVFTl9TSVpFX09GRlNFVDogbnVtYmVyID0gVUJPR2xvYmFsLlRJTUVfT0ZGU0VUICsgNDtcclxuICAgIHB1YmxpYyBzdGF0aWMgU0NSRUVOX1NDQUxFX09GRlNFVDogbnVtYmVyID0gVUJPR2xvYmFsLlNDUkVFTl9TSVpFX09GRlNFVCArIDQ7XHJcbiAgICBwdWJsaWMgc3RhdGljIE5BVElWRV9TSVpFX09GRlNFVDogbnVtYmVyID0gVUJPR2xvYmFsLlNDUkVFTl9TQ0FMRV9PRkZTRVQgKyA0O1xyXG4gICAgcHVibGljIHN0YXRpYyBNQVRfVklFV19PRkZTRVQ6IG51bWJlciA9IFVCT0dsb2JhbC5OQVRJVkVfU0laRV9PRkZTRVQgKyA0O1xyXG4gICAgcHVibGljIHN0YXRpYyBNQVRfVklFV19JTlZfT0ZGU0VUOiBudW1iZXIgPSBVQk9HbG9iYWwuTUFUX1ZJRVdfT0ZGU0VUICsgMTY7XHJcbiAgICBwdWJsaWMgc3RhdGljIE1BVF9QUk9KX09GRlNFVDogbnVtYmVyID0gVUJPR2xvYmFsLk1BVF9WSUVXX0lOVl9PRkZTRVQgKyAxNjtcclxuICAgIHB1YmxpYyBzdGF0aWMgTUFUX1BST0pfSU5WX09GRlNFVDogbnVtYmVyID0gVUJPR2xvYmFsLk1BVF9QUk9KX09GRlNFVCArIDE2O1xyXG4gICAgcHVibGljIHN0YXRpYyBNQVRfVklFV19QUk9KX09GRlNFVDogbnVtYmVyID0gVUJPR2xvYmFsLk1BVF9QUk9KX0lOVl9PRkZTRVQgKyAxNjtcclxuICAgIHB1YmxpYyBzdGF0aWMgTUFUX1ZJRVdfUFJPSl9JTlZfT0ZGU0VUOiBudW1iZXIgPSBVQk9HbG9iYWwuTUFUX1ZJRVdfUFJPSl9PRkZTRVQgKyAxNjtcclxuICAgIHB1YmxpYyBzdGF0aWMgQ0FNRVJBX1BPU19PRkZTRVQ6IG51bWJlciA9IFVCT0dsb2JhbC5NQVRfVklFV19QUk9KX0lOVl9PRkZTRVQgKyAxNjtcclxuICAgIHB1YmxpYyBzdGF0aWMgRVhQT1NVUkVfT0ZGU0VUOiBudW1iZXIgPSBVQk9HbG9iYWwuQ0FNRVJBX1BPU19PRkZTRVQgKyA0O1xyXG4gICAgcHVibGljIHN0YXRpYyBNQUlOX0xJVF9ESVJfT0ZGU0VUOiBudW1iZXIgPSBVQk9HbG9iYWwuRVhQT1NVUkVfT0ZGU0VUICsgNDtcclxuICAgIHB1YmxpYyBzdGF0aWMgTUFJTl9MSVRfQ09MT1JfT0ZGU0VUOiBudW1iZXIgPSBVQk9HbG9iYWwuTUFJTl9MSVRfRElSX09GRlNFVCArIDQ7XHJcbiAgICBwdWJsaWMgc3RhdGljIEFNQklFTlRfU0tZX09GRlNFVDogbnVtYmVyID0gVUJPR2xvYmFsLk1BSU5fTElUX0NPTE9SX09GRlNFVCArIDQ7XHJcbiAgICBwdWJsaWMgc3RhdGljIEFNQklFTlRfR1JPVU5EX09GRlNFVDogbnVtYmVyID0gVUJPR2xvYmFsLkFNQklFTlRfU0tZX09GRlNFVCArIDQ7XHJcbiAgICBwdWJsaWMgc3RhdGljIENPVU5UOiBudW1iZXIgPSBVQk9HbG9iYWwuQU1CSUVOVF9HUk9VTkRfT0ZGU0VUICsgNDtcclxuICAgIHB1YmxpYyBzdGF0aWMgU0laRTogbnVtYmVyID0gVUJPR2xvYmFsLkNPVU5UICogNDtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIEJMT0NLOiBHRlhVbmlmb3JtQmxvY2sgPSB7XHJcbiAgICAgICAgYmluZGluZzogVW5pZm9ybUJpbmRpbmcuVUJPX0dMT0JBTCwgbmFtZTogJ0NDR2xvYmFsJywgbWVtYmVyczogW1xyXG4gICAgICAgICAgICB7IG5hbWU6ICdjY190aW1lJywgdHlwZTogR0ZYVHlwZS5GTE9BVDQsIGNvdW50OiAxIH0sXHJcbiAgICAgICAgICAgIHsgbmFtZTogJ2NjX3NjcmVlblNpemUnLCB0eXBlOiBHRlhUeXBlLkZMT0FUNCwgY291bnQ6IDEgfSxcclxuICAgICAgICAgICAgeyBuYW1lOiAnY2Nfc2NyZWVuU2NhbGUnLCB0eXBlOiBHRlhUeXBlLkZMT0FUNCwgY291bnQ6IDEgfSxcclxuICAgICAgICAgICAgeyBuYW1lOiAnY2NfbmF0aXZlU2l6ZScsIHR5cGU6IEdGWFR5cGUuRkxPQVQ0LCBjb3VudDogMSB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6ICdjY19tYXRWaWV3JywgdHlwZTogR0ZYVHlwZS5NQVQ0LCBjb3VudDogMSB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6ICdjY19tYXRWaWV3SW52JywgdHlwZTogR0ZYVHlwZS5NQVQ0LCBjb3VudDogMSB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6ICdjY19tYXRQcm9qJywgdHlwZTogR0ZYVHlwZS5NQVQ0LCBjb3VudDogMSB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6ICdjY19tYXRQcm9qSW52JywgdHlwZTogR0ZYVHlwZS5NQVQ0LCBjb3VudDogMSB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6ICdjY19tYXRWaWV3UHJvaicsIHR5cGU6IEdGWFR5cGUuTUFUNCwgY291bnQ6IDEgfSxcclxuICAgICAgICAgICAgeyBuYW1lOiAnY2NfbWF0Vmlld1Byb2pJbnYnLCB0eXBlOiBHRlhUeXBlLk1BVDQsIGNvdW50OiAxIH0sXHJcbiAgICAgICAgICAgIHsgbmFtZTogJ2NjX2NhbWVyYVBvcycsIHR5cGU6IEdGWFR5cGUuRkxPQVQ0LCBjb3VudDogMSB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6ICdjY19leHBvc3VyZScsIHR5cGU6IEdGWFR5cGUuRkxPQVQ0LCBjb3VudDogMSB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6ICdjY19tYWluTGl0RGlyJywgdHlwZTogR0ZYVHlwZS5GTE9BVDQsIGNvdW50OiAxIH0sXHJcbiAgICAgICAgICAgIHsgbmFtZTogJ2NjX21haW5MaXRDb2xvcicsIHR5cGU6IEdGWFR5cGUuRkxPQVQ0LCBjb3VudDogMSB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6ICdjY19hbWJpZW50U2t5JywgdHlwZTogR0ZYVHlwZS5GTE9BVDQsIGNvdW50OiAxIH0sXHJcbiAgICAgICAgICAgIHsgbmFtZTogJ2NjX2FtYmllbnRHcm91bmQnLCB0eXBlOiBHRlhUeXBlLkZMT0FUNCwgY291bnQ6IDEgfSxcclxuICAgICAgICBdLFxyXG4gICAgfTtcclxuXHJcbiAgICBwdWJsaWMgdmlldzogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShVQk9HbG9iYWwuQ09VTlQpO1xyXG59XHJcblxyXG4vKipcclxuICogQGVuIFRoZSB1bmlmb3JtIGJ1ZmZlciBvYmplY3QgZm9yIHNoYWRvd1xyXG4gKiBAemgg6Zi05b2xIFVCT+OAglxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFVCT1NoYWRvdyB7XHJcbiAgICBwdWJsaWMgc3RhdGljIE1BVF9MSUdIVF9QTEFORV9QUk9KX09GRlNFVDogbnVtYmVyID0gMDtcclxuICAgIHB1YmxpYyBzdGF0aWMgU0hBRE9XX0NPTE9SX09GRlNFVDogbnVtYmVyID0gVUJPU2hhZG93Lk1BVF9MSUdIVF9QTEFORV9QUk9KX09GRlNFVCArIDE2O1xyXG4gICAgcHVibGljIHN0YXRpYyBDT1VOVDogbnVtYmVyID0gVUJPU2hhZG93LlNIQURPV19DT0xPUl9PRkZTRVQgKyA0O1xyXG4gICAgcHVibGljIHN0YXRpYyBTSVpFOiBudW1iZXIgPSBVQk9TaGFkb3cuQ09VTlQgKiA0O1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgQkxPQ0s6IEdGWFVuaWZvcm1CbG9jayA9IHtcclxuICAgICAgICBiaW5kaW5nOiBVbmlmb3JtQmluZGluZy5VQk9fU0hBRE9XLCBuYW1lOiAnQ0NTaGFkb3cnLCBtZW1iZXJzOiBbXHJcbiAgICAgICAgICAgIHsgbmFtZTogJ2NjX21hdExpZ2h0UGxhbmVQcm9qJywgdHlwZTogR0ZYVHlwZS5NQVQ0LCBjb3VudDogMSB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6ICdjY19zaGFkb3dDb2xvcicsIHR5cGU6IEdGWFR5cGUuRkxPQVQ0LCBjb3VudDogMSB9LFxyXG4gICAgICAgIF0sXHJcbiAgICB9O1xyXG5cclxuICAgIHB1YmxpYyB2aWV3OiBGbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KFVCT1NoYWRvdy5DT1VOVCk7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBVTklGT1JNX0VOVklST05NRU5UOiBHRlhVbmlmb3JtU2FtcGxlciA9IHtcclxuICAgIGJpbmRpbmc6IFVuaWZvcm1CaW5kaW5nLlNBTVBMRVJfRU5WSVJPTk1FTlQsIG5hbWU6ICdjY19lbnZpcm9ubWVudCcsIHR5cGU6IEdGWFR5cGUuU0FNUExFUl9DVUJFLCBjb3VudDogMSxcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBsb2NhbEJpbmRpbmdzRGVzYzogTWFwPHN0cmluZywgSUludGVybmFsQmluZGluZ0Rlc2M+ID0gbmV3IE1hcDxzdHJpbmcsIElJbnRlcm5hbEJpbmRpbmdEZXNjPigpO1xyXG5cclxuLyoqXHJcbiAqIEBlbiBUaGUgbG9jYWwgdW5pZm9ybSBidWZmZXIgb2JqZWN0XHJcbiAqIEB6aCDmnKzlnLAgVUJP44CCXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVUJPTG9jYWwge1xyXG4gICAgcHVibGljIHN0YXRpYyBNQVRfV09STERfT0ZGU0VUOiBudW1iZXIgPSAwO1xyXG4gICAgcHVibGljIHN0YXRpYyBNQVRfV09STERfSVRfT0ZGU0VUOiBudW1iZXIgPSBVQk9Mb2NhbC5NQVRfV09STERfT0ZGU0VUICsgMTY7XHJcbiAgICBwdWJsaWMgc3RhdGljIExJR0hUSU5HTUFQX1VWUEFSQU06IG51bWJlciA9IFVCT0xvY2FsLk1BVF9XT1JMRF9JVF9PRkZTRVQgKyAxNjtcclxuICAgIHB1YmxpYyBzdGF0aWMgQ09VTlQ6IG51bWJlciA9IFVCT0xvY2FsLkxJR0hUSU5HTUFQX1VWUEFSQU0gKyA0O1xyXG4gICAgcHVibGljIHN0YXRpYyBTSVpFOiBudW1iZXIgPSBVQk9Mb2NhbC5DT1VOVCAqIDQ7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBCTE9DSzogR0ZYVW5pZm9ybUJsb2NrID0ge1xyXG4gICAgICAgIGJpbmRpbmc6IFVuaWZvcm1CaW5kaW5nLlVCT19MT0NBTCwgbmFtZTogJ0NDTG9jYWwnLCBtZW1iZXJzOiBbXHJcbiAgICAgICAgICAgIHsgbmFtZTogJ2NjX21hdFdvcmxkJywgdHlwZTogR0ZYVHlwZS5NQVQ0LCBjb3VudDogMSB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6ICdjY19tYXRXb3JsZElUJywgdHlwZTogR0ZYVHlwZS5NQVQ0LCBjb3VudDogMSB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6ICdjY19saWdodGluZ01hcFVWUGFyYW0nLCB0eXBlOiBHRlhUeXBlLkZMT0FUNCwgY291bnQ6IDEgfSxcclxuICAgICAgICBdLFxyXG4gICAgfTtcclxuXHJcbiAgICBwdWJsaWMgdmlldzogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShVQk9Mb2NhbC5DT1VOVCk7XHJcbn1cclxubG9jYWxCaW5kaW5nc0Rlc2Muc2V0KFVCT0xvY2FsLkJMT0NLLm5hbWUsIHtcclxuICAgIHR5cGU6IEdGWEJpbmRpbmdUeXBlLlVOSUZPUk1fQlVGRkVSLFxyXG4gICAgYmxvY2tJbmZvOiBVQk9Mb2NhbC5CTE9DSyxcclxufSk7XHJcbmV4cG9ydCBjb25zdCBJTlNUX01BVF9XT1JMRCA9ICdhX21hdFdvcmxkMCc7XHJcblxyXG5leHBvcnQgY2xhc3MgVUJPTG9jYWxCYXRjaGVkIHtcclxuICAgIHB1YmxpYyBzdGF0aWMgQkFUQ0hJTkdfQ09VTlQ6IG51bWJlciA9IDEwO1xyXG4gICAgcHVibGljIHN0YXRpYyBNQVRfV09STERTX09GRlNFVDogbnVtYmVyID0gMDtcclxuICAgIHB1YmxpYyBzdGF0aWMgQ09VTlQ6IG51bWJlciA9IDE2ICogVUJPTG9jYWxCYXRjaGVkLkJBVENISU5HX0NPVU5UO1xyXG4gICAgcHVibGljIHN0YXRpYyBTSVpFOiBudW1iZXIgPSBVQk9Mb2NhbEJhdGNoZWQuQ09VTlQgKiA0O1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgQkxPQ0s6IEdGWFVuaWZvcm1CbG9jayA9IHtcclxuICAgICAgICBiaW5kaW5nOiBVbmlmb3JtQmluZGluZy5VQk9fTE9DQUwsIG5hbWU6ICdDQ0xvY2FsQmF0Y2hlZCcsIG1lbWJlcnM6IFtcclxuICAgICAgICAgICAgeyBuYW1lOiAnY2NfbWF0V29ybGRzJywgdHlwZTogR0ZYVHlwZS5NQVQ0LCBjb3VudDogVUJPTG9jYWxCYXRjaGVkLkJBVENISU5HX0NPVU5UIH0sXHJcbiAgICAgICAgXSxcclxuICAgIH07XHJcblxyXG4gICAgcHVibGljIHZpZXc6IEZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoVUJPTG9jYWxCYXRjaGVkLkNPVU5UKTtcclxufVxyXG5sb2NhbEJpbmRpbmdzRGVzYy5zZXQoVUJPTG9jYWxCYXRjaGVkLkJMT0NLLm5hbWUsIHtcclxuICAgIHR5cGU6IEdGWEJpbmRpbmdUeXBlLlVOSUZPUk1fQlVGRkVSLFxyXG4gICAgYmxvY2tJbmZvOiBVQk9Mb2NhbEJhdGNoZWQuQkxPQ0ssXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBlbiBUaGUgdW5pZm9ybSBidWZmZXIgb2JqZWN0IGZvciBmb3J3YXJkIGxpZ2h0aW5nXHJcbiAqIEB6aCDliY3lkJHnga/lhYkgVUJP44CCXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVUJPRm9yd2FyZExpZ2h0IHtcclxuICAgIHB1YmxpYyBzdGF0aWMgTUFYX1NQSEVSRV9MSUdIVFMgPSAyO1xyXG4gICAgcHVibGljIHN0YXRpYyBNQVhfU1BPVF9MSUdIVFMgPSAyO1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgU1BIRVJFX0xJR0hUX1BPU19PRkZTRVQ6IG51bWJlciA9IDA7XHJcbiAgICBwdWJsaWMgc3RhdGljIFNQSEVSRV9MSUdIVF9TSVpFX1JBTkdFX09GRlNFVDogbnVtYmVyID0gVUJPRm9yd2FyZExpZ2h0LlNQSEVSRV9MSUdIVF9QT1NfT0ZGU0VUICsgVUJPRm9yd2FyZExpZ2h0Lk1BWF9TUEhFUkVfTElHSFRTICogNDtcclxuICAgIHB1YmxpYyBzdGF0aWMgU1BIRVJFX0xJR0hUX0NPTE9SX09GRlNFVDogbnVtYmVyID0gVUJPRm9yd2FyZExpZ2h0LlNQSEVSRV9MSUdIVF9TSVpFX1JBTkdFX09GRlNFVCArIFVCT0ZvcndhcmRMaWdodC5NQVhfU1BIRVJFX0xJR0hUUyAqIDQ7XHJcbiAgICBwdWJsaWMgc3RhdGljIFNQT1RfTElHSFRfUE9TX09GRlNFVDogbnVtYmVyID0gVUJPRm9yd2FyZExpZ2h0LlNQSEVSRV9MSUdIVF9DT0xPUl9PRkZTRVQgKyBVQk9Gb3J3YXJkTGlnaHQuTUFYX1NQT1RfTElHSFRTICogNDtcclxuICAgIHB1YmxpYyBzdGF0aWMgU1BPVF9MSUdIVF9TSVpFX1JBTkdFX0FOR0xFX09GRlNFVDogbnVtYmVyID0gVUJPRm9yd2FyZExpZ2h0LlNQT1RfTElHSFRfUE9TX09GRlNFVCArIFVCT0ZvcndhcmRMaWdodC5NQVhfU1BPVF9MSUdIVFMgKiA0O1xyXG4gICAgcHVibGljIHN0YXRpYyBTUE9UX0xJR0hUX0RJUl9PRkZTRVQ6IG51bWJlciA9IFVCT0ZvcndhcmRMaWdodC5TUE9UX0xJR0hUX1NJWkVfUkFOR0VfQU5HTEVfT0ZGU0VUICsgVUJPRm9yd2FyZExpZ2h0Lk1BWF9TUE9UX0xJR0hUUyAqIDQ7XHJcbiAgICBwdWJsaWMgc3RhdGljIFNQT1RfTElHSFRfQ09MT1JfT0ZGU0VUOiBudW1iZXIgPSBVQk9Gb3J3YXJkTGlnaHQuU1BPVF9MSUdIVF9ESVJfT0ZGU0VUICsgVUJPRm9yd2FyZExpZ2h0Lk1BWF9TUE9UX0xJR0hUUyAqIDQ7XHJcbiAgICBwdWJsaWMgc3RhdGljIENPVU5UOiBudW1iZXIgPSBVQk9Gb3J3YXJkTGlnaHQuU1BPVF9MSUdIVF9DT0xPUl9PRkZTRVQgKyBVQk9Gb3J3YXJkTGlnaHQuTUFYX1NQT1RfTElHSFRTICogNDtcclxuICAgIHB1YmxpYyBzdGF0aWMgU0laRTogbnVtYmVyID0gVUJPRm9yd2FyZExpZ2h0LkNPVU5UICogNDtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIEJMT0NLOiBHRlhVbmlmb3JtQmxvY2sgPSB7XHJcbiAgICAgICAgYmluZGluZzogVW5pZm9ybUJpbmRpbmcuVUJPX0ZPUldBUkRfTElHSFRTLCBuYW1lOiAnQ0NGb3J3YXJkTGlnaHQnLCBtZW1iZXJzOiBbXHJcbiAgICAgICAgICAgIHsgbmFtZTogJ2NjX3NwaGVyZUxpdFBvcycsIHR5cGU6IEdGWFR5cGUuRkxPQVQ0LCBjb3VudDogVUJPRm9yd2FyZExpZ2h0Lk1BWF9TUEhFUkVfTElHSFRTIH0sXHJcbiAgICAgICAgICAgIHsgbmFtZTogJ2NjX3NwaGVyZUxpdFNpemVSYW5nZScsIHR5cGU6IEdGWFR5cGUuRkxPQVQ0LCBjb3VudDogVUJPRm9yd2FyZExpZ2h0Lk1BWF9TUEhFUkVfTElHSFRTIH0sXHJcbiAgICAgICAgICAgIHsgbmFtZTogJ2NjX3NwaGVyZUxpdENvbG9yJywgdHlwZTogR0ZYVHlwZS5GTE9BVDQsIGNvdW50OiBVQk9Gb3J3YXJkTGlnaHQuTUFYX1NQSEVSRV9MSUdIVFMgfSxcclxuICAgICAgICAgICAgeyBuYW1lOiAnY2Nfc3BvdExpdFBvcycsIHR5cGU6IEdGWFR5cGUuRkxPQVQ0LCBjb3VudDogVUJPRm9yd2FyZExpZ2h0Lk1BWF9TUE9UX0xJR0hUUyB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6ICdjY19zcG90TGl0U2l6ZVJhbmdlQW5nbGUnLCB0eXBlOiBHRlhUeXBlLkZMT0FUNCwgY291bnQ6IFVCT0ZvcndhcmRMaWdodC5NQVhfU1BPVF9MSUdIVFMgfSxcclxuICAgICAgICAgICAgeyBuYW1lOiAnY2Nfc3BvdExpdERpcicsIHR5cGU6IEdGWFR5cGUuRkxPQVQ0LCBjb3VudDogVUJPRm9yd2FyZExpZ2h0Lk1BWF9TUE9UX0xJR0hUUyB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6ICdjY19zcG90TGl0Q29sb3InLCB0eXBlOiBHRlhUeXBlLkZMT0FUNCwgY291bnQ6IFVCT0ZvcndhcmRMaWdodC5NQVhfU1BPVF9MSUdIVFMgfSxcclxuICAgICAgICBdLFxyXG4gICAgfTtcclxuXHJcbiAgICBwdWJsaWMgdmlldzogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShVQk9Gb3J3YXJkTGlnaHQuQ09VTlQpO1xyXG59XHJcbmxvY2FsQmluZGluZ3NEZXNjLnNldChVQk9Gb3J3YXJkTGlnaHQuQkxPQ0submFtZSwge1xyXG4gICAgdHlwZTogR0ZYQmluZGluZ1R5cGUuVU5JRk9STV9CVUZGRVIsXHJcbiAgICBibG9ja0luZm86IFVCT0ZvcndhcmRMaWdodC5CTE9DSyxcclxufSk7XHJcblxyXG4vLyBUaGUgYWN0dWFsIHVuaWZvcm0gdmVjdG9ycyB1c2VkIGlzIEpvaW50VW5pZm9ybUNhcGFjaXR5ICogMy5cclxuLy8gV2UgdGhpbmsgdGhpcyBpcyBhIHJlYXNvbmFibGUgZGVmYXVsdCBjYXBhY2l0eSBjb25zaWRlcmluZyBNQVhfVkVSVEVYX1VOSUZPUk1fVkVDVE9SUyBpbiBXZWJHTCBzcGVjIGlzIGp1c3QgMTI4LlxyXG4vLyBTa2lubmluZyBtb2RlbHMgd2l0aCBudW1iZXIgb2YgYm9uZXMgbW9yZSB0aGFuIHRoaXMgY2FwYWNpdHkgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IHN3aXRjaGVkIHRvIHRleHR1cmUgc2tpbm5pbmcuXHJcbi8vIEJ1dCBzdGlsbCwgeW91IGNhbiB0d2VhayB0aGlzIGZvciB5b3VyIG93biBuZWVkIGJ5IGNoYW5naW5nIHRoZSBudW1iZXIgYmVsb3dcclxuLy8gYW5kIHRoZSBKT0lOVF9VTklGT1JNX0NBUEFDSVRZIG1hY3JvIGluIGNjLXNraW5uaW5nIHNoYWRlciBoZWFkZXIuXHJcbmV4cG9ydCBjb25zdCBKT0lOVF9VTklGT1JNX0NBUEFDSVRZID0gMzA7XHJcblxyXG4vKipcclxuICogQGVuIFRoZSB1bmlmb3JtIGJ1ZmZlciBvYmplY3QgZm9yIHNraW5uaW5nIHRleHR1cmVcclxuICogQHpoIOmqqOmqvOi0tOWbviBVQk/jgIJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBVQk9Ta2lubmluZ1RleHR1cmUge1xyXG4gICAgcHVibGljIHN0YXRpYyBKT0lOVFNfVEVYVFVSRV9JTkZPX09GRlNFVDogbnVtYmVyID0gMDtcclxuICAgIHB1YmxpYyBzdGF0aWMgQ09VTlQ6IG51bWJlciA9IFVCT1NraW5uaW5nVGV4dHVyZS5KT0lOVFNfVEVYVFVSRV9JTkZPX09GRlNFVCArIDQ7XHJcbiAgICBwdWJsaWMgc3RhdGljIFNJWkU6IG51bWJlciA9IFVCT1NraW5uaW5nVGV4dHVyZS5DT1VOVCAqIDQ7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBCTE9DSzogR0ZYVW5pZm9ybUJsb2NrID0ge1xyXG4gICAgICAgIGJpbmRpbmc6IFVuaWZvcm1CaW5kaW5nLlVCT19TS0lOTklOR19URVhUVVJFLCBuYW1lOiAnQ0NTa2lubmluZ1RleHR1cmUnLCBtZW1iZXJzOiBbXHJcbiAgICAgICAgICAgIHsgbmFtZTogJ2NjX2pvaW50VGV4dHVyZUluZm8nLCB0eXBlOiBHRlhUeXBlLkZMT0FUNCwgY291bnQ6IDEgfSxcclxuICAgICAgICBdLFxyXG4gICAgfTtcclxufVxyXG5sb2NhbEJpbmRpbmdzRGVzYy5zZXQoVUJPU2tpbm5pbmdUZXh0dXJlLkJMT0NLLm5hbWUsIHtcclxuICAgIHR5cGU6IEdGWEJpbmRpbmdUeXBlLlVOSUZPUk1fQlVGRkVSLFxyXG4gICAgYmxvY2tJbmZvOiBVQk9Ta2lubmluZ1RleHR1cmUuQkxPQ0ssXHJcbn0pO1xyXG5leHBvcnQgY2xhc3MgVUJPU2tpbm5pbmdBbmltYXRpb24ge1xyXG4gICAgcHVibGljIHN0YXRpYyBKT0lOVFNfQU5JTV9JTkZPX09GRlNFVDogbnVtYmVyID0gMDtcclxuICAgIHB1YmxpYyBzdGF0aWMgQ09VTlQ6IG51bWJlciA9IFVCT1NraW5uaW5nQW5pbWF0aW9uLkpPSU5UU19BTklNX0lORk9fT0ZGU0VUICsgNDtcclxuICAgIHB1YmxpYyBzdGF0aWMgU0laRTogbnVtYmVyID0gVUJPU2tpbm5pbmdBbmltYXRpb24uQ09VTlQgKiA0O1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgQkxPQ0s6IEdGWFVuaWZvcm1CbG9jayA9IHtcclxuICAgICAgICBiaW5kaW5nOiBVbmlmb3JtQmluZGluZy5VQk9fU0tJTk5JTkdfQU5JTUFUSU9OLCBuYW1lOiAnQ0NTa2lubmluZ0FuaW1hdGlvbicsIG1lbWJlcnM6IFtcclxuICAgICAgICAgICAgeyBuYW1lOiAnY2Nfam9pbnRBbmltSW5mbycsIHR5cGU6IEdGWFR5cGUuRkxPQVQ0LCBjb3VudDogMSB9LFxyXG4gICAgICAgIF0sXHJcbiAgICB9O1xyXG59XHJcbmxvY2FsQmluZGluZ3NEZXNjLnNldChVQk9Ta2lubmluZ0FuaW1hdGlvbi5CTE9DSy5uYW1lLCB7XHJcbiAgICB0eXBlOiBHRlhCaW5kaW5nVHlwZS5VTklGT1JNX0JVRkZFUixcclxuICAgIGJsb2NrSW5mbzogVUJPU2tpbm5pbmdBbmltYXRpb24uQkxPQ0ssXHJcbn0pO1xyXG5leHBvcnQgY29uc3QgSU5TVF9KT0lOVF9BTklNX0lORk8gPSAnYV9qb2ludEFuaW1JbmZvJztcclxuZXhwb3J0IGNsYXNzIFVCT1NraW5uaW5nIHtcclxuICAgIHB1YmxpYyBzdGF0aWMgSk9JTlRTX09GRlNFVDogbnVtYmVyID0gMDtcclxuICAgIHB1YmxpYyBzdGF0aWMgQ09VTlQ6IG51bWJlciA9IFVCT1NraW5uaW5nLkpPSU5UU19PRkZTRVQgKyBKT0lOVF9VTklGT1JNX0NBUEFDSVRZICogMTI7XHJcbiAgICBwdWJsaWMgc3RhdGljIFNJWkU6IG51bWJlciA9IFVCT1NraW5uaW5nLkNPVU5UICogNDtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIEJMT0NLOiBHRlhVbmlmb3JtQmxvY2sgPSB7XHJcbiAgICAgICAgYmluZGluZzogVW5pZm9ybUJpbmRpbmcuVUJPX1NLSU5OSU5HX1RFWFRVUkUsIG5hbWU6ICdDQ1NraW5uaW5nJywgbWVtYmVyczogW1xyXG4gICAgICAgICAgICB7IG5hbWU6ICdjY19qb2ludHMnLCB0eXBlOiBHRlhUeXBlLkZMT0FUNCwgY291bnQ6IEpPSU5UX1VOSUZPUk1fQ0FQQUNJVFkgKiAzIH0sXHJcbiAgICAgICAgXSxcclxuICAgIH07XHJcbn1cclxubG9jYWxCaW5kaW5nc0Rlc2Muc2V0KFVCT1NraW5uaW5nLkJMT0NLLm5hbWUsIHtcclxuICAgIHR5cGU6IEdGWEJpbmRpbmdUeXBlLlVOSUZPUk1fQlVGRkVSLFxyXG4gICAgYmxvY2tJbmZvOiBVQk9Ta2lubmluZy5CTE9DSyxcclxufSk7XHJcblxyXG4vKipcclxuICogQGVuIFRoZSBzYW1wbGVyIGZvciBqb2ludCB0ZXh0dXJlXHJcbiAqIEB6aCDpqqjpqrznurnnkIbph4fmoLflmajjgIJcclxuICovXHJcbmV4cG9ydCBjb25zdCBVbmlmb3JtSm9pbnRUZXh0dXJlOiBHRlhVbmlmb3JtU2FtcGxlciA9IHtcclxuICAgIGJpbmRpbmc6IFVuaWZvcm1CaW5kaW5nLlNBTVBMRVJfSk9JTlRTLCBuYW1lOiAnY2Nfam9pbnRUZXh0dXJlJywgdHlwZTogR0ZYVHlwZS5TQU1QTEVSMkQsIGNvdW50OiAxLFxyXG59O1xyXG5sb2NhbEJpbmRpbmdzRGVzYy5zZXQoVW5pZm9ybUpvaW50VGV4dHVyZS5uYW1lLCB7XHJcbiAgICB0eXBlOiBHRlhCaW5kaW5nVHlwZS5TQU1QTEVSLFxyXG4gICAgc2FtcGxlckluZm86IFVuaWZvcm1Kb2ludFRleHR1cmUsXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBlbiBUaGUgdW5pZm9ybSBidWZmZXIgb2JqZWN0IGZvciBtb3JwaCBzZXR0aW5nXHJcbiAqIEB6aCDlvaLlj5jphY3nva7nmoQgVUJPXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVUJPTW9ycGgge1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBNQVhfTU9SUEhfVEFSR0VUX0NPVU5UID0gNjA7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBPRkZTRVRfT0ZfV0VJR0hUUyA9IDA7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBPRkZTRVRfT0ZfRElTUExBQ0VNRU5UX1RFWFRVUkVfV0lEVEggPSA0ICogVUJPTW9ycGguTUFYX01PUlBIX1RBUkdFVF9DT1VOVDtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IE9GRlNFVF9PRl9ESVNQTEFDRU1FTlRfVEVYVFVSRV9IRUlHSFQgPSBVQk9Nb3JwaC5PRkZTRVRfT0ZfRElTUExBQ0VNRU5UX1RFWFRVUkVfV0lEVEggKyA0O1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgQ09VTlRfQkFTRV80X0JZVEVTID0gNCAqIE1hdGguY2VpbChVQk9Nb3JwaC5NQVhfTU9SUEhfVEFSR0VUX0NPVU5UIC8gNCkgKyA0O1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgU0laRSA9IFVCT01vcnBoLkNPVU5UX0JBU0VfNF9CWVRFUyAqIDQ7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBCTE9DSzogR0ZYVW5pZm9ybUJsb2NrID0ge1xyXG4gICAgICAgIGJpbmRpbmc6IFVuaWZvcm1CaW5kaW5nLlVCT19NT1JQSCwgbmFtZTogJ0NDTW9ycGgnLCBtZW1iZXJzOiBbXHJcbiAgICAgICAgICAgIHsgbmFtZTogJ2NjX2Rpc3BsYWNlbWVudFdlaWdodHMnLCB0eXBlOiBHRlhUeXBlLkZMT0FUNCwgY291bnQ6IFVCT01vcnBoLk1BWF9NT1JQSF9UQVJHRVRfQ09VTlQgLyA0LCB9LFxyXG4gICAgICAgICAgICB7IG5hbWU6ICdjY19kaXNwbGFjZW1lbnRUZXh0dXJlSW5mbycsIHR5cGU6IEdGWFR5cGUuRkxPQVQ0LCBjb3VudDogMSwgfSxcclxuICAgICAgICBdLFxyXG4gICAgfTtcclxufVxyXG5sb2NhbEJpbmRpbmdzRGVzYy5zZXQoVUJPTW9ycGguQkxPQ0submFtZSwge1xyXG4gICAgdHlwZTogR0ZYQmluZGluZ1R5cGUuVU5JRk9STV9CVUZGRVIsXHJcbiAgICBibG9ja0luZm86IFVCT01vcnBoLkJMT0NLLFxyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBAZW4gVGhlIHNhbXBsZXIgZm9yIG1vcnBoIHRleHR1cmUgb2YgcG9zaXRpb25cclxuICogQHpoIOS9jee9ruW9ouWPmOe6ueeQhumHh+agt+WZqOOAglxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFVuaWZvcm1Qb3NpdGlvbk1vcnBoVGV4dHVyZTogUmVhZG9ubHk8R0ZYVW5pZm9ybVNhbXBsZXI+ID0ge1xyXG4gICAgYmluZGluZzogVW5pZm9ybUJpbmRpbmcuU0FNUExFUl9NT1JQSF9QT1NJVElPTiwgbmFtZTogJ2NjX1Bvc2l0aW9uRGlzcGxhY2VtZW50cycsIHR5cGU6IEdGWFR5cGUuU0FNUExFUjJELCBjb3VudDogMSxcclxufTtcclxubG9jYWxCaW5kaW5nc0Rlc2Muc2V0KFVuaWZvcm1Qb3NpdGlvbk1vcnBoVGV4dHVyZS5uYW1lLCB7XHJcbiAgICB0eXBlOiBHRlhCaW5kaW5nVHlwZS5TQU1QTEVSLFxyXG4gICAgc2FtcGxlckluZm86IFVuaWZvcm1Qb3NpdGlvbk1vcnBoVGV4dHVyZSxcclxufSk7XHJcblxyXG4vKipcclxuICogQGVuIFRoZSBzYW1wbGVyIGZvciBtb3JwaCB0ZXh0dXJlIG9mIG5vcm1hbFxyXG4gKiBAemgg5rOV57q/5b2i5Y+Y57q555CG6YeH5qC35Zmo44CCXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgVW5pZm9ybU5vcm1hbE1vcnBoVGV4dHVyZTogUmVhZG9ubHk8R0ZYVW5pZm9ybVNhbXBsZXI+ID0ge1xyXG4gICAgYmluZGluZzogVW5pZm9ybUJpbmRpbmcuU0FNUExFUl9NT1JQSF9OT1JNQUwsIG5hbWU6ICdjY19Ob3JtYWxEaXNwbGFjZW1lbnRzJywgdHlwZTogR0ZYVHlwZS5TQU1QTEVSMkQsIGNvdW50OiAxLFxyXG59O1xyXG5sb2NhbEJpbmRpbmdzRGVzYy5zZXQoVW5pZm9ybU5vcm1hbE1vcnBoVGV4dHVyZS5uYW1lLCB7XHJcbiAgICB0eXBlOiBHRlhCaW5kaW5nVHlwZS5TQU1QTEVSLFxyXG4gICAgc2FtcGxlckluZm86IFVuaWZvcm1Ob3JtYWxNb3JwaFRleHR1cmUsXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIEBlbiBUaGUgc2FtcGxlciBmb3IgbGlnaHQgbWFwIHRleHR1cmVcclxuICogQHpoIOWFieeFp+Wbvue6ueeQhumHh+agt+WZqOOAglxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFVuaWZvcm1MaWdodGluZ01hcFNhbXBsZXI6IFJlYWRvbmx5PEdGWFVuaWZvcm1TYW1wbGVyPiA9IHtcclxuICAgIGJpbmRpbmc6IFVuaWZvcm1CaW5kaW5nLlNBTVBMRVJfTElHSFRJTkdfTUFQLCBuYW1lOiAnY2NfbGlnaHRpbmdNYXAnLCB0eXBlOiBHRlhUeXBlLlNBTVBMRVIyRCwgY291bnQ6IDEsXHJcbn07XHJcbmxvY2FsQmluZGluZ3NEZXNjLnNldChVbmlmb3JtTGlnaHRpbmdNYXBTYW1wbGVyLm5hbWUsIHtcclxuICAgIHR5cGU6IEdGWEJpbmRpbmdUeXBlLlNBTVBMRVIsXHJcbiAgICBzYW1wbGVySW5mbzogVW5pZm9ybUxpZ2h0aW5nTWFwU2FtcGxlcixcclxufSk7XHJcblxyXG4vKipcclxuICogQGVuIFRoZSBzYW1wbGVyIGZvciBtb3JwaCB0ZXh0dXJlIG9mIHRhbmdlbnRcclxuICogQHpoIOWIh+e6v+W9ouWPmOe6ueeQhumHh+agt+WZqOOAglxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFVuaWZvcm1UYW5nZW50TW9ycGhUZXh0dXJlOiBSZWFkb25seTxHRlhVbmlmb3JtU2FtcGxlcj4gPSB7XHJcbiAgICBiaW5kaW5nOiBVbmlmb3JtQmluZGluZy5TQU1QTEVSX01PUlBIX1RBTkdFTlQsIG5hbWU6ICdjY19UYW5nZW50RGlzcGxhY2VtZW50cycsIHR5cGU6IEdGWFR5cGUuU0FNUExFUjJELCBjb3VudDogMSxcclxufTtcclxubG9jYWxCaW5kaW5nc0Rlc2Muc2V0KFVuaWZvcm1UYW5nZW50TW9ycGhUZXh0dXJlLm5hbWUsIHtcclxuICAgIHR5cGU6IEdGWEJpbmRpbmdUeXBlLlNBTVBMRVIsXHJcbiAgICBzYW1wbGVySW5mbzogVW5pZm9ybVRhbmdlbnRNb3JwaFRleHR1cmUsXHJcbn0pO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJSW50ZXJuYWxCaW5kaW5nRGVzYyB7XHJcbiAgICB0eXBlOiBHRlhCaW5kaW5nVHlwZTtcclxuICAgIGJsb2NrSW5mbz86IEdGWFVuaWZvcm1CbG9jaztcclxuICAgIHNhbXBsZXJJbmZvPzogR0ZYVW5pZm9ybVNhbXBsZXI7XHJcbiAgICBkZWZhdWx0VmFsdWU/OiBBcnJheUJ1ZmZlciB8IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJSW50ZXJuYWxCaW5kaW5nSW5zdCBleHRlbmRzIElJbnRlcm5hbEJpbmRpbmdEZXNjIHtcclxuICAgIGJ1ZmZlcj86IEdGWEJ1ZmZlcjtcclxuICAgIHNhbXBsZXI/OiBHRlhTYW1wbGVyO1xyXG4gICAgdGV4dHVyZVZpZXc/OiBHRlhUZXh0dXJlVmlldztcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IENBTUVSQV9ERUZBVUxUX01BU0sgPSBMYXllcnMubWFrZU1hc2tFeGNsdWRlKFtMYXllcnMuQml0TWFzay5VSV8yRCwgTGF5ZXJzLkJpdE1hc2suR0laTU9TLCBMYXllcnMuQml0TWFzay5FRElUT1IsXHJcbiAgICBMYXllcnMuQml0TWFzay5TQ0VORV9HSVpNTywgTGF5ZXJzLkJpdE1hc2suUFJPRklMRVJdKTtcclxuXHJcbmV4cG9ydCBjb25zdCBDQU1FUkFfRURJVE9SX01BU0sgPSBMYXllcnMubWFrZU1hc2tFeGNsdWRlKFtMYXllcnMuQml0TWFzay5VSV8yRCwgTGF5ZXJzLkJpdE1hc2suUFJPRklMRVJdKTtcclxuXHJcbmV4cG9ydCBjb25zdCBNT0RFTF9BTFdBWVNfTUFTSyA9IExheWVycy5FbnVtLkFMTDtcclxuIl19