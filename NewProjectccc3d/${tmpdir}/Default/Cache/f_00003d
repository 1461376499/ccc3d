(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../3d/builtin/init.js", "../../geometry/index.js", "../../gfx/define.js", "../../gfx/device.js", "../../math/index.js", "../../memop/index.js", "../../pipeline/define.js", "../../scene-graph/layers.js", "./submodel.js", "../core/sampler-lib.js", "../core/program-lib.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../3d/builtin/init.js"), require("../../geometry/index.js"), require("../../gfx/define.js"), require("../../gfx/device.js"), require("../../math/index.js"), require("../../memop/index.js"), require("../../pipeline/define.js"), require("../../scene-graph/layers.js"), require("./submodel.js"), require("../core/sampler-lib.js"), require("../core/program-lib.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.init, global.index, global.define, global.device, global.index, global.index, global.define, global.layers, global.submodel, global.samplerLib, global.programLib);
    global.model = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _init, _index, _define, _device, _index2, _index3, _define2, _layers, _submodel, _samplerLib, _programLib) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Model = _exports.ModelType = void 0;

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var m4_1 = new _index2.Mat4();

  var _subMeshPool = new _index3.Pool(function () {
    return new _submodel.SubModel();
  }, 32);

  var ModelType;
  _exports.ModelType = ModelType;

  (function (ModelType) {
    ModelType[ModelType["DEFAULT"] = 0] = "DEFAULT";
    ModelType[ModelType["SKINNING"] = 1] = "SKINNING";
    ModelType[ModelType["BAKED_SKINNING"] = 2] = "BAKED_SKINNING";
    ModelType[ModelType["UI_BATCH"] = 3] = "UI_BATCH";
    ModelType[ModelType["PARTICLE_BATCH"] = 4] = "PARTICLE_BATCH";
    ModelType[ModelType["LINE"] = 5] = "LINE";
  })(ModelType || (_exports.ModelType = ModelType = {}));

  function uploadMat4AsVec4x3(mat, v1, v2, v3) {
    v1[0] = mat.m00;
    v1[1] = mat.m01;
    v1[2] = mat.m02;
    v1[3] = mat.m12;
    v2[0] = mat.m04;
    v2[1] = mat.m05;
    v2[2] = mat.m06;
    v2[3] = mat.m13;
    v3[0] = mat.m08;
    v3[1] = mat.m09;
    v3[2] = mat.m10;
    v3[3] = mat.m14;
  }
  /**
   * A representation of a model
   */


  var Model = /*#__PURE__*/function () {
    _createClass(Model, [{
      key: "subModels",
      get: function get() {
        return this._subModels;
      }
    }, {
      key: "subModelNum",
      get: function get() {
        return this._subModels.length;
      }
    }, {
      key: "inited",
      get: function get() {
        return this._inited;
      }
    }, {
      key: "worldBounds",
      get: function get() {
        return this._worldBounds;
      }
    }, {
      key: "modelBounds",
      get: function get() {
        return this._modelBounds;
      }
    }, {
      key: "lightBuffer",
      get: function get() {
        return this._lightBuffer;
      }
    }, {
      key: "localBuffer",
      get: function get() {
        return this._localBuffer;
      }
    }, {
      key: "updateStamp",
      get: function get() {
        return this._updateStamp;
      }
    }, {
      key: "isInstancingEnabled",
      get: function get() {
        return this._instMatWorldIdx >= 0;
      }
    }]);

    /**
     * Setup a default empty model
     */
    function Model() {
      _classCallCheck(this, Model);

      this.type = ModelType.DEFAULT;
      this.scene = null;
      this.node = null;
      this.transform = null;
      this.enabled = true;
      this.visFlags = _layers.Layers.Enum.NONE;
      this.castShadow = false;
      this.isDynamicBatching = false;
      this.instancedAttributes = {
        buffer: null,
        list: []
      };
      this._device = void 0;
      this._worldBounds = null;
      this._modelBounds = null;
      this._subModels = [];
      this._implantPSOs = [];
      this._matPSORecord = new Map();
      this._matRefCount = new Map();
      this._localData = new Float32Array(_define2.UBOLocal.COUNT);
      this._localBuffer = null;
      this._lightBuffer = null;
      this._inited = false;
      this._updateStamp = -1;
      this._transformUpdated = true;
      this._instMatWorldIdx = -1;
      this._device = cc.director.root.device;
    }

    _createClass(Model, [{
      key: "initialize",
      value: function initialize(node) {
        this.transform = this.node = node;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        var _iterator = _createForOfIteratorHelper(this._subModels),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var subModel = _step.value;
            subModel.destroy();

            _subMeshPool.free(subModel);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        if (this._localBuffer) {
          this._localBuffer.destroy();

          this._localBuffer = null;
        }

        if (this._lightBuffer) {
          this._lightBuffer.destroy();

          this._lightBuffer = null;
        }

        this._worldBounds = null;
        this._modelBounds = null;
        this._subModels.length = 0;

        this._matPSORecord.clear();

        this._matRefCount.clear();

        this._inited = false;
        this._transformUpdated = true;
        this.isDynamicBatching = false;
      }
    }, {
      key: "attachToScene",
      value: function attachToScene(scene) {
        this.scene = scene;
      }
    }, {
      key: "detachFromScene",
      value: function detachFromScene() {
        this.scene = null;
      }
    }, {
      key: "getSubModel",
      value: function getSubModel(idx) {
        return this._subModels[idx];
      }
    }, {
      key: "updateTransform",
      value: function updateTransform(stamp) {
        var node = this.transform; // @ts-ignore TS2445

        if (node.hasChangedFlags || node._dirtyFlags) {
          node.updateWorldTransform();
          this._transformUpdated = true;

          if (this._modelBounds && this._worldBounds) {
            // @ts-ignore TS2445
            this._modelBounds.transform(node._mat, node._pos, node._rot, node._scale, this._worldBounds);
          }
        }
      }
    }, {
      key: "updateLightingmap",
      value: function updateLightingmap(tex, uvParam) {
        _index2.Vec4.toArray(this._localData, uvParam, _define2.UBOLocal.LIGHTINGMAP_UVPARAM);

        if (tex === null) {
          tex = _init.builtinResMgr.get('empty-texture');
        }

        var texture = tex;
        var textureView = texture.getGFXTextureView();

        if (textureView !== null) {
          var sampler;

          if (tex.mipmaps.length > 1) {
            var samplerHash = (0, _samplerLib.genSamplerHash)([_define.GFXFilter.LINEAR, _define.GFXFilter.LINEAR, _define.GFXFilter.LINEAR, _define.GFXAddress.CLAMP, _define.GFXAddress.CLAMP, _define.GFXAddress.CLAMP]);
            sampler = _samplerLib.samplerLib.getSampler(this._device, samplerHash);
          } else {
            var _samplerHash = (0, _samplerLib.genSamplerHash)([_define.GFXFilter.NONE, _define.GFXFilter.NONE, _define.GFXFilter.NONE, _define.GFXAddress.CLAMP, _define.GFXAddress.CLAMP, _define.GFXAddress.CLAMP]);

            sampler = _samplerLib.samplerLib.getSampler(this._device, _samplerHash);
          }

          var _iterator2 = _createForOfIteratorHelper(this._subModels),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var sub = _step2.value;

              if (sub.psos === null) {
                continue;
              }

              for (var i = 0; i < sub.psos.length; i++) {
                sub.psos[i].pipelineLayout.layouts[0].bindTextureView(_define2.UniformLightingMapSampler.binding, textureView);
                sub.psos[i].pipelineLayout.layouts[0].bindSampler(_define2.UniformLightingMapSampler.binding, sampler);
                sub.psos[i].pipelineLayout.layouts[0].update();
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      }
    }, {
      key: "updateUBOs",
      value: function updateUBOs(stamp) {
        this._matPSORecord.forEach(this._updatePass, this);

        this._updateStamp = stamp;

        if (!this._transformUpdated) {
          return;
        }

        this._transformUpdated = false; // @ts-ignore

        var worldMatrix = this.transform._mat;
        var idx = this._instMatWorldIdx;

        if (idx >= 0) {
          var attrs = this.instancedAttributes.list;
          uploadMat4AsVec4x3(worldMatrix, attrs[idx].view, attrs[idx + 1].view, attrs[idx + 2].view);
        } else {
          _index2.Mat4.toArray(this._localData, worldMatrix, _define2.UBOLocal.MAT_WORLD_OFFSET);

          _index2.Mat4.inverseTranspose(m4_1, worldMatrix);

          _index2.Mat4.toArray(this._localData, m4_1, _define2.UBOLocal.MAT_WORLD_IT_OFFSET);

          this._localBuffer.update(this._localData);
        }
      }
      /**
       * Create the bounding shape of this model
       * @param minPos the min position of the model
       * @param maxPos the max position of the model
       */

    }, {
      key: "createBoundingShape",
      value: function createBoundingShape(minPos, maxPos) {
        if (!minPos || !maxPos) {
          return;
        }

        this._modelBounds = _index.aabb.fromPoints(_index.aabb.create(), minPos, maxPos);
        this._worldBounds = _index.aabb.clone(this._modelBounds);
      }
    }, {
      key: "initSubModel",
      value: function initSubModel(idx, subMeshData, mat) {
        this.initLocalBindings(mat);

        if (this._subModels[idx] == null) {
          this._subModels[idx] = _subMeshPool.alloc();
        } else {
          var oldMat = this._subModels[idx].material;

          this._subModels[idx].destroy();

          this.releasePSO(oldMat);
        }

        this.allocatePSO(mat, idx);

        this._subModels[idx].initialize(subMeshData, mat, this._matPSORecord.get(mat));

        this._inited = true;
      }
    }, {
      key: "setSubModelMesh",
      value: function setSubModelMesh(idx, subMeshData) {
        if (this._subModels[idx] == null) {
          this._subModels[idx] = _subMeshPool.alloc();
        }

        this._subModels[idx].subMeshData = subMeshData;
      }
    }, {
      key: "setSubModelMaterial",
      value: function setSubModelMaterial(idx, mat) {
        this.initLocalBindings(mat);

        if (!this._subModels[idx]) {
          return;
        }

        if (this._subModels[idx].material === mat) {
          if (mat) {
            this.destroyPipelineStates(mat, this._matPSORecord.get(mat));

            this._matPSORecord.set(mat, this.createPipelineStates(mat, idx));
          }
        } else {
          if (this._subModels[idx].material) {
            this.releasePSO(this._subModels[idx].material);
          }

          if (mat) {
            this.allocatePSO(mat, idx);
          }
        }

        this._subModels[idx].psos = mat ? this._matPSORecord.get(mat) || null : null;
        this._subModels[idx].material = mat;
      }
    }, {
      key: "onGlobalPipelineStateChanged",
      value: function onGlobalPipelineStateChanged() {
        var _this = this;

        var subModels = this._subModels;

        this._matPSORecord.forEach(function (psos, mat) {
          var i = 0;

          for (; i < subModels.length; i++) {
            if (subModels[i].material === mat) {
              break;
            }
          }

          if (i >= subModels.length) {
            return;
          }

          for (var j = 0; j < mat.passes.length; j++) {
            var pass = mat.passes[j];
            pass.destroyPipelineState(psos[j]);
            pass.beginChangeStatesSilently();
            pass.tryCompile(); // force update shaders

            pass.endChangeStatesSilently();
          }

          var newPSOs = _this.createPipelineStates(mat, i);

          psos.length = newPSOs.length;

          for (var _j = 0; _j < newPSOs.length; _j++) {
            psos[_j] = newPSOs[_j];
          }
        });

        for (var i = 0; i < subModels.length; i++) {
          subModels[i].updateCommandBuffer();
        }
      }
    }, {
      key: "insertImplantPSO",
      value: function insertImplantPSO(pso) {
        this._implantPSOs.push(pso);
      }
    }, {
      key: "removeImplantPSO",
      value: function removeImplantPSO(pso) {
        var idx = this._implantPSOs.indexOf(pso);

        if (idx >= 0) {
          this._implantPSOs.splice(idx, 1);
        }
      }
    }, {
      key: "createPipelineStates",
      value: function createPipelineStates(mat, subModelIdx) {
        var ret = [];

        for (var i = 0; i < mat.passes.length; i++) {
          var pass = mat.passes[i];
          ret[i] = this.createPipelineState(pass, subModelIdx);
        }

        if (ret[0]) {
          this.updateInstancedAttributeList(ret[0], mat.passes[0]);
        }

        return ret;
      }
    }, {
      key: "destroyPipelineStates",
      value: function destroyPipelineStates(mat, pso) {
        for (var i = 0; i < mat.passes.length; i++) {
          var pass = mat.passes[i];
          pass.destroyPipelineState(pso[i]);
        }
      }
    }, {
      key: "createPipelineState",
      value: function createPipelineState(pass, subModelIdx, patches) {
        var pso = pass.createPipelineState(patches);
        var bindingLayout = pso.pipelineLayout.layouts[0];

        if (this._localBuffer) {
          bindingLayout.bindBuffer(_define2.UBOLocal.BLOCK.binding, this._localBuffer);
        }

        if (this._lightBuffer) {
          bindingLayout.bindBuffer(_define2.UBOForwardLight.BLOCK.binding, this._lightBuffer);
        }

        return pso;
      } // for now no submodel level instancing attributes

    }, {
      key: "updateInstancedAttributeList",
      value: function updateInstancedAttributeList(pso, pass) {
        if (!pass.device.hasFeature(_device.GFXFeature.INSTANCED_ARRAYS)) {
          return;
        }

        var attributes = pso.inputState.attributes;
        var size = 0;

        for (var j = 0; j < attributes.length; j++) {
          var attribute = attributes[j];

          if (!attribute.isInstanced) {
            continue;
          }

          size += _define.GFXFormatInfos[attribute.format].size;
        }

        var attrs = this.instancedAttributes;
        attrs.buffer = new Uint8Array(size);
        attrs.list.length = 0;
        var offset = 0;
        var buffer = attrs.buffer.buffer;

        for (var _j2 = 0; _j2 < attributes.length; _j2++) {
          var _attribute = attributes[_j2];

          if (!_attribute.isInstanced) {
            continue;
          }

          var format = _attribute.format;
          var info = _define.GFXFormatInfos[format];
          var view = new ((0, _define.getTypedArrayConstructor)(info))(buffer, offset, info.count);
          var isNormalized = _attribute.isNormalized;
          offset += info.size;
          attrs.list.push({
            name: _attribute.name,
            format: format,
            isNormalized: isNormalized,
            view: view
          });
        }

        if (pass.instancedBuffer) {
          pass.instancedBuffer.destroy();
        } // instancing IA changed


        this._instMatWorldIdx = this.getInstancedAttributeIndex(_define2.INST_MAT_WORLD);
        this._transformUpdated = true;
      }
    }, {
      key: "getInstancedAttributeIndex",
      value: function getInstancedAttributeIndex(name) {
        var list = this.instancedAttributes.list;

        for (var i = 0; i < list.length; i++) {
          if (list[i].name === name) {
            return i;
          }
        }

        return -1;
      }
    }, {
      key: "initLocalBindings",
      value: function initLocalBindings(mat) {
        if (!this._localBuffer) {
          this._localBuffer = this._device.createBuffer({
            usage: _define.GFXBufferUsageBit.UNIFORM | _define.GFXBufferUsageBit.TRANSFER_DST,
            memUsage: _define.GFXMemoryUsageBit.HOST | _define.GFXMemoryUsageBit.DEVICE,
            size: _define2.UBOLocal.SIZE,
            stride: _define2.UBOLocal.SIZE
          });
        }

        if (!mat) {
          return;
        }

        var hasForwardLight = false;

        var _iterator3 = _createForOfIteratorHelper(mat.passes),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var p = _step3.value;

            var blocks = _programLib.programLib.getTemplate(p.program).builtins.locals.blocks;

            if (blocks.find(function (b) {
              return b.name === _define2.UBOForwardLight.BLOCK.name;
            })) {
              hasForwardLight = true;
              break;
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        if (hasForwardLight && !this._lightBuffer) {
          this._lightBuffer = this._device.createBuffer({
            usage: _define.GFXBufferUsageBit.UNIFORM | _define.GFXBufferUsageBit.TRANSFER_DST,
            memUsage: _define.GFXMemoryUsageBit.HOST | _define.GFXMemoryUsageBit.DEVICE,
            size: _define2.UBOForwardLight.SIZE,
            stride: _define2.UBOForwardLight.SIZE
          });
        }
      }
    }, {
      key: "_updatePass",
      value: function _updatePass(psos, mat) {
        for (var i = 0; i < mat.passes.length; i++) {
          mat.passes[i].update();
        }

        for (var _i = 0; _i < psos.length; _i++) {
          psos[_i].pipelineLayout.layouts[0].update();
        }
      }
    }, {
      key: "allocatePSO",
      value: function allocatePSO(mat, subModelIdx) {
        if (this._matRefCount.get(mat) == null) {
          this._matRefCount.set(mat, 1);

          this._matPSORecord.set(mat, this.createPipelineStates(mat, subModelIdx));
        } else {
          this._matRefCount.set(mat, this._matRefCount.get(mat) + 1);
        }
      }
    }, {
      key: "releasePSO",
      value: function releasePSO(mat) {
        this._matRefCount.set(mat, this._matRefCount.get(mat) - 1);

        if (this._matRefCount.get(mat) === 0) {
          this.destroyPipelineStates(mat, this._matPSORecord.get(mat));

          this._matPSORecord["delete"](mat);

          this._matRefCount["delete"](mat);
        }
      }
    }]);

    return Model;
  }();

  _exports.Model = Model;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,