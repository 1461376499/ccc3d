(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../../core/utils/text-utils.js", "../../../core/math/index.js", "../../components/label-component.js", "../../../core/utils/index.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../../core/utils/text-utils.js"), require("../../../core/math/index.js"), require("../../components/label-component.js"), require("../../../core/utils/index.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.textUtils, global.index, global.labelComponent, global.index);
    global.bmfontUtils = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _textUtils, _index, _labelComponent, _index2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.bmfontUtils = _exports.FontAtlas = void 0;

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var FontLetterDefinition = function FontLetterDefinition() {
    _classCallCheck(this, FontLetterDefinition);

    this.u = 0;
    this.v = 0;
    this.width = 0;
    this.height = 0;
    this.offsetX = 0;
    this.offsetY = 0;
    this.textureID = 0;
    this.validDefinition = false;
    this.xAdvance = 0;
  };

  var FontAtlas = /*#__PURE__*/function () {
    function FontAtlas() {
      _classCallCheck(this, FontAtlas);

      this._letterDefinitions = {};
    }

    _createClass(FontAtlas, [{
      key: "addLetterDefinitions",
      value: function addLetterDefinitions(letter, letterDefinition) {
        this._letterDefinitions[letter] = letterDefinition;
      }
    }, {
      key: "cloneLetterDefinition",
      value: function cloneLetterDefinition() {
        var copyLetterDefinitions = {};

        for (var _i = 0, _Object$keys = Object.keys(this._letterDefinitions); _i < _Object$keys.length; _i++) {
          var _key = _Object$keys[_i];
          var value = new FontLetterDefinition();

          _index2.js.mixin(value, this._letterDefinitions[_key]);

          copyLetterDefinitions[_key] = value;
        }

        return copyLetterDefinitions;
      }
    }, {
      key: "assignLetterDefinitions",
      value: function assignLetterDefinitions(letterDefinition) {
        for (var _i2 = 0, _Object$keys2 = Object.keys(this._letterDefinitions); _i2 < _Object$keys2.length; _i2++) {
          var _key2 = _Object$keys2[_i2];
          var newValue = letterDefinition[_key2];
          var oldValue = this._letterDefinitions[_key2];

          _index2.js.mixin(oldValue, newValue);
        }
      }
    }, {
      key: "scaleFontLetterDefinition",
      value: function scaleFontLetterDefinition(scaleFactor) {
        for (var _i3 = 0, _Object$keys3 = Object.keys(this._letterDefinitions); _i3 < _Object$keys3.length; _i3++) {
          var fontDefinition = _Object$keys3[_i3];
          var letterDefinitions = this._letterDefinitions[fontDefinition];
          letterDefinitions.width *= scaleFactor;
          letterDefinitions.height *= scaleFactor;
          letterDefinitions.offsetX *= scaleFactor;
          letterDefinitions.offsetY *= scaleFactor;
          letterDefinitions.xAdvance *= scaleFactor;
        }
      }
    }, {
      key: "getLetterDefinitionForChar",
      value: function getLetterDefinitionForChar(_char) {
        return this._letterDefinitions[_char.charCodeAt(0)];
      }
    }, {
      key: "letterDefinitions",
      get: function get() {
        return this._letterDefinitions;
      }
    }]);

    return FontAtlas;
  }();

  _exports.FontAtlas = FontAtlas;
  cc.FontAtlas = FontAtlas;

  var LetterInfo = function LetterInfo() {
    _classCallCheck(this, LetterInfo);

    this["char"] = '';
    this.valid = true;
    this.positionX = 0;
    this.positionY = 0;
    this.lineIndex = 0;
  };

  var _tmpRect = new _index.Rect();

  var _comp = null;
  var _horizontalKerning = [];
  var _lettersInfo = [];
  var _linesWidth = [];
  var _linesOffsetX = [];

  var _labelDimensions = new _index.Size();

  var _fontAtlas = null;
  var _fntConfig = null;
  var _numberOfLines = 0;
  var _textDesiredHeight = 0;
  var _letterOffsetY = 0;
  var _tailoredTopY = 0;
  var _tailoredBottomY = 0;
  var _bmfontScale = 1.0;
  var _lineBreakWithoutSpaces = false;
  var _spriteFrame = null;
  var _lineSpacing = 0;
  var _string = '';
  var _fontSize = 0;
  var _originFontSize = 0;

  var _contentSize = new _index.Size();

  var _hAlign = 0;
  var _vAlign = 0;
  var _spacingX = 0;
  var _lineHeight = 0;
  var _overflow = 0;
  var _isWrapText = false;
  var _labelWidth = 0;
  var _labelHeight = 0;
  var _maxLineWidth = 0;
  var bmfontUtils = {
    updateRenderData: function updateRenderData(comp) {
      if (!comp.renderData || !comp.renderData.vertDirty) {
        return;
      }

      if (_comp === comp) {
        return;
      }

      _comp = comp;

      this._updateProperties();

      this._updateContent();

      _comp.actualFontSize = _fontSize;

      _comp.node.setContentSize(_contentSize);

      _comp.renderData.vertDirty = _comp.renderData.uvDirty = false;
      _comp = null;

      this._resetProperties();
    },
    _updateFontScale: function _updateFontScale() {
      _bmfontScale = _fontSize / _originFontSize;
    },
    _updateProperties: function _updateProperties() {
      if (!_comp) {
        return;
      }

      var fontAsset = _comp.font;

      if (!fontAsset) {
        return;
      }

      _spriteFrame = fontAsset.spriteFrame;
      _fntConfig = fontAsset.fntConfig;
      _fontAtlas = _comp.fontAtlas;

      if (!_fontAtlas) {
        _fontAtlas = new FontAtlas();
        var fontDict = _fntConfig.fontDefDictionary;

        for (var _i4 = 0, _Object$keys4 = Object.keys(fontDict); _i4 < _Object$keys4.length; _i4++) {
          var fontDef = _Object$keys4[_i4];
          var letterDefinition = new FontLetterDefinition();
          var rect = fontDict[fontDef].rect;
          letterDefinition.offsetX = fontDict[fontDef].xOffset;
          letterDefinition.offsetY = fontDict[fontDef].yOffset;
          letterDefinition.width = rect.width;
          letterDefinition.height = rect.height;
          letterDefinition.u = rect.x;
          letterDefinition.v = rect.y; // FIXME: only one texture supported for now

          letterDefinition.textureID = 0;
          letterDefinition.validDefinition = true;
          letterDefinition.xAdvance = fontDict[fontDef].xAdvance;

          _fontAtlas.addLetterDefinitions(fontDef, letterDefinition);
        }

        _comp.fontAtlas = _fontAtlas;
      }

      _string = _comp.string.toString();
      _fontSize = _comp.fontSize;
      _originFontSize = _fntConfig.fontSize;

      var contentSize = _comp.node.getContentSize();

      _contentSize.width = contentSize.width;
      _contentSize.height = contentSize.height;
      _hAlign = _comp.horizontalAlign;
      _vAlign = _comp.verticalAlign;
      _spacingX = _comp.spacingX;
      _overflow = _comp.overflow;
      _lineHeight = _comp.lineHeight; // should wrap text

      if (_overflow === _labelComponent.Overflow.NONE) {
        _isWrapText = false;
      } else if (_overflow === _labelComponent.Overflow.RESIZE_HEIGHT) {
        _isWrapText = true;
      } else {
        _isWrapText = _comp.enableWrapText;
      }

      this._setupBMFontOverflowMetrics();
    },
    _resetProperties: function _resetProperties() {
      _fontAtlas = null;
      _fntConfig = null;
      _spriteFrame = null;
    },
    _updateContent: function _updateContent() {
      this._updateFontScale();

      this._computeHorizontalKerningForText();

      this._alignText();
    },
    _computeHorizontalKerningForText: function _computeHorizontalKerningForText() {
      var string = _string;
      var stringLen = string.length;
      var kerningDict = _fntConfig.kerningDict;
      var horizontalKerning = _horizontalKerning;
      var prev = -1;

      for (var i = 0; i < stringLen; ++i) {
        var _key3 = string.charCodeAt(i);

        var kerningAmount = kerningDict[prev << 16 | _key3 & 0xffff] || 0;

        if (i < stringLen - 1) {
          horizontalKerning[i] = kerningAmount;
        } else {
          horizontalKerning[i] = 0;
        }

        prev = _key3;
      }
    },
    _multilineTextWrap: function _multilineTextWrap(nextTokenFunc) {
      var textLen = _string.length;
      var lineIndex = 0;
      var nextTokenX = 0;
      var nextTokenY = 0;
      var longestLine = 0;
      var letterRight = 0;
      var highestY = 0;
      var lowestY = 0;
      var letterDef = null;
      var letterPosition = new _index.Vec2();

      this._updateFontScale();

      var letterDefinitions = _fontAtlas.letterDefinitions;

      for (var index = 0; index < textLen;) {
        var character = _string.charAt(index);

        if (character === '\n') {
          _linesWidth.push(letterRight);

          letterRight = 0;
          lineIndex++;
          nextTokenX = 0;
          nextTokenY -= _lineHeight * _bmfontScale + _lineSpacing;

          this._recordPlaceholderInfo(index, character);

          index++;
          continue;
        }

        var tokenLen = nextTokenFunc(_string, index, textLen);
        var tokenHighestY = highestY;
        var tokenLowestY = lowestY;
        var tokenRight = letterRight;
        var nextLetterX = nextTokenX;
        var newLine = false;

        for (var tmp = 0; tmp < tokenLen; ++tmp) {
          var letterIndex = index + tmp;
          character = _string.charAt(letterIndex);

          if (character === '\r') {
            this._recordPlaceholderInfo(letterIndex, character);

            continue;
          }

          letterDef = _fontAtlas && _fontAtlas.getLetterDefinitionForChar(character);

          if (!letterDef) {
            this._recordPlaceholderInfo(letterIndex, character);

            console.log('Can\'t find letter definition in texture atlas ' + _fntConfig.atlasName + ' for letter:' + character);
            continue;
          }

          var letterX = nextLetterX + letterDef.offsetX * _bmfontScale;

          if (_isWrapText && _maxLineWidth > 0 && nextTokenX > 0 && letterX + letterDef.width * _bmfontScale > _maxLineWidth && !(0, _textUtils.isUnicodeSpace)(character)) {
            _linesWidth.push(letterRight);

            letterRight = 0;
            lineIndex++;
            nextTokenX = 0;
            nextTokenY -= _lineHeight * _bmfontScale + _lineSpacing;
            newLine = true;
            break;
          } else {
            letterPosition.x = letterX;
          }

          letterPosition.y = nextTokenY - letterDef.offsetY * _bmfontScale;

          this._recordLetterInfo(letterDefinitions, letterPosition, character, letterIndex, lineIndex);

          if (letterIndex + 1 < _horizontalKerning.length && letterIndex < textLen - 1) {
            nextLetterX += _horizontalKerning[letterIndex + 1];
          }

          nextLetterX += letterDef.xAdvance * _bmfontScale + _spacingX;
          tokenRight = letterPosition.x + letterDef.width * _bmfontScale;

          if (tokenHighestY < letterPosition.y) {
            tokenHighestY = letterPosition.y;
          }

          if (tokenLowestY > letterPosition.y - letterDef.height * _bmfontScale) {
            tokenLowestY = letterPosition.y - letterDef.height * _bmfontScale;
          }
        } // end of for loop


        if (newLine) {
          continue;
        }

        nextTokenX = nextLetterX;
        letterRight = tokenRight;

        if (highestY < tokenHighestY) {
          highestY = tokenHighestY;
        }

        if (lowestY > tokenLowestY) {
          lowestY = tokenLowestY;
        }

        if (longestLine < letterRight) {
          longestLine = letterRight;
        }

        index += tokenLen;
      } // end of for loop


      _linesWidth.push(letterRight);

      _numberOfLines = lineIndex + 1;
      _textDesiredHeight = _numberOfLines * _lineHeight * _bmfontScale;

      if (_numberOfLines > 1) {
        _textDesiredHeight += (_numberOfLines - 1) * _lineSpacing;
      }

      _contentSize.width = _labelWidth;
      _contentSize.height = _labelHeight;

      if (_labelWidth <= 0) {
        _contentSize.width = parseFloat(longestLine.toFixed(2));
      }

      if (_labelHeight <= 0) {
        _contentSize.height = parseFloat(_textDesiredHeight.toFixed(2));
      }

      _tailoredTopY = _contentSize.height;
      _tailoredBottomY = 0;

      if (highestY > 0) {
        _tailoredTopY = _contentSize.height + highestY;
      }

      if (lowestY < -_textDesiredHeight) {
        _tailoredBottomY = _textDesiredHeight + lowestY;
      }

      return true;
    },
    _getFirstCharLen: function _getFirstCharLen() {
      return 1;
    },
    _getFirstWordLen: function _getFirstWordLen(text, startIndex, textLen) {
      var character = text.charAt(startIndex);

      if ((0, _textUtils.isUnicodeCJK)(character) || character === '\n' || (0, _textUtils.isUnicodeSpace)(character)) {
        return 1;
      }

      var len = 1;

      var letterDef = _fontAtlas && _fontAtlas.getLetterDefinitionForChar(character);

      if (!letterDef) {
        return len;
      }

      var nextLetterX = letterDef.xAdvance * _bmfontScale + _spacingX;
      var letterX = 0;

      for (var index = startIndex + 1; index < textLen; ++index) {
        character = text.charAt(index);
        letterDef = _fontAtlas && _fontAtlas.getLetterDefinitionForChar(character);

        if (!letterDef) {
          break;
        }

        letterX = nextLetterX + letterDef.offsetX * _bmfontScale;

        if (letterX + letterDef.width * _bmfontScale > _maxLineWidth && !(0, _textUtils.isUnicodeSpace)(character) && _maxLineWidth > 0) {
          return len;
        }

        nextLetterX += letterDef.xAdvance * _bmfontScale + _spacingX;

        if (character === '\n' || (0, _textUtils.isUnicodeSpace)(character) || (0, _textUtils.isUnicodeCJK)(character)) {
          break;
        }

        len++;
      }

      return len;
    },
    _multilineTextWrapByWord: function _multilineTextWrapByWord() {
      return this._multilineTextWrap(this._getFirstWordLen);
    },
    _multilineTextWrapByChar: function _multilineTextWrapByChar() {
      return this._multilineTextWrap(this._getFirstCharLen);
    },
    _recordPlaceholderInfo: function _recordPlaceholderInfo(letterIndex, _char2) {
      if (letterIndex >= _lettersInfo.length) {
        var tmpInfo = new LetterInfo();

        _lettersInfo.push(tmpInfo);
      }

      _lettersInfo[letterIndex]["char"] = _char2;
      _lettersInfo[letterIndex].valid = false;
    },
    _recordLetterInfo: function _recordLetterInfo(letterDefinitions, letterPosition, character, letterIndex, lineIndex) {
      if (letterIndex >= _lettersInfo.length) {
        var tmpInfo = new LetterInfo();

        _lettersInfo.push(tmpInfo);
      }

      var cIndex = character.charCodeAt(0);
      _lettersInfo[letterIndex].lineIndex = lineIndex;
      _lettersInfo[letterIndex]["char"] = character;
      _lettersInfo[letterIndex].valid = letterDefinitions[cIndex].validDefinition;
      _lettersInfo[letterIndex].positionX = letterPosition.x;
      _lettersInfo[letterIndex].positionY = letterPosition.y;
    },
    _alignText: function _alignText() {
      _textDesiredHeight = 0;
      _linesWidth.length = 0;

      if (!_lineBreakWithoutSpaces) {
        this._multilineTextWrapByWord();
      } else {
        this._multilineTextWrapByChar();
      }

      this._computeAlignmentOffset(); // shrink


      if (_overflow === _labelComponent.Overflow.SHRINK) {
        if (_fontSize > 0 && this._isVerticalClamp()) {
          this._shrinkLabelToContentSize(this._isVerticalClamp);
        }
      }

      if (!this._updateQuads()) {
        if (_overflow === _labelComponent.Overflow.SHRINK) {
          this._shrinkLabelToContentSize(this._isHorizontalClamp);
        }
      }
    },
    _scaleFontSizeDown: function _scaleFontSizeDown(fontSize) {
      var shouldUpdateContent = true;

      if (!fontSize) {
        fontSize = 0.1;
        shouldUpdateContent = false;
      }

      _fontSize = fontSize;

      if (shouldUpdateContent) {
        this._updateContent();
      }
    },
    _shrinkLabelToContentSize: function _shrinkLabelToContentSize(lambda) {
      var fontSize = _fontSize;
      var originalLineHeight = _lineHeight;
      var fontAtlas = _fontAtlas;
      var i = 0;
      var tempLetterDefinition = fontAtlas ? fontAtlas.cloneLetterDefinition() : {};
      var flag = true;

      while (lambda()) {
        ++i;
        var newFontSize = fontSize - i;
        flag = false;

        if (newFontSize <= 0) {
          break;
        }

        var scale = newFontSize / fontSize;

        if (fontAtlas) {
          fontAtlas.assignLetterDefinitions(tempLetterDefinition);
          fontAtlas.scaleFontLetterDefinition(scale);
        }

        _lineHeight = originalLineHeight * scale;

        if (!_lineBreakWithoutSpaces) {
          this._multilineTextWrapByWord();
        } else {
          this._multilineTextWrapByChar();
        }

        this._computeAlignmentOffset();
      }

      _lineHeight = originalLineHeight;

      if (fontAtlas) {
        fontAtlas.assignLetterDefinitions(tempLetterDefinition);
      }

      if (!flag) {
        if (fontSize - i >= 0) {
          this._scaleFontSizeDown(fontSize - i);
        }
      }
    },
    _isVerticalClamp: function _isVerticalClamp() {
      if (_textDesiredHeight > _contentSize.height) {
        return true;
      } else {
        return false;
      }
    },
    _isHorizontalClamp: function _isHorizontalClamp() {
      if (!_fontAtlas) {
        return;
      }

      var letterClamp = false;

      for (var ctr = 0, l = _string.length; ctr < l; ++ctr) {
        var letterInfo = _lettersInfo[ctr];

        if (letterInfo.valid) {
          var letterDef = _fontAtlas.getLetterDefinitionForChar(letterInfo["char"]);

          if (!letterDef) {
            continue;
          }

          var px = letterInfo.positionX + letterDef.width / 2 * _bmfontScale;
          var lineIndex = letterInfo.lineIndex;

          if (_labelWidth > 0) {
            if (!_isWrapText) {
              if (px > _contentSize.width) {
                letterClamp = true;
                break;
              }
            } else {
              var wordWidth = _linesWidth[lineIndex];

              if (wordWidth > _contentSize.width && (px > _contentSize.width || px < 0)) {
                letterClamp = true;
                break;
              }
            }
          }
        }
      }

      return letterClamp;
    },
    _isHorizontalClamped: function _isHorizontalClamped(px, lineIndex) {
      var wordWidth = _linesWidth[lineIndex];
      var letterOverClamp = px > _contentSize.width || px < 0;

      if (!_isWrapText) {
        return letterOverClamp;
      } else {
        return wordWidth > _contentSize.width && letterOverClamp;
      }
    },
    _updateQuads: function _updateQuads() {
      if (!_comp) {
        return false;
      }

      var letterDefinitions = _fontAtlas ? _fontAtlas.letterDefinitions : {};
      var texture = _spriteFrame;
      var node = _comp.node;
      var renderData = _comp.renderData;
      renderData.dataLength = renderData.vertexCount = renderData.indiceCount = 0;
      var anchorPoint = node.getAnchorPoint();
      var contentSize = _contentSize;
      var appX = anchorPoint.x * contentSize.width;
      var appY = anchorPoint.y * contentSize.height;
      var ret = true;

      for (var ctr = 0, l = _string.length; ctr < l; ++ctr) {
        var letterInfo = _lettersInfo[ctr];

        if (!letterInfo.valid) {
          continue;
        }

        var letterDef = letterDefinitions[letterInfo["char"].charCodeAt(0)];

        if (!letterDef) {
          console.warn('Can\'t find letter in this bitmap-font');
          continue;
        }

        _tmpRect.height = letterDef.height;
        _tmpRect.width = letterDef.width;
        _tmpRect.x = letterDef.u;
        _tmpRect.y = letterDef.v;
        var py = letterInfo.positionY + _letterOffsetY;

        if (_labelHeight > 0) {
          if (py > _tailoredTopY) {
            var clipTop = py - _tailoredTopY;
            _tmpRect.y += clipTop;
            _tmpRect.height -= clipTop;
            py = py - clipTop;
          }

          if (py - letterDef.height * _bmfontScale < _tailoredBottomY) {
            _tmpRect.height = py < _tailoredBottomY ? 0 : py - _tailoredBottomY;
          }
        }

        var lineIndex = letterInfo.lineIndex;
        var px = letterInfo.positionX + letterDef.width / 2 * _bmfontScale + _linesOffsetX[lineIndex];

        if (_labelWidth > 0) {
          if (this._isHorizontalClamped(px, lineIndex)) {
            if (_overflow === _labelComponent.Overflow.CLAMP) {
              _tmpRect.width = 0;
            } else if (_overflow === _labelComponent.Overflow.SHRINK) {
              if (_contentSize.width > letterDef.width) {
                ret = false;
                break;
              } else {
                _tmpRect.width = 0;
              }
            }
          }
        }

        if (_spriteFrame && _tmpRect.height > 0 && _tmpRect.width > 0) {
          var isRotated = _spriteFrame.isRotated();

          var originalSize = _spriteFrame.getOriginalSize();

          var rect = _spriteFrame.getRect();

          var offset = _spriteFrame.getOffset();

          var trimmedLeft = offset.x + (originalSize.width - rect.width) / 2;
          var trimmedTop = offset.y - (originalSize.height - rect.height) / 2;

          if (!isRotated) {
            _tmpRect.x += rect.x - trimmedLeft;
            _tmpRect.y += rect.y + trimmedTop;
          } else {
            var originalX = _tmpRect.x;
            _tmpRect.x = rect.x + rect.height - _tmpRect.y - _tmpRect.height - trimmedTop;
            _tmpRect.y = originalX + rect.y - trimmedLeft;

            if (_tmpRect.y < 0) {
              _tmpRect.height = _tmpRect.height + trimmedTop;
            }
          }

          var letterPositionX = letterInfo.positionX + _linesOffsetX[letterInfo.lineIndex];
          this.appendQuad(_comp, texture, _tmpRect, isRotated, letterPositionX - appX, py - appY, _bmfontScale);
        }
      }

      return ret;
    },
    appendQuad: function appendQuad(comp, texture, rect, rotated, x, y, scale) {},
    _computeAlignmentOffset: function _computeAlignmentOffset() {
      _linesOffsetX.length = 0;

      switch (_hAlign) {
        case _labelComponent.HorizontalTextAlignment.LEFT:
          for (var i = 0; i < _numberOfLines; ++i) {
            _linesOffsetX.push(0);
          }

          break;

        case _labelComponent.HorizontalTextAlignment.CENTER:
          for (var _i5 = 0, l = _linesWidth.length; _i5 < l; _i5++) {
            _linesOffsetX.push((_contentSize.width - _linesWidth[_i5]) / 2);
          }

          break;

        case _labelComponent.HorizontalTextAlignment.RIGHT:
          for (var _i6 = 0, _l = _linesWidth.length; _i6 < _l; _i6++) {
            _linesOffsetX.push(_contentSize.width - _linesWidth[_i6]);
          }

          break;

        default:
          break;
      }

      switch (_vAlign) {
        case _labelComponent.VerticalTextAlignment.TOP:
          _letterOffsetY = _contentSize.height;
          break;

        case _labelComponent.VerticalTextAlignment.CENTER:
          _letterOffsetY = (_contentSize.height + _textDesiredHeight) / 2;
          break;

        case _labelComponent.VerticalTextAlignment.BOTTOM:
          _letterOffsetY = _textDesiredHeight;
          break;

        default:
          break;
      }
    },
    _setupBMFontOverflowMetrics: function _setupBMFontOverflowMetrics() {
      var newWidth = _contentSize.width;
      var newHeight = _contentSize.height;

      if (_overflow === _labelComponent.Overflow.RESIZE_HEIGHT) {
        newHeight = 0;
      }

      if (_overflow === _labelComponent.Overflow.NONE) {
        newWidth = 0;
        newHeight = 0;
      }

      _labelWidth = newWidth;
      _labelHeight = newHeight;
      _labelDimensions.width = newWidth;
      _labelDimensions.height = newHeight;
      _maxLineWidth = newWidth;
    }
  };
  _exports.bmfontUtils = bmfontUtils;
  var _default = bmfontUtils;
  _exports.default = _default;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkY6L2plbmtpbnMvd29ya3NwYWNlL0NyZWF0b3JfM0QvZWRpdG9yLTNkL3Jlc291cmNlcy8zZC9lbmdpbmUvY29jb3MvdWkvYXNzZW1ibGVyL2xhYmVsL2JtZm9udFV0aWxzLnRzIl0sIm5hbWVzIjpbIkZvbnRMZXR0ZXJEZWZpbml0aW9uIiwidSIsInYiLCJ3aWR0aCIsImhlaWdodCIsIm9mZnNldFgiLCJvZmZzZXRZIiwidGV4dHVyZUlEIiwidmFsaWREZWZpbml0aW9uIiwieEFkdmFuY2UiLCJGb250QXRsYXMiLCJfbGV0dGVyRGVmaW5pdGlvbnMiLCJsZXR0ZXIiLCJsZXR0ZXJEZWZpbml0aW9uIiwiY29weUxldHRlckRlZmluaXRpb25zIiwiT2JqZWN0Iiwia2V5cyIsImtleSIsInZhbHVlIiwianMiLCJtaXhpbiIsIm5ld1ZhbHVlIiwib2xkVmFsdWUiLCJzY2FsZUZhY3RvciIsImZvbnREZWZpbml0aW9uIiwibGV0dGVyRGVmaW5pdGlvbnMiLCJjaGFyIiwiY2hhckNvZGVBdCIsImNjIiwiTGV0dGVySW5mbyIsInZhbGlkIiwicG9zaXRpb25YIiwicG9zaXRpb25ZIiwibGluZUluZGV4IiwiX3RtcFJlY3QiLCJSZWN0IiwiX2NvbXAiLCJfaG9yaXpvbnRhbEtlcm5pbmciLCJfbGV0dGVyc0luZm8iLCJfbGluZXNXaWR0aCIsIl9saW5lc09mZnNldFgiLCJfbGFiZWxEaW1lbnNpb25zIiwiU2l6ZSIsIl9mb250QXRsYXMiLCJfZm50Q29uZmlnIiwiX251bWJlck9mTGluZXMiLCJfdGV4dERlc2lyZWRIZWlnaHQiLCJfbGV0dGVyT2Zmc2V0WSIsIl90YWlsb3JlZFRvcFkiLCJfdGFpbG9yZWRCb3R0b21ZIiwiX2JtZm9udFNjYWxlIiwiX2xpbmVCcmVha1dpdGhvdXRTcGFjZXMiLCJfc3ByaXRlRnJhbWUiLCJfbGluZVNwYWNpbmciLCJfc3RyaW5nIiwiX2ZvbnRTaXplIiwiX29yaWdpbkZvbnRTaXplIiwiX2NvbnRlbnRTaXplIiwiX2hBbGlnbiIsIl92QWxpZ24iLCJfc3BhY2luZ1giLCJfbGluZUhlaWdodCIsIl9vdmVyZmxvdyIsIl9pc1dyYXBUZXh0IiwiX2xhYmVsV2lkdGgiLCJfbGFiZWxIZWlnaHQiLCJfbWF4TGluZVdpZHRoIiwiYm1mb250VXRpbHMiLCJ1cGRhdGVSZW5kZXJEYXRhIiwiY29tcCIsInJlbmRlckRhdGEiLCJ2ZXJ0RGlydHkiLCJfdXBkYXRlUHJvcGVydGllcyIsIl91cGRhdGVDb250ZW50IiwiYWN0dWFsRm9udFNpemUiLCJub2RlIiwic2V0Q29udGVudFNpemUiLCJ1dkRpcnR5IiwiX3Jlc2V0UHJvcGVydGllcyIsIl91cGRhdGVGb250U2NhbGUiLCJmb250QXNzZXQiLCJmb250Iiwic3ByaXRlRnJhbWUiLCJmbnRDb25maWciLCJmb250QXRsYXMiLCJmb250RGljdCIsImZvbnREZWZEaWN0aW9uYXJ5IiwiZm9udERlZiIsInJlY3QiLCJ4T2Zmc2V0IiwieU9mZnNldCIsIngiLCJ5IiwiYWRkTGV0dGVyRGVmaW5pdGlvbnMiLCJzdHJpbmciLCJ0b1N0cmluZyIsImZvbnRTaXplIiwiY29udGVudFNpemUiLCJnZXRDb250ZW50U2l6ZSIsImhvcml6b250YWxBbGlnbiIsInZlcnRpY2FsQWxpZ24iLCJzcGFjaW5nWCIsIm92ZXJmbG93IiwibGluZUhlaWdodCIsIk92ZXJmbG93IiwiTk9ORSIsIlJFU0laRV9IRUlHSFQiLCJlbmFibGVXcmFwVGV4dCIsIl9zZXR1cEJNRm9udE92ZXJmbG93TWV0cmljcyIsIl9jb21wdXRlSG9yaXpvbnRhbEtlcm5pbmdGb3JUZXh0IiwiX2FsaWduVGV4dCIsInN0cmluZ0xlbiIsImxlbmd0aCIsImtlcm5pbmdEaWN0IiwiaG9yaXpvbnRhbEtlcm5pbmciLCJwcmV2IiwiaSIsImtlcm5pbmdBbW91bnQiLCJfbXVsdGlsaW5lVGV4dFdyYXAiLCJuZXh0VG9rZW5GdW5jIiwidGV4dExlbiIsIm5leHRUb2tlblgiLCJuZXh0VG9rZW5ZIiwibG9uZ2VzdExpbmUiLCJsZXR0ZXJSaWdodCIsImhpZ2hlc3RZIiwibG93ZXN0WSIsImxldHRlckRlZiIsImxldHRlclBvc2l0aW9uIiwiVmVjMiIsImluZGV4IiwiY2hhcmFjdGVyIiwiY2hhckF0IiwicHVzaCIsIl9yZWNvcmRQbGFjZWhvbGRlckluZm8iLCJ0b2tlbkxlbiIsInRva2VuSGlnaGVzdFkiLCJ0b2tlbkxvd2VzdFkiLCJ0b2tlblJpZ2h0IiwibmV4dExldHRlclgiLCJuZXdMaW5lIiwidG1wIiwibGV0dGVySW5kZXgiLCJnZXRMZXR0ZXJEZWZpbml0aW9uRm9yQ2hhciIsImNvbnNvbGUiLCJsb2ciLCJhdGxhc05hbWUiLCJsZXR0ZXJYIiwiX3JlY29yZExldHRlckluZm8iLCJwYXJzZUZsb2F0IiwidG9GaXhlZCIsIl9nZXRGaXJzdENoYXJMZW4iLCJfZ2V0Rmlyc3RXb3JkTGVuIiwidGV4dCIsInN0YXJ0SW5kZXgiLCJsZW4iLCJfbXVsdGlsaW5lVGV4dFdyYXBCeVdvcmQiLCJfbXVsdGlsaW5lVGV4dFdyYXBCeUNoYXIiLCJ0bXBJbmZvIiwiY0luZGV4IiwiX2NvbXB1dGVBbGlnbm1lbnRPZmZzZXQiLCJTSFJJTksiLCJfaXNWZXJ0aWNhbENsYW1wIiwiX3Nocmlua0xhYmVsVG9Db250ZW50U2l6ZSIsIl91cGRhdGVRdWFkcyIsIl9pc0hvcml6b250YWxDbGFtcCIsIl9zY2FsZUZvbnRTaXplRG93biIsInNob3VsZFVwZGF0ZUNvbnRlbnQiLCJsYW1iZGEiLCJvcmlnaW5hbExpbmVIZWlnaHQiLCJ0ZW1wTGV0dGVyRGVmaW5pdGlvbiIsImNsb25lTGV0dGVyRGVmaW5pdGlvbiIsImZsYWciLCJuZXdGb250U2l6ZSIsInNjYWxlIiwiYXNzaWduTGV0dGVyRGVmaW5pdGlvbnMiLCJzY2FsZUZvbnRMZXR0ZXJEZWZpbml0aW9uIiwibGV0dGVyQ2xhbXAiLCJjdHIiLCJsIiwibGV0dGVySW5mbyIsInB4Iiwid29yZFdpZHRoIiwiX2lzSG9yaXpvbnRhbENsYW1wZWQiLCJsZXR0ZXJPdmVyQ2xhbXAiLCJ0ZXh0dXJlIiwiZGF0YUxlbmd0aCIsInZlcnRleENvdW50IiwiaW5kaWNlQ291bnQiLCJhbmNob3JQb2ludCIsImdldEFuY2hvclBvaW50IiwiYXBwWCIsImFwcFkiLCJyZXQiLCJ3YXJuIiwicHkiLCJjbGlwVG9wIiwiQ0xBTVAiLCJpc1JvdGF0ZWQiLCJvcmlnaW5hbFNpemUiLCJnZXRPcmlnaW5hbFNpemUiLCJnZXRSZWN0Iiwib2Zmc2V0IiwiZ2V0T2Zmc2V0IiwidHJpbW1lZExlZnQiLCJ0cmltbWVkVG9wIiwib3JpZ2luYWxYIiwibGV0dGVyUG9zaXRpb25YIiwiYXBwZW5kUXVhZCIsInJvdGF0ZWQiLCJIb3Jpem9udGFsVGV4dEFsaWdubWVudCIsIkxFRlQiLCJDRU5URVIiLCJSSUdIVCIsIlZlcnRpY2FsVGV4dEFsaWdubWVudCIsIlRPUCIsIkJPVFRPTSIsIm5ld1dpZHRoIiwibmV3SGVpZ2h0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztNQXFDTUEsb0I7OztTQUNLQyxDLEdBQUksQztTQUNKQyxDLEdBQUksQztTQUNKQyxLLEdBQVEsQztTQUNSQyxNLEdBQVMsQztTQUNUQyxPLEdBQVUsQztTQUNWQyxPLEdBQVUsQztTQUNWQyxTLEdBQVksQztTQUNaQyxlLEdBQWtCLEs7U0FDbEJDLFEsR0FBVyxDOzs7TUFPVEMsUzs7OztXQUtEQyxrQixHQUF3QyxFOzs7OzsyQ0FFbkJDLE0sRUFBZ0JDLGdCLEVBQXdDO0FBQ2pGLGFBQUtGLGtCQUFMLENBQXdCQyxNQUF4QixJQUFrQ0MsZ0JBQWxDO0FBQ0g7Ozs4Q0FFK0I7QUFDNUIsWUFBTUMscUJBQXdDLEdBQUcsRUFBakQ7O0FBQ0Esd0NBQWtCQyxNQUFNLENBQUNDLElBQVAsQ0FBWSxLQUFLTCxrQkFBakIsQ0FBbEIsa0NBQXdEO0FBQW5ELGNBQU1NLElBQUcsbUJBQVQ7QUFDRCxjQUFNQyxLQUFLLEdBQUcsSUFBSWxCLG9CQUFKLEVBQWQ7O0FBQ0FtQixxQkFBR0MsS0FBSCxDQUFTRixLQUFULEVBQWdCLEtBQUtQLGtCQUFMLENBQXdCTSxJQUF4QixDQUFoQjs7QUFDQUgsVUFBQUEscUJBQXFCLENBQUNHLElBQUQsQ0FBckIsR0FBNkJDLEtBQTdCO0FBQ0g7O0FBQ0QsZUFBT0oscUJBQVA7QUFDSDs7OzhDQUUrQkQsZ0IsRUFBcUM7QUFDakUsMENBQWtCRSxNQUFNLENBQUNDLElBQVAsQ0FBWSxLQUFLTCxrQkFBakIsQ0FBbEIscUNBQXdEO0FBQW5ELGNBQU1NLEtBQUcscUJBQVQ7QUFDRCxjQUFNSSxRQUFRLEdBQUdSLGdCQUFnQixDQUFDSSxLQUFELENBQWpDO0FBQ0EsY0FBTUssUUFBUSxHQUFHLEtBQUtYLGtCQUFMLENBQXdCTSxLQUF4QixDQUFqQjs7QUFDQUUscUJBQUdDLEtBQUgsQ0FBU0UsUUFBVCxFQUFtQkQsUUFBbkI7QUFDSDtBQUNKOzs7Z0RBRWlDRSxXLEVBQXFCO0FBQ25ELDBDQUE2QlIsTUFBTSxDQUFDQyxJQUFQLENBQVksS0FBS0wsa0JBQWpCLENBQTdCLHFDQUFtRTtBQUE5RCxjQUFNYSxjQUFjLHFCQUFwQjtBQUNELGNBQU1DLGlCQUFpQixHQUFHLEtBQUtkLGtCQUFMLENBQXdCYSxjQUF4QixDQUExQjtBQUNBQyxVQUFBQSxpQkFBaUIsQ0FBQ3RCLEtBQWxCLElBQTJCb0IsV0FBM0I7QUFDQUUsVUFBQUEsaUJBQWlCLENBQUNyQixNQUFsQixJQUE0Qm1CLFdBQTVCO0FBQ0FFLFVBQUFBLGlCQUFpQixDQUFDcEIsT0FBbEIsSUFBNkJrQixXQUE3QjtBQUNBRSxVQUFBQSxpQkFBaUIsQ0FBQ25CLE9BQWxCLElBQTZCaUIsV0FBN0I7QUFDQUUsVUFBQUEsaUJBQWlCLENBQUNoQixRQUFsQixJQUE4QmMsV0FBOUI7QUFDSDtBQUNKOzs7aURBRWtDRyxLLEVBQWM7QUFDN0MsZUFBTyxLQUFLZixrQkFBTCxDQUF3QmUsS0FBSSxDQUFDQyxVQUFMLENBQWdCLENBQWhCLENBQXhCLENBQVA7QUFDSDs7OzBCQXpDdUI7QUFDcEIsZUFBTyxLQUFLaEIsa0JBQVo7QUFDSDs7Ozs7OztBQTBDTGlCLEVBQUFBLEVBQUUsQ0FBQ2xCLFNBQUgsR0FBZUEsU0FBZjs7TUFFTW1CLFU7OzttQkFDWSxFO1NBQ1BDLEssR0FBUSxJO1NBQ1JDLFMsR0FBWSxDO1NBQ1pDLFMsR0FBWSxDO1NBQ1pDLFMsR0FBWSxDOzs7QUFHdkIsTUFBTUMsUUFBUSxHQUFHLElBQUlDLFdBQUosRUFBakI7O0FBRUEsTUFBSUMsS0FBNEIsR0FBRyxJQUFuQztBQUVBLE1BQU1DLGtCQUE0QixHQUFHLEVBQXJDO0FBQ0EsTUFBTUMsWUFBMEIsR0FBRyxFQUFuQztBQUNBLE1BQU1DLFdBQXFCLEdBQUcsRUFBOUI7QUFDQSxNQUFNQyxhQUF1QixHQUFHLEVBQWhDOztBQUNBLE1BQU1DLGdCQUFnQixHQUFHLElBQUlDLFdBQUosRUFBekI7O0FBRUEsTUFBSUMsVUFBNEIsR0FBRyxJQUFuQztBQUNBLE1BQUlDLFVBQTBCLEdBQUcsSUFBakM7QUFDQSxNQUFJQyxjQUFjLEdBQUcsQ0FBckI7QUFDQSxNQUFJQyxrQkFBa0IsR0FBRyxDQUF6QjtBQUNBLE1BQUlDLGNBQWMsR0FBRyxDQUFyQjtBQUNBLE1BQUlDLGFBQWEsR0FBRyxDQUFwQjtBQUNBLE1BQUlDLGdCQUFnQixHQUFHLENBQXZCO0FBQ0EsTUFBSUMsWUFBWSxHQUFHLEdBQW5CO0FBQ0EsTUFBTUMsdUJBQXVCLEdBQUcsS0FBaEM7QUFDQSxNQUFJQyxZQUE4QixHQUFHLElBQXJDO0FBQ0EsTUFBTUMsWUFBWSxHQUFHLENBQXJCO0FBQ0EsTUFBSUMsT0FBTyxHQUFHLEVBQWQ7QUFDQSxNQUFJQyxTQUFTLEdBQUcsQ0FBaEI7QUFDQSxNQUFJQyxlQUFlLEdBQUcsQ0FBdEI7O0FBQ0EsTUFBTUMsWUFBWSxHQUFHLElBQUlmLFdBQUosRUFBckI7O0FBQ0EsTUFBSWdCLE9BQU8sR0FBRyxDQUFkO0FBQ0EsTUFBSUMsT0FBTyxHQUFHLENBQWQ7QUFDQSxNQUFJQyxTQUFTLEdBQUcsQ0FBaEI7QUFDQSxNQUFJQyxXQUFXLEdBQUcsQ0FBbEI7QUFDQSxNQUFJQyxTQUFTLEdBQUcsQ0FBaEI7QUFDQSxNQUFJQyxXQUFXLEdBQUcsS0FBbEI7QUFDQSxNQUFJQyxXQUFXLEdBQUcsQ0FBbEI7QUFDQSxNQUFJQyxZQUFZLEdBQUcsQ0FBbkI7QUFDQSxNQUFJQyxhQUFhLEdBQUcsQ0FBcEI7QUFFTyxNQUFNQyxXQUFXLEdBQUc7QUFDdkJDLElBQUFBLGdCQUR1Qiw0QkFDTEMsSUFESyxFQUNpQjtBQUNwQyxVQUFJLENBQUNBLElBQUksQ0FBQ0MsVUFBTixJQUFvQixDQUFDRCxJQUFJLENBQUNDLFVBQUwsQ0FBZ0JDLFNBQXpDLEVBQW9EO0FBQ2hEO0FBQ0g7O0FBRUQsVUFBSW5DLEtBQUssS0FBS2lDLElBQWQsRUFBb0I7QUFBRTtBQUFTOztBQUUvQmpDLE1BQUFBLEtBQUssR0FBR2lDLElBQVI7O0FBRUEsV0FBS0csaUJBQUw7O0FBQ0EsV0FBS0MsY0FBTDs7QUFFQXJDLE1BQUFBLEtBQUssQ0FBQ3NDLGNBQU4sR0FBdUJuQixTQUF2Qjs7QUFDQW5CLE1BQUFBLEtBQUssQ0FBQ3VDLElBQU4sQ0FBV0MsY0FBWCxDQUEwQm5CLFlBQTFCOztBQUVBckIsTUFBQUEsS0FBSyxDQUFDa0MsVUFBTixDQUFrQkMsU0FBbEIsR0FBOEJuQyxLQUFLLENBQUNrQyxVQUFOLENBQWtCTyxPQUFsQixHQUE0QixLQUExRDtBQUVBekMsTUFBQUEsS0FBSyxHQUFHLElBQVI7O0FBRUEsV0FBSzBDLGdCQUFMO0FBQ0gsS0FyQnNCO0FBdUJ2QkMsSUFBQUEsZ0JBdkJ1Qiw4QkF1Qkg7QUFDaEI3QixNQUFBQSxZQUFZLEdBQUdLLFNBQVMsR0FBR0MsZUFBM0I7QUFDSCxLQXpCc0I7QUEyQnZCZ0IsSUFBQUEsaUJBM0J1QiwrQkEyQkY7QUFDakIsVUFBSSxDQUFDcEMsS0FBTCxFQUFXO0FBQ1A7QUFDSDs7QUFFRCxVQUFNNEMsU0FBUyxHQUFHNUMsS0FBSyxDQUFDNkMsSUFBeEI7O0FBQ0EsVUFBSSxDQUFDRCxTQUFMLEVBQWdCO0FBQ1o7QUFDSDs7QUFFRDVCLE1BQUFBLFlBQVksR0FBRzRCLFNBQVMsQ0FBQ0UsV0FBekI7QUFDQXRDLE1BQUFBLFVBQVUsR0FBR29DLFNBQVMsQ0FBQ0csU0FBdkI7QUFFQXhDLE1BQUFBLFVBQVUsR0FBR1AsS0FBSyxDQUFDZ0QsU0FBbkI7O0FBQ0EsVUFBSSxDQUFDekMsVUFBTCxFQUFpQjtBQUNiQSxRQUFBQSxVQUFVLEdBQUcsSUFBSWpDLFNBQUosRUFBYjtBQUVBLFlBQU0yRSxRQUFRLEdBQUd6QyxVQUFVLENBQUMwQyxpQkFBNUI7O0FBRUEsMENBQXNCdkUsTUFBTSxDQUFDQyxJQUFQLENBQVlxRSxRQUFaLENBQXRCLHFDQUE4QztBQUF6QyxjQUFNRSxPQUFPLHFCQUFiO0FBQ0QsY0FBTTFFLGdCQUFnQixHQUFHLElBQUliLG9CQUFKLEVBQXpCO0FBRUEsY0FBTXdGLElBQUksR0FBR0gsUUFBUSxDQUFDRSxPQUFELENBQVIsQ0FBa0JDLElBQS9CO0FBRUEzRSxVQUFBQSxnQkFBZ0IsQ0FBQ1IsT0FBakIsR0FBMkJnRixRQUFRLENBQUNFLE9BQUQsQ0FBUixDQUFrQkUsT0FBN0M7QUFDQTVFLFVBQUFBLGdCQUFnQixDQUFDUCxPQUFqQixHQUEyQitFLFFBQVEsQ0FBQ0UsT0FBRCxDQUFSLENBQWtCRyxPQUE3QztBQUNBN0UsVUFBQUEsZ0JBQWdCLENBQUNWLEtBQWpCLEdBQXlCcUYsSUFBSSxDQUFDckYsS0FBOUI7QUFDQVUsVUFBQUEsZ0JBQWdCLENBQUNULE1BQWpCLEdBQTBCb0YsSUFBSSxDQUFDcEYsTUFBL0I7QUFDQVMsVUFBQUEsZ0JBQWdCLENBQUNaLENBQWpCLEdBQXFCdUYsSUFBSSxDQUFDRyxDQUExQjtBQUNBOUUsVUFBQUEsZ0JBQWdCLENBQUNYLENBQWpCLEdBQXFCc0YsSUFBSSxDQUFDSSxDQUExQixDQVYwQyxDQVcxQzs7QUFDQS9FLFVBQUFBLGdCQUFnQixDQUFDTixTQUFqQixHQUE2QixDQUE3QjtBQUNBTSxVQUFBQSxnQkFBZ0IsQ0FBQ0wsZUFBakIsR0FBbUMsSUFBbkM7QUFDQUssVUFBQUEsZ0JBQWdCLENBQUNKLFFBQWpCLEdBQTRCNEUsUUFBUSxDQUFDRSxPQUFELENBQVIsQ0FBa0I5RSxRQUE5Qzs7QUFFQWtDLFVBQUFBLFVBQVUsQ0FBQ2tELG9CQUFYLENBQWdDTixPQUFoQyxFQUF5QzFFLGdCQUF6QztBQUNIOztBQUVEdUIsUUFBQUEsS0FBSyxDQUFDZ0QsU0FBTixHQUFrQnpDLFVBQWxCO0FBQ0g7O0FBRURXLE1BQUFBLE9BQU8sR0FBR2xCLEtBQUssQ0FBQzBELE1BQU4sQ0FBYUMsUUFBYixFQUFWO0FBQ0F4QyxNQUFBQSxTQUFTLEdBQUduQixLQUFLLENBQUM0RCxRQUFsQjtBQUNBeEMsTUFBQUEsZUFBZSxHQUFHWixVQUFVLENBQUNvRCxRQUE3Qjs7QUFDQSxVQUFNQyxXQUFXLEdBQUc3RCxLQUFLLENBQUN1QyxJQUFOLENBQVd1QixjQUFYLEVBQXBCOztBQUNBekMsTUFBQUEsWUFBWSxDQUFDdEQsS0FBYixHQUFxQjhGLFdBQVcsQ0FBQzlGLEtBQWpDO0FBQ0FzRCxNQUFBQSxZQUFZLENBQUNyRCxNQUFiLEdBQXNCNkYsV0FBVyxDQUFDN0YsTUFBbEM7QUFDQXNELE1BQUFBLE9BQU8sR0FBR3RCLEtBQUssQ0FBQytELGVBQWhCO0FBQ0F4QyxNQUFBQSxPQUFPLEdBQUd2QixLQUFLLENBQUNnRSxhQUFoQjtBQUNBeEMsTUFBQUEsU0FBUyxHQUFHeEIsS0FBSyxDQUFDaUUsUUFBbEI7QUFDQXZDLE1BQUFBLFNBQVMsR0FBRzFCLEtBQUssQ0FBQ2tFLFFBQWxCO0FBQ0F6QyxNQUFBQSxXQUFXLEdBQUd6QixLQUFLLENBQUNtRSxVQUFwQixDQW5EaUIsQ0FxRGpCOztBQUNBLFVBQUl6QyxTQUFTLEtBQUswQyx5QkFBU0MsSUFBM0IsRUFBaUM7QUFDN0IxQyxRQUFBQSxXQUFXLEdBQUcsS0FBZDtBQUNILE9BRkQsTUFHSyxJQUFJRCxTQUFTLEtBQUswQyx5QkFBU0UsYUFBM0IsRUFBMEM7QUFDM0MzQyxRQUFBQSxXQUFXLEdBQUcsSUFBZDtBQUNILE9BRkksTUFHQTtBQUNEQSxRQUFBQSxXQUFXLEdBQUczQixLQUFLLENBQUN1RSxjQUFwQjtBQUNIOztBQUVELFdBQUtDLDJCQUFMO0FBQ0gsS0E1RnNCO0FBOEZ2QjlCLElBQUFBLGdCQTlGdUIsOEJBOEZIO0FBQ2hCbkMsTUFBQUEsVUFBVSxHQUFHLElBQWI7QUFDQUMsTUFBQUEsVUFBVSxHQUFHLElBQWI7QUFDQVEsTUFBQUEsWUFBWSxHQUFHLElBQWY7QUFDSCxLQWxHc0I7QUFvR3ZCcUIsSUFBQUEsY0FwR3VCLDRCQW9HTDtBQUNkLFdBQUtNLGdCQUFMOztBQUNBLFdBQUs4QixnQ0FBTDs7QUFDQSxXQUFLQyxVQUFMO0FBQ0gsS0F4R3NCO0FBMEd2QkQsSUFBQUEsZ0NBMUd1Qiw4Q0EwR2E7QUFDaEMsVUFBTWYsTUFBTSxHQUFHeEMsT0FBZjtBQUNBLFVBQU15RCxTQUFTLEdBQUdqQixNQUFNLENBQUNrQixNQUF6QjtBQUVBLFVBQU1DLFdBQVcsR0FBR3JFLFVBQVUsQ0FBRXFFLFdBQWhDO0FBQ0EsVUFBTUMsaUJBQWlCLEdBQUc3RSxrQkFBMUI7QUFFQSxVQUFJOEUsSUFBSSxHQUFHLENBQUMsQ0FBWjs7QUFDQSxXQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdMLFNBQXBCLEVBQStCLEVBQUVLLENBQWpDLEVBQW9DO0FBQ2hDLFlBQU1uRyxLQUFHLEdBQUc2RSxNQUFNLENBQUNuRSxVQUFQLENBQWtCeUYsQ0FBbEIsQ0FBWjs7QUFDQSxZQUFNQyxhQUFhLEdBQUdKLFdBQVcsQ0FBRUUsSUFBSSxJQUFJLEVBQVQsR0FBZ0JsRyxLQUFHLEdBQUcsTUFBdkIsQ0FBWCxJQUE4QyxDQUFwRTs7QUFDQSxZQUFJbUcsQ0FBQyxHQUFHTCxTQUFTLEdBQUcsQ0FBcEIsRUFBdUI7QUFDbkJHLFVBQUFBLGlCQUFpQixDQUFDRSxDQUFELENBQWpCLEdBQXVCQyxhQUF2QjtBQUNILFNBRkQsTUFFTztBQUNISCxVQUFBQSxpQkFBaUIsQ0FBQ0UsQ0FBRCxDQUFqQixHQUF1QixDQUF2QjtBQUNIOztBQUNERCxRQUFBQSxJQUFJLEdBQUdsRyxLQUFQO0FBQ0g7QUFDSixLQTVIc0I7QUE4SHZCcUcsSUFBQUEsa0JBOUh1Qiw4QkE4SEhDLGFBOUhHLEVBOEhzQjtBQUN6QyxVQUFNQyxPQUFPLEdBQUdsRSxPQUFPLENBQUMwRCxNQUF4QjtBQUVBLFVBQUkvRSxTQUFTLEdBQUcsQ0FBaEI7QUFDQSxVQUFJd0YsVUFBVSxHQUFHLENBQWpCO0FBQ0EsVUFBSUMsVUFBVSxHQUFHLENBQWpCO0FBQ0EsVUFBSUMsV0FBVyxHQUFHLENBQWxCO0FBQ0EsVUFBSUMsV0FBVyxHQUFHLENBQWxCO0FBRUEsVUFBSUMsUUFBUSxHQUFHLENBQWY7QUFDQSxVQUFJQyxPQUFPLEdBQUcsQ0FBZDtBQUNBLFVBQUlDLFNBQXNDLEdBQUcsSUFBN0M7QUFDQSxVQUFNQyxjQUFjLEdBQUcsSUFBSUMsV0FBSixFQUF2Qjs7QUFFQSxXQUFLbEQsZ0JBQUw7O0FBRUEsVUFBTXRELGlCQUFpQixHQUFHa0IsVUFBVSxDQUFFbEIsaUJBQXRDOztBQUVBLFdBQUssSUFBSXlHLEtBQUssR0FBRyxDQUFqQixFQUFvQkEsS0FBSyxHQUFHVixPQUE1QixHQUFzQztBQUNsQyxZQUFJVyxTQUFTLEdBQUc3RSxPQUFPLENBQUM4RSxNQUFSLENBQWVGLEtBQWYsQ0FBaEI7O0FBQ0EsWUFBSUMsU0FBUyxLQUFLLElBQWxCLEVBQXdCO0FBQ3BCNUYsVUFBQUEsV0FBVyxDQUFDOEYsSUFBWixDQUFpQlQsV0FBakI7O0FBQ0FBLFVBQUFBLFdBQVcsR0FBRyxDQUFkO0FBQ0EzRixVQUFBQSxTQUFTO0FBQ1R3RixVQUFBQSxVQUFVLEdBQUcsQ0FBYjtBQUNBQyxVQUFBQSxVQUFVLElBQUk3RCxXQUFXLEdBQUdYLFlBQWQsR0FBNkJHLFlBQTNDOztBQUNBLGVBQUtpRixzQkFBTCxDQUE0QkosS0FBNUIsRUFBbUNDLFNBQW5DOztBQUNBRCxVQUFBQSxLQUFLO0FBQ0w7QUFDSDs7QUFFRCxZQUFNSyxRQUFRLEdBQUdoQixhQUFhLENBQUNqRSxPQUFELEVBQVU0RSxLQUFWLEVBQWlCVixPQUFqQixDQUE5QjtBQUNBLFlBQUlnQixhQUFhLEdBQUdYLFFBQXBCO0FBQ0EsWUFBSVksWUFBWSxHQUFHWCxPQUFuQjtBQUNBLFlBQUlZLFVBQVUsR0FBR2QsV0FBakI7QUFDQSxZQUFJZSxXQUFXLEdBQUdsQixVQUFsQjtBQUNBLFlBQUltQixPQUFPLEdBQUcsS0FBZDs7QUFFQSxhQUFLLElBQUlDLEdBQUcsR0FBRyxDQUFmLEVBQWtCQSxHQUFHLEdBQUdOLFFBQXhCLEVBQWtDLEVBQUVNLEdBQXBDLEVBQXlDO0FBQ3JDLGNBQU1DLFdBQVcsR0FBR1osS0FBSyxHQUFHVyxHQUE1QjtBQUNBVixVQUFBQSxTQUFTLEdBQUc3RSxPQUFPLENBQUM4RSxNQUFSLENBQWVVLFdBQWYsQ0FBWjs7QUFDQSxjQUFJWCxTQUFTLEtBQUssSUFBbEIsRUFBd0I7QUFDcEIsaUJBQUtHLHNCQUFMLENBQTRCUSxXQUE1QixFQUF5Q1gsU0FBekM7O0FBQ0E7QUFDSDs7QUFDREosVUFBQUEsU0FBUyxHQUFHcEYsVUFBVSxJQUFJQSxVQUFVLENBQUNvRywwQkFBWCxDQUFzQ1osU0FBdEMsQ0FBMUI7O0FBQ0EsY0FBSSxDQUFDSixTQUFMLEVBQWdCO0FBQ1osaUJBQUtPLHNCQUFMLENBQTRCUSxXQUE1QixFQUF5Q1gsU0FBekM7O0FBQ0FhLFlBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLG9EQUNYckcsVUFBVSxDQUFFc0csU0FERCxHQUNhLGNBRGIsR0FDOEJmLFNBRDFDO0FBRUE7QUFDSDs7QUFFRCxjQUFNZ0IsT0FBTyxHQUFHUixXQUFXLEdBQUdaLFNBQVMsQ0FBQzFILE9BQVYsR0FBb0I2QyxZQUFsRDs7QUFFQSxjQUFJYSxXQUFXLElBQ1JHLGFBQWEsR0FBRyxDQURuQixJQUVHdUQsVUFBVSxHQUFHLENBRmhCLElBR0cwQixPQUFPLEdBQUdwQixTQUFTLENBQUM1SCxLQUFWLEdBQWtCK0MsWUFBNUIsR0FBMkNnQixhQUg5QyxJQUlHLENBQUMsK0JBQWVpRSxTQUFmLENBSlIsRUFJbUM7QUFDL0I1RixZQUFBQSxXQUFXLENBQUM4RixJQUFaLENBQWlCVCxXQUFqQjs7QUFDQUEsWUFBQUEsV0FBVyxHQUFHLENBQWQ7QUFDQTNGLFlBQUFBLFNBQVM7QUFDVHdGLFlBQUFBLFVBQVUsR0FBRyxDQUFiO0FBQ0FDLFlBQUFBLFVBQVUsSUFBSzdELFdBQVcsR0FBR1gsWUFBZCxHQUE2QkcsWUFBNUM7QUFDQXVGLFlBQUFBLE9BQU8sR0FBRyxJQUFWO0FBQ0E7QUFDSCxXQVpELE1BWU87QUFDSFosWUFBQUEsY0FBYyxDQUFDckMsQ0FBZixHQUFtQndELE9BQW5CO0FBQ0g7O0FBRURuQixVQUFBQSxjQUFjLENBQUNwQyxDQUFmLEdBQW1COEIsVUFBVSxHQUFHSyxTQUFTLENBQUN6SCxPQUFWLEdBQW9CNEMsWUFBcEQ7O0FBQ0EsZUFBS2tHLGlCQUFMLENBQXVCM0gsaUJBQXZCLEVBQTBDdUcsY0FBMUMsRUFBMERHLFNBQTFELEVBQXFFVyxXQUFyRSxFQUFrRjdHLFNBQWxGOztBQUVBLGNBQUk2RyxXQUFXLEdBQUcsQ0FBZCxHQUFrQnpHLGtCQUFrQixDQUFDMkUsTUFBckMsSUFBK0M4QixXQUFXLEdBQUd0QixPQUFPLEdBQUcsQ0FBM0UsRUFBOEU7QUFDMUVtQixZQUFBQSxXQUFXLElBQUl0RyxrQkFBa0IsQ0FBQ3lHLFdBQVcsR0FBRyxDQUFmLENBQWpDO0FBQ0g7O0FBRURILFVBQUFBLFdBQVcsSUFBSVosU0FBUyxDQUFDdEgsUUFBVixHQUFxQnlDLFlBQXJCLEdBQW9DVSxTQUFuRDtBQUVBOEUsVUFBQUEsVUFBVSxHQUFHVixjQUFjLENBQUNyQyxDQUFmLEdBQW1Cb0MsU0FBUyxDQUFDNUgsS0FBVixHQUFrQitDLFlBQWxEOztBQUVBLGNBQUlzRixhQUFhLEdBQUdSLGNBQWMsQ0FBQ3BDLENBQW5DLEVBQXNDO0FBQ2xDNEMsWUFBQUEsYUFBYSxHQUFHUixjQUFjLENBQUNwQyxDQUEvQjtBQUNIOztBQUVELGNBQUk2QyxZQUFZLEdBQUdULGNBQWMsQ0FBQ3BDLENBQWYsR0FBbUJtQyxTQUFTLENBQUMzSCxNQUFWLEdBQW1COEMsWUFBekQsRUFBdUU7QUFDbkV1RixZQUFBQSxZQUFZLEdBQUdULGNBQWMsQ0FBQ3BDLENBQWYsR0FBbUJtQyxTQUFTLENBQUMzSCxNQUFWLEdBQW1COEMsWUFBckQ7QUFDSDtBQUVKLFNBeEVpQyxDQXdFaEM7OztBQUVGLFlBQUkwRixPQUFKLEVBQWE7QUFBRTtBQUFXOztBQUUxQm5CLFFBQUFBLFVBQVUsR0FBR2tCLFdBQWI7QUFDQWYsUUFBQUEsV0FBVyxHQUFHYyxVQUFkOztBQUVBLFlBQUliLFFBQVEsR0FBR1csYUFBZixFQUE4QjtBQUMxQlgsVUFBQUEsUUFBUSxHQUFHVyxhQUFYO0FBQ0g7O0FBQ0QsWUFBSVYsT0FBTyxHQUFHVyxZQUFkLEVBQTRCO0FBQ3hCWCxVQUFBQSxPQUFPLEdBQUdXLFlBQVY7QUFDSDs7QUFDRCxZQUFJZCxXQUFXLEdBQUdDLFdBQWxCLEVBQStCO0FBQzNCRCxVQUFBQSxXQUFXLEdBQUdDLFdBQWQ7QUFDSDs7QUFFRE0sUUFBQUEsS0FBSyxJQUFJSyxRQUFUO0FBQ0gsT0E1R3dDLENBNEd2Qzs7O0FBRUZoRyxNQUFBQSxXQUFXLENBQUM4RixJQUFaLENBQWlCVCxXQUFqQjs7QUFFQS9FLE1BQUFBLGNBQWMsR0FBR1osU0FBUyxHQUFHLENBQTdCO0FBQ0FhLE1BQUFBLGtCQUFrQixHQUFHRCxjQUFjLEdBQUdnQixXQUFqQixHQUErQlgsWUFBcEQ7O0FBQ0EsVUFBSUwsY0FBYyxHQUFHLENBQXJCLEVBQXdCO0FBQ3BCQyxRQUFBQSxrQkFBa0IsSUFBSSxDQUFDRCxjQUFjLEdBQUcsQ0FBbEIsSUFBdUJRLFlBQTdDO0FBQ0g7O0FBRURJLE1BQUFBLFlBQVksQ0FBQ3RELEtBQWIsR0FBcUI2RCxXQUFyQjtBQUNBUCxNQUFBQSxZQUFZLENBQUNyRCxNQUFiLEdBQXNCNkQsWUFBdEI7O0FBQ0EsVUFBSUQsV0FBVyxJQUFJLENBQW5CLEVBQXNCO0FBQ2xCUCxRQUFBQSxZQUFZLENBQUN0RCxLQUFiLEdBQXFCa0osVUFBVSxDQUFDMUIsV0FBVyxDQUFDMkIsT0FBWixDQUFvQixDQUFwQixDQUFELENBQS9CO0FBQ0g7O0FBQ0QsVUFBSXJGLFlBQVksSUFBSSxDQUFwQixFQUF1QjtBQUNuQlIsUUFBQUEsWUFBWSxDQUFDckQsTUFBYixHQUFzQmlKLFVBQVUsQ0FBQ3ZHLGtCQUFrQixDQUFDd0csT0FBbkIsQ0FBMkIsQ0FBM0IsQ0FBRCxDQUFoQztBQUNIOztBQUVEdEcsTUFBQUEsYUFBYSxHQUFHUyxZQUFZLENBQUNyRCxNQUE3QjtBQUNBNkMsTUFBQUEsZ0JBQWdCLEdBQUcsQ0FBbkI7O0FBQ0EsVUFBSTRFLFFBQVEsR0FBRyxDQUFmLEVBQWtCO0FBQ2Q3RSxRQUFBQSxhQUFhLEdBQUdTLFlBQVksQ0FBQ3JELE1BQWIsR0FBc0J5SCxRQUF0QztBQUNIOztBQUNELFVBQUlDLE9BQU8sR0FBRyxDQUFDaEYsa0JBQWYsRUFBbUM7QUFDL0JHLFFBQUFBLGdCQUFnQixHQUFHSCxrQkFBa0IsR0FBR2dGLE9BQXhDO0FBQ0g7O0FBRUQsYUFBTyxJQUFQO0FBQ0gsS0F2UXNCO0FBeVF2QnlCLElBQUFBLGdCQXpRdUIsOEJBeVFIO0FBQ2hCLGFBQU8sQ0FBUDtBQUNILEtBM1FzQjtBQTZRdkJDLElBQUFBLGdCQTdRdUIsNEJBNlFMQyxJQTdRSyxFQTZRU0MsVUE3UVQsRUE2UTZCbEMsT0E3UTdCLEVBNlE4QztBQUNqRSxVQUFJVyxTQUFTLEdBQUdzQixJQUFJLENBQUNyQixNQUFMLENBQVlzQixVQUFaLENBQWhCOztBQUNBLFVBQUksNkJBQWF2QixTQUFiLEtBQ0dBLFNBQVMsS0FBSyxJQURqQixJQUVHLCtCQUFlQSxTQUFmLENBRlAsRUFFa0M7QUFDOUIsZUFBTyxDQUFQO0FBQ0g7O0FBRUQsVUFBSXdCLEdBQUcsR0FBRyxDQUFWOztBQUNBLFVBQUk1QixTQUFTLEdBQUdwRixVQUFVLElBQUlBLFVBQVUsQ0FBQ29HLDBCQUFYLENBQXNDWixTQUF0QyxDQUE5Qjs7QUFDQSxVQUFJLENBQUNKLFNBQUwsRUFBZ0I7QUFDWixlQUFPNEIsR0FBUDtBQUNIOztBQUNELFVBQUloQixXQUFXLEdBQUdaLFNBQVMsQ0FBQ3RILFFBQVYsR0FBcUJ5QyxZQUFyQixHQUFvQ1UsU0FBdEQ7QUFDQSxVQUFJdUYsT0FBTyxHQUFHLENBQWQ7O0FBQ0EsV0FBSyxJQUFJakIsS0FBSyxHQUFHd0IsVUFBVSxHQUFHLENBQTlCLEVBQWlDeEIsS0FBSyxHQUFHVixPQUF6QyxFQUFrRCxFQUFFVSxLQUFwRCxFQUEyRDtBQUN2REMsUUFBQUEsU0FBUyxHQUFHc0IsSUFBSSxDQUFDckIsTUFBTCxDQUFZRixLQUFaLENBQVo7QUFFQUgsUUFBQUEsU0FBUyxHQUFHcEYsVUFBVSxJQUFJQSxVQUFVLENBQUNvRywwQkFBWCxDQUFzQ1osU0FBdEMsQ0FBMUI7O0FBQ0EsWUFBSSxDQUFDSixTQUFMLEVBQWdCO0FBQ1o7QUFDSDs7QUFDRG9CLFFBQUFBLE9BQU8sR0FBR1IsV0FBVyxHQUFHWixTQUFTLENBQUMxSCxPQUFWLEdBQW9CNkMsWUFBNUM7O0FBRUEsWUFBSWlHLE9BQU8sR0FBR3BCLFNBQVMsQ0FBQzVILEtBQVYsR0FBa0IrQyxZQUE1QixHQUEyQ2dCLGFBQTNDLElBQ0csQ0FBQywrQkFBZWlFLFNBQWYsQ0FESixJQUVHakUsYUFBYSxHQUFHLENBRnZCLEVBRTBCO0FBQ3RCLGlCQUFPeUYsR0FBUDtBQUNIOztBQUNEaEIsUUFBQUEsV0FBVyxJQUFJWixTQUFTLENBQUN0SCxRQUFWLEdBQXFCeUMsWUFBckIsR0FBb0NVLFNBQW5EOztBQUNBLFlBQUl1RSxTQUFTLEtBQUssSUFBZCxJQUNHLCtCQUFlQSxTQUFmLENBREgsSUFFRyw2QkFBYUEsU0FBYixDQUZQLEVBRWdDO0FBQzVCO0FBQ0g7O0FBQ0R3QixRQUFBQSxHQUFHO0FBQ047O0FBRUQsYUFBT0EsR0FBUDtBQUNILEtBcFRzQjtBQXNUdkJDLElBQUFBLHdCQXRUdUIsc0NBc1RLO0FBQ3hCLGFBQU8sS0FBS3RDLGtCQUFMLENBQXdCLEtBQUtrQyxnQkFBN0IsQ0FBUDtBQUNILEtBeFRzQjtBQTBUdkJLLElBQUFBLHdCQTFUdUIsc0NBMFRLO0FBQ3hCLGFBQU8sS0FBS3ZDLGtCQUFMLENBQXdCLEtBQUtpQyxnQkFBN0IsQ0FBUDtBQUNILEtBNVRzQjtBQThUdkJqQixJQUFBQSxzQkE5VHVCLGtDQThUQ1EsV0E5VEQsRUE4VHNCcEgsTUE5VHRCLEVBOFRvQztBQUN2RCxVQUFJb0gsV0FBVyxJQUFJeEcsWUFBWSxDQUFDMEUsTUFBaEMsRUFBd0M7QUFDcEMsWUFBTThDLE9BQU8sR0FBRyxJQUFJakksVUFBSixFQUFoQjs7QUFDQVMsUUFBQUEsWUFBWSxDQUFDK0YsSUFBYixDQUFrQnlCLE9BQWxCO0FBQ0g7O0FBRUR4SCxNQUFBQSxZQUFZLENBQUN3RyxXQUFELENBQVosV0FBaUNwSCxNQUFqQztBQUNBWSxNQUFBQSxZQUFZLENBQUN3RyxXQUFELENBQVosQ0FBMEJoSCxLQUExQixHQUFrQyxLQUFsQztBQUNILEtBdFVzQjtBQXdVdkJzSCxJQUFBQSxpQkF4VXVCLDZCQXdVSjNILGlCQXhVSSxFQXdVa0N1RyxjQXhVbEMsRUF3VXdERyxTQXhVeEQsRUF3VTJFVyxXQXhVM0UsRUF3VWdHN0csU0F4VWhHLEVBd1VtSDtBQUN0SSxVQUFJNkcsV0FBVyxJQUFJeEcsWUFBWSxDQUFDMEUsTUFBaEMsRUFBd0M7QUFDcEMsWUFBTThDLE9BQU8sR0FBRyxJQUFJakksVUFBSixFQUFoQjs7QUFDQVMsUUFBQUEsWUFBWSxDQUFDK0YsSUFBYixDQUFrQnlCLE9BQWxCO0FBQ0g7O0FBRUQsVUFBTUMsTUFBTSxHQUFHNUIsU0FBUyxDQUFDeEcsVUFBVixDQUFxQixDQUFyQixDQUFmO0FBQ0FXLE1BQUFBLFlBQVksQ0FBQ3dHLFdBQUQsQ0FBWixDQUEwQjdHLFNBQTFCLEdBQXNDQSxTQUF0QztBQUNBSyxNQUFBQSxZQUFZLENBQUN3RyxXQUFELENBQVosV0FBaUNYLFNBQWpDO0FBQ0E3RixNQUFBQSxZQUFZLENBQUN3RyxXQUFELENBQVosQ0FBMEJoSCxLQUExQixHQUFrQ0wsaUJBQWlCLENBQUNzSSxNQUFELENBQWpCLENBQTBCdkosZUFBNUQ7QUFDQThCLE1BQUFBLFlBQVksQ0FBQ3dHLFdBQUQsQ0FBWixDQUEwQi9HLFNBQTFCLEdBQXNDaUcsY0FBYyxDQUFDckMsQ0FBckQ7QUFDQXJELE1BQUFBLFlBQVksQ0FBQ3dHLFdBQUQsQ0FBWixDQUEwQjlHLFNBQTFCLEdBQXNDZ0csY0FBYyxDQUFDcEMsQ0FBckQ7QUFDSCxLQXBWc0I7QUFzVnZCa0IsSUFBQUEsVUF0VnVCLHdCQXNWVDtBQUNWaEUsTUFBQUEsa0JBQWtCLEdBQUcsQ0FBckI7QUFDQVAsTUFBQUEsV0FBVyxDQUFDeUUsTUFBWixHQUFxQixDQUFyQjs7QUFFQSxVQUFJLENBQUM3RCx1QkFBTCxFQUE4QjtBQUMxQixhQUFLeUcsd0JBQUw7QUFDSCxPQUZELE1BRU87QUFDSCxhQUFLQyx3QkFBTDtBQUNIOztBQUVELFdBQUtHLHVCQUFMLEdBVlUsQ0FZVjs7O0FBQ0EsVUFBSWxHLFNBQVMsS0FBSzBDLHlCQUFTeUQsTUFBM0IsRUFBbUM7QUFDL0IsWUFBSTFHLFNBQVMsR0FBRyxDQUFaLElBQWlCLEtBQUsyRyxnQkFBTCxFQUFyQixFQUE4QztBQUMxQyxlQUFLQyx5QkFBTCxDQUErQixLQUFLRCxnQkFBcEM7QUFDSDtBQUNKOztBQUVELFVBQUksQ0FBQyxLQUFLRSxZQUFMLEVBQUwsRUFBMEI7QUFDdEIsWUFBSXRHLFNBQVMsS0FBSzBDLHlCQUFTeUQsTUFBM0IsRUFBbUM7QUFDL0IsZUFBS0UseUJBQUwsQ0FBK0IsS0FBS0Usa0JBQXBDO0FBQ0g7QUFDSjtBQUNKLEtBOVdzQjtBQWdYdkJDLElBQUFBLGtCQWhYdUIsOEJBZ1hIdEUsUUFoWEcsRUFnWGU7QUFDbEMsVUFBSXVFLG1CQUFtQixHQUFHLElBQTFCOztBQUNBLFVBQUksQ0FBQ3ZFLFFBQUwsRUFBZTtBQUNYQSxRQUFBQSxRQUFRLEdBQUcsR0FBWDtBQUNBdUUsUUFBQUEsbUJBQW1CLEdBQUcsS0FBdEI7QUFDSDs7QUFDRGhILE1BQUFBLFNBQVMsR0FBR3lDLFFBQVo7O0FBRUEsVUFBSXVFLG1CQUFKLEVBQXlCO0FBQ3JCLGFBQUs5RixjQUFMO0FBQ0g7QUFDSixLQTNYc0I7QUE2WHZCMEYsSUFBQUEseUJBN1h1QixxQ0E2WElLLE1BN1hKLEVBNlhzQjtBQUN6QyxVQUFNeEUsUUFBUSxHQUFHekMsU0FBakI7QUFDQSxVQUFNa0gsa0JBQWtCLEdBQUc1RyxXQUEzQjtBQUNBLFVBQU11QixTQUFTLEdBQUd6QyxVQUFsQjtBQUVBLFVBQUl5RSxDQUFDLEdBQUcsQ0FBUjtBQUNBLFVBQU1zRCxvQkFBb0IsR0FBR3RGLFNBQVMsR0FBR0EsU0FBUyxDQUFDdUYscUJBQVYsRUFBSCxHQUF1QyxFQUE3RTtBQUNBLFVBQUlDLElBQUksR0FBRyxJQUFYOztBQUVBLGFBQU9KLE1BQU0sRUFBYixFQUFpQjtBQUNiLFVBQUVwRCxDQUFGO0FBRUEsWUFBTXlELFdBQVcsR0FBRzdFLFFBQVEsR0FBR29CLENBQS9CO0FBQ0F3RCxRQUFBQSxJQUFJLEdBQUcsS0FBUDs7QUFDQSxZQUFJQyxXQUFXLElBQUksQ0FBbkIsRUFBc0I7QUFDbEI7QUFDSDs7QUFFRCxZQUFNQyxLQUFLLEdBQUdELFdBQVcsR0FBRzdFLFFBQTVCOztBQUNBLFlBQUlaLFNBQUosRUFBZTtBQUNYQSxVQUFBQSxTQUFTLENBQUMyRix1QkFBVixDQUFrQ0wsb0JBQWxDO0FBQ0F0RixVQUFBQSxTQUFTLENBQUM0Rix5QkFBVixDQUFvQ0YsS0FBcEM7QUFDSDs7QUFDRGpILFFBQUFBLFdBQVcsR0FBRzRHLGtCQUFrQixHQUFHSyxLQUFuQzs7QUFDQSxZQUFJLENBQUMzSCx1QkFBTCxFQUE4QjtBQUMxQixlQUFLeUcsd0JBQUw7QUFDSCxTQUZELE1BRU87QUFDSCxlQUFLQyx3QkFBTDtBQUNIOztBQUNELGFBQUtHLHVCQUFMO0FBQ0g7O0FBRURuRyxNQUFBQSxXQUFXLEdBQUc0RyxrQkFBZDs7QUFDQSxVQUFJckYsU0FBSixFQUFlO0FBQ1hBLFFBQUFBLFNBQVMsQ0FBQzJGLHVCQUFWLENBQWtDTCxvQkFBbEM7QUFDSDs7QUFFRCxVQUFJLENBQUNFLElBQUwsRUFBVztBQUNQLFlBQUk1RSxRQUFRLEdBQUdvQixDQUFYLElBQWdCLENBQXBCLEVBQXVCO0FBQ25CLGVBQUtrRCxrQkFBTCxDQUF3QnRFLFFBQVEsR0FBR29CLENBQW5DO0FBQ0g7QUFDSjtBQUNKLEtBdmFzQjtBQXlhdkI4QyxJQUFBQSxnQkF6YXVCLDhCQXlhSDtBQUNoQixVQUFJcEgsa0JBQWtCLEdBQUdXLFlBQVksQ0FBQ3JELE1BQXRDLEVBQThDO0FBQzFDLGVBQU8sSUFBUDtBQUNILE9BRkQsTUFFTztBQUNILGVBQU8sS0FBUDtBQUNIO0FBQ0osS0EvYXNCO0FBaWJ2QmlLLElBQUFBLGtCQWpidUIsZ0NBaWJEO0FBQ2xCLFVBQUksQ0FBQzFILFVBQUwsRUFBZ0I7QUFDWjtBQUNIOztBQUVELFVBQUlzSSxXQUFXLEdBQUcsS0FBbEI7O0FBQ0EsV0FBSyxJQUFJQyxHQUFHLEdBQUcsQ0FBVixFQUFhQyxDQUFDLEdBQUc3SCxPQUFPLENBQUMwRCxNQUE5QixFQUFzQ2tFLEdBQUcsR0FBR0MsQ0FBNUMsRUFBK0MsRUFBRUQsR0FBakQsRUFBc0Q7QUFDbEQsWUFBTUUsVUFBVSxHQUFHOUksWUFBWSxDQUFDNEksR0FBRCxDQUEvQjs7QUFDQSxZQUFJRSxVQUFVLENBQUN0SixLQUFmLEVBQXNCO0FBQ2xCLGNBQU1pRyxTQUFTLEdBQUdwRixVQUFVLENBQUNvRywwQkFBWCxDQUFzQ3FDLFVBQVUsUUFBaEQsQ0FBbEI7O0FBQ0EsY0FBSSxDQUFDckQsU0FBTCxFQUFnQjtBQUNaO0FBQ0g7O0FBRUQsY0FBTXNELEVBQUUsR0FBR0QsVUFBVSxDQUFDckosU0FBWCxHQUF1QmdHLFNBQVMsQ0FBQzVILEtBQVYsR0FBa0IsQ0FBbEIsR0FBc0IrQyxZQUF4RDtBQUNBLGNBQU1qQixTQUFTLEdBQUdtSixVQUFVLENBQUNuSixTQUE3Qjs7QUFDQSxjQUFJK0IsV0FBVyxHQUFHLENBQWxCLEVBQXFCO0FBQ2pCLGdCQUFJLENBQUNELFdBQUwsRUFBa0I7QUFDZCxrQkFBSXNILEVBQUUsR0FBRzVILFlBQVksQ0FBQ3RELEtBQXRCLEVBQTZCO0FBQ3pCOEssZ0JBQUFBLFdBQVcsR0FBRyxJQUFkO0FBQ0E7QUFDSDtBQUNKLGFBTEQsTUFLTztBQUNILGtCQUFNSyxTQUFTLEdBQUcvSSxXQUFXLENBQUNOLFNBQUQsQ0FBN0I7O0FBQ0Esa0JBQUlxSixTQUFTLEdBQUc3SCxZQUFZLENBQUN0RCxLQUF6QixLQUFtQ2tMLEVBQUUsR0FBRzVILFlBQVksQ0FBQ3RELEtBQWxCLElBQTJCa0wsRUFBRSxHQUFHLENBQW5FLENBQUosRUFBMkU7QUFDdkVKLGdCQUFBQSxXQUFXLEdBQUcsSUFBZDtBQUNBO0FBQ0g7QUFDSjtBQUNKO0FBQ0o7QUFDSjs7QUFFRCxhQUFPQSxXQUFQO0FBQ0gsS0FuZHNCO0FBcWR2Qk0sSUFBQUEsb0JBcmR1QixnQ0FxZERGLEVBcmRDLEVBcWRXcEosU0FyZFgsRUFxZDhCO0FBQ2pELFVBQU1xSixTQUFTLEdBQUcvSSxXQUFXLENBQUNOLFNBQUQsQ0FBN0I7QUFDQSxVQUFNdUosZUFBZSxHQUFJSCxFQUFFLEdBQUc1SCxZQUFZLENBQUN0RCxLQUFsQixJQUEyQmtMLEVBQUUsR0FBRyxDQUF6RDs7QUFFQSxVQUFJLENBQUN0SCxXQUFMLEVBQWtCO0FBQ2QsZUFBT3lILGVBQVA7QUFDSCxPQUZELE1BRU87QUFDSCxlQUFRRixTQUFTLEdBQUc3SCxZQUFZLENBQUN0RCxLQUF6QixJQUFrQ3FMLGVBQTFDO0FBQ0g7QUFDSixLQTlkc0I7QUFnZXZCcEIsSUFBQUEsWUFoZXVCLDBCQWdlUDtBQUNaLFVBQUksQ0FBQ2hJLEtBQUwsRUFBWTtBQUNSLGVBQU8sS0FBUDtBQUNIOztBQUVELFVBQU1YLGlCQUFpQixHQUFHa0IsVUFBVSxHQUFHQSxVQUFVLENBQUNsQixpQkFBZCxHQUFrQyxFQUF0RTtBQUVBLFVBQU1nSyxPQUFPLEdBQUdySSxZQUFoQjtBQUVBLFVBQU11QixJQUFJLEdBQUd2QyxLQUFLLENBQUN1QyxJQUFuQjtBQUNBLFVBQU1MLFVBQVUsR0FBR2xDLEtBQUssQ0FBQ2tDLFVBQXpCO0FBQ0FBLE1BQUFBLFVBQVUsQ0FBQ29ILFVBQVgsR0FBd0JwSCxVQUFVLENBQUNxSCxXQUFYLEdBQXlCckgsVUFBVSxDQUFDc0gsV0FBWCxHQUF5QixDQUExRTtBQUVBLFVBQU1DLFdBQVcsR0FBR2xILElBQUksQ0FBQ21ILGNBQUwsRUFBcEI7QUFDQSxVQUFNN0YsV0FBVyxHQUFHeEMsWUFBcEI7QUFDQSxVQUFNc0ksSUFBSSxHQUFHRixXQUFXLENBQUNsRyxDQUFaLEdBQWdCTSxXQUFXLENBQUM5RixLQUF6QztBQUNBLFVBQU02TCxJQUFJLEdBQUdILFdBQVcsQ0FBQ2pHLENBQVosR0FBZ0JLLFdBQVcsQ0FBQzdGLE1BQXpDO0FBRUEsVUFBSTZMLEdBQUcsR0FBRyxJQUFWOztBQUNBLFdBQUssSUFBSWYsR0FBRyxHQUFHLENBQVYsRUFBYUMsQ0FBQyxHQUFHN0gsT0FBTyxDQUFDMEQsTUFBOUIsRUFBc0NrRSxHQUFHLEdBQUdDLENBQTVDLEVBQStDLEVBQUVELEdBQWpELEVBQXNEO0FBQ2xELFlBQU1FLFVBQVUsR0FBRzlJLFlBQVksQ0FBQzRJLEdBQUQsQ0FBL0I7O0FBQ0EsWUFBSSxDQUFDRSxVQUFVLENBQUN0SixLQUFoQixFQUF1QjtBQUFFO0FBQVc7O0FBQ3BDLFlBQU1pRyxTQUFTLEdBQUd0RyxpQkFBaUIsQ0FBQzJKLFVBQVUsUUFBVixDQUFnQnpKLFVBQWhCLENBQTJCLENBQTNCLENBQUQsQ0FBbkM7O0FBQ0EsWUFBSSxDQUFDb0csU0FBTCxFQUFlO0FBQ1hpQixVQUFBQSxPQUFPLENBQUNrRCxJQUFSLENBQWEsd0NBQWI7QUFDQTtBQUNIOztBQUVEaEssUUFBQUEsUUFBUSxDQUFDOUIsTUFBVCxHQUFrQjJILFNBQVMsQ0FBQzNILE1BQTVCO0FBQ0E4QixRQUFBQSxRQUFRLENBQUMvQixLQUFULEdBQWlCNEgsU0FBUyxDQUFDNUgsS0FBM0I7QUFDQStCLFFBQUFBLFFBQVEsQ0FBQ3lELENBQVQsR0FBYW9DLFNBQVMsQ0FBQzlILENBQXZCO0FBQ0FpQyxRQUFBQSxRQUFRLENBQUMwRCxDQUFULEdBQWFtQyxTQUFTLENBQUM3SCxDQUF2QjtBQUVBLFlBQUlpTSxFQUFFLEdBQUdmLFVBQVUsQ0FBQ3BKLFNBQVgsR0FBdUJlLGNBQWhDOztBQUVBLFlBQUlrQixZQUFZLEdBQUcsQ0FBbkIsRUFBc0I7QUFDbEIsY0FBSWtJLEVBQUUsR0FBR25KLGFBQVQsRUFBd0I7QUFDcEIsZ0JBQU1vSixPQUFPLEdBQUdELEVBQUUsR0FBR25KLGFBQXJCO0FBQ0FkLFlBQUFBLFFBQVEsQ0FBQzBELENBQVQsSUFBY3dHLE9BQWQ7QUFDQWxLLFlBQUFBLFFBQVEsQ0FBQzlCLE1BQVQsSUFBbUJnTSxPQUFuQjtBQUNBRCxZQUFBQSxFQUFFLEdBQUdBLEVBQUUsR0FBR0MsT0FBVjtBQUNIOztBQUVELGNBQUlELEVBQUUsR0FBR3BFLFNBQVMsQ0FBQzNILE1BQVYsR0FBbUI4QyxZQUF4QixHQUF1Q0QsZ0JBQTNDLEVBQTZEO0FBQ3pEZixZQUFBQSxRQUFRLENBQUM5QixNQUFULEdBQW1CK0wsRUFBRSxHQUFHbEosZ0JBQU4sR0FBMEIsQ0FBMUIsR0FBK0JrSixFQUFFLEdBQUdsSixnQkFBdEQ7QUFDSDtBQUNKOztBQUVELFlBQU1oQixTQUFTLEdBQUdtSixVQUFVLENBQUNuSixTQUE3QjtBQUNBLFlBQU1vSixFQUFFLEdBQUdELFVBQVUsQ0FBQ3JKLFNBQVgsR0FBdUJnRyxTQUFTLENBQUM1SCxLQUFWLEdBQWtCLENBQWxCLEdBQXNCK0MsWUFBN0MsR0FBNERWLGFBQWEsQ0FBQ1AsU0FBRCxDQUFwRjs7QUFFQSxZQUFJK0IsV0FBVyxHQUFHLENBQWxCLEVBQXFCO0FBQ2pCLGNBQUksS0FBS3VILG9CQUFMLENBQTBCRixFQUExQixFQUE4QnBKLFNBQTlCLENBQUosRUFBOEM7QUFDMUMsZ0JBQUk2QixTQUFTLEtBQUswQyx5QkFBUzZGLEtBQTNCLEVBQWtDO0FBQzlCbkssY0FBQUEsUUFBUSxDQUFDL0IsS0FBVCxHQUFpQixDQUFqQjtBQUNILGFBRkQsTUFFTyxJQUFJMkQsU0FBUyxLQUFLMEMseUJBQVN5RCxNQUEzQixFQUFtQztBQUN0QyxrQkFBSXhHLFlBQVksQ0FBQ3RELEtBQWIsR0FBcUI0SCxTQUFTLENBQUM1SCxLQUFuQyxFQUEwQztBQUN0QzhMLGdCQUFBQSxHQUFHLEdBQUcsS0FBTjtBQUNBO0FBQ0gsZUFIRCxNQUdPO0FBQ0gvSixnQkFBQUEsUUFBUSxDQUFDL0IsS0FBVCxHQUFpQixDQUFqQjtBQUNIO0FBQ0o7QUFDSjtBQUNKOztBQUVELFlBQUlpRCxZQUFZLElBQUtsQixRQUFRLENBQUM5QixNQUFULEdBQWtCLENBQW5DLElBQXdDOEIsUUFBUSxDQUFDL0IsS0FBVCxHQUFpQixDQUE3RCxFQUFnRTtBQUM1RCxjQUFNbU0sU0FBUyxHQUFHbEosWUFBWSxDQUFDa0osU0FBYixFQUFsQjs7QUFFQSxjQUFNQyxZQUFZLEdBQUduSixZQUFZLENBQUNvSixlQUFiLEVBQXJCOztBQUNBLGNBQU1oSCxJQUFJLEdBQUdwQyxZQUFZLENBQUNxSixPQUFiLEVBQWI7O0FBQ0EsY0FBTUMsTUFBTSxHQUFHdEosWUFBWSxDQUFDdUosU0FBYixFQUFmOztBQUNBLGNBQU1DLFdBQVcsR0FBR0YsTUFBTSxDQUFDL0csQ0FBUCxHQUFXLENBQUM0RyxZQUFZLENBQUNwTSxLQUFiLEdBQXFCcUYsSUFBSSxDQUFDckYsS0FBM0IsSUFBb0MsQ0FBbkU7QUFDQSxjQUFNME0sVUFBVSxHQUFHSCxNQUFNLENBQUM5RyxDQUFQLEdBQVcsQ0FBQzJHLFlBQVksQ0FBQ25NLE1BQWIsR0FBc0JvRixJQUFJLENBQUNwRixNQUE1QixJQUFzQyxDQUFwRTs7QUFFQSxjQUFJLENBQUNrTSxTQUFMLEVBQWdCO0FBQ1pwSyxZQUFBQSxRQUFRLENBQUN5RCxDQUFULElBQWVILElBQUksQ0FBQ0csQ0FBTCxHQUFTaUgsV0FBeEI7QUFDQTFLLFlBQUFBLFFBQVEsQ0FBQzBELENBQVQsSUFBZUosSUFBSSxDQUFDSSxDQUFMLEdBQVNpSCxVQUF4QjtBQUNILFdBSEQsTUFHTztBQUNILGdCQUFNQyxTQUFTLEdBQUc1SyxRQUFRLENBQUN5RCxDQUEzQjtBQUNBekQsWUFBQUEsUUFBUSxDQUFDeUQsQ0FBVCxHQUFhSCxJQUFJLENBQUNHLENBQUwsR0FBU0gsSUFBSSxDQUFDcEYsTUFBZCxHQUF1QjhCLFFBQVEsQ0FBQzBELENBQWhDLEdBQW9DMUQsUUFBUSxDQUFDOUIsTUFBN0MsR0FBc0R5TSxVQUFuRTtBQUNBM0ssWUFBQUEsUUFBUSxDQUFDMEQsQ0FBVCxHQUFha0gsU0FBUyxHQUFHdEgsSUFBSSxDQUFDSSxDQUFqQixHQUFxQmdILFdBQWxDOztBQUNBLGdCQUFJMUssUUFBUSxDQUFDMEQsQ0FBVCxHQUFhLENBQWpCLEVBQW9CO0FBQ2hCMUQsY0FBQUEsUUFBUSxDQUFDOUIsTUFBVCxHQUFrQjhCLFFBQVEsQ0FBQzlCLE1BQVQsR0FBa0J5TSxVQUFwQztBQUNIO0FBQ0o7O0FBRUQsY0FBTUUsZUFBZSxHQUFHM0IsVUFBVSxDQUFDckosU0FBWCxHQUF1QlMsYUFBYSxDQUFDNEksVUFBVSxDQUFDbkosU0FBWixDQUE1RDtBQUNBLGVBQUsrSyxVQUFMLENBQWdCNUssS0FBaEIsRUFBdUJxSixPQUF2QixFQUFnQ3ZKLFFBQWhDLEVBQTBDb0ssU0FBMUMsRUFBcURTLGVBQWUsR0FBR2hCLElBQXZFLEVBQTZFSSxFQUFFLEdBQUdILElBQWxGLEVBQXdGOUksWUFBeEY7QUFDSDtBQUNKOztBQUVELGFBQU8rSSxHQUFQO0FBQ0gsS0E3akJzQjtBQStqQnZCZSxJQUFBQSxVQS9qQnVCLHNCQStqQlgzSSxJQS9qQlcsRUErakJMb0gsT0EvakJLLEVBK2pCSWpHLElBL2pCSixFQStqQlV5SCxPQS9qQlYsRUErakJtQnRILENBL2pCbkIsRUErakJzQkMsQ0EvakJ0QixFQStqQnlCa0YsS0EvakJ6QixFQStqQmdDLENBQ3RELENBaGtCc0I7QUFra0J2QmQsSUFBQUEsdUJBbGtCdUIscUNBa2tCSTtBQUN2QnhILE1BQUFBLGFBQWEsQ0FBQ3dFLE1BQWQsR0FBdUIsQ0FBdkI7O0FBRUEsY0FBUXRELE9BQVI7QUFDSSxhQUFLd0osd0NBQXdCQyxJQUE3QjtBQUNJLGVBQUssSUFBSS9GLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUd2RSxjQUFwQixFQUFvQyxFQUFFdUUsQ0FBdEMsRUFBeUM7QUFDckM1RSxZQUFBQSxhQUFhLENBQUM2RixJQUFkLENBQW1CLENBQW5CO0FBQ0g7O0FBQ0Q7O0FBQ0osYUFBSzZFLHdDQUF3QkUsTUFBN0I7QUFDSSxlQUFLLElBQUloRyxHQUFDLEdBQUcsQ0FBUixFQUFXK0QsQ0FBQyxHQUFHNUksV0FBVyxDQUFDeUUsTUFBaEMsRUFBd0NJLEdBQUMsR0FBRytELENBQTVDLEVBQStDL0QsR0FBQyxFQUFoRCxFQUFvRDtBQUNoRDVFLFlBQUFBLGFBQWEsQ0FBQzZGLElBQWQsQ0FBbUIsQ0FBQzVFLFlBQVksQ0FBQ3RELEtBQWIsR0FBcUJvQyxXQUFXLENBQUM2RSxHQUFELENBQWpDLElBQXdDLENBQTNEO0FBQ0g7O0FBQ0Q7O0FBQ0osYUFBSzhGLHdDQUF3QkcsS0FBN0I7QUFDSSxlQUFLLElBQUlqRyxHQUFDLEdBQUcsQ0FBUixFQUFXK0QsRUFBQyxHQUFHNUksV0FBVyxDQUFDeUUsTUFBaEMsRUFBd0NJLEdBQUMsR0FBRytELEVBQTVDLEVBQStDL0QsR0FBQyxFQUFoRCxFQUFvRDtBQUNoRDVFLFlBQUFBLGFBQWEsQ0FBQzZGLElBQWQsQ0FBbUI1RSxZQUFZLENBQUN0RCxLQUFiLEdBQXFCb0MsV0FBVyxDQUFDNkUsR0FBRCxDQUFuRDtBQUNIOztBQUNEOztBQUNKO0FBQ0k7QUFqQlI7O0FBb0JBLGNBQVF6RCxPQUFSO0FBQ0ksYUFBSzJKLHNDQUFzQkMsR0FBM0I7QUFDSXhLLFVBQUFBLGNBQWMsR0FBR1UsWUFBWSxDQUFDckQsTUFBOUI7QUFDQTs7QUFDSixhQUFLa04sc0NBQXNCRixNQUEzQjtBQUNJckssVUFBQUEsY0FBYyxHQUFHLENBQUNVLFlBQVksQ0FBQ3JELE1BQWIsR0FBc0IwQyxrQkFBdkIsSUFBNkMsQ0FBOUQ7QUFDQTs7QUFDSixhQUFLd0ssc0NBQXNCRSxNQUEzQjtBQUNJekssVUFBQUEsY0FBYyxHQUFHRCxrQkFBakI7QUFDQTs7QUFDSjtBQUNJO0FBWFI7QUFhSCxLQXRtQnNCO0FBd21CdkI4RCxJQUFBQSwyQkF4bUJ1Qix5Q0F3bUJRO0FBQzNCLFVBQUk2RyxRQUFRLEdBQUdoSyxZQUFZLENBQUN0RCxLQUE1QjtBQUNBLFVBQUl1TixTQUFTLEdBQUdqSyxZQUFZLENBQUNyRCxNQUE3Qjs7QUFFQSxVQUFJMEQsU0FBUyxLQUFLMEMseUJBQVNFLGFBQTNCLEVBQTBDO0FBQ3RDZ0gsUUFBQUEsU0FBUyxHQUFHLENBQVo7QUFDSDs7QUFFRCxVQUFJNUosU0FBUyxLQUFLMEMseUJBQVNDLElBQTNCLEVBQWlDO0FBQzdCZ0gsUUFBQUEsUUFBUSxHQUFHLENBQVg7QUFDQUMsUUFBQUEsU0FBUyxHQUFHLENBQVo7QUFDSDs7QUFFRDFKLE1BQUFBLFdBQVcsR0FBR3lKLFFBQWQ7QUFDQXhKLE1BQUFBLFlBQVksR0FBR3lKLFNBQWY7QUFDQWpMLE1BQUFBLGdCQUFnQixDQUFDdEMsS0FBakIsR0FBeUJzTixRQUF6QjtBQUNBaEwsTUFBQUEsZ0JBQWdCLENBQUNyQyxNQUFqQixHQUEwQnNOLFNBQTFCO0FBQ0F4SixNQUFBQSxhQUFhLEdBQUd1SixRQUFoQjtBQUNIO0FBMW5Cc0IsR0FBcEI7O2lCQTZuQlF0SixXIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxyXG5cclxuIGh0dHA6Ly93d3cuY29jb3MuY29tXHJcblxyXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxyXG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXHJcbiB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXHJcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxyXG4gbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xyXG4gdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxyXG4gc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXHJcblxyXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cclxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXHJcblxyXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXHJcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcclxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcclxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXHJcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXHJcbiBUSEUgU09GVFdBUkUuXHJcbiovXHJcblxyXG4vKipcclxuICogQGhpZGRlblxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEJpdG1hcEZvbnQsIElDb25maWcgfSBmcm9tICcuLi8uLi8uLi9jb3JlL2Fzc2V0cy9iaXRtYXAtZm9udCc7XHJcbmltcG9ydCB7IFNwcml0ZUZyYW1lIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9hc3NldHMvc3ByaXRlLWZyYW1lJztcclxuaW1wb3J0IHsgaXNVbmljb2RlQ0pLLCBpc1VuaWNvZGVTcGFjZSB9IGZyb20gJy4uLy4uLy4uL2NvcmUvdXRpbHMvdGV4dC11dGlscyc7XHJcbmltcG9ydCB7IFJlY3QsIFNpemUsIFZlYzIgfSBmcm9tICcuLi8uLi8uLi9jb3JlL21hdGgnO1xyXG5pbXBvcnQgeyBIb3Jpem9udGFsVGV4dEFsaWdubWVudCwgVmVydGljYWxUZXh0QWxpZ25tZW50IH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9sYWJlbC1jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBMYWJlbENvbXBvbmVudCwgT3ZlcmZsb3cgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2xhYmVsLWNvbXBvbmVudCc7XHJcbmltcG9ydCB7IGpzIH0gZnJvbSAnLi4vLi4vLi4vY29yZS91dGlscyc7XHJcblxyXG5jbGFzcyBGb250TGV0dGVyRGVmaW5pdGlvbiB7XHJcbiAgICBwdWJsaWMgdSA9IDA7XHJcbiAgICBwdWJsaWMgdiA9IDA7XHJcbiAgICBwdWJsaWMgd2lkdGggPSAwO1xyXG4gICAgcHVibGljIGhlaWdodCA9IDA7XHJcbiAgICBwdWJsaWMgb2Zmc2V0WCA9IDA7XHJcbiAgICBwdWJsaWMgb2Zmc2V0WSA9IDA7XHJcbiAgICBwdWJsaWMgdGV4dHVyZUlEID0gMDtcclxuICAgIHB1YmxpYyB2YWxpZERlZmluaXRpb24gPSBmYWxzZTtcclxuICAgIHB1YmxpYyB4QWR2YW5jZSA9IDA7XHJcbn1cclxuXHJcbmludGVyZmFjZSBJTGV0dGVyRGVmaW5pdGlvbiB7XHJcbiAgICBba2V5OiBzdHJpbmddOiBGb250TGV0dGVyRGVmaW5pdGlvbjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEZvbnRBdGxhcyB7XHJcbiAgICBnZXQgbGV0dGVyRGVmaW5pdGlvbnMgKCl7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xldHRlckRlZmluaXRpb25zO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2xldHRlckRlZmluaXRpb25zOiBJTGV0dGVyRGVmaW5pdGlvbiA9IHt9O1xyXG5cclxuICAgIHB1YmxpYyBhZGRMZXR0ZXJEZWZpbml0aW9ucyAobGV0dGVyOiBzdHJpbmcsIGxldHRlckRlZmluaXRpb246IEZvbnRMZXR0ZXJEZWZpbml0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5fbGV0dGVyRGVmaW5pdGlvbnNbbGV0dGVyXSA9IGxldHRlckRlZmluaXRpb247XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsb25lTGV0dGVyRGVmaW5pdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc3QgY29weUxldHRlckRlZmluaXRpb25zOiBJTGV0dGVyRGVmaW5pdGlvbiA9IHt9O1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHRoaXMuX2xldHRlckRlZmluaXRpb25zKSkge1xyXG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IG5ldyBGb250TGV0dGVyRGVmaW5pdGlvbigpO1xyXG4gICAgICAgICAgICBqcy5taXhpbih2YWx1ZSwgdGhpcy5fbGV0dGVyRGVmaW5pdGlvbnNba2V5XSk7XHJcbiAgICAgICAgICAgIGNvcHlMZXR0ZXJEZWZpbml0aW9uc1trZXldID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjb3B5TGV0dGVyRGVmaW5pdGlvbnM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzc2lnbkxldHRlckRlZmluaXRpb25zIChsZXR0ZXJEZWZpbml0aW9uOiBJTGV0dGVyRGVmaW5pdGlvbikge1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHRoaXMuX2xldHRlckRlZmluaXRpb25zKSkge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IGxldHRlckRlZmluaXRpb25ba2V5XTtcclxuICAgICAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLl9sZXR0ZXJEZWZpbml0aW9uc1trZXldO1xyXG4gICAgICAgICAgICBqcy5taXhpbihvbGRWYWx1ZSwgbmV3VmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2NhbGVGb250TGV0dGVyRGVmaW5pdGlvbiAoc2NhbGVGYWN0b3I6IG51bWJlcikge1xyXG4gICAgICAgIGZvciAoY29uc3QgZm9udERlZmluaXRpb24gb2YgT2JqZWN0LmtleXModGhpcy5fbGV0dGVyRGVmaW5pdGlvbnMpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxldHRlckRlZmluaXRpb25zID0gdGhpcy5fbGV0dGVyRGVmaW5pdGlvbnNbZm9udERlZmluaXRpb25dO1xyXG4gICAgICAgICAgICBsZXR0ZXJEZWZpbml0aW9ucy53aWR0aCAqPSBzY2FsZUZhY3RvcjtcclxuICAgICAgICAgICAgbGV0dGVyRGVmaW5pdGlvbnMuaGVpZ2h0ICo9IHNjYWxlRmFjdG9yO1xyXG4gICAgICAgICAgICBsZXR0ZXJEZWZpbml0aW9ucy5vZmZzZXRYICo9IHNjYWxlRmFjdG9yO1xyXG4gICAgICAgICAgICBsZXR0ZXJEZWZpbml0aW9ucy5vZmZzZXRZICo9IHNjYWxlRmFjdG9yO1xyXG4gICAgICAgICAgICBsZXR0ZXJEZWZpbml0aW9ucy54QWR2YW5jZSAqPSBzY2FsZUZhY3RvcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldExldHRlckRlZmluaXRpb25Gb3JDaGFyIChjaGFyOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbGV0dGVyRGVmaW5pdGlvbnNbY2hhci5jaGFyQ29kZUF0KDApXTtcclxuICAgIH1cclxufVxyXG5cclxuY2MuRm9udEF0bGFzID0gRm9udEF0bGFzO1xyXG5cclxuY2xhc3MgTGV0dGVySW5mbyB7XHJcbiAgICBwdWJsaWMgY2hhciA9ICcnO1xyXG4gICAgcHVibGljIHZhbGlkID0gdHJ1ZTtcclxuICAgIHB1YmxpYyBwb3NpdGlvblggPSAwO1xyXG4gICAgcHVibGljIHBvc2l0aW9uWSA9IDA7XHJcbiAgICBwdWJsaWMgbGluZUluZGV4ID0gMDtcclxufVxyXG5cclxuY29uc3QgX3RtcFJlY3QgPSBuZXcgUmVjdCgpO1xyXG5cclxubGV0IF9jb21wOiBMYWJlbENvbXBvbmVudCB8IG51bGwgPSBudWxsO1xyXG5cclxuY29uc3QgX2hvcml6b250YWxLZXJuaW5nOiBudW1iZXJbXSA9IFtdO1xyXG5jb25zdCBfbGV0dGVyc0luZm86IExldHRlckluZm9bXSA9IFtdO1xyXG5jb25zdCBfbGluZXNXaWR0aDogbnVtYmVyW10gPSBbXTtcclxuY29uc3QgX2xpbmVzT2Zmc2V0WDogbnVtYmVyW10gPSBbXTtcclxuY29uc3QgX2xhYmVsRGltZW5zaW9ucyA9IG5ldyBTaXplKCk7XHJcblxyXG5sZXQgX2ZvbnRBdGxhczogRm9udEF0bGFzIHwgbnVsbCA9IG51bGw7XHJcbmxldCBfZm50Q29uZmlnOiBJQ29uZmlnIHwgbnVsbCA9IG51bGw7XHJcbmxldCBfbnVtYmVyT2ZMaW5lcyA9IDA7XHJcbmxldCBfdGV4dERlc2lyZWRIZWlnaHQgPSAwO1xyXG5sZXQgX2xldHRlck9mZnNldFkgPSAwO1xyXG5sZXQgX3RhaWxvcmVkVG9wWSA9IDA7XHJcbmxldCBfdGFpbG9yZWRCb3R0b21ZID0gMDtcclxubGV0IF9ibWZvbnRTY2FsZSA9IDEuMDtcclxuY29uc3QgX2xpbmVCcmVha1dpdGhvdXRTcGFjZXMgPSBmYWxzZTtcclxubGV0IF9zcHJpdGVGcmFtZTogU3ByaXRlRnJhbWV8bnVsbCA9IG51bGw7XHJcbmNvbnN0IF9saW5lU3BhY2luZyA9IDA7XHJcbmxldCBfc3RyaW5nID0gJyc7XHJcbmxldCBfZm9udFNpemUgPSAwO1xyXG5sZXQgX29yaWdpbkZvbnRTaXplID0gMDtcclxuY29uc3QgX2NvbnRlbnRTaXplID0gbmV3IFNpemUoKTtcclxubGV0IF9oQWxpZ24gPSAwO1xyXG5sZXQgX3ZBbGlnbiA9IDA7XHJcbmxldCBfc3BhY2luZ1ggPSAwO1xyXG5sZXQgX2xpbmVIZWlnaHQgPSAwO1xyXG5sZXQgX292ZXJmbG93ID0gMDtcclxubGV0IF9pc1dyYXBUZXh0ID0gZmFsc2U7XHJcbmxldCBfbGFiZWxXaWR0aCA9IDA7XHJcbmxldCBfbGFiZWxIZWlnaHQgPSAwO1xyXG5sZXQgX21heExpbmVXaWR0aCA9IDA7XHJcblxyXG5leHBvcnQgY29uc3QgYm1mb250VXRpbHMgPSB7XHJcbiAgICB1cGRhdGVSZW5kZXJEYXRhIChjb21wOiBMYWJlbENvbXBvbmVudCkge1xyXG4gICAgICAgIGlmICghY29tcC5yZW5kZXJEYXRhIHx8ICFjb21wLnJlbmRlckRhdGEudmVydERpcnR5KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChfY29tcCA9PT0gY29tcCkgeyByZXR1cm47IH1cclxuXHJcbiAgICAgICAgX2NvbXAgPSBjb21wO1xyXG5cclxuICAgICAgICB0aGlzLl91cGRhdGVQcm9wZXJ0aWVzKCk7XHJcbiAgICAgICAgdGhpcy5fdXBkYXRlQ29udGVudCgpO1xyXG5cclxuICAgICAgICBfY29tcC5hY3R1YWxGb250U2l6ZSA9IF9mb250U2l6ZTtcclxuICAgICAgICBfY29tcC5ub2RlLnNldENvbnRlbnRTaXplKF9jb250ZW50U2l6ZSk7XHJcblxyXG4gICAgICAgIF9jb21wLnJlbmRlckRhdGEhLnZlcnREaXJ0eSA9IF9jb21wLnJlbmRlckRhdGEhLnV2RGlydHkgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgX2NvbXAgPSBudWxsO1xyXG5cclxuICAgICAgICB0aGlzLl9yZXNldFByb3BlcnRpZXMoKTtcclxuICAgIH0sXHJcblxyXG4gICAgX3VwZGF0ZUZvbnRTY2FsZSAoKSB7XHJcbiAgICAgICAgX2JtZm9udFNjYWxlID0gX2ZvbnRTaXplIC8gX29yaWdpbkZvbnRTaXplO1xyXG4gICAgfSxcclxuXHJcbiAgICBfdXBkYXRlUHJvcGVydGllcyAoKSB7XHJcbiAgICAgICAgaWYgKCFfY29tcCl7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGZvbnRBc3NldCA9IF9jb21wLmZvbnQgYXMgQml0bWFwRm9udDtcclxuICAgICAgICBpZiAoIWZvbnRBc3NldCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBfc3ByaXRlRnJhbWUgPSBmb250QXNzZXQuc3ByaXRlRnJhbWU7XHJcbiAgICAgICAgX2ZudENvbmZpZyA9IGZvbnRBc3NldC5mbnRDb25maWchO1xyXG5cclxuICAgICAgICBfZm9udEF0bGFzID0gX2NvbXAuZm9udEF0bGFzO1xyXG4gICAgICAgIGlmICghX2ZvbnRBdGxhcykge1xyXG4gICAgICAgICAgICBfZm9udEF0bGFzID0gbmV3IEZvbnRBdGxhcygpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZm9udERpY3QgPSBfZm50Q29uZmlnLmZvbnREZWZEaWN0aW9uYXJ5O1xyXG5cclxuICAgICAgICAgICAgZm9yIChjb25zdCBmb250RGVmIG9mIE9iamVjdC5rZXlzKGZvbnREaWN0KSApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxldHRlckRlZmluaXRpb24gPSBuZXcgRm9udExldHRlckRlZmluaXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCByZWN0ID0gZm9udERpY3RbZm9udERlZl0ucmVjdDtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXR0ZXJEZWZpbml0aW9uLm9mZnNldFggPSBmb250RGljdFtmb250RGVmXS54T2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgbGV0dGVyRGVmaW5pdGlvbi5vZmZzZXRZID0gZm9udERpY3RbZm9udERlZl0ueU9mZnNldDtcclxuICAgICAgICAgICAgICAgIGxldHRlckRlZmluaXRpb24ud2lkdGggPSByZWN0LndpZHRoO1xyXG4gICAgICAgICAgICAgICAgbGV0dGVyRGVmaW5pdGlvbi5oZWlnaHQgPSByZWN0LmhlaWdodDtcclxuICAgICAgICAgICAgICAgIGxldHRlckRlZmluaXRpb24udSA9IHJlY3QueDtcclxuICAgICAgICAgICAgICAgIGxldHRlckRlZmluaXRpb24udiA9IHJlY3QueTtcclxuICAgICAgICAgICAgICAgIC8vIEZJWE1FOiBvbmx5IG9uZSB0ZXh0dXJlIHN1cHBvcnRlZCBmb3Igbm93XHJcbiAgICAgICAgICAgICAgICBsZXR0ZXJEZWZpbml0aW9uLnRleHR1cmVJRCA9IDA7XHJcbiAgICAgICAgICAgICAgICBsZXR0ZXJEZWZpbml0aW9uLnZhbGlkRGVmaW5pdGlvbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBsZXR0ZXJEZWZpbml0aW9uLnhBZHZhbmNlID0gZm9udERpY3RbZm9udERlZl0ueEFkdmFuY2U7XHJcblxyXG4gICAgICAgICAgICAgICAgX2ZvbnRBdGxhcy5hZGRMZXR0ZXJEZWZpbml0aW9ucyhmb250RGVmLCBsZXR0ZXJEZWZpbml0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2NvbXAuZm9udEF0bGFzID0gX2ZvbnRBdGxhcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIF9zdHJpbmcgPSBfY29tcC5zdHJpbmcudG9TdHJpbmcoKTtcclxuICAgICAgICBfZm9udFNpemUgPSBfY29tcC5mb250U2l6ZTtcclxuICAgICAgICBfb3JpZ2luRm9udFNpemUgPSBfZm50Q29uZmlnLmZvbnRTaXplO1xyXG4gICAgICAgIGNvbnN0IGNvbnRlbnRTaXplID0gX2NvbXAubm9kZS5nZXRDb250ZW50U2l6ZSgpO1xyXG4gICAgICAgIF9jb250ZW50U2l6ZS53aWR0aCA9IGNvbnRlbnRTaXplLndpZHRoO1xyXG4gICAgICAgIF9jb250ZW50U2l6ZS5oZWlnaHQgPSBjb250ZW50U2l6ZS5oZWlnaHQ7XHJcbiAgICAgICAgX2hBbGlnbiA9IF9jb21wLmhvcml6b250YWxBbGlnbjtcclxuICAgICAgICBfdkFsaWduID0gX2NvbXAudmVydGljYWxBbGlnbjtcclxuICAgICAgICBfc3BhY2luZ1ggPSBfY29tcC5zcGFjaW5nWDtcclxuICAgICAgICBfb3ZlcmZsb3cgPSBfY29tcC5vdmVyZmxvdztcclxuICAgICAgICBfbGluZUhlaWdodCA9IF9jb21wLmxpbmVIZWlnaHQ7XHJcblxyXG4gICAgICAgIC8vIHNob3VsZCB3cmFwIHRleHRcclxuICAgICAgICBpZiAoX292ZXJmbG93ID09PSBPdmVyZmxvdy5OT05FKSB7XHJcbiAgICAgICAgICAgIF9pc1dyYXBUZXh0ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKF9vdmVyZmxvdyA9PT0gT3ZlcmZsb3cuUkVTSVpFX0hFSUdIVCkge1xyXG4gICAgICAgICAgICBfaXNXcmFwVGV4dCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBfaXNXcmFwVGV4dCA9IF9jb21wLmVuYWJsZVdyYXBUZXh0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fc2V0dXBCTUZvbnRPdmVyZmxvd01ldHJpY3MoKTtcclxuICAgIH0sXHJcblxyXG4gICAgX3Jlc2V0UHJvcGVydGllcyAoKSB7XHJcbiAgICAgICAgX2ZvbnRBdGxhcyA9IG51bGw7XHJcbiAgICAgICAgX2ZudENvbmZpZyA9IG51bGw7XHJcbiAgICAgICAgX3Nwcml0ZUZyYW1lID0gbnVsbDtcclxuICAgIH0sXHJcblxyXG4gICAgX3VwZGF0ZUNvbnRlbnQgKCkge1xyXG4gICAgICAgIHRoaXMuX3VwZGF0ZUZvbnRTY2FsZSgpO1xyXG4gICAgICAgIHRoaXMuX2NvbXB1dGVIb3Jpem9udGFsS2VybmluZ0ZvclRleHQoKTtcclxuICAgICAgICB0aGlzLl9hbGlnblRleHQoKTtcclxuICAgIH0sXHJcblxyXG4gICAgX2NvbXB1dGVIb3Jpem9udGFsS2VybmluZ0ZvclRleHQgKCkge1xyXG4gICAgICAgIGNvbnN0IHN0cmluZyA9IF9zdHJpbmc7XHJcbiAgICAgICAgY29uc3Qgc3RyaW5nTGVuID0gc3RyaW5nLmxlbmd0aDtcclxuXHJcbiAgICAgICAgY29uc3Qga2VybmluZ0RpY3QgPSBfZm50Q29uZmlnIS5rZXJuaW5nRGljdDtcclxuICAgICAgICBjb25zdCBob3Jpem9udGFsS2VybmluZyA9IF9ob3Jpem9udGFsS2VybmluZztcclxuXHJcbiAgICAgICAgbGV0IHByZXYgPSAtMTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0cmluZ0xlbjsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IHN0cmluZy5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgICAgICBjb25zdCBrZXJuaW5nQW1vdW50ID0ga2VybmluZ0RpY3RbKHByZXYgPDwgMTYpIHwgKGtleSAmIDB4ZmZmZildIHx8IDA7XHJcbiAgICAgICAgICAgIGlmIChpIDwgc3RyaW5nTGVuIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgaG9yaXpvbnRhbEtlcm5pbmdbaV0gPSBrZXJuaW5nQW1vdW50O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaG9yaXpvbnRhbEtlcm5pbmdbaV0gPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHByZXYgPSBrZXk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBfbXVsdGlsaW5lVGV4dFdyYXAgKG5leHRUb2tlbkZ1bmM6IEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgY29uc3QgdGV4dExlbiA9IF9zdHJpbmcubGVuZ3RoO1xyXG5cclxuICAgICAgICBsZXQgbGluZUluZGV4ID0gMDtcclxuICAgICAgICBsZXQgbmV4dFRva2VuWCA9IDA7XHJcbiAgICAgICAgbGV0IG5leHRUb2tlblkgPSAwO1xyXG4gICAgICAgIGxldCBsb25nZXN0TGluZSA9IDA7XHJcbiAgICAgICAgbGV0IGxldHRlclJpZ2h0ID0gMDtcclxuXHJcbiAgICAgICAgbGV0IGhpZ2hlc3RZID0gMDtcclxuICAgICAgICBsZXQgbG93ZXN0WSA9IDA7XHJcbiAgICAgICAgbGV0IGxldHRlckRlZjogRm9udExldHRlckRlZmluaXRpb24gfCBudWxsID0gbnVsbDtcclxuICAgICAgICBjb25zdCBsZXR0ZXJQb3NpdGlvbiA9IG5ldyBWZWMyKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3VwZGF0ZUZvbnRTY2FsZSgpO1xyXG5cclxuICAgICAgICBjb25zdCBsZXR0ZXJEZWZpbml0aW9ucyA9IF9mb250QXRsYXMhLmxldHRlckRlZmluaXRpb25zO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGV4dExlbjspIHtcclxuICAgICAgICAgICAgbGV0IGNoYXJhY3RlciA9IF9zdHJpbmcuY2hhckF0KGluZGV4KTtcclxuICAgICAgICAgICAgaWYgKGNoYXJhY3RlciA9PT0gJ1xcbicpIHtcclxuICAgICAgICAgICAgICAgIF9saW5lc1dpZHRoLnB1c2gobGV0dGVyUmlnaHQpO1xyXG4gICAgICAgICAgICAgICAgbGV0dGVyUmlnaHQgPSAwO1xyXG4gICAgICAgICAgICAgICAgbGluZUluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICBuZXh0VG9rZW5YID0gMDtcclxuICAgICAgICAgICAgICAgIG5leHRUb2tlblkgLT0gX2xpbmVIZWlnaHQgKiBfYm1mb250U2NhbGUgKyBfbGluZVNwYWNpbmc7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWNvcmRQbGFjZWhvbGRlckluZm8oaW5kZXgsIGNoYXJhY3Rlcik7XHJcbiAgICAgICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRva2VuTGVuID0gbmV4dFRva2VuRnVuYyhfc3RyaW5nLCBpbmRleCwgdGV4dExlbik7XHJcbiAgICAgICAgICAgIGxldCB0b2tlbkhpZ2hlc3RZID0gaGlnaGVzdFk7XHJcbiAgICAgICAgICAgIGxldCB0b2tlbkxvd2VzdFkgPSBsb3dlc3RZO1xyXG4gICAgICAgICAgICBsZXQgdG9rZW5SaWdodCA9IGxldHRlclJpZ2h0O1xyXG4gICAgICAgICAgICBsZXQgbmV4dExldHRlclggPSBuZXh0VG9rZW5YO1xyXG4gICAgICAgICAgICBsZXQgbmV3TGluZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgdG1wID0gMDsgdG1wIDwgdG9rZW5MZW47ICsrdG1wKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsZXR0ZXJJbmRleCA9IGluZGV4ICsgdG1wO1xyXG4gICAgICAgICAgICAgICAgY2hhcmFjdGVyID0gX3N0cmluZy5jaGFyQXQobGV0dGVySW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoYXJhY3RlciA9PT0gJ1xccicpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWNvcmRQbGFjZWhvbGRlckluZm8obGV0dGVySW5kZXgsIGNoYXJhY3Rlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBsZXR0ZXJEZWYgPSBfZm9udEF0bGFzICYmIF9mb250QXRsYXMuZ2V0TGV0dGVyRGVmaW5pdGlvbkZvckNoYXIoY2hhcmFjdGVyKTtcclxuICAgICAgICAgICAgICAgIGlmICghbGV0dGVyRGVmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVjb3JkUGxhY2Vob2xkZXJJbmZvKGxldHRlckluZGV4LCBjaGFyYWN0ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdDYW5cXCd0IGZpbmQgbGV0dGVyIGRlZmluaXRpb24gaW4gdGV4dHVyZSBhdGxhcyAnICtcclxuICAgICAgICAgICAgICAgICAgICAgX2ZudENvbmZpZyEuYXRsYXNOYW1lICsgJyBmb3IgbGV0dGVyOicgKyBjaGFyYWN0ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGxldHRlclggPSBuZXh0TGV0dGVyWCArIGxldHRlckRlZi5vZmZzZXRYICogX2JtZm9udFNjYWxlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChfaXNXcmFwVGV4dFxyXG4gICAgICAgICAgICAgICAgICAgICYmIF9tYXhMaW5lV2lkdGggPiAwXHJcbiAgICAgICAgICAgICAgICAgICAgJiYgbmV4dFRva2VuWCA+IDBcclxuICAgICAgICAgICAgICAgICAgICAmJiBsZXR0ZXJYICsgbGV0dGVyRGVmLndpZHRoICogX2JtZm9udFNjYWxlID4gX21heExpbmVXaWR0aFxyXG4gICAgICAgICAgICAgICAgICAgICYmICFpc1VuaWNvZGVTcGFjZShjaGFyYWN0ZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX2xpbmVzV2lkdGgucHVzaChsZXR0ZXJSaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0dGVyUmlnaHQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVJbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHRUb2tlblggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHRUb2tlblkgLT0gKF9saW5lSGVpZ2h0ICogX2JtZm9udFNjYWxlICsgX2xpbmVTcGFjaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdMaW5lID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0dGVyUG9zaXRpb24ueCA9IGxldHRlclg7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0dGVyUG9zaXRpb24ueSA9IG5leHRUb2tlblkgLSBsZXR0ZXJEZWYub2Zmc2V0WSAqIF9ibWZvbnRTY2FsZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlY29yZExldHRlckluZm8obGV0dGVyRGVmaW5pdGlvbnMsIGxldHRlclBvc2l0aW9uLCBjaGFyYWN0ZXIsIGxldHRlckluZGV4LCBsaW5lSW5kZXgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChsZXR0ZXJJbmRleCArIDEgPCBfaG9yaXpvbnRhbEtlcm5pbmcubGVuZ3RoICYmIGxldHRlckluZGV4IDwgdGV4dExlbiAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0TGV0dGVyWCArPSBfaG9yaXpvbnRhbEtlcm5pbmdbbGV0dGVySW5kZXggKyAxXTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBuZXh0TGV0dGVyWCArPSBsZXR0ZXJEZWYueEFkdmFuY2UgKiBfYm1mb250U2NhbGUgKyBfc3BhY2luZ1g7XHJcblxyXG4gICAgICAgICAgICAgICAgdG9rZW5SaWdodCA9IGxldHRlclBvc2l0aW9uLnggKyBsZXR0ZXJEZWYud2lkdGggKiBfYm1mb250U2NhbGU7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRva2VuSGlnaGVzdFkgPCBsZXR0ZXJQb3NpdGlvbi55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5IaWdoZXN0WSA9IGxldHRlclBvc2l0aW9uLnk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRva2VuTG93ZXN0WSA+IGxldHRlclBvc2l0aW9uLnkgLSBsZXR0ZXJEZWYuaGVpZ2h0ICogX2JtZm9udFNjYWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5Mb3dlc3RZID0gbGV0dGVyUG9zaXRpb24ueSAtIGxldHRlckRlZi5oZWlnaHQgKiBfYm1mb250U2NhbGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9IC8vIGVuZCBvZiBmb3IgbG9vcFxyXG5cclxuICAgICAgICAgICAgaWYgKG5ld0xpbmUpIHsgY29udGludWU7IH1cclxuXHJcbiAgICAgICAgICAgIG5leHRUb2tlblggPSBuZXh0TGV0dGVyWDtcclxuICAgICAgICAgICAgbGV0dGVyUmlnaHQgPSB0b2tlblJpZ2h0O1xyXG5cclxuICAgICAgICAgICAgaWYgKGhpZ2hlc3RZIDwgdG9rZW5IaWdoZXN0WSkge1xyXG4gICAgICAgICAgICAgICAgaGlnaGVzdFkgPSB0b2tlbkhpZ2hlc3RZO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChsb3dlc3RZID4gdG9rZW5Mb3dlc3RZKSB7XHJcbiAgICAgICAgICAgICAgICBsb3dlc3RZID0gdG9rZW5Mb3dlc3RZO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChsb25nZXN0TGluZSA8IGxldHRlclJpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICBsb25nZXN0TGluZSA9IGxldHRlclJpZ2h0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbmRleCArPSB0b2tlbkxlbjtcclxuICAgICAgICB9IC8vIGVuZCBvZiBmb3IgbG9vcFxyXG5cclxuICAgICAgICBfbGluZXNXaWR0aC5wdXNoKGxldHRlclJpZ2h0KTtcclxuXHJcbiAgICAgICAgX251bWJlck9mTGluZXMgPSBsaW5lSW5kZXggKyAxO1xyXG4gICAgICAgIF90ZXh0RGVzaXJlZEhlaWdodCA9IF9udW1iZXJPZkxpbmVzICogX2xpbmVIZWlnaHQgKiBfYm1mb250U2NhbGU7XHJcbiAgICAgICAgaWYgKF9udW1iZXJPZkxpbmVzID4gMSkge1xyXG4gICAgICAgICAgICBfdGV4dERlc2lyZWRIZWlnaHQgKz0gKF9udW1iZXJPZkxpbmVzIC0gMSkgKiBfbGluZVNwYWNpbmc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBfY29udGVudFNpemUud2lkdGggPSBfbGFiZWxXaWR0aDtcclxuICAgICAgICBfY29udGVudFNpemUuaGVpZ2h0ID0gX2xhYmVsSGVpZ2h0O1xyXG4gICAgICAgIGlmIChfbGFiZWxXaWR0aCA8PSAwKSB7XHJcbiAgICAgICAgICAgIF9jb250ZW50U2l6ZS53aWR0aCA9IHBhcnNlRmxvYXQobG9uZ2VzdExpbmUudG9GaXhlZCgyKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChfbGFiZWxIZWlnaHQgPD0gMCkge1xyXG4gICAgICAgICAgICBfY29udGVudFNpemUuaGVpZ2h0ID0gcGFyc2VGbG9hdChfdGV4dERlc2lyZWRIZWlnaHQudG9GaXhlZCgyKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBfdGFpbG9yZWRUb3BZID0gX2NvbnRlbnRTaXplLmhlaWdodDtcclxuICAgICAgICBfdGFpbG9yZWRCb3R0b21ZID0gMDtcclxuICAgICAgICBpZiAoaGlnaGVzdFkgPiAwKSB7XHJcbiAgICAgICAgICAgIF90YWlsb3JlZFRvcFkgPSBfY29udGVudFNpemUuaGVpZ2h0ICsgaGlnaGVzdFk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsb3dlc3RZIDwgLV90ZXh0RGVzaXJlZEhlaWdodCkge1xyXG4gICAgICAgICAgICBfdGFpbG9yZWRCb3R0b21ZID0gX3RleHREZXNpcmVkSGVpZ2h0ICsgbG93ZXN0WTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSxcclxuXHJcbiAgICBfZ2V0Rmlyc3RDaGFyTGVuICgpIHtcclxuICAgICAgICByZXR1cm4gMTtcclxuICAgIH0sXHJcblxyXG4gICAgX2dldEZpcnN0V29yZExlbiAodGV4dDogc3RyaW5nLCBzdGFydEluZGV4OiBudW1iZXIsIHRleHRMZW46IG51bWJlcikge1xyXG4gICAgICAgIGxldCBjaGFyYWN0ZXIgPSB0ZXh0LmNoYXJBdChzdGFydEluZGV4KTtcclxuICAgICAgICBpZiAoaXNVbmljb2RlQ0pLKGNoYXJhY3RlcilcclxuICAgICAgICAgICAgfHwgY2hhcmFjdGVyID09PSAnXFxuJ1xyXG4gICAgICAgICAgICB8fCBpc1VuaWNvZGVTcGFjZShjaGFyYWN0ZXIpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGxlbiA9IDE7XHJcbiAgICAgICAgbGV0IGxldHRlckRlZiA9IF9mb250QXRsYXMgJiYgX2ZvbnRBdGxhcy5nZXRMZXR0ZXJEZWZpbml0aW9uRm9yQ2hhcihjaGFyYWN0ZXIpO1xyXG4gICAgICAgIGlmICghbGV0dGVyRGVmKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBsZW47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBuZXh0TGV0dGVyWCA9IGxldHRlckRlZi54QWR2YW5jZSAqIF9ibWZvbnRTY2FsZSArIF9zcGFjaW5nWDtcclxuICAgICAgICBsZXQgbGV0dGVyWCA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSBzdGFydEluZGV4ICsgMTsgaW5kZXggPCB0ZXh0TGVuOyArK2luZGV4KSB7XHJcbiAgICAgICAgICAgIGNoYXJhY3RlciA9IHRleHQuY2hhckF0KGluZGV4KTtcclxuXHJcbiAgICAgICAgICAgIGxldHRlckRlZiA9IF9mb250QXRsYXMgJiYgX2ZvbnRBdGxhcy5nZXRMZXR0ZXJEZWZpbml0aW9uRm9yQ2hhcihjaGFyYWN0ZXIpO1xyXG4gICAgICAgICAgICBpZiAoIWxldHRlckRlZikge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0dGVyWCA9IG5leHRMZXR0ZXJYICsgbGV0dGVyRGVmLm9mZnNldFggKiBfYm1mb250U2NhbGU7XHJcblxyXG4gICAgICAgICAgICBpZiAobGV0dGVyWCArIGxldHRlckRlZi53aWR0aCAqIF9ibWZvbnRTY2FsZSA+IF9tYXhMaW5lV2lkdGhcclxuICAgICAgICAgICAgICAgICYmICFpc1VuaWNvZGVTcGFjZShjaGFyYWN0ZXIpXHJcbiAgICAgICAgICAgICAgICAmJiBfbWF4TGluZVdpZHRoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxlbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBuZXh0TGV0dGVyWCArPSBsZXR0ZXJEZWYueEFkdmFuY2UgKiBfYm1mb250U2NhbGUgKyBfc3BhY2luZ1g7XHJcbiAgICAgICAgICAgIGlmIChjaGFyYWN0ZXIgPT09ICdcXG4nXHJcbiAgICAgICAgICAgICAgICB8fCBpc1VuaWNvZGVTcGFjZShjaGFyYWN0ZXIpXHJcbiAgICAgICAgICAgICAgICB8fCBpc1VuaWNvZGVDSksoY2hhcmFjdGVyKSkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGVuKys7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbGVuO1xyXG4gICAgfSxcclxuXHJcbiAgICBfbXVsdGlsaW5lVGV4dFdyYXBCeVdvcmQgKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tdWx0aWxpbmVUZXh0V3JhcCh0aGlzLl9nZXRGaXJzdFdvcmRMZW4pO1xyXG4gICAgfSxcclxuXHJcbiAgICBfbXVsdGlsaW5lVGV4dFdyYXBCeUNoYXIgKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tdWx0aWxpbmVUZXh0V3JhcCh0aGlzLl9nZXRGaXJzdENoYXJMZW4pO1xyXG4gICAgfSxcclxuXHJcbiAgICBfcmVjb3JkUGxhY2Vob2xkZXJJbmZvIChsZXR0ZXJJbmRleDogbnVtYmVyLCBjaGFyOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAobGV0dGVySW5kZXggPj0gX2xldHRlcnNJbmZvLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjb25zdCB0bXBJbmZvID0gbmV3IExldHRlckluZm8oKTtcclxuICAgICAgICAgICAgX2xldHRlcnNJbmZvLnB1c2godG1wSW5mbyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBfbGV0dGVyc0luZm9bbGV0dGVySW5kZXhdLmNoYXIgPSBjaGFyO1xyXG4gICAgICAgIF9sZXR0ZXJzSW5mb1tsZXR0ZXJJbmRleF0udmFsaWQgPSBmYWxzZTtcclxuICAgIH0sXHJcblxyXG4gICAgX3JlY29yZExldHRlckluZm8gKGxldHRlckRlZmluaXRpb25zOiBJTGV0dGVyRGVmaW5pdGlvbiwgbGV0dGVyUG9zaXRpb246IFZlYzIsIGNoYXJhY3Rlcjogc3RyaW5nLCBsZXR0ZXJJbmRleDogbnVtYmVyLCBsaW5lSW5kZXg6IG51bWJlcikge1xyXG4gICAgICAgIGlmIChsZXR0ZXJJbmRleCA+PSBfbGV0dGVyc0luZm8ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRtcEluZm8gPSBuZXcgTGV0dGVySW5mbygpO1xyXG4gICAgICAgICAgICBfbGV0dGVyc0luZm8ucHVzaCh0bXBJbmZvKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGNJbmRleCA9IGNoYXJhY3Rlci5jaGFyQ29kZUF0KDApO1xyXG4gICAgICAgIF9sZXR0ZXJzSW5mb1tsZXR0ZXJJbmRleF0ubGluZUluZGV4ID0gbGluZUluZGV4O1xyXG4gICAgICAgIF9sZXR0ZXJzSW5mb1tsZXR0ZXJJbmRleF0uY2hhciA9IGNoYXJhY3RlcjtcclxuICAgICAgICBfbGV0dGVyc0luZm9bbGV0dGVySW5kZXhdLnZhbGlkID0gbGV0dGVyRGVmaW5pdGlvbnNbY0luZGV4XS52YWxpZERlZmluaXRpb247XHJcbiAgICAgICAgX2xldHRlcnNJbmZvW2xldHRlckluZGV4XS5wb3NpdGlvblggPSBsZXR0ZXJQb3NpdGlvbi54O1xyXG4gICAgICAgIF9sZXR0ZXJzSW5mb1tsZXR0ZXJJbmRleF0ucG9zaXRpb25ZID0gbGV0dGVyUG9zaXRpb24ueTtcclxuICAgIH0sXHJcblxyXG4gICAgX2FsaWduVGV4dCAoKSB7XHJcbiAgICAgICAgX3RleHREZXNpcmVkSGVpZ2h0ID0gMDtcclxuICAgICAgICBfbGluZXNXaWR0aC5sZW5ndGggPSAwO1xyXG5cclxuICAgICAgICBpZiAoIV9saW5lQnJlYWtXaXRob3V0U3BhY2VzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX211bHRpbGluZVRleHRXcmFwQnlXb3JkKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fbXVsdGlsaW5lVGV4dFdyYXBCeUNoYXIoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbXB1dGVBbGlnbm1lbnRPZmZzZXQoKTtcclxuXHJcbiAgICAgICAgLy8gc2hyaW5rXHJcbiAgICAgICAgaWYgKF9vdmVyZmxvdyA9PT0gT3ZlcmZsb3cuU0hSSU5LKSB7XHJcbiAgICAgICAgICAgIGlmIChfZm9udFNpemUgPiAwICYmIHRoaXMuX2lzVmVydGljYWxDbGFtcCgpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zaHJpbmtMYWJlbFRvQ29udGVudFNpemUodGhpcy5faXNWZXJ0aWNhbENsYW1wKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLl91cGRhdGVRdWFkcygpKSB7XHJcbiAgICAgICAgICAgIGlmIChfb3ZlcmZsb3cgPT09IE92ZXJmbG93LlNIUklOSykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2hyaW5rTGFiZWxUb0NvbnRlbnRTaXplKHRoaXMuX2lzSG9yaXpvbnRhbENsYW1wKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgX3NjYWxlRm9udFNpemVEb3duIChmb250U2l6ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IHNob3VsZFVwZGF0ZUNvbnRlbnQgPSB0cnVlO1xyXG4gICAgICAgIGlmICghZm9udFNpemUpIHtcclxuICAgICAgICAgICAgZm9udFNpemUgPSAwLjE7XHJcbiAgICAgICAgICAgIHNob3VsZFVwZGF0ZUNvbnRlbnQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgX2ZvbnRTaXplID0gZm9udFNpemU7XHJcblxyXG4gICAgICAgIGlmIChzaG91bGRVcGRhdGVDb250ZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUNvbnRlbnQoKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIF9zaHJpbmtMYWJlbFRvQ29udGVudFNpemUgKGxhbWJkYTogRnVuY3Rpb24pIHtcclxuICAgICAgICBjb25zdCBmb250U2l6ZSA9IF9mb250U2l6ZTtcclxuICAgICAgICBjb25zdCBvcmlnaW5hbExpbmVIZWlnaHQgPSBfbGluZUhlaWdodDtcclxuICAgICAgICBjb25zdCBmb250QXRsYXMgPSBfZm9udEF0bGFzO1xyXG5cclxuICAgICAgICBsZXQgaSA9IDA7XHJcbiAgICAgICAgY29uc3QgdGVtcExldHRlckRlZmluaXRpb24gPSBmb250QXRsYXMgPyBmb250QXRsYXMuY2xvbmVMZXR0ZXJEZWZpbml0aW9uKCkgOiB7fSBhcyBJTGV0dGVyRGVmaW5pdGlvbjtcclxuICAgICAgICBsZXQgZmxhZyA9IHRydWU7XHJcblxyXG4gICAgICAgIHdoaWxlIChsYW1iZGEoKSkge1xyXG4gICAgICAgICAgICArK2k7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBuZXdGb250U2l6ZSA9IGZvbnRTaXplIC0gaTtcclxuICAgICAgICAgICAgZmxhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAobmV3Rm9udFNpemUgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHNjYWxlID0gbmV3Rm9udFNpemUgLyBmb250U2l6ZTtcclxuICAgICAgICAgICAgaWYgKGZvbnRBdGxhcykge1xyXG4gICAgICAgICAgICAgICAgZm9udEF0bGFzLmFzc2lnbkxldHRlckRlZmluaXRpb25zKHRlbXBMZXR0ZXJEZWZpbml0aW9uKTtcclxuICAgICAgICAgICAgICAgIGZvbnRBdGxhcy5zY2FsZUZvbnRMZXR0ZXJEZWZpbml0aW9uKHNjYWxlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfbGluZUhlaWdodCA9IG9yaWdpbmFsTGluZUhlaWdodCAqIHNjYWxlO1xyXG4gICAgICAgICAgICBpZiAoIV9saW5lQnJlYWtXaXRob3V0U3BhY2VzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tdWx0aWxpbmVUZXh0V3JhcEJ5V29yZCgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbXVsdGlsaW5lVGV4dFdyYXBCeUNoYXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9jb21wdXRlQWxpZ25tZW50T2Zmc2V0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBfbGluZUhlaWdodCA9IG9yaWdpbmFsTGluZUhlaWdodDtcclxuICAgICAgICBpZiAoZm9udEF0bGFzKSB7XHJcbiAgICAgICAgICAgIGZvbnRBdGxhcy5hc3NpZ25MZXR0ZXJEZWZpbml0aW9ucyh0ZW1wTGV0dGVyRGVmaW5pdGlvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWZsYWcpIHtcclxuICAgICAgICAgICAgaWYgKGZvbnRTaXplIC0gaSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zY2FsZUZvbnRTaXplRG93bihmb250U2l6ZSAtIGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBfaXNWZXJ0aWNhbENsYW1wICgpIHtcclxuICAgICAgICBpZiAoX3RleHREZXNpcmVkSGVpZ2h0ID4gX2NvbnRlbnRTaXplLmhlaWdodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBfaXNIb3Jpem9udGFsQ2xhbXAgKCkge1xyXG4gICAgICAgIGlmICghX2ZvbnRBdGxhcyl7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBsZXR0ZXJDbGFtcCA9IGZhbHNlO1xyXG4gICAgICAgIGZvciAobGV0IGN0ciA9IDAsIGwgPSBfc3RyaW5nLmxlbmd0aDsgY3RyIDwgbDsgKytjdHIpIHtcclxuICAgICAgICAgICAgY29uc3QgbGV0dGVySW5mbyA9IF9sZXR0ZXJzSW5mb1tjdHJdO1xyXG4gICAgICAgICAgICBpZiAobGV0dGVySW5mby52YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbGV0dGVyRGVmID0gX2ZvbnRBdGxhcy5nZXRMZXR0ZXJEZWZpbml0aW9uRm9yQ2hhcihsZXR0ZXJJbmZvLmNoYXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFsZXR0ZXJEZWYpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBweCA9IGxldHRlckluZm8ucG9zaXRpb25YICsgbGV0dGVyRGVmLndpZHRoIC8gMiAqIF9ibWZvbnRTY2FsZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVJbmRleCA9IGxldHRlckluZm8ubGluZUluZGV4O1xyXG4gICAgICAgICAgICAgICAgaWYgKF9sYWJlbFdpZHRoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghX2lzV3JhcFRleHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHB4ID4gX2NvbnRlbnRTaXplLndpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXR0ZXJDbGFtcCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHdvcmRXaWR0aCA9IF9saW5lc1dpZHRoW2xpbmVJbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3b3JkV2lkdGggPiBfY29udGVudFNpemUud2lkdGggJiYgKHB4ID4gX2NvbnRlbnRTaXplLndpZHRoIHx8IHB4IDwgMCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldHRlckNsYW1wID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbGV0dGVyQ2xhbXA7XHJcbiAgICB9LFxyXG5cclxuICAgIF9pc0hvcml6b250YWxDbGFtcGVkIChweDogbnVtYmVyLCBsaW5lSW5kZXg6IG51bWJlcikge1xyXG4gICAgICAgIGNvbnN0IHdvcmRXaWR0aCA9IF9saW5lc1dpZHRoW2xpbmVJbmRleF07XHJcbiAgICAgICAgY29uc3QgbGV0dGVyT3ZlckNsYW1wID0gKHB4ID4gX2NvbnRlbnRTaXplLndpZHRoIHx8IHB4IDwgMCk7XHJcblxyXG4gICAgICAgIGlmICghX2lzV3JhcFRleHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGxldHRlck92ZXJDbGFtcDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gKHdvcmRXaWR0aCA+IF9jb250ZW50U2l6ZS53aWR0aCAmJiBsZXR0ZXJPdmVyQ2xhbXApO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgX3VwZGF0ZVF1YWRzICgpIHtcclxuICAgICAgICBpZiAoIV9jb21wKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGxldHRlckRlZmluaXRpb25zID0gX2ZvbnRBdGxhcyA/IF9mb250QXRsYXMubGV0dGVyRGVmaW5pdGlvbnMgOiB7fTtcclxuXHJcbiAgICAgICAgY29uc3QgdGV4dHVyZSA9IF9zcHJpdGVGcmFtZTtcclxuXHJcbiAgICAgICAgY29uc3Qgbm9kZSA9IF9jb21wLm5vZGU7XHJcbiAgICAgICAgY29uc3QgcmVuZGVyRGF0YSA9IF9jb21wLnJlbmRlckRhdGEhO1xyXG4gICAgICAgIHJlbmRlckRhdGEuZGF0YUxlbmd0aCA9IHJlbmRlckRhdGEudmVydGV4Q291bnQgPSByZW5kZXJEYXRhLmluZGljZUNvdW50ID0gMDtcclxuXHJcbiAgICAgICAgY29uc3QgYW5jaG9yUG9pbnQgPSBub2RlLmdldEFuY2hvclBvaW50KCk7XHJcbiAgICAgICAgY29uc3QgY29udGVudFNpemUgPSBfY29udGVudFNpemU7XHJcbiAgICAgICAgY29uc3QgYXBwWCA9IGFuY2hvclBvaW50LnggKiBjb250ZW50U2l6ZS53aWR0aDtcclxuICAgICAgICBjb25zdCBhcHBZID0gYW5jaG9yUG9pbnQueSAqIGNvbnRlbnRTaXplLmhlaWdodDtcclxuXHJcbiAgICAgICAgbGV0IHJldCA9IHRydWU7XHJcbiAgICAgICAgZm9yIChsZXQgY3RyID0gMCwgbCA9IF9zdHJpbmcubGVuZ3RoOyBjdHIgPCBsOyArK2N0cikge1xyXG4gICAgICAgICAgICBjb25zdCBsZXR0ZXJJbmZvID0gX2xldHRlcnNJbmZvW2N0cl07XHJcbiAgICAgICAgICAgIGlmICghbGV0dGVySW5mby52YWxpZCkgeyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICBjb25zdCBsZXR0ZXJEZWYgPSBsZXR0ZXJEZWZpbml0aW9uc1tsZXR0ZXJJbmZvLmNoYXIuY2hhckNvZGVBdCgwKV07XHJcbiAgICAgICAgICAgIGlmICghbGV0dGVyRGVmKXtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignQ2FuXFwndCBmaW5kIGxldHRlciBpbiB0aGlzIGJpdG1hcC1mb250Jyk7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3RtcFJlY3QuaGVpZ2h0ID0gbGV0dGVyRGVmLmhlaWdodDtcclxuICAgICAgICAgICAgX3RtcFJlY3Qud2lkdGggPSBsZXR0ZXJEZWYud2lkdGg7XHJcbiAgICAgICAgICAgIF90bXBSZWN0LnggPSBsZXR0ZXJEZWYudTtcclxuICAgICAgICAgICAgX3RtcFJlY3QueSA9IGxldHRlckRlZi52O1xyXG5cclxuICAgICAgICAgICAgbGV0IHB5ID0gbGV0dGVySW5mby5wb3NpdGlvblkgKyBfbGV0dGVyT2Zmc2V0WTtcclxuXHJcbiAgICAgICAgICAgIGlmIChfbGFiZWxIZWlnaHQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocHkgPiBfdGFpbG9yZWRUb3BZKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xpcFRvcCA9IHB5IC0gX3RhaWxvcmVkVG9wWTtcclxuICAgICAgICAgICAgICAgICAgICBfdG1wUmVjdC55ICs9IGNsaXBUb3A7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RtcFJlY3QuaGVpZ2h0IC09IGNsaXBUb3A7XHJcbiAgICAgICAgICAgICAgICAgICAgcHkgPSBweSAtIGNsaXBUb3A7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHB5IC0gbGV0dGVyRGVmLmhlaWdodCAqIF9ibWZvbnRTY2FsZSA8IF90YWlsb3JlZEJvdHRvbVkpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdG1wUmVjdC5oZWlnaHQgPSAocHkgPCBfdGFpbG9yZWRCb3R0b21ZKSA/IDAgOiAocHkgLSBfdGFpbG9yZWRCb3R0b21ZKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgbGluZUluZGV4ID0gbGV0dGVySW5mby5saW5lSW5kZXg7XHJcbiAgICAgICAgICAgIGNvbnN0IHB4ID0gbGV0dGVySW5mby5wb3NpdGlvblggKyBsZXR0ZXJEZWYud2lkdGggLyAyICogX2JtZm9udFNjYWxlICsgX2xpbmVzT2Zmc2V0WFtsaW5lSW5kZXhdO1xyXG5cclxuICAgICAgICAgICAgaWYgKF9sYWJlbFdpZHRoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lzSG9yaXpvbnRhbENsYW1wZWQocHgsIGxpbmVJbmRleCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoX292ZXJmbG93ID09PSBPdmVyZmxvdy5DTEFNUCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdG1wUmVjdC53aWR0aCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChfb3ZlcmZsb3cgPT09IE92ZXJmbG93LlNIUklOSykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2NvbnRlbnRTaXplLndpZHRoID4gbGV0dGVyRGVmLndpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RtcFJlY3Qud2lkdGggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoX3Nwcml0ZUZyYW1lICYmICBfdG1wUmVjdC5oZWlnaHQgPiAwICYmIF90bXBSZWN0LndpZHRoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNSb3RhdGVkID0gX3Nwcml0ZUZyYW1lLmlzUm90YXRlZCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsU2l6ZSA9IF9zcHJpdGVGcmFtZS5nZXRPcmlnaW5hbFNpemUoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlY3QgPSBfc3ByaXRlRnJhbWUuZ2V0UmVjdCgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gX3Nwcml0ZUZyYW1lLmdldE9mZnNldCgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdHJpbW1lZExlZnQgPSBvZmZzZXQueCArIChvcmlnaW5hbFNpemUud2lkdGggLSByZWN0LndpZHRoKSAvIDI7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0cmltbWVkVG9wID0gb2Zmc2V0LnkgLSAob3JpZ2luYWxTaXplLmhlaWdodCAtIHJlY3QuaGVpZ2h0KSAvIDI7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFpc1JvdGF0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdG1wUmVjdC54ICs9IChyZWN0LnggLSB0cmltbWVkTGVmdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RtcFJlY3QueSArPSAocmVjdC55ICsgdHJpbW1lZFRvcCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsWCA9IF90bXBSZWN0Lng7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RtcFJlY3QueCA9IHJlY3QueCArIHJlY3QuaGVpZ2h0IC0gX3RtcFJlY3QueSAtIF90bXBSZWN0LmhlaWdodCAtIHRyaW1tZWRUb3A7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RtcFJlY3QueSA9IG9yaWdpbmFsWCArIHJlY3QueSAtIHRyaW1tZWRMZWZ0O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfdG1wUmVjdC55IDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdG1wUmVjdC5oZWlnaHQgPSBfdG1wUmVjdC5oZWlnaHQgKyB0cmltbWVkVG9wO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBsZXR0ZXJQb3NpdGlvblggPSBsZXR0ZXJJbmZvLnBvc2l0aW9uWCArIF9saW5lc09mZnNldFhbbGV0dGVySW5mby5saW5lSW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRRdWFkKF9jb21wLCB0ZXh0dXJlLCBfdG1wUmVjdCwgaXNSb3RhdGVkLCBsZXR0ZXJQb3NpdGlvblggLSBhcHBYLCBweSAtIGFwcFksIF9ibWZvbnRTY2FsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9LFxyXG5cclxuICAgIGFwcGVuZFF1YWQgKGNvbXAsIHRleHR1cmUsIHJlY3QsIHJvdGF0ZWQsIHgsIHksIHNjYWxlKSB7XHJcbiAgICB9LFxyXG5cclxuICAgIF9jb21wdXRlQWxpZ25tZW50T2Zmc2V0ICgpIHtcclxuICAgICAgICBfbGluZXNPZmZzZXRYLmxlbmd0aCA9IDA7XHJcblxyXG4gICAgICAgIHN3aXRjaCAoX2hBbGlnbikge1xyXG4gICAgICAgICAgICBjYXNlIEhvcml6b250YWxUZXh0QWxpZ25tZW50LkxFRlQ6XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IF9udW1iZXJPZkxpbmVzOyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBfbGluZXNPZmZzZXRYLnB1c2goMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBIb3Jpem9udGFsVGV4dEFsaWdubWVudC5DRU5URVI6XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IF9saW5lc1dpZHRoLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIF9saW5lc09mZnNldFgucHVzaCgoX2NvbnRlbnRTaXplLndpZHRoIC0gX2xpbmVzV2lkdGhbaV0pIC8gMik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBIb3Jpem9udGFsVGV4dEFsaWdubWVudC5SSUdIVDpcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gX2xpbmVzV2lkdGgubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX2xpbmVzT2Zmc2V0WC5wdXNoKF9jb250ZW50U2l6ZS53aWR0aCAtIF9saW5lc1dpZHRoW2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzd2l0Y2ggKF92QWxpZ24pIHtcclxuICAgICAgICAgICAgY2FzZSBWZXJ0aWNhbFRleHRBbGlnbm1lbnQuVE9QOlxyXG4gICAgICAgICAgICAgICAgX2xldHRlck9mZnNldFkgPSBfY29udGVudFNpemUuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgVmVydGljYWxUZXh0QWxpZ25tZW50LkNFTlRFUjpcclxuICAgICAgICAgICAgICAgIF9sZXR0ZXJPZmZzZXRZID0gKF9jb250ZW50U2l6ZS5oZWlnaHQgKyBfdGV4dERlc2lyZWRIZWlnaHQpIC8gMjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFZlcnRpY2FsVGV4dEFsaWdubWVudC5CT1RUT006XHJcbiAgICAgICAgICAgICAgICBfbGV0dGVyT2Zmc2V0WSA9IF90ZXh0RGVzaXJlZEhlaWdodDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBfc2V0dXBCTUZvbnRPdmVyZmxvd01ldHJpY3MgKCkge1xyXG4gICAgICAgIGxldCBuZXdXaWR0aCA9IF9jb250ZW50U2l6ZS53aWR0aDtcclxuICAgICAgICBsZXQgbmV3SGVpZ2h0ID0gX2NvbnRlbnRTaXplLmhlaWdodDtcclxuXHJcbiAgICAgICAgaWYgKF9vdmVyZmxvdyA9PT0gT3ZlcmZsb3cuUkVTSVpFX0hFSUdIVCkge1xyXG4gICAgICAgICAgICBuZXdIZWlnaHQgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKF9vdmVyZmxvdyA9PT0gT3ZlcmZsb3cuTk9ORSkge1xyXG4gICAgICAgICAgICBuZXdXaWR0aCA9IDA7XHJcbiAgICAgICAgICAgIG5ld0hlaWdodCA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBfbGFiZWxXaWR0aCA9IG5ld1dpZHRoO1xyXG4gICAgICAgIF9sYWJlbEhlaWdodCA9IG5ld0hlaWdodDtcclxuICAgICAgICBfbGFiZWxEaW1lbnNpb25zLndpZHRoID0gbmV3V2lkdGg7XHJcbiAgICAgICAgX2xhYmVsRGltZW5zaW9ucy5oZWlnaHQgPSBuZXdIZWlnaHQ7XHJcbiAgICAgICAgX21heExpbmVXaWR0aCA9IG5ld1dpZHRoO1xyXG4gICAgfSxcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGJtZm9udFV0aWxzO1xyXG4iXX0=