(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../geometry/index.js", "../../gfx/define.js", "../../math/index.js", "../../pipeline/define.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../geometry/index.js"), require("../../gfx/define.js"), require("../../math/index.js"), require("../../pipeline/define.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.define, global.index, global.define);
    global.camera = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _define, _index2, _define2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Camera = _exports.SKYBOX_FLAG = _exports.CameraShutter = _exports.CameraISO = _exports.CameraAperture = _exports.CameraProjection = _exports.CameraFOVAxis = void 0;

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var CameraFOVAxis;
  _exports.CameraFOVAxis = CameraFOVAxis;

  (function (CameraFOVAxis) {
    CameraFOVAxis[CameraFOVAxis["VERTICAL"] = 0] = "VERTICAL";
    CameraFOVAxis[CameraFOVAxis["HORIZONTAL"] = 1] = "HORIZONTAL";
  })(CameraFOVAxis || (_exports.CameraFOVAxis = CameraFOVAxis = {}));

  var CameraProjection;
  _exports.CameraProjection = CameraProjection;

  (function (CameraProjection) {
    CameraProjection[CameraProjection["ORTHO"] = 0] = "ORTHO";
    CameraProjection[CameraProjection["PERSPECTIVE"] = 1] = "PERSPECTIVE";
  })(CameraProjection || (_exports.CameraProjection = CameraProjection = {}));

  var CameraAperture;
  _exports.CameraAperture = CameraAperture;

  (function (CameraAperture) {
    CameraAperture[CameraAperture["F1_8"] = 0] = "F1_8";
    CameraAperture[CameraAperture["F2_0"] = 1] = "F2_0";
    CameraAperture[CameraAperture["F2_2"] = 2] = "F2_2";
    CameraAperture[CameraAperture["F2_5"] = 3] = "F2_5";
    CameraAperture[CameraAperture["F2_8"] = 4] = "F2_8";
    CameraAperture[CameraAperture["F3_2"] = 5] = "F3_2";
    CameraAperture[CameraAperture["F3_5"] = 6] = "F3_5";
    CameraAperture[CameraAperture["F4_0"] = 7] = "F4_0";
    CameraAperture[CameraAperture["F4_5"] = 8] = "F4_5";
    CameraAperture[CameraAperture["F5_0"] = 9] = "F5_0";
    CameraAperture[CameraAperture["F5_6"] = 10] = "F5_6";
    CameraAperture[CameraAperture["F6_3"] = 11] = "F6_3";
    CameraAperture[CameraAperture["F7_1"] = 12] = "F7_1";
    CameraAperture[CameraAperture["F8_0"] = 13] = "F8_0";
    CameraAperture[CameraAperture["F9_0"] = 14] = "F9_0";
    CameraAperture[CameraAperture["F10_0"] = 15] = "F10_0";
    CameraAperture[CameraAperture["F11_0"] = 16] = "F11_0";
    CameraAperture[CameraAperture["F13_0"] = 17] = "F13_0";
    CameraAperture[CameraAperture["F14_0"] = 18] = "F14_0";
    CameraAperture[CameraAperture["F16_0"] = 19] = "F16_0";
    CameraAperture[CameraAperture["F18_0"] = 20] = "F18_0";
    CameraAperture[CameraAperture["F20_0"] = 21] = "F20_0";
    CameraAperture[CameraAperture["F22_0"] = 22] = "F22_0";
  })(CameraAperture || (_exports.CameraAperture = CameraAperture = {}));

  var CameraISO;
  _exports.CameraISO = CameraISO;

  (function (CameraISO) {
    CameraISO[CameraISO["ISO100"] = 0] = "ISO100";
    CameraISO[CameraISO["ISO200"] = 1] = "ISO200";
    CameraISO[CameraISO["ISO400"] = 2] = "ISO400";
    CameraISO[CameraISO["ISO800"] = 3] = "ISO800";
  })(CameraISO || (_exports.CameraISO = CameraISO = {}));

  var CameraShutter;
  _exports.CameraShutter = CameraShutter;

  (function (CameraShutter) {
    CameraShutter[CameraShutter["D1"] = 0] = "D1";
    CameraShutter[CameraShutter["D2"] = 1] = "D2";
    CameraShutter[CameraShutter["D4"] = 2] = "D4";
    CameraShutter[CameraShutter["D8"] = 3] = "D8";
    CameraShutter[CameraShutter["D15"] = 4] = "D15";
    CameraShutter[CameraShutter["D30"] = 5] = "D30";
    CameraShutter[CameraShutter["D60"] = 6] = "D60";
    CameraShutter[CameraShutter["D125"] = 7] = "D125";
    CameraShutter[CameraShutter["D250"] = 8] = "D250";
    CameraShutter[CameraShutter["D500"] = 9] = "D500";
    CameraShutter[CameraShutter["D1000"] = 10] = "D1000";
    CameraShutter[CameraShutter["D2000"] = 11] = "D2000";
    CameraShutter[CameraShutter["D4000"] = 12] = "D4000";
  })(CameraShutter || (_exports.CameraShutter = CameraShutter = {}));

  var FSTOPS = [1.8, 2.0, 2.2, 2.5, 2.8, 3.2, 3.5, 4.0, 4.5, 5.0, 5.6, 6.3, 7.1, 8.0, 9.0, 10.0, 11.0, 13.0, 14.0, 16.0, 18.0, 20.0, 22.0];
  var SHUTTERS = [1.0, 1.0 / 2.0, 1.0 / 4.0, 1.0 / 8.0, 1.0 / 15.0, 1.0 / 30.0, 1.0 / 60.0, 1.0 / 125.0, 1.0 / 250.0, 1.0 / 500.0, 1.0 / 1000.0, 1.0 / 2000.0, 1.0 / 4000.0];
  var ISOS = [100.0, 200.0, 400.0, 800.0];
  var v_a = new _index2.Vec3();
  var v_b = new _index2.Vec3();

  var _tempMat1 = new _index2.Mat4();

  var _tempMat2 = new _index2.Mat4();

  var SKYBOX_FLAG = _define.GFXClearFlag.STENCIL << 1;
  _exports.SKYBOX_FLAG = SKYBOX_FLAG;

  var Camera = /*#__PURE__*/function () {
    function Camera() {
      _classCallCheck(this, Camera);

      this.isWindowSize = true;
      this.screenScale = void 0;
      this.viewport = new _index2.Rect(0, 0, 1, 1);
      this.clearStencil = 0;
      this.clearDepth = 1.0;
      this.clearFlag = _define.GFXClearFlag.NONE;
      this._scene = null;
      this._node = null;
      this._name = null;
      this._enabled = false;
      this._proj = -1;
      this._width = void 0;
      this._height = void 0;
      this._aspect = void 0;
      this._orthoHeight = 10.0;
      this._fovAxis = CameraFOVAxis.VERTICAL;
      this._fov = (0, _index2.toRadian)(45);
      this._nearClip = 1.0;
      this._farClip = 1000.0;
      this._clearColor = {
        r: 0.2,
        g: 0.2,
        b: 0.2,
        a: 1
      };
      this._isProjDirty = true;
      this._matView = new _index2.Mat4();
      this._matViewInv = null;
      this._matProj = new _index2.Mat4();
      this._matProjInv = new _index2.Mat4();
      this._matViewProj = new _index2.Mat4();
      this._matViewProjInv = new _index2.Mat4();
      this._frustum = new _index.frustum();
      this._forward = new _index2.Vec3();
      this._position = new _index2.Vec3();
      this._view = null;
      this._visibility = _define2.CAMERA_DEFAULT_MASK;
      this._priority = 0;
      this._aperture = CameraAperture.F16_0;
      this._apertureValue = void 0;
      this._shutter = CameraShutter.D125;
      this._shutterValue = 0.0;
      this._iso = CameraISO.ISO100;
      this._isoValue = 0.0;
      this._ec = 0.0;
      this._exposure = 0.0;
      this._apertureValue = FSTOPS[this._aperture];
      this._shutterValue = SHUTTERS[this._shutter];
      this._isoValue = ISOS[this._iso];
      this.updateExposure();
      this._aspect = this._width = this._height = this.screenScale = 1;
    }

    _createClass(Camera, [{
      key: "initialize",
      value: function initialize(info) {
        this._name = info.name;
        this._node = info.node;
        this._proj = info.projection;
        this._priority = info.priority || 0;
        this._view = cc.director.root.createView({
          camera: this,
          name: this._name,
          priority: this._priority,
          flows: info.flows
        });
        this.changeTargetWindow(info.window);
        console.log('Created Camera: ' + this._name + ' ' + this._width + 'x' + this._height);
      }
    }, {
      key: "destroy",
      value: function destroy() {
        cc.director.root.destroyView(this._view);
        this._view = null;
        this._name = null;
      }
    }, {
      key: "attachToScene",
      value: function attachToScene(scene) {
        this._scene = scene;

        if (this._view) {
          this._view.enable(true);
        }
      }
    }, {
      key: "detachFromScene",
      value: function detachFromScene() {
        this._scene = null;

        if (this._view) {
          this._view.enable(false);
        }
      }
    }, {
      key: "resize",
      value: function resize(width, height) {
        this._width = width;
        this._height = height;
        this._aspect = this._width / this._height;
        this._isProjDirty = true;
      }
    }, {
      key: "setFixedSize",
      value: function setFixedSize(width, height) {
        this._width = width;
        this._height = height;
        this._aspect = this._width / this._height;
        this.isWindowSize = false;
      }
    }, {
      key: "update",
      value: function update() {
        var forceUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        // for lazy eval situations like the in-editor preview
        if (this._node) {
          // view matrix
          if (this._node.hasChangedFlags || forceUpdate) {
            _index2.Mat4.invert(this._matView, this._node.worldMatrix);

            this._forward.x = -this._matView.m02;
            this._forward.y = -this._matView.m06;
            this._forward.z = -this._matView.m10;

            this._node.getWorldPosition(this._position);
          } // projection matrix


          if (this._isProjDirty) {
            if (this._proj === CameraProjection.PERSPECTIVE) {
              _index2.Mat4.perspective(this._matProj, this._fov, this._aspect, this._nearClip, this._farClip, this._fovAxis === CameraFOVAxis.VERTICAL);
            } else {
              var x = this._orthoHeight * this._aspect;
              var y = this._orthoHeight;

              _index2.Mat4.ortho(this._matProj, -x, x, -y, y, this._nearClip, this._farClip);
            }

            _index2.Mat4.invert(this._matProjInv, this._matProj);
          } // view-projection


          if (this._node.hasChangedFlags || this._isProjDirty || forceUpdate) {
            _index2.Mat4.multiply(this._matViewProj, this._matProj, this._matView);

            _index2.Mat4.invert(this._matViewProjInv, this._matViewProj);

            this._frustum.update(this._matViewProj, this._matViewProjInv);
          }

          this._isProjDirty = false;
        }
      }
    }, {
      key: "getSplitFrustum",
      value: function getSplitFrustum(out, nearClip, farClip) {
        if (!this._node) {
          return;
        }

        nearClip = Math.max(nearClip, this._nearClip);
        farClip = Math.min(farClip, this._farClip); // view matrix

        _index2.Mat4.invert(this._matView, this._node.worldMatrix); // projection matrix


        if (this._proj === CameraProjection.PERSPECTIVE) {
          _index2.Mat4.perspective(_tempMat1, this._fov, this._aspect, nearClip, farClip, this._fovAxis === CameraFOVAxis.VERTICAL);
        } else {
          var x = this._orthoHeight * this._aspect;
          var y = this._orthoHeight;

          _index2.Mat4.ortho(_tempMat1, -x, x, -y, y, nearClip, farClip);
        } // view-projection


        _index2.Mat4.multiply(_tempMat2, _tempMat1, this._matView);

        _index2.Mat4.invert(_tempMat1, _tempMat2);

        out.update(_tempMat2, _tempMat1);
      }
    }, {
      key: "changeTargetWindow",
      value: function changeTargetWindow() {
        var window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var win = window || cc.director.root.mainWindow;

        if (win && this._view) {
          this._view.window = win;
          this.resize(win.width, win.height);
        }
      }
      /**
       * transform a screen position to a world space ray
       */

    }, {
      key: "screenPointToRay",
      value: function screenPointToRay(out, x, y) {
        var cx = this.viewport.x * this._width;
        var cy = this.viewport.y * this._height;
        var cw = this.viewport.width * this._width;
        var ch = this.viewport.height * this._height; // far plane intersection

        _index2.Vec3.set(v_a, (x - cx) / cw * 2 - 1, (y - cy) / ch * 2 - 1, 1);

        _index2.Vec3.transformMat4(v_a, v_a, this._matViewProjInv);

        if (this._proj === CameraProjection.PERSPECTIVE) {
          // camera origin
          if (this._node) {
            this._node.getWorldPosition(v_b);
          }
        } else {
          // near plane intersection
          _index2.Vec3.set(v_b, (x - cx) / cw * 2 - 1, (y - cy) / ch * 2 - 1, -1);

          _index2.Vec3.transformMat4(v_b, v_b, this._matViewProjInv);
        }

        return _index.ray.fromPoints(out, v_b, v_a);
      }
      /**
       * transform a screen position to world space
       */

    }, {
      key: "screenToWorld",
      value: function screenToWorld(out, screenPos) {
        var cx = this.viewport.x * this._width;
        var cy = this.viewport.y * this._height;
        var cw = this.viewport.width * this._width;
        var ch = this.viewport.height * this._height;

        if (this._proj === CameraProjection.PERSPECTIVE) {
          // calculate screen pos in far clip plane
          _index2.Vec3.set(out, (screenPos.x - cx) / cw * 2 - 1, (screenPos.y - cy) / ch * 2 - 1, 1.0); // transform to world


          _index2.Vec3.transformMat4(out, out, this._matViewProjInv); // lerp to depth z


          if (this._node) {
            this._node.getWorldPosition(v_a);
          }

          _index2.Vec3.lerp(out, v_a, out, (0, _index2.lerp)(this._nearClip / this._farClip, 1, screenPos.z));
        } else {
          _index2.Vec3.set(out, (screenPos.x - cx) / cw * 2 - 1, (screenPos.y - cy) / ch * 2 - 1, screenPos.z * 2 - 1); // transform to world


          _index2.Vec3.transformMat4(out, out, this.matViewProjInv);
        }

        return out;
      }
      /**
       * transform a world space position to screen space
       */

    }, {
      key: "worldToScreen",
      value: function worldToScreen(out, worldPos) {
        var cx = this.viewport.x * this._width;
        var cy = this.viewport.y * this._height;
        var cw = this.viewport.width * this._width;
        var ch = this.viewport.height * this._height;

        _index2.Vec3.transformMat4(out, worldPos, this.matViewProj);

        out.x = cx + (out.x + 1) * 0.5 * cw;
        out.y = cy + (out.y + 1) * 0.5 * ch;
        out.z = out.z * 0.5 + 0.5;
        return out;
      }
    }, {
      key: "updateExposure",
      value: function updateExposure() {
        var ev100 = Math.log2(this._apertureValue * this._apertureValue / this._shutterValue * 100.0 / this._isoValue);
        this._exposure = 0.833333 / Math.pow(2.0, ev100);
      }
    }, {
      key: "node",
      set: function set(val) {
        this._node = val;
      },
      get: function get() {
        return this._node;
      }
    }, {
      key: "enabled",
      set: function set(val) {
        this._enabled = val;

        if (this._view) {
          this._view.enable(val);
        }
      },
      get: function get() {
        return this._enabled;
      }
    }, {
      key: "view",
      get: function get() {
        return this._view;
      }
    }, {
      key: "orthoHeight",
      set: function set(val) {
        this._orthoHeight = val;
        this._isProjDirty = true;
      },
      get: function get() {
        return this._orthoHeight;
      }
    }, {
      key: "projectionType",
      set: function set(val) {
        this._proj = val;
        this._isProjDirty = true;
      },
      get: function get() {
        return this._proj;
      }
    }, {
      key: "fovAxis",
      set: function set(axis) {
        this._fovAxis = axis;
        this._isProjDirty = true;
      },
      get: function get() {
        return this._fovAxis;
      }
    }, {
      key: "fov",
      set: function set(fov) {
        this._fov = fov;
        this._isProjDirty = true;
      },
      get: function get() {
        return this._fov;
      }
    }, {
      key: "nearClip",
      set: function set(nearClip) {
        this._nearClip = nearClip;
        this._isProjDirty = true;
      },
      get: function get() {
        return this._nearClip;
      }
    }, {
      key: "farClip",
      set: function set(farClip) {
        this._farClip = farClip;
        this._isProjDirty = true;
      },
      get: function get() {
        return this._farClip;
      }
    }, {
      key: "clearColor",
      set: function set(val) {
        this._clearColor.r = val.r;
        this._clearColor.g = val.g;
        this._clearColor.b = val.b;
        this._clearColor.a = val.a;
      },
      get: function get() {
        return this._clearColor;
      }
    }, {
      key: "scene",
      get: function get() {
        return this._scene;
      }
    }, {
      key: "name",
      get: function get() {
        return this._name;
      }
    }, {
      key: "width",
      get: function get() {
        return this._width;
      }
    }, {
      key: "height",
      get: function get() {
        return this._height;
      }
    }, {
      key: "aspect",
      get: function get() {
        return this._aspect;
      }
    }, {
      key: "matView",
      set: function set(val) {
        this._matView = val;
      },
      get: function get() {
        return this._matView;
      }
    }, {
      key: "matViewInv",
      set: function set(val) {
        this._matViewInv = val;
      },
      get: function get() {
        return this._matViewInv || this._node.worldMatrix;
      }
    }, {
      key: "matProj",
      set: function set(val) {
        this._matProj = val;
      },
      get: function get() {
        return this._matProj;
      }
    }, {
      key: "matProjInv",
      set: function set(val) {
        this._matProjInv = val;
      },
      get: function get() {
        return this._matProjInv;
      }
    }, {
      key: "matViewProj",
      set: function set(val) {
        this._matViewProj = val;
      },
      get: function get() {
        return this._matViewProj;
      }
    }, {
      key: "matViewProjInv",
      set: function set(val) {
        this._matViewProjInv = val;
      },
      get: function get() {
        return this._matViewProjInv;
      }
    }, {
      key: "frustum",
      set: function set(val) {
        this._frustum = val;
      },
      get: function get() {
        return this._frustum;
      }
    }, {
      key: "forward",
      set: function set(val) {
        this._forward = val;
      },
      get: function get() {
        return this._forward;
      }
    }, {
      key: "position",
      set: function set(val) {
        this._position = val;
      },
      get: function get() {
        return this._position;
      }
    }, {
      key: "visibility",
      set: function set(vis) {
        this._visibility = vis;

        if (this._view) {
          this._view.visibility = vis;
        }
      },
      get: function get() {
        return this._visibility;
      }
    }, {
      key: "priority",
      get: function get() {
        return this._view ? this._view.priority : -1;
      },
      set: function set(val) {
        this._priority = val;

        if (this._view) {
          this._view.priority = this._priority;
        }
      }
    }, {
      key: "aperture",
      set: function set(val) {
        this._aperture = val;
        this._apertureValue = FSTOPS[this._aperture];
        this.updateExposure();
      },
      get: function get() {
        return this._aperture;
      }
    }, {
      key: "apertureValue",
      get: function get() {
        return this._apertureValue;
      }
    }, {
      key: "shutter",
      set: function set(val) {
        this._shutter = val;
        this._shutterValue = SHUTTERS[this._shutter];
        this.updateExposure();
      },
      get: function get() {
        return this._shutter;
      }
    }, {
      key: "shutterValue",
      get: function get() {
        return this._shutterValue;
      }
    }, {
      key: "iso",
      set: function set(val) {
        this._iso = val;
        this._isoValue = ISOS[this._iso];
        this.updateExposure();
      },
      get: function get() {
        return this._iso;
      }
    }, {
      key: "isoValue",
      get: function get() {
        return this._isoValue;
      }
    }, {
      key: "ec",
      set: function set(val) {
        this._ec = val;
      },
      get: function get() {
        return this._ec;
      }
    }, {
      key: "exposure",
      get: function get() {
        return this._exposure;
      }
    }, {
      key: "flows",
      set: function set(val) {
        if (this._view) {
          this._view.setExecuteFlows(val);
        }
      }
    }]);

    return Camera;
  }();

  _exports.Camera = Camera;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,