(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../core/3d/builtin/index.js", "../../core/gfx/define.js", "../../core/math/index.js", "../../core/memop/index.js", "../../core/renderer/core/material-instance.js", "../enum.js", "../particle.js", "./particle-system-renderer-base.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../core/3d/builtin/index.js"), require("../../core/gfx/define.js"), require("../../core/math/index.js"), require("../../core/memop/index.js"), require("../../core/renderer/core/material-instance.js"), require("../enum.js"), require("../particle.js"), require("./particle-system-renderer-base.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.define, global.index, global.index, global.materialInstance, global._enum, global.particle, global.particleSystemRendererBase);
    global.particleSystemRendererCpu = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _define, _index2, _index3, _materialInstance, _enum, _particle, _particleSystemRendererBase) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  var _tempAttribUV = new _index2.Vec3();

  var _tempWorldTrans = new _index2.Mat4();

  var _anim_module = ['_colorOverLifetimeModule', '_sizeOvertimeModule', '_velocityOvertimeModule', '_forceOvertimeModule', '_limitVelocityOvertimeModule', '_rotationOvertimeModule', '_textureAnimationModule'];
  var _uvs = [0, 0, // bottom-left
  1, 0, // bottom-right
  0, 1, // top-left
  1, 1 // top-right
  ];
  var CC_USE_WORLD_SPACE = 'CC_USE_WORLD_SPACE';
  var CC_RENDER_MODE = 'CC_RENDER_MODE';
  var RENDER_MODE_BILLBOARD = 0;
  var RENDER_MODE_STRETCHED_BILLBOARD = 1;
  var RENDER_MODE_HORIZONTAL_BILLBOARD = 2;
  var RENDER_MODE_VERTICAL_BILLBOARD = 3;
  var RENDER_MODE_MESH = 4;
  var _vertex_attrs = [{
    name: _define.GFXAttributeName.ATTR_POSITION,
    format: _define.GFXFormat.RGB32F
  }, // position
  {
    name: _define.GFXAttributeName.ATTR_TEX_COORD,
    format: _define.GFXFormat.RGB32F
  }, // uv,frame idx
  {
    name: _define.GFXAttributeName.ATTR_TEX_COORD1,
    format: _define.GFXFormat.RGB32F
  }, // size
  {
    name: _define.GFXAttributeName.ATTR_TEX_COORD2,
    format: _define.GFXFormat.RGB32F
  }, // rotation
  {
    name: _define.GFXAttributeName.ATTR_COLOR,
    format: _define.GFXFormat.RGBA8,
    isNormalized: true
  } // color
  ];
  var _vertex_attrs_stretch = [{
    name: _define.GFXAttributeName.ATTR_POSITION,
    format: _define.GFXFormat.RGB32F
  }, // position
  {
    name: _define.GFXAttributeName.ATTR_TEX_COORD,
    format: _define.GFXFormat.RGB32F
  }, // uv,frame idx
  {
    name: _define.GFXAttributeName.ATTR_TEX_COORD1,
    format: _define.GFXFormat.RGB32F
  }, // size
  {
    name: _define.GFXAttributeName.ATTR_TEX_COORD2,
    format: _define.GFXFormat.RGB32F
  }, // rotation
  {
    name: _define.GFXAttributeName.ATTR_COLOR,
    format: _define.GFXFormat.RGBA8,
    isNormalized: true
  }, // color
  {
    name: _define.GFXAttributeName.ATTR_COLOR1,
    format: _define.GFXFormat.RGB32F
  } // particle velocity
  ];
  var _vertex_attrs_mesh = [{
    name: _define.GFXAttributeName.ATTR_POSITION,
    format: _define.GFXFormat.RGB32F
  }, // particle position
  {
    name: _define.GFXAttributeName.ATTR_TEX_COORD,
    format: _define.GFXFormat.RGB32F
  }, // uv,frame idx
  {
    name: _define.GFXAttributeName.ATTR_TEX_COORD1,
    format: _define.GFXFormat.RGB32F
  }, // size
  {
    name: _define.GFXAttributeName.ATTR_TEX_COORD2,
    format: _define.GFXFormat.RGB32F
  }, // rotation
  {
    name: _define.GFXAttributeName.ATTR_COLOR,
    format: _define.GFXFormat.RGBA8,
    isNormalized: true
  }, // particle color
  {
    name: _define.GFXAttributeName.ATTR_TEX_COORD3,
    format: _define.GFXFormat.RGB32F
  }, // mesh position
  {
    name: _define.GFXAttributeName.ATTR_NORMAL,
    format: _define.GFXFormat.RGB32F
  }, // mesh normal
  {
    name: _define.GFXAttributeName.ATTR_COLOR1,
    format: _define.GFXFormat.RGBA8,
    isNormalized: true
  } // mesh color
  ];
  var _matInsInfo = {
    parent: null,
    owner: null,
    subModelIdx: 0
  };

  var ParticleSystemRendererCPU = /*#__PURE__*/function (_ParticleSystemRender) {
    _inherits(ParticleSystemRendererCPU, _ParticleSystemRender);

    function ParticleSystemRendererCPU(info) {
      var _this;

      _classCallCheck(this, ParticleSystemRendererCPU);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(ParticleSystemRendererCPU).call(this, info));
      _this._defines = void 0;
      _this._trailDefines = void 0;
      _this._frameTile_velLenScale = void 0;
      _this._defaultMat = null;
      _this._node_scale = void 0;
      _this._attrs = void 0;
      _this._particles = null;
      _this._defaultTrailMat = null;
      _this._updateList = new Map();
      _this._animateList = new Map();
      _this._runAnimateList = new Array();
      _this._fillDataFunc = null;
      _this._uScaleHandle = 0;
      _this._uLenHandle = 0;
      _this._model = null;
      _this._frameTile_velLenScale = new _index2.Vec4(1, 1, 0, 0);
      _this._node_scale = new _index2.Vec4();
      _this._attrs = new Array(5);
      _this._defines = {
        CC_USE_WORLD_SPACE: true,
        CC_USE_BILLBOARD: true,
        CC_USE_STRETCHED_BILLBOARD: false,
        CC_USE_HORIZONTAL_BILLBOARD: false,
        CC_USE_VERTICAL_BILLBOARD: false
      };
      _this._trailDefines = {
        CC_USE_WORLD_SPACE: true // CC_DRAW_WIRE_FRAME: true,   // <wireframe debug>

      };
      return _this;
    }

    _createClass(ParticleSystemRendererCPU, [{
      key: "onInit",
      value: function onInit(ps) {
        var _this2 = this;

        _get(_getPrototypeOf(ParticleSystemRendererCPU.prototype), "onInit", this).call(this, ps);

        this._particles = new _index3.RecyclePool(function () {
          return new _particle.Particle(_this2);
        }, 16);

        this._setVertexAttrib();

        this._updateModel();

        this._setFillFunc();

        this._initModuleList();

        this.updateMaterialParams();
        this.updateTrailMaterial();
      }
    }, {
      key: "clear",
      value: function clear() {
        this._particles.reset();

        this._particleSystem._trailModule && this._particleSystem._trailModule.clear();
        this.updateRenderData();
      }
    }, {
      key: "updateRenderMode",
      value: function updateRenderMode() {
        this._setVertexAttrib();

        this._updateModel();

        this._setFillFunc();

        this.updateMaterialParams();
      }
    }, {
      key: "getFreeParticle",
      value: function getFreeParticle() {
        if (this._particles.length >= this._particleSystem.capacity) {
          return null;
        }

        return this._particles.add();
      }
    }, {
      key: "getDefaultTrailMaterial",
      value: function getDefaultTrailMaterial() {
        return this._defaultTrailMat;
      }
    }, {
      key: "setNewParticle",
      value: function setNewParticle(p) {}
    }, {
      key: "_initModuleList",
      value: function _initModuleList() {
        var _this3 = this;

        _anim_module.forEach(function (val) {
          var pm = _this3._particleSystem[val];

          if (pm && pm.enable) {
            if (pm.needUpdate) {
              _this3._updateList[pm.name] = pm;
            }

            if (pm.needAnimate) {
              _this3._animateList[pm.name] = pm;
            }
          }
        }); // reorder


        this._runAnimateList.length = 0;

        for (var i = 0, len = _particle.PARTICLE_MODULE_ORDER.length; i < len; i++) {
          var p = this._animateList[_particle.PARTICLE_MODULE_ORDER[i]];

          if (p) {
            this._runAnimateList.push(p);
          }
        }
      }
    }, {
      key: "enableModule",
      value: function enableModule(name, val, pm) {
        if (val) {
          if (pm.needUpdate) {
            this._updateList[pm.name] = pm;
          }

          if (pm.needAnimate) {
            this._animateList[pm.name] = pm;
          }
        } else {
          delete this._animateList[name];
          delete this._updateList[name];
        } // reorder


        this._runAnimateList.length = 0;

        for (var i = 0, len = _particle.PARTICLE_MODULE_ORDER.length; i < len; i++) {
          var p = this._animateList[_particle.PARTICLE_MODULE_ORDER[i]];

          if (p) {
            this._runAnimateList.push(p);
          }
        }
      }
    }, {
      key: "updateParticles",
      value: function updateParticles(dt) {
        var _this4 = this;

        var ps = this._particleSystem;

        if (!ps) {
          return this._particles.length;
        }

        ps.node.getWorldMatrix(_tempWorldTrans);

        switch (ps.scaleSpace) {
          case _enum.Space.Local:
            ps.node.getScale(this._node_scale);
            break;

          case _enum.Space.World:
            ps.node.getWorldScale(this._node_scale);
            break;
        }

        var mat = ps.getMaterialInstance(0) || this._defaultMat;

        var pass = mat.passes[0];
        pass.setUniform(this._uScaleHandle, this._node_scale);

        this._updateList.forEach(function (value, key) {
          value.update(ps._simulationSpace, _tempWorldTrans);
        });

        var trailModule = ps._trailModule;
        var trailEnable = trailModule && trailModule.enable;

        if (trailEnable) {
          trailModule.update();
        }

        var _loop = function _loop(_i) {
          var p = _this4._particles.data[_i];
          p.remainingLifetime -= dt;

          _index2.Vec3.set(p.animatedVelocity, 0, 0, 0);

          if (p.remainingLifetime < 0.0) {
            if (trailEnable) {
              trailModule.removeParticle(p);
            }

            _this4._particles.removeAt(_i);

            --_i;
            i = _i;
            return "continue";
          } // apply gravity.


          p.velocity.y -= ps.gravityModifier.evaluate(1 - p.remainingLifetime / p.startLifetime, (0, _index2.pseudoRandom)(p.randomSeed)) * 9.8 * dt;

          _index2.Vec3.copy(p.ultimateVelocity, p.velocity);

          _this4._runAnimateList.forEach(function (value) {
            value.animate(p, dt);
          });

          _index2.Vec3.scaleAndAdd(p.position, p.position, p.ultimateVelocity, dt); // apply velocity.


          if (trailEnable) {
            trailModule.animate(p, dt);
          }

          i = _i;
        };

        for (var i = 0; i < this._particles.length; ++i) {
          var _ret = _loop(i);

          if (_ret === "continue") continue;
        }

        return this._particles.length;
      } // internal function

    }, {
      key: "updateRenderData",
      value: function updateRenderData() {
        // update vertex buffer
        var idx = 0;

        for (var _i2 = 0; _i2 < this._particles.length; ++_i2) {
          var p = this._particles.data[_i2];
          var fi = 0;
          var textureModule = this._particleSystem._textureAnimationModule;

          if (textureModule && textureModule.enable) {
            fi = p.frameIndex;
          }

          idx = _i2 * 4;

          this._fillDataFunc(p, idx, fi);
        } // because we use index buffer, per particle index count = 6.


        this._model.updateIA(this._particles.length);
      }
    }, {
      key: "getParticleCount",
      value: function getParticleCount() {
        return this._particles.length;
      }
    }, {
      key: "onMaterialModified",
      value: function onMaterialModified(index, material) {
        if (index === 0) {
          this._updateModel();

          this.updateMaterialParams();
        } else {
          this.updateTrailMaterial();
        }
      }
    }, {
      key: "onRebuildPSO",
      value: function onRebuildPSO(index, material) {
        if (this._model && index === 0) {
          this._model.setSubModelMaterial(0, material);
        }

        var trailModule = this._particleSystem._trailModule;

        if (trailModule && trailModule._trailModel && index === 1) {
          trailModule._trailModel.setSubModelMaterial(0, material);
        }
      }
    }, {
      key: "_setFillFunc",
      value: function _setFillFunc() {
        if (this._renderInfo.renderMode === _enum.RenderMode.Mesh) {
          this._fillDataFunc = this._fillMeshData;
        } else if (this._renderInfo.renderMode === _enum.RenderMode.StrecthedBillboard) {
          this._fillDataFunc = this._fillStrecthedData;
        } else {
          this._fillDataFunc = this._fillNormalData;
        }
      }
    }, {
      key: "_fillMeshData",
      value: function _fillMeshData(p, idx, fi) {
        var i = idx / 4;
        var attrNum = 0;
        this._attrs[attrNum++] = p.position;
        _tempAttribUV.z = fi;
        this._attrs[attrNum++] = _tempAttribUV;
        this._attrs[attrNum++] = p.size;
        this._attrs[attrNum++] = p.rotation;
        this._attrs[attrNum++] = p.color._val;

        this._model.addParticleVertexData(i, this._attrs);
      }
    }, {
      key: "_fillStrecthedData",
      value: function _fillStrecthedData(p, idx, fi) {
        var attrNum = 0;

        for (var j = 0; j < 4; ++j) {
          // four verts per particle.
          attrNum = 0;
          this._attrs[attrNum++] = p.position;
          _tempAttribUV.x = _uvs[2 * j];
          _tempAttribUV.y = _uvs[2 * j + 1];
          _tempAttribUV.z = fi;
          this._attrs[attrNum++] = _tempAttribUV;
          this._attrs[attrNum++] = p.size;
          this._attrs[attrNum++] = p.rotation;
          this._attrs[attrNum++] = p.color._val;
          this._attrs[attrNum++] = p.ultimateVelocity;
          this._attrs[attrNum++] = p.ultimateVelocity;

          this._model.addParticleVertexData(idx++, this._attrs);
        }
      }
    }, {
      key: "_fillNormalData",
      value: function _fillNormalData(p, idx, fi) {
        var attrNum = 0;

        for (var j = 0; j < 4; ++j) {
          // four verts per particle.
          attrNum = 0;
          this._attrs[attrNum++] = p.position;
          _tempAttribUV.x = _uvs[2 * j];
          _tempAttribUV.y = _uvs[2 * j + 1];
          _tempAttribUV.z = fi;
          this._attrs[attrNum++] = _tempAttribUV;
          this._attrs[attrNum++] = p.size;
          this._attrs[attrNum++] = p.rotation;
          this._attrs[attrNum++] = p.color._val;
          this._attrs[attrNum++] = null;

          this._model.addParticleVertexData(idx++, this._attrs);
        }
      }
    }, {
      key: "_setVertexAttrib",
      value: function _setVertexAttrib() {
        switch (this._renderInfo.renderMode) {
          case _enum.RenderMode.StrecthedBillboard:
            this._vertAttrs = _vertex_attrs_stretch.slice();
            break;

          case _enum.RenderMode.Mesh:
            this._vertAttrs = _vertex_attrs_mesh.slice();
            break;

          default:
            this._vertAttrs = _vertex_attrs.slice();
        }
      }
    }, {
      key: "updateMaterialParams",
      value: function updateMaterialParams() {
        if (!this._particleSystem) {
          return;
        }

        var ps = this._particleSystem;
        var shareMaterial = ps.sharedMaterial;

        if (shareMaterial != null) {
          var effectName = shareMaterial._effectAsset._name;
          this._renderInfo.mainTexture = shareMaterial.getProperty('mainTexture', 0); // reset material

          if (effectName.indexOf('particle') === -1 || effectName.indexOf('particle-gpu') !== -1) {
            ps.setMaterial(null, 0);
          }
        }

        if (ps.sharedMaterial == null && this._defaultMat == null) {
          _matInsInfo.parent = _index.builtinResMgr.get('default-particle-material');
          _matInsInfo.owner = this._particleSystem;
          _matInsInfo.subModelIdx = 0;
          this._defaultMat = new _materialInstance.MaterialInstance(_matInsInfo);

          if (this._renderInfo.mainTexture !== null) {
            this._defaultMat.setProperty('mainTexture', this._renderInfo.mainTexture);
          }
        }

        var mat = ps.getMaterialInstance(0) || this._defaultMat;

        if (ps._simulationSpace === _enum.Space.World) {
          this._defines[CC_USE_WORLD_SPACE] = true;
        } else {
          this._defines[CC_USE_WORLD_SPACE] = false;
        }

        var pass = mat.passes[0];
        this._uScaleHandle = pass.getHandle('scale');
        this._uLenHandle = pass.getHandle('frameTile_velLenScale');
        var renderMode = this._renderInfo.renderMode;
        var vlenScale = this._frameTile_velLenScale;

        if (renderMode === _enum.RenderMode.Billboard) {
          this._defines[CC_RENDER_MODE] = RENDER_MODE_BILLBOARD;
        } else if (renderMode === _enum.RenderMode.StrecthedBillboard) {
          this._defines[CC_RENDER_MODE] = RENDER_MODE_STRETCHED_BILLBOARD;
          vlenScale.z = this._renderInfo.velocityScale;
          vlenScale.w = this._renderInfo.lengthScale;
        } else if (renderMode === _enum.RenderMode.HorizontalBillboard) {
          this._defines[CC_RENDER_MODE] = RENDER_MODE_HORIZONTAL_BILLBOARD;
        } else if (renderMode === _enum.RenderMode.VerticalBillboard) {
          this._defines[CC_RENDER_MODE] = RENDER_MODE_VERTICAL_BILLBOARD;
        } else if (renderMode === _enum.RenderMode.Mesh) {
          this._defines[CC_RENDER_MODE] = RENDER_MODE_MESH;
        } else {
          console.warn("particle system renderMode ".concat(renderMode, " not support."));
        }

        var textureModule = ps._textureAnimationModule;

        if (textureModule && textureModule.enable) {
          _index2.Vec2.set(vlenScale, textureModule.numTilesX, textureModule.numTilesY);

          pass.setUniform(this._uLenHandle, vlenScale);
        } else {
          pass.setUniform(this._uLenHandle, vlenScale);
        }

        mat.recompileShaders(this._defines);

        if (this._model) {
          this._model.setSubModelMaterial(0, mat);
        }
      }
    }, {
      key: "updateTrailMaterial",
      value: function updateTrailMaterial() {
        if (!this._particleSystem) {
          return;
        }

        var ps = this._particleSystem;
        var trailModule = ps._trailModule;

        if (trailModule && trailModule.enable) {
          if (ps.simulationSpace === _enum.Space.World || trailModule.space === _enum.Space.World) {
            this._trailDefines[CC_USE_WORLD_SPACE] = true;
          } else {
            this._trailDefines[CC_USE_WORLD_SPACE] = false;
          }

          var mat = ps.getMaterialInstance(1);

          if (mat === null && this._defaultTrailMat === null) {
            _matInsInfo.parent = _index.builtinResMgr.get('default-trail-material');
            _matInsInfo.owner = this._particleSystem;
            _matInsInfo.subModelIdx = 1;
            this._defaultTrailMat = new _materialInstance.MaterialInstance(_matInsInfo);
          }

          mat = mat || this._defaultTrailMat;
          mat.recompileShaders(this._trailDefines);

          trailModule._updateMaterial();
        }
      }
    }]);

    return ParticleSystemRendererCPU;
  }(_particleSystemRendererBase.ParticleSystemRendererBase);

  _exports.default = ParticleSystemRendererCPU;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,