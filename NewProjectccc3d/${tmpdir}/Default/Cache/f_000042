(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../math/index.js", "../../memop/index.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../math/index.js"), require("../../memop/index.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.index);
    global.renderData = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _index2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MeshRenderData = _exports.RenderData = _exports.BaseRenderData = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var BaseRenderData = function BaseRenderData() {
    _classCallCheck(this, BaseRenderData);

    this.material = null;
    this.vertexCount = 0;
    this.indiceCount = 0;
  };

  _exports.BaseRenderData = BaseRenderData;

  var RenderData = /*#__PURE__*/function (_BaseRenderData) {
    _inherits(RenderData, _BaseRenderData);

    function RenderData() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, RenderData);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RenderData)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.vData = null;
      _this.uvDirty = true;
      _this.vertDirty = true;
      _this._datas = [];
      _this._indices = [];
      _this._pivotX = 0;
      _this._pivotY = 0;
      _this._width = 0;
      _this._height = 0;
      return _this;
    }

    _createClass(RenderData, [{
      key: "updateSizeNPivot",
      value: function updateSizeNPivot(width, height, pivotX, pivotY) {
        if (width !== this._width || height !== this._height || pivotX !== this._pivotX || pivotY !== this._pivotY) {
          this._width = width;
          this._height = height;
          this._pivotX = pivotX;
          this._pivotY = pivotY;
          this.vertDirty = true;
        }
      }
    }, {
      key: "clear",
      value: function clear() {
        this._datas.length = 0;
        this._indices.length = 0;
        this._pivotX = 0;
        this._pivotY = 0;
        this._width = 0;
        this._height = 0;
        this.uvDirty = true;
        this.vertDirty = true;
        this.material = null;
        this.vertexCount = 0;
        this.indiceCount = 0;
      }
    }, {
      key: "dataLength",
      get: function get() {
        return this._datas.length;
      },
      set: function set(length) {
        var data = this._datas;

        if (data.length !== length) {
          // // Free extra data
          var value = data.length;
          var i = 0;

          for (i = length; i < value; i++) {
            _dataPool.free(data[i]);
          }

          for (i = value; i < length; i++) {
            data[i] = _dataPool.alloc();
          }

          data.length = length;
        }
      }
    }, {
      key: "datas",
      get: function get() {
        return this._datas;
      }
    }], [{
      key: "add",
      value: function add() {
        return _pool.add();
      }
    }, {
      key: "remove",
      value: function remove(data) {
        var idx = _pool.data.indexOf(data);

        if (idx === -1) {
          return;
        }

        _pool.data[idx].clear();

        _pool.removeAt(idx);
      }
    }]);

    return RenderData;
  }(BaseRenderData);

  _exports.RenderData = RenderData;

  var MeshRenderData = /*#__PURE__*/function (_BaseRenderData2) {
    _inherits(MeshRenderData, _BaseRenderData2);

    function MeshRenderData() {
      var _getPrototypeOf3;

      var _this2;

      _classCallCheck(this, MeshRenderData);

      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      _this2 = _possibleConstructorReturn(this, (_getPrototypeOf3 = _getPrototypeOf(MeshRenderData)).call.apply(_getPrototypeOf3, [this].concat(args)));
      _this2.vData = new Float32Array(256 * 9 * Float32Array.BYTES_PER_ELEMENT);
      _this2.iData = new Uint16Array(256 * 6);
      _this2.vertexStart = 0;
      _this2.indiceStart = 0;
      _this2.byteStart = 0;
      _this2.byteCount = 0;
      _this2._formatByte = 9 * Float32Array.BYTES_PER_ELEMENT;
      return _this2;
    }

    _createClass(MeshRenderData, [{
      key: "request",
      value: function request(vertexCount, indiceCount) {
        var byteOffset = this.byteCount + vertexCount * this._formatByte;
        var indiceOffset = this.indiceCount + indiceCount;

        if (vertexCount + this.vertexCount > 65535) {
          return false;
        }

        var byteLength = this.vData.byteLength;
        var indiceLength = this.iData.length;
        var vCount = this.vData.length;
        var iCount = this.iData.length;

        if (byteOffset > byteLength || indiceOffset > indiceLength) {
          while (byteLength < byteOffset || indiceLength < indiceOffset) {
            vCount *= 2;
            iCount *= 2;
            byteLength = vCount * 4;
            indiceLength = iCount;
          } // copy old data


          var oldvData = new Float32Array(this.vData.buffer);
          this.vData = new Float32Array(vCount);
          this.vData.set(oldvData, 0);
          var oldiData = new Uint16Array(this.iData.buffer);
          this.iData = new Uint16Array(iCount);
          this.iData.set(oldiData, 0);
        }

        this.vertexCount += vertexCount; // vertexOffset

        this.indiceCount += indiceCount; // indiceOffset

        this.byteCount = byteOffset; // byteOffset

        return true;
      }
    }, {
      key: "reset",
      value: function reset() {
        this.vertexCount = 0;
        this.indiceCount = 0;
        this.byteCount = 0;
        this.vertexStart = 0;
        this.indiceStart = 0;
        this.byteStart = 0;
      }
    }]);

    return MeshRenderData;
  }(BaseRenderData);

  _exports.MeshRenderData = MeshRenderData;

  var _dataPool = new _index2.Pool(function () {
    return {
      x: 0,
      y: 0,
      z: 0,
      u: 0,
      v: 0,
      color: _index.Color.WHITE.clone()
    };
  }, 128);

  var _pool = new _index2.RecyclePool(function () {
    return new RenderData();
  }, 32);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,