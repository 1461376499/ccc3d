(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../3d/builtin/index.js", "../../3d/misc/utils.js", "../../assets/material.js", "../../pipeline/define.js", "../../primitive/index.js", "../core/material-instance.js", "../core/sampler-lib.js", "./model.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../3d/builtin/index.js"), require("../../3d/misc/utils.js"), require("../../assets/material.js"), require("../../pipeline/define.js"), require("../../primitive/index.js"), require("../core/material-instance.js"), require("../core/sampler-lib.js"), require("./model.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.utils, global.material, global.define, global.index, global.materialInstance, global.samplerLib, global.model);
    global.skybox = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _utils, _material, _define, _index2, _materialInstance, _samplerLib, _model) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Skybox = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  var skybox_mesh = null;
  var skybox_material = null;

  var Skybox = /*#__PURE__*/function (_Model) {
    _inherits(Skybox, _Model);

    _createClass(Skybox, [{
      key: "useIBL",
      set: function set(val) {
        this._useIBL = val;

        this._updatePipeline();
      },
      get: function get() {
        return this._useIBL;
      }
    }, {
      key: "isRGBE",
      set: function set(val) {
        this._isRGBE = val;
        skybox_material.recompileShaders({
          USE_RGBE_CUBEMAP: this._isRGBE
        });
        this.setSubModelMaterial(0, skybox_material);

        this._updatePipeline();
      },
      get: function get() {
        return this._isRGBE;
      }
    }, {
      key: "envmap",
      set: function set(val) {
        var newEnvmap = val || this._default;
        this._envmap = newEnvmap;
        this.scene.ambient.groundAlbedo[3] = this._envmap.mipmapLevel;

        this._updateGlobalBinding();
      },
      get: function get() {
        return this._envmap;
      }
    }]);

    function Skybox(scene) {
      var _this;

      _classCallCheck(this, Skybox);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Skybox).call(this));
      _this._default = _index.builtinResMgr.get('default-cube-texture');
      _this._envmap = _this._default;
      _this._isRGBE = false;
      _this._useIBL = false;
      _this._globalBinding = void 0;
      _this.scene = scene;
      _this._globalBinding = _this.scene.root.pipeline.globalBindings.get(_define.UNIFORM_ENVIRONMENT.name);

      if (!skybox_material) {
        var mat = new _material.Material();
        mat.initialize({
          effectName: 'pipeline/skybox',
          defines: {
            USE_RGBE_CUBEMAP: _this._isRGBE
          }
        });
        skybox_material = new _materialInstance.MaterialInstance({
          parent: mat
        });
      }

      if (!skybox_mesh) {
        skybox_mesh = (0, _utils.createMesh)((0, _index2.box)({
          width: 2,
          height: 2,
          length: 2
        }));
      }

      _this.initSubModel(0, skybox_mesh.renderingSubMeshes[0], skybox_material);

      return _this;
    }

    _createClass(Skybox, [{
      key: "onGlobalPipelineStateChanged",
      value: function onGlobalPipelineStateChanged() {
        _get(_getPrototypeOf(Skybox.prototype), "onGlobalPipelineStateChanged", this).call(this);

        this._updateGlobalBinding();
      }
    }, {
      key: "_updatePipeline",
      value: function _updatePipeline() {
        var value = this._useIBL ? this._isRGBE ? 2 : 1 : 0;
        var pipeline = this.scene.root.pipeline;
        var current = pipeline.macros.CC_USE_IBL || 0;

        if (current === value) {
          return;
        }

        pipeline.macros.CC_USE_IBL = value;
        this.scene.onGlobalPipelineStateChanged();
      }
    }, {
      key: "_updateGlobalBinding",
      value: function _updateGlobalBinding() {
        var textureView = this._envmap.getGFXTextureView();

        var sampler = _samplerLib.samplerLib.getSampler(this._device, this._envmap.getSamplerHash());

        this._globalBinding.sampler = sampler;
        this._globalBinding.textureView = textureView; // update skybox material, need to do this every time pso is created
        // because skybox.updateUBOs is not called in pipeline per frame

        var mat = skybox_material;
        mat.passes[0].bindSampler(_define.UNIFORM_ENVIRONMENT.binding, sampler);
        mat.passes[0].bindTextureView(_define.UNIFORM_ENVIRONMENT.binding, textureView);

        var psos = this._matPSORecord.get(mat);

        for (var i = 0; i < psos.length; i++) {
          psos[i].pipelineLayout.layouts[0].update();
        }
      }
    }]);

    return Skybox;
  }(_model.Model);

  _exports.Skybox = Skybox;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,