(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../math/index.js", "./enums.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../math/index.js"), require("./enums.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.enums);
    global.obb = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _enums) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _enums = _interopRequireDefault(_enums);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var _v3_tmp = new _index.Vec3();

  var _v3_tmp2 = new _index.Vec3();

  var _m3_tmp = new _index.Mat3(); // https://zeuxcg.org/2010/10/17/aabb-from-obb-with-component-wise-abs/


  var transform_extent_m3 = function transform_extent_m3(out, extent, m3) {
    _m3_tmp.m00 = Math.abs(m3.m00);
    _m3_tmp.m01 = Math.abs(m3.m01);
    _m3_tmp.m02 = Math.abs(m3.m02);
    _m3_tmp.m03 = Math.abs(m3.m03);
    _m3_tmp.m04 = Math.abs(m3.m04);
    _m3_tmp.m05 = Math.abs(m3.m05);
    _m3_tmp.m06 = Math.abs(m3.m06);
    _m3_tmp.m07 = Math.abs(m3.m07);
    _m3_tmp.m08 = Math.abs(m3.m08);

    _index.Vec3.transformMat3(out, extent, _m3_tmp);
  };
  /**
   * @en
   * Basic Geometry: directional bounding box.
   * @zh
   * 基础几何  方向包围盒。
   */
  // tslint:disable-next-line:class-name


  var obb = /*#__PURE__*/function () {
    _createClass(obb, [{
      key: "type",

      /**
       * @en
       * Gets the type of the shape.
       * @zh
       * 获取形状的类型。
       */
      get: function get() {
        return this._type;
      }
    }], [{
      key: "create",

      /**
       * @en
       * create a new obb
       * @zh
       * 创建一个新的 obb 实例。
       * @param cx 形状的相对于原点的 X 坐标。
       * @param cy 形状的相对于原点的 Y 坐标。
       * @param cz 形状的相对于原点的 Z 坐标。
       * @param hw - obb 宽度的一半。
       * @param hh - obb 高度的一半。
       * @param hl - obb 长度的一半。
       * @param ox_1 方向矩阵参数。
       * @param ox_2 方向矩阵参数。
       * @param ox_3 方向矩阵参数。
       * @param oy_1 方向矩阵参数。
       * @param oy_2 方向矩阵参数。
       * @param oy_3 方向矩阵参数。
       * @param oz_1 方向矩阵参数。
       * @param oz_2 方向矩阵参数。
       * @param oz_3 方向矩阵参数。
       * @return 返回一个 obb。
       */
      value: function create(cx, cy, cz, hw, hh, hl, ox_1, ox_2, ox_3, oy_1, oy_2, oy_3, oz_1, oz_2, oz_3) {
        return new obb(cx, cy, cz, hw, hh, hl, ox_1, ox_2, ox_3, oy_1, oy_2, oy_3, oz_1, oz_2, oz_3);
      }
      /**
       * @en
       * clone a new obb
       * @zh
       * 克隆一个 obb。
       * @param a 克隆的目标。
       * @returns 克隆出的新对象。
       */

    }, {
      key: "clone",
      value: function clone(a) {
        return new obb(a.center.x, a.center.y, a.center.z, a.halfExtents.x, a.halfExtents.y, a.halfExtents.z, a.orientation.m00, a.orientation.m01, a.orientation.m02, a.orientation.m03, a.orientation.m04, a.orientation.m05, a.orientation.m06, a.orientation.m07, a.orientation.m08);
      }
      /**
       * @en
       * copy the values from one obb to another
       * @zh
       * 将从一个 obb 的值复制到另一个 obb。
       * @param {obb} out 接受操作的 obb。
       * @param {obb} a 被复制的 obb。
       * @return {obb} out 接受操作的 obb。
       */

    }, {
      key: "copy",
      value: function copy(out, a) {
        _index.Vec3.copy(out.center, a.center);

        _index.Vec3.copy(out.halfExtents, a.halfExtents);

        _index.Mat3.copy(out.orientation, a.orientation);

        return out;
      }
      /**
       * @en
       * create a new obb from two corner points
       * @zh
       * 用两个点创建一个新的 obb。
       * @param out - 接受操作的 obb。
       * @param minPos - obb 的最小点。
       * @param maxPos - obb 的最大点。
       * @returns {obb} out 接受操作的 obb。
       */

    }, {
      key: "fromPoints",
      value: function fromPoints(out, minPos, maxPos) {
        _index.Vec3.multiplyScalar(out.center, _index.Vec3.add(_v3_tmp, minPos, maxPos), 0.5);

        _index.Vec3.multiplyScalar(out.halfExtents, _index.Vec3.subtract(_v3_tmp2, maxPos, minPos), 0.5);

        _index.Mat3.identity(out.orientation);

        return out;
      }
      /**
       * @en
       * Set the components of a obb to the given values
       * @zh
       * 将给定 obb 的属性设置为给定的值。
       * @param cx - obb 的原点的 X 坐标。
       * @param cy - obb 的原点的 Y 坐标。
       * @param cz - obb 的原点的 Z 坐标。
       * @param hw - obb 宽度的一半。
       * @param hh - obb 高度的一半。
       * @param hl - obb 长度的一半。
       * @param ox_1 方向矩阵参数。
       * @param ox_2 方向矩阵参数。
       * @param ox_3 方向矩阵参数。
       * @param oy_1 方向矩阵参数。
       * @param oy_2 方向矩阵参数。
       * @param oy_3 方向矩阵参数。
       * @param oz_1 方向矩阵参数。
       * @param oz_2 方向矩阵参数。
       * @param oz_3 方向矩阵参数。
       * @return {obb} out
       */

    }, {
      key: "set",
      value: function set(out, cx, cy, cz, hw, hh, hl, ox_1, ox_2, ox_3, oy_1, oy_2, oy_3, oz_1, oz_2, oz_3) {
        _index.Vec3.set(out.center, cx, cy, cz);

        _index.Vec3.set(out.halfExtents, hw, hh, hl);

        _index.Mat3.set(out.orientation, ox_1, ox_2, ox_3, oy_1, oy_2, oy_3, oz_1, oz_2, oz_3);

        return out;
      }
      /**
       * @zh
       * 本地坐标的中心点。
       */

    }]);

    function obb() {
      var cx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var cy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var cz = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var hw = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
      var hh = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
      var hl = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;
      var ox_1 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 1;
      var ox_2 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
      var ox_3 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;
      var oy_1 = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;
      var oy_2 = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 1;
      var oy_3 = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 0;
      var oz_1 = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : 0;
      var oz_2 = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : 0;
      var oz_3 = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : 1;

      _classCallCheck(this, obb);

      this.center = void 0;
      this.halfExtents = void 0;
      this.orientation = void 0;
      this._type = void 0;
      this._type = _enums.default.SHAPE_OBB;
      this.center = new _index.Vec3(cx, cy, cz);
      this.halfExtents = new _index.Vec3(hw, hh, hl);
      this.orientation = new _index.Mat3(ox_1, ox_2, ox_3, oy_1, oy_2, oy_3, oz_1, oz_2, oz_3);
    }
    /**
     * @en
     * Get the bounding points of this shape
     * @zh
     * 获取 obb 的最小点和最大点。
     * @param {Vec3} minPos 最小点。
     * @param {Vec3} maxPos 最大点。
     */


    _createClass(obb, [{
      key: "getBoundary",
      value: function getBoundary(minPos, maxPos) {
        transform_extent_m3(_v3_tmp, this.halfExtents, this.orientation);

        _index.Vec3.subtract(minPos, this.center, _v3_tmp);

        _index.Vec3.add(maxPos, this.center, _v3_tmp);
      }
      /**
       * Transform this shape
       * @zh
       * 将 out 根据这个 obb 的数据进行变换。
       * @param m 变换的矩阵。
       * @param pos 变换的位置部分。
       * @param rot 变换的旋转部分。
       * @param scale 变换的缩放部分。
       * @param out 变换的目标。
       */

    }, {
      key: "transform",
      value: function transform(m, pos, rot, scale, out) {
        _index.Vec3.transformMat4(out.center, this.center, m); // parent shape doesn't contain rotations for now


        _index.Mat3.fromQuat(out.orientation, rot);

        _index.Vec3.multiply(out.halfExtents, this.halfExtents, scale);
      }
      /**
       * @zh
       * 将 out 根据这个 obb 的数据进行变换。
       * @param m 变换的矩阵。
       * @param rot 变换的旋转部分。
       * @param out 变换的目标。
       */

    }, {
      key: "translateAndRotate",
      value: function translateAndRotate(m, rot, out) {
        _index.Vec3.transformMat4(out.center, this.center, m); // parent shape doesn't contain rotations for now


        _index.Mat3.fromQuat(out.orientation, rot);
      }
      /**
       * @zh
       *  将 out 根据这个 obb 的数据进行缩放。
       * @param scale 缩放值。
       * @param out 缩放的目标。
       */

    }, {
      key: "setScale",
      value: function setScale(scale, out) {
        _index.Vec3.multiply(out.halfExtents, this.halfExtents, scale);
      }
    }]);

    return obb;
  }();

  _exports.default = obb;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,