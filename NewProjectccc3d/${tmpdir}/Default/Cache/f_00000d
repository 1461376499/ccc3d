(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../default-constants.js", "../../platform/index.js", "../../platform/sys.js", "../define.js", "../device.js", "./webgl-binding-layout.js", "./webgl-buffer.js", "./webgl-command-allocator.js", "./webgl-command-buffer.js", "./webgl-commands.js", "./webgl-framebuffer.js", "./webgl-input-assembler.js", "./webgl-pipeline-layout.js", "./webgl-pipeline-state.js", "./webgl-primary-command-buffer.js", "./webgl-queue.js", "./webgl-render-pass.js", "./webgl-sampler.js", "./webgl-shader.js", "./webgl-state-cache.js", "./webgl-texture.js", "./webgl-texture-view.js", "./webgl-window.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../default-constants.js"), require("../../platform/index.js"), require("../../platform/sys.js"), require("../define.js"), require("../device.js"), require("./webgl-binding-layout.js"), require("./webgl-buffer.js"), require("./webgl-command-allocator.js"), require("./webgl-command-buffer.js"), require("./webgl-commands.js"), require("./webgl-framebuffer.js"), require("./webgl-input-assembler.js"), require("./webgl-pipeline-layout.js"), require("./webgl-pipeline-state.js"), require("./webgl-primary-command-buffer.js"), require("./webgl-queue.js"), require("./webgl-render-pass.js"), require("./webgl-sampler.js"), require("./webgl-shader.js"), require("./webgl-state-cache.js"), require("./webgl-texture.js"), require("./webgl-texture-view.js"), require("./webgl-window.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.defaultConstants, global.index, global.sys, global.define, global.device, global.webglBindingLayout, global.webglBuffer, global.webglCommandAllocator, global.webglCommandBuffer, global.webglCommands, global.webglFramebuffer, global.webglInputAssembler, global.webglPipelineLayout, global.webglPipelineState, global.webglPrimaryCommandBuffer, global.webglQueue, global.webglRenderPass, global.webglSampler, global.webglShader, global.webglStateCache, global.webglTexture, global.webglTextureView, global.webglWindow);
    global.webglDevice = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _defaultConstants, _index, _sys, _define, _device, _webglBindingLayout, _webglBuffer, _webglCommandAllocator, _webglCommandBuffer, _webglCommands, _webglFramebuffer, _webglInputAssembler, _webglPipelineLayout, _webglPipelineState, _webglPrimaryCommandBuffer, _webglQueue, _webglRenderPass, _webglSampler, _webglShader, _webglStateCache, _webglTexture, _webglTextureView, _webglWindow) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.WebGLGFXDevice = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  var WebGLGFXDevice = /*#__PURE__*/function (_GFXDevice) {
    _inherits(WebGLGFXDevice, _GFXDevice);

    _createClass(WebGLGFXDevice, [{
      key: "gl",
      get: function get() {
        return this._webGLRC;
      }
    }, {
      key: "webGLQueue",
      get: function get() {
        return this._queue;
      }
    }, {
      key: "isAntialias",
      get: function get() {
        return this._isAntialias;
      }
    }, {
      key: "isPremultipliedAlpha",
      get: function get() {
        return this._isPremultipliedAlpha;
      }
    }, {
      key: "useVAO",
      get: function get() {
        return this._useVAO;
      }
    }, {
      key: "EXT_texture_filter_anisotropic",
      get: function get() {
        return this._EXT_texture_filter_anisotropic;
      }
    }, {
      key: "EXT_frag_depth",
      get: function get() {
        return this._EXT_frag_depth;
      }
    }, {
      key: "EXT_shader_texture_lod",
      get: function get() {
        return this._EXT_shader_texture_lod;
      }
    }, {
      key: "EXT_sRGB",
      get: function get() {
        return this._EXT_sRGB;
      }
    }, {
      key: "OES_vertex_array_object",
      get: function get() {
        return this._OES_vertex_array_object;
      }
    }, {
      key: "WEBGL_color_buffer_float",
      get: function get() {
        return this._WEBGL_color_buffer_float;
      }
    }, {
      key: "WEBGL_compressed_texture_etc1",
      get: function get() {
        return this._WEBGL_compressed_texture_etc1;
      }
    }, {
      key: "WEBGL_compressed_texture_pvrtc",
      get: function get() {
        return this._WEBGL_compressed_texture_pvrtc;
      }
    }, {
      key: "WEBGL_compressed_texture_astc",
      get: function get() {
        return this._WEBGL_compressed_texture_astc;
      }
    }, {
      key: "WEBGL_compressed_texture_s3tc",
      get: function get() {
        return this._WEBGL_compressed_texture_s3tc;
      }
    }, {
      key: "WEBGL_compressed_texture_s3tc_srgb",
      get: function get() {
        return this._WEBGL_compressed_texture_s3tc_srgb;
      }
    }, {
      key: "WEBGL_debug_shaders",
      get: function get() {
        return this._WEBGL_debug_shaders;
      }
    }, {
      key: "WEBGL_draw_buffers",
      get: function get() {
        return this._WEBGL_draw_buffers;
      }
    }, {
      key: "WEBGL_lose_context",
      get: function get() {
        return this._WEBGL_lose_context;
      }
    }, {
      key: "WEBGL_depth_texture",
      get: function get() {
        return this._WEBGL_depth_texture;
      }
    }, {
      key: "WEBGL_debug_renderer_info",
      get: function get() {
        return this._WEBGL_debug_renderer_info;
      }
    }, {
      key: "OES_texture_half_float",
      get: function get() {
        return this._OES_texture_half_float;
      }
    }, {
      key: "OES_texture_half_float_linear",
      get: function get() {
        return this._OES_texture_half_float_linear;
      }
    }, {
      key: "OES_texture_float",
      get: function get() {
        return this._OES_texture_float;
      }
    }, {
      key: "OES_standard_derivatives",
      get: function get() {
        return this._OES_standard_derivatives;
      }
    }, {
      key: "OES_element_index_uint",
      get: function get() {
        return this._OES_element_index_uint;
      }
    }, {
      key: "ANGLE_instanced_arrays",
      get: function get() {
        return this._ANGLE_instanced_arrays;
      }
    }]);

    function WebGLGFXDevice() {
      var _this;

      _classCallCheck(this, WebGLGFXDevice);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(WebGLGFXDevice).call(this));
      _this.stateCache = new _webglStateCache.WebGLStateCache();
      _this.nullTex2D = null;
      _this.nullTexCube = null;
      _this._webGLRC = null;
      _this._isAntialias = true;
      _this._isPremultipliedAlpha = true;
      _this._useVAO = false;
      _this._extensions = null;
      _this._EXT_texture_filter_anisotropic = null;
      _this._EXT_frag_depth = null;
      _this._EXT_shader_texture_lod = null;
      _this._EXT_sRGB = null;
      _this._OES_vertex_array_object = null;
      _this._EXT_color_buffer_half_float = null;
      _this._WEBGL_color_buffer_float = null;
      _this._WEBGL_compressed_texture_etc1 = null;
      _this._WEBGL_compressed_texture_etc = null;
      _this._WEBGL_compressed_texture_pvrtc = null;
      _this._WEBGL_compressed_texture_astc = null;
      _this._WEBGL_compressed_texture_s3tc = null;
      _this._WEBGL_compressed_texture_s3tc_srgb = null;
      _this._WEBGL_debug_shaders = null;
      _this._WEBGL_draw_buffers = null;
      _this._WEBGL_lose_context = null;
      _this._WEBGL_depth_texture = null;
      _this._WEBGL_debug_renderer_info = null;
      _this._OES_texture_half_float = null;
      _this._OES_texture_half_float_linear = null;
      _this._OES_texture_float = null;
      _this._OES_texture_float_linear = null;
      _this._OES_standard_derivatives = null;
      _this._OES_element_index_uint = null;
      _this._ANGLE_instanced_arrays = null;
      return _this;
    }

    _createClass(WebGLGFXDevice, [{
      key: "initialize",
      value: function initialize(info) {
        this._canvas = info.canvasElm;
        this._isAntialias = info.isAntialias !== undefined ? info.isAntialias : true;
        this._isPremultipliedAlpha = info.isPremultipliedAlpha !== undefined ? info.isPremultipliedAlpha : true;

        try {
          var webGLCtxAttribs = {
            alpha: _index.macro.ENABLE_TRANSPARENT_CANVAS,
            antialias: this._isAntialias,
            depth: true,
            stencil: true,
            premultipliedAlpha: this._isPremultipliedAlpha,
            preserveDrawingBuffer: false,
            powerPreference: 'default',
            failIfMajorPerformanceCaveat: false
          };
          /*
          if (cc.sys.platform === cc.sys.WECHAT_GAME ||
              cc.sys.platform === cc.sys.QQ_PLAY) {
              webGLCtxAttribs.preserveDrawingBuffer = true;
          }
          */

          this._webGLRC = this._canvas.getContext('webgl', webGLCtxAttribs);
        } catch (err) {
          console.error(err);
          return false;
        }

        if (!this._webGLRC) {
          console.error('This device does not support WebGL.');
          return false;
        }

        this._canvas2D = document.createElement('canvas');
        console.info('WebGL device initialized.');
        this._gfxAPI = _device.GFXAPI.WEBGL;
        this._deviceName = 'WebGL';
        var gl = this._webGLRC;
        this._WEBGL_debug_renderer_info = this.getExtension('WEBGL_debug_renderer_info');

        if (this._WEBGL_debug_renderer_info) {
          this._renderer = gl.getParameter(this._WEBGL_debug_renderer_info.UNMASKED_RENDERER_WEBGL);
          this._vendor = gl.getParameter(this._WEBGL_debug_renderer_info.UNMASKED_VENDOR_WEBGL);
        } else {
          this._renderer = gl.getParameter(gl.RENDERER);
          this._vendor = gl.getParameter(gl.VENDOR);
        }

        this._version = gl.getParameter(gl.VERSION);
        this._maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
        this._maxVertexUniformVectors = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);
        this._maxFragmentUniformVectors = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);
        this._maxTextureUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
        this._maxVertexTextureUnits = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
        this._maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
        this._maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);
        this._depthBits = gl.getParameter(gl.DEPTH_BITS);
        this._stencilBits = gl.getParameter(gl.STENCIL_BITS);

        if (_defaultConstants.ALIPAY) {
          this._depthBits = 24;
        }

        this._devicePixelRatio = info.devicePixelRatio || 1.0;
        this._width = this._canvas.width;
        this._height = this._canvas.height;
        this._nativeWidth = Math.max(info.nativeWidth || this._width, 0);
        this._nativeHeight = Math.max(info.nativeHeight || this._height, 0);
        this._colorFmt = _define.GFXFormat.RGBA8;

        if (this._depthBits === 24) {
          if (this._stencilBits === 8) {
            this._depthStencilFmt = _define.GFXFormat.D24S8;
          } else {
            this._depthStencilFmt = _define.GFXFormat.D24;
          }
        } else {
          if (this._stencilBits === 8) {
            this._depthStencilFmt = _define.GFXFormat.D16S8;
          } else {
            this._depthStencilFmt = _define.GFXFormat.D16;
          }
        }

        this._extensions = gl.getSupportedExtensions();
        var extensions = '';

        if (this._extensions) {
          var _iterator = _createForOfIteratorHelper(this._extensions),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var ext = _step.value;
              extensions += ext + ' ';
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          console.debug('EXTENSIONS: ' + extensions);
        }

        this._EXT_texture_filter_anisotropic = this.getExtension('EXT_texture_filter_anisotropic');
        this._EXT_frag_depth = this.getExtension('EXT_frag_depth');
        this._EXT_shader_texture_lod = this.getExtension('EXT_shader_texture_lod');
        this._EXT_sRGB = this.getExtension('EXT_sRGB');
        this._OES_vertex_array_object = this.getExtension('OES_vertex_array_object');
        this._EXT_color_buffer_half_float = this.getExtension('EXT_color_buffer_half_float');
        this._WEBGL_color_buffer_float = this.getExtension('WEBGL_color_buffer_float');
        this._WEBGL_compressed_texture_etc1 = this.getExtension('WEBGL_compressed_texture_etc1');
        this._WEBGL_compressed_texture_etc = this.getExtension('WEBGL_compressed_texture_etc');
        this._WEBGL_compressed_texture_pvrtc = this.getExtension('WEBGL_compressed_texture_pvrtc');
        this._WEBGL_compressed_texture_astc = this.getExtension('WEBGL_compressed_texture_astc');
        this._WEBGL_compressed_texture_s3tc = this.getExtension('WEBGL_compressed_texture_s3tc');
        this._WEBGL_compressed_texture_s3tc_srgb = this.getExtension('WEBGL_compressed_texture_s3tc_srgb');
        this._WEBGL_debug_shaders = this.getExtension('WEBGL_debug_shaders');
        this._WEBGL_draw_buffers = this.getExtension('WEBGL_draw_buffers');
        this._WEBGL_lose_context = this.getExtension('WEBGL_lose_context');
        this._WEBGL_depth_texture = this.getExtension('WEBGL_depth_texture');
        this._OES_texture_half_float = this.getExtension('OES_texture_half_float');
        this._OES_texture_half_float_linear = this.getExtension('OES_texture_half_float_linear');
        this._OES_texture_float = this.getExtension('OES_texture_float');
        this._OES_texture_float_linear = this.getExtension('OES_texture_float_linear');
        this._OES_standard_derivatives = this.getExtension('OES_standard_derivatives');
        this._OES_element_index_uint = this.getExtension('OES_element_index_uint');
        this._ANGLE_instanced_arrays = this.getExtension('ANGLE_instanced_arrays');

        if (_defaultConstants.ALIPAY) {
          this._WEBGL_depth_texture = {
            UNSIGNED_INT_24_8_WEBGL: 0x84FA
          };
        }

        if (_sys.sys.browserType === _sys.sys.BROWSER_TYPE_UC) {
          this._ANGLE_instanced_arrays = null; // UC browser implementation doesn't work
        }

        this._features.fill(false);

        if (this._WEBGL_color_buffer_float) {
          this._features[_device.GFXFeature.COLOR_FLOAT] = true;
        }

        if (this._EXT_color_buffer_half_float) {
          this._features[_device.GFXFeature.COLOR_HALF_FLOAT] = true;
        }

        if (this._OES_texture_float) {
          this._features[_device.GFXFeature.TEXTURE_FLOAT] = true;
        }

        if (this._OES_texture_half_float) {
          this._features[_device.GFXFeature.TEXTURE_HALF_FLOAT] = true;
        }

        if (this._OES_texture_float_linear) {
          this._features[_device.GFXFeature.TEXTURE_FLOAT_LINEAR] = true;
        }

        if (this._OES_texture_half_float_linear) {
          this._features[_device.GFXFeature.TEXTURE_HALF_FLOAT_LINEAR] = true;
        }

        if (this._WEBGL_depth_texture) {
          this._features[_device.GFXFeature.FORMAT_D24S8] = true;
        }

        if (this._OES_element_index_uint) {
          this._features[_device.GFXFeature.ELEMENT_INDEX_UINT] = true;
        }

        if (this._ANGLE_instanced_arrays) {
          this._features[_device.GFXFeature.INSTANCED_ARRAYS] = true;
        }

        var compressedFormat = '';

        if (this._WEBGL_compressed_texture_etc1) {
          this._features[_device.GFXFeature.FORMAT_ETC1] = true;
          compressedFormat += 'etc1 ';
        }

        if (this._WEBGL_compressed_texture_etc) {
          this._features[_device.GFXFeature.FORMAT_ETC2] = true;
          compressedFormat += 'etc2 ';
        }

        if (this._WEBGL_compressed_texture_s3tc) {
          this._features[_device.GFXFeature.FORMAT_DXT] = true;
          compressedFormat += 'dxt ';
        }

        if (this._WEBGL_compressed_texture_pvrtc) {
          this._features[_device.GFXFeature.FORMAT_PVRTC] = true;
          compressedFormat += 'pvrtc ';
        }

        if (this._WEBGL_compressed_texture_astc) {
          this._features[_device.GFXFeature.FORMAT_ASTC] = true;
          compressedFormat += 'astc ';
        }

        this._features[_device.GFXFeature.MSAA] = false;

        if (this._OES_vertex_array_object) {
          if (_defaultConstants.RUNTIME_BASED) {
            // @ts-ignore
            if (typeof loadRuntime === 'function' && typeof loadRuntime().getFeature === 'function' && loadRuntime().getFeature('webgl.extensions.oes_vertex_array_object.revision') > 0) {
              this._useVAO = true;
            }
          } else {
            this._useVAO = true;
          }
        }

        if (_sys.sys.platform === _sys.sys.WECHAT_GAME && _sys.sys.os === _sys.sys.OS_ANDROID) {
          gl.detachShader = function () {}; // Android WeChat may throw errors on detach shader

        }

        console.info('RENDERER: ' + this._renderer);
        console.info('VENDOR: ' + this._vendor);
        console.info('VERSION: ' + this._version);
        console.info('DPR: ' + this._devicePixelRatio);
        console.info('SCREEN_SIZE: ' + this._width + ' x ' + this._height);
        console.info('NATIVE_SIZE: ' + this._nativeWidth + ' x ' + this._nativeHeight); // console.info('COLOR_FORMAT: ' + GFXFormatInfos[this._colorFmt].name);
        // console.info('DEPTH_STENCIL_FORMAT: ' + GFXFormatInfos[this._depthStencilFmt].name);
        // console.info('MAX_VERTEX_ATTRIBS: ' + this._maxVertexAttributes);

        console.info('MAX_VERTEX_UNIFORM_VECTORS: ' + this._maxVertexUniformVectors); // console.info('MAX_FRAGMENT_UNIFORM_VECTORS: ' + this._maxFragmentUniformVectors);
        // console.info('MAX_TEXTURE_IMAGE_UNITS: ' + this._maxTextureUnits);
        // console.info('MAX_VERTEX_TEXTURE_IMAGE_UNITS: ' + this._maxVertexTextureUnits);

        console.info('DEPTH_BITS: ' + this._depthBits);
        console.info('STENCIL_BITS: ' + this._stencilBits);

        if (this._EXT_texture_filter_anisotropic) {
          console.info('MAX_TEXTURE_MAX_ANISOTROPY_EXT: ' + this._EXT_texture_filter_anisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
        }

        console.info('USE_VAO: ' + this._useVAO);
        console.info('COMPRESSED_FORMAT: ' + compressedFormat); // init states

        this.initStates(gl); // create queue

        this._queue = this.createQueue({
          type: _define.GFXQueueType.GRAPHICS
        }); // create primary window

        var canvas = this._webGLRC.canvas;
        this._mainWindow = this.createWindow({
          title: canvas.title || '',
          left: canvas.offsetLeft || 0,
          top: canvas.offsetTop || 0,
          width: this._webGLRC.drawingBufferWidth,
          height: this._webGLRC.drawingBufferHeight,
          colorFmt: this._colorFmt,
          depthStencilFmt: this._depthStencilFmt
        });
        this._cmdAllocator = this.createCommandAllocator({}); // create default null texture

        this.nullTex2D = new _webglTexture.WebGLGFXTexture(this);
        this.nullTex2D.initialize({
          type: _define.GFXTextureType.TEX2D,
          usage: _define.GFXTextureUsageBit.SAMPLED,
          format: _define.GFXFormat.RGBA8,
          width: 2,
          height: 2,
          flags: _define.GFXTextureFlagBit.GEN_MIPMAP
        });
        this.nullTexCube = new _webglTexture.WebGLGFXTexture(this);
        this.nullTexCube.initialize({
          type: _define.GFXTextureType.TEX2D,
          usage: _define.GFXTextureUsageBit.SAMPLED,
          format: _define.GFXFormat.RGBA8,
          width: 2,
          height: 2,
          arrayLayer: 6,
          flags: _define.GFXTextureFlagBit.CUBEMAP | _define.GFXTextureFlagBit.GEN_MIPMAP
        });
        var nullTexRegion = {
          buffOffset: 0,
          buffStride: 0,
          buffTexHeight: 0,
          texOffset: {
            x: 0,
            y: 0,
            z: 0
          },
          texExtent: {
            width: 2,
            height: 2,
            depth: 1
          },
          texSubres: {
            baseMipLevel: 0,
            levelCount: 1,
            baseArrayLayer: 0,
            layerCount: 1
          }
        };
        var nullTexBuff = new Uint8Array(this.nullTex2D.size);
        nullTexBuff.fill(0);
        this.copyBuffersToTexture([nullTexBuff], this.nullTex2D, [nullTexRegion]);
        nullTexRegion.texSubres.layerCount = 6;
        this.copyBuffersToTexture([nullTexBuff, nullTexBuff, nullTexBuff, nullTexBuff, nullTexBuff, nullTexBuff], this.nullTexCube, [nullTexRegion]);
        return true;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        if (this.nullTex2D) {
          this.nullTex2D.destroy();
          this.nullTex2D = null;
        }

        if (this.nullTexCube) {
          this.nullTexCube.destroy();
          this.nullTexCube = null;
        }

        if (this._mainWindow) {
          this._mainWindow.destroy();

          this._mainWindow = null;
        }

        if (this._cmdAllocator) {
          this._cmdAllocator.destroy();

          this._cmdAllocator = null;
        }

        if (this._queue) {
          this._queue.destroy();

          this._queue = null;
        }

        this._webGLRC = null;
      }
    }, {
      key: "resize",
      value: function resize(width, height) {
        if (this._width !== width || this._height !== height) {
          console.info('Resizing device: ' + width + 'x' + height);
          this._canvas.width = width;
          this._canvas.height = height;
          this._width = width;
          this._height = height;
        }
      }
    }, {
      key: "createBuffer",
      value: function createBuffer(info) {
        var buffer = new _webglBuffer.WebGLGFXBuffer(this);
        buffer.initialize(info);
        return buffer;
      }
    }, {
      key: "createTexture",
      value: function createTexture(info) {
        var texture = new _webglTexture.WebGLGFXTexture(this);
        texture.initialize(info);
        return texture;
      }
    }, {
      key: "createTextureView",
      value: function createTextureView(info) {
        var texView = new _webglTextureView.WebGLGFXTextureView(this);
        texView.initialize(info);
        return texView;
      }
    }, {
      key: "createSampler",
      value: function createSampler(info) {
        var sampler = new _webglSampler.WebGLGFXSampler(this);
        sampler.initialize(info);
        return sampler;
      }
    }, {
      key: "createBindingLayout",
      value: function createBindingLayout(info) {
        var bindingLayout = new _webglBindingLayout.WebGLGFXBindingLayout(this);
        bindingLayout.initialize(info);
        return bindingLayout;
      }
    }, {
      key: "createShader",
      value: function createShader(info) {
        var shader = new _webglShader.WebGLGFXShader(this);
        shader.initialize(info);
        return shader;
      }
    }, {
      key: "createInputAssembler",
      value: function createInputAssembler(info) {
        var inputAssembler = new _webglInputAssembler.WebGLGFXInputAssembler(this);
        inputAssembler.initialize(info);
        return inputAssembler;
      }
    }, {
      key: "createRenderPass",
      value: function createRenderPass(info) {
        var renderPass = new _webglRenderPass.WebGLGFXRenderPass(this);
        renderPass.initialize(info);
        return renderPass;
      }
    }, {
      key: "createFramebuffer",
      value: function createFramebuffer(info) {
        var framebuffer = new _webglFramebuffer.WebGLGFXFramebuffer(this);
        framebuffer.initialize(info);
        return framebuffer;
      }
    }, {
      key: "createPipelineLayout",
      value: function createPipelineLayout(info) {
        var pipelineLayout = new _webglPipelineLayout.WebGLGFXPipelineLayout(this);
        pipelineLayout.initialize(info);
        return pipelineLayout;
      }
    }, {
      key: "createPipelineState",
      value: function createPipelineState(info) {
        var pipelineState = new _webglPipelineState.WebGLGFXPipelineState(this);
        pipelineState.initialize(info);
        return pipelineState;
      }
    }, {
      key: "createCommandAllocator",
      value: function createCommandAllocator(info) {
        var cmdAllocator = new _webglCommandAllocator.WebGLGFXCommandAllocator(this);
        cmdAllocator.initialize(info);
        return cmdAllocator;
      }
    }, {
      key: "createCommandBuffer",
      value: function createCommandBuffer(info) {
        // const ctor = WebGLGFXCommandBuffer; // opt to instant invocation
        var ctor = info.type === _define.GFXCommandBufferType.PRIMARY ? _webglPrimaryCommandBuffer.WebGLGFXPrimaryCommandBuffer : _webglCommandBuffer.WebGLGFXCommandBuffer;
        var cmdBuff = new ctor(this);
        cmdBuff.initialize(info);
        return cmdBuff;
      }
    }, {
      key: "createQueue",
      value: function createQueue(info) {
        var queue = new _webglQueue.WebGLGFXQueue(this);
        queue.initialize(info);
        return queue;
      }
    }, {
      key: "createWindow",
      value: function createWindow(info) {
        var window = new _webglWindow.WebGLGFXWindow(this);
        window.initialize(info);
        return window;
      }
    }, {
      key: "present",
      value: function present() {
        this._cmdAllocator.releaseCmds();

        var queue = this._queue;
        this._numDrawCalls = queue.numDrawCalls;
        this._numInstances = queue.numInstances;
        this._numTris = queue.numTris;
        queue.clear();
      }
    }, {
      key: "copyBuffersToTexture",
      value: function copyBuffersToTexture(buffers, texture, regions) {
        (0, _webglCommands.WebGLCmdFuncCopyBuffersToTexture)(this, buffers, texture.gpuTexture, regions);
      }
    }, {
      key: "copyTexImagesToTexture",
      value: function copyTexImagesToTexture(texImages, texture, regions) {
        (0, _webglCommands.WebGLCmdFuncCopyTexImagesToTexture)(this, texImages, texture.gpuTexture, regions);
      }
    }, {
      key: "copyFramebufferToBuffer",
      value: function copyFramebufferToBuffer(srcFramebuffer, dstBuffer, regions) {
        var gl = this._webGLRC;
        var gpuFramebuffer = srcFramebuffer.gpuFramebuffer;
        var format = gpuFramebuffer.gpuColorViews[0].format;
        var glFormat = (0, _webglCommands.GFXFormatToWebGLFormat)(format, gl);
        var glType = (0, _webglCommands.GFXFormatToWebGLType)(format, gl);
        var ctor = (0, _define.getTypedArrayConstructor)(_define.GFXFormatInfos[format]);
        var curFBO = this.stateCache.glFramebuffer;

        if (this.stateCache.glFramebuffer !== gpuFramebuffer.glFramebuffer) {
          gl.bindFramebuffer(gl.FRAMEBUFFER, gpuFramebuffer.glFramebuffer);
          this.stateCache.glFramebuffer = gpuFramebuffer.glFramebuffer;
        }

        var view = new ctor(dstBuffer);

        var _iterator2 = _createForOfIteratorHelper(regions),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var region = _step2.value;
            var buffOffset = region.buffOffset + region.buffTexHeight * region.buffStride;
            var w = region.texExtent.width;
            var h = region.texExtent.height;
            var memSize = (0, _define.GFXFormatSize)(format, w, h, 1);
            var data = view.subarray(buffOffset, buffOffset + memSize);
            gl.readPixels(region.texOffset.x, region.texOffset.y, w, h, glFormat, glType, data);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        if (this.stateCache.glFramebuffer !== curFBO) {
          gl.bindFramebuffer(gl.FRAMEBUFFER, curFBO);
          this.stateCache.glFramebuffer = curFBO;
        }
      }
    }, {
      key: "blitFramebuffer",
      value: function blitFramebuffer(src, dst, srcRect, dstRect, filter) {}
    }, {
      key: "getExtension",
      value: function getExtension(ext) {
        var prefixes = ['', 'WEBKIT_', 'MOZ_'];

        for (var i = 0; i < prefixes.length; ++i) {
          var _ext = this._webGLRC.getExtension(prefixes[i] + ext);

          if (_ext) {
            return _ext;
          }
        }

        return null;
      }
    }, {
      key: "initStates",
      value: function initStates(gl) {
        gl.activeTexture(gl.TEXTURE0);
        gl.pixelStorei(gl.PACK_ALIGNMENT, 1);
        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 0);
        gl.bindFramebuffer(gl.FRAMEBUFFER, null); // rasteriazer state

        gl.disable(gl.SCISSOR_TEST);
        gl.enable(gl.CULL_FACE);
        gl.cullFace(gl.BACK);
        gl.frontFace(gl.CCW);
        gl.disable(gl.POLYGON_OFFSET_FILL);
        gl.polygonOffset(0.0, 0.0); // depth stencil state

        gl.enable(gl.DEPTH_TEST);
        gl.depthMask(true);
        gl.depthFunc(gl.LESS);
        gl.depthRange(0.0, 1.0);
        gl.stencilFuncSeparate(gl.FRONT, gl.ALWAYS, 1, 0xffff);
        gl.stencilOpSeparate(gl.FRONT, gl.KEEP, gl.KEEP, gl.KEEP);
        gl.stencilMaskSeparate(gl.FRONT, 0xffff);
        gl.stencilFuncSeparate(gl.BACK, gl.ALWAYS, 1, 0xffff);
        gl.stencilOpSeparate(gl.BACK, gl.KEEP, gl.KEEP, gl.KEEP);
        gl.stencilMaskSeparate(gl.BACK, 0xffff);
        gl.disable(gl.STENCIL_TEST); // blend state

        gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
        gl.disable(gl.BLEND);
        gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
        gl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);
        gl.colorMask(true, true, true, true);
        gl.blendColor(0.0, 0.0, 0.0, 0.0);
      }
    }]);

    return WebGLGFXDevice;
  }(_device.GFXDevice);

  _exports.WebGLGFXDevice = WebGLGFXDevice;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,