(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../event/event.js", "../../math/vec2.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../event/event.js"), require("../../math/vec2.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.event, global.vec2);
    global.events = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _event, _vec) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EventKeyboard = _exports.EventAcceleration = _exports.EventTouch = _exports.EventMouse = void 0;
  _event = _interopRequireDefault(_event);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  var _vec2 = new _vec.Vec2();
  /**
   * @en The mouse event
   * @zh 鼠标事件类型
   */


  var EventMouse = /*#__PURE__*/function (_Event) {
    _inherits(EventMouse, _Event);

    // Inner event types of MouseEvent

    /**
     * @en The none event code of mouse event.
     * @zh 无效事件代码
     */

    /**
     * @en The event code of mouse down event.
     * @zh 鼠标按下事件代码。
     */

    /**
     * @en The event code of mouse up event.
     * @zh 鼠标按下后释放事件代码。
     */

    /**
     * @en The event code of mouse move event.
     * @zh 鼠标移动事件。
     */

    /**
     * @en The event code of mouse scroll event.
     * @zh 鼠标滚轮事件。
     */

    /**
     * @en The default tag when no button is pressed
     * @zh 按键默认的缺省状态
     */

    /**
     * @en The tag of mouse's left button.
     * @zh 鼠标左键的标签。
     */

    /**
     * @en The tag of mouse's right button  (The right button number is 2 on browser).
     * @zh 鼠标右键的标签。
     */

    /**
     * @en The tag of mouse's middle button.
     * @zh 鼠标中键的标签。
     */

    /**
     * @en The tag of mouse's button 4.
     * @zh 鼠标按键 4 的标签。
     */

    /**
     * @en The tag of mouse's button 5.
     * @zh 鼠标按键 5 的标签。
     */

    /**
     * @en The tag of mouse's button 6.
     * @zh 鼠标按键 6 的标签。
     */

    /**
     * @en The tag of mouse's button 7.
     * @zh 鼠标按键 7 的标签。
     */

    /**
     * @en The tag of mouse's button 8.
     * @zh 鼠标按键 8 的标签。
     */

    /**
     * @en Mouse movement on x axis of the UI coordinate system.
     * @zh 鼠标在 UI 坐标系下 X 轴上的移动距离
     */

    /**
     * @en Mouse movement on y axis of the UI coordinate system.
     * @zh 鼠标在 UI 坐标系下 Y 轴上的移动距离
     */

    /**
     * @en The type of the event, possible values are UP, DOWN, MOVE, SCROLL
     * @zh 鼠标事件类型，可以是 UP, DOWN, MOVE, CANCELED。
     */

    /**
     * @param eventType - The type of the event, possible values are UP, DOWN, MOVE, SCROLL
     * @param bubbles - Indicate whether the event bubbles up through the hierarchy or not.
     */
    function EventMouse(eventType, bubbles, prevLoc) {
      var _this;

      _classCallCheck(this, EventMouse);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(EventMouse).call(this, _event.default.MOUSE, bubbles));
      _this.movementX = 0;
      _this.movementY = 0;
      _this.eventType = void 0;
      _this._button = EventMouse.BUTTON_MISSING;
      _this._x = 0;
      _this._y = 0;
      _this._prevX = 0;
      _this._prevY = 0;
      _this._scrollX = 0;
      _this._scrollY = 0;
      _this.eventType = eventType;

      if (prevLoc) {
        _this._prevX = prevLoc.x;
        _this._prevY = prevLoc.y;
      }

      return _this;
    }
    /**
     * @en Sets scroll data of the mouse.
     * @zh 设置鼠标滚轮的滚动数据。
     * @param scrollX - The scroll value on x axis
     * @param scrollY - The scroll value on y axis
     */


    _createClass(EventMouse, [{
      key: "setScrollData",
      value: function setScrollData(scrollX, scrollY) {
        this._scrollX = scrollX;
        this._scrollY = scrollY;
      }
      /**
       * @en Returns the scroll value on x axis.
       * @zh 获取鼠标滚动的 X 轴距离，只有滚动时才有效。
       */

    }, {
      key: "getScrollX",
      value: function getScrollX() {
        return this._scrollX;
      }
      /**
       * @en Returns the scroll value on y axis.
       * @zh 获取滚轮滚动的 Y 轴距离，只有滚动时才有效。
       */

    }, {
      key: "getScrollY",
      value: function getScrollY() {
        return this._scrollY;
      }
      /**
       * @en Sets cursor location.
       * @zh 设置当前鼠标位置。
       * @param x - The location on x axis
       * @param y - The location on y axis
       */

    }, {
      key: "setLocation",
      value: function setLocation(x, y) {
        this._x = x;
        this._y = y;
      }
      /**
       * @en Returns cursor location.
       * @zh 获取鼠标相对于左下角位置对象，对象包含 x 和 y 属性。
       * @param out - Pass the out object to avoid object creation, very good practice
       */

    }, {
      key: "getLocation",
      value: function getLocation(out) {
        if (!out) {
          out = new _vec.Vec2();
        }

        _vec.Vec2.set(out, this._x, this._y);

        return out;
      }
      /**
       * @en Returns the current cursor location in game view coordinates.
       * @zh 获取当前事件在游戏窗口内的坐标位置对象，对象包含 x 和 y 属性。
       * @param out - Pass the out object to avoid object creation, very good practice
       */

    }, {
      key: "getLocationInView",
      value: function getLocationInView(out) {
        if (!out) {
          out = new _vec.Vec2();
        }

        _vec.Vec2.set(out, this._x, cc.view._designResolutionSize.height - this._y);

        return out;
      }
      /**
       * @en Returns the current cursor location in ui coordinates.
       * @zh 获取当前事件在 UI 窗口内的坐标位置，对象包含 x 和 y 属性。
       * @param out - Pass the out object to avoid object creation, very good practice
       */

    }, {
      key: "getUILocation",
      value: function getUILocation(out) {
        if (!out) {
          out = new _vec.Vec2();
        }

        _vec.Vec2.set(out, this._x, this._y);

        cc.view._convertPointWithScale(out);

        return out;
      }
      /**
       * @en Returns the previous touch location.
       * @zh 获取鼠标点击在上一次事件时的位置对象，对象包含 x 和 y 属性。
       * @param out - Pass the out object to avoid object creation, very good practice
       */

    }, {
      key: "getPreviousLocation",
      value: function getPreviousLocation(out) {
        if (!out) {
          out = new _vec.Vec2();
        }

        _vec.Vec2.set(out, this._prevX, this._prevY);

        return out;
      }
      /**
       * @en Returns the previous touch location.
       * @zh 获取鼠标点击在上一次事件时的位置对象，对象包含 x 和 y 属性。
       * @param out - Pass the out object to avoid object creation, very good practice
       */

    }, {
      key: "getUIPreviousLocation",
      value: function getUIPreviousLocation(out) {
        if (!out) {
          out = new _vec.Vec2();
        }

        _vec.Vec2.set(out, this._prevX, this._prevY);

        cc.view._convertPointWithScale(out);

        return out;
      }
      /**
       * @en Returns the delta distance from the previous location to current location.
       * @zh 获取鼠标距离上一次事件移动的距离对象，对象包含 x 和 y 属性。
       * @param out - Pass the out object to avoid object creation, very good practice
       */

    }, {
      key: "getDelta",
      value: function getDelta(out) {
        if (!out) {
          out = new _vec.Vec2();
        }

        _vec.Vec2.set(out, this._x - this._prevX, this._y - this._prevY);

        return out;
      }
      /**
       * @en Returns the X axis delta distance from the previous location to current location.
       * @zh 获取鼠标距离上一次事件移动的 X 轴距离。
       */

    }, {
      key: "getDeltaX",
      value: function getDeltaX() {
        return this._x - this._prevX;
      }
      /**
       * @en Returns the Y axis delta distance from the previous location to current location.
       * @zh 获取鼠标距离上一次事件移动的 Y 轴距离。
       */

    }, {
      key: "getDeltaY",
      value: function getDeltaY() {
        return this._y - this._prevY;
      }
      /**
       * @en Returns the delta distance from the previous location to current location in the UI coordinates.
       * @zh 获取鼠标距离上一次事件移动在 UI 坐标系下的距离对象，对象包含 x 和 y 属性。
       * @param out - Pass the out object to avoid object creation, very good practice
       */

    }, {
      key: "getUIDelta",
      value: function getUIDelta(out) {
        if (!out) {
          out = new _vec.Vec2();
        }

        _vec.Vec2.set(out, (this._x - this._prevX) / cc.view.getScaleX(), (this._y - this._prevY) / cc.view.getScaleY());

        return out;
      }
      /**
       * @en Returns the X axis delta distance from the previous location to current location in the UI coordinates.
       * @zh 获取鼠标距离上一次事件移动在 UI 坐标系下的 X 轴距离。
       */

    }, {
      key: "getUIDeltaX",
      value: function getUIDeltaX() {
        return (this._x - this._prevX) / cc.view.getScaleX();
      }
      /**
       * @en Returns the Y axis delta distance from the previous location to current location in the UI coordinates.
       * @zh 获取鼠标距离上一次事件移动在 UI 坐标系下的 Y 轴距离。
       */

    }, {
      key: "getUIDeltaY",
      value: function getUIDeltaY() {
        return (this._y - this._prevY) / cc.view.getScaleY();
      }
      /**
       * @en Sets mouse button code.
       * @zh 设置鼠标按键。
       * @param button - The button code
       */

    }, {
      key: "setButton",
      value: function setButton(button) {
        this._button = button;
      }
      /**
       * @en Returns mouse button code.
       * @zh 获取鼠标按键。
       */

    }, {
      key: "getButton",
      value: function getButton() {
        return this._button;
      }
      /**
       * @en Returns location data on X axis.
       * @zh 获取鼠标当前 X 轴位置。
       */

    }, {
      key: "getLocationX",
      value: function getLocationX() {
        return this._x;
      }
      /**
       * @en Returns location data on Y axis.
       * @zh 获取鼠标当前 Y 轴位置。
       */

    }, {
      key: "getLocationY",
      value: function getLocationY() {
        return this._y;
      }
      /**
       * @en Returns location data on X axis.
       * @zh 获取鼠标当前 X 轴位置。
       */

    }, {
      key: "getUILocationX",
      value: function getUILocationX() {
        var viewport = cc.view.getViewportRect();
        return (this._x - viewport.x) / cc.view.getScaleX();
      }
      /**
       * @en Returns location data on Y axis.
       * @zh 获取鼠标当前 Y 轴位置。
       */

    }, {
      key: "getUILocationY",
      value: function getUILocationY() {
        var viewport = cc.view.getViewportRect();
        return (this._y - viewport.y) / cc.view.getScaleY();
      }
    }]);

    return EventMouse;
  }(_event.default);
  /**
   * @en
   * The touch event.
   *
   * @zh
   * 触摸事件。
   */


  _exports.EventMouse = EventMouse;
  EventMouse.NONE = 0;
  EventMouse.DOWN = 1;
  EventMouse.UP = 2;
  EventMouse.MOVE = 3;
  EventMouse.SCROLL = 4;
  EventMouse.BUTTON_MISSING = -1;
  EventMouse.BUTTON_LEFT = 0;
  EventMouse.BUTTON_RIGHT = 2;
  EventMouse.BUTTON_MIDDLE = 1;
  EventMouse.BUTTON_4 = 3;
  EventMouse.BUTTON_5 = 4;
  EventMouse.BUTTON_6 = 5;
  EventMouse.BUTTON_7 = 6;
  EventMouse.BUTTON_8 = 7;

  var EventTouch = /*#__PURE__*/function (_Event2) {
    _inherits(EventTouch, _Event2);

    /**
     * @en The maximum touch point numbers simultaneously
     * @zh 同时存在的最大触点数量。
     */

    /**
     * @en The event type code of touch began event.
     * @zh 开始触摸事件。
     */

    /**
     * @en The event type code of touch moved event.
     * @zh 触摸后移动事件。
     */

    /**
     * @en The event type code of touch ended event.
     * @zh 结束触摸事件。
     */

    /**
     * @en The event type code of touch canceled event.
     * @zh 取消触摸事件。
     */

    /**
     * @en The current touch object
     * @zh 当前触点对象
     */

    /**
     * @en Indicate whether the touch event is simulated or real
     * @zh 表示触摸事件是真实触点触发的还是模拟的
     */

    /**
     * @param touches - An array of current touches
     * @param bubbles - Indicate whether the event bubbles up through the hierarchy or not.
     * @param eventCode - The type code of the touch event
     */
    function EventTouch(touches, bubbles, eventCode) {
      var _this2;

      _classCallCheck(this, EventTouch);

      _this2 = _possibleConstructorReturn(this, _getPrototypeOf(EventTouch).call(this, _event.default.TOUCH, bubbles));
      _this2.touch = null;
      _this2.simulate = false;
      _this2._eventCode = void 0;
      _this2._touches = void 0;
      _this2._eventCode = eventCode || 0;
      _this2._touches = touches || [];
      return _this2;
    }
    /**
     * @en Returns event type code.
     * @zh 获取触摸事件类型。
     */


    _createClass(EventTouch, [{
      key: "getEventCode",
      value: function getEventCode() {
        return this._eventCode;
      }
      /**
       * @en Returns touches of event.
       * @zh 获取触摸点的列表。
       */

    }, {
      key: "getTouches",
      value: function getTouches() {
        return this._touches;
      }
      /**
       * @en Sets touch location.
       * @zh 设置当前触点位置
       * @param x - The current touch location on the x axis
       * @param y - The current touch location on the y axis
       */

    }, {
      key: "setLocation",
      value: function setLocation(x, y) {
        if (this.touch) {
          this.touch.setTouchInfo(this.touch.getID(), x, y);
        }
      }
      /**
       * @en Returns the current touch location.
       * @zh 获取触点位置。
       * @param out - Pass the out object to avoid object creation, very good practice
       */

    }, {
      key: "getLocation",
      value: function getLocation(out) {
        return this.touch ? this.touch.getLocation(out) : new _vec.Vec2();
      }
      /**
       * @en Returns the current touch location in UI coordinates.
       * @zh 获取 UI 坐标系下的触点位置。
       * @param out - Pass the out object to avoid object creation, very good practice
       */

    }, {
      key: "getUILocation",
      value: function getUILocation(out) {
        return this.touch ? this.touch.getUILocation(out) : new _vec.Vec2();
      }
      /**
       * @en Returns the current touch location in game screen coordinates.
       * @zh 获取当前触点在游戏窗口中的位置。
       * @param out - Pass the out object to avoid object creation, very good practice
       */

    }, {
      key: "getLocationInView",
      value: function getLocationInView(out) {
        return this.touch ? this.touch.getLocationInView(out) : new _vec.Vec2();
      }
      /**
       * @en Returns the previous touch location.
       * @zh 获取触点在上一次事件时的位置对象，对象包含 x 和 y 属性。
       * @param out - Pass the out object to avoid object creation, very good practice
       */

    }, {
      key: "getPreviousLocation",
      value: function getPreviousLocation(out) {
        return this.touch ? this.touch.getPreviousLocation(out) : new _vec.Vec2();
      }
      /**
       * @en Returns the start touch location.
       * @zh 获获取触点落下时的位置对象，对象包含 x 和 y 属性。
       * @param out - Pass the out object to avoid object creation, very good practice
       */

    }, {
      key: "getStartLocation",
      value: function getStartLocation(out) {
        return this.touch ? this.touch.getStartLocation(out) : new _vec.Vec2();
      }
      /**
       * @en Returns the start touch location in UI coordinates.
       * @zh 获获取触点落下时的 UI 世界下位置对象，对象包含 x 和 y 属性。
       * @param out - Pass the out object to avoid object creation, very good practice
       */

    }, {
      key: "getUIStartLocation",
      value: function getUIStartLocation(out) {
        return this.touch ? this.touch.getUIStartLocation(out) : new _vec.Vec2();
      }
      /**
       * @en Returns the id of the current touch point.
       * @zh 获取触点的标识 ID，可以用来在多点触摸中跟踪触点。
       */

    }, {
      key: "getID",
      value: function getID() {
        return this.touch ? this.touch.getID() : null;
      }
      /**
       * @en Returns the delta distance from the previous location to current location.
       * @zh 获取触点距离上一次事件移动的距离对象，对象包含 x 和 y 属性。
       * @param out - Pass the out object to avoid object creation, very good practice
       */

    }, {
      key: "getDelta",
      value: function getDelta(out) {
        return this.touch ? this.touch.getDelta(out) : new _vec.Vec2();
      }
      /**
       * @en Returns the delta distance from the previous location to current location.
       * @zh 获取触点距离上一次事件 UI 世界下移动的距离对象，对象包含 x 和 y 属性。
       * @param out - Pass the out object to avoid object creation, very good practice
      */

    }, {
      key: "getUIDelta",
      value: function getUIDelta(out) {
        return this.touch ? this.touch.getUIDelta(out) : new _vec.Vec2();
      }
      /**
       * @en Returns the X axis delta distance from the previous location to current location.
       * @zh 获取触点距离上一次事件移动的 x 轴距离。
       */

    }, {
      key: "getDeltaX",
      value: function getDeltaX() {
        return this.touch ? this.touch.getDelta(_vec2).x : 0;
      }
      /**
       * @en Returns the Y axis delta distance from the previous location to current location.
       * @zh 获取触点距离上一次事件移动的 y 轴距离。
       */

    }, {
      key: "getDeltaY",
      value: function getDeltaY() {
        return this.touch ? this.touch.getDelta(_vec2).y : 0;
      }
      /**
       * @en Returns location X axis data.
       * @zh 获取当前触点 X 轴位置。
       */

    }, {
      key: "getLocationX",
      value: function getLocationX() {
        return this.touch ? this.touch.getLocationX() : 0;
      }
      /**
       * @en Returns location Y axis data.
       * @zh 获取当前触点 Y 轴位置。
       */

    }, {
      key: "getLocationY",
      value: function getLocationY() {
        return this.touch ? this.touch.getLocationY() : 0;
      }
    }]);

    return EventTouch;
  }(_event.default);
  /**
   * @en
   * The acceleration event.
   * @zh
   * 加速计事件。
   */


  _exports.EventTouch = EventTouch;
  EventTouch.MAX_TOUCHES = 5;
  EventTouch.BEGAN = 0;
  EventTouch.MOVED = 1;
  EventTouch.ENDED = 2;
  EventTouch.CANCELLED = 3;

  var EventAcceleration = /*#__PURE__*/function (_Event3) {
    _inherits(EventAcceleration, _Event3);

    /**
     * @en The acceleration object
     * @zh 加速度对象
     */

    /**
     * @param acc - The acceleration
     * @param bubbles - Indicate whether the event bubbles up through the hierarchy or not.
     */
    function EventAcceleration(acc, bubbles) {
      var _this3;

      _classCallCheck(this, EventAcceleration);

      _this3 = _possibleConstructorReturn(this, _getPrototypeOf(EventAcceleration).call(this, _event.default.ACCELERATION, bubbles));
      _this3.acc = void 0;
      _this3.acc = acc;
      return _this3;
    }

    return EventAcceleration;
  }(_event.default);
  /**
   * @en
   * The keyboard event.
   * @zh
   * 键盘事件。
   */


  _exports.EventAcceleration = EventAcceleration;

  var EventKeyboard = /*#__PURE__*/function (_Event4) {
    _inherits(EventKeyboard, _Event4);

    /**
     * @en The keyCode read-only property represents a system and implementation dependent numerical code
     * identifying the unmodified value of the pressed key.
     * This is usually the decimal ASCII (RFC 20) or Windows 1252 code corresponding to the key.
     * If the key can't be identified, this value is 0.
     * @zh keyCode 是只读属性它表示一个系统和依赖于实现的数字代码，可以识别按键的未修改值。
     * 这通常是十进制 ASCII (RFC20) 或者 Windows 1252 代码，所对应的密钥。
     * 如果无法识别该键，则该值为 0。
     */

    /**
     * @en Raw DOM KeyboardEvent.
     * @zh 原始 DOM KeyboardEvent 事件对象
     */

    /**
     * @en Indicates whether the current key is being pressed
     * @zh 表示当前按键是否正在被按下
     */

    /**
     * @param keyCode - The key code of the current key or the DOM KeyboardEvent
     * @param isPressed - Indicates whether the current key is being pressed
     * @param bubbles - Indicates whether the event bubbles up through the hierarchy or not.
     */
    function EventKeyboard(keyCode, isPressed, bubbles) {
      var _this4;

      _classCallCheck(this, EventKeyboard);

      _this4 = _possibleConstructorReturn(this, _getPrototypeOf(EventKeyboard).call(this, _event.default.KEYBOARD, bubbles));
      _this4.keyCode = void 0;
      _this4.rawEvent = void 0;
      _this4.isPressed = void 0;

      if (typeof keyCode === 'number') {
        _this4.keyCode = keyCode;
      } else {
        _this4.keyCode = keyCode.keyCode;
        _this4.rawEvent = keyCode;
      }

      _this4.isPressed = isPressed;
      return _this4;
    }

    return EventKeyboard;
  }(_event.default); // TODO
  // @ts-ignore


  _exports.EventKeyboard = EventKeyboard;
  _event.default.EventMouse = EventMouse; // TODO
  // @ts-ignore

  _event.default.EventTouch = EventTouch; // TODO
  // @ts-ignore

  _event.default.EventAcceleration = EventAcceleration; // TODO
  // @ts-ignore

  _event.default.EventKeyboard = EventKeyboard;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkY6L2plbmtpbnMvd29ya3NwYWNlL0NyZWF0b3JfM0QvZWRpdG9yLTNkL3Jlc291cmNlcy8zZC9lbmdpbmUvY29jb3MvY29yZS9wbGF0Zm9ybS9ldmVudC1tYW5hZ2VyL2V2ZW50cy50cyJdLCJuYW1lcyI6WyJfdmVjMiIsIlZlYzIiLCJFdmVudE1vdXNlIiwiZXZlbnRUeXBlIiwiYnViYmxlcyIsInByZXZMb2MiLCJFdmVudCIsIk1PVVNFIiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiX2J1dHRvbiIsIkJVVFRPTl9NSVNTSU5HIiwiX3giLCJfeSIsIl9wcmV2WCIsIl9wcmV2WSIsIl9zY3JvbGxYIiwiX3Njcm9sbFkiLCJ4IiwieSIsInNjcm9sbFgiLCJzY3JvbGxZIiwib3V0Iiwic2V0IiwiY2MiLCJ2aWV3IiwiX2Rlc2lnblJlc29sdXRpb25TaXplIiwiaGVpZ2h0IiwiX2NvbnZlcnRQb2ludFdpdGhTY2FsZSIsImdldFNjYWxlWCIsImdldFNjYWxlWSIsImJ1dHRvbiIsInZpZXdwb3J0IiwiZ2V0Vmlld3BvcnRSZWN0IiwiTk9ORSIsIkRPV04iLCJVUCIsIk1PVkUiLCJTQ1JPTEwiLCJCVVRUT05fTEVGVCIsIkJVVFRPTl9SSUdIVCIsIkJVVFRPTl9NSURETEUiLCJCVVRUT05fNCIsIkJVVFRPTl81IiwiQlVUVE9OXzYiLCJCVVRUT05fNyIsIkJVVFRPTl84IiwiRXZlbnRUb3VjaCIsInRvdWNoZXMiLCJldmVudENvZGUiLCJUT1VDSCIsInRvdWNoIiwic2ltdWxhdGUiLCJfZXZlbnRDb2RlIiwiX3RvdWNoZXMiLCJzZXRUb3VjaEluZm8iLCJnZXRJRCIsImdldExvY2F0aW9uIiwiZ2V0VUlMb2NhdGlvbiIsImdldExvY2F0aW9uSW5WaWV3IiwiZ2V0UHJldmlvdXNMb2NhdGlvbiIsImdldFN0YXJ0TG9jYXRpb24iLCJnZXRVSVN0YXJ0TG9jYXRpb24iLCJnZXREZWx0YSIsImdldFVJRGVsdGEiLCJnZXRMb2NhdGlvblgiLCJnZXRMb2NhdGlvblkiLCJNQVhfVE9VQ0hFUyIsIkJFR0FOIiwiTU9WRUQiLCJFTkRFRCIsIkNBTkNFTExFRCIsIkV2ZW50QWNjZWxlcmF0aW9uIiwiYWNjIiwiQUNDRUxFUkFUSU9OIiwiRXZlbnRLZXlib2FyZCIsImtleUNvZGUiLCJpc1ByZXNzZWQiLCJLRVlCT0FSRCIsInJhd0V2ZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1DQSxNQUFJQSxLQUFLLEdBQUcsSUFBSUMsU0FBSixFQUFaO0FBRUE7Ozs7OztNQUlhQyxVOzs7QUFDVDs7QUFFQTs7Ozs7QUFNQTs7Ozs7QUFNQTs7Ozs7QUFNQTs7Ozs7QUFNQTs7Ozs7QUFNQTs7Ozs7QUFNQTs7Ozs7QUFNQTs7Ozs7QUFNQTs7Ozs7QUFNQTs7Ozs7QUFNQTs7Ozs7QUFNQTs7Ozs7QUFNQTs7Ozs7QUFNQTs7Ozs7QUFNQTs7Ozs7QUFNQTs7Ozs7QUFNQTs7Ozs7QUFvQkE7Ozs7QUFJQSx3QkFBYUMsU0FBYixFQUFnQ0MsT0FBaEMsRUFBbURDLE9BQW5ELEVBQW1FO0FBQUE7O0FBQUE7O0FBQy9ELHNGQUFNQyxlQUFNQyxLQUFaLEVBQW1CSCxPQUFuQjtBQUQrRCxZQWhDNURJLFNBZ0M0RCxHQWhDeEMsQ0FnQ3dDO0FBQUEsWUExQjVEQyxTQTBCNEQsR0ExQnhDLENBMEJ3QztBQUFBLFlBcEI1RE4sU0FvQjREO0FBQUEsWUFsQjNETyxPQWtCMkQsR0FsQnpDUixVQUFVLENBQUNTLGNBa0I4QjtBQUFBLFlBaEIzREMsRUFnQjJELEdBaEI5QyxDQWdCOEM7QUFBQSxZQWQzREMsRUFjMkQsR0FkOUMsQ0FjOEM7QUFBQSxZQVozREMsTUFZMkQsR0FaMUMsQ0FZMEM7QUFBQSxZQVYzREMsTUFVMkQsR0FWMUMsQ0FVMEM7QUFBQSxZQVIzREMsUUFRMkQsR0FSeEMsQ0FRd0M7QUFBQSxZQU4zREMsUUFNMkQsR0FOeEMsQ0FNd0M7QUFFL0QsWUFBS2QsU0FBTCxHQUFpQkEsU0FBakI7O0FBQ0EsVUFBSUUsT0FBSixFQUFh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TCxHQUFpQkEsU0FBakI7QUFSaUY7QUFTcEY7OztJQXRDOEJ2RSxjLEdBeUNuQztBQUNBOzs7O0FBQ0FBLGlCQUFNSixVQUFOLEdBQW1CQSxVQUFuQixDLENBRUE7QUFDQTs7QUFDQUksaUJBQU15QyxVQUFOLEdBQW1CQSxVQUFuQixDLENBRUE7QUFDQTs7QUFDQXpDLGlCQUFNa0UsaUJBQU4sR0FBMEJBLGlCQUExQixDLENBRUE7QUFDQTs7QUFDQWxFLGlCQUFNcUUsYUFBTixHQUFzQkEsYUFBdEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gQ29weXJpZ2h0IChjKSAyMDEzLTIwMTYgQ2h1a29uZyBUZWNobm9sb2dpZXMgSW5jLlxyXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMjAgWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXHJcblxyXG4gaHR0cDovL3d3dy5jb2Nvcy5jb21cclxuXHJcbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XHJcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcclxuIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcclxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXHJcbiBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXHJcbiB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXHJcbiBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cclxuXHJcbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxyXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cclxuXHJcbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcclxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxyXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxyXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcclxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cclxuIFRIRSBTT0ZUV0FSRS5cclxuKi9cclxuXHJcbi8qKlxyXG4gKiBAY2F0ZWdvcnkgZXZlbnRcclxuICovXHJcblxyXG5pbXBvcnQgRXZlbnQgZnJvbSAnLi4vLi4vZXZlbnQvZXZlbnQnO1xyXG5pbXBvcnQgeyBWZWMyIH0gZnJvbSAnLi4vLi4vbWF0aC92ZWMyJztcclxuaW1wb3J0IHsgVG91Y2ggfSBmcm9tICcuL3RvdWNoJztcclxuaW1wb3J0IHsgQWNjZWxlcmF0aW9uIH0gZnJvbSAnLi9pbnB1dC1tYW5hZ2VyJztcclxuXHJcbmxldCBfdmVjMiA9IG5ldyBWZWMyKCk7XHJcblxyXG4vKipcclxuICogQGVuIFRoZSBtb3VzZSBldmVudFxyXG4gKiBAemgg6byg5qCH5LqL5Lu257G75Z6LXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRXZlbnRNb3VzZSBleHRlbmRzIEV2ZW50IHtcclxuICAgIC8vIElubmVyIGV2ZW50IHR5cGVzIG9mIE1vdXNlRXZlbnRcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlbiBUaGUgbm9uZSBldmVudCBjb2RlIG9mIG1vdXNlIGV2ZW50LlxyXG4gICAgICogQHpoIOaXoOaViOS6i+S7tuS7o+eggVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIE5PTkUgPSAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGVuIFRoZSBldmVudCBjb2RlIG9mIG1vdXNlIGRvd24gZXZlbnQuXHJcbiAgICAgKiBAemgg6byg5qCH5oyJ5LiL5LqL5Lu25Luj56CB44CCXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgRE9XTiA9IDE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW4gVGhlIGV2ZW50IGNvZGUgb2YgbW91c2UgdXAgZXZlbnQuXHJcbiAgICAgKiBAemgg6byg5qCH5oyJ5LiL5ZCO6YeK5pS+5LqL5Lu25Luj56CB44CCXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgVVAgPSAyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGVuIFRoZSBldmVudCBjb2RlIG9mIG1vdXNlIG1vdmUgZXZlbnQuXHJcbiAgICAgKiBAemgg6byg5qCH56e75Yqo5LqL5Lu244CCXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgTU9WRSA9IDM7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW4gVGhlIGV2ZW50IGNvZGUgb2YgbW91c2Ugc2Nyb2xsIGV2ZW50LlxyXG4gICAgICogQHpoIOm8oOagh+a7mui9ruS6i+S7tuOAglxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIFNDUk9MTCA9IDQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW4gVGhlIGRlZmF1bHQgdGFnIHdoZW4gbm8gYnV0dG9uIGlzIHByZXNzZWRcclxuICAgICAqIEB6aCDmjInplK7pu5jorqTnmoTnvLrnnIHnirbmgIFcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBCVVRUT05fTUlTU0lORyA9IC0xO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGVuIFRoZSB0YWcgb2YgbW91c2UncyBsZWZ0IGJ1dHRvbi5cclxuICAgICAqIEB6aCDpvKDmoIflt6bplK7nmoTmoIfnrb7jgIJcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBCVVRUT05fTEVGVCA9IDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW4gVGhlIHRhZyBvZiBtb3VzZSdzIHJpZ2h0IGJ1dHRvbiAgKFRoZSByaWdodCBidXR0b24gbnVtYmVyIGlzIDIgb24gYnJvd3NlcikuXHJcbiAgICAgKiBAemgg6byg5qCH5Y+z6ZSu55qE5qCH562+44CCXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgQlVUVE9OX1JJR0hUID0gMjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlbiBUaGUgdGFnIG9mIG1vdXNlJ3MgbWlkZGxlIGJ1dHRvbi5cclxuICAgICAqIEB6aCDpvKDmoIfkuK3plK7nmoTmoIfnrb7jgIJcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBCVVRUT05fTUlERExFID0gMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlbiBUaGUgdGFnIG9mIG1vdXNlJ3MgYnV0dG9uIDQuXHJcbiAgICAgKiBAemgg6byg5qCH5oyJ6ZSuIDQg55qE5qCH562+44CCXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgQlVUVE9OXzQgPSAzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGVuIFRoZSB0YWcgb2YgbW91c2UncyBidXR0b24gNS5cclxuICAgICAqIEB6aCDpvKDmoIfmjInplK4gNSDnmoTmoIfnrb7jgIJcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBCVVRUT05fNSA9IDQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW4gVGhlIHRhZyBvZiBtb3VzZSdzIGJ1dHRvbiA2LlxyXG4gICAgICogQHpoIOm8oOagh+aMiemUriA2IOeahOagh+etvuOAglxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIEJVVFRPTl82ID0gNTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlbiBUaGUgdGFnIG9mIG1vdXNlJ3MgYnV0dG9uIDcuXHJcbiAgICAgKiBAemgg6byg5qCH5oyJ6ZSuIDcg55qE5qCH562+44CCXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgQlVUVE9OXzcgPSA2O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGVuIFRoZSB0YWcgb2YgbW91c2UncyBidXR0b24gOC5cclxuICAgICAqIEB6aCDpvKDmoIfmjInplK4gOCDnmoTmoIfnrb7jgIJcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBCVVRUT05fOCA9IDc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW4gTW91c2UgbW92ZW1lbnQgb24geCBheGlzIG9mIHRoZSBVSSBjb29yZGluYXRlIHN5c3RlbS5cclxuICAgICAqIEB6aCDpvKDmoIflnKggVUkg5Z2Q5qCH57O75LiLIFgg6L205LiK55qE56e75Yqo6Led56a7XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtb3ZlbWVudFg6IG51bWJlciA9IDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW4gTW91c2UgbW92ZW1lbnQgb24geSBheGlzIG9mIHRoZSBVSSBjb29yZGluYXRlIHN5c3RlbS5cclxuICAgICAqIEB6aCDpvKDmoIflnKggVUkg5Z2Q5qCH57O75LiLIFkg6L205LiK55qE56e75Yqo6Led56a7XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtb3ZlbWVudFk6IG51bWJlciA9IDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW4gVGhlIHR5cGUgb2YgdGhlIGV2ZW50LCBwb3NzaWJsZSB2YWx1ZXMgYXJlIFVQLCBET1dOLCBNT1ZFLCBTQ1JPTExcclxuICAgICAqIEB6aCDpvKDmoIfkuovku7bnsbvlnovvvIzlj6/ku6XmmK8gVVAsIERPV04sIE1PVkUsIENBTkNFTEVE44CCXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBldmVudFR5cGU6IG51bWJlcjtcclxuXHJcbiAgICBwcml2YXRlIF9idXR0b246IG51bWJlciA9IEV2ZW50TW91c2UuQlVUVE9OX01JU1NJTkc7XHJcblxyXG4gICAgcHJpdmF0ZSBfeDogbnVtYmVyID0gMDtcclxuXHJcbiAgICBwcml2YXRlIF95OiBudW1iZXIgPSAwO1xyXG5cclxuICAgIHByaXZhdGUgX3ByZXZYOiBudW1iZXIgPSAwO1xyXG5cclxuICAgIHByaXZhdGUgX3ByZXZZOiBudW1iZXIgPSAwO1xyXG5cclxuICAgIHByaXZhdGUgX3Njcm9sbFg6IG51bWJlciA9IDA7XHJcblxyXG4gICAgcHJpdmF0ZSBfc2Nyb2xsWTogbnVtYmVyID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBldmVudFR5cGUgLSBUaGUgdHlwZSBvZiB0aGUgZXZlbnQsIHBvc3NpYmxlIHZhbHVlcyBhcmUgVVAsIERPV04sIE1PVkUsIFNDUk9MTFxyXG4gICAgICogQHBhcmFtIGJ1YmJsZXMgLSBJbmRpY2F0ZSB3aGV0aGVyIHRoZSBldmVudCBidWJibGVzIHVwIHRocm91Z2ggdGhlIGhpZXJhcmNoeSBvciBub3QuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yIChldmVudFR5cGU6IG51bWJlciwgYnViYmxlcz86IGJvb2xlYW4sIHByZXZMb2M/OiBWZWMyKSB7XHJcbiAgICAgICAgc3VwZXIoRXZlbnQuTU9VU0UsIGJ1YmJsZXMpO1xyXG4gICAgICAgIHRoaXMuZXZlbnRUeXBlID0gZXZlbnRUeXBlO1xyXG4gICAgICAgIGlmIChwcmV2TG9jKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3ByZXZYID0gcHJldkxvYy54O1xyXG4gICAgICAgICAgICB0aGlzLl9wcmV2WSA9IHByZXZMb2MueTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW4gU2V0cyBzY3JvbGwgZGF0YSBvZiB0aGUgbW91c2UuXHJcbiAgICAgKiBAemgg6K6+572u6byg5qCH5rua6L2u55qE5rua5Yqo5pWw5o2u44CCXHJcbiAgICAgKiBAcGFyYW0gc2Nyb2xsWCAtIFRoZSBzY3JvbGwgdmFsdWUgb24geCBheGlzXHJcbiAgICAgKiBAcGFyYW0gc2Nyb2xsWSAtIFRoZSBzY3JvbGwgdmFsdWUgb24geSBheGlzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXRTY3JvbGxEYXRhIChzY3JvbGxYOiBudW1iZXIsIHNjcm9sbFk6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX3Njcm9sbFggPSBzY3JvbGxYO1xyXG4gICAgICAgIHRoaXMuX3Njcm9sbFkgPSBzY3JvbGxZO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGVuIFJldHVybnMgdGhlIHNjcm9sbCB2YWx1ZSBvbiB4IGF4aXMuXHJcbiAgICAgKiBAemgg6I635Y+W6byg5qCH5rua5Yqo55qEIFgg6L206Led56a777yM5Y+q5pyJ5rua5Yqo5pe25omN5pyJ5pWI44CCXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRTY3JvbGxYICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2Nyb2xsWDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlbiBSZXR1cm5zIHRoZSBzY3JvbGwgdmFsdWUgb24geSBheGlzLlxyXG4gICAgICogQHpoIOiOt+WPlua7mui9rua7muWKqOeahCBZIOi9tOi3neemu++8jOWPquaciea7muWKqOaXtuaJjeacieaViOOAglxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0U2Nyb2xsWSAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Njcm9sbFk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW4gU2V0cyBjdXJzb3IgbG9jYXRpb24uXHJcbiAgICAgKiBAemgg6K6+572u5b2T5YmN6byg5qCH5L2N572u44CCXHJcbiAgICAgKiBAcGFyYW0geCAtIFRoZSBsb2NhdGlvbiBvbiB4IGF4aXNcclxuICAgICAqIEBwYXJhbSB5IC0gVGhlIGxvY2F0aW9uIG9uIHkgYXhpc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0TG9jYXRpb24gKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5feCA9IHg7XHJcbiAgICAgICAgdGhpcy5feSA9IHk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW4gUmV0dXJucyBjdXJzb3IgbG9jYXRpb24uXHJcbiAgICAgKiBAemgg6I635Y+W6byg5qCH55u45a+55LqO5bem5LiL6KeS5L2N572u5a+56LGh77yM5a+56LGh5YyF5ZCrIHgg5ZKMIHkg5bGe5oCn44CCXHJcbiAgICAgKiBAcGFyYW0gb3V0IC0gUGFzcyB0aGUgb3V0IG9iamVjdCB0byBhdm9pZCBvYmplY3QgY3JlYXRpb24sIHZlcnkgZ29vZCBwcmFjdGljZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0TG9jYXRpb24gKG91dD86IFZlYzIpIHtcclxuICAgICAgICBpZiAoIW91dCkge1xyXG4gICAgICAgICAgICBvdXQgPSBuZXcgVmVjMigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgVmVjMi5zZXQob3V0LCB0aGlzLl94LCB0aGlzLl95KTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGVuIFJldHVybnMgdGhlIGN1cnJlbnQgY3Vyc29yIGxvY2F0aW9uIGluIGdhbWUgdmlldyBjb29yZGluYXRlcy5cclxuICAgICAqIEB6aCDojrflj5blvZPliY3kuovku7blnKjmuLjmiI/nqpflj6PlhoXnmoTlnZDmoIfkvY3nva7lr7nosaHvvIzlr7nosaHljIXlkKsgeCDlkowgeSDlsZ7mgKfjgIJcclxuICAgICAqIEBwYXJhbSBvdXQgLSBQYXNzIHRoZSBvdXQgb2JqZWN0IHRvIGF2b2lkIG9iamVjdCBjcmVhdGlvbiwgdmVyeSBnb29kIHByYWN0aWNlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRMb2NhdGlvbkluVmlldyAob3V0PzogVmVjMikge1xyXG4gICAgICAgIGlmICghb3V0KSB7XHJcbiAgICAgICAgICAgIG91dCA9IG5ldyBWZWMyKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBWZWMyLnNldChvdXQsIHRoaXMuX3gsIGNjLnZpZXcuX2Rlc2lnblJlc29sdXRpb25TaXplLmhlaWdodCAtIHRoaXMuX3kpO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW4gUmV0dXJucyB0aGUgY3VycmVudCBjdXJzb3IgbG9jYXRpb24gaW4gdWkgY29vcmRpbmF0ZXMuXHJcbiAgICAgKiBAemgg6I635Y+W5b2T5YmN5LqL5Lu25ZyoIFVJIOeql+WPo+WGheeahOWdkOagh+S9jee9ru+8jOWvueixoeWMheWQqyB4IOWSjCB5IOWxnuaAp+OAglxyXG4gICAgICogQHBhcmFtIG91dCAtIFBhc3MgdGhlIG91dCBvYmplY3QgdG8gYXZvaWQgb2JqZWN0IGNyZWF0aW9uLCB2ZXJ5IGdvb2QgcHJhY3RpY2VcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFVJTG9jYXRpb24gKG91dD86IFZlYzIpe1xyXG4gICAgICAgIGlmICghb3V0KSB7XHJcbiAgICAgICAgICAgIG91dCA9IG5ldyBWZWMyKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBWZWMyLnNldChvdXQsIHRoaXMuX3gsIHRoaXMuX3kpO1xyXG4gICAgICAgIGNjLnZpZXcuX2NvbnZlcnRQb2ludFdpdGhTY2FsZShvdXQpO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW4gUmV0dXJucyB0aGUgcHJldmlvdXMgdG91Y2ggbG9jYXRpb24uXHJcbiAgICAgKiBAemgg6I635Y+W6byg5qCH54K55Ye75Zyo5LiK5LiA5qyh5LqL5Lu25pe255qE5L2N572u5a+56LGh77yM5a+56LGh5YyF5ZCrIHgg5ZKMIHkg5bGe5oCn44CCXHJcbiAgICAgKiBAcGFyYW0gb3V0IC0gUGFzcyB0aGUgb3V0IG9iamVjdCB0byBhdm9pZCBvYmplY3QgY3JlYXRpb24sIHZlcnkgZ29vZCBwcmFjdGljZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0UHJldmlvdXNMb2NhdGlvbiAob3V0PzogVmVjMikge1xyXG4gICAgICAgIGlmICghb3V0KSB7XHJcbiAgICAgICAgICAgIG91dCA9IG5ldyBWZWMyKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBWZWMyLnNldChvdXQsIHRoaXMuX3ByZXZYLCB0aGlzLl9wcmV2WSk7XHJcbiAgICAgICAgcmV0dXJuIG91dDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlbiBSZXR1cm5zIHRoZSBwcmV2aW91cyB0b3VjaCBsb2NhdGlvbi5cclxuICAgICAqIEB6aCDojrflj5bpvKDmoIfngrnlh7vlnKjkuIrkuIDmrKHkuovku7bml7bnmoTkvY3nva7lr7nosaHvvIzlr7nosaHljIXlkKsgeCDlkowgeSDlsZ7mgKfjgIJcclxuICAgICAqIEBwYXJhbSBvdXQgLSBQYXNzIHRoZSBvdXQgb2JqZWN0IHRvIGF2b2lkIG9iamVjdCBjcmVhdGlvbiwgdmVyeSBnb29kIHByYWN0aWNlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRVSVByZXZpb3VzTG9jYXRpb24gKG91dD86IFZlYzIpIHtcclxuICAgICAgICBpZiAoIW91dCkge1xyXG4gICAgICAgICAgICBvdXQgPSBuZXcgVmVjMigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgVmVjMi5zZXQob3V0LCB0aGlzLl9wcmV2WCwgdGhpcy5fcHJldlkpO1xyXG4gICAgICAgIGNjLnZpZXcuX2NvbnZlcnRQb2ludFdpdGhTY2FsZShvdXQpO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW4gUmV0dXJucyB0aGUgZGVsdGEgZGlzdGFuY2UgZnJvbSB0aGUgcHJldmlvdXMgbG9jYXRpb24gdG8gY3VycmVudCBsb2NhdGlvbi5cclxuICAgICAqIEB6aCDojrflj5bpvKDmoIfot53nprvkuIrkuIDmrKHkuovku7bnp7vliqjnmoTot53nprvlr7nosaHvvIzlr7nosaHljIXlkKsgeCDlkowgeSDlsZ7mgKfjgIJcclxuICAgICAqIEBwYXJhbSBvdXQgLSBQYXNzIHRoZSBvdXQgb2JqZWN0IHRvIGF2b2lkIG9iamVjdCBjcmVhdGlvbiwgdmVyeSBnb29kIHByYWN0aWNlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXREZWx0YSAob3V0PzogVmVjMikge1xyXG4gICAgICAgIGlmICghb3V0KSB7XHJcbiAgICAgICAgICAgIG91dCA9IG5ldyBWZWMyKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBWZWMyLnNldChvdXQsIHRoaXMuX3ggLSB0aGlzLl9wcmV2WCwgdGhpcy5feSAtIHRoaXMuX3ByZXZZKTtcclxuICAgICAgICByZXR1cm4gb3V0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGVuIFJldHVybnMgdGhlIFggYXhpcyBkZWx0YSBkaXN0YW5jZSBmcm9tIHRoZSBwcmV2aW91cyBsb2NhdGlvbiB0byBjdXJyZW50IGxvY2F0aW9uLlxyXG4gICAgICogQHpoIOiOt+WPlum8oOagh+i3neemu+S4iuS4gOasoeS6i+S7tuenu+WKqOeahCBYIOi9tOi3neemu+OAglxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0RGVsdGFYICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5feCAtIHRoaXMuX3ByZXZYO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGVuIFJldHVybnMgdGhlIFkgYXhpcyBkZWx0YSBkaXN0YW5jZSBmcm9tIHRoZSBwcmV2aW91cyBsb2NhdGlvbiB0byBjdXJyZW50IGxvY2F0aW9uLlxyXG4gICAgICogQHpoIOiOt+WPlum8oOagh+i3neemu+S4iuS4gOasoeS6i+S7tuenu+WKqOeahCBZIOi9tOi3neemu+OAglxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0RGVsdGFZICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5feSAtIHRoaXMuX3ByZXZZO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGVuIFJldHVybnMgdGhlIGRlbHRhIGRpc3RhbmNlIGZyb20gdGhlIHByZXZpb3VzIGxvY2F0aW9uIHRvIGN1cnJlbnQgbG9jYXRpb24gaW4gdGhlIFVJIGNvb3JkaW5hdGVzLlxyXG4gICAgICogQHpoIOiOt+WPlum8oOagh+i3neemu+S4iuS4gOasoeS6i+S7tuenu+WKqOWcqCBVSSDlnZDmoIfns7vkuIvnmoTot53nprvlr7nosaHvvIzlr7nosaHljIXlkKsgeCDlkowgeSDlsZ7mgKfjgIJcclxuICAgICAqIEBwYXJhbSBvdXQgLSBQYXNzIHRoZSBvdXQgb2JqZWN0IHRvIGF2b2lkIG9iamVjdCBjcmVhdGlvbiwgdmVyeSBnb29kIHByYWN0aWNlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRVSURlbHRhIChvdXQ/OiBWZWMyKSB7XHJcbiAgICAgICAgaWYgKCFvdXQpIHtcclxuICAgICAgICAgICAgb3V0ID0gbmV3IFZlYzIoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFZlYzIuc2V0KG91dCwgKHRoaXMuX3ggLSB0aGlzLl9wcmV2WCkgLyBjYy52aWV3LmdldFNjYWxlWCgpLCAodGhpcy5feSAtIHRoaXMuX3ByZXZZKSAvIGNjLnZpZXcuZ2V0U2NhbGVZKCkpO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW4gUmV0dXJucyB0aGUgWCBheGlzIGRlbHRhIGRpc3RhbmNlIGZyb20gdGhlIHByZXZpb3VzIGxvY2F0aW9uIHRvIGN1cnJlbnQgbG9jYXRpb24gaW4gdGhlIFVJIGNvb3JkaW5hdGVzLlxyXG4gICAgICogQHpoIOiOt+WPlum8oOagh+i3neemu+S4iuS4gOasoeS6i+S7tuenu+WKqOWcqCBVSSDlnZDmoIfns7vkuIvnmoQgWCDovbTot53nprvjgIJcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFVJRGVsdGFYICgpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuX3ggLSB0aGlzLl9wcmV2WCkgLyBjYy52aWV3LmdldFNjYWxlWCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGVuIFJldHVybnMgdGhlIFkgYXhpcyBkZWx0YSBkaXN0YW5jZSBmcm9tIHRoZSBwcmV2aW91cyBsb2NhdGlvbiB0byBjdXJyZW50IGxvY2F0aW9uIGluIHRoZSBVSSBjb29yZGluYXRlcy5cclxuICAgICAqIEB6aCDojrflj5bpvKDmoIfot53nprvkuIrkuIDmrKHkuovku7bnp7vliqjlnKggVUkg5Z2Q5qCH57O75LiL55qEIFkg6L206Led56a744CCXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRVSURlbHRhWSAoKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLl95IC0gdGhpcy5fcHJldlkpIC8gY2Mudmlldy5nZXRTY2FsZVkoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlbiBTZXRzIG1vdXNlIGJ1dHRvbiBjb2RlLlxyXG4gICAgICogQHpoIOiuvue9rum8oOagh+aMiemUruOAglxyXG4gICAgICogQHBhcmFtIGJ1dHRvbiAtIFRoZSBidXR0b24gY29kZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0QnV0dG9uIChidXR0b246IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX2J1dHRvbiA9IGJ1dHRvbjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlbiBSZXR1cm5zIG1vdXNlIGJ1dHRvbiBjb2RlLlxyXG4gICAgICogQHpoIOiOt+WPlum8oOagh+aMiemUruOAglxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0QnV0dG9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYnV0dG9uO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGVuIFJldHVybnMgbG9jYXRpb24gZGF0YSBvbiBYIGF4aXMuXHJcbiAgICAgKiBAemgg6I635Y+W6byg5qCH5b2T5YmNIFgg6L205L2N572u44CCXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRMb2NhdGlvblggKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl94O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGVuIFJldHVybnMgbG9jYXRpb24gZGF0YSBvbiBZIGF4aXMuXHJcbiAgICAgKiBAemgg6I635Y+W6byg5qCH5b2T5YmNIFkg6L205L2N572u44CCXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRMb2NhdGlvblkgKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl95O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGVuIFJldHVybnMgbG9jYXRpb24gZGF0YSBvbiBYIGF4aXMuXHJcbiAgICAgKiBAemgg6I635Y+W6byg5qCH5b2T5YmNIFgg6L205L2N572u44CCXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRVSUxvY2F0aW9uWCAoKSB7XHJcbiAgICAgICAgY29uc3Qgdmlld3BvcnQgPSBjYy52aWV3LmdldFZpZXdwb3J0UmVjdCgpO1xyXG4gICAgICAgIHJldHVybiAodGhpcy5feCAtIHZpZXdwb3J0LngpIC8gY2Mudmlldy5nZXRTY2FsZVgoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlbiBSZXR1cm5zIGxvY2F0aW9uIGRhdGEgb24gWSBheGlzLlxyXG4gICAgICogQHpoIOiOt+WPlum8oOagh+W9k+WJjSBZIOi9tOS9jee9ruOAglxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0VUlMb2NhdGlvblkgKCkge1xyXG4gICAgICAgIGNvbnN0IHZpZXdwb3J0ID0gY2Mudmlldy5nZXRWaWV3cG9ydFJlY3QoKTtcclxuICAgICAgICByZXR1cm4gKHRoaXMuX3kgLSB2aWV3cG9ydC55KSAvIGNjLnZpZXcuZ2V0U2NhbGVZKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZW5cclxuICogVGhlIHRvdWNoIGV2ZW50LlxyXG4gKlxyXG4gKiBAemhcclxuICog6Kem5pG45LqL5Lu244CCXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRXZlbnRUb3VjaCBleHRlbmRzIEV2ZW50IHtcclxuICAgIC8qKlxyXG4gICAgICogQGVuIFRoZSBtYXhpbXVtIHRvdWNoIHBvaW50IG51bWJlcnMgc2ltdWx0YW5lb3VzbHlcclxuICAgICAqIEB6aCDlkIzml7blrZjlnKjnmoTmnIDlpKfop6bngrnmlbDph4/jgIJcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBNQVhfVE9VQ0hFUyA9IDU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW4gVGhlIGV2ZW50IHR5cGUgY29kZSBvZiB0b3VjaCBiZWdhbiBldmVudC5cclxuICAgICAqIEB6aCDlvIDlp4vop6bmkbjkuovku7bjgIJcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBCRUdBTiA9IDA7XHJcbiAgICAvKipcclxuICAgICAqIEBlbiBUaGUgZXZlbnQgdHlwZSBjb2RlIG9mIHRvdWNoIG1vdmVkIGV2ZW50LlxyXG4gICAgICogQHpoIOinpuaRuOWQjuenu+WKqOS6i+S7tuOAglxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIE1PVkVEID0gMTtcclxuICAgIC8qKlxyXG4gICAgICogQGVuIFRoZSBldmVudCB0eXBlIGNvZGUgb2YgdG91Y2ggZW5kZWQgZXZlbnQuXHJcbiAgICAgKiBAemgg57uT5p2f6Kem5pG45LqL5Lu244CCXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgRU5ERUQgPSAyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZW4gVGhlIGV2ZW50IHR5cGUgY29kZSBvZiB0b3VjaCBjYW5jZWxlZCBldmVudC5cclxuICAgICAqIEB6aCDlj5bmtojop6bmkbjkuovku7bjgIJcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBDQU5DRUxMRUQgPSAzO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGVuIFRoZSBjdXJyZW50IHRvdWNoIG9iamVjdFxyXG4gICAgICogQHpoIOW9k+WJjeinpueCueWvueixoVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgdG91Y2g6IFRvdWNoIHwgbnVsbCA9IG51bGw7XHJcbiAgICAvKipcclxuICAgICAqIEBlbiBJbmRpY2F0ZSB3aGV0aGVyIHRoZSB0b3VjaCBldmVudCBpcyBzaW11bGF0ZWQgb3IgcmVhbFxyXG4gICAgICogQHpoIOihqOekuuinpuaRuOS6i+S7tuaYr+ecn+WunuinpueCueinpuWPkeeahOi/mOaYr+aooeaLn+eahFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2ltdWxhdGUgPSBmYWxzZTtcclxuXHJcbiAgICBwcml2YXRlIF9ldmVudENvZGU6IG51bWJlcjtcclxuXHJcbiAgICBwcml2YXRlIF90b3VjaGVzOiBUb3VjaFtdO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHRvdWNoZXMgLSBBbiBhcnJheSBvZiBjdXJyZW50IHRvdWNoZXNcclxuICAgICAqIEBwYXJhbSBidWJibGVzIC0gSW5kaWNhdGUgd2hldGhlciB0aGUgZXZlbnQgYnViYmxlcyB1cCB0aHJvdWdoIHRoZSBoaWVyYXJjaHkgb3Igbm90LlxyXG4gICAgICogQHBhcmFtIGV2ZW50Q29kZSAtIFRoZSB0eXBlIGNvZGUgb2YgdGhlIHRvdWNoIGV2ZW50XHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yICh0b3VjaGVzPzogVG91Y2hbXSwgYnViYmxlcz86IGJvb2xlYW4sIGV2ZW50Q29kZT86IG51bWJlcikge1xyXG4gICAgICAgIHN1cGVyKEV2ZW50LlRPVUNILCBidWJibGVzKTtcclxuICAgICAgICB0aGlzLl9ldmVudENvZGUgPSBldmVudENvZGUgfHwgMDtcclxuICAgICAgICB0aGlzLl90b3VjaGVzID0gdG91Y2hlcyB8fCBbXTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlbiBSZXR1cm5zIGV2ZW50IHR5cGUgY29kZS5cclxuICAgICAqIEB6aCDojrflj5bop6bmkbjkuovku7bnsbvlnovjgIJcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEV2ZW50Q29kZSAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50Q29kZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlbiBSZXR1cm5zIHRvdWNoZXMgb2YgZXZlbnQuXHJcbiAgICAgKiBAemgg6I635Y+W6Kem5pG454K555qE5YiX6KGo44CCXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRUb3VjaGVzICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdG91Y2hlcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlbiBTZXRzIHRvdWNoIGxvY2F0aW9uLlxyXG4gICAgICogQHpoIOiuvue9ruW9k+WJjeinpueCueS9jee9rlxyXG4gICAgICogQHBhcmFtIHggLSBUaGUgY3VycmVudCB0b3VjaCBsb2NhdGlvbiBvbiB0aGUgeCBheGlzXHJcbiAgICAgKiBAcGFyYW0geSAtIFRoZSBjdXJyZW50IHRvdWNoIGxvY2F0aW9uIG9uIHRoZSB5IGF4aXNcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNldExvY2F0aW9uICh4OiBudW1iZXIsIHk6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLnRvdWNoKSB7XHJcbiAgICAgICAgICAgIHRoaXMudG91Y2guc2V0VG91Y2hJbmZvKHRoaXMudG91Y2guZ2V0SUQoKSwgeCwgeSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGVuIFJldHVybnMgdGhlIGN1cnJlbnQgdG91Y2ggbG9jYXRpb24uXHJcbiAgICAgKiBAemgg6I635Y+W6Kem54K55L2N572u44CCXHJcbiAgICAgKiBAcGFyYW0gb3V0IC0gUGFzcyB0aGUgb3V0IG9iamVjdCB0byBhdm9pZCBvYmplY3QgY3JlYXRpb24sIHZlcnkgZ29vZCBwcmFjdGljZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0TG9jYXRpb24gKG91dD86IFZlYzIpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50b3VjaCA/IHRoaXMudG91Y2guZ2V0TG9jYXRpb24ob3V0KSA6IG5ldyBWZWMyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW4gUmV0dXJucyB0aGUgY3VycmVudCB0b3VjaCBsb2NhdGlvbiBpbiBVSSBjb29yZGluYXRlcy5cclxuICAgICAqIEB6aCDojrflj5YgVUkg5Z2Q5qCH57O75LiL55qE6Kem54K55L2N572u44CCXHJcbiAgICAgKiBAcGFyYW0gb3V0IC0gUGFzcyB0aGUgb3V0IG9iamVjdCB0byBhdm9pZCBvYmplY3QgY3JlYXRpb24sIHZlcnkgZ29vZCBwcmFjdGljZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0VUlMb2NhdGlvbihvdXQ/OiBWZWMyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudG91Y2ggPyB0aGlzLnRvdWNoLmdldFVJTG9jYXRpb24ob3V0KSA6IG5ldyBWZWMyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW4gUmV0dXJucyB0aGUgY3VycmVudCB0b3VjaCBsb2NhdGlvbiBpbiBnYW1lIHNjcmVlbiBjb29yZGluYXRlcy5cclxuICAgICAqIEB6aCDojrflj5blvZPliY3op6bngrnlnKjmuLjmiI/nqpflj6PkuK3nmoTkvY3nva7jgIJcclxuICAgICAqIEBwYXJhbSBvdXQgLSBQYXNzIHRoZSBvdXQgb2JqZWN0IHRvIGF2b2lkIG9iamVjdCBjcmVhdGlvbiwgdmVyeSBnb29kIHByYWN0aWNlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRMb2NhdGlvbkluVmlldyAob3V0PzogVmVjMikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRvdWNoID8gdGhpcy50b3VjaC5nZXRMb2NhdGlvbkluVmlldyhvdXQpIDogbmV3IFZlYzIoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlbiBSZXR1cm5zIHRoZSBwcmV2aW91cyB0b3VjaCBsb2NhdGlvbi5cclxuICAgICAqIEB6aCDojrflj5bop6bngrnlnKjkuIrkuIDmrKHkuovku7bml7bnmoTkvY3nva7lr7nosaHvvIzlr7nosaHljIXlkKsgeCDlkowgeSDlsZ7mgKfjgIJcclxuICAgICAqIEBwYXJhbSBvdXQgLSBQYXNzIHRoZSBvdXQgb2JqZWN0IHRvIGF2b2lkIG9iamVjdCBjcmVhdGlvbiwgdmVyeSBnb29kIHByYWN0aWNlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRQcmV2aW91c0xvY2F0aW9uIChvdXQ/OiBWZWMyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudG91Y2ggPyB0aGlzLnRvdWNoLmdldFByZXZpb3VzTG9jYXRpb24ob3V0KSA6IG5ldyBWZWMyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW4gUmV0dXJucyB0aGUgc3RhcnQgdG91Y2ggbG9jYXRpb24uXHJcbiAgICAgKiBAemgg6I636I635Y+W6Kem54K56JC95LiL5pe255qE5L2N572u5a+56LGh77yM5a+56LGh5YyF5ZCrIHgg5ZKMIHkg5bGe5oCn44CCXHJcbiAgICAgKiBAcGFyYW0gb3V0IC0gUGFzcyB0aGUgb3V0IG9iamVjdCB0byBhdm9pZCBvYmplY3QgY3JlYXRpb24sIHZlcnkgZ29vZCBwcmFjdGljZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0U3RhcnRMb2NhdGlvbiAob3V0PzogVmVjMikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRvdWNoID8gdGhpcy50b3VjaC5nZXRTdGFydExvY2F0aW9uKG91dCkgOiBuZXcgVmVjMigpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGVuIFJldHVybnMgdGhlIHN0YXJ0IHRvdWNoIGxvY2F0aW9uIGluIFVJIGNvb3JkaW5hdGVzLlxyXG4gICAgICogQHpoIOiOt+iOt+WPluinpueCueiQveS4i+aXtueahCBVSSDkuJbnlYzkuIvkvY3nva7lr7nosaHvvIzlr7nosaHljIXlkKsgeCDlkowgeSDlsZ7mgKfjgIJcclxuICAgICAqIEBwYXJhbSBvdXQgLSBQYXNzIHRoZSBvdXQgb2JqZWN0IHRvIGF2b2lkIG9iamVjdCBjcmVhdGlvbiwgdmVyeSBnb29kIHByYWN0aWNlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRVSVN0YXJ0TG9jYXRpb24ob3V0PzogVmVjMikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRvdWNoID8gdGhpcy50b3VjaC5nZXRVSVN0YXJ0TG9jYXRpb24ob3V0KSA6IG5ldyBWZWMyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW4gUmV0dXJucyB0aGUgaWQgb2YgdGhlIGN1cnJlbnQgdG91Y2ggcG9pbnQuXHJcbiAgICAgKiBAemgg6I635Y+W6Kem54K555qE5qCH6K+GIElE77yM5Y+v5Lul55So5p2l5Zyo5aSa54K56Kem5pG45Lit6Lef6Liq6Kem54K544CCXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRJRCAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudG91Y2ggPyB0aGlzLnRvdWNoLmdldElEKCkgOiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGVuIFJldHVybnMgdGhlIGRlbHRhIGRpc3RhbmNlIGZyb20gdGhlIHByZXZpb3VzIGxvY2F0aW9uIHRvIGN1cnJlbnQgbG9jYXRpb24uXHJcbiAgICAgKiBAemgg6I635Y+W6Kem54K56Led56a75LiK5LiA5qyh5LqL5Lu256e75Yqo55qE6Led56a75a+56LGh77yM5a+56LGh5YyF5ZCrIHgg5ZKMIHkg5bGe5oCn44CCXHJcbiAgICAgKiBAcGFyYW0gb3V0IC0gUGFzcyB0aGUgb3V0IG9iamVjdCB0byBhdm9pZCBvYmplY3QgY3JlYXRpb24sIHZlcnkgZ29vZCBwcmFjdGljZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0RGVsdGEgKG91dD86IFZlYzIpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50b3VjaCA/IHRoaXMudG91Y2guZ2V0RGVsdGEob3V0KSA6IG5ldyBWZWMyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW4gUmV0dXJucyB0aGUgZGVsdGEgZGlzdGFuY2UgZnJvbSB0aGUgcHJldmlvdXMgbG9jYXRpb24gdG8gY3VycmVudCBsb2NhdGlvbi5cclxuICAgICAqIEB6aCDojrflj5bop6bngrnot53nprvkuIrkuIDmrKHkuovku7YgVUkg5LiW55WM5LiL56e75Yqo55qE6Led56a75a+56LGh77yM5a+56LGh5YyF5ZCrIHgg5ZKMIHkg5bGe5oCn44CCXHJcbiAgICAgKiBAcGFyYW0gb3V0IC0gUGFzcyB0aGUgb3V0IG9iamVjdCB0byBhdm9pZCBvYmplY3QgY3JlYXRpb24sIHZlcnkgZ29vZCBwcmFjdGljZVxyXG4gICAgKi9cclxuICAgIHB1YmxpYyBnZXRVSURlbHRhKG91dD86IFZlYzIpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50b3VjaCA/IHRoaXMudG91Y2guZ2V0VUlEZWx0YShvdXQpIDogbmV3IFZlYzIoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlbiBSZXR1cm5zIHRoZSBYIGF4aXMgZGVsdGEgZGlzdGFuY2UgZnJvbSB0aGUgcHJldmlvdXMgbG9jYXRpb24gdG8gY3VycmVudCBsb2NhdGlvbi5cclxuICAgICAqIEB6aCDojrflj5bop6bngrnot53nprvkuIrkuIDmrKHkuovku7bnp7vliqjnmoQgeCDovbTot53nprvjgIJcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldERlbHRhWCAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudG91Y2ggPyB0aGlzLnRvdWNoLmdldERlbHRhKF92ZWMyKS54IDogMDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlbiBSZXR1cm5zIHRoZSBZIGF4aXMgZGVsdGEgZGlzdGFuY2UgZnJvbSB0aGUgcHJldmlvdXMgbG9jYXRpb24gdG8gY3VycmVudCBsb2NhdGlvbi5cclxuICAgICAqIEB6aCDojrflj5bop6bngrnot53nprvkuIrkuIDmrKHkuovku7bnp7vliqjnmoQgeSDovbTot53nprvjgIJcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldERlbHRhWSAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudG91Y2ggPyB0aGlzLnRvdWNoLmdldERlbHRhKF92ZWMyKS55IDogMDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlbiBSZXR1cm5zIGxvY2F0aW9uIFggYXhpcyBkYXRhLlxyXG4gICAgICogQHpoIOiOt+WPluW9k+WJjeinpueCuSBYIOi9tOS9jee9ruOAglxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0TG9jYXRpb25YICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50b3VjaCA/IHRoaXMudG91Y2guZ2V0TG9jYXRpb25YKCkgOiAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGVuIFJldHVybnMgbG9jYXRpb24gWSBheGlzIGRhdGEuXHJcbiAgICAgKiBAemgg6I635Y+W5b2T5YmN6Kem54K5IFkg6L205L2N572u44CCXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRMb2NhdGlvblkgKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRvdWNoID8gdGhpcy50b3VjaC5nZXRMb2NhdGlvblkoKSA6IDA7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZW5cclxuICogVGhlIGFjY2VsZXJhdGlvbiBldmVudC5cclxuICogQHpoXHJcbiAqIOWKoOmAn+iuoeS6i+S7tuOAglxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEV2ZW50QWNjZWxlcmF0aW9uIGV4dGVuZHMgRXZlbnQge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZW4gVGhlIGFjY2VsZXJhdGlvbiBvYmplY3RcclxuICAgICAqIEB6aCDliqDpgJ/luqblr7nosaFcclxuICAgICAqL1xyXG4gICAgcHVibGljIGFjYzogQWNjZWxlcmF0aW9uO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGFjYyAtIFRoZSBhY2NlbGVyYXRpb25cclxuICAgICAqIEBwYXJhbSBidWJibGVzIC0gSW5kaWNhdGUgd2hldGhlciB0aGUgZXZlbnQgYnViYmxlcyB1cCB0aHJvdWdoIHRoZSBoaWVyYXJjaHkgb3Igbm90LlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvciAoYWNjOiBBY2NlbGVyYXRpb24sIGJ1YmJsZXM/OiBib29sZWFuKSB7XHJcbiAgICAgICAgc3VwZXIoRXZlbnQuQUNDRUxFUkFUSU9OLCBidWJibGVzKTtcclxuICAgICAgICB0aGlzLmFjYyA9IGFjYztcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEBlblxyXG4gKiBUaGUga2V5Ym9hcmQgZXZlbnQuXHJcbiAqIEB6aFxyXG4gKiDplK7nm5jkuovku7bjgIJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBFdmVudEtleWJvYXJkIGV4dGVuZHMgRXZlbnQge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZW4gVGhlIGtleUNvZGUgcmVhZC1vbmx5IHByb3BlcnR5IHJlcHJlc2VudHMgYSBzeXN0ZW0gYW5kIGltcGxlbWVudGF0aW9uIGRlcGVuZGVudCBudW1lcmljYWwgY29kZVxyXG4gICAgICogaWRlbnRpZnlpbmcgdGhlIHVubW9kaWZpZWQgdmFsdWUgb2YgdGhlIHByZXNzZWQga2V5LlxyXG4gICAgICogVGhpcyBpcyB1c3VhbGx5IHRoZSBkZWNpbWFsIEFTQ0lJIChSRkMgMjApIG9yIFdpbmRvd3MgMTI1MiBjb2RlIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGtleS5cclxuICAgICAqIElmIHRoZSBrZXkgY2FuJ3QgYmUgaWRlbnRpZmllZCwgdGhpcyB2YWx1ZSBpcyAwLlxyXG4gICAgICogQHpoIGtleUNvZGUg5piv5Y+q6K+75bGe5oCn5a6D6KGo56S65LiA5Liq57O757uf5ZKM5L6d6LWW5LqO5a6e546w55qE5pWw5a2X5Luj56CB77yM5Y+v5Lul6K+G5Yir5oyJ6ZSu55qE5pyq5L+u5pS55YC844CCXHJcbiAgICAgKiDov5npgJrluLjmmK/ljYHov5vliLYgQVNDSUkgKFJGQzIwKSDmiJbogIUgV2luZG93cyAxMjUyIOS7o+egge+8jOaJgOWvueW6lOeahOWvhumSpeOAglxyXG4gICAgICog5aaC5p6c5peg5rOV6K+G5Yir6K+l6ZSu77yM5YiZ6K+l5YC85Li6IDDjgIJcclxuICAgICAqL1xyXG4gICAgcHVibGljIGtleUNvZGU6IG51bWJlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlbiBSYXcgRE9NIEtleWJvYXJkRXZlbnQuXHJcbiAgICAgKiBAemgg5Y6f5aeLIERPTSBLZXlib2FyZEV2ZW50IOS6i+S7tuWvueixoVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmF3RXZlbnQ/OiBLZXlib2FyZEV2ZW50O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGVuIEluZGljYXRlcyB3aGV0aGVyIHRoZSBjdXJyZW50IGtleSBpcyBiZWluZyBwcmVzc2VkXHJcbiAgICAgKiBAemgg6KGo56S65b2T5YmN5oyJ6ZSu5piv5ZCm5q2j5Zyo6KKr5oyJ5LiLXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpc1ByZXNzZWQ6IGJvb2xlYW47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ga2V5Q29kZSAtIFRoZSBrZXkgY29kZSBvZiB0aGUgY3VycmVudCBrZXkgb3IgdGhlIERPTSBLZXlib2FyZEV2ZW50XHJcbiAgICAgKiBAcGFyYW0gaXNQcmVzc2VkIC0gSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGN1cnJlbnQga2V5IGlzIGJlaW5nIHByZXNzZWRcclxuICAgICAqIEBwYXJhbSBidWJibGVzIC0gSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGV2ZW50IGJ1YmJsZXMgdXAgdGhyb3VnaCB0aGUgaGllcmFyY2h5IG9yIG5vdC5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IgKGtleUNvZGU6IG51bWJlciB8IEtleWJvYXJkRXZlbnQsIGlzUHJlc3NlZDogYm9vbGVhbiwgYnViYmxlcz86IGJvb2xlYW4pIHtcclxuICAgICAgICBzdXBlcihFdmVudC5LRVlCT0FSRCwgYnViYmxlcyk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBrZXlDb2RlID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICB0aGlzLmtleUNvZGUgPSBrZXlDb2RlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMua2V5Q29kZSA9IGtleUNvZGUua2V5Q29kZTtcclxuICAgICAgICAgICAgdGhpcy5yYXdFdmVudCA9IGtleUNvZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaXNQcmVzc2VkID0gaXNQcmVzc2VkO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBUT0RPXHJcbi8vIEB0cy1pZ25vcmVcclxuRXZlbnQuRXZlbnRNb3VzZSA9IEV2ZW50TW91c2U7XHJcblxyXG4vLyBUT0RPXHJcbi8vIEB0cy1pZ25vcmVcclxuRXZlbnQuRXZlbnRUb3VjaCA9IEV2ZW50VG91Y2g7XHJcblxyXG4vLyBUT0RPXHJcbi8vIEB0cy1pZ25vcmVcclxuRXZlbnQuRXZlbnRBY2NlbGVyYXRpb24gPSBFdmVudEFjY2VsZXJhdGlvbjtcclxuXHJcbi8vIFRPRE9cclxuLy8gQHRzLWlnbm9yZVxyXG5FdmVudC5FdmVudEtleWJvYXJkID0gRXZlbnRLZXlib2FyZDtcclxuIl19