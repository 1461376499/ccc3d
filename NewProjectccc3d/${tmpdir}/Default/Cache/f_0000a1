(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./callbacks-invoker.js", "../utils/js.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./callbacks-invoker.js"), require("../utils/js.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.callbacksInvoker, global.js);
    global.eventify = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _callbacksInvoker, _js) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Eventify = Eventify;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  /**
   * @en Generate a new class from the given base class, after polyfill all functionalities in [[IEventified]] as if it's extended from [[EventTarget]]
   * @zh 生成一个类，该类继承自指定的基类，并以和 [[EventTarget]] 等同的方式实现了 [[IEventified]] 的所有接口。
   * @param base The base class
   * @example
   * ```ts
   * class Base { say() { console.log('Hello!'); } }
   * class MyClass extends Eventify(Base) { }
   * function (o: MyClass) {
   *     o.say(); // Ok: Extend from `Base`
   *     o.emit('sing', 'The ghost'); // Ok: `MyClass` implements IEventified
   * }
   * ```
   */
  function Eventify(base) {
    var Eventified = /*#__PURE__*/function (_ref) {
      _inherits(Eventified, _ref);

      function Eventified() {
        var _getPrototypeOf2;

        var _this;

        _classCallCheck(this, Eventified);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Eventified)).call.apply(_getPrototypeOf2, [this].concat(args)));
        _this._callbackTable = (0, _js.createMap)(true);
        return _this;
      }

      _createClass(Eventified, [{
        key: "once",
        value: function once(type, callback, target) {
          return this.on(type, callback, target, true);
        }
      }, {
        key: "targetOff",
        value: function targetOff(typeOrTarget) {
          this.removeAll(typeOrTarget);
        }
      }]);

      return Eventified;
    }(base);

    ; // Mixin with `CallbacksInvokers`'s prototype

    var propertyDescriptors = Object.getOwnPropertyDescriptors(_callbacksInvoker.CallbacksInvoker.prototype);

    for (var propertyName in propertyDescriptors) {
      if (!(propertyName in Eventified.prototype)) {
        Object.defineProperty(Eventified.prototype, propertyName, propertyDescriptors[propertyName]);
      }
    }

    return Eventified;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,