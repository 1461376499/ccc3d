(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../core/assets/mesh.js", "../../core/gfx/buffer.js", "../../core/gfx/define.js", "../../core/math/index.js", "../../core/renderer/scene/model.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../core/assets/mesh.js"), require("../../core/gfx/buffer.js"), require("../../core/gfx/define.js"), require("../../core/math/index.js"), require("../../core/renderer/scene/model.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.mesh, global.buffer, global.define, global.index, global.model);
    global.lineModel = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _mesh, _buffer, _define, _index, _model) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LineModel = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  var _vertex_attrs = [{
    name: _define.GFXAttributeName.ATTR_POSITION,
    format: _define.GFXFormat.RGB32F
  }, // xyz:position
  {
    name: _define.GFXAttributeName.ATTR_TEX_COORD,
    format: _define.GFXFormat.RGBA32F
  }, // x:index y:size zw:texcoord
  {
    name: _define.GFXAttributeName.ATTR_TEX_COORD1,
    format: _define.GFXFormat.RGB32F
  }, // xyz:velocity
  {
    name: _define.GFXAttributeName.ATTR_COLOR,
    format: _define.GFXFormat.RGBA8,
    isNormalized: true
  }];

  var _temp_v1 = new _index.Vec3();

  var _temp_v2 = new _index.Vec3();

  var LineModel = /*#__PURE__*/function (_Model) {
    _inherits(LineModel, _Model);

    function LineModel() {
      var _this;

      _classCallCheck(this, LineModel);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(LineModel).call(this));
      _this._capacity = void 0;
      _this._vertSize = 0;
      _this._vBuffer = null;
      _this._vertAttrsFloatCount = 0;
      _this._vdataF32 = null;
      _this._vdataUint32 = null;
      _this._iaInfo = void 0;
      _this._iaInfoBuffer = void 0;
      _this._subMeshData = null;
      _this._vertCount = 0;
      _this._indexCount = 0;
      _this.type = _model.ModelType.LINE;
      _this._capacity = 100;
      _this._iaInfo = {
        drawInfos: [{
          vertexCount: 0,
          firstVertex: 0,
          indexCount: 0,
          firstIndex: 0,
          vertexOffset: 0,
          instanceCount: 0,
          firstInstance: 0
        }]
      };
      _this._iaInfoBuffer = _this._device.createBuffer({
        usage: _define.GFXBufferUsageBit.INDIRECT,
        memUsage: _define.GFXMemoryUsageBit.HOST | _define.GFXMemoryUsageBit.DEVICE,
        size: _buffer.GFX_DRAW_INFO_SIZE,
        stride: 1
      });
      return _this;
    }

    _createClass(LineModel, [{
      key: "setCapacity",
      value: function setCapacity(capacity) {
        this._capacity = capacity;
        this.createBuffer();
      }
    }, {
      key: "createBuffer",
      value: function createBuffer() {
        this._vertSize = 0;

        var _iterator = _createForOfIteratorHelper(_vertex_attrs),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var a = _step.value;
            a.offset = this._vertSize;
            this._vertSize += _define.GFXFormatInfos[a.format].size;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        this._vertAttrsFloatCount = this._vertSize / 4; // number of float

        this._vBuffer = this._createSubMeshData();
        this._vdataF32 = new Float32Array(this._vBuffer);
        this._vdataUint32 = new Uint32Array(this._vBuffer);
      }
    }, {
      key: "_createSubMeshData",
      value: function _createSubMeshData() {
        if (this._subMeshData) {
          this.destroySubMeshData();
        }

        this._vertCount = 2;
        this._indexCount = 6;

        var vertexBuffer = this._device.createBuffer({
          usage: _define.GFXBufferUsageBit.VERTEX | _define.GFXBufferUsageBit.TRANSFER_DST,
          memUsage: _define.GFXMemoryUsageBit.HOST | _define.GFXMemoryUsageBit.DEVICE,
          size: this._vertSize * this._capacity * this._vertCount,
          stride: this._vertSize
        });

        var vBuffer = new ArrayBuffer(this._vertSize * this._capacity * this._vertCount);
        vertexBuffer.update(vBuffer);
        var indices = new Uint16Array((this._capacity - 1) * this._indexCount);
        var dst = 0;

        for (var i = 0; i < this._capacity - 1; ++i) {
          var baseIdx = 2 * i;
          indices[dst++] = baseIdx;
          indices[dst++] = baseIdx + 1;
          indices[dst++] = baseIdx + 2;
          indices[dst++] = baseIdx + 3;
          indices[dst++] = baseIdx + 2;
          indices[dst++] = baseIdx + 1;
        }

        var indexBuffer = this._device.createBuffer({
          usage: _define.GFXBufferUsageBit.INDEX | _define.GFXBufferUsageBit.TRANSFER_DST,
          memUsage: _define.GFXMemoryUsageBit.HOST | _define.GFXMemoryUsageBit.DEVICE,
          size: (this._capacity - 1) * this._indexCount * Uint16Array.BYTES_PER_ELEMENT,
          stride: Uint16Array.BYTES_PER_ELEMENT
        });

        indexBuffer.update(indices);
        this._iaInfo.drawInfos[0].vertexCount = this._capacity * this._vertCount;
        this._iaInfo.drawInfos[0].indexCount = (this._capacity - 1) * this._indexCount;

        this._iaInfoBuffer.update(this._iaInfo);

        this._subMeshData = new _mesh.RenderingSubMesh([vertexBuffer], _vertex_attrs, _define.GFXPrimitiveMode.TRIANGLE_LIST);
        this._subMeshData.indexBuffer = indexBuffer;
        this._subMeshData.indirectBuffer = this._iaInfoBuffer;
        this.setSubModelMesh(0, this._subMeshData);
        return vBuffer;
      }
    }, {
      key: "addLineVertexData",
      value: function addLineVertexData(positions, width, color) {
        if (positions.length > 1) {
          var offset = 0;

          _index.Vec3.subtract(_temp_v1, positions[1], positions[0]);

          this._vdataF32[offset++] = positions[0].x;
          this._vdataF32[offset++] = positions[0].y;
          this._vdataF32[offset++] = positions[0].z;
          this._vdataF32[offset++] = 0;
          this._vdataF32[offset++] = width.evaluate(0, 1);
          this._vdataF32[offset++] = 0;
          this._vdataF32[offset++] = 0;
          this._vdataF32[offset++] = _temp_v1.x;
          this._vdataF32[offset++] = _temp_v1.y;
          this._vdataF32[offset++] = _temp_v1.z;
          this._vdataUint32[offset++] = color.evaluate(0, 1)._val;
          this._vdataF32[offset++] = positions[0].x;
          this._vdataF32[offset++] = positions[0].y;
          this._vdataF32[offset++] = positions[0].z;
          this._vdataF32[offset++] = 1;
          this._vdataF32[offset++] = width.evaluate(0, 1);
          this._vdataF32[offset++] = 0;
          this._vdataF32[offset++] = 1;
          this._vdataF32[offset++] = _temp_v1.x;
          this._vdataF32[offset++] = _temp_v1.y;
          this._vdataF32[offset++] = _temp_v1.z;
          this._vdataUint32[offset++] = color.evaluate(0, 1)._val;

          for (var i = 1; i < positions.length - 1; i++) {
            _index.Vec3.subtract(_temp_v1, positions[i - 1], positions[i]);

            _index.Vec3.subtract(_temp_v2, positions[i + 1], positions[i]);

            _index.Vec3.subtract(_temp_v2, _temp_v2, _temp_v1);

            var seg = i / positions.length;
            this._vdataF32[offset++] = positions[i].x;
            this._vdataF32[offset++] = positions[i].y;
            this._vdataF32[offset++] = positions[i].z;
            this._vdataF32[offset++] = 0;
            this._vdataF32[offset++] = width.evaluate(seg, 1);
            this._vdataF32[offset++] = seg;
            this._vdataF32[offset++] = 0;
            this._vdataF32[offset++] = _temp_v2.x;
            this._vdataF32[offset++] = _temp_v2.y;
            this._vdataF32[offset++] = _temp_v2.z;
            this._vdataUint32[offset++] = color.evaluate(seg, 1)._val;
            this._vdataF32[offset++] = positions[i].x;
            this._vdataF32[offset++] = positions[i].y;
            this._vdataF32[offset++] = positions[i].z;
            this._vdataF32[offset++] = 1;
            this._vdataF32[offset++] = width.evaluate(seg, 1);
            this._vdataF32[offset++] = seg;
            this._vdataF32[offset++] = 1;
            this._vdataF32[offset++] = _temp_v2.x;
            this._vdataF32[offset++] = _temp_v2.y;
            this._vdataF32[offset++] = _temp_v2.z;
            this._vdataUint32[offset++] = color.evaluate(seg, 1)._val;
          }

          _index.Vec3.subtract(_temp_v1, positions[positions.length - 1], positions[positions.length - 2]);

          this._vdataF32[offset++] = positions[positions.length - 1].x;
          this._vdataF32[offset++] = positions[positions.length - 1].y;
          this._vdataF32[offset++] = positions[positions.length - 1].z;
          this._vdataF32[offset++] = 0;
          this._vdataF32[offset++] = width.evaluate(1, 1);
          this._vdataF32[offset++] = 1;
          this._vdataF32[offset++] = 0;
          this._vdataF32[offset++] = _temp_v1.x;
          this._vdataF32[offset++] = _temp_v1.y;
          this._vdataF32[offset++] = _temp_v1.z;
          this._vdataUint32[offset++] = color.evaluate(1, 1)._val;
          this._vdataF32[offset++] = positions[positions.length - 1].x;
          this._vdataF32[offset++] = positions[positions.length - 1].y;
          this._vdataF32[offset++] = positions[positions.length - 1].z;
          this._vdataF32[offset++] = 1;
          this._vdataF32[offset++] = width.evaluate(1, 1);
          this._vdataF32[offset++] = 1;
          this._vdataF32[offset++] = 1;
          this._vdataF32[offset++] = _temp_v1.x;
          this._vdataF32[offset++] = _temp_v1.y;
          this._vdataF32[offset++] = _temp_v1.z;
          this._vdataUint32[offset++] = color.evaluate(1, 1)._val;
        }

        this.updateIA(Math.max(0, positions.length - 1));
      }
    }, {
      key: "updateIA",
      value: function updateIA(count) {
        var ia = this.getSubModel(0).inputAssembler;
        ia.vertexBuffers[0].update(this._vdataF32);
        ia.indexCount = this._indexCount * count;
        this._iaInfo.drawInfos[0] = ia;

        this._iaInfoBuffer.update(this._iaInfo);
      }
    }, {
      key: "destroySubMeshData",
      value: function destroySubMeshData() {
        if (this._subMeshData) {
          this._subMeshData.destroy();

          this._subMeshData = null;
        }
      }
    }]);

    return LineModel;
  }(_model.Model);

  _exports.LineModel = LineModel;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,