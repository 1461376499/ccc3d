(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../gfx/index.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../gfx/index.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index);
    global.instancedBuffer = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.InstancedBuffer = void 0;

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var INITIAL_CAPACITY = 32;
  var MAX_CAPACITY = 1024;

  var InstancedBuffer = /*#__PURE__*/function () {
    function InstancedBuffer(pass) {
      _classCallCheck(this, InstancedBuffer);

      this.instances = [];
      this.pso = null;
      this.pass = void 0;
      this.pass = pass;
    }

    _createClass(InstancedBuffer, [{
      key: "destroy",
      value: function destroy() {
        for (var i = 0; i < this.instances.length; ++i) {
          var instance = this.instances[i];
          instance.vb.destroy();
          instance.ia.destroy();
        }

        this.instances.length = 0;
      }
    }, {
      key: "merge",
      value: function merge(subModel, attrs, pso) {
        var stride = attrs.buffer.length;

        if (!stride) {
          return;
        } // we assume per-instance attributes are always present


        if (!this.pso) {
          this.pso = pso;
        }

        var sourceIA = subModel.inputAssembler;

        for (var i = 0; i < this.instances.length; ++i) {
          var instance = this.instances[i];

          if (instance.ia.indexBuffer !== sourceIA.indexBuffer || instance.count >= MAX_CAPACITY) {
            continue;
          }

          if (instance.stride !== stride) {
            // console.error(`instanced buffer stride mismatch! ${stride}/${instance.stride}`);
            return;
          }

          if (instance.count >= instance.capacity) {
            // resize buffers
            instance.capacity <<= 1;
            var newSize = instance.stride * instance.capacity;
            var oldData = instance.data;
            instance.data = new Uint8Array(newSize);
            instance.data.set(oldData);
            instance.vb.resize(newSize);
          }

          instance.data.set(attrs.buffer, instance.stride * instance.count++);
          return;
        }

        var device = this.pass.device; // Create a new instance

        var vb = device.createBuffer({
          usage: _index.GFXBufferUsageBit.VERTEX | _index.GFXBufferUsageBit.TRANSFER_DST,
          memUsage: _index.GFXMemoryUsageBit.HOST | _index.GFXMemoryUsageBit.DEVICE,
          size: stride * INITIAL_CAPACITY,
          stride: stride
        });
        var data = new Uint8Array(stride * INITIAL_CAPACITY);
        var vertexBuffers = sourceIA.vertexBuffers.slice();
        var attributes = sourceIA.attributes.slice();
        var indexBuffer = sourceIA.indexBuffer || undefined;

        for (var _i = 0; _i < attrs.list.length; _i++) {
          var attr = attrs.list[_i];
          var newAttr = {
            name: attr.name,
            format: attr.format,
            stream: vertexBuffers.length,
            isInstanced: true
          };

          if (attr.isNormalized !== undefined) {
            newAttr.isNormalized = attr.isNormalized;
          }

          attributes.push(newAttr);
        }

        data.set(attrs.buffer);
        vertexBuffers.push(vb);
        var ia = device.createInputAssembler({
          attributes: attributes,
          vertexBuffers: vertexBuffers,
          indexBuffer: indexBuffer
        });
        this.instances.push({
          count: 1,
          capacity: INITIAL_CAPACITY,
          vb: vb,
          data: data,
          ia: ia,
          stride: stride
        });
      }
    }, {
      key: "uploadBuffers",
      value: function uploadBuffers() {
        for (var i = 0; i < this.instances.length; ++i) {
          var instance = this.instances[i];

          if (!instance.count) {
            continue;
          }

          instance.ia.instanceCount = instance.count;
          instance.vb.update(instance.data);
        }
      }
    }, {
      key: "clear",
      value: function clear() {
        for (var i = 0; i < this.instances.length; ++i) {
          var instance = this.instances[i];
          instance.count = 0;
        }

        this.pso = null;
      }
    }]);

    return InstancedBuffer;
  }();

  _exports.InstancedBuffer = InstancedBuffer;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,