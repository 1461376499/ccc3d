(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../data/object.js", "../utils/js.js", "../default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../data/object.js"), require("../utils/js.js"), require("../default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.object, global.js, global.defaultConstants);
    global.baseNodeDev = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _object, js, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.baseNodePolyfill = baseNodePolyfill;
  js = _interopRequireWildcard(js);

  function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  // @ts-ignore
  var Destroying = _object.CCObject.Flags.Destroying;

  function baseNodePolyfill(BaseNode) {
    if (_defaultConstants.EDITOR) {
      BaseNode.prototype._checkMultipleComp = function (ctor) {
        var existing = this.getComponent(ctor._disallowMultiple);

        if (existing) {
          if (existing.constructor === ctor) {
            cc.errorID(3805, js.getClassName(ctor), this._name);
          } else {
            cc.errorID(3806, js.getClassName(ctor), this._name, js.getClassName(existing));
          }

          return false;
        }

        return true;
      };
      /**
       * This api should only used by undo system
       * @method _addComponentAt
       * @param {Component} comp
       * @param {Number} index
       */


      BaseNode.prototype._addComponentAt = function (comp, index) {
        if (this._objFlags & Destroying) {
          return cc.error('isDestroying');
        }

        if (!(comp instanceof cc.Component)) {
          return cc.errorID(3811);
        }

        if (index > this._components.length) {
          return cc.errorID(3812);
        } // recheck attributes because script may changed


        var ctor = comp.constructor;

        if (ctor._disallowMultiple) {
          if (!this._checkMultipleComp(ctor)) {
            return;
          }
        } // remove dependency and return directly by editor
        // const ReqComp = ctor._requireComponent;
        // if (ReqComp && !this.getComponent(ReqComp)) {
        //     if (index === this._components.length) {
        //         // If comp should be last component, increase the index because required component added
        //         ++index;
        //     }
        //     const depended = this.addComponent(ReqComp);
        //     if (!depended) {
        //         // depend conflicts
        //         return null;
        //     }
        // }


        comp.node = this;

        this._components.splice(index, 0, comp);

        if ((_defaultConstants.EDITOR || _defaultConstants.TEST) && cc.engine && this._id in cc.engine.attachedObjsForEditor) {
          cc.engine.attachedObjsForEditor[comp._id] = comp;
        }

        if (this._activeInHierarchy) {
          cc.director._nodeActivator.activateComp(comp);
        }
      };
      /**
       * @method _getDependComponent
       * @param {Component} depended
       * @return {Component}
       */


      BaseNode.prototype._getDependComponent = function (depended) {
        // tslint:disable-next-line: prefer-for-of
        for (var i = 0; i < this._components.length; i++) {
          var comp = this._components[i];

          if (comp !== depended && comp.isValid && !cc.Object._willDestroy(comp)) {
            var depend = comp.constructor._requireComponent;

            if (depend && depended instanceof depend) {
              return comp;
            }
          }
        }

        return null;
      };

      BaseNode.prototype.onRestore = function () {
        // check activity state
        var shouldActiveNow = this._active && !!(this._parent && this._parent._activeInHierarchy);

        if (this._activeInHierarchy !== shouldActiveNow) {
          cc.director._nodeActivator.activateNode(this, shouldActiveNow);
        }
      };

      BaseNode.prototype._onPreDestroy = function () {
        var destroyByParent = this._onPreDestroyBase();

        if (!destroyByParent) {
          // ensure this node can reattach to scene by undo system
          // (simulate some destruct logic to make undo system work correctly)
          this._parent = null;
        }

        return destroyByParent;
      };

      BaseNode.prototype._onRestoreBase = BaseNode.prototype.onRestore;
    }

    if (_defaultConstants.EDITOR || _defaultConstants.TEST) {
      BaseNode.prototype._registerIfAttached = function (register) {
        var attachedObjsForEditor = cc.engine.attachedObjsForEditor;

        if (register) {
          attachedObjsForEditor[this._id] = this;

          for (var i = this._components.length - 1; i >= 0; i--) {
            var comp = this._components[i];

            if (!comp) {
              this._components.splice(i, 1);

              console.error('component attached to node:' + this.name + ' is invalid for some reason');
              continue;
            }

            attachedObjsForEditor[comp._id] = comp;
          }

          cc.engine.emit('node-attach-to-scene', this);
        } else {
          cc.engine.emit('node-detach-from-scene', this);
          delete attachedObjsForEditor[this._id];

          var _iterator = _createForOfIteratorHelper(this._components),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var _comp = _step.value;
              delete attachedObjsForEditor[_comp._id];
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }

        var children = this._children;

        for (var _i = 0, len = children.length; _i < len; ++_i) {
          var child = children[_i];

          child._registerIfAttached(register);
        }
      };
    }

    if (_defaultConstants.DEV) {
      // promote debug info
      js.get(BaseNode.prototype, ' INFO ', function () {
        var path = ''; // @ts-ignore

        var node = this;

        while (node && !(node instanceof cc.Scene)) {
          if (path) {
            path = node.name + '/' + path;
          } else {
            path = node.name;
          }

          node = node._parent;
        } // @ts-ignore


        return this.name + ', path: ' + path;
      });
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,