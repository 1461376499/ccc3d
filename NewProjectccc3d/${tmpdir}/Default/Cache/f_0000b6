(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../data/class-decorator.js", "../../geometry/index.js", "../../math/index.js", "../../renderer/scene/light.js", "../culling.js", "../define.js", "../render-pipeline.js", "../ui/ui-flow.js", "./forward-flow.js", "../ppfx/tonemap-flow.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../data/class-decorator.js"), require("../../geometry/index.js"), require("../../math/index.js"), require("../../renderer/scene/light.js"), require("../culling.js"), require("../define.js"), require("../render-pipeline.js"), require("../ui/ui-flow.js"), require("./forward-flow.js"), require("../ppfx/tonemap-flow.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.classDecorator, global.index, global.index, global.light, global.culling, global.define, global.renderPipeline, global.uiFlow, global.forwardFlow, global.tonemapFlow);
    global.forwardPipeline = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _classDecorator, _index, _index2, _light2, _culling, _define, _renderPipeline, _uiFlow, _forwardFlow, _tonemapFlow) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ForwardPipeline = void 0;

  var _dec, _class, _class2, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  var _vec4Array = new Float32Array(4);

  var _sphere = _index.sphere.create(0, 0, 0, 1);

  var _tempLightIndex = [];
  var _tempLightDist = [];

  var _tempVec3 = new _index2.Vec3();
  /**
   * @en The forward render pipeline
   * @zh 前向渲染管线。
   */


  var ForwardPipeline = (_dec = (0, _classDecorator.ccclass)('ForwardPipeline'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_RenderPipeline) {
    _inherits(ForwardPipeline, _RenderPipeline);

    _createClass(ForwardPipeline, [{
      key: "lightsUBO",

      /**
       * @en The uniform buffer for lights
       * @zh 光源的 UBO 缓冲。
       */
      get: function get() {
        return this._lightsUBO;
      }
    }]);

    function ForwardPipeline() {
      var _this;

      _classCallCheck(this, ForwardPipeline);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(ForwardPipeline).call(this));
      _this._uboLights = new _define.UBOForwardLight();
      _this._lightsUBO = null;
      _this._validLights = void 0;
      _this._lightIndexOffset = void 0;
      _this._lightIndices = void 0;
      _this._validLights = [];
      _this._lightIndexOffset = [];
      _this._lightIndices = [];
      return _this;
    }

    _createClass(ForwardPipeline, [{
      key: "initialize",
      value: function initialize(info) {
        _get(_getPrototypeOf(ForwardPipeline.prototype), "initialize", this).call(this, info);

        var forwardFlow = new _forwardFlow.ForwardFlow();
        forwardFlow.initialize(_forwardFlow.ForwardFlow.initInfo);

        this._flows.push(forwardFlow);
      }
    }, {
      key: "activate",
      value: function activate(root) {
        if (!_get(_getPrototypeOf(ForwardPipeline.prototype), "activate", this).call(this, root)) {
          return false;
        }

        if (this._usePostProcess) {
          if (this._useSMAA) {
            /*
            this.createFlow(SMAAEdgeFlow, {
                name: PIPELINE_FLOW_SMAA,
                priority: 0,
            });
            */
          }

          var tonemapFlow = new _tonemapFlow.ToneMapFlow();
          tonemapFlow.initialize(_forwardFlow.ForwardFlow.initInfo);

          this._flows.push(tonemapFlow);

          tonemapFlow.activate(this);
        }

        var uiFlow = new _uiFlow.UIFlow();
        uiFlow.initialize(_uiFlow.UIFlow.initInfo);

        this._flows.push(uiFlow);

        uiFlow.activate(this);
        return true;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this._destroy();
      }
    }, {
      key: "rebuild",
      value: function rebuild() {
        _get(_getPrototypeOf(ForwardPipeline.prototype), "rebuild", this).call(this);

        for (var i = 0; i < this._flows.length; i++) {
          this._flows[i].rebuild();
        }
      }
    }, {
      key: "updateUBOs",
      value: function updateUBOs(view) {
        _get(_getPrototypeOf(ForwardPipeline.prototype), "updateUBOs", this).call(this, view);

        var exposure = view.camera.exposure;

        for (var i = 0; i < this._renderObjects.length; i++) {
          this._uboLights.view.fill(0);

          var nextLightIndex = i + 1 < this._renderObjects.length ? this._lightIndexOffset[i + 1] : this._lightIndices.length;

          if (!this._renderObjects[i].model.lightBuffer || this._renderObjects[i].model.isDynamicBatching) {
            continue;
          }

          var sphereNum = 0;
          var spotNum = 0;

          for (var l = this._lightIndexOffset[i]; l < nextLightIndex; l++) {
            var light = this._validLights[this._lightIndices[l]];

            if (light) {
              switch (light.type) {
                case _light2.LightType.SPHERE:
                  if (sphereNum >= _define.UBOForwardLight.MAX_SPHERE_LIGHTS) {
                    continue;
                  }

                  var sphereLit = light;

                  _index2.Vec3.toArray(_vec4Array, sphereLit.position);

                  this._uboLights.view.set(_vec4Array, _define.UBOForwardLight.SPHERE_LIGHT_POS_OFFSET + sphereNum * 4);

                  _vec4Array[0] = sphereLit.size;
                  _vec4Array[1] = sphereLit.range;
                  _vec4Array[2] = 0.0;

                  this._uboLights.view.set(_vec4Array, _define.UBOForwardLight.SPHERE_LIGHT_SIZE_RANGE_OFFSET + sphereNum * 4);

                  _index2.Vec3.toArray(_vec4Array, light.color);

                  if (light.useColorTemperature) {
                    var tempRGB = light.colorTemperatureRGB;
                    _vec4Array[0] *= tempRGB.x;
                    _vec4Array[1] *= tempRGB.y;
                    _vec4Array[2] *= tempRGB.z;
                  }

                  if (this._isHDR) {
                    _vec4Array[3] = sphereLit.luminance * this._fpScale * this._lightMeterScale;
                  } else {
                    _vec4Array[3] = sphereLit.luminance * exposure * this._lightMeterScale;
                  }

                  this._uboLights.view.set(_vec4Array, _define.UBOForwardLight.SPHERE_LIGHT_COLOR_OFFSET + sphereNum * 4);

                  sphereNum++;
                  break;

                case _light2.LightType.SPOT:
                  if (spotNum >= _define.UBOForwardLight.MAX_SPOT_LIGHTS) {
                    continue;
                  }

                  var spotLit = light;

                  _index2.Vec3.toArray(_vec4Array, spotLit.position);

                  _vec4Array[3] = spotLit.size;

                  this._uboLights.view.set(_vec4Array, _define.UBOForwardLight.SPOT_LIGHT_POS_OFFSET + spotNum * 4);

                  _vec4Array[0] = spotLit.size;
                  _vec4Array[1] = spotLit.range;
                  _vec4Array[2] = spotLit.spotAngle;

                  this._uboLights.view.set(_vec4Array, _define.UBOForwardLight.SPOT_LIGHT_SIZE_RANGE_ANGLE_OFFSET + spotNum * 4);

                  _index2.Vec3.toArray(_vec4Array, spotLit.direction);

                  this._uboLights.view.set(_vec4Array, _define.UBOForwardLight.SPOT_LIGHT_DIR_OFFSET + spotNum * 4);

                  _index2.Vec3.toArray(_vec4Array, light.color);

                  if (light.useColorTemperature) {
                    var _tempRGB = light.colorTemperatureRGB;
                    _vec4Array[0] *= _tempRGB.x;
                    _vec4Array[1] *= _tempRGB.y;
                    _vec4Array[2] *= _tempRGB.z;
                  }

                  if (this._isHDR) {
                    _vec4Array[3] = spotLit.luminance * this._fpScale * this._lightMeterScale;
                  } else {
                    _vec4Array[3] = spotLit.luminance * exposure * this._lightMeterScale;
                  }

                  this._uboLights.view.set(_vec4Array, _define.UBOForwardLight.SPOT_LIGHT_COLOR_OFFSET + spotNum * 4);

                  spotNum++;
                  break;
              }
            }
          }

          this._renderObjects[i].model.lightBuffer.update(this._uboLights.view);
        }
      }
    }, {
      key: "sceneCulling",
      value: function sceneCulling(view) {
        _get(_getPrototypeOf(ForwardPipeline.prototype), "sceneCulling", this).call(this, view);

        this._validLights.length = 0;
        var sphereLights = view.camera.scene.sphereLights;

        for (var i = 0; i < sphereLights.length; i++) {
          var light = sphereLights[i];
          light.update();

          _index.sphere.set(_sphere, light.position.x, light.position.y, light.position.z, light.range);

          if (_index.intersect.sphere_frustum(_sphere, view.camera.frustum)) {
            this._validLights.push(light);
          }
        }

        var spotLights = view.camera.scene.spotLights;

        for (var _i = 0; _i < spotLights.length; _i++) {
          var _light = spotLights[_i];

          _light.update();

          _index.sphere.set(_sphere, _light.position.x, _light.position.y, _light.position.z, _light.range);

          if (_index.intersect.sphere_frustum(_sphere, view.camera.frustum)) {
            this._validLights.push(_light);
          }
        }

        this._lightIndexOffset.length = this._lightIndices.length = 0;

        if (this._validLights.length) {
          for (var _i2 = 0; _i2 < this._renderObjects.length; _i2++) {
            this._lightIndexOffset[_i2] = this._lightIndices.length;

            if (this._renderObjects[_i2].model.lightBuffer) {
              this.cullLightPerModel(this._renderObjects[_i2].model);
            }
          }
        }
      } // Cull light for the model

    }, {
      key: "cullLightPerModel",
      value: function cullLightPerModel(model) {
        _tempLightIndex.length = 0;

        for (var i = 0; i < this._validLights.length; i++) {
          var isCulled = false;

          switch (this._validLights[i].type) {
            case _light2.LightType.DIRECTIONAL:
              isCulled = (0, _culling.cullDirectionalLight)(this._validLights[i], model);
              break;

            case _light2.LightType.SPHERE:
              isCulled = (0, _culling.cullSphereLight)(this._validLights[i], model);
              break;

            case _light2.LightType.SPOT:
              isCulled = (0, _culling.cullSpotLight)(this._validLights[i], model);
              break;
          }

          if (!isCulled) {
            _tempLightIndex.push(i);

            if (this._validLights[i].type === _light2.LightType.DIRECTIONAL) {
              _tempLightDist[i] = 0;
            } else {
              _tempLightDist[i] = _index2.Vec3.distance(this._validLights[i].position, model.node.getWorldPosition(_tempVec3));
            }
          }
        }

        _tempLightIndex.sort(this.sortLight);

        Array.prototype.push.apply(this._lightIndices, _tempLightIndex);
      }
    }, {
      key: "sortLight",
      value: function sortLight(a, b) {
        return _tempLightDist[a] - _tempLightDist[b];
      }
    }]);

    return ForwardPipeline;
  }(_renderPipeline.RenderPipeline), _class2.initInfo = {}, _temp)) || _class);
  _exports.ForwardPipeline = ForwardPipeline;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,