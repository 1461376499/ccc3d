(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../assets/skeleton.js", "../../data/class-decorator.js", "../../renderer/models/baked-skinning-model.js", "../../renderer/models/skinning-model.js", "../../scene-graph/node.js", "./model-component.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../assets/skeleton.js"), require("../../data/class-decorator.js"), require("../../renderer/models/baked-skinning-model.js"), require("../../renderer/models/skinning-model.js"), require("../../scene-graph/node.js"), require("./model-component.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.skeleton, global.classDecorator, global.bakedSkinningModel, global.skinningModel, global.node, global.modelComponent);
    global.skinningModelComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _skeleton, _classDecorator, _bakedSkinningModel, _skinningModel, _node, _modelComponent) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SkinningModelComponent = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  /**
   * @en The Skinning Model Component.
   * @zh 蒙皮模型组件。
   */
  var SkinningModelComponent = (_dec = (0, _classDecorator.ccclass)('cc.SkinningModelComponent'), _dec2 = (0, _classDecorator.help)('i18n:cc.SkinningModelComponent'), _dec3 = (0, _classDecorator.executionOrder)(100), _dec4 = (0, _classDecorator.menu)('Components/SkinningModel'), _dec5 = (0, _classDecorator.property)(_skeleton.Skeleton), _dec6 = (0, _classDecorator.property)(_node.Node), _dec7 = (0, _classDecorator.property)({
    type: _skeleton.Skeleton
  }), _dec8 = (0, _classDecorator.property)({
    type: _node.Node,
    tooltip: 'i18n:model.skinning_root'
  }), _dec(_class = _dec2(_class = _dec3(_class = (0, _classDecorator.executeInEditMode)(_class = _dec4(_class = (_class2 = (_temp = /*#__PURE__*/function (_ModelComponent) {
    _inherits(SkinningModelComponent, _ModelComponent);

    _createClass(SkinningModelComponent, [{
      key: "skeleton",

      /**
       * @en The skeleton asset.
       * @zh 骨骼资源。
       */
      get: function get() {
        return this._skeleton;
      },
      set: function set(val) {
        if (val === this._skeleton) {
          return;
        }

        this._skeleton = val;

        this._update();
      }
      /**
       * @en The skinning root. (The node where the controlling AnimationComponent is located)
       * 骨骼根节点的引用，对应控制此模型的动画组件所在节点。
       */

    }, {
      key: "skinningRoot",
      get: function get() {
        return this._skinningRoot;
      },
      set: function set(value) {
        if (value === this._skinningRoot) {
          return;
        }

        this._skinningRoot = value;

        this._updateModelType();

        this._update();
      }
    }, {
      key: "model",
      get: function get() {
        return this._model;
      }
    }]);

    function SkinningModelComponent() {
      var _this;

      _classCallCheck(this, SkinningModelComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(SkinningModelComponent).call(this));

      _initializerDefineProperty(_this, "_skeleton", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_skinningRoot", _descriptor2, _assertThisInitialized(_this));

      _this._clip = null;
      _this._modelType = _bakedSkinningModel.BakedSkinningModel;
      return _this;
    }

    _createClass(SkinningModelComponent, [{
      key: "__preload",
      value: function __preload() {
        this._updateModelType();
      }
    }, {
      key: "uploadAnimation",
      value: function uploadAnimation(clip) {
        this._clip = clip;

        if (this.model && this.model.uploadAnimation) {
          this.model.uploadAnimation(clip);
        }
      }
    }, {
      key: "setUseBakedAnimation",
      value: function setUseBakedAnimation() {
        var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        var modelType = val ? _bakedSkinningModel.BakedSkinningModel : _skinningModel.SkinningModel;

        if (this._modelType === modelType) {
          return;
        }

        this._modelType = modelType;
        var modelCreated = !!this._model;

        if (modelCreated) {
          cc.director.root.destroyModel(this._model);
          this._model = null;
          this._models.length = 0;
        }

        var meshCount = this._mesh ? this._mesh.subMeshCount : 0; // have to instantiate materials with multiple submodel references

        if (this._modelType === _skinningModel.SkinningModel) {
          var last = null;

          for (var i = 0; i < meshCount; ++i) {
            var cur = this.getRenderMaterial(i);

            if (cur === last) {
              this.getMaterialInstance(i);
            } else {
              last = cur;
            }
          }
        } else {
          // or assign the original material back if instancing is enabled
          for (var _i = 0; _i < meshCount; ++_i) {
            var _cur = this.getRenderMaterial(_i);

            if (_cur && _cur.parent && _cur.parent.passes[0].instancedBuffer) {
              this._materialInstances[_i].destroy();

              this._materialInstances[_i] = null;
            }
          }
        }

        if (modelCreated) {
          this._updateModels();

          this._updateCastShadow();

          if (this.enabledInHierarchy) {
            this._attachToScene();
          }
        }
      }
    }, {
      key: "setMaterial",
      value: function setMaterial(material, index) {
        _get(_getPrototypeOf(SkinningModelComponent.prototype), "setMaterial", this).call(this, material, index);

        if (this._modelType === _skinningModel.SkinningModel) {
          this.getMaterialInstance(index);
        }
      }
    }, {
      key: "_updateModelParams",
      value: function _updateModelParams() {
        this._update(); // should bind skeleton before super create pso


        _get(_getPrototypeOf(SkinningModelComponent.prototype), "_updateModelParams", this).call(this);
      }
    }, {
      key: "_updateModelType",
      value: function _updateModelType() {
        if (!this._skinningRoot) {
          return;
        }

        var comp = this._skinningRoot.getComponent('cc.SkeletalAnimationComponent');

        if (comp) {
          this.setUseBakedAnimation(comp.useBakedAnimation);
        }
      }
    }, {
      key: "_update",
      value: function _update() {
        if (this.model) {
          this.model.bindSkeleton(this._skeleton, this._skinningRoot, this._mesh);

          if (this.model.uploadAnimation) {
            this.model.uploadAnimation(this._clip);
          }
        }
      }
    }]);

    return SkinningModelComponent;
  }(_modelComponent.ModelComponent), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_skeleton", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_skinningRoot", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "skeleton", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "skeleton"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "skinningRoot", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "skinningRoot"), _class2.prototype)), _class2)) || _class) || _class) || _class) || _class) || _class);
  _exports.SkinningModelComponent = SkinningModelComponent;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkY6L2plbmtpbnMvd29ya3NwYWNlL0NyZWF0b3JfM0QvZWRpdG9yLTNkL3Jlc291cmNlcy8zZC9lbmdpbmUvY29jb3MvY29yZS8zZC9mcmFtZXdvcmsvc2tpbm5pbmctbW9kZWwtY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbIlNraW5uaW5nTW9kZWxDb21wb25lbnQiLCJTa2VsZXRvbiIsIk5vZGUiLCJ0eXBlIiwidG9vbHRpcCIsImV4ZWN1dGVJbkVkaXRNb2RlIiwiX3NrZWxldG9uIiwidmFsIiwiX3VwZGF0ZSIsIl9za2lubmluZ1Jvb3QiLCJ2YWx1ZSIsIl91cGRhdGVNb2RlbFR5cGUiLCJfbW9kZWwiLCJfY2xpcCIsIl9tb2RlbFR5cGUiLCJCYWtlZFNraW5uaW5nTW9kZWwiLCJjbGlwIiwibW9kZWwiLCJ1cGxvYWRBbmltYXRpb24iLCJtb2RlbFR5cGUiLCJTa2lubmluZ01vZGVsIiwibW9kZWxDcmVhdGVkIiwiY2MiLCJkaXJlY3RvciIsInJvb3QiLCJkZXN0cm95TW9kZWwiLCJfbW9kZWxzIiwibGVuZ3RoIiwibWVzaENvdW50IiwiX21lc2giLCJzdWJNZXNoQ291bnQiLCJsYXN0IiwiaSIsImN1ciIsImdldFJlbmRlck1hdGVyaWFsIiwiZ2V0TWF0ZXJpYWxJbnN0YW5jZSIsInBhcmVudCIsInBhc3NlcyIsImluc3RhbmNlZEJ1ZmZlciIsIl9tYXRlcmlhbEluc3RhbmNlcyIsImRlc3Ryb3kiLCJfdXBkYXRlTW9kZWxzIiwiX3VwZGF0ZUNhc3RTaGFkb3ciLCJlbmFibGVkSW5IaWVyYXJjaHkiLCJfYXR0YWNoVG9TY2VuZSIsIm1hdGVyaWFsIiwiaW5kZXgiLCJjb21wIiwiZ2V0Q29tcG9uZW50Iiwic2V0VXNlQmFrZWRBbmltYXRpb24iLCJ1c2VCYWtlZEFuaW1hdGlvbiIsImJpbmRTa2VsZXRvbiIsIk1vZGVsQ29tcG9uZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVDQTs7OztNQVNhQSxzQixXQUxaLDZCQUFRLDJCQUFSLEMsVUFDQSwwQkFBSyxnQ0FBTCxDLFVBQ0Esb0NBQWUsR0FBZixDLFVBRUEsMEJBQUssMEJBQUwsQyxVQUdJLDhCQUFTQyxrQkFBVCxDLFVBR0EsOEJBQVNDLFVBQVQsQyxVQVNBLDhCQUFTO0FBQ05DLElBQUFBLElBQUksRUFBRUY7QUFEQSxHQUFULEMsVUFpQkEsOEJBQVM7QUFDTkUsSUFBQUEsSUFBSSxFQUFFRCxVQURBO0FBRU5FLElBQUFBLE9BQU8sRUFBRTtBQUZILEdBQVQsQyxrREFqQ0pDLGlDOzs7Ozs7QUFZRzs7OzswQkFPZ0I7QUFDWixlQUFPLEtBQUtDLFNBQVo7QUFDSCxPO3dCQUVhQyxHLEVBQUs7QUFDZixZQUFJQSxHQUFHLEtBQUssS0FBS0QsU0FBakIsRUFBNEI7QUFBRTtBQUFTOztBQUN2QyxhQUFLQSxTQUFMLEdBQWlCQyxHQUFqQjs7QUFDQSxhQUFLQyxPQUFMO0FBQ0g7QUFFRDs7Ozs7OzswQkFRb0I7QUFDaEIsZUFBTyxLQUFLQyxhQUFaO0FBQ0gsTzt3QkFFaUJDLEssRUFBTztBQUNyQixZQUFJQSxLQUFLLEtBQUssS0FBS0QsYUFBbkIsRUFBa0M7QUFBRTtBQUFTOztBQUM3QyxhQUFLQSxhQUFMLEdBQXFCQyxLQUFyQjs7QUFDQSxhQUFLQyxnQkFBTDs7QUFDQSxhQUFLSCxPQUFMO0FBQ0g7OzswQkFFWTtBQUNULGVBQU8sS0FBS0ksTUFBWjtBQUNIOzs7QUFFRCxzQ0FBZTtBQUFBOztBQUFBOztBQUNYOztBQURXOztBQUFBOztBQUFBLFlBMUNMQyxLQTBDSyxHQTFDeUIsSUEwQ3pCO0FBRVgsWUFBS0MsVUFBTCxHQUFrQkMsc0NBQWxCO0FBRlc7QUFHZDs7OztrQ0FFbUI7QUFDaEIsYUFBS0osZ0JBQUw7QUFDSDs7O3NDQUV1QkssSSxFQUE0QjtBQUNoRCxhQUFLSCxLQUFMLEdBQWFHLElBQWI7O0FBQ0EsWUFBSSxLQUFLQyxLQUFMLElBQWMsS0FBS0EsS0FBTCxDQUFXQyxlQUE3QixFQUE4QztBQUMxQyxlQUFLRCxLQUFMLENBQVdDLGVBQVgsQ0FBMkJGLElBQTNCO0FBQ0g7QUFDSjs7OzZDQUV3QztBQUFBLFlBQVpULEdBQVksdUVBQU4sSUFBTTtBQUNyQyxZQUFNWSxTQUFTLEdBQUdaLEdBQUcsR0FBR1Esc0NBQUgsR0FBd0JLLDRCQUE3Qzs7QUFDQSxZQUFJLEtBQUtOLFVBQUwsS0FBb0JLLFNBQXhCLEVBQW1DO0FBQUU7QUFBUzs7QUFDOUMsYUFBS0wsVUFBTCxHQUFrQkssU0FBbEI7QUFDQSxZQUFNRSxZQUFZLEdBQUcsQ0FBQyxDQUFDLEtBQUtULE1BQTVCOztBQUNBLFlBQUlTLFlBQUosRUFBa0I7QUFDZEMsVUFBQUEsRUFBRSxDQUFDQyxRQUFILENBQVlDLElBQVosQ0FBaUJDLFlBQWpCLENBQThCLEtBQUtiLE1BQW5DO0FBQ0EsZUFBS0EsTUFBTCxHQUFjLElBQWQ7QUFDQSxlQUFLYyxPQUFMLENBQWFDLE1BQWIsR0FBc0IsQ0FBdEI7QUFDSDs7QUFDRCxZQUFNQyxTQUFTLEdBQUcsS0FBS0MsS0FBTCxHQUFhLEtBQUtBLEtBQUwsQ0FBV0MsWUFBeEIsR0FBdUMsQ0FBekQsQ0FWcUMsQ0FXckM7O0FBQ0EsWUFBSSxLQUFLaEIsVUFBTCxLQUFvQk0sNEJBQXhCLEVBQXVDO0FBQ25DLGNBQUlXLElBQXFCLEdBQUcsSUFBNUI7O0FBQ0EsZUFBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHSixTQUFwQixFQUErQixFQUFFSSxDQUFqQyxFQUFvQztBQUNoQyxnQkFBTUMsR0FBRyxHQUFHLEtBQUtDLGlCQUFMLENBQXVCRixDQUF2QixDQUFaOztBQUNBLGdCQUFJQyxHQUFHLEtBQUtGLElBQVosRUFBa0I7QUFDZCxtQkFBS0ksbUJBQUwsQ0FBeUJILENBQXpCO0FBQ0gsYUFGRCxNQUVPO0FBQUVELGNBQUFBLElBQUksR0FBR0UsR0FBUDtBQUFhO0FBQ3pCO0FBQ0osU0FSRCxNQVFPO0FBQUU7QUFDTCxlQUFLLElBQUlELEVBQUMsR0FBRyxDQUFiLEVBQWdCQSxFQUFDLEdBQUdKLFNBQXBCLEVBQStCLEVBQUVJLEVBQWpDLEVBQW9DO0FBQ2hDLGdCQUFNQyxJQUFHLEdBQUcsS0FBS0MsaUJBQUwsQ0FBdUJGLEVBQXZCLENBQVo7O0FBQ0EsZ0JBQUlDLElBQUcsSUFBSUEsSUFBRyxDQUFDRyxNQUFYLElBQXFCSCxJQUFHLENBQUNHLE1BQUosQ0FBV0MsTUFBWCxDQUFrQixDQUFsQixFQUFxQkMsZUFBOUMsRUFBK0Q7QUFDM0QsbUJBQUtDLGtCQUFMLENBQXdCUCxFQUF4QixFQUE0QlEsT0FBNUI7O0FBQ0EsbUJBQUtELGtCQUFMLENBQXdCUCxFQUF4QixJQUE2QixJQUE3QjtBQUNIO0FBQ0o7QUFDSjs7QUFDRCxZQUFJWCxZQUFKLEVBQWtCO0FBQ2QsZUFBS29CLGFBQUw7O0FBQ0EsZUFBS0MsaUJBQUw7O0FBQ0EsY0FBSSxLQUFLQyxrQkFBVCxFQUE2QjtBQUN6QixpQkFBS0MsY0FBTDtBQUNIO0FBQ0o7QUFDSjs7O2tDQUVtQkMsUSxFQUEyQkMsSyxFQUFlO0FBQzFELGdHQUFrQkQsUUFBbEIsRUFBNEJDLEtBQTVCOztBQUNBLFlBQUksS0FBS2hDLFVBQUwsS0FBb0JNLDRCQUF4QixFQUF1QztBQUNuQyxlQUFLZSxtQkFBTCxDQUF5QlcsS0FBekI7QUFDSDtBQUNKOzs7MkNBRStCO0FBQzVCLGFBQUt0QyxPQUFMLEdBRDRCLENBQ1o7OztBQUNoQjtBQUNIOzs7eUNBRTJCO0FBQ3hCLFlBQUksQ0FBQyxLQUFLQyxhQUFWLEVBQXlCO0FBQUU7QUFBUzs7QUFDcEMsWUFBTXNDLElBQUksR0FBRyxLQUFLdEMsYUFBTCxDQUFtQnVDLFlBQW5CLENBQWdDLCtCQUFoQyxDQUFiOztBQUNBLFlBQUlELElBQUosRUFBVTtBQUFFLGVBQUtFLG9CQUFMLENBQTBCRixJQUFJLENBQUNHLGlCQUEvQjtBQUFvRDtBQUNuRTs7O2dDQUVrQjtBQUNmLFlBQUksS0FBS2pDLEtBQVQsRUFBZ0I7QUFDWixlQUFLQSxLQUFMLENBQVdrQyxZQUFYLENBQXdCLEtBQUs3QyxTQUE3QixFQUF3QyxLQUFLRyxhQUE3QyxFQUE0RCxLQUFLb0IsS0FBakU7O0FBQ0EsY0FBSSxLQUFLWixLQUFMLENBQVdDLGVBQWYsRUFBZ0M7QUFBRSxpQkFBS0QsS0FBTCxDQUFXQyxlQUFYLENBQTJCLEtBQUtMLEtBQWhDO0FBQXlDO0FBQzlFO0FBQ0o7Ozs7SUEvSHVDdUMsOEI7Ozs7O2FBR0QsSTs7Ozs7OzthQUdBLEkiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gQ29weXJpZ2h0IChjKSAyMDEzLTIwMTYgQ2h1a29uZyBUZWNobm9sb2dpZXMgSW5jLlxyXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXHJcblxyXG4gaHR0cDovL3d3dy5jb2NvczJkLXgub3JnXHJcblxyXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxyXG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxyXG4gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xyXG4gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxyXG4gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXHJcbiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG5cclxuIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXHJcbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuXHJcbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcclxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxyXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxyXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcclxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cclxuIFRIRSBTT0ZUV0FSRS5cclxuKi9cclxuXHJcbi8qKlxyXG4gKiBAY2F0ZWdvcnkgbW9kZWxcclxuICovXHJcblxyXG5pbXBvcnQgeyBBbmltYXRpb25DbGlwIH0gZnJvbSAnLi4vLi4vYW5pbWF0aW9uL2FuaW1hdGlvbi1jbGlwJztcclxuaW1wb3J0IHsgTWF0ZXJpYWwgfSBmcm9tICcuLi8uLi9hc3NldHMnO1xyXG5pbXBvcnQgeyBTa2VsZXRvbiB9IGZyb20gJy4uLy4uL2Fzc2V0cy9za2VsZXRvbic7XHJcbmltcG9ydCB7IGNjY2xhc3MsIGV4ZWN1dGVJbkVkaXRNb2RlLCBleGVjdXRpb25PcmRlciwgaGVscCwgbWVudSwgcHJvcGVydHkgfSBmcm9tICcuLi8uLi9kYXRhL2NsYXNzLWRlY29yYXRvcic7XHJcbmltcG9ydCB7IEJha2VkU2tpbm5pbmdNb2RlbCB9IGZyb20gJy4uLy4uL3JlbmRlcmVyL21vZGVscy9iYWtlZC1za2lubmluZy1tb2RlbCc7XHJcbmltcG9ydCB7IFNraW5uaW5nTW9kZWwgfSBmcm9tICcuLi8uLi9yZW5kZXJlci9tb2RlbHMvc2tpbm5pbmctbW9kZWwnO1xyXG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi4vLi4vc2NlbmUtZ3JhcGgvbm9kZSc7XHJcbmltcG9ydCB7IE1vZGVsQ29tcG9uZW50IH0gZnJvbSAnLi9tb2RlbC1jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBTa2VsZXRhbEFuaW1hdGlvbkNvbXBvbmVudCB9IGZyb20gJy4uLy4uL2FuaW1hdGlvbi9za2VsZXRhbC1hbmltYXRpb24tY29tcG9uZW50JztcclxuXHJcbi8qKlxyXG4gKiBAZW4gVGhlIFNraW5uaW5nIE1vZGVsIENvbXBvbmVudC5cclxuICogQHpoIOiSmeearuaooeWei+e7hOS7tuOAglxyXG4gKi9cclxuQGNjY2xhc3MoJ2NjLlNraW5uaW5nTW9kZWxDb21wb25lbnQnKVxyXG5AaGVscCgnaTE4bjpjYy5Ta2lubmluZ01vZGVsQ29tcG9uZW50JylcclxuQGV4ZWN1dGlvbk9yZGVyKDEwMClcclxuQGV4ZWN1dGVJbkVkaXRNb2RlXHJcbkBtZW51KCdDb21wb25lbnRzL1NraW5uaW5nTW9kZWwnKVxyXG5leHBvcnQgY2xhc3MgU2tpbm5pbmdNb2RlbENvbXBvbmVudCBleHRlbmRzIE1vZGVsQ29tcG9uZW50IHtcclxuXHJcbiAgICBAcHJvcGVydHkoU2tlbGV0b24pXHJcbiAgICBwcm90ZWN0ZWQgX3NrZWxldG9uOiBTa2VsZXRvbiB8IG51bGwgPSBudWxsO1xyXG5cclxuICAgIEBwcm9wZXJ0eShOb2RlKVxyXG4gICAgcHJvdGVjdGVkIF9za2lubmluZ1Jvb3Q6IE5vZGUgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgICBwcm90ZWN0ZWQgX2NsaXA6IEFuaW1hdGlvbkNsaXAgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlbiBUaGUgc2tlbGV0b24gYXNzZXQuXHJcbiAgICAgKiBAemgg6aqo6aq86LWE5rqQ44CCXHJcbiAgICAgKi9cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdHlwZTogU2tlbGV0b24sXHJcbiAgICB9KVxyXG4gICAgZ2V0IHNrZWxldG9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc2tlbGV0b247XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHNrZWxldG9uICh2YWwpIHtcclxuICAgICAgICBpZiAodmFsID09PSB0aGlzLl9za2VsZXRvbikgeyByZXR1cm47IH1cclxuICAgICAgICB0aGlzLl9za2VsZXRvbiA9IHZhbDtcclxuICAgICAgICB0aGlzLl91cGRhdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlbiBUaGUgc2tpbm5pbmcgcm9vdC4gKFRoZSBub2RlIHdoZXJlIHRoZSBjb250cm9sbGluZyBBbmltYXRpb25Db21wb25lbnQgaXMgbG9jYXRlZClcclxuICAgICAqIOmqqOmqvOagueiKgueCueeahOW8leeUqO+8jOWvueW6lOaOp+WItuatpOaooeWei+eahOWKqOeUu+e7hOS7tuaJgOWcqOiKgueCueOAglxyXG4gICAgICovXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHR5cGU6IE5vZGUsXHJcbiAgICAgICAgdG9vbHRpcDogJ2kxOG46bW9kZWwuc2tpbm5pbmdfcm9vdCcsXHJcbiAgICB9KVxyXG4gICAgZ2V0IHNraW5uaW5nUm9vdCAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NraW5uaW5nUm9vdDtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgc2tpbm5pbmdSb290ICh2YWx1ZSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdGhpcy5fc2tpbm5pbmdSb290KSB7IHJldHVybjsgfVxyXG4gICAgICAgIHRoaXMuX3NraW5uaW5nUm9vdCA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuX3VwZGF0ZU1vZGVsVHlwZSgpO1xyXG4gICAgICAgIHRoaXMuX3VwZGF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBtb2RlbCAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21vZGVsIGFzIFNraW5uaW5nTW9kZWwgfCBCYWtlZFNraW5uaW5nTW9kZWwgfCBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuX21vZGVsVHlwZSA9IEJha2VkU2tpbm5pbmdNb2RlbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgX19wcmVsb2FkICgpIHtcclxuICAgICAgICB0aGlzLl91cGRhdGVNb2RlbFR5cGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBsb2FkQW5pbWF0aW9uIChjbGlwOiBBbmltYXRpb25DbGlwIHwgbnVsbCkge1xyXG4gICAgICAgIHRoaXMuX2NsaXAgPSBjbGlwO1xyXG4gICAgICAgIGlmICh0aGlzLm1vZGVsICYmIHRoaXMubW9kZWwudXBsb2FkQW5pbWF0aW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMubW9kZWwudXBsb2FkQW5pbWF0aW9uKGNsaXApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0VXNlQmFrZWRBbmltYXRpb24gKHZhbCA9IHRydWUpIHtcclxuICAgICAgICBjb25zdCBtb2RlbFR5cGUgPSB2YWwgPyBCYWtlZFNraW5uaW5nTW9kZWwgOiBTa2lubmluZ01vZGVsO1xyXG4gICAgICAgIGlmICh0aGlzLl9tb2RlbFR5cGUgPT09IG1vZGVsVHlwZSkgeyByZXR1cm47IH1cclxuICAgICAgICB0aGlzLl9tb2RlbFR5cGUgPSBtb2RlbFR5cGU7XHJcbiAgICAgICAgY29uc3QgbW9kZWxDcmVhdGVkID0gISF0aGlzLl9tb2RlbDtcclxuICAgICAgICBpZiAobW9kZWxDcmVhdGVkKSB7XHJcbiAgICAgICAgICAgIGNjLmRpcmVjdG9yLnJvb3QuZGVzdHJveU1vZGVsKHRoaXMuX21vZGVsKTtcclxuICAgICAgICAgICAgdGhpcy5fbW9kZWwgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9tb2RlbHMubGVuZ3RoID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbWVzaENvdW50ID0gdGhpcy5fbWVzaCA/IHRoaXMuX21lc2guc3ViTWVzaENvdW50IDogMDtcclxuICAgICAgICAvLyBoYXZlIHRvIGluc3RhbnRpYXRlIG1hdGVyaWFscyB3aXRoIG11bHRpcGxlIHN1Ym1vZGVsIHJlZmVyZW5jZXNcclxuICAgICAgICBpZiAodGhpcy5fbW9kZWxUeXBlID09PSBTa2lubmluZ01vZGVsKSB7XHJcbiAgICAgICAgICAgIGxldCBsYXN0OiBNYXRlcmlhbCB8IG51bGwgPSBudWxsO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lc2hDb3VudDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXIgPSB0aGlzLmdldFJlbmRlck1hdGVyaWFsKGkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1ciA9PT0gbGFzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0TWF0ZXJpYWxJbnN0YW5jZShpKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7IGxhc3QgPSBjdXI7IH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7IC8vIG9yIGFzc2lnbiB0aGUgb3JpZ2luYWwgbWF0ZXJpYWwgYmFjayBpZiBpbnN0YW5jaW5nIGlzIGVuYWJsZWRcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZXNoQ291bnQ7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY3VyID0gdGhpcy5nZXRSZW5kZXJNYXRlcmlhbChpKTtcclxuICAgICAgICAgICAgICAgIGlmIChjdXIgJiYgY3VyLnBhcmVudCAmJiBjdXIucGFyZW50LnBhc3Nlc1swXS5pbnN0YW5jZWRCdWZmZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tYXRlcmlhbEluc3RhbmNlc1tpXSEuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21hdGVyaWFsSW5zdGFuY2VzW2ldID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobW9kZWxDcmVhdGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZU1vZGVscygpO1xyXG4gICAgICAgICAgICB0aGlzLl91cGRhdGVDYXN0U2hhZG93KCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVuYWJsZWRJbkhpZXJhcmNoeSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYXR0YWNoVG9TY2VuZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRNYXRlcmlhbCAobWF0ZXJpYWw6IE1hdGVyaWFsIHwgbnVsbCwgaW5kZXg6IG51bWJlcikge1xyXG4gICAgICAgIHN1cGVyLnNldE1hdGVyaWFsKG1hdGVyaWFsLCBpbmRleCk7XHJcbiAgICAgICAgaWYgKHRoaXMuX21vZGVsVHlwZSA9PT0gU2tpbm5pbmdNb2RlbCkge1xyXG4gICAgICAgICAgICB0aGlzLmdldE1hdGVyaWFsSW5zdGFuY2UoaW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgX3VwZGF0ZU1vZGVsUGFyYW1zICgpIHtcclxuICAgICAgICB0aGlzLl91cGRhdGUoKTsgLy8gc2hvdWxkIGJpbmQgc2tlbGV0b24gYmVmb3JlIHN1cGVyIGNyZWF0ZSBwc29cclxuICAgICAgICBzdXBlci5fdXBkYXRlTW9kZWxQYXJhbXMoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF91cGRhdGVNb2RlbFR5cGUgKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5fc2tpbm5pbmdSb290KSB7IHJldHVybjsgfVxyXG4gICAgICAgIGNvbnN0IGNvbXAgPSB0aGlzLl9za2lubmluZ1Jvb3QuZ2V0Q29tcG9uZW50KCdjYy5Ta2VsZXRhbEFuaW1hdGlvbkNvbXBvbmVudCcpIGFzIFNrZWxldGFsQW5pbWF0aW9uQ29tcG9uZW50O1xyXG4gICAgICAgIGlmIChjb21wKSB7IHRoaXMuc2V0VXNlQmFrZWRBbmltYXRpb24oY29tcC51c2VCYWtlZEFuaW1hdGlvbik7IH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF91cGRhdGUgKCkge1xyXG4gICAgICAgIGlmICh0aGlzLm1vZGVsKSB7XHJcbiAgICAgICAgICAgIHRoaXMubW9kZWwuYmluZFNrZWxldG9uKHRoaXMuX3NrZWxldG9uLCB0aGlzLl9za2lubmluZ1Jvb3QsIHRoaXMuX21lc2gpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tb2RlbC51cGxvYWRBbmltYXRpb24pIHsgdGhpcy5tb2RlbC51cGxvYWRBbmltYXRpb24odGhpcy5fY2xpcCk7IH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19