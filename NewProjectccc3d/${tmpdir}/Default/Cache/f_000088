(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../core/assets/mesh.js", "../../core/data/class-decorator.js", "../../core/director.js", "../../core/gfx/buffer.js", "../../core/gfx/define.js", "../../core/math/index.js", "../../core/memop/index.js", "../../core/renderer/index.js", "../animator/curve-range.js", "../animator/gradient-range.js", "../enum.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../core/assets/mesh.js"), require("../../core/data/class-decorator.js"), require("../../core/director.js"), require("../../core/gfx/buffer.js"), require("../../core/gfx/define.js"), require("../../core/math/index.js"), require("../../core/memop/index.js"), require("../../core/renderer/index.js"), require("../animator/curve-range.js"), require("../animator/gradient-range.js"), require("../enum.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.mesh, global.classDecorator, global.director, global.buffer, global.define, global.index, global.index, global.index, global.curveRange, global.gradientRange, global._enum);
    global.trail = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _mesh, _classDecorator, _director, _buffer, _define, _index, _index2, _index3, _curveRange, _gradientRange, _enum) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _curveRange = _interopRequireDefault(_curveRange);
  _gradientRange = _interopRequireDefault(_gradientRange);

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _temp;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function (_e) { function e(_x) { return _e.apply(this, arguments); } e.toString = function () { return _e.toString(); }; return e; }(function (e) { throw e; }), f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function (_e2) { function e(_x2) { return _e2.apply(this, arguments); } e.toString = function () { return _e2.toString(); }; return e; }(function (e) { didErr = true; err = e; }), f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  // tslint:disable: max-line-length
  var PRE_TRIANGLE_INDEX = 1;
  var NEXT_TRIANGLE_INDEX = 1 << 2;
  var DIRECTION_THRESHOLD = Math.cos((0, _index.toRadian)(100));
  var _temp_trailEle = {
    position: new _index.Vec3(),
    velocity: new _index.Vec3()
  };

  var _temp_quat = new _index.Quat();

  var _temp_xform = new _index.Mat4();

  var _temp_vec3 = new _index.Vec3();

  var _temp_vec3_1 = new _index.Vec3();

  var _temp_color = new _index.Color();

  var barycentric = [1, 0, 0, 0, 1, 0, 0, 0, 1]; // <wireframe debug>
  // tslint:disable-next-line: prefer-const

  var _bcIdx = 0;

  // the valid element is in [start,end) range.if start equals -1,it represents the array is empty.
  var TrailSegment = /*#__PURE__*/function () {
    function TrailSegment(maxTrailElementNum) {
      _classCallCheck(this, TrailSegment);

      this.start = void 0;
      this.end = void 0;
      this.trailElements = void 0;
      this.start = -1;
      this.end = -1;
      this.trailElements = [];

      while (maxTrailElementNum--) {
        this.trailElements.push({
          position: new _index.Vec3(),
          lifetime: 0,
          width: 0,
          velocity: new _index.Vec3(),
          direction: 0,
          color: new _index.Color()
        });
      }
    }

    _createClass(TrailSegment, [{
      key: "getElement",
      value: function getElement(idx) {
        if (this.start === -1) {
          return null;
        }

        if (idx < 0) {
          idx = (idx + this.trailElements.length) % this.trailElements.length;
        }

        if (idx >= this.trailElements.length) {
          idx %= this.trailElements.length;
        }

        return this.trailElements[idx];
      }
    }, {
      key: "addElement",
      value: function addElement() {
        if (this.trailElements.length === 0) {
          return null;
        }

        if (this.start === -1) {
          this.start = 0;
          this.end = 1;
          return this.trailElements[0];
        }

        if (this.start === this.end) {
          this.trailElements.splice(this.end, 0, {
            position: new _index.Vec3(),
            lifetime: 0,
            width: 0,
            velocity: new _index.Vec3(),
            direction: 0,
            color: new _index.Color()
          });
          this.start++;
          this.start %= this.trailElements.length;
        }

        var newEleLoc = this.end++;
        this.end %= this.trailElements.length;
        return this.trailElements[newEleLoc];
      }
    }, {
      key: "iterateElement",
      value: function iterateElement(target, f, p, dt) {
        var end = this.start >= this.end ? this.end + this.trailElements.length : this.end;

        for (var i = this.start; i < end; i++) {
          if (f(target, this.trailElements[i % this.trailElements.length], p, dt)) {
            this.start++;
            this.start %= this.trailElements.length;
          }
        }

        if (this.start === end) {
          this.start = -1;
          this.end = -1;
        }
      }
    }, {
      key: "count",
      value: function count() {
        if (this.start < this.end) {
          return this.end - this.start;
        } else {
          return this.trailElements.length + this.end - this.start;
        }
      }
    }, {
      key: "clear",
      value: function clear() {
        this.start = -1;
        this.end = -1;
      } // <debug>
      // public _print () {
      //     let msg = String();
      //     this.iterateElement(this, (target: object, e: ITrailElement, p: Particle, dt: number) => {
      //         msg += 'pos:' + e.position.toString() + ' lifetime:' + e.lifetime + ' dir:' + e.direction + ' velocity:' + e.velocity.toString() + '\n';
      //         return false;
      //     }, null, 0);
      //     console.log(msg);
      // }

    }]);

    return TrailSegment;
  }();

  var TrailModule = (_dec = (0, _classDecorator.ccclass)('cc.TrailModule'), _dec2 = (0, _classDecorator.property)({
    displayOrder: 0
  }), _dec3 = (0, _classDecorator.property)({
    type: _enum.TrailMode,
    displayOrder: 1,
    tooltip: 'Particle在每个粒子的运动轨迹上形成拖尾效果'
  }), _dec4 = (0, _classDecorator.property)({
    type: _curveRange.default,
    displayOrder: 3,
    tooltip: '拖尾的生命周期'
  }), _dec5 = (0, _classDecorator.property)({
    displayOrder: 5,
    tooltip: '粒子每生成一个拖尾节点所运行的最短距离'
  }), _dec6 = (0, _classDecorator.property)({
    type: _enum.Space,
    displayOrder: 6,
    tooltip: '拖尾所在的坐标系，World在世界坐标系中运行，Local在本地坐标系中运行'
  }), _dec7 = (0, _classDecorator.property)({
    displayOrder: 7,
    tooltip: '拖尾是否跟随粒子一起消失',
    visible: false
  }), _dec8 = (0, _classDecorator.property)({
    type: _enum.TextureMode,
    displayOrder: 8,
    tooltip: '贴图在拖尾上的展开形式，Stretch贴图覆盖在整条拖尾上，Repeat贴图覆盖在一段拖尾上'
  }), _dec9 = (0, _classDecorator.property)({
    displayOrder: 9,
    tooltip: '拖尾宽度继承自粒子大小'
  }), _dec10 = (0, _classDecorator.property)({
    type: _curveRange.default,
    displayOrder: 10,
    tooltip: '拖尾宽度，如果继承自粒子则是粒子大小的比例'
  }), _dec11 = (0, _classDecorator.property)({
    displayOrder: 11,
    tooltip: '拖尾颜色是否继承自粒子'
  }), _dec12 = (0, _classDecorator.property)({
    type: _gradientRange.default,
    displayOrder: 12,
    tooltip: '拖尾颜色随拖尾自身长度的颜色渐变'
  }), _dec13 = (0, _classDecorator.property)({
    type: _gradientRange.default,
    displayOrder: 13,
    tooltip: '拖尾颜色随时间的颜色渐变'
  }), _dec14 = (0, _classDecorator.property)({
    type: _enum.Space
  }), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function () {
    _createClass(TrailModule, [{
      key: "enable",

      /**
       * 是否启用。
       */
      get: function get() {
        return this._enable;
      },
      set: function set(val) {
        if (val === this._enable && this._trailModel) {
          return;
        }

        if (val && !this._trailModel) {
          this._createModel();
        }

        if (val && !this._enable) {
          this._enable = val;

          this._particleSystem.processor.updateTrailMaterial();
        }

        this._enable = val;

        if (this._trailModel) {
          this._trailModel.enabled = val;
        }

        val ? this.onEnable() : this.onDisable();
      }
    }, {
      key: "minParticleDistance",

      /**
       * 每个轨迹粒子之间的最小间距。
       */
      get: function get() {
        return this._minParticleDistance;
      },
      set: function set(val) {
        this._minParticleDistance = val;
        this._minSquaredDistance = val * val;
      }
    }, {
      key: "space",
      get: function get() {
        return this._space;
      },
      set: function set(val) {
        this._space = val;

        if (this._particleSystem) {
          this._particleSystem.processor.updateTrailMaterial();
        }
      }
      /**
       * 粒子本身是否存在。
       */

    }]);

    function TrailModule() {
      _classCallCheck(this, TrailModule);

      _initializerDefineProperty(this, "_enable", _descriptor, this);

      _initializerDefineProperty(this, "mode", _descriptor2, this);

      _initializerDefineProperty(this, "lifeTime", _descriptor3, this);

      _initializerDefineProperty(this, "_minParticleDistance", _descriptor4, this);

      _initializerDefineProperty(this, "existWithParticles", _descriptor5, this);

      _initializerDefineProperty(this, "textureMode", _descriptor6, this);

      _initializerDefineProperty(this, "widthFromParticle", _descriptor7, this);

      _initializerDefineProperty(this, "widthRatio", _descriptor8, this);

      _initializerDefineProperty(this, "colorFromParticle", _descriptor9, this);

      _initializerDefineProperty(this, "colorOverTrail", _descriptor10, this);

      _initializerDefineProperty(this, "colorOvertime", _descriptor11, this);

      _initializerDefineProperty(this, "_space", _descriptor12, this);

      _initializerDefineProperty(this, "_particleSystem", _descriptor13, this);

      this._minSquaredDistance = 0;
      this._vertSize = void 0;
      this._trailNum = 0;
      this._trailLifetime = 0;
      this.vbOffset = 0;
      this.ibOffset = 0;
      this._trailSegments = null;
      this._particleTrail = void 0;
      this._trailModel = null;
      this._iaInfo = void 0;
      this._iaInfoBuffer = null;
      this._subMeshData = null;
      this._vertAttrs = void 0;
      this._vbF32 = null;
      this._vbUint32 = null;
      this._iBuffer = null;
      this._needTransform = false;
      this._defaultMat = null;
      this._iaInfo = {
        drawInfos: [{
          vertexCount: 0,
          firstVertex: 0,
          indexCount: 0,
          firstIndex: 0,
          vertexOffset: 0,
          instanceCount: 0,
          firstInstance: 0
        }]
      };
      this._vertAttrs = [{
        name: _define.GFXAttributeName.ATTR_POSITION,
        format: _define.GFXFormat.RGB32F
      }, // xyz:position
      {
        name: _define.GFXAttributeName.ATTR_TEX_COORD,
        format: _define.GFXFormat.RGBA32F
      }, // x:index y:size zw:texcoord
      // { name: GFXAttributeName.ATTR_TEX_COORD2, format: GFXFormat.RGB32F }, // <wireframe debug>
      {
        name: _define.GFXAttributeName.ATTR_TEX_COORD1,
        format: _define.GFXFormat.RGB32F
      }, // xyz:velocity
      {
        name: _define.GFXAttributeName.ATTR_COLOR,
        format: _define.GFXFormat.RGBA8,
        isNormalized: true
      }];
      this._vertSize = 0;

      var _iterator = _createForOfIteratorHelper(this._vertAttrs),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var a = _step.value;
          this._vertSize += _define.GFXFormatInfos[a.format].size;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      this._particleTrail = new Map();
    }

    _createClass(TrailModule, [{
      key: "onInit",
      value: function onInit(ps) {
        this._particleSystem = ps;
        this.minParticleDistance = this._minParticleDistance;
        var burstCount = 0;

        var _iterator2 = _createForOfIteratorHelper(this._particleSystem.bursts),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var b = _step2.value;
            burstCount += b.getMaxCount(this._particleSystem);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        this._trailNum = Math.ceil(this._particleSystem.startLifetime.getMax() * this.lifeTime.getMax() * 60 * (this._particleSystem.rateOverTime.getMax() * this._particleSystem.duration + burstCount));
        this._trailSegments = new _index2.Pool(function () {
          return new TrailSegment(10);
        }, Math.ceil(this._particleSystem.rateOverTime.getMax() * this._particleSystem.duration));

        if (this._enable) {
          this.enable = this._enable;

          this._updateMaterial();
        }
      }
    }, {
      key: "onEnable",
      value: function onEnable() {
        this._attachToScene();
      }
    }, {
      key: "onDisable",
      value: function onDisable() {
        this._particleTrail.clear();

        this._detachFromScene();
      }
    }, {
      key: "_attachToScene",
      value: function _attachToScene() {
        if (this._trailModel) {
          if (this._trailModel.scene) {
            this._detachFromScene();
          }

          this._particleSystem._getRenderScene().addModel(this._trailModel);
        }
      }
    }, {
      key: "_detachFromScene",
      value: function _detachFromScene() {
        if (this._trailModel && this._trailModel.scene) {
          this._trailModel.scene.removeModel(this._trailModel);
        }
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.destroySubMeshData();

        if (this._trailModel) {
          cc.director.root.destroyModel(this._trailModel);
          this._trailModel = null;
        }

        if (this._trailSegments) {
          this._trailSegments.clear(function (obj) {
            obj.trailElements.length = 0;
          });

          this._trailSegments = null;
        }
      }
    }, {
      key: "clear",
      value: function clear() {
        if (this.enable) {
          var trailIter = this._particleTrail.values();

          var trail = trailIter.next();

          while (!trail.done) {
            trail.value.clear();
            trail = trailIter.next();
          }

          this._particleTrail.clear();

          this.updateRenderData();
        }
      }
    }, {
      key: "_updateMaterial",
      value: function _updateMaterial() {
        if (this._particleSystem && this._trailModel) {
          var mat = this._particleSystem.getMaterialInstance(1);

          if (mat) {
            this._trailModel.setSubModelMaterial(0, mat);
          } else {
            this._trailModel.setSubModelMaterial(0, this._particleSystem.processor._defaultTrailMat);
          }
        }
      }
    }, {
      key: "update",
      value: function update() {
        this._trailLifetime = this.lifeTime.evaluate(this._particleSystem._time, 1);

        if (this.space === _enum.Space.World && this._particleSystem._simulationSpace === _enum.Space.Local) {
          this._needTransform = true;

          this._particleSystem.node.getWorldMatrix(_temp_xform);

          this._particleSystem.node.getWorldRotation(_temp_quat);
        } else {
          this._needTransform = false;
        }
      }
    }, {
      key: "animate",
      value: function animate(p, scaledDt) {
        if (!this._trailSegments) {
          return;
        }

        var trail = this._particleTrail.get(p);

        if (!trail) {
          trail = this._trailSegments.alloc();

          this._particleTrail.set(p, trail); // Avoid position and trail are one frame apart at the end of the particle animation.


          return;
        }

        var lastSeg = trail.getElement(trail.end - 1);

        if (this._needTransform) {
          _index.Vec3.transformMat4(_temp_vec3, p.position, _temp_xform);
        } else {
          _index.Vec3.copy(_temp_vec3, p.position);
        }

        if (lastSeg) {
          trail.iterateElement(this, this._updateTrailElement, p, scaledDt);

          if (_index.Vec3.squaredDistance(lastSeg.position, _temp_vec3) < this._minSquaredDistance) {
            return;
          }
        }

        lastSeg = trail.addElement();

        if (!lastSeg) {
          return;
        }

        _index.Vec3.copy(lastSeg.position, _temp_vec3);

        lastSeg.lifetime = 0;

        if (this.widthFromParticle) {
          lastSeg.width = p.size.x * this.widthRatio.evaluate(0, 1);
        } else {
          lastSeg.width = this.widthRatio.evaluate(0, 1);
        }

        var trailNum = trail.count();

        if (trailNum === 2) {
          var lastSecondTrail = trail.getElement(trail.end - 2);

          _index.Vec3.subtract(lastSecondTrail.velocity, lastSeg.position, lastSecondTrail.position);
        } else if (trailNum > 2) {
          var _lastSecondTrail = trail.getElement(trail.end - 2);

          var lastThirdTrail = trail.getElement(trail.end - 3);

          _index.Vec3.subtract(_temp_vec3, lastThirdTrail.position, _lastSecondTrail.position);

          _index.Vec3.subtract(_temp_vec3_1, lastSeg.position, _lastSecondTrail.position);

          _index.Vec3.subtract(_lastSecondTrail.velocity, _temp_vec3_1, _temp_vec3);

          if (_index.Vec3.equals(_index.Vec3.ZERO, _lastSecondTrail.velocity)) {
            _index.Vec3.copy(_lastSecondTrail.velocity, _temp_vec3);
          }

          _index.Vec3.normalize(_lastSecondTrail.velocity, _lastSecondTrail.velocity);

          this._checkDirectionReverse(_lastSecondTrail, lastThirdTrail);
        }

        if (this.colorFromParticle) {
          lastSeg.color.set(p.color);
        } else {
          lastSeg.color.set(this.colorOvertime.evaluate(0, 1));
        }
      }
    }, {
      key: "removeParticle",
      value: function removeParticle(p) {
        var trail = this._particleTrail.get(p);

        if (trail && this._trailSegments) {
          trail.clear();

          this._trailSegments.free(trail);

          this._particleTrail["delete"](p);
        }
      }
    }, {
      key: "updateRenderData",
      value: function updateRenderData() {
        this.vbOffset = 0;
        this.ibOffset = 0;

        var _iterator3 = _createForOfIteratorHelper(this._particleTrail.keys()),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var p = _step3.value;

            var trailSeg = this._particleTrail.get(p);

            if (trailSeg.start === -1) {
              continue;
            }

            var indexOffset = this.vbOffset * 4 / this._vertSize;
            var end = trailSeg.start >= trailSeg.end ? trailSeg.end + trailSeg.trailElements.length : trailSeg.end;
            var trailNum = end - trailSeg.start; // const lastSegRatio = vec3.distance(trailSeg.getTailElement()!.position, p.position) / this._minParticleDistance;

            var textCoordSeg = 1 / trailNum
            /*- 1 + lastSegRatio*/
            ;
            var startSegEle = trailSeg.trailElements[trailSeg.start];

            this._fillVertexBuffer(startSegEle, this.colorOverTrail.evaluate(1, 1), indexOffset, 1, 0, NEXT_TRIANGLE_INDEX);

            for (var i = trailSeg.start + 1; i < end; i++) {
              var segEle = trailSeg.trailElements[i % trailSeg.trailElements.length];
              var j = i - trailSeg.start;

              this._fillVertexBuffer(segEle, this.colorOverTrail.evaluate(1 - j / trailNum, 1), indexOffset, 1 - j * textCoordSeg, j, PRE_TRIANGLE_INDEX | NEXT_TRIANGLE_INDEX);
            }

            if (this._needTransform) {
              _index.Vec3.transformMat4(_temp_trailEle.position, p.position, _temp_xform);
            } else {
              _index.Vec3.copy(_temp_trailEle.position, p.position);
            }

            if (trailNum === 1 || trailNum === 2) {
              var lastSecondTrail = trailSeg.getElement(trailSeg.end - 1);

              _index.Vec3.subtract(lastSecondTrail.velocity, _temp_trailEle.position, lastSecondTrail.position);

              this._vbF32[this.vbOffset - this._vertSize / 4 - 4] = lastSecondTrail.velocity.x;
              this._vbF32[this.vbOffset - this._vertSize / 4 - 3] = lastSecondTrail.velocity.y;
              this._vbF32[this.vbOffset - this._vertSize / 4 - 2] = lastSecondTrail.velocity.z;
              this._vbF32[this.vbOffset - 4] = lastSecondTrail.velocity.x;
              this._vbF32[this.vbOffset - 3] = lastSecondTrail.velocity.y;
              this._vbF32[this.vbOffset - 2] = lastSecondTrail.velocity.z;

              _index.Vec3.subtract(_temp_trailEle.velocity, _temp_trailEle.position, lastSecondTrail.position);

              this._checkDirectionReverse(_temp_trailEle, lastSecondTrail);
            } else if (trailNum > 2) {
              var _lastSecondTrail2 = trailSeg.getElement(trailSeg.end - 1);

              var lastThirdTrail = trailSeg.getElement(trailSeg.end - 2);

              _index.Vec3.subtract(_temp_vec3, lastThirdTrail.position, _lastSecondTrail2.position);

              _index.Vec3.subtract(_temp_vec3_1, _temp_trailEle.position, _lastSecondTrail2.position);

              _index.Vec3.normalize(_temp_vec3, _temp_vec3);

              _index.Vec3.normalize(_temp_vec3_1, _temp_vec3_1);

              _index.Vec3.subtract(_lastSecondTrail2.velocity, _temp_vec3_1, _temp_vec3);

              _index.Vec3.normalize(_lastSecondTrail2.velocity, _lastSecondTrail2.velocity);

              this._checkDirectionReverse(_lastSecondTrail2, lastThirdTrail); // refresh last trail segment data


              this.vbOffset -= this._vertSize / 4 * 2;
              this.ibOffset -= 6; // _bcIdx = (_bcIdx - 6 + 9) % 9;  // <wireframe debug>

              this._fillVertexBuffer(_lastSecondTrail2, this.colorOverTrail.evaluate(textCoordSeg, 1), indexOffset, textCoordSeg, trailNum - 1, PRE_TRIANGLE_INDEX | NEXT_TRIANGLE_INDEX);

              _index.Vec3.subtract(_temp_trailEle.velocity, _temp_trailEle.position, _lastSecondTrail2.position);

              _index.Vec3.normalize(_temp_trailEle.velocity, _temp_trailEle.velocity);

              this._checkDirectionReverse(_temp_trailEle, _lastSecondTrail2);
            }

            if (this.widthFromParticle) {
              _temp_trailEle.width = p.size.x * this.widthRatio.evaluate(0, 1);
            } else {
              _temp_trailEle.width = this.widthRatio.evaluate(0, 1);
            }

            _temp_trailEle.color = p.color;

            if (_index.Vec3.equals(_temp_trailEle.velocity, _index.Vec3.ZERO)) {
              this.ibOffset -= 3;
            } else {
              this._fillVertexBuffer(_temp_trailEle, this.colorOverTrail.evaluate(0, 1), indexOffset, 0, trailNum, PRE_TRIANGLE_INDEX);
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        this.updateIA(this.ibOffset);
      }
    }, {
      key: "updateIA",
      value: function updateIA(count) {
        if (this._trailModel && this._trailModel.subModelNum > 0) {
          var subModel = this._trailModel.getSubModel(0);

          subModel.inputAssembler.vertexBuffers[0].update(this._vbF32);
          subModel.inputAssembler.indexBuffer.update(this._iBuffer);
          subModel.inputAssembler.indexCount = count;
          this._iaInfo.drawInfos[0] = subModel.inputAssembler;

          this._iaInfoBuffer.update(this._iaInfo);
        }
      }
    }, {
      key: "_createModel",
      value: function _createModel() {
        if (this._trailModel) {
          return;
        }

        var device = _director.director.root.device;
        var vertexBuffer = device.createBuffer({
          usage: _define.GFXBufferUsageBit.VERTEX | _define.GFXBufferUsageBit.TRANSFER_DST,
          memUsage: _define.GFXMemoryUsageBit.HOST | _define.GFXMemoryUsageBit.DEVICE,
          size: this._vertSize * (this._trailNum + 1) * 2,
          stride: this._vertSize
        });
        var vBuffer = new ArrayBuffer(this._vertSize * (this._trailNum + 1) * 2);
        this._vbF32 = new Float32Array(vBuffer);
        this._vbUint32 = new Uint32Array(vBuffer);
        vertexBuffer.update(vBuffer);
        var indexBuffer = device.createBuffer({
          usage: _define.GFXBufferUsageBit.INDEX | _define.GFXBufferUsageBit.TRANSFER_DST,
          memUsage: _define.GFXMemoryUsageBit.HOST | _define.GFXMemoryUsageBit.DEVICE,
          size: this._trailNum * 6 * Uint16Array.BYTES_PER_ELEMENT,
          stride: Uint16Array.BYTES_PER_ELEMENT
        });
        this._iBuffer = new Uint16Array(this._trailNum * 6);
        indexBuffer.update(this._iBuffer);
        this._iaInfoBuffer = device.createBuffer({
          usage: _define.GFXBufferUsageBit.INDIRECT,
          memUsage: _define.GFXMemoryUsageBit.HOST | _define.GFXMemoryUsageBit.DEVICE,
          size: _buffer.GFX_DRAW_INFO_SIZE,
          stride: 1
        });
        this._iaInfo.drawInfos[0].vertexCount = (this._trailNum + 1) * 2;
        this._iaInfo.drawInfos[0].indexCount = this._trailNum * 6;

        this._iaInfoBuffer.update(this._iaInfo);

        this._subMeshData = new _mesh.RenderingSubMesh([vertexBuffer], this._vertAttrs, _define.GFXPrimitiveMode.TRIANGLE_LIST);
        this._subMeshData.indexBuffer = indexBuffer;
        this._subMeshData.indirectBuffer = this._iaInfoBuffer;
        this._trailModel = cc.director.root.createModel(_index3.Model);

        this._trailModel.initialize(this._particleSystem.node);

        this._trailModel.visFlags = this._particleSystem.visibility;

        this._trailModel.setSubModelMesh(0, this._subMeshData);

        this._trailModel.enabled = true;
      }
    }, {
      key: "_updateTrailElement",
      value: function _updateTrailElement(module, trailEle, p, dt) {
        trailEle.lifetime += dt;

        if (module.colorFromParticle) {
          trailEle.color.set(p.color);
          trailEle.color.multiply(module.colorOvertime.evaluate(1.0 - p.remainingLifetime / p.startLifetime, 1));
        } else {
          trailEle.color.set(module.colorOvertime.evaluate(1.0 - p.remainingLifetime / p.startLifetime, 1));
        }

        if (module.widthFromParticle) {
          trailEle.width = p.size.x * module.widthRatio.evaluate(trailEle.lifetime / module._trailLifetime, 1);
        } else {
          trailEle.width = module.widthRatio.evaluate(trailEle.lifetime / module._trailLifetime, 1);
        }

        return trailEle.lifetime > module._trailLifetime;
      }
    }, {
      key: "_fillVertexBuffer",
      value: function _fillVertexBuffer(trailSeg, colorModifer, indexOffset, xTexCoord, trailEleIdx, indexSet) {
        this._vbF32[this.vbOffset++] = trailSeg.position.x;
        this._vbF32[this.vbOffset++] = trailSeg.position.y;
        this._vbF32[this.vbOffset++] = trailSeg.position.z;
        this._vbF32[this.vbOffset++] = trailSeg.direction;
        this._vbF32[this.vbOffset++] = trailSeg.width;
        this._vbF32[this.vbOffset++] = xTexCoord;
        this._vbF32[this.vbOffset++] = 0; // this._vbF32![this.vbOffset++] = barycentric[_bcIdx++];  // <wireframe debug>
        // this._vbF32![this.vbOffset++] = barycentric[_bcIdx++];
        // this._vbF32![this.vbOffset++] = barycentric[_bcIdx++];
        // _bcIdx %= 9;

        this._vbF32[this.vbOffset++] = trailSeg.velocity.x;
        this._vbF32[this.vbOffset++] = trailSeg.velocity.y;
        this._vbF32[this.vbOffset++] = trailSeg.velocity.z;

        _temp_color.set(trailSeg.color);

        _temp_color.multiply(colorModifer);

        this._vbUint32[this.vbOffset++] = _temp_color._val;
        this._vbF32[this.vbOffset++] = trailSeg.position.x;
        this._vbF32[this.vbOffset++] = trailSeg.position.y;
        this._vbF32[this.vbOffset++] = trailSeg.position.z;
        this._vbF32[this.vbOffset++] = 1 - trailSeg.direction;
        this._vbF32[this.vbOffset++] = trailSeg.width;
        this._vbF32[this.vbOffset++] = xTexCoord;
        this._vbF32[this.vbOffset++] = 1; // this._vbF32![this.vbOffset++] = barycentric[_bcIdx++];  // <wireframe debug>
        // this._vbF32![this.vbOffset++] = barycentric[_bcIdx++];
        // this._vbF32![this.vbOffset++] = barycentric[_bcIdx++];
        // _bcIdx %= 9;

        this._vbF32[this.vbOffset++] = trailSeg.velocity.x;
        this._vbF32[this.vbOffset++] = trailSeg.velocity.y;
        this._vbF32[this.vbOffset++] = trailSeg.velocity.z;
        this._vbUint32[this.vbOffset++] = _temp_color._val;

        if (indexSet & PRE_TRIANGLE_INDEX) {
          this._iBuffer[this.ibOffset++] = indexOffset + 2 * trailEleIdx;
          this._iBuffer[this.ibOffset++] = indexOffset + 2 * trailEleIdx - 1;
          this._iBuffer[this.ibOffset++] = indexOffset + 2 * trailEleIdx + 1;
        }

        if (indexSet & NEXT_TRIANGLE_INDEX) {
          this._iBuffer[this.ibOffset++] = indexOffset + 2 * trailEleIdx;
          this._iBuffer[this.ibOffset++] = indexOffset + 2 * trailEleIdx + 1;
          this._iBuffer[this.ibOffset++] = indexOffset + 2 * trailEleIdx + 2;
        }
      }
    }, {
      key: "_checkDirectionReverse",
      value: function _checkDirectionReverse(currElement, prevElement) {
        if (_index.Vec3.dot(currElement.velocity, prevElement.velocity) < DIRECTION_THRESHOLD) {
          currElement.direction = 1 - prevElement.direction;
        } else {
          currElement.direction = prevElement.direction;
        }
      }
    }, {
      key: "destroySubMeshData",
      value: function destroySubMeshData() {
        if (this._subMeshData) {
          this._subMeshData.destroy();

          this._subMeshData = null;
        }
      } // <debug use>
      // private _printVB() {
      //     let log = new String();
      //     for (let i = 0; i < this.vbOffset; i++) {
      //         log += 'pos:' + this._vbF32![i++].toFixed(2) + ',' + this._vbF32![i++].toFixed(2) + ',' + this._vbF32![i++].toFixed(2) + ' dir:' + this._vbF32![i++].toFixed(0) + ' ';
      //         i += 6;
      //         log += 'vel:' + this._vbF32![i++].toFixed(2) + ',' + this._vbF32![i++].toFixed(2) + ',' + this._vbF32![i++].toFixed(2) + '\n';
      //     }
      //     if (log.length > 0) {
      //         console.log(log);
      //     }
      // }

    }]);

    return TrailModule;
  }(), _temp), (_applyDecoratedDescriptor(_class2.prototype, "enable", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "enable"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_enable", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "mode", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _enum.TrailMode.Particles;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lifeTime", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _curveRange.default();
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_minParticleDistance", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0.1;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "minParticleDistance", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "minParticleDistance"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "space", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "space"), _class2.prototype), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "existWithParticles", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "textureMode", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _enum.TextureMode.Stretch;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "widthFromParticle", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "widthRatio", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _curveRange.default();
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "colorFromParticle", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "colorOverTrail", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _gradientRange.default();
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "colorOvertime", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _gradientRange.default();
    }
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "_space", [_dec14], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _enum.Space.World;
    }
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "_particleSystem", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  })), _class2)) || _class);
  _exports.default = TrailModule;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,