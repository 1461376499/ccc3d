(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../core/assets/index.js", "../../core/data/class-decorator.js", "../../core/platform/event-manager/event-enum.js", "../../core/math/index.js", "../../core/value-types/enum.js", "../../core/math/utils.js", "../../core/components/ui-base/ui-render-component.js", "../../core/default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../core/assets/index.js"), require("../../core/data/class-decorator.js"), require("../../core/platform/event-manager/event-enum.js"), require("../../core/math/index.js"), require("../../core/value-types/enum.js"), require("../../core/math/utils.js"), require("../../core/components/ui-base/ui-render-component.js"), require("../../core/default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.classDecorator, global.eventEnum, global.index, global._enum, global.utils, global.uiRenderComponent, global.defaultConstants);
    global.spriteComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _classDecorator, _eventEnum, _index2, _enum, _utils, _uiRenderComponent, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SpriteComponent = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _class3, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  /**
   * @en
   * Enum for sprite type.
   *
   * @zh
   * Sprite 类型。
   */
  var SpriteType;

  (function (SpriteType) {
    SpriteType[SpriteType["SIMPLE"] = 0] = "SIMPLE";
    SpriteType[SpriteType["SLICED"] = 1] = "SLICED";
    SpriteType[SpriteType["TILED"] = 2] = "TILED";
    SpriteType[SpriteType["FILLED"] = 3] = "FILLED";
  })(SpriteType || (SpriteType = {}));

  (0, _enum.ccenum)(SpriteType);
  /**
   * @en
   * Enum for fill type.
   *
   * @zh
   * 填充类型。
   */

  var FillType;

  (function (FillType) {
    FillType[FillType["HORIZONTAL"] = 0] = "HORIZONTAL";
    FillType[FillType["VERTICAL"] = 1] = "VERTICAL";
    FillType[FillType["RADIAL"] = 2] = "RADIAL";
  })(FillType || (FillType = {}));

  (0, _enum.ccenum)(FillType);
  /**
   * @en
   * Sprite Size can track trimmed size, raw size or none.
   *
   * @zh
   * 精灵尺寸调整模式。
   */

  var SizeMode;

  (function (SizeMode) {
    SizeMode[SizeMode["CUSTOM"] = 0] = "CUSTOM";
    SizeMode[SizeMode["TRIMMED"] = 1] = "TRIMMED";
    SizeMode[SizeMode["RAW"] = 2] = "RAW";
  })(SizeMode || (SizeMode = {}));

  (0, _enum.ccenum)(SizeMode);
  var EventType;
  /**
   * @en
   * Renders a sprite in the scene.
   *
   * @zh
   * 渲染精灵组件。
   */

  (function (EventType) {
    EventType["SPRITE_FRAME_CHANGED"] = "spriteframe-changed";
  })(EventType || (EventType = {}));

  var SpriteComponent = (_dec = (0, _classDecorator.ccclass)('cc.SpriteComponent'), _dec2 = (0, _classDecorator.help)('i18n:cc.SpriteComponent'), _dec3 = (0, _classDecorator.executionOrder)(110), _dec4 = (0, _classDecorator.menu)('UI/Render/Sprite'), _dec5 = (0, _classDecorator.property)({
    type: _index.SpriteAtlas,
    displayOrder: 4,
    tooltip: '图片资源所属的 Atlas 图集资源'
  }), _dec6 = (0, _classDecorator.property)({
    type: _index.SpriteFrame,
    displayOrder: 5,
    tooltip: '渲染 Sprite 使用的 SpriteFrame 图片资源'
  }), _dec7 = (0, _classDecorator.property)({
    type: SpriteType,
    displayOrder: 6,
    tooltip: '渲染模式：\n- 普通（Simple）：修改尺寸会整体拉伸图像，适用于序列帧动画和普通图像 \n' + '- 九宫格（Sliced）：修改尺寸时四个角的区域不会拉伸，适用于 UI 按钮和面板背景 \n' + '- 填充（Filled）：设置一定的填充起始位置和方向，能够以一定比率剪裁显示图片'
  }), _dec8 = (0, _classDecorator.property)({
    type: FillType,
    tooltip: '填充方向，可以选择横向（Horizontal），纵向（Vertical）和扇形（Radial）三种方向'
  }), _dec9 = (0, _classDecorator.property)({
    tooltip: '扇形填充时，指定扇形的中心点，取值范围 0 ~ 1'
  }), _dec10 = (0, _classDecorator.property)({
    range: [0, 1, 0.1],
    tooltip: '填充起始位置，输入一个 0 ~ 1 之间的小数表示起始位置的百分比'
  }), _dec11 = (0, _classDecorator.property)({
    range: [0, 1, 0.1],
    tooltip: '填充总量，取值范围 0 ~ 1 指定显示图像范围的百分比'
  }), _dec12 = (0, _classDecorator.property)({
    displayOrder: 8,
    tooltip: '节点约束框内是否包括透明像素区域，勾选此项会去除节点约束框内的透明区域'
  }), _dec13 = (0, _classDecorator.property)({
    type: SizeMode,
    displayOrder: 7,
    tooltip: '指定 Sprite 所在节点的尺寸，CUSTOM 表示自定义尺寸，TRIMMED 表示取原始图片剪裁透明像素后的尺寸，RAW 表示取原始图片未剪裁的尺寸'
  }), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_UIRenderComponent) {
    _inherits(SpriteComponent, _UIRenderComponent);

    function SpriteComponent() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, SpriteComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SpriteComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _initializerDefineProperty(_this, "_spriteFrame", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_type", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_fillType", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_sizeMode", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_fillCenter", _descriptor5, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_fillStart", _descriptor6, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_fillRange", _descriptor7, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_isTrimmedMode", _descriptor8, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_useGrayscale", _descriptor9, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_atlas", _descriptor10, _assertThisInitialized(_this));

      return _this;
    }

    _createClass(SpriteComponent, [{
      key: "__preload",
      // static State = State;
      value: function __preload() {
        if (this._useGrayscale) {
          this._instanceMaterialType = _uiRenderComponent.InstanceMaterialType.GRAYSCALE;
        }

        if (_get(_getPrototypeOf(SpriteComponent.prototype), "__preload", this)) {
          _get(_getPrototypeOf(SpriteComponent.prototype), "__preload", this).call(this);
        }

        if (_defaultConstants.EDITOR) {
          this._resized();

          this.node.on(_eventEnum.SystemEventType.SIZE_CHANGED, this._resized, this);
        }

        if (this._spriteFrame) {
          this._spriteFrame.on('load', this._markForUpdateUvDirty, this);

          this._markForUpdateUvDirty();
        }
      } // /**
      //  * Change the state of sprite.
      //  * @method setState
      //  * @see `SpriteComponent.State`
      //  * @param state {SpriteComponent.State} NORMAL or GRAY State.
      //  */
      // getState() {
      //     return this._state;
      // }
      // setState(state) {
      //     if (this._state === state) return;
      //     this._state = state;
      //     this._activateMaterial();
      // }
      // onLoad() {}

    }, {
      key: "onEnable",
      value: function onEnable() {
        _get(_getPrototypeOf(SpriteComponent.prototype), "onEnable", this).call(this); // this._flushAssembler();


        this._activateMaterial();
      }
    }, {
      key: "onDestroy",
      value: function onDestroy() {
        _get(_getPrototypeOf(SpriteComponent.prototype), "onDestroy", this).call(this);

        this.destroyRenderData();

        if (_defaultConstants.EDITOR) {
          this.node.off(_eventEnum.SystemEventType.SIZE_CHANGED, this._resized, this);
        }

        if (this._spriteFrame) {
          this._spriteFrame.off('load');
        }
      }
      /**
       * @en
       * Quickly switch to other sprite frame in the sprite atlas.
       * If there is no atlas, the switch fails.
       *
       * @zh
       * 精灵图集内的精灵替换
       *
       * @returns
       */

    }, {
      key: "changeSpriteFrameFromAtlas",
      value: function changeSpriteFrameFromAtlas(name) {
        if (!this._atlas) {
          console.warn('SpriteAtlas is null.');
          return;
        }

        var sprite = this._atlas.getSpriteFrame(name);

        this.spriteFrame = sprite;
      }
    }, {
      key: "_render",
      value: function _render(render) {
        render.commitComp(this, this._spriteFrame.getGFXTextureView(), this._assembler, this._spriteFrame.texture.getGFXSampler()); // render.commitComp(this, this._spriteFrame!.getGFXTextureView(), this._assembler!);
      }
    }, {
      key: "_canRender",
      value: function _canRender() {
        // if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
        //     if (!this._enabled) { return false; }
        // } else {
        //     if (!this._enabled || !this._material) { return false; }
        // }
        // const spriteFrame = this._spriteFrame;
        // if (!spriteFrame || !spriteFrame.textureLoaded()) {
        //     return false;
        // }
        // return true;
        if (!_get(_getPrototypeOf(SpriteComponent.prototype), "_canRender", this).call(this)) {
          return false;
        }

        var spriteFrame = this._spriteFrame;

        if (!spriteFrame || !spriteFrame.textureLoaded()) {
          return false;
        }

        return true;
      }
    }, {
      key: "_flushAssembler",
      value: function _flushAssembler() {
        var assembler = SpriteComponent.Assembler.getAssembler(this);

        if (this._assembler !== assembler) {
          this.destroyRenderData();
          this._assembler = assembler;
        }

        if (!this._renderData) {
          if (this._assembler && this._assembler.createData) {
            this._renderData = this._assembler.createData(this);
            this._renderData.material = this._material;
            this.markForUpdateRenderData();

            this._updateColor();
          }
        }
      }
    }, {
      key: "_applySpriteSize",
      value: function _applySpriteSize() {
        if (this._spriteFrame) {
          if (SizeMode.RAW === this._sizeMode) {
            var size = this._spriteFrame.originalSize;
            this.node.setContentSize(size);
          } else if (SizeMode.TRIMMED === this._sizeMode) {
            var rect = this._spriteFrame.getRect();

            this.node.setContentSize(rect.width, rect.height);
          }

          this._activateMaterial();
        }
      }
    }, {
      key: "_resized",
      value: function _resized() {
        if (!_defaultConstants.EDITOR) {
          return;
        }

        if (this._spriteFrame) {
          var actualSize = this.node.getContentSize();
          var expectedW = actualSize.width;
          var expectedH = actualSize.height;

          if (this._sizeMode === SizeMode.RAW) {
            var size = this._spriteFrame.getOriginalSize();

            expectedW = size.width;
            expectedH = size.height;
          } else if (this._sizeMode === SizeMode.TRIMMED) {
            var rect = this._spriteFrame.getRect();

            expectedW = rect.width;
            expectedH = rect.height;
          }

          if (expectedW !== actualSize.width || expectedH !== actualSize.height) {
            this._sizeMode = SizeMode.CUSTOM;
          }
        }
      }
    }, {
      key: "_activateMaterial",
      value: function _activateMaterial() {
        var spriteFrame = this._spriteFrame;
        var material = this._material; // WebGL

        if (cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
          // if (!material) {
          //     this._material = cc.builtinResMgr.get('sprite-material');
          //     material = this._material;
          //     if (spriteFrame && spriteFrame.textureLoaded()) {
          //         material!.setProperty('mainTexture', spriteFrame);
          //         this.markForUpdateRenderData();
          //     }
          // }
          // TODO: use editor assets
          // else {
          if (spriteFrame) {
            if (material) {
              // const matTexture = material.getProperty('mainTexture');
              // if (matTexture !== spriteFrame) {
              // material.setProperty('mainTexture', spriteFrame.texture);
              this.markForUpdateRenderData(); // }
            }
          } // }


          if (this._renderData) {
            this._renderData.material = material;
          }
        } else {
          this.markForUpdateRenderData(); // this.markForRender(true);
        }
      }
      /*
          private _applyAtlas (spriteFrame: SpriteFrame | null) {
              if (!EDITOR) {
                  return;
              }
              // Set atlas
              if (spriteFrame) {
                  if (spriteFrame.atlasUuid.length > 0) {
                      if (!this._atlas || this._atlas._uuid !== spriteFrame.atlasUuid) {
                          const self = this;
                          AssetLibrary.loadAsset(spriteFrame.atlasUuid, (err, asset) => {
                              self._atlas = asset;
                          });
                      }
                  }else{
                      this._atlas = null;
                  }
              }
          }
      */

    }, {
      key: "_onTextureLoaded",
      value: function _onTextureLoaded() {
        if (!this.isValid) {
          return;
        }

        this._applySpriteSize();
      }
    }, {
      key: "_applySpriteFrame",
      value: function _applySpriteFrame(oldFrame) {
        // if (oldFrame && oldFrame.off) {
        //     oldFrame.off('load', this._onTextureLoaded, this);
        // }
        var spriteFrame = this._spriteFrame; // if (!spriteFrame || (this._material && this._material._texture) !== (spriteFrame && spriteFrame._texture)) {
        //     // disable render flow until texture is loaded
        //     this.markForRender(false);
        // }

        if (this._renderData) {
          if (oldFrame) {
            oldFrame.off('load', this._markForUpdateUvDirty);
          }

          if (spriteFrame) {
            spriteFrame.on('load', this._markForUpdateUvDirty, this);
          }

          if (!this._renderData.uvDirty) {
            if (oldFrame && spriteFrame) {
              this._renderData.uvDirty = oldFrame.uvHash !== spriteFrame.uvHash;
            } else {
              this._renderData.uvDirty = true;
            }
          }

          this._renderDataFlag = this._renderData.uvDirty;
        }

        if (spriteFrame) {
          if (!oldFrame || spriteFrame !== oldFrame) {
            // this._material.setProperty('mainTexture', spriteFrame);
            if (spriteFrame.loaded) {
              this._onTextureLoaded();
            } else {
              spriteFrame.once('load', this._onTextureLoaded, this);
            }
          }
        }
        /*
                if (EDITOR) {
                    // Set atlas
                    this._applyAtlas(spriteFrame);
                }
        */

      }
      /**
       * 强制刷新 uv。
       */

    }, {
      key: "_markForUpdateUvDirty",
      value: function _markForUpdateUvDirty() {
        if (this._renderData) {
          this._renderData.uvDirty = true;
          this._renderDataFlag = true;
        }
      }
    }, {
      key: "spriteAtlas",

      /**
       * @en
       * The sprite atlas where the sprite is.
       *
       * @zh
       * 精灵的图集。
       */
      get: function get() {
        return this._atlas;
      },
      set: function set(value) {
        if (this._atlas === value) {
          return;
        }

        this._atlas = value; //        this.spriteFrame = null;
      }
      /**
       * @en
       * The sprite frame of the sprite.
       *
       * @zh
       * 精灵的精灵帧。
       */

    }, {
      key: "spriteFrame",
      get: function get() {
        return this._spriteFrame;
      },
      set: function set(value) {
        if (this._spriteFrame === value) {
          return;
        }

        var lastSprite = this._spriteFrame;
        this._spriteFrame = value; // render & update render data flag will be triggered while applying new sprite frame

        this.markForUpdateRenderData(false);

        this._applySpriteFrame(lastSprite);

        if (_defaultConstants.EDITOR) {
          // @ts-ignore
          this.node.emit(EventType.SPRITE_FRAME_CHANGED, this);
        }
      }
      /**
       * @en
       * The sprite render type.
       *
       * @zh
       * 精灵渲染类型。
       *
       * @example
       * ```typescript
       * sprite.type = cc.SpriteComponent.Type.SIMPLE;
       * ```
       */

    }, {
      key: "type",
      get: function get() {
        return this._type;
      },
      set: function set(value) {
        if (this._type !== value) {
          this._type = value;

          this._flushAssembler();
        }
      }
      /**
       * @en
       * The fill type, This will only have any effect if the "type" is set to “SpriteComponent.Type.FILLED”.
       *
       * @zh
       * 精灵填充类型，仅渲染类型设置为 SpriteComponent.Type.FILLED 时有效。
       *
       * @example
       * ```typescript
       * sprite.fillType = cc.SpriteComponent.FillType.HORIZONTAL;
       * ```
       */

    }, {
      key: "fillType",
      get: function get() {
        return this._fillType;
      },
      set: function set(value) {
        if (this._fillType !== value) {
          if (value === FillType.RADIAL || this._fillType === FillType.RADIAL) {
            this.destroyRenderData();
            this._renderData = null;
          } else {
            if (this._renderData) {
              this.markForUpdateRenderData(true);
            }
          }
        }

        this._fillType = value;

        this._flushAssembler();
      }
      /**
       * @en
       * The fill Center, This will only have any effect if the "type" is set to “SpriteComponent.Type.FILLED”.
       *
       * @zh
       * 填充中心点，仅渲染类型设置为 SpriteComponent.Type.FILLED 时有效。
       *
       * @example
       * ```typescript
       * sprite.fillCenter = cc.v2(0, 0);
       * ```
       */

    }, {
      key: "fillCenter",
      get: function get() {
        return this._fillCenter;
      },
      set: function set(value) {
        this._fillCenter.x = value.x;
        this._fillCenter.y = value.y;

        if (this._type === SpriteType.FILLED && this._renderData) {
          this.markForUpdateRenderData();
        }
      }
      /**
       * @en
       * The fill Start, This will only have any effect if the "type" is set to “SpriteComponent.Type.FILLED”.
       *
       * @zh
       * 填充起始点，仅渲染类型设置为 SpriteComponent.Type.FILLED 时有效。
       *
       * @example
       * ```typescript
       * // -1 To 1 between the numbers
       * sprite.fillStart = 0.5;
       * ```
       */

    }, {
      key: "fillStart",
      get: function get() {
        return this._fillStart;
      },
      set: function set(value) {
        this._fillStart = (0, _utils.clamp)(value, -1, 1);

        if (this._type === SpriteType.FILLED && this._renderData) {
          this.markForUpdateRenderData();
          this._renderData.uvDirty = true;
        }
      }
      /**
       * @en
       * The fill Range, This will only have any effect if the "type" is set to “SpriteComponent.Type.FILLED”.
       *
       * @zh
       * 填充范围，仅渲染类型设置为 SpriteComponent.Type.FILLED 时有效。
       *
       * @example
       * ```typescript
       * // -1 To 1 between the numbers
       * sprite.fillRange = 1;
       * ```
       */

    }, {
      key: "fillRange",
      get: function get() {
        return this._fillRange;
      },
      set: function set(value) {
        // ??? -1 ~ 1
        this._fillRange = (0, _utils.clamp)(value, 0, 1);

        if (this._type === SpriteType.FILLED && this._renderData) {
          this.markForUpdateRenderData();
          this._renderData.uvDirty = true;
        }
      }
      /**
       * @en
       * specify the frame is trimmed or not.
       *
       * @zh
       * 是否使用裁剪模式。
       *
       * @example
       * ```typescript
       * sprite.trim = true;
       * ```
       */

    }, {
      key: "trim",
      get: function get() {
        return this._isTrimmedMode;
      },
      set: function set(value) {
        if (this._isTrimmedMode === value) {
          return;
        }

        this._isTrimmedMode = value;

        if (this._type === SpriteType.SIMPLE
        /*|| this._type === SpriteType.MESH*/
        && this._renderData) {
          this.markForUpdateRenderData(true);
        }
      }
    }, {
      key: "grayscale",
      get: function get() {
        return this._useGrayscale;
      },
      set: function set(value) {
        if (this._useGrayscale === value) {
          return;
        }

        this._useGrayscale = value;

        if (value === true) {
          this._instanceMaterialType = _uiRenderComponent.InstanceMaterialType.GRAYSCALE;
        } else {
          this._instanceMaterialType = _uiRenderComponent.InstanceMaterialType.ADDCOLORANDTEXTURE;
        }

        this._instanceMaterial();
      }
      /**
       * @en
       * Specify the size tracing mode.
       *
       * @zh
       * 精灵尺寸调整模式。
       *
       * @example
       * ```typescript
       * sprite.sizeMode = cc.SpriteComponent.SizeMode.CUSTOM;
       * ```
       */

    }, {
      key: "sizeMode",
      get: function get() {
        return this._sizeMode;
      },
      set: function set(value) {
        if (this._sizeMode === value) {
          return;
        }

        this._sizeMode = value;

        if (value !== SizeMode.CUSTOM) {
          this._applySpriteSize();
        }
      }
    }]);

    return SpriteComponent;
  }(_uiRenderComponent.UIRenderComponent), _class3.FillType = FillType, _class3.Type = SpriteType, _class3.SizeMode = SizeMode, _class3.EventType = EventType, _temp), (_applyDecoratedDescriptor(_class2.prototype, "spriteAtlas", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "spriteAtlas"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "spriteFrame", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "spriteFrame"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "type", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "type"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "fillType", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "fillType"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "fillCenter", [_dec9], Object.getOwnPropertyDescriptor(_class2.prototype, "fillCenter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "fillStart", [_dec10], Object.getOwnPropertyDescriptor(_class2.prototype, "fillStart"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "fillRange", [_dec11], Object.getOwnPropertyDescriptor(_class2.prototype, "fillRange"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "trim", [_dec12], Object.getOwnPropertyDescriptor(_class2.prototype, "trim"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "grayscale", [_classDecorator.property], Object.getOwnPropertyDescriptor(_class2.prototype, "grayscale"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "sizeMode", [_dec13], Object.getOwnPropertyDescriptor(_class2.prototype, "sizeMode"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_spriteFrame", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_type", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return SpriteType.SIMPLE;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_fillType", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return FillType.HORIZONTAL;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_sizeMode", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return SizeMode.TRIMMED;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_fillCenter", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _index2.Vec2(0, 0);
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "_fillStart", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "_fillRange", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "_isTrimmedMode", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "_useGrayscale", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "_atlas", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  })), _class2)) || _class) || _class) || _class) || _class);
  _exports.SpriteComponent = SpriteComponent;
  cc.SpriteComponent = SpriteComponent;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,