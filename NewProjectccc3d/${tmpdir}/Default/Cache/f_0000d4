(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../core/assets/index.js", "../../core/data/class-decorator.js", "../../core/value-types/enum.js", "../assembler/label/font-utils.js", "../../core/components/ui-base/ui-render-component.js", "../../core/platform/debug.js", "../../core/platform/sys.js", "../../core/default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../core/assets/index.js"), require("../../core/data/class-decorator.js"), require("../../core/value-types/enum.js"), require("../assembler/label/font-utils.js"), require("../../core/components/ui-base/ui-render-component.js"), require("../../core/platform/debug.js"), require("../../core/platform/sys.js"), require("../../core/default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.classDecorator, global._enum, global.fontUtils, global.uiRenderComponent, global.debug, global.sys, global.defaultConstants);
    global.labelComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _classDecorator, _enum, _fontUtils, _uiRenderComponent, _debug, _sys, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LabelComponent = _exports.Overflow = _exports.VerticalTextAlignment = _exports.HorizontalTextAlignment = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _class3, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  /**
   * @en Enum for horizontal text alignment.
   *
   * @zh 文本横向对齐类型。
   */
  var HorizontalTextAlignment;
  _exports.HorizontalTextAlignment = HorizontalTextAlignment;

  (function (HorizontalTextAlignment) {
    HorizontalTextAlignment[HorizontalTextAlignment["LEFT"] = 0] = "LEFT";
    HorizontalTextAlignment[HorizontalTextAlignment["CENTER"] = 1] = "CENTER";
    HorizontalTextAlignment[HorizontalTextAlignment["RIGHT"] = 2] = "RIGHT";
  })(HorizontalTextAlignment || (_exports.HorizontalTextAlignment = HorizontalTextAlignment = {}));

  (0, _enum.ccenum)(HorizontalTextAlignment);
  /**
   * @en Enum for vertical text alignment.
   *
   * @zh 文本垂直对齐类型。
   */

  var VerticalTextAlignment;
  _exports.VerticalTextAlignment = VerticalTextAlignment;

  (function (VerticalTextAlignment) {
    VerticalTextAlignment[VerticalTextAlignment["TOP"] = 0] = "TOP";
    VerticalTextAlignment[VerticalTextAlignment["CENTER"] = 1] = "CENTER";
    VerticalTextAlignment[VerticalTextAlignment["BOTTOM"] = 2] = "BOTTOM";
  })(VerticalTextAlignment || (_exports.VerticalTextAlignment = VerticalTextAlignment = {}));

  (0, _enum.ccenum)(VerticalTextAlignment);
  /**
   * @en Enum for Overflow.
   *
   * @zh 文本超载类型。
   */

  var Overflow;
  _exports.Overflow = Overflow;

  (function (Overflow) {
    Overflow[Overflow["NONE"] = 0] = "NONE";
    Overflow[Overflow["CLAMP"] = 1] = "CLAMP";
    Overflow[Overflow["SHRINK"] = 2] = "SHRINK";
    Overflow[Overflow["RESIZE_HEIGHT"] = 3] = "RESIZE_HEIGHT";
  })(Overflow || (_exports.Overflow = Overflow = {}));

  (0, _enum.ccenum)(Overflow);
  /**
   * @en Enum for cache mode.
   *
   * @zh 文本图集缓存类型。
   */

  var CacheMode;

  (function (CacheMode) {
    CacheMode[CacheMode["NONE"] = 0] = "NONE";
    CacheMode[CacheMode["BITMAP"] = 1] = "BITMAP";
    CacheMode[CacheMode["CHAR"] = 2] = "CHAR";
  })(CacheMode || (CacheMode = {}));

  (0, _enum.ccenum)(CacheMode);
  /**
   * @zh
   * Type 类型。
   */

  /**
   * @zh
   * TTF字体。
   */

  /**
   * @zh
   * 位图字体。
   */

  /**
   * @zh
   * 系统字体。
   */

  /**
   * @en
   * The Label Component.
   *
   * @zh
   * 文字标签组件。
   */

  var LabelComponent = (_dec = (0, _classDecorator.ccclass)('cc.LabelComponent'), _dec2 = (0, _classDecorator.help)('i18n:cc.LabelComponent'), _dec3 = (0, _classDecorator.executionOrder)(110), _dec4 = (0, _classDecorator.menu)('UI/Render/Label'), _dec5 = (0, _classDecorator.property)({
    displayOrder: 4,
    multiline: true,
    tooltip: 'Label 显示的文本内容字符串'
  }), _dec6 = (0, _classDecorator.property)({
    type: HorizontalTextAlignment,
    displayOrder: 5,
    tooltip: '文字水平对齐模式'
  }), _dec7 = (0, _classDecorator.property)({
    type: VerticalTextAlignment,
    displayOrder: 6,
    tooltip: '文字垂直对齐模式'
  }), _dec8 = (0, _classDecorator.property)({
    readonly: true,
    displayName: 'Actual Font Size',
    visible: false
  }), _dec9 = (0, _classDecorator.property)({
    displayOrder: 7,
    tooltip: '文字尺寸，以 point 为单位'
  }), _dec10 = (0, _classDecorator.property)({
    displayOrder: 8,
    tooltip: '文字字体名字'
  }), _dec11 = (0, _classDecorator.property)({
    displayOrder: 8,
    tooltip: '文字行高，以 point 为单位'
  }), _dec12 = (0, _classDecorator.property)({
    type: Overflow,
    displayOrder: 9,
    tooltip: '文字排版模式，包括以下三种：\n 1. CLAMP: 节点约束框之外的文字会被截断 \n 2. SHRINK: 自动根据节点约束框缩小文字\n 3. RESIZE_HEIGHT: 根据文本内容自动更新节点的 height 属性.'
  }), _dec13 = (0, _classDecorator.property)({
    displayOrder: 10,
    tooltip: '自动换行'
  }), _dec14 = (0, _classDecorator.property)({
    type: _index.Font,
    displayOrder: 11,
    tooltip: 'Label 使用的字体资源'
  }), _dec15 = (0, _classDecorator.property)({
    displayOrder: 12,
    tooltip: '是否使用系统默认字体'
  }), _dec16 = (0, _classDecorator.property)({
    type: CacheMode,
    displayOrder: 13,
    tooltip: '文本缓存模式，包括以下三种：\n 1. NONE: 不做任何缓存，文本内容进行一次绘制 \n 2. BITMAP: 将文本作为静态图像加入动态图集进行批次合并，但是不能频繁动态修改文本内容 \n 3. CHAR: 将文本拆分为字符并且把字符纹理缓存到一张字符图集中进行复用，适用于字符内容重复并且频繁更新的文本内容'
  }), _dec17 = (0, _classDecorator.property)({
    // visible: false,
    displayOrder: 15,
    tooltip: '字体加粗'
  }), _dec18 = (0, _classDecorator.property)({
    // visible: false,
    displayOrder: 16,
    tooltip: '字体倾斜'
  }), _dec19 = (0, _classDecorator.property)({
    // visible: false,
    displayOrder: 17,
    tooltip: '字体加下划线'
  }), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_UIRenderComponent) {
    _inherits(LabelComponent, _UIRenderComponent);

    _createClass(LabelComponent, [{
      key: "string",

      /**
       * @en
       * Content string of label.
       *
       * @zh
       * 标签显示的文本内容。
       */
      get: function get() {
        return this._string;
      },
      set: function set(value) {
        value = value.toString();

        if (this._string === value) {
          return;
        }

        this._string = value;
        this.updateRenderData();
      }
      /**
       * @en
       * Horizontal Alignment of label.
       *
       * @zh
       * 文本内容的水平对齐方式。
       */

    }, {
      key: "horizontalAlign",
      get: function get() {
        return this._horizontalAlign;
      },
      set: function set(value) {
        if (this._horizontalAlign === value) {
          return;
        }

        this._horizontalAlign = value;
        this.updateRenderData();
      }
      /**
       * @en
       * Vertical Alignment of label.
       *
       * @zh
       * 文本内容的垂直对齐方式。
       */

    }, {
      key: "verticalAlign",
      get: function get() {
        return this._verticalAlign;
      },
      set: function set(value) {
        if (this._verticalAlign === value) {
          return;
        }

        this._verticalAlign = value;
        this.updateRenderData();
      }
      /**
       * @en
       * The actual rendering font size in shrink mode.
       *
       * @zh
       * SHRINK 模式下面文本实际渲染的字体大小。
       */

    }, {
      key: "actualFontSize",
      get: function get() {
        return this._actualFontSize;
      },
      set: function set(value) {
        this._actualFontSize = value;
      }
      /**
       * @en
       * Font size of label.
       *
       * @zh
       * 文本字体大小。
       */

    }, {
      key: "fontSize",
      get: function get() {
        return this._fontSize;
      },
      set: function set(value) {
        if (this._fontSize === value) {
          return;
        }

        this._fontSize = value;
        this.updateRenderData();
      }
      /**
       * @en
       * Font family of label, only take effect when useSystemFont property is true.
       *
       * @zh
       * 文本字体名称, 只在 useSystemFont 属性为 true 的时候生效。
       */

    }, {
      key: "fontFamily",
      get: function get() {
        return this._fontFamily;
      },
      set: function set(value) {
        if (this._fontFamily === value) {
          return;
        }

        this._fontFamily = value;
        this.updateRenderData();
      }
      /**
       * @en
       * Line Height of label.
       *
       * @zh
       * 文本行高。
       */

    }, {
      key: "lineHeight",
      get: function get() {
        return this._lineHeight;
      },
      set: function set(value) {
        if (this._lineHeight === value) {
          return;
        }

        this._lineHeight = value;
        this.updateRenderData();
      }
      /**
       * @en
       * Overflow of label.
       *
       * @zh
       * 文字显示超出范围时的处理方式。
       */

    }, {
      key: "overflow",
      get: function get() {
        return this._overflow;
      },
      set: function set(value) {
        if (this._overflow === value) {
          return;
        }

        this._overflow = value;
        this.updateRenderData();
      }
      /**
       * @en
       * Whether auto wrap label when string width is large than label width.
       *
       * @zh
       * 是否自动换行。
       */

    }, {
      key: "enableWrapText",
      get: function get() {
        return this._enableWrapText;
      },
      set: function set(value) {
        if (this._enableWrapText === value) {
          return;
        }

        this._enableWrapText = value;
        this.updateRenderData();
      }
      /**
       * @en
       * The font of label.
       *
       * @zh
       * 文本字体。
       */

    }, {
      key: "font",
      get: function get() {
        // return this._N$file;
        return this._font;
      },
      set: function set(value) {
        if (this._font === value) {
          return;
        } // if delete the font, we should change isSystemFontUsed to true


        this._isSystemFontUsed = !value;

        if (_defaultConstants.EDITOR && value) {
          this._userDefinedFont = value;
        } // this._N$file = value;


        this._font = value; // if (value && this._isSystemFontUsed)
        //     this._isSystemFontUsed = false;

        if (typeof value === 'string') {
          (0, _debug.warnID)(4000);
        }

        if (this._renderData) {
          this.destroyRenderData();
          this._renderData = null;
        }

        this._fontAtlas = null;
        this.updateRenderData(true);
      }
      /**
       * @en
       * Whether use system font name or not.
       *
       * @zh
       * 是否使用系统字体。
       */

    }, {
      key: "useSystemFont",
      get: function get() {
        return this._isSystemFontUsed;
      },
      set: function set(value) {
        if (this._isSystemFontUsed === value) {
          return;
        }

        this.destroyRenderData();
        this._renderData = null;

        if (_defaultConstants.EDITOR) {
          if (!value && this._isSystemFontUsed && this._userDefinedFont) {
            this.font = this._userDefinedFont;
            this.spacingX = this._spacingX;
            return;
          }
        }

        this._isSystemFontUsed = !!value;

        if (value) {
          this.font = null;

          this._flushAssembler();

          this.updateRenderData();
        } // else if (!this._userDefinedFont) {
        //     this.disableRender();
        // }

      }
      /**
       * @en
       * The cache mode of label. This mode only supports system fonts.
       *
       * @zh
       * 文本缓存模式, 该模式只支持系统字体。
       */

    }, {
      key: "cacheMode",
      get: function get() {
        return this._cacheMode;
      },
      set: function set(value) {
        if (this._cacheMode === value) {
          return;
        } // if (this._cacheMode === CacheMode.BITMAP && !(this._font instanceof BitmapFont) && this._frame) {
        //     this._frame._resetDynamicAtlasFrame();
        // }


        if (this._cacheMode === CacheMode.CHAR) {
          this._ttfSpriteFrame = null;
        }

        this._cacheMode = value;
        this.updateRenderData(true);
      }
    }, {
      key: "spriteFrame",
      get: function get() {
        return this._texture;
      }
      /**
       * @en
       * Whether the font is bold.
       *
       * @zh
       * 字体是否加粗。
       */

    }, {
      key: "isBold",
      get: function get() {
        return this._isBold;
      },
      set: function set(value) {
        if (this._isBold === value) {
          return;
        }

        this._isBold = value;
        this.updateRenderData();
      }
      /**
       * @en
       * Whether the font is italic.
       *
       * @zh
       * 字体是否倾斜。
       */

    }, {
      key: "isItalic",
      get: function get() {
        return this._isItalic;
      },
      set: function set(value) {
        if (this._isItalic === value) {
          return;
        }

        this._isItalic = value;
        this.updateRenderData();
      }
      /**
       * @en
       * Whether the font is underline.
       *
       * @zh
       * 字体是否加下划线。
       */

    }, {
      key: "isUnderline",
      get: function get() {
        return this._isUnderline;
      },
      set: function set(value) {
        if (this._isUnderline === value) {
          return;
        }

        this._isUnderline = value;
        this.updateRenderData();
      }
    }, {
      key: "assemblerData",
      get: function get() {
        return this._assemblerData;
      }
    }, {
      key: "fontAtlas",
      get: function get() {
        return this._fontAtlas;
      },
      set: function set(value) {
        this._fontAtlas = value;
      }
    }, {
      key: "spacingX",
      get: function get() {
        return this._spacingX;
      },
      set: function set(value) {
        if (this._spacingX === value) {
          return;
        }

        this._spacingX = value;
        this.updateRenderData();
      }
    }, {
      key: "_bmFontOriginalSize",
      get: function get() {
        if (this._font instanceof _index.BitmapFont) {
          return this._font.fontSize;
        } else {
          return -1;
        }
      }
    }]);

    function LabelComponent() {
      var _this;

      _classCallCheck(this, LabelComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(LabelComponent).call(this));

      _initializerDefineProperty(_this, "_useOriginalSize", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_string", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_horizontalAlign", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_verticalAlign", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_actualFontSize", _descriptor5, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_fontSize", _descriptor6, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_fontFamily", _descriptor7, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_lineHeight", _descriptor8, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_overflow", _descriptor9, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_enableWrapText", _descriptor10, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_font", _descriptor11, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_isSystemFontUsed", _descriptor12, _assertThisInitialized(_this));

      _this._spacingX = 0;

      _initializerDefineProperty(_this, "_isItalic", _descriptor13, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_isBold", _descriptor14, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_isUnderline", _descriptor15, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_cacheMode", _descriptor16, _assertThisInitialized(_this));

      _this._N$file = null;
      _this._texture = null;
      _this._ttfSpriteFrame = null;
      _this._userDefinedFont = null;
      _this._assemblerData = null;
      _this._fontAtlas = null;
      _this._letterTexture = null;

      if (_defaultConstants.EDITOR) {
        _this._userDefinedFont = null;
      }

      _this._ttfSpriteFrame = null;
      return _this;
    }

    _createClass(LabelComponent, [{
      key: "onEnable",
      value: function onEnable() {
        _get(_getPrototypeOf(LabelComponent.prototype), "onEnable", this).call(this); // TODO: Hack for barbarians


        if (!this._font && !this._isSystemFontUsed) {
          this.useSystemFont = true;
        } // Reapply default font family if necessary


        if (this._isSystemFontUsed && !this._fontFamily) {
          this.fontFamily = 'Arial';
        }

        this.updateRenderData(true);
      }
    }, {
      key: "onDisable",
      value: function onDisable() {
        _get(_getPrototypeOf(LabelComponent.prototype), "onDisable", this).call(this);
      }
    }, {
      key: "onDestroy",
      value: function onDestroy() {
        if (this._assembler && this._assembler.resetAssemblerData) {
          this._assembler.resetAssemblerData(this._assemblerData);
        }

        this._assemblerData = null;

        if (this._ttfSpriteFrame) {
          var tex = this._ttfSpriteFrame.texture;

          if (tex) {
            var tex2d = tex;

            if (tex2d.image) {
              tex2d.image.destroy();
            }

            tex.destroy();
          }

          this._ttfSpriteFrame = null;
        } // texture cannot be destroyed in here, lettertexture image source is public.


        this._letterTexture = null;

        _get(_getPrototypeOf(LabelComponent.prototype), "onDestroy", this).call(this);
      }
    }, {
      key: "updateRenderData",
      value: function updateRenderData() {
        var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        this.markForUpdateRenderData();

        if (force) {
          this._flushAssembler();

          this._applyFontTexture();
        }
      }
    }, {
      key: "_render",
      value: function _render(render) {
        render.commitComp(this, this._texture.getGFXTextureView(), this._assembler, this._texture.getGFXSampler());
      }
    }, {
      key: "_updateColor",
      value: function _updateColor() {
        if (this._font instanceof _index.BitmapFont) {
          _get(_getPrototypeOf(LabelComponent.prototype), "_updateColor", this).call(this);
        } else {
          this.updateRenderData(false);
        }
      }
    }, {
      key: "_canRender",
      value: function _canRender() {
        if (!_get(_getPrototypeOf(LabelComponent.prototype), "_canRender", this).call(this) || !this._string) {
          return false;
        }

        var font = this._font;

        if (font && font instanceof _index.BitmapFont) {
          var spriteFrame = font.spriteFrame; // cannot be activated if texture not loaded yet

          if (!spriteFrame || !spriteFrame.textureLoaded()) {
            return false;
          }
        }

        return true;
      }
    }, {
      key: "_flushAssembler",
      value: function _flushAssembler() {
        var assembler = LabelComponent.Assembler.getAssembler(this);

        if (this._assembler !== assembler) {
          this.destroyRenderData();
          this._assembler = assembler;
        }

        if (!this._renderData) {
          if (this._assembler && this._assembler.createData) {
            this._renderData = this._assembler.createData(this);
            this._renderData.material = this._material;
          }
        }
      }
    }, {
      key: "_flushMaterial",
      value: function _flushMaterial() {
        this._updateMaterial(this._material);
      }
    }, {
      key: "_applyFontTexture",
      value: function _applyFontTexture() {
        var _this2 = this;

        var font = this._font;

        if (font instanceof _index.BitmapFont) {
          var spriteFrame = font.spriteFrame;

          var onBMFontTextureLoaded = function onBMFontTextureLoaded() {
            // TODO: old texture in material have been released by loader
            _this2._texture = spriteFrame;

            _this2._flushMaterial();

            if (_this2._assembler) {
              _this2._assembler.updateRenderData(_this2);
            }
          }; // cannot be activated if texture not loaded yet


          if (spriteFrame) {
            if (spriteFrame.loaded || spriteFrame.textureLoaded) {
              onBMFontTextureLoaded();
            } else {
              spriteFrame.once('load', onBMFontTextureLoaded, this);
            }
          }
        } else {
          if (this.cacheMode === CacheMode.CHAR && _sys.sys.browserType !== _sys.sys.BROWSER_TYPE_WECHAT_GAME_SUB) {
            this._letterTexture = this._assembler.getAssemblerData();
            this._texture = this._letterTexture;
          } else if (!this._ttfSpriteFrame) {
            this._ttfSpriteFrame = new _index.SpriteFrame();
            this._assemblerData = this._assembler.getAssemblerData();
            var image = new _index.ImageAsset(this._assemblerData.canvas);
            var tex = image._texture;
            this._ttfSpriteFrame.texture = tex;
          }

          if (this.cacheMode !== CacheMode.CHAR) {
            // this._frame._refreshTexture(this._texture);
            this._texture = this._ttfSpriteFrame;
          }

          this._flushMaterial();

          if (this._assembler) {
            this._assembler.updateRenderData(this);
          }
        }
      }
    }]);

    return LabelComponent;
  }(_uiRenderComponent.UIRenderComponent), _class3.HorizontalAlign = HorizontalTextAlignment, _class3.VerticalAlign = VerticalTextAlignment, _class3.Overflow = Overflow, _class3.CacheMode = CacheMode, _class3._canvasPool = new _fontUtils.CanvasPool(), _temp), (_applyDecoratedDescriptor(_class2.prototype, "string", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "string"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "horizontalAlign", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "horizontalAlign"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "verticalAlign", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "verticalAlign"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "actualFontSize", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "actualFontSize"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "fontSize", [_dec9], Object.getOwnPropertyDescriptor(_class2.prototype, "fontSize"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "fontFamily", [_dec10], Object.getOwnPropertyDescriptor(_class2.prototype, "fontFamily"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "lineHeight", [_dec11], Object.getOwnPropertyDescriptor(_class2.prototype, "lineHeight"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "overflow", [_dec12], Object.getOwnPropertyDescriptor(_class2.prototype, "overflow"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "enableWrapText", [_dec13], Object.getOwnPropertyDescriptor(_class2.prototype, "enableWrapText"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "font", [_dec14], Object.getOwnPropertyDescriptor(_class2.prototype, "font"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "useSystemFont", [_dec15], Object.getOwnPropertyDescriptor(_class2.prototype, "useSystemFont"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "cacheMode", [_dec16], Object.getOwnPropertyDescriptor(_class2.prototype, "cacheMode"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "isBold", [_dec17], Object.getOwnPropertyDescriptor(_class2.prototype, "isBold"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "isItalic", [_dec18], Object.getOwnPropertyDescriptor(_class2.prototype, "isItalic"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "isUnderline", [_dec19], Object.getOwnPropertyDescriptor(_class2.prototype, "isUnderline"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_useOriginalSize", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_string", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 'label';
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_horizontalAlign", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return HorizontalTextAlignment.CENTER;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_verticalAlign", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return VerticalTextAlignment.CENTER;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_actualFontSize", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "_fontSize", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 40;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "_fontFamily", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 'Arial';
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "_lineHeight", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 40;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "_overflow", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return Overflow.NONE;
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "_enableWrapText", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "_font", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "_isSystemFontUsed", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "_isItalic", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "_isBold", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "_isUnderline", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "_cacheMode", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return CacheMode.NONE;
    }
  })), _class2)) || _class) || _class) || _class) || _class);
  _exports.LabelComponent = LabelComponent;
  cc.LabelComponent = LabelComponent;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,