(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../assets/image-asset.js", "../../assets/sprite-frame.js", "../../assets/texture-2d.js", "../../assets/texture-cube.js", "./effects.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../assets/image-asset.js"), require("../../assets/sprite-frame.js"), require("../../assets/texture-2d.js"), require("../../assets/texture-cube.js"), require("./effects.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.imageAsset, global.spriteFrame, global.texture2d, global.textureCube, global.effects);
    global.init = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _imageAsset, _spriteFrame, _texture2d, _textureCube, _effects) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.builtinResMgr = void 0;
  _effects = _interopRequireDefault(_effects);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var BuiltinResMgr = /*#__PURE__*/function () {
    function BuiltinResMgr() {
      _classCallCheck(this, BuiltinResMgr);

      this._device = null;
      this._resources = {};
    }

    _createClass(BuiltinResMgr, [{
      key: "initBuiltinRes",
      // this should be called after renderer initialized
      value: function initBuiltinRes(device) {
        this._device = device;
        var resources = this._resources;
        var canvas = document.createElement('canvas');
        var context = canvas.getContext('2d');
        var imgAsset = new _imageAsset.ImageAsset(canvas);
        var l = canvas.width = canvas.height = 2; // ============================
        // builtin textures
        // ============================
        // black texture

        context.fillStyle = '#000';
        context.fillRect(0, 0, l, l);
        var blackTexture = new _texture2d.Texture2D();
        blackTexture._uuid = 'black-texture';
        blackTexture.image = imgAsset;
        resources[blackTexture._uuid] = blackTexture; // empty texture

        context.fillStyle = 'rgba(0,0,0,0)';
        context.fillRect(0, 0, l, l);
        var emptyBuffer = new Uint8Array(4 * 4);

        for (var i = 0; i < emptyBuffer.length; ++i) {
          emptyBuffer[i] = 0;
        }

        var emptyTexture = new _texture2d.Texture2D();
        emptyTexture._uuid = 'empty-texture';
        emptyTexture.image = imgAsset;
        emptyTexture.uploadData(emptyBuffer);
        resources[emptyTexture._uuid] = emptyTexture; // black texture

        var blackCubeTexture = new _textureCube.TextureCube();
        blackCubeTexture._uuid = 'black-cube-texture';
        blackCubeTexture.setMipFilter(_textureCube.TextureCube.Filter.LINEAR);
        blackCubeTexture.image = {
          front: new _imageAsset.ImageAsset(canvas),
          back: new _imageAsset.ImageAsset(canvas),
          left: new _imageAsset.ImageAsset(canvas),
          right: new _imageAsset.ImageAsset(canvas),
          top: new _imageAsset.ImageAsset(canvas),
          bottom: new _imageAsset.ImageAsset(canvas)
        };
        resources[blackCubeTexture._uuid] = blackCubeTexture; // grey texture

        context.fillStyle = '#777';
        context.fillRect(0, 0, l, l);
        var greyTexture = new _texture2d.Texture2D();
        greyTexture._uuid = 'grey-texture';
        greyTexture.image = imgAsset;
        resources[greyTexture._uuid] = greyTexture; // white texture

        context.fillStyle = '#fff';
        context.fillRect(0, 0, l, l);
        var whiteTexture = new _texture2d.Texture2D();
        whiteTexture._uuid = 'white-texture';
        whiteTexture.image = imgAsset;
        resources[whiteTexture._uuid] = whiteTexture; // white cube texture

        var whiteCubeTexture = new _textureCube.TextureCube();
        whiteCubeTexture._uuid = 'white-cube-texture';
        whiteCubeTexture.setMipFilter(_textureCube.TextureCube.Filter.LINEAR);
        whiteCubeTexture.image = {
          front: new _imageAsset.ImageAsset(canvas),
          back: new _imageAsset.ImageAsset(canvas),
          left: new _imageAsset.ImageAsset(canvas),
          right: new _imageAsset.ImageAsset(canvas),
          top: new _imageAsset.ImageAsset(canvas),
          bottom: new _imageAsset.ImageAsset(canvas)
        };
        resources[whiteCubeTexture._uuid] = whiteCubeTexture; // normal texture

        context.fillStyle = '#7f7fff';
        context.fillRect(0, 0, l, l);
        var normalTexture = new _texture2d.Texture2D();
        normalTexture._uuid = 'normal-texture';
        normalTexture.image = imgAsset;
        resources[normalTexture._uuid] = normalTexture; // default texture

        canvas.width = canvas.height = 16;
        context.fillStyle = '#ddd';
        context.fillRect(0, 0, 16, 16);
        context.fillStyle = '#555';
        context.fillRect(0, 0, 8, 8);
        context.fillStyle = '#555';
        context.fillRect(8, 8, 8, 8);
        var defaultTexture = new _texture2d.Texture2D();
        defaultTexture._uuid = 'default-texture';
        defaultTexture.image = imgAsset;
        resources[defaultTexture._uuid] = defaultTexture; // default cube texture

        var defaultCubeTexture = new _textureCube.TextureCube();
        defaultCubeTexture.setMipFilter(_textureCube.TextureCube.Filter.LINEAR);
        defaultCubeTexture._uuid = 'default-cube-texture';
        defaultCubeTexture.image = {
          front: new _imageAsset.ImageAsset(canvas),
          back: new _imageAsset.ImageAsset(canvas),
          left: new _imageAsset.ImageAsset(canvas),
          right: new _imageAsset.ImageAsset(canvas),
          top: new _imageAsset.ImageAsset(canvas),
          bottom: new _imageAsset.ImageAsset(canvas)
        };
        resources[defaultCubeTexture._uuid] = defaultCubeTexture;
        var spriteFrame = new _spriteFrame.SpriteFrame();
        var texture = imgAsset._texture;
        spriteFrame.texture = texture;
        spriteFrame._uuid = 'default-spriteframe';
        resources[spriteFrame._uuid] = spriteFrame; // builtin effects

        _effects.default.forEach(function (e) {
          var effect = Object.assign(new cc.EffectAsset(), e);
          effect.onLoaded();
        }); // standard material


        var standardMtl = new cc.Material();
        standardMtl._uuid = 'standard-material';
        standardMtl.initialize({
          effectName: 'builtin-standard'
        });
        resources[standardMtl._uuid] = standardMtl; // material indicating missing effect (yellow)

        var missingEfxMtl = new cc.Material();
        missingEfxMtl._uuid = 'missing-effect-material';
        missingEfxMtl.initialize({
          effectName: 'builtin-unlit',
          defines: {
            USE_COLOR: true
          }
        });
        missingEfxMtl.setProperty('mainColor', cc.color('#ffff00'));
        resources[missingEfxMtl._uuid] = missingEfxMtl; // material indicating missing material (purple)

        var missingMtl = new cc.Material();
        missingMtl._uuid = 'missing-material';
        missingMtl.initialize({
          effectName: 'builtin-unlit',
          defines: {
            USE_COLOR: true
          }
        });
        missingMtl.setProperty('mainColor', cc.color('#ff00ff'));
        resources[missingMtl._uuid] = missingMtl; // sprite material

        var spriteMtl = new cc.Material();
        spriteMtl._uuid = 'ui-base-material';
        spriteMtl.initialize({
          defines: {
            USE_TEXTURE: false
          },
          effectName: 'builtin-sprite'
        });
        resources[spriteMtl._uuid] = spriteMtl; // sprite material

        var spriteColorMtl = new cc.Material();
        spriteColorMtl._uuid = 'ui-sprite-material';
        spriteColorMtl.initialize({
          defines: {
            USE_TEXTURE: true,
            IS_GRAY: false
          },
          effectName: 'builtin-sprite'
        });
        resources[spriteColorMtl._uuid] = spriteColorMtl; // sprite gray material

        var spriteGrayMtl = new cc.Material();
        spriteGrayMtl._uuid = 'ui-sprite-gray-material';
        spriteGrayMtl.initialize({
          defines: {
            USE_TEXTURE: true,
            IS_GRAY: true
          },
          effectName: 'builtin-sprite'
        });
        resources[spriteGrayMtl._uuid] = spriteGrayMtl; // default particle material

        var defaultParticleMtl = new cc.Material();
        defaultParticleMtl._uuid = 'default-particle-material';
        defaultParticleMtl.initialize({
          effectName: 'builtin-particle'
        });
        resources[defaultParticleMtl._uuid] = defaultParticleMtl; // default particle gpu material

        var defaultParticleGPUMtl = new cc.Material();
        defaultParticleGPUMtl._uuid = 'default-particle-gpu-material';
        defaultParticleGPUMtl.initialize({
          effectName: 'builtin-particle-gpu'
        });
        resources[defaultParticleGPUMtl._uuid] = defaultParticleGPUMtl; // default particle material

        var defaultTrailMtl = new cc.Material();
        defaultTrailMtl._uuid = 'default-trail-material';
        defaultTrailMtl.initialize({
          effectName: 'builtin-particle-trail'
        });
        resources[defaultTrailMtl._uuid] = defaultTrailMtl; // default particle material

        var defaultBillboardMtl = new cc.Material();
        defaultBillboardMtl._uuid = 'default-billboard-material';
        defaultBillboardMtl.initialize({
          effectName: 'builtin-billboard'
        });
        resources[defaultBillboardMtl._uuid] = defaultBillboardMtl;
      }
    }, {
      key: "get",
      value: function get(uuid) {
        return this._resources[uuid];
      }
    }]);

    return BuiltinResMgr;
  }();

  var builtinResMgr = cc.builtinResMgr = new BuiltinResMgr();
  _exports.builtinResMgr = builtinResMgr;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,