(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../default-constants.js", "../../assets/render-texture.js", "../../components/component.js", "../../data/class-decorator.js", "../../geometry/index.js", "../../gfx/define.js", "../../math/index.js", "../../pipeline/define.js", "../../platform/view.js", "../../renderer/scene/camera.js", "../../scene-graph/index.js", "../../value-types/index.js", "../../scene-graph/node-enum.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../default-constants.js"), require("../../assets/render-texture.js"), require("../../components/component.js"), require("../../data/class-decorator.js"), require("../../geometry/index.js"), require("../../gfx/define.js"), require("../../math/index.js"), require("../../pipeline/define.js"), require("../../platform/view.js"), require("../../renderer/scene/camera.js"), require("../../scene-graph/index.js"), require("../../value-types/index.js"), require("../../scene-graph/node-enum.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.defaultConstants, global.renderTexture, global.component, global.classDecorator, global.index, global.define, global.index, global.define, global.view, global.camera, global.index, global.index, global.nodeEnum);
    global.cameraComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _defaultConstants, _renderTexture, _component, _classDecorator, _index, _define, _index2, _define2, _view, _camera, _index3, _index4, _nodeEnum) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.CameraComponent = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _class3, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  var _temp_vec3_1 = new _index2.Vec3();
  /**
   * @en The projection type.
   * @zh 投影类型。
   */


  var ProjectionType = (0, _index4.Enum)(_camera.CameraProjection);
  var FOVAxis = (0, _index4.Enum)(_camera.CameraFOVAxis);
  var Aperture = (0, _index4.Enum)(_camera.CameraAperture);
  var Shutter = (0, _index4.Enum)(_camera.CameraShutter);
  var ISO = (0, _index4.Enum)(_camera.CameraISO);
  var ClearFlag = (0, _index4.Enum)({
    SKYBOX: _camera.SKYBOX_FLAG | _define.GFXClearFlag.DEPTH_STENCIL,
    SOLID_COLOR: _define.GFXClearFlag.ALL,
    DEPTH_ONLY: _define.GFXClearFlag.DEPTH_STENCIL,
    DONT_CLEAR: _define.GFXClearFlag.NONE
  });
  /**
   * @en The Camera Component.
   * @zh 相机组件。
   */

  var CameraComponent = (_dec = (0, _classDecorator.ccclass)('cc.CameraComponent'), _dec2 = (0, _classDecorator.help)('i18n:cc.CameraComponent'), _dec3 = (0, _classDecorator.menu)('Components/Camera'), _dec4 = (0, _classDecorator.property)({
    tooltip: 'i18n:camera.priority',
    displayOrder: 0
  }), _dec5 = (0, _classDecorator.property)({
    type: _index3.Layers.BitMask,
    tooltip: 'i18n:camera.visibility',
    displayOrder: 1
  }), _dec6 = (0, _classDecorator.property)({
    type: ClearFlag,
    tooltip: 'i18n:camera.clear_flags',
    displayOrder: 2
  }), _dec7 = (0, _classDecorator.property)({
    tooltip: 'i18n:camera.color',
    displayOrder: 3
  }), _dec8 = (0, _classDecorator.property)({
    tooltip: 'i18n:camera.depth',
    displayOrder: 4
  }), _dec9 = (0, _classDecorator.property)({
    tooltip: 'i18n:camera.stencil',
    displayOrder: 5
  }), _dec10 = (0, _classDecorator.property)({
    type: ProjectionType,
    tooltip: 'i18n:camera.projection',
    displayOrder: 6
  }), _dec11 = (0, _classDecorator.property)({
    type: FOVAxis,
    tooltip: 'i18n:camera.fov_axis',
    displayOrder: 7
  }), _dec12 = (0, _classDecorator.property)({
    tooltip: 'i18n:camera.fov',
    displayOrder: 8
  }), _dec13 = (0, _classDecorator.property)({
    tooltip: 'i18n:camera.ortho_height',
    displayOrder: 9
  }), _dec14 = (0, _classDecorator.property)({
    tooltip: 'i18n:camera.near',
    displayOrder: 10
  }), _dec15 = (0, _classDecorator.property)({
    tooltip: 'i18n:camera.far',
    displayOrder: 11
  }), _dec16 = (0, _classDecorator.property)({
    type: Aperture,
    tooltip: 'i18n:camera.aperture',
    displayOrder: 12
  }), _dec17 = (0, _classDecorator.property)({
    type: Shutter,
    tooltip: 'i18n:camera.shutter',
    displayOrder: 13
  }), _dec18 = (0, _classDecorator.property)({
    type: ISO,
    tooltip: 'i18n:camera.ISO',
    displayOrder: 14
  }), _dec19 = (0, _classDecorator.property)({
    tooltip: 'i18n:camera.rect',
    displayOrder: 15
  }), _dec20 = (0, _classDecorator.property)({
    type: _renderTexture.RenderTexture,
    tooltip: 'i18n:camera.target_texture',
    displayOrder: 16
  }), _dec(_class = _dec2(_class = _dec3(_class = (0, _classDecorator.executeInEditMode)(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Component) {
    _inherits(CameraComponent, _Component);

    function CameraComponent() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, CameraComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CameraComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _initializerDefineProperty(_this, "_projection", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_priority", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_fov", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_fovAxis", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_orthoHeight", _descriptor5, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_near", _descriptor6, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_far", _descriptor7, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_color", _descriptor8, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_depth", _descriptor9, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_stencil", _descriptor10, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_clearFlags", _descriptor11, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_rect", _descriptor12, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_aperture", _descriptor13, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_shutter", _descriptor14, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_iso", _descriptor15, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_screenScale", _descriptor16, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_visibility", _descriptor17, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_targetTexture", _descriptor18, _assertThisInitialized(_this));

      _this._camera = null;
      _this._inEditorMode = false;
      _this._flows = undefined;
      return _this;
    }

    _createClass(CameraComponent, [{
      key: "onLoad",
      value: function onLoad() {
        cc.director.on(cc.Director.EVENT_AFTER_SCENE_LAUNCH, this.onSceneChanged, this);

        this._createCamera();
      }
    }, {
      key: "onEnable",
      value: function onEnable() {
        this.node.hasChangedFlags |= _nodeEnum.TransformBit.POSITION; // trigger camera matrix update

        if (this._camera) {
          this._attachToScene();

          return;
        }
      }
    }, {
      key: "onDisable",
      value: function onDisable() {
        if (this._camera) {
          this._detachFromScene();
        }
      }
    }, {
      key: "onDestroy",
      value: function onDestroy() {
        if (this._camera) {
          cc.director.root.destroyCamera(this._camera);
          this._camera = null;
        }

        if (this._targetTexture) {
          this._targetTexture.off('resize');
        }
      }
    }, {
      key: "screenPointToRay",
      value: function screenPointToRay(x, y, out) {
        if (!out) {
          out = _index.ray.create();
        }

        if (this._camera) {
          this._camera.screenPointToRay(out, x, y);
        }

        return out;
      }
    }, {
      key: "worldToScreen",
      value: function worldToScreen(worldPos, out) {
        if (!out) {
          out = new _index2.Vec3();
        }

        if (this._camera) {
          this._camera.worldToScreen(out, worldPos);
        }

        return out;
      }
    }, {
      key: "screenToWorld",
      value: function screenToWorld(screenPos, out) {
        if (!out) {
          out = this.node.getWorldPosition();
        }

        if (this._camera) {
          this._camera.screenToWorld(out, screenPos);
        }

        return out;
      }
      /**
       * @zh 3D 节点转 UI 本地节点坐标。
       * 注意：千万不要设置负责做转换的 uiNode 和最终设置位置的 uiNode 是同一个 node，否则可能出现跳动现象。
       * @param wpos 3D 节点事件坐标
       * @param uiNode UI 节点
       * @param out 返回在当前传入的 UI 节点下的偏移量
       *
       * @example
       * ```typescript
       * this.convertToUINode(target.worldPosition, uiNode.parent, out);
       * uiNode.position = out;
       * ```
       */

    }, {
      key: "convertToUINode",
      value: function convertToUINode(wpos, uiNode, out) {
        if (!out) {
          out = new _index2.Vec3();
        }

        if (!this._camera) {
          return out;
        }

        this.worldToScreen(wpos, _temp_vec3_1);
        var cmp = uiNode.getComponent('cc.UITransformComponent');

        var designSize = _view.view.getVisibleSize();

        var xoffset = _temp_vec3_1.x - this._camera.width * 0.5;
        var yoffset = _temp_vec3_1.y - this._camera.height * 0.5;
        _temp_vec3_1.x = xoffset / cc.view.getScaleX() + designSize.width * 0.5;
        _temp_vec3_1.y = yoffset / cc.view.getScaleY() + designSize.height * 0.5;

        if (cmp) {
          cmp.convertToNodeSpaceAR(_temp_vec3_1, out);
        }

        return out;
      }
    }, {
      key: "_createCamera",
      value: function _createCamera() {
        this._camera = cc.director.root.createCamera();

        this._camera.initialize({
          name: this.node.name,
          node: this.node,
          projection: this._projection,
          window: this._inEditorMode ? cc.director.root && cc.director.root.mainWindow : cc.director.root && cc.director.root.tempWindow,
          priority: this._priority,
          flows: this._flows
        });

        if (this._camera) {
          this._camera.viewport = this._rect;
          this._camera.fovAxis = this._fovAxis;
          this._camera.fov = (0, _index2.toRadian)(this._fov);
          this._camera.orthoHeight = this._orthoHeight;
          this._camera.nearClip = this._near;
          this._camera.farClip = this._far;
          var r = this._color.x;
          var g = this._color.y;
          var b = this._color.z;
          var a = this._color.w;
          this._camera.clearColor = {
            r: r,
            g: g,
            b: b,
            a: a
          };
          this._camera.clearDepth = this._depth;
          this._camera.clearStencil = this._stencil;
          this._camera.clearFlag = this._clearFlags;
          this._camera.visibility = this._visibility;
          this._camera.aperture = this._aperture;
          this._camera.shutter = this._shutter;
          this._camera.iso = this._iso;
        }

        this._updateTargetTexture();
      }
    }, {
      key: "_attachToScene",
      value: function _attachToScene() {
        if (!this.node.scene || !this._camera) {
          return;
        }

        if (this._camera && this._camera.scene) {
          this._camera.scene.removeCamera(this._camera);
        }

        var scene = this._getRenderScene();

        scene.addCamera(this._camera);
      }
    }, {
      key: "_detachFromScene",
      value: function _detachFromScene() {
        if (this._camera && this._camera.scene) {
          this._camera.scene.removeCamera(this._camera);
        }
      }
    }, {
      key: "onSceneChanged",
      value: function onSceneChanged(scene) {
        // to handle scene switch of editor camera
        if (this._camera && this._camera.scene == null) {
          this._attachToScene();
        }
      }
    }, {
      key: "_chechTargetTextureEvent",
      value: function _chechTargetTextureEvent(old) {
        var _this2 = this;

        var resizeFunc = function resizeFunc(window) {
          if (_this2._camera) {
            _this2._camera.setFixedSize(window.width, window.height);
          }
        };

        if (old) {
          old.off('resize');
        }

        if (this._targetTexture) {
          this._targetTexture.on('resize', resizeFunc, this);
        }
      }
    }, {
      key: "_updateTargetTexture",
      value: function _updateTargetTexture() {
        if (!this._camera) {
          return;
        }

        if (this._targetTexture) {
          var window = this._targetTexture.getGFXWindow();

          this._camera.changeTargetWindow(window);

          this._camera.setFixedSize(window.width, window.height);
        }
      }
    }, {
      key: "camera",
      get: function get() {
        return this._camera;
      }
      /**
       * @en Render priority of the camera, in ascending-order.
       * @zh 相机的渲染优先级，值越小越优先渲染。
       */

    }, {
      key: "priority",
      get: function get() {
        return this._priority;
      },
      set: function set(val) {
        this._priority = val;

        if (this._camera) {
          this._camera.priority = val;
        }
      }
      /**
       * @en Visibility mask, declaring a set of node layers that will be visible to this camera.
       * @zh 可见性掩码，声明在当前相机中可见的节点层级集合。
       */

    }, {
      key: "visibility",
      get: function get() {
        return this._visibility;
      },
      set: function set(val) {
        this._visibility = val;

        if (this._camera) {
          this._camera.visibility = val;
        }
      }
      /**
       * @en Clearing flags of the camera, specifies which part of the framebuffer will be actually cleared every frame.
       * @zh 相机的缓冲清除标志位，指定帧缓冲的哪部分要每帧清除。
       */

    }, {
      key: "clearFlags",
      get: function get() {
        return this._clearFlags;
      },
      set: function set(val) {
        this._clearFlags = val;

        if (this._camera) {
          this._camera.clearFlag = val;
        }
      }
      /**
       * @en Clearing color of the camera.
       * @zh 相机的颜色缓冲默认值。
       */

    }, {
      key: "clearColor",
      get: function get() {
        return this._color;
      },
      set: function set(val) {
        this._color.set(val);

        if (this._camera) {
          this._camera.clearColor.r = this._color.x;
          this._camera.clearColor.g = this._color.y;
          this._camera.clearColor.b = this._color.z;
          this._camera.clearColor.a = this._color.w;
        }
      }
      /**
       * @en Clearing depth of the camera.
       * @zh 相机的深度缓冲默认值。
       */

    }, {
      key: "clearDepth",
      get: function get() {
        return this._depth;
      },
      set: function set(val) {
        this._depth = val;

        if (this._camera) {
          this._camera.clearDepth = val;
        }
      }
      /**
       * @en Clearing stencil of the camera.
       * @zh 相机的模板缓冲默认值。
       */

    }, {
      key: "clearStencil",
      get: function get() {
        return this._stencil;
      },
      set: function set(val) {
        this._stencil = val;

        if (this._camera) {
          this._camera.clearStencil = val;
        }
      }
      /**
       * @en Projection type of the camera.
       * @zh 相机的投影类型。
       */

    }, {
      key: "projection",
      get: function get() {
        return this._projection;
      },
      set: function set(val) {
        this._projection = val;

        if (this._camera) {
          this._camera.projectionType = val;
        }
      }
      /**
       * @en The axis on which the FOV would be fixed regardless of screen aspect changes.
       * @zh 指定视角的固定轴向，在此轴上不会跟随屏幕长宽比例变化。
       */

    }, {
      key: "fovAxis",
      get: function get() {
        return this._fovAxis;
      },
      set: function set(val) {
        if (val === this._fovAxis) {
          return;
        }

        this._fovAxis = val;

        if (this._camera) {
          this._camera.fovAxis = val;

          if (val === _camera.CameraFOVAxis.VERTICAL) {
            this.fov = this._fov * this._camera.aspect;
          } else {
            this.fov = this._fov / this._camera.aspect;
          }
        }
      }
      /**
       * @en Field of view of the camera.
       * @zh 相机的视角大小。
       */

    }, {
      key: "fov",
      get: function get() {
        return this._fov;
      },
      set: function set(val) {
        this._fov = val;

        if (this._camera) {
          this._camera.fov = (0, _index2.toRadian)(val);
        }
      }
      /**
       * @en Viewport height in orthographic mode.
       * @zh 正交模式下的相机视角高度。
       */

    }, {
      key: "orthoHeight",
      get: function get() {
        return this._orthoHeight;
      },
      set: function set(val) {
        this._orthoHeight = val;

        if (this._camera) {
          this._camera.orthoHeight = val;
        }
      }
      /**
       * @en Near clipping distance of the camera, should be as large as possible within acceptable range.
       * @zh 相机的近裁剪距离，应在可接受范围内尽量取最大。
       */

    }, {
      key: "near",
      get: function get() {
        return this._near;
      },
      set: function set(val) {
        this._near = val;

        if (this._camera) {
          this._camera.nearClip = val;
        }
      }
      /**
       * @en Far clipping distance of the camera, should be as small as possible within acceptable range.
       * @zh 相机的远裁剪距离，应在可接受范围内尽量取最小。
       */

    }, {
      key: "far",
      get: function get() {
        return this._far;
      },
      set: function set(val) {
        this._far = val;

        if (this._camera) {
          this._camera.farClip = val;
        }
      }
      /**
       * @en Camera aperture, controls the exposure parameter.
       * @zh 相机光圈，影响相机的曝光参数。
       */

    }, {
      key: "aperture",
      get: function get() {
        return this._aperture;
      },
      set: function set(val) {
        this._aperture = val;

        if (this._camera) {
          this._camera.aperture = val;
        }
      }
      /**
       * @en Camera shutter, controls the exposure parameter.
       * @zh 相机快门，影响相机的曝光参数。
       */

    }, {
      key: "shutter",
      get: function get() {
        return this._shutter;
      },
      set: function set(val) {
        this._shutter = val;

        if (this._camera) {
          this._camera.shutter = val;
        }
      }
      /**
       * @en Camera ISO, controls the exposure parameter.
       * @zh 相机感光度，影响相机的曝光参数。
       */

    }, {
      key: "iso",
      get: function get() {
        return this._iso;
      },
      set: function set(val) {
        this._iso = val;

        if (this._camera) {
          this._camera.iso = val;
        }
      }
      /**
       * @en Screen viewport of the camera wrt. the sceen size.
       * @zh 此相机最终渲染到屏幕上的视口位置和大小。
       */

    }, {
      key: "rect",
      get: function get() {
        return this._rect;
      },
      set: function set(val) {
        this._rect = val;

        if (this._camera) {
          this._camera.viewport = val;
        }
      }
      /**
       * @en Output render texture of the camera. Default to null, which outputs directly to screen.
       * @zh 指定此相机的渲染输出目标贴图，默认为空，直接渲染到屏幕。
       */

    }, {
      key: "targetTexture",
      get: function get() {
        return this._targetTexture;
      },
      set: function set(value) {
        if (this._targetTexture === value) {
          return;
        }

        var old = this._targetTexture;
        this._targetTexture = value;

        this._chechTargetTextureEvent(old);

        this._updateTargetTexture();

        if (!value && this._camera) {
          this._camera.changeTargetWindow(_defaultConstants.EDITOR ? cc.director.root.tempWindow : null);

          this._camera.isWindowSize = true;
        }
      }
      /**
       * @en Scale of the internal buffer size,
       * set to 1 to keep the same with the canvas size.
       * @zh 相机内部缓冲尺寸的缩放值, 1 为与 canvas 尺寸相同。
       */

    }, {
      key: "screenScale",
      get: function get() {
        return this._screenScale;
      },
      set: function set(val) {
        this._screenScale = val;

        if (this._camera) {
          this._camera.screenScale = val;
        }
      }
    }, {
      key: "inEditorMode",
      get: function get() {
        return this._inEditorMode;
      },
      set: function set(value) {
        this._inEditorMode = value;

        if (this._camera) {
          this._camera.changeTargetWindow(value ? cc.director.root && cc.director.root.mainWindow : cc.director.root && cc.director.root.tempWindow);
        }
      }
    }, {
      key: "flows",
      set: function set(val) {
        if (this._camera) {
          this._camera.flows = val;
        }

        this._flows = val;
      }
    }]);

    return CameraComponent;
  }(_component.Component), _class3.ProjectionType = ProjectionType, _class3.FOVAxis = FOVAxis, _class3.ClearFlag = ClearFlag, _class3.Aperture = Aperture, _class3.Shutter = Shutter, _class3.ISO = ISO, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_projection", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return ProjectionType.PERSPECTIVE;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_priority", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_fov", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 45;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_fovAxis", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return FOVAxis.VERTICAL;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_orthoHeight", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 10;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "_near", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 1;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "_far", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 1000;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "_color", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _index2.Color('#333333');
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "_depth", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 1;
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "_stencil", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "_clearFlags", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return ClearFlag.SOLID_COLOR;
    }
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "_rect", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _index2.Rect(0, 0, 1, 1);
    }
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "_aperture", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return Aperture.F16_0;
    }
  }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "_shutter", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return Shutter.D125;
    }
  }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "_iso", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return ISO.ISO100;
    }
  }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "_screenScale", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 1;
    }
  }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "_visibility", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _define2.CAMERA_DEFAULT_MASK;
    }
  }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "_targetTexture", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "priority", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "priority"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "visibility", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "visibility"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "clearFlags", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "clearFlags"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "clearColor", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "clearColor"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "clearDepth", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "clearDepth"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "clearStencil", [_dec9], Object.getOwnPropertyDescriptor(_class2.prototype, "clearStencil"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "projection", [_dec10], Object.getOwnPropertyDescriptor(_class2.prototype, "projection"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "fovAxis", [_dec11], Object.getOwnPropertyDescriptor(_class2.prototype, "fovAxis"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "fov", [_dec12], Object.getOwnPropertyDescriptor(_class2.prototype, "fov"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "orthoHeight", [_dec13], Object.getOwnPropertyDescriptor(_class2.prototype, "orthoHeight"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "near", [_dec14], Object.getOwnPropertyDescriptor(_class2.prototype, "near"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "far", [_dec15], Object.getOwnPropertyDescriptor(_class2.prototype, "far"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "aperture", [_dec16], Object.getOwnPropertyDescriptor(_class2.prototype, "aperture"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "shutter", [_dec17], Object.getOwnPropertyDescriptor(_class2.prototype, "shutter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "iso", [_dec18], Object.getOwnPropertyDescriptor(_class2.prototype, "iso"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "rect", [_dec19], Object.getOwnPropertyDescriptor(_class2.prototype, "rect"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "targetTexture", [_dec20], Object.getOwnPropertyDescriptor(_class2.prototype, "targetTexture"), _class2.prototype)), _class2)) || _class) || _class) || _class) || _class);
  _exports.CameraComponent = CameraComponent;

  (function (_CameraComponent) {})(CameraComponent || (_exports.CameraComponent = CameraComponent = {}));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,