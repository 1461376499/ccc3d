(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../data/class.js", "../value-types/value-type.js", "./utils.js", "./vec3.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../data/class.js"), require("../value-types/value-type.js"), require("./utils.js"), require("./vec3.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global._class, global.valueType, global.utils, global.vec3);
    global.mat3 = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _class, _valueType, _utils, _vec) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Mat3 = void 0;
  _class = _interopRequireDefault(_class);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  /**
   * 表示三维（3x3）矩阵。
   */
  // tslint:disable:one-variable-per-declaration
  var Mat3 = /*#__PURE__*/function (_ValueType) {
    _inherits(Mat3, _ValueType);

    _createClass(Mat3, null, [{
      key: "clone",

      /**
       * @zh 获得指定矩阵的拷贝
       */
      value: function clone(a) {
        return new Mat3(a.m00, a.m01, a.m02, a.m03, a.m04, a.m05, a.m06, a.m07, a.m08);
      }
      /**
       * @zh 复制目标矩阵
       */

    }, {
      key: "copy",
      value: function copy(out, a) {
        out.m00 = a.m00;
        out.m01 = a.m01;
        out.m02 = a.m02;
        out.m03 = a.m03;
        out.m04 = a.m04;
        out.m05 = a.m05;
        out.m06 = a.m06;
        out.m07 = a.m07;
        out.m08 = a.m08;
        return out;
      }
      /**
       * @zh 设置矩阵值
       */

    }, {
      key: "set",
      value: function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
        out.m00 = m00;
        out.m01 = m01;
        out.m02 = m02;
        out.m03 = m10;
        out.m04 = m11;
        out.m05 = m12;
        out.m06 = m20;
        out.m07 = m21;
        out.m08 = m22;
        return out;
      }
      /**
       * @zh 将目标赋值为单位矩阵
       */

    }, {
      key: "identity",
      value: function identity(out) {
        out.m00 = 1;
        out.m01 = 0;
        out.m02 = 0;
        out.m03 = 0;
        out.m04 = 1;
        out.m05 = 0;
        out.m06 = 0;
        out.m07 = 0;
        out.m08 = 1;
        return out;
      }
      /**
       * @zh 转置矩阵
       */

    }, {
      key: "transpose",
      value: function transpose(out, a) {
        // If we are transposing ourselves we can skip a few steps but have to cache some values
        if (out === a) {
          var a01 = a.m01;
          var a02 = a.m02;
          var a12 = a.m05;
          out.m01 = a.m03;
          out.m02 = a.m06;
          out.m03 = a01;
          out.m05 = a.m07;
          out.m06 = a02;
          out.m07 = a12;
        } else {
          out.m00 = a.m00;
          out.m01 = a.m03;
          out.m02 = a.m06;
          out.m03 = a.m01;
          out.m04 = a.m04;
          out.m05 = a.m07;
          out.m06 = a.m02;
          out.m07 = a.m05;
          out.m08 = a.m08;
        }

        return out;
      }
      /**
       * @zh 矩阵求逆，注意，在矩阵不可逆时，会返回一个全为 0 的矩阵。
       */

    }, {
      key: "invert",
      value: function invert(out, a) {
        var a00 = a.m00;
        var a01 = a.m01;
        var a02 = a.m02;
        var a10 = a.m03;
        var a11 = a.m04;
        var a12 = a.m05;
        var a20 = a.m06;
        var a21 = a.m07;
        var a22 = a.m08;
        var b01 = a22 * a11 - a12 * a21;
        var b11 = -a22 * a10 + a12 * a20;
        var b21 = a21 * a10 - a11 * a20; // Calculate the determinant

        var det = a00 * b01 + a01 * b11 + a02 * b21;

        if (det === 0) {
          out.m00 = 0;
          out.m01 = 0;
          out.m02 = 0;
          out.m03 = 0;
          out.m04 = 0;
          out.m05 = 0;
          out.m06 = 0;
          out.m07 = 0;
          out.m08 = 0;
          return out;
        }

        det = 1.0 / det;
        out.m00 = b01 * det;
        out.m01 = (-a22 * a01 + a02 * a21) * det;
        out.m02 = (a12 * a01 - a02 * a11) * det;
        out.m03 = b11 * det;
        out.m04 = (a22 * a00 - a02 * a20) * det;
        out.m05 = (-a12 * a00 + a02 * a10) * det;
        out.m06 = b21 * det;
        out.m07 = (-a21 * a00 + a01 * a20) * det;
        out.m08 = (a11 * a00 - a01 * a10) * det;
        return out;
      }
      /**
       * @zh 矩阵行列式
       */

    }, {
      key: "determinant",
      value: function determinant(a) {
        var a00 = a.m00;
        var a01 = a.m01;
        var a02 = a.m02;
        var a10 = a.m03;
        var a11 = a.m04;
        var a12 = a.m05;
        var a20 = a.m06;
        var a21 = a.m07;
        var a22 = a.m08;
        return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
      }
      /**
       * @zh 矩阵乘法
       */

    }, {
      key: "multiply",
      value: function multiply(out, a, b) {
        var a00 = a.m00;
        var a01 = a.m01;
        var a02 = a.m02;
        var a10 = a.m03;
        var a11 = a.m04;
        var a12 = a.m05;
        var a20 = a.m06;
        var a21 = a.m07;
        var a22 = a.m08;
        var b00 = b.m00,
            b01 = b.m01,
            b02 = b.m02;
        var b10 = b.m03,
            b11 = b.m04,
            b12 = b.m05;
        var b20 = b.m06,
            b21 = b.m07,
            b22 = b.m08;
        out.m00 = b00 * a00 + b01 * a10 + b02 * a20;
        out.m01 = b00 * a01 + b01 * a11 + b02 * a21;
        out.m02 = b00 * a02 + b01 * a12 + b02 * a22;
        out.m03 = b10 * a00 + b11 * a10 + b12 * a20;
        out.m04 = b10 * a01 + b11 * a11 + b12 * a21;
        out.m05 = b10 * a02 + b11 * a12 + b12 * a22;
        out.m06 = b20 * a00 + b21 * a10 + b22 * a20;
        out.m07 = b20 * a01 + b21 * a11 + b22 * a21;
        out.m08 = b20 * a02 + b21 * a12 + b22 * a22;
        return out;
      }
      /**
       * @zh 取四阶矩阵的前三阶，与三阶矩阵相乘
       */

    }, {
      key: "multiplyMat4",
      value: function multiplyMat4(out, a, b) {
        var a00 = a.m00;
        var a01 = a.m01;
        var a02 = a.m02;
        var a10 = a.m03;
        var a11 = a.m04;
        var a12 = a.m05;
        var a20 = a.m06;
        var a21 = a.m07;
        var a22 = a.m08;
        var b00 = b.m00,
            b01 = b.m01,
            b02 = b.m02;
        var b10 = b.m04,
            b11 = b.m05,
            b12 = b.m06;
        var b20 = b.m08,
            b21 = b.m09,
            b22 = b.m10;
        out.m00 = b00 * a00 + b01 * a10 + b02 * a20;
        out.m01 = b00 * a01 + b01 * a11 + b02 * a21;
        out.m02 = b00 * a02 + b01 * a12 + b02 * a22;
        out.m03 = b10 * a00 + b11 * a10 + b12 * a20;
        out.m04 = b10 * a01 + b11 * a11 + b12 * a21;
        out.m05 = b10 * a02 + b11 * a12 + b12 * a22;
        out.m06 = b20 * a00 + b21 * a10 + b22 * a20;
        out.m07 = b20 * a01 + b21 * a11 + b22 * a21;
        out.m08 = b20 * a02 + b21 * a12 + b22 * a22;
        return out;
      }
      /**
       * @zh 在给定矩阵变换基础上加入变换
       * @deprecated 将在 1.2 移除，请转用 `Mat3.transform` 方法。
       */

    }, {
      key: "transfrom",
      value: function transfrom(out, a, v) {
        Mat3.transform(out, a, v);
      }
      /**
       * @zh 在给定矩阵变换基础上加入变换
       */

    }, {
      key: "transform",
      value: function transform(out, a, v) {
        var a00 = a.m00;
        var a01 = a.m01;
        var a02 = a.m02;
        var a10 = a.m03;
        var a11 = a.m04;
        var a12 = a.m05;
        var a20 = a.m06;
        var a21 = a.m07;
        var a22 = a.m08;
        var x = v.x,
            y = v.y;
        out.m00 = a00;
        out.m01 = a01;
        out.m02 = a02;
        out.m03 = a10;
        out.m04 = a11;
        out.m05 = a12;
        out.m06 = x * a00 + y * a10 + a20;
        out.m07 = x * a01 + y * a11 + a21;
        out.m08 = x * a02 + y * a12 + a22;
        return out;
      }
      /**
       * @zh 在给定矩阵变换基础上加入新缩放变换
       */

    }, {
      key: "scale",
      value: function scale(out, a, v) {
        var x = v.x,
            y = v.y;
        out.m00 = x * a.m00;
        out.m01 = x * a.m01;
        out.m02 = x * a.m02;
        out.m03 = y * a.m03;
        out.m04 = y * a.m04;
        out.m05 = y * a.m05;
        out.m06 = a.m06;
        out.m07 = a.m07;
        out.m08 = a.m08;
        return out;
      }
      /**
       * @zh 在给定矩阵变换基础上加入新旋转变换
       * @param rad 旋转弧度
       */

    }, {
      key: "rotate",
      value: function rotate(out, a, rad) {
        var a00 = a.m00;
        var a01 = a.m01;
        var a02 = a.m02;
        var a10 = a.m03;
        var a11 = a.m04;
        var a12 = a.m05;
        var a20 = a.m06;
        var a21 = a.m07;
        var a22 = a.m08;
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        out.m00 = c * a00 + s * a10;
        out.m01 = c * a01 + s * a11;
        out.m02 = c * a02 + s * a12;
        out.m03 = c * a10 - s * a00;
        out.m04 = c * a11 - s * a01;
        out.m05 = c * a12 - s * a02;
        out.m06 = a20;
        out.m07 = a21;
        out.m08 = a22;
        return out;
      }
      /**
       * @zh 取四阶矩阵的前三阶
       */

    }, {
      key: "fromMat4",
      value: function fromMat4(out, a) {
        out.m00 = a.m00;
        out.m01 = a.m01;
        out.m02 = a.m02;
        out.m03 = a.m04;
        out.m04 = a.m05;
        out.m05 = a.m06;
        out.m06 = a.m08;
        out.m07 = a.m09;
        out.m08 = a.m10;
        return out;
      }
      /**
       * @zh 根据视口前方向和上方向计算矩阵
       * @param view 视口面向的前方向，必须归一化
       * @param up 视口的上方向，必须归一化，默认为 (0, 1, 0)
       */

    }, {
      key: "fromViewUp",
      value: function fromViewUp(out, view, up) {
        if (_vec.Vec3.lengthSqr(view) < _utils.EPSILON * _utils.EPSILON) {
          Mat3.identity(out);
          return out;
        }

        up = up || _vec.Vec3.UNIT_Y;

        _vec.Vec3.normalize(v3_1, _vec.Vec3.cross(v3_1, up, view));

        if (_vec.Vec3.lengthSqr(v3_1) < _utils.EPSILON * _utils.EPSILON) {
          Mat3.identity(out);
          return out;
        }

        _vec.Vec3.cross(v3_2, view, v3_1);

        Mat3.set(out, v3_1.x, v3_1.y, v3_1.z, v3_2.x, v3_2.y, v3_2.z, view.x, view.y, view.z);
        return out;
      }
      /**
       * @zh 计算位移矩阵
       */

    }, {
      key: "fromTranslation",
      value: function fromTranslation(out, v) {
        out.m00 = 1;
        out.m01 = 0;
        out.m02 = 0;
        out.m03 = 0;
        out.m04 = 1;
        out.m05 = 0;
        out.m06 = v.x;
        out.m07 = v.y;
        out.m08 = 1;
        return out;
      }
      /**
       * @zh 计算缩放矩阵
       */

    }, {
      key: "fromScaling",
      value: function fromScaling(out, v) {
        out.m00 = v.x;
        out.m01 = 0;
        out.m02 = 0;
        out.m03 = 0;
        out.m04 = v.y;
        out.m05 = 0;
        out.m06 = 0;
        out.m07 = 0;
        out.m08 = 1;
        return out;
      }
      /**
       * @zh 计算旋转矩阵
       */

    }, {
      key: "fromRotation",
      value: function fromRotation(out, rad) {
        var s = Math.sin(rad),
            c = Math.cos(rad);
        out.m00 = c;
        out.m01 = s;
        out.m02 = 0;
        out.m03 = -s;
        out.m04 = c;
        out.m05 = 0;
        out.m06 = 0;
        out.m07 = 0;
        out.m08 = 1;
        return out;
      }
      /**
       * @zh 根据四元数旋转信息计算矩阵
       */

    }, {
      key: "fromQuat",
      value: function fromQuat(out, q) {
        var x = q.x,
            y = q.y,
            z = q.z,
            w = q.w;
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var yx = y * x2;
        var yy = y * y2;
        var zx = z * x2;
        var zy = z * y2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        out.m00 = 1 - yy - zz;
        out.m03 = yx - wz;
        out.m06 = zx + wy;
        out.m01 = yx + wz;
        out.m04 = 1 - xx - zz;
        out.m07 = zy - wx;
        out.m02 = zx - wy;
        out.m05 = zy + wx;
        out.m08 = 1 - xx - yy;
        return out;
      }
      /**
       * @zh 计算指定四维矩阵的逆转置三维矩阵
       */

    }, {
      key: "inverseTransposeMat4",
      value: function inverseTransposeMat4(out, a) {
        var a00 = a.m00,
            a01 = a.m01,
            a02 = a.m02,
            a03 = a.m03,
            a10 = a.m04,
            a11 = a.m05,
            a12 = a.m06,
            a13 = a.m07,
            a20 = a.m08,
            a21 = a.m09,
            a22 = a.m10,
            a23 = a.m11,
            a30 = a.m12,
            a31 = a.m13,
            a32 = a.m14,
            a33 = a.m15;
        var b00 = a00 * a11 - a01 * a10;
        var b01 = a00 * a12 - a02 * a10;
        var b02 = a00 * a13 - a03 * a10;
        var b03 = a01 * a12 - a02 * a11;
        var b04 = a01 * a13 - a03 * a11;
        var b05 = a02 * a13 - a03 * a12;
        var b06 = a20 * a31 - a21 * a30;
        var b07 = a20 * a32 - a22 * a30;
        var b08 = a20 * a33 - a23 * a30;
        var b09 = a21 * a32 - a22 * a31;
        var b10 = a21 * a33 - a23 * a31;
        var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

        var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

        if (!det) {
          return null;
        }

        det = 1.0 / det;
        out.m00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
        out.m01 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
        out.m02 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
        out.m03 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
        out.m04 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
        out.m05 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
        out.m06 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
        out.m07 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
        out.m08 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
        return out;
      }
      /**
       * @zh 矩阵转数组
       * @param ofs 数组内的起始偏移量
       */

    }, {
      key: "toArray",
      value: function toArray(out, m) {
        var ofs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        out[ofs + 0] = m.m00;
        out[ofs + 1] = m.m01;
        out[ofs + 2] = m.m02;
        out[ofs + 3] = m.m03;
        out[ofs + 4] = m.m04;
        out[ofs + 5] = m.m05;
        out[ofs + 6] = m.m06;
        out[ofs + 7] = m.m07;
        out[ofs + 8] = m.m08;
        return out;
      }
      /**
       * @zh 数组转矩阵
       * @param ofs 数组起始偏移量
       */

    }, {
      key: "fromArray",
      value: function fromArray(out, arr) {
        var ofs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        out.m00 = arr[ofs + 0];
        out.m01 = arr[ofs + 1];
        out.m02 = arr[ofs + 2];
        out.m03 = arr[ofs + 3];
        out.m04 = arr[ofs + 4];
        out.m05 = arr[ofs + 5];
        out.m06 = arr[ofs + 6];
        out.m07 = arr[ofs + 7];
        out.m08 = arr[ofs + 8];
        return out;
      }
      /**
       * @zh 逐元素矩阵加法
       */

    }, {
      key: "add",
      value: function add(out, a, b) {
        out.m00 = a.m00 + b.m00;
        out.m01 = a.m01 + b.m01;
        out.m02 = a.m02 + b.m02;
        out.m03 = a.m03 + b.m03;
        out.m04 = a.m04 + b.m04;
        out.m05 = a.m05 + b.m05;
        out.m06 = a.m06 + b.m06;
        out.m07 = a.m07 + b.m07;
        out.m08 = a.m08 + b.m08;
        return out;
      }
      /**
       * @zh 逐元素矩阵减法
       */

    }, {
      key: "subtract",
      value: function subtract(out, a, b) {
        out.m00 = a.m00 - b.m00;
        out.m01 = a.m01 - b.m01;
        out.m02 = a.m02 - b.m02;
        out.m03 = a.m03 - b.m03;
        out.m04 = a.m04 - b.m04;
        out.m05 = a.m05 - b.m05;
        out.m06 = a.m06 - b.m06;
        out.m07 = a.m07 - b.m07;
        out.m08 = a.m08 - b.m08;
        return out;
      }
      /**
       * @zh 矩阵标量乘法
       */

    }, {
      key: "multiplyScalar",
      value: function multiplyScalar(out, a, b) {
        out.m00 = a.m00 * b;
        out.m01 = a.m01 * b;
        out.m02 = a.m02 * b;
        out.m03 = a.m03 * b;
        out.m04 = a.m04 * b;
        out.m05 = a.m05 * b;
        out.m06 = a.m06 * b;
        out.m07 = a.m07 * b;
        out.m08 = a.m08 * b;
        return out;
      }
      /**
       * @zh 逐元素矩阵标量乘加: A + B * scale
       */

    }, {
      key: "multiplyScalarAndAdd",
      value: function multiplyScalarAndAdd(out, a, b, scale) {
        out.m00 = b.m00 * scale + a.m00;
        out.m01 = b.m01 * scale + a.m01;
        out.m02 = b.m02 * scale + a.m02;
        out.m03 = b.m03 * scale + a.m03;
        out.m04 = b.m04 * scale + a.m04;
        out.m05 = b.m05 * scale + a.m05;
        out.m06 = b.m06 * scale + a.m06;
        out.m07 = b.m07 * scale + a.m07;
        out.m08 = b.m08 * scale + a.m08;
        return out;
      }
      /**
       * @zh 矩阵等价判断
       */

    }, {
      key: "strictEquals",
      value: function strictEquals(a, b) {
        return a.m00 === b.m00 && a.m01 === b.m01 && a.m02 === b.m02 && a.m03 === b.m03 && a.m04 === b.m04 && a.m05 === b.m05 && a.m06 === b.m06 && a.m07 === b.m07 && a.m08 === b.m08;
      }
      /**
       * @zh 排除浮点数误差的矩阵近似等价判断
       */

    }, {
      key: "equals",
      value: function equals(a, b) {
        var epsilon = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _utils.EPSILON;
        return Math.abs(a.m00 - b.m00) <= epsilon * Math.max(1.0, Math.abs(a.m00), Math.abs(b.m00)) && Math.abs(a.m01 - b.m01) <= epsilon * Math.max(1.0, Math.abs(a.m01), Math.abs(b.m01)) && Math.abs(a.m02 - b.m02) <= epsilon * Math.max(1.0, Math.abs(a.m02), Math.abs(b.m02)) && Math.abs(a.m03 - b.m03) <= epsilon * Math.max(1.0, Math.abs(a.m03), Math.abs(b.m03)) && Math.abs(a.m04 - b.m04) <= epsilon * Math.max(1.0, Math.abs(a.m04), Math.abs(b.m04)) && Math.abs(a.m05 - b.m05) <= epsilon * Math.max(1.0, Math.abs(a.m05), Math.abs(b.m05)) && Math.abs(a.m06 - b.m06) <= epsilon * Math.max(1.0, Math.abs(a.m06), Math.abs(b.m06)) && Math.abs(a.m07 - b.m07) <= epsilon * Math.max(1.0, Math.abs(a.m07), Math.abs(b.m07)) && Math.abs(a.m08 - b.m08) <= epsilon * Math.max(1.0, Math.abs(a.m08), Math.abs(b.m08));
      }
      /**
       * 矩阵第 0 列第 0 行的元素。
       */

    }]);

    function Mat3() {
      var _this;

      var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var m03 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var m04 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
      var m05 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
      var m06 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
      var m07 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
      var m08 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1;

      _classCallCheck(this, Mat3);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Mat3).call(this));

      if (_typeof(m00) === 'object') {
        _this.m00 = m00.m00;
        _this.m01 = m00.m01;
        _this.m02 = m00.m02;
        _this.m03 = m00.m03;
        _this.m04 = m00.m04;
        _this.m05 = m00.m05;
        _this.m06 = m00.m06;
        _this.m07 = m00.m07;
        _this.m08 = m00.m08;
      } else {
        _this.m00 = m00;
        _this.m01 = m01;
        _this.m02 = m02;
        _this.m03 = m03;
        _this.m04 = m04;
        _this.m05 = m05;
        _this.m06 = m06;
        _this.m07 = m07;
        _this.m08 = m08;
      }

      return _this;
    }
    /**
     * @zh 克隆当前矩阵。
     */


    _createClass(Mat3, [{
      key: "clone",
      value: function clone() {
        var t = this;
        return new Mat3(t.m00, t.m01, t.m02, t.m03, t.m04, t.m05, t.m06, t.m07, t.m08);
      }
      /**
       * @zh 设置当前矩阵使其与指定矩阵相等。
       * @param other 相比较的矩阵。
       * @return this
       */

    }, {
      key: "set",
      value: function set() {
        var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var m03 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
        var m04 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
        var m05 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
        var m06 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
        var m07 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
        var m08 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1;

        if (_typeof(m00) === 'object') {
          this.m00 = m00.m00;
          this.m01 = m00.m01;
          this.m02 = m00.m02;
          this.m03 = m00.m03;
          this.m04 = m00.m04;
          this.m05 = m00.m05;
          this.m06 = m00.m06;
          this.m07 = m00.m07;
          this.m08 = m00.m08;
        } else {
          this.m00 = m00;
          this.m01 = m01;
          this.m02 = m02;
          this.m03 = m03;
          this.m04 = m04;
          this.m05 = m05;
          this.m06 = m06;
          this.m07 = m07;
          this.m08 = m08;
        }

        return this;
      }
      /**
       * @zh 判断当前矩阵是否在误差范围内与指定矩阵相等。
       * @param other 相比较的矩阵。
       * @param epsilon 允许的误差，应为非负数。
       * @return 两矩阵的各元素都分别相等时返回 `true`；否则返回 `false`。
       */

    }, {
      key: "equals",
      value: function equals(other) {
        var epsilon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _utils.EPSILON;
        return Math.abs(this.m00 - other.m00) <= epsilon * Math.max(1.0, Math.abs(this.m00), Math.abs(other.m00)) && Math.abs(this.m01 - other.m01) <= epsilon * Math.max(1.0, Math.abs(this.m01), Math.abs(other.m01)) && Math.abs(this.m02 - other.m02) <= epsilon * Math.max(1.0, Math.abs(this.m02), Math.abs(other.m02)) && Math.abs(this.m03 - other.m03) <= epsilon * Math.max(1.0, Math.abs(this.m03), Math.abs(other.m03)) && Math.abs(this.m04 - other.m04) <= epsilon * Math.max(1.0, Math.abs(this.m04), Math.abs(other.m04)) && Math.abs(this.m05 - other.m05) <= epsilon * Math.max(1.0, Math.abs(this.m05), Math.abs(other.m05)) && Math.abs(this.m06 - other.m06) <= epsilon * Math.max(1.0, Math.abs(this.m06), Math.abs(other.m06)) && Math.abs(this.m07 - other.m07) <= epsilon * Math.max(1.0, Math.abs(this.m07), Math.abs(other.m07)) && Math.abs(this.m08 - other.m08) <= epsilon * Math.max(1.0, Math.abs(this.m08), Math.abs(other.m08));
      }
      /**
       * @zh 判断当前矩阵是否与指定矩阵相等。
       * @param other 相比较的矩阵。
       * @return 两矩阵的各元素都分别相等时返回 `true`；否则返回 `false`。
       */

    }, {
      key: "strictEquals",
      value: function strictEquals(other) {
        return this.m00 === other.m00 && this.m01 === other.m01 && this.m02 === other.m02 && this.m03 === other.m03 && this.m04 === other.m04 && this.m05 === other.m05 && this.m06 === other.m06 && this.m07 === other.m07 && this.m08 === other.m08;
      }
      /**
       * 返回当前矩阵的字符串表示。
       * @return 当前矩阵的字符串表示。
       */

    }, {
      key: "toString",
      value: function toString() {
        var t = this;
        return '[\n' + t.m00 + ', ' + t.m01 + ', ' + t.m02 + ',\n' + t.m03 + ',\n' + t.m04 + ', ' + t.m05 + ',\n' + t.m06 + ', ' + t.m07 + ',\n' + t.m08 + '\n' + ']';
      }
      /**
       * 将当前矩阵设为单位矩阵。
       * @return `this`
       */

    }, {
      key: "identity",
      value: function identity() {
        this.m00 = 1;
        this.m01 = 0;
        this.m02 = 0;
        this.m03 = 0;
        this.m04 = 1;
        this.m05 = 0;
        this.m06 = 0;
        this.m07 = 0;
        this.m08 = 1;
        return this;
      }
      /**
       * @zh 计算当前矩阵的转置矩阵。
       */

    }, {
      key: "transpose",
      value: function transpose() {
        var a01 = this.m01,
            a02 = this.m02,
            a12 = this.m05;
        this.m01 = this.m03;
        this.m02 = this.m06;
        this.m03 = a01;
        this.m05 = this.m07;
        this.m06 = a02;
        this.m07 = a12;
        return this;
      }
      /**
       * @zh 计算当前矩阵的逆矩阵。注意，在矩阵不可逆时，会返回一个全为 0 的矩阵。
       */

    }, {
      key: "invert",
      value: function invert() {
        var a00 = this.m00;
        var a01 = this.m01;
        var a02 = this.m02;
        var a10 = this.m03;
        var a11 = this.m04;
        var a12 = this.m05;
        var a20 = this.m06;
        var a21 = this.m07;
        var a22 = this.m08;
        var b01 = a22 * a11 - a12 * a21;
        var b11 = -a22 * a10 + a12 * a20;
        var b21 = a21 * a10 - a11 * a20; // Calculate the determinant

        var det = a00 * b01 + a01 * b11 + a02 * b21;

        if (det === 0) {
          this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
          return this;
        }

        det = 1.0 / det;
        this.m00 = b01 * det;
        this.m01 = (-a22 * a01 + a02 * a21) * det;
        this.m02 = (a12 * a01 - a02 * a11) * det;
        this.m03 = b11 * det;
        this.m04 = (a22 * a00 - a02 * a20) * det;
        this.m05 = (-a12 * a00 + a02 * a10) * det;
        this.m06 = b21 * det;
        this.m07 = (-a21 * a00 + a01 * a20) * det;
        this.m08 = (a11 * a00 - a01 * a10) * det;
        return this;
      }
      /**
       * 计算当前矩阵的行列式。
       * @return 当前矩阵的行列式。
       */

    }, {
      key: "determinant",
      value: function determinant() {
        var a00 = this.m00;
        var a01 = this.m01;
        var a02 = this.m02;
        var a10 = this.m03;
        var a11 = this.m04;
        var a12 = this.m05;
        var a20 = this.m06;
        var a21 = this.m07;
        var a22 = this.m08;
        return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
      }
      /**
       * @zh 矩阵加法。将当前矩阵与指定矩阵的相加，结果返回给当前矩阵。
       * @param mat 相加的矩阵
       */

    }, {
      key: "add",
      value: function add(mat) {
        this.m00 = this.m00 + mat.m00;
        this.m01 = this.m01 + mat.m01;
        this.m02 = this.m02 + mat.m02;
        this.m03 = this.m03 + mat.m03;
        this.m04 = this.m04 + mat.m04;
        this.m05 = this.m05 + mat.m05;
        this.m06 = this.m06 + mat.m06;
        this.m07 = this.m07 + mat.m07;
        this.m08 = this.m08 + mat.m08;
        return this;
      }
      /**
       * @zh 计算矩阵减法。将当前矩阵减去指定矩阵的结果赋值给当前矩阵。
       * @param mat 减数矩阵。
       */

    }, {
      key: "subtract",
      value: function subtract(mat) {
        this.m00 = this.m00 - mat.m00;
        this.m01 = this.m01 - mat.m01;
        this.m02 = this.m02 - mat.m02;
        this.m03 = this.m03 - mat.m03;
        this.m04 = this.m04 - mat.m04;
        this.m05 = this.m05 - mat.m05;
        this.m06 = this.m06 - mat.m06;
        this.m07 = this.m07 - mat.m07;
        this.m08 = this.m08 - mat.m08;
        return this;
      }
      /**
       * @zh 矩阵乘法。将当前矩阵左乘指定矩阵的结果赋值给当前矩阵。
       * @param mat 指定的矩阵。
       */

    }, {
      key: "multiply",
      value: function multiply(mat) {
        var a00 = this.m00,
            a01 = this.m01,
            a02 = this.m02,
            a10 = this.m03,
            a11 = this.m04,
            a12 = this.m05,
            a20 = this.m06,
            a21 = this.m07,
            a22 = this.m08;
        var b00 = mat.m00,
            b01 = mat.m01,
            b02 = mat.m02;
        var b10 = mat.m03,
            b11 = mat.m04,
            b12 = mat.m05;
        var b20 = mat.m06,
            b21 = mat.m07,
            b22 = mat.m08;
        this.m00 = b00 * a00 + b01 * a10 + b02 * a20;
        this.m01 = b00 * a01 + b01 * a11 + b02 * a21;
        this.m02 = b00 * a02 + b01 * a12 + b02 * a22;
        this.m03 = b10 * a00 + b11 * a10 + b12 * a20;
        this.m04 = b10 * a01 + b11 * a11 + b12 * a21;
        this.m05 = b10 * a02 + b11 * a12 + b12 * a22;
        this.m06 = b20 * a00 + b21 * a10 + b22 * a20;
        this.m07 = b20 * a01 + b21 * a11 + b22 * a21;
        this.m08 = b20 * a02 + b21 * a12 + b22 * a22;
        return this;
      }
      /**
       * @zh 矩阵数乘。将当前矩阵与指定标量的数乘结果赋值给当前矩阵。
       * @param scalar 指定的标量。
       */

    }, {
      key: "multiplyScalar",
      value: function multiplyScalar(scalar) {
        this.m00 = this.m00 * scalar;
        this.m01 = this.m01 * scalar;
        this.m02 = this.m02 * scalar;
        this.m03 = this.m03 * scalar;
        this.m04 = this.m04 * scalar;
        this.m05 = this.m05 * scalar;
        this.m06 = this.m06 * scalar;
        this.m07 = this.m07 * scalar;
        this.m08 = this.m08 * scalar;
        return this;
      }
      /**
       * @zh 将当前矩阵左乘缩放矩阵的结果赋值给当前矩阵，缩放矩阵由各个轴的缩放给出。
       * @param vec 各个轴的缩放。
       */

    }, {
      key: "scale",
      value: function scale(vec) {
        var x = vec.x,
            y = vec.y;
        this.m00 = x * this.m00;
        this.m01 = x * this.m01;
        this.m02 = x * this.m02;
        this.m03 = y * this.m03;
        this.m04 = y * this.m04;
        this.m05 = y * this.m05;
        this.m06 = this.m06;
        this.m07 = this.m07;
        this.m08 = this.m08;
        return this;
      }
      /**
       * @zh 将当前矩阵左乘旋转矩阵的结果赋值给当前矩阵，旋转矩阵由旋转轴和旋转角度给出。
       * @param mat 矩阵
       * @param rad 旋转角度（弧度制）
       */

    }, {
      key: "rotate",
      value: function rotate(rad) {
        var a00 = this.m00;
        var a01 = this.m01;
        var a02 = this.m02;
        var a10 = this.m03;
        var a11 = this.m04;
        var a12 = this.m05;
        var a20 = this.m06;
        var a21 = this.m07;
        var a22 = this.m08;
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        this.m00 = c * a00 + s * a10;
        this.m01 = c * a01 + s * a11;
        this.m02 = c * a02 + s * a12;
        this.m03 = c * a10 - s * a00;
        this.m04 = c * a11 - s * a01;
        this.m05 = c * a12 - s * a02;
        this.m06 = a20;
        this.m07 = a21;
        this.m08 = a22;
        return this;
      }
      /**
       * @zh 重置当前矩阵的值，使其表示指定四元数表示的旋转变换。
       * @param q 四元数表示的旋转变换。
       * @returns this
       */

    }, {
      key: "fromQuat",
      value: function fromQuat(q) {
        var x = q.x,
            y = q.y,
            z = q.z,
            w = q.w;
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var yx = y * x2;
        var yy = y * y2;
        var zx = z * x2;
        var zy = z * y2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        this.m00 = 1 - yy - zz;
        this.m03 = yx - wz;
        this.m06 = zx + wy;
        this.m01 = yx + wz;
        this.m04 = 1 - xx - zz;
        this.m07 = zy - wx;
        this.m02 = zx - wy;
        this.m05 = zy + wx;
        this.m08 = 1 - xx - yy;
        return this;
      }
    }]);

    return Mat3;
  }(_valueType.ValueType);

  _exports.Mat3 = Mat3;
  Mat3.IDENTITY = Object.freeze(new Mat3());
  var v3_1 = new _vec.Vec3();
  var v3_2 = new _vec.Vec3();

  _class.default.fastDefine('cc.Mat3', Mat3, {
    m00: 1,
    m01: 0,
    m02: 0,
    m03: 0,
    m04: 1,
    m05: 0,
    m06: 0,
    m07: 0,
    m08: 1
  });

  cc.Mat3 = Mat3;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,