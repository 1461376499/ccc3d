(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "@cocos/cannon", "../../core/math/index.js", "../framework/physics-enum.js", "../framework/util.js", "../../core/scene-graph/node-enum.js", "./cannon-util.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("@cocos/cannon"), require("../../core/math/index.js"), require("../framework/physics-enum.js"), require("../framework/util.js"), require("../../core/scene-graph/node-enum.js"), require("./cannon-util.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.cannon, global.index, global.physicsEnum, global.util, global.nodeEnum, global.cannonUtil);
    global.cannonSharedBody = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _cannon, _index2, _physicsEnum, _util, _nodeEnum, _cannonUtil) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.CannonSharedBody = void 0;
  _cannon = _interopRequireDefault(_cannon);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var v3_0 = new _index2.Vec3();
  var quat_0 = new _index2.Quat();
  var contactsPool = [];
  var CollisionEventObject = {
    type: 'onCollisionEnter',
    selfCollider: null,
    otherCollider: null,
    contacts: []
  };
  /**
   * node : shared-body = 1 : 1
   * static
   */

  var CannonSharedBody = /*#__PURE__*/function () {
    _createClass(CannonSharedBody, [{
      key: "enabled",

      /**
       * add or remove from world \
       * add, if enable \
       * remove, if disable & shapes.length == 0 & wrappedBody disable
       */
      set: function set(v) {
        if (v) {
          if (this.index < 0) {
            this.index = this.wrappedWorld.bodies.length;
            this.wrappedWorld.addSharedBody(this);
            this.syncInitial();
          }
        } else {
          if (this.index >= 0) {
            var isRemove = this.shapes.length == 0 && this.wrappedBody == null || this.shapes.length == 0 && this.wrappedBody != null && !this.wrappedBody.isEnabled;

            if (isRemove) {
              this.body.sleep(); // clear velocity etc.

              this.index = -1;
              this.wrappedWorld.removeSharedBody(this);
            }
          }
        }
      }
    }, {
      key: "reference",
      set: function set(v) {
        v ? this.ref++ : this.ref--;

        if (this.ref == 0) {
          this.destroy();
        }
      }
    }], [{
      key: "getSharedBody",
      value: function getSharedBody(node, wrappedWorld) {
        var key = node.uuid;

        if (CannonSharedBody.sharedBodesMap.has(key)) {
          return CannonSharedBody.sharedBodesMap.get(key);
        } else {
          var newSB = new CannonSharedBody(node, wrappedWorld);
          CannonSharedBody.sharedBodesMap.set(node.uuid, newSB);
          return newSB;
        }
      }
    }]);

    function CannonSharedBody(node, wrappedWorld) {
      _classCallCheck(this, CannonSharedBody);

      this.node = void 0;
      this.wrappedWorld = void 0;
      this.body = void 0;
      this.shapes = [];
      this.wrappedBody = null;
      this.index = -1;
      this.ref = 0;
      this.onCollidedListener = this.onCollided.bind(this);
      this.wrappedWorld = wrappedWorld;
      this.node = node;
      this.body = new _cannon.default.Body();
      this.body.material = this.wrappedWorld.impl.defaultMaterial;
      this.body.addEventListener('cc-collide', this.onCollidedListener);
    }

    _createClass(CannonSharedBody, [{
      key: "addShape",
      value: function addShape(v) {
        var index = this.shapes.indexOf(v);

        if (index < 0) {
          var _index = this.body.shapes.length;
          this.body.addShape(v.impl);
          this.shapes.push(v);
          v.setIndex(_index);
          var offset = this.body.shapeOffsets[_index];
          var orient = this.body.shapeOrientations[_index];
          v.setOffsetAndOrient(offset, orient);
        }
      }
    }, {
      key: "removeShape",
      value: function removeShape(v) {
        var index = this.shapes.indexOf(v);

        if (index >= 0) {
          this.shapes.splice(index, 1);
          this.body.removeShape(v.impl);
          v.setIndex(-1);
        }
      }
    }, {
      key: "syncSceneToPhysics",
      value: function syncSceneToPhysics() {
        if (this.node.hasChangedFlags) {
          if (this.body.isSleeping()) this.body.wakeUp();

          _index2.Vec3.copy(this.body.position, this.node.worldPosition);

          _index2.Quat.copy(this.body.quaternion, this.node.worldRotation);

          this.body.aabbNeedsUpdate = true;

          if (this.node.hasChangedFlags & _nodeEnum.TransformBit.SCALE) {
            for (var i = 0; i < this.shapes.length; i++) {
              this.shapes[i].setScale(this.node.worldScale);
            }

            (0, _cannonUtil.commitShapeUpdates)(this.body);
          }
        }
      }
    }, {
      key: "syncPhysicsToScene",
      value: function syncPhysicsToScene() {
        if (this.body.type != _physicsEnum.ERigidBodyType.STATIC) {
          if (!this.body.isSleeping()) {
            _index2.Vec3.copy(v3_0, this.body.position);

            _index2.Quat.copy(quat_0, this.body.quaternion);

            this.node.worldPosition = v3_0;
            this.node.worldRotation = quat_0;
          }
        }
      }
    }, {
      key: "syncInitial",
      value: function syncInitial() {
        _index2.Vec3.copy(this.body.position, this.node.worldPosition);

        _index2.Quat.copy(this.body.quaternion, this.node.worldRotation);

        this.body.aabbNeedsUpdate = true;

        for (var i = 0; i < this.shapes.length; i++) {
          this.shapes[i].setScale(this.node.worldScale);
        }

        (0, _cannonUtil.commitShapeUpdates)(this.body);
        if (this.body.isSleeping()) this.body.wakeUp();
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.body.removeEventListener('cc-collide', this.onCollidedListener);
        CannonSharedBody.sharedBodesMap["delete"](this.node.uuid);
        delete _cannon.default.World['idToBodyMap'][this.body.id];
        this.node = null;
        this.wrappedWorld = null;
        this.body = null;
        this.shapes = null;
        this.onCollidedListener = null;
      }
    }, {
      key: "onCollided",
      value: function onCollided(event) {
        CollisionEventObject.type = event.event;
        var self = (0, _util.getWrap)(event.selfShape);
        var other = (0, _util.getWrap)(event.otherShape);

        if (self) {
          CollisionEventObject.selfCollider = self.collider;
          CollisionEventObject.otherCollider = other ? other.collider : null;
          var i = 0;

          for (i = CollisionEventObject.contacts.length; i--;) {
            contactsPool.push(CollisionEventObject.contacts.pop());
          }

          for (i = 0; i < event.contacts.length; i++) {
            var cq = event.contacts[i];

            if (contactsPool.length > 0) {
              var c = contactsPool.pop();

              _index2.Vec3.copy(c.contactA, cq.ri);

              _index2.Vec3.copy(c.contactB, cq.rj);

              _index2.Vec3.copy(c.normal, cq.ni);

              CollisionEventObject.contacts.push(c);
            } else {
              var _c = {
                contactA: _index2.Vec3.copy(new _index2.Vec3(), cq.ri),
                contactB: _index2.Vec3.copy(new _index2.Vec3(), cq.rj),
                normal: _index2.Vec3.copy(new _index2.Vec3(), cq.ni)
              };
              CollisionEventObject.contacts.push(_c);
            }
          }

          for (i = 0; i < this.shapes.length; i++) {
            var shape = this.shapes[i];
            shape.collider.emit(CollisionEventObject.type, CollisionEventObject);
          }
        }
      }
    }]);

    return CannonSharedBody;
  }();

  _exports.CannonSharedBody = CannonSharedBody;
  CannonSharedBody.sharedBodesMap = new Map();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,