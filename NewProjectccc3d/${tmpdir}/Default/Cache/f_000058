(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "@cocos/cannon", "../../core/math/index.js", "../framework/physics-system.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("@cocos/cannon"), require("../../core/math/index.js"), require("../framework/physics-system.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.cannon, global.index, global.physicsSystem);
    global.cannonRigidBody = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _cannon, _index, _physicsSystem) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.CannonRigidBody = void 0;
  _cannon = _interopRequireDefault(_cannon);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var v3_cannon0 = new _cannon.default.Vec3();
  var v3_cannon1 = new _cannon.default.Vec3();
  /**
   * wrapped shared body
   * dynamic
   * kinematic
   */

  var CannonRigidBody = /*#__PURE__*/function () {
    function CannonRigidBody() {
      _classCallCheck(this, CannonRigidBody);

      this._isEnabled = false;
    }

    _createClass(CannonRigidBody, [{
      key: "setAllowSleep",
      value: function setAllowSleep(v) {
        this.impl.allowSleep = v;
        if (!this.impl.isAwake()) this.impl.wakeUp();
      }
    }, {
      key: "setMass",
      value: function setMass(value) {
        this.impl.mass = value;

        if (this.impl.mass == 0) {
          this.impl.type = _cannon.default.Body.STATIC;
        } else {
          this.impl.type = this._rigidBody.isKinematic ? _cannon.default.Body.KINEMATIC : _cannon.default.Body.DYNAMIC;
        }

        this.impl.updateMassProperties();
        if (!this.impl.isAwake()) this.impl.wakeUp();
      }
    }, {
      key: "setIsKinematic",
      value: function setIsKinematic(value) {
        if (this.impl.mass == 0) {
          this.impl.type = _cannon.default.Body.STATIC;
        } else {
          if (value) {
            this.impl.type = _cannon.default.Body.KINEMATIC;
          } else {
            this.impl.type = _cannon.default.Body.DYNAMIC;
          }
        }
      }
    }, {
      key: "fixRotation",
      value: function fixRotation(value) {
        this.impl.fixedRotation = value;
        this.impl.updateMassProperties();
        if (!this.impl.isAwake()) this.impl.wakeUp();
      }
    }, {
      key: "setLinearDamping",
      value: function setLinearDamping(value) {
        this.impl.linearDamping = value;
      }
    }, {
      key: "setAngularDamping",
      value: function setAngularDamping(value) {
        this.impl.angularDamping = value;
      }
    }, {
      key: "useGravity",
      value: function useGravity(value) {
        this.impl.useGravity = value;
        if (!this.impl.isAwake()) this.impl.wakeUp();
      }
    }, {
      key: "setLinearFactor",
      value: function setLinearFactor(value) {
        _index.Vec3.copy(this.impl.linearFactor, value);

        if (!this.impl.isAwake()) this.impl.wakeUp();
      }
    }, {
      key: "setAngularFactor",
      value: function setAngularFactor(value) {
        _index.Vec3.copy(this.impl.angularFactor, value);

        if (!this.impl.isAwake()) this.impl.wakeUp();
      }
    }, {
      key: "initialize",

      /** LIFECYCLE */
      value: function initialize(com) {
        this._rigidBody = com;
        this._sharedBody = _physicsSystem.PhysicsSystem.instance.physicsWorld.getSharedBody(this._rigidBody.node);
        this._sharedBody.reference = true;
        this._sharedBody.wrappedBody = this;
      }
    }, {
      key: "onLoad",
      value: function onLoad() {}
    }, {
      key: "onEnable",
      value: function onEnable() {
        this._isEnabled = true;
        this.setMass(this._rigidBody.mass);
        this.setAllowSleep(this._rigidBody.allowSleep);
        this.setLinearDamping(this._rigidBody.linearDamping);
        this.setAngularDamping(this._rigidBody.angularDamping);
        this.useGravity(this._rigidBody.useGravity);
        this.setIsKinematic(this._rigidBody.isKinematic);
        this.fixRotation(this._rigidBody.fixedRotation);
        this.setLinearFactor(this._rigidBody.linearFactor);
        this.setAngularFactor(this._rigidBody.angularFactor);
        this._sharedBody.enabled = true;
      }
    }, {
      key: "onDisable",
      value: function onDisable() {
        this._isEnabled = false;
        this._sharedBody.enabled = false;
      }
    }, {
      key: "onDestroy",
      value: function onDestroy() {
        this._sharedBody.reference = false;
        this._rigidBody = null;
        this._sharedBody = null;
      }
      /** INTERFACE */

    }, {
      key: "wakeUp",
      value: function wakeUp() {
        return this.impl.wakeUp();
      }
    }, {
      key: "sleep",
      value: function sleep() {
        return this.impl.sleep();
      }
    }, {
      key: "getLinearVelocity",
      value: function getLinearVelocity(out) {
        _index.Vec3.copy(out, this.impl.velocity);

        return out;
      }
    }, {
      key: "setLinearVelocity",
      value: function setLinearVelocity(value) {
        if (!this.impl.isAwake()) this.impl.wakeUp();

        _index.Vec3.copy(this.impl.velocity, value);
      }
    }, {
      key: "getAngularVelocity",
      value: function getAngularVelocity(out) {
        _index.Vec3.copy(out, this.impl.angularVelocity);

        return out;
      }
    }, {
      key: "setAngularVelocity",
      value: function setAngularVelocity(value) {
        if (!this.impl.isAwake()) this.impl.wakeUp();

        _index.Vec3.copy(this.impl.angularVelocity, value);
      }
    }, {
      key: "applyForce",
      value: function applyForce(force, worldPoint) {
        this._sharedBody.syncSceneToPhysics();

        if (!this.impl.isAwake()) this.impl.wakeUp();
        if (worldPoint == null) worldPoint = _index.Vec3.ZERO;
        this.impl.applyForce(_index.Vec3.copy(v3_cannon0, force), _index.Vec3.copy(v3_cannon1, worldPoint));
      }
    }, {
      key: "applyImpulse",
      value: function applyImpulse(impulse, worldPoint) {
        this._sharedBody.syncSceneToPhysics();

        if (!this.impl.isAwake()) this.impl.wakeUp();
        if (worldPoint == null) worldPoint = _index.Vec3.ZERO;
        this.impl.applyImpulse(_index.Vec3.copy(v3_cannon0, impulse), _index.Vec3.copy(v3_cannon1, worldPoint));
      }
    }, {
      key: "applyLocalForce",
      value: function applyLocalForce(force, localPoint) {
        this._sharedBody.syncSceneToPhysics();

        if (!this.impl.isAwake()) this.impl.wakeUp();
        if (localPoint == null) localPoint = _index.Vec3.ZERO;
        this.impl.applyLocalForce(_index.Vec3.copy(v3_cannon0, force), _index.Vec3.copy(v3_cannon1, localPoint));
      }
    }, {
      key: "applyLocalImpulse",
      value: function applyLocalImpulse(impulse, localPoint) {
        this._sharedBody.syncSceneToPhysics();

        if (!this.impl.isAwake()) this.impl.wakeUp();
        if (localPoint == null) localPoint = _index.Vec3.ZERO;
        this.impl.applyLocalImpulse(_index.Vec3.copy(v3_cannon0, impulse), _index.Vec3.copy(v3_cannon1, localPoint));
      }
    }, {
      key: "applyTorque",
      value: function applyTorque(torque) {
        this._sharedBody.syncSceneToPhysics();

        if (!this.impl.isAwake()) this.impl.wakeUp();

        _index.Vec3.add(this.impl.torque, this.impl.torque, torque);
      }
    }, {
      key: "applyLocalTorque",
      value: function applyLocalTorque(torque) {
        this._sharedBody.syncSceneToPhysics();

        if (!this.impl.isAwake()) this.impl.wakeUp();

        _index.Vec3.copy(v3_cannon0, torque);

        this.impl.vectorToWorldFrame(v3_cannon0, v3_cannon0);

        _index.Vec3.add(this.impl.torque, this.impl.torque, v3_cannon0);
      }
      /** group */

    }, {
      key: "getGroup",
      value: function getGroup() {
        return this.impl.collisionFilterGroup;
      }
    }, {
      key: "setGroup",
      value: function setGroup(v) {
        this.impl.collisionFilterGroup = v;
        if (!this.impl.isAwake()) this.impl.wakeUp();
      }
    }, {
      key: "addGroup",
      value: function addGroup(v) {
        this.impl.collisionFilterGroup |= v;
        if (!this.impl.isAwake()) this.impl.wakeUp();
      }
    }, {
      key: "removeGroup",
      value: function removeGroup(v) {
        this.impl.collisionFilterGroup &= ~v;
        if (!this.impl.isAwake()) this.impl.wakeUp();
      }
      /** mask */

    }, {
      key: "getMask",
      value: function getMask() {
        return this.impl.collisionFilterMask;
      }
    }, {
      key: "setMask",
      value: function setMask(v) {
        this.impl.collisionFilterMask = v;
        if (!this.impl.isAwake()) this.impl.wakeUp();
      }
    }, {
      key: "addMask",
      value: function addMask(v) {
        this.impl.collisionFilterMask |= v;
        if (!this.impl.isAwake()) this.impl.wakeUp();
      }
    }, {
      key: "removeMask",
      value: function removeMask(v) {
        this.impl.collisionFilterMask &= ~v;
        if (!this.impl.isAwake()) this.impl.wakeUp();
      }
    }, {
      key: "isAwake",
      get: function get() {
        return this.impl.isAwake();
      }
    }, {
      key: "isSleepy",
      get: function get() {
        return this.impl.isSleepy();
      }
    }, {
      key: "isSleeping",
      get: function get() {
        return this.impl.isSleeping();
      }
    }, {
      key: "impl",
      get: function get() {
        return this._sharedBody.body;
      }
    }, {
      key: "rigidBody",
      get: function get() {
        return this._rigidBody;
      }
    }, {
      key: "sharedBody",
      get: function get() {
        return this._sharedBody;
      }
    }, {
      key: "isEnabled",
      get: function get() {
        return this._isEnabled;
      }
    }]);

    return CannonRigidBody;
  }();

  _exports.CannonRigidBody = CannonRigidBody;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,