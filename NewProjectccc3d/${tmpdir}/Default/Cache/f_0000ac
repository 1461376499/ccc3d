(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../math/index.js", "../../math/rect.js", "../macro.js", "../sys.js", "./event-manager.js", "./events.js", "./touch.js", "../../default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../math/index.js"), require("../../math/rect.js"), require("../macro.js"), require("../sys.js"), require("./event-manager.js"), require("./events.js"), require("./touch.js"), require("../../default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.rect, global.macro, global.sys, global.eventManager, global.events, global.touch, global.defaultConstants);
    global.inputManager = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index4, _rect, _macro, _sys, _eventManager, _events, _touch, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.Acceleration = void 0;
  _eventManager = _interopRequireDefault(_eventManager);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var TOUCH_TIMEOUT = _macro.macro.TOUCH_TIMEOUT;
  var PORTRAIT = 0;
  var LANDSCAPE_LEFT = -90;
  var PORTRAIT_UPSIDE_DOWN = 180;
  var LANDSCAPE_RIGHT = 90;

  var _didAccelerateFun;

  var _vec2 = new _index4.Vec2();

  var _preLocation = new _index4.Vec2();

  /**
   * @en the device accelerometer reports values for each axis in units of g-force.
   * @zh 设备重力传感器传递的各个轴的数据。
   */
  var Acceleration = function Acceleration() {
    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var timestamp = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

    _classCallCheck(this, Acceleration);

    this.x = void 0;
    this.y = void 0;
    this.z = void 0;
    this.timestamp = void 0;
    this.x = x;
    this.y = y;
    this.z = z;
    this.timestamp = timestamp;
  };

  _exports.Acceleration = Acceleration;
  cc.internal.Acceleration = Acceleration;
  /**
   *  This class manages all events of input. include: touch, mouse, accelerometer, keyboard
   */

  var InputManager = /*#__PURE__*/function () {
    function InputManager() {
      _classCallCheck(this, InputManager);

      this._mousePressed = false;
      this._isRegisterEvent = false;
      this._preTouchPoint = new _index4.Vec2();
      this._prevMousePoint = new _index4.Vec2();
      this._preTouchPool = [];
      this._preTouchPoolPointer = 0;
      this._touches = [];
      this._touchesIntegerDict = {};
      this._indexBitsUsed = 0;
      this._maxTouches = 8;
      this._accelEnabled = false;
      this._accelInterval = 1 / 5;
      this._accelMinus = 1;
      this._accelCurTime = 0;
      this._acceleration = null;
      this._accelDeviceEvent = null;
      this._glView = null;
      this._pointLocked = false;
    }

    _createClass(InputManager, [{
      key: "handleTouchesBegin",
      value: function handleTouchesBegin(touches) {
        var handleTouches = [];
        var locTouchIntDict = this._touchesIntegerDict;

        for (var i = 0; i < touches.length; ++i) {
          var touch = touches[i];
          var touchID = touch.getID();

          if (touchID === null) {
            continue;
          }

          var _index = locTouchIntDict[touchID];

          if (_index === undefined) {
            var unusedIndex = this._getUnUsedIndex();

            if (unusedIndex === -1) {
              cc.logID(2300, unusedIndex);
              continue;
            } // curTouch = this._touches[unusedIndex] = touch;


            touch.getLocation(_vec2);
            var curTouch = new _touch.Touch(_vec2.x, _vec2.y, touchID);
            this._touches[unusedIndex] = curTouch;
            touch.getPreviousLocation(_vec2);
            curTouch.setPrevPoint(_vec2);
            locTouchIntDict[touchID] = unusedIndex;
            handleTouches.push(curTouch);
          }
        }

        if (handleTouches.length > 0) {
          // this._glView!._convertTouchesWithScale(handleTouches);
          var touchEvent = new _events.EventTouch(handleTouches, false, _events.EventTouch.BEGAN);

          _eventManager.default.dispatchEvent(touchEvent);
        }
      }
    }, {
      key: "handleTouchesMove",
      value: function handleTouchesMove(touches) {
        var handleTouches = [];
        var locTouches = this._touches;

        for (var i = 0; i < touches.length; ++i) {
          var touch = touches[i];
          var touchID = touch.getID();

          if (touchID === null) {
            continue;
          }

          var _index2 = this._touchesIntegerDict[touchID];

          if (_index2 === undefined) {
            // cc.log("if the index doesn't exist, it is an error");
            continue;
          }

          if (locTouches[_index2]) {
            touch.getLocation(_vec2);

            locTouches[_index2].setPoint(_vec2);

            touch.getPreviousLocation(_vec2);

            locTouches[_index2].setPrevPoint(_vec2);

            handleTouches.push(locTouches[_index2]);
          }
        }

        if (handleTouches.length > 0) {
          // this._glView!._convertTouchesWithScale(handleTouches);
          var touchEvent = new _events.EventTouch(handleTouches, false, _events.EventTouch.MOVED);

          _eventManager.default.dispatchEvent(touchEvent);
        }
      }
    }, {
      key: "handleTouchesEnd",
      value: function handleTouchesEnd(touches) {
        var handleTouches = this.getSetOfTouchesEndOrCancel(touches);

        if (handleTouches.length > 0) {
          // this._glView!._convertTouchesWithScale(handleTouches);
          var touchEvent = new _events.EventTouch(handleTouches, false, _events.EventTouch.ENDED);

          _eventManager.default.dispatchEvent(touchEvent);
        }

        this._preTouchPool.length = 0;
      }
    }, {
      key: "handleTouchesCancel",
      value: function handleTouchesCancel(touches) {
        var handleTouches = this.getSetOfTouchesEndOrCancel(touches);

        if (handleTouches.length > 0) {
          // this._glView!._convertTouchesWithScale(handleTouches);
          var touchEvent = new _events.EventTouch(handleTouches, false, _events.EventTouch.CANCELLED);

          _eventManager.default.dispatchEvent(touchEvent);
        }

        this._preTouchPool.length = 0;
      }
    }, {
      key: "getSetOfTouchesEndOrCancel",
      value: function getSetOfTouchesEndOrCancel(touches) {
        var handleTouches = [];
        var locTouches = this._touches;
        var locTouchesIntDict = this._touchesIntegerDict;

        for (var i = 0; i < touches.length; ++i) {
          var touch = touches[i];
          var touchID = touch.getID();

          if (touchID === null) {
            continue;
          }

          var _index3 = locTouchesIntDict[touchID];

          if (_index3 === undefined) {
            // cc.log("if the index doesn't exist, it is an error");
            continue;
          }

          if (locTouches[_index3]) {
            touch.getLocation(_vec2);

            locTouches[_index3].setPoint(_vec2);

            touch.getPreviousLocation(_vec2);

            locTouches[_index3].setPrevPoint(_vec2);

            handleTouches.push(locTouches[_index3]);

            this._removeUsedIndexBit(_index3);

            delete locTouchesIntDict[touchID];
          }
        }

        return handleTouches;
      }
    }, {
      key: "getHTMLElementPosition",
      value: function getHTMLElementPosition(element) {
        if (_sys.sys.platform === _sys.sys.WECHAT_GAME) {
          return {
            left: 0,
            top: 0,
            width: window.innerWidth,
            height: window.innerHeight
          };
        }

        var docElem = document.documentElement;
        var leftOffset = _sys.sys.os === _sys.sys.OS_IOS && _sys.sys.isBrowser ? window.screenLeft : window.pageXOffset;
        leftOffset -= docElem.clientLeft;
        var topOffset = _sys.sys.os === _sys.sys.OS_IOS && _sys.sys.isBrowser ? window.screenTop : window.pageYOffset;
        topOffset -= docElem.clientTop;

        if (element.getBoundingClientRect) {
          var box = element.getBoundingClientRect();
          return {
            left: box.left + leftOffset,
            top: box.top + topOffset,
            width: box.width,
            height: box.height
          };
        } else {
          if (element instanceof HTMLCanvasElement) {
            return {
              left: leftOffset,
              top: topOffset,
              width: element.width,
              height: element.height
            };
          } else {
            return {
              left: leftOffset,
              top: topOffset,
              width: parseInt(element.style.width || '0', undefined),
              height: parseInt(element.style.height || '0', undefined)
            };
          }
        }
      }
    }, {
      key: "getPreTouch",
      value: function getPreTouch(touch) {
        var preTouch = null;
        var locPreTouchPool = this._preTouchPool;
        var id = touch.getID();

        for (var i = locPreTouchPool.length - 1; i >= 0; i--) {
          if (locPreTouchPool[i].getID() === id) {
            preTouch = locPreTouchPool[i];
            break;
          }
        }

        if (!preTouch) {
          preTouch = touch;
        }

        return preTouch;
      }
    }, {
      key: "setPreTouch",
      value: function setPreTouch(touch) {
        var find = false;
        var locPreTouchPool = this._preTouchPool;
        var id = touch.getID();

        for (var i = locPreTouchPool.length - 1; i >= 0; i--) {
          if (locPreTouchPool[i].getID() === id) {
            locPreTouchPool[i] = touch;
            find = true;
            break;
          }
        }

        if (!find) {
          if (locPreTouchPool.length <= 50) {
            locPreTouchPool.push(touch);
          } else {
            locPreTouchPool[this._preTouchPoolPointer] = touch;
            this._preTouchPoolPointer = (this._preTouchPoolPointer + 1) % 50;
          }
        }
      }
    }, {
      key: "getTouchByXY",
      value: function getTouchByXY(event, tx, ty, pos) {
        var locPreTouch = this._preTouchPoint;

        var location = this._glView.convertToLocationInView(tx, ty, pos);

        if (this._pointLocked) {
          location.x = locPreTouch.x + event.movementX;
          location.y = locPreTouch.y - event.movementY;
        }

        var touch = new _touch.Touch(location.x, location.y, 0);
        touch.setPrevPoint(locPreTouch.x, locPreTouch.y);
        locPreTouch.x = location.x;
        locPreTouch.y = location.y;
        return touch;
      }
    }, {
      key: "getMouseEvent",
      value: function getMouseEvent(location, pos, eventType) {
        var locPreMouse = this._prevMousePoint;
        var mouseEvent = new _events.EventMouse(eventType, false, locPreMouse);
        locPreMouse.x = location.x;
        locPreMouse.y = location.y; // this._glView!._convertMouseToLocationInView(locPreMouse, pos);

        this._glView._convertMouseToLocation(locPreMouse, pos);

        mouseEvent.setLocation(locPreMouse.x, locPreMouse.y);
        return mouseEvent;
      }
    }, {
      key: "getPointByEvent",
      value: function getPointByEvent(event, pos) {
        if (event.pageX != null) {
          // not avalable in <= IE8
          return {
            x: event.pageX,
            y: event.pageY
          };
        }

        if (_sys.sys.platform === _sys.sys.WECHAT_GAME) {
          pos.left = 0;
          pos.top = 0;
        } else {
          pos.left -= document.body.scrollLeft;
          pos.top -= document.body.scrollTop;
        }

        return {
          x: event.clientX,
          y: event.clientY
        };
      }
    }, {
      key: "getTouchesByEvent",
      value: function getTouchesByEvent(event, position) {
        var touches = [];
        var locView = this._glView;
        var locPreTouch = this._preTouchPoint;
        var length = event.changedTouches.length;

        for (var i = 0; i < length; i++) {
          // const changedTouch = event.changedTouches.item(i);
          var changedTouch = event.changedTouches[i];

          if (!changedTouch) {
            continue;
          }

          var _location = void 0;

          if (_sys.sys.BROWSER_TYPE_FIREFOX === _sys.sys.browserType) {
            _location = locView.convertToLocationInView(changedTouch.pageX, changedTouch.pageY, position, _vec2);
          } else {
            _location = locView.convertToLocationInView(changedTouch.clientX, changedTouch.clientY, position, _vec2);
          }

          var touch = void 0;

          if (changedTouch.identifier != null) {
            touch = new _touch.Touch(_location.x, _location.y, changedTouch.identifier); // use Touch Pool

            this.getPreTouch(touch).getLocation(_preLocation);
            touch.setPrevPoint(_preLocation.x, _preLocation.y);
            this.setPreTouch(touch);
          } else {
            touch = new _touch.Touch(_location.x, _location.y);
            touch.setPrevPoint(locPreTouch.x, locPreTouch.y);
          }

          locPreTouch.x = _location.x;
          locPreTouch.y = _location.y;
          touches.push(touch);
        }

        return touches;
      }
    }, {
      key: "registerSystemEvent",
      value: function registerSystemEvent(element) {
        if (this._isRegisterEvent || !element) {
          return;
        }

        this._glView = cc.view;
        var prohibition = _sys.sys.isMobile;
        var supportMouse = ('mouse' in _sys.sys.capabilities);
        var supportTouches = ('touches' in _sys.sys.capabilities);

        if (_sys.sys.platform === _sys.sys.WECHAT_GAME) {
          prohibition = false;
          supportTouches = true;
          supportMouse = false;
        } // Register mouse events.


        if (supportMouse) {
          this._registerMouseEvents(element, prohibition);
        } // Register mouse pointer events.


        if (window.navigator.msPointerEnabled) {
          this._registerMousePointerEvents(element);
        } // Register touch events.


        if (supportTouches) {
          this._registerTouchEvents(element);
        } // Register keyboard events.


        if (cc.sys.browserType !== cc.sys.BROWSER_TYPE_WECHAT_GAME_SUB) {
          this._registerKeyboardEvent();
        }

        this._isRegisterEvent = true;
      }
      /**
       * Whether enable accelerometer event.
       */

    }, {
      key: "setAccelerometerEnabled",
      value: function setAccelerometerEnabled(isEnable) {
        if (this._accelEnabled === isEnable) {
          return;
        }

        this._accelEnabled = isEnable;
        var scheduler = cc.director.getScheduler();
        scheduler.enableForTarget(this);

        if (this._accelEnabled) {
          this._registerAccelerometerEvent();

          this._accelCurTime = 0;
          scheduler.scheduleUpdate(this);
        } else {
          this._unregisterAccelerometerEvent();

          this._accelCurTime = 0;
          scheduler.unscheduleUpdate(this);
        }

        if (_defaultConstants.JSB || _defaultConstants.RUNTIME_BASED) {
          // @ts-ignore
          jsb.device.setMotionEnabled(isEnable);
        }
      }
    }, {
      key: "didAccelerate",
      value: function didAccelerate(eventData) {
        if (!this._accelEnabled) {
          return;
        }

        var mAcceleration = this._acceleration;
        var x = 0;
        var y = 0;
        var z = 0; // TODO
        // @ts-ignore

        if (this._accelDeviceEvent === window.DeviceMotionEvent) {
          var deviceMotionEvent = eventData;
          var eventAcceleration = deviceMotionEvent.accelerationIncludingGravity;

          if (eventAcceleration) {
            x = this._accelMinus * (eventAcceleration.x || 0) * 0.1;
            y = this._accelMinus * (eventAcceleration.y || 0) * 0.1;
            z = (eventAcceleration.z || 0) * 0.1;
          }
        } else {
          var deviceOrientationEvent = eventData;
          x = (deviceOrientationEvent.gamma || 0) / 90 * 0.981;
          y = -((deviceOrientationEvent.beta || 0) / 90) * 0.981;
          z = (deviceOrientationEvent.alpha || 0) / 90 * 0.981;
        }

        if (cc.view._isRotated) {
          var tmp = x;
          x = -y;
          y = tmp;
        }

        mAcceleration.x = x;
        mAcceleration.y = y;
        mAcceleration.z = z;
        mAcceleration.timestamp = eventData.timeStamp || Date.now();
        var tmpX = mAcceleration.x;

        if (window.orientation === LANDSCAPE_RIGHT) {
          mAcceleration.x = -mAcceleration.y;
          mAcceleration.y = tmpX;
        } else if (window.orientation === LANDSCAPE_LEFT) {
          mAcceleration.x = mAcceleration.y;
          mAcceleration.y = -tmpX;
        } else if (window.orientation === PORTRAIT_UPSIDE_DOWN) {
          mAcceleration.x = -mAcceleration.x;
          mAcceleration.y = -mAcceleration.y;
        } // fix android acc values are opposite


        if (cc.sys.os === cc.sys.OS_ANDROID && cc.sys.browserType !== cc.sys.BROWSER_TYPE_MOBILE_QQ) {
          mAcceleration.x = -mAcceleration.x;
          mAcceleration.y = -mAcceleration.y;
        }
      }
    }, {
      key: "update",
      value: function update(dt) {
        if (this._accelCurTime > this._accelInterval) {
          this._accelCurTime -= this._accelInterval;

          _eventManager.default.dispatchEvent(new _events.EventAcceleration(this._acceleration));
        }

        this._accelCurTime += dt;
      }
      /**
       * set accelerometer interval value
       * @method setAccelerometerInterval
       * @param {Number} interval
       */

    }, {
      key: "setAccelerometerInterval",
      value: function setAccelerometerInterval(interval) {
        if (this._accelInterval !== interval) {
          this._accelInterval = interval;

          if (_defaultConstants.JSB || _defaultConstants.RUNTIME_BASED) {
            // @ts-ignore
            if (jsb.device && jsb.device.setMotionInterval) {
              jsb.device.setMotionInterval(interval);
            }
          }
        }
      }
    }, {
      key: "_getUnUsedIndex",
      value: function _getUnUsedIndex() {
        var temp = this._indexBitsUsed;
        var now = cc.director.getCurrentTime();

        for (var i = 0; i < this._maxTouches; i++) {
          if (!(temp & 0x00000001)) {
            this._indexBitsUsed |= 1 << i;
            return i;
          } else {
            var touch = this._touches[i];

            if (now - touch.lastModified > TOUCH_TIMEOUT) {
              this._removeUsedIndexBit(i);

              var touchID = touch.getID();

              if (touchID !== null) {
                delete this._touchesIntegerDict[touchID];
              }

              return i;
            }
          }

          temp >>= 1;
        } // all bits are used


        return -1;
      }
    }, {
      key: "_removeUsedIndexBit",
      value: function _removeUsedIndexBit(index) {
        if (index < 0 || index >= this._maxTouches) {
          return;
        }

        var temp = 1 << index;
        temp = ~temp;
        this._indexBitsUsed &= temp;
      }
    }, {
      key: "_registerMouseEvents",
      value: function _registerMouseEvents(element, prohibition) {
        // HACK
        //  - At the same time to trigger the ontouch event and onmouse event
        //  - The function will execute 2 times
        // The known browser:
        //  liebiao
        //  miui
        //  WECHAT
        this._registerPointerLockEvent();

        if (!prohibition) {
          this._registerWindowMouseEvents(element);
        }

        this._registerElementMouseEvents(element, prohibition);
      }
    }, {
      key: "_registerPointerLockEvent",
      value: function _registerPointerLockEvent() {
        var _this = this;

        var lockChangeAlert = function lockChangeAlert() {
          var canvas = cc.game.canvas; // @ts-ignore

          if (document.pointerLockElement === canvas || document.mozPointerLockElement === canvas) {
            _this._pointLocked = true;
          } else {
            _this._pointLocked = false;
          }
        };

        if ('onpointerlockchange' in document) {
          document.addEventListener('pointerlockchange', lockChangeAlert, false);
        } else if ('onmozpointerlockchange' in document) {
          // @ts-ignore
          document.addEventListener('mozpointerlockchange', lockChangeAlert, false);
        }
      }
    }, {
      key: "_registerWindowMouseEvents",
      value: function _registerWindowMouseEvents(element) {
        var _this2 = this;

        window.addEventListener('mousedown', function () {
          _this2._mousePressed = true;
        }, false);
        window.addEventListener('mouseup', function (event) {
          if (!_this2._mousePressed) {
            return;
          }

          _this2._mousePressed = false;

          var position = _this2.getHTMLElementPosition(element);

          var location = _this2.getPointByEvent(event, position);

          var positionRect = (0, _rect.rect)(position.left, position.top, position.width, position.height);

          if (!positionRect.contains(new _index4.Vec2(location.x, location.y))) {
            _this2.handleTouchesEnd([_this2.getTouchByXY(event, location.x, location.y, position)]);

            var _mouseEvent = _this2.getMouseEvent(location, position, _events.EventMouse.UP);

            _mouseEvent.setButton(event.button);

            _eventManager.default.dispatchEvent(_mouseEvent);
          }
        }, false);
      }
    }, {
      key: "_registerElementMouseEvents",
      value: function _registerElementMouseEvents(element, prohibition) {
        var _this3 = this;

        // Register canvas mouse events.
        var listenDOMMouseEvent = function listenDOMMouseEvent(eventName, type, handler) {
          element.addEventListener(eventName, function (event) {
            var pos = _this3.getHTMLElementPosition(element);

            var location = _this3.getPointByEvent(event, pos);

            var mouseEvent = _this3.getMouseEvent(location, pos, type);

            mouseEvent.setButton(event.button);
            handler(event, mouseEvent, location, pos);

            _eventManager.default.dispatchEvent(mouseEvent);

            event.stopPropagation();
            event.preventDefault();
          });
        };

        if (!prohibition) {
          listenDOMMouseEvent('mousedown', _events.EventMouse.DOWN, function (event, mouseEvent, location, pos) {
            _this3._mousePressed = true;

            _this3.handleTouchesBegin([_this3.getTouchByXY(event, location.x, location.y, pos)]);

            element.focus();
          });
          listenDOMMouseEvent('mouseup', _events.EventMouse.UP, function (event, mouseEvent, location, pos) {
            _this3._mousePressed = false;

            _this3.handleTouchesEnd([_this3.getTouchByXY(event, location.x, location.y, pos)]);
          });
          listenDOMMouseEvent('mousemove', _events.EventMouse.MOVE, function (event, mouseEvent, location, pos) {
            _this3.handleTouchesMove([_this3.getTouchByXY(event, location.x, location.y, pos)]);

            if (!_this3._mousePressed) {
              mouseEvent.setButton(_events.EventMouse.BUTTON_MISSING);
            }

            if (event.movementX !== undefined && event.movementY !== undefined) {
              mouseEvent.movementX = event.movementX;
              mouseEvent.movementY = event.movementY;
            }
          });
        } // @ts-ignore


        listenDOMMouseEvent('mousewheel', _events.EventMouse.SCROLL, function (event, mouseEvent, location, pos) {
          mouseEvent.setScrollData(0, event.wheelDelta);
        });
        /* firefox fix */
        // @ts-ignore

        listenDOMMouseEvent('DOMMouseScroll', _events.EventMouse.SCROLL, function (event, mouseEvent, location, pos) {
          mouseEvent.setScrollData(0, event.detail * -120);
        });
      }
    }, {
      key: "_registerMousePointerEvents",
      value: function _registerMousePointerEvents(element) {
        var _this4 = this;

        var _pointerEventsMap = {
          MSPointerDown: this.handleTouchesBegin,
          MSPointerMove: this.handleTouchesMove,
          MSPointerUp: this.handleTouchesEnd,
          MSPointerCancel: this.handleTouchesCancel
        }; // tslint:disable-next-line: forin

        var _loop = function _loop(eventName) {
          var touchEvent = _pointerEventsMap[eventName]; // @ts-ignore

          element.addEventListener(eventName, function (event) {
            var pos = _this4.getHTMLElementPosition(element);

            pos.left -= document.documentElement.scrollLeft;
            pos.top -= document.documentElement.scrollTop;
            touchEvent.call(_this4, [_this4.getTouchByXY(event, event.clientX, event.clientY, pos)]);
            event.stopPropagation();
          }, false);
        };

        for (var eventName in _pointerEventsMap) {
          _loop(eventName);
        }
      }
    }, {
      key: "_registerTouchEvents",
      value: function _registerTouchEvents(element) {
        if (cc.sys.browserType === cc.sys.BROWSER_TYPE_WECHAT_GAME_SUB) {
          this._registerWXGameTouchEvents(element);
        } else {
          this._registerHTMLTouchEvents(element);
        }
      }
    }, {
      key: "_registerWXGameTouchEvents",
      value: function _registerWXGameTouchEvents(element) {
        var _this5 = this;

        var makeTouchListener = function makeTouchListener(touchesHandler) {
          return function (event) {
            var pos = _this5.getHTMLElementPosition(element);

            var body = document.body;
            pos.left -= body.scrollLeft || 0;
            pos.top -= body.scrollTop || 0;
            touchesHandler(_this5.getTouchesByEvent(event, pos));
          };
        };

        wx.onTouchStart(makeTouchListener(function (touchesToHandle) {
          _this5.handleTouchesBegin(touchesToHandle);
        }));
        wx.onTouchEnd(makeTouchListener(function (touchesToHandle) {
          _this5.handleTouchesEnd(touchesToHandle);
        }));
        wx.onTouchMove(makeTouchListener(function (touchesToHandle) {
          _this5.handleTouchesMove(touchesToHandle);
        }));
        wx.onTouchCancel(makeTouchListener(function (touchesToHandle) {
          _this5.handleTouchesCancel(touchesToHandle);
        }));
      }
    }, {
      key: "_registerHTMLTouchEvents",
      value: function _registerHTMLTouchEvents(element) {
        var _this6 = this;

        var makeTouchListener = function makeTouchListener(touchesHandler) {
          return function (event) {
            if (!event.changedTouches) {
              return;
            }

            var pos = _this6.getHTMLElementPosition(element);

            var body = document.body;
            pos.left -= body.scrollLeft || 0;
            pos.top -= body.scrollTop || 0;
            touchesHandler(_this6.getTouchesByEvent(event, pos));
            event.stopPropagation();
            event.preventDefault();
          };
        };

        element.addEventListener('touchstart', makeTouchListener(function (touchesToHandle) {
          _this6.handleTouchesBegin(touchesToHandle);

          if (_sys.sys.platform !== _sys.sys.WECHAT_GAME) {
            element.focus();
          }
        }), false);
        element.addEventListener('touchmove', makeTouchListener(function (touchesToHandle) {
          _this6.handleTouchesMove(touchesToHandle);
        }), false);
        element.addEventListener('touchend', makeTouchListener(function (touchesToHandle) {
          _this6.handleTouchesEnd(touchesToHandle);
        }), false);
        element.addEventListener('touchcancel', makeTouchListener(function (touchesToHandle) {
          _this6.handleTouchesCancel(touchesToHandle);
        }), false);
      }
    }, {
      key: "_registerKeyboardEvent",
      value: function _registerKeyboardEvent() {
        var canvas = cc.game.canvas;
        canvas.addEventListener('keydown', function (event) {
          _eventManager.default.dispatchEvent(new _events.EventKeyboard(event, true));

          event.stopPropagation();
          event.preventDefault();
        }, false);
        canvas.addEventListener('keyup', function (event) {
          _eventManager.default.dispatchEvent(new _events.EventKeyboard(event, false));

          event.stopPropagation();
          event.preventDefault();
        }, false);
      }
    }, {
      key: "_registerAccelerometerEvent",
      value: function _registerAccelerometerEvent() {
        var _this7 = this;

        this._acceleration = new Acceleration(); // TODO
        // @ts-ignore

        this._accelDeviceEvent = window.DeviceMotionEvent || window.DeviceOrientationEvent; // TODO fix DeviceMotionEvent bug on QQ Browser version 4.1 and below.

        if (cc.sys.browserType === cc.sys.BROWSER_TYPE_MOBILE_QQ) {
          // TODO
          // @ts-ignore
          this._accelDeviceEvent = window.DeviceOrientationEvent;
        }

        var _deviceEventType = // TODO
        // @ts-ignore
        this._accelDeviceEvent === window.DeviceMotionEvent ? 'devicemotion' : 'deviceorientation'; // @ts-ignore


        _didAccelerateFun = function _didAccelerateFun() {
          return _this7.didAccelerate.apply(_this7, arguments);
        };

        window.addEventListener(_deviceEventType, _didAccelerateFun, false);
      }
    }, {
      key: "_unregisterAccelerometerEvent",
      value: function _unregisterAccelerometerEvent() {
        var _deviceEventType = // TODO
        // @ts-ignore
        this._accelDeviceEvent === window.DeviceMotionEvent ? 'devicemotion' : 'deviceorientation';

        if (_didAccelerateFun) {
          window.removeEventListener(_deviceEventType, _didAccelerateFun, false);
        }
      }
    }]);

    return InputManager;
  }();

  var inputManager = new InputManager();
  var _default = inputManager;
  _exports.default = _default;
  cc.internal.inputManager = inputManager;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,