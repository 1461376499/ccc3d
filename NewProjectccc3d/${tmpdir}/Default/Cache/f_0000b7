(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../data/class-decorator.js", "../../gfx/define.js", "../../scene-graph/index.js", "../pipeline-funcs.js", "../render-batched-queue.js", "../render-instanced-queue.js", "../render-stage.js", "./enum.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../data/class-decorator.js"), require("../../gfx/define.js"), require("../../scene-graph/index.js"), require("../pipeline-funcs.js"), require("../render-batched-queue.js"), require("../render-instanced-queue.js"), require("../render-stage.js"), require("./enum.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.classDecorator, global.define, global.index, global.pipelineFuncs, global.renderBatchedQueue, global.renderInstancedQueue, global.renderStage, global._enum);
    global.forwardStage = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _classDecorator, _define, _index, _pipelineFuncs, _renderBatchedQueue, _renderInstancedQueue, _renderStage, _enum) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ForwardStage = void 0;

  var _dec, _class, _class2, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  var colors = [{
    r: 0,
    g: 0,
    b: 0,
    a: 1
  }];
  var bufs = [];
  /**
   * @en The forward render stage
   * @zh 前向渲染阶段。
   */

  var ForwardStage = (_dec = (0, _classDecorator.ccclass)('ForwardStage'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_RenderStage) {
    _inherits(ForwardStage, _RenderStage);

    function ForwardStage() {
      var _this;

      _classCallCheck(this, ForwardStage);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(ForwardStage).call(this));
      _this._opaqueBatchedQueue = void 0;
      _this._opaqueInstancedQueue = void 0;
      _this._opaqueBatchedQueue = new _renderBatchedQueue.RenderBatchedQueue();
      _this._opaqueInstancedQueue = new _renderInstancedQueue.RenderInstancedQueue();
      return _this;
    }

    _createClass(ForwardStage, [{
      key: "activate",
      value: function activate(flow) {
        _get(_getPrototypeOf(ForwardStage.prototype), "activate", this).call(this, flow);

        this.createCmdBuffer();
      }
    }, {
      key: "destroy",
      value: function destroy() {
        if (this._cmdBuff) {
          this._cmdBuff.destroy();

          this._cmdBuff = null;
        }
      }
    }, {
      key: "resize",
      value: function resize(width, height) {}
    }, {
      key: "rebuild",
      value: function rebuild() {}
    }, {
      key: "render",
      value: function render(view) {
        this._opaqueInstancedQueue.clear();

        this._opaqueBatchedQueue.clear();

        this._renderQueues.forEach(this.renderQueueClearFunc);

        var renderObjects = this._pipeline.renderObjects;

        for (var i = 0; i < renderObjects.length; ++i) {
          var ro = renderObjects[i];

          if (ro.model.isDynamicBatching) {
            var subModels = ro.model.subModels;

            for (var m = 0; m < subModels.length; ++m) {
              var subModel = subModels[m];
              var passes = subModel.passes;

              for (var p = 0; p < passes.length; ++p) {
                var pass = passes[p];
                var pso = subModel.psos[p];

                if (pass.instancedBuffer) {
                  pass.instancedBuffer.merge(subModel, ro.model.instancedAttributes, pso);

                  this._opaqueInstancedQueue.queue.add(pass.instancedBuffer);
                } else if (pass.batchedBuffer) {
                  pass.batchedBuffer.merge(subModel, ro, pso);

                  this._opaqueBatchedQueue.queue.add(pass.batchedBuffer);
                } else {
                  for (var k = 0; k < this._renderQueues.length; k++) {
                    this._renderQueues[k].insertRenderPass(ro, m, p);
                  }
                }
              }
            }
          } else {
            for (var _m = 0; _m < ro.model.subModelNum; _m++) {
              for (var _p = 0; _p < ro.model.getSubModel(_m).passes.length; _p++) {
                for (var _k = 0; _k < this._renderQueues.length; _k++) {
                  this._renderQueues[_k].insertRenderPass(ro, _m, _p);
                }
              }
            }
          }
        }

        this._renderQueues.forEach(this.renderQueueSortFunc);

        var camera = view.camera;
        var cmdBuff = this._cmdBuff;
        var vp = camera.viewport;
        this._renderArea.x = vp.x * camera.width;
        this._renderArea.y = vp.y * camera.height;
        this._renderArea.width = vp.width * camera.width * this.pipeline.shadingScale;
        this._renderArea.height = vp.height * camera.height * this.pipeline.shadingScale;

        if (camera.clearFlag & _define.GFXClearFlag.COLOR) {
          if (this._pipeline.isHDR) {
            (0, _pipelineFuncs.SRGBToLinear)(colors[0], camera.clearColor);
            var scale = this._pipeline.fpScale / camera.exposure;
            colors[0].r *= scale;
            colors[0].g *= scale;
            colors[0].b *= scale;
          } else {
            colors[0].r = camera.clearColor.r;
            colors[0].g = camera.clearColor.g;
            colors[0].b = camera.clearColor.b;
          }
        }

        colors[0].a = camera.clearColor.a;

        if (this._pipeline.usePostProcess) {
          if (!this._pipeline.useMSAA) {
            this._framebuffer = this._pipeline.getFrameBuffer(this._pipeline.currShading);
          } else {
            this._framebuffer = this._pipeline.getFrameBuffer('msaa');
          }
        } else {
          this._framebuffer = view.window.framebuffer;
        }

        var planarShadow = camera.scene.planarShadows;
        cmdBuff.begin();
        cmdBuff.beginRenderPass(this._framebuffer, this._renderArea, camera.clearFlag, colors, camera.clearDepth, camera.clearStencil);
        cmdBuff.execute(this._renderQueues[0].cmdBuffs.array, this._renderQueues[0].cmdBuffCount);

        this._opaqueInstancedQueue.recordCommandBuffer(cmdBuff);

        this._opaqueBatchedQueue.recordCommandBuffer(cmdBuff);

        if (camera.visibility & _index.Layers.BitMask.DEFAULT) {
          planarShadow.recordCommandBuffer(cmdBuff);
        }

        cmdBuff.execute(this._renderQueues[1].cmdBuffs.array, this._renderQueues[1].cmdBuffCount);
        cmdBuff.endRenderPass();
        cmdBuff.end();
        bufs[0] = cmdBuff;

        this._device.queue.submit(bufs);

        if (this._pipeline.useMSAA) {
          this._device.blitFramebuffer(this._framebuffer, this._pipeline.getFrameBuffer(this._pipeline.currShading), this._renderArea, this._renderArea, _define.GFXFilter.POINT);
        }
      }
    }]);

    return ForwardStage;
  }(_renderStage.RenderStage), _class2.initInfo = {
    name: 'ForwardStage',
    priority: _enum.ForwardStagePriority.FORWARD,
    renderQueues: [{
      isTransparent: false,
      sortMode: _renderStage.RenderQueueSortMode.FRONT_TO_BACK,
      stages: ['default']
    }, {
      isTransparent: true,
      sortMode: _renderStage.RenderQueueSortMode.BACK_TO_FRONT,
      stages: ['default', 'planarShadow']
    }]
  }, _temp)) || _class);
  _exports.ForwardStage = ForwardStage;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,