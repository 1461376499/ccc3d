(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../core/math/index.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../core/math/index.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index);
    global.utils = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.fillVertices3D = fillVertices3D;
  _exports.fillMeshVertices3D = fillMeshVertices3D;
  _exports.fillVerticesWithoutCalc3D = fillVerticesWithoutCalc3D;

  /**
   * @hidden
   */
  var vec3_temp = new _index.Vec3();

  var _worldMatrix = new _index.Mat4();

  function fillVertices3D(node, renderer, renderData, color) {
    var datas = renderData.datas;
    var buffer = renderer.currBufferBatch;
    var vertexOffset = buffer.byteOffset >> 2;
    var vertexCount = renderData.vertexCount;
    var indiceOffset = buffer.indiceOffset;
    var vertexId = buffer.vertexOffset;
    var isRecreate = buffer.request(vertexCount, renderData.indiceCount);

    if (!isRecreate) {
      buffer = renderer.currBufferBatch;
      vertexCount = 0;
      indiceOffset = 0;
      vertexId = 0;
    } // buffer data may be realloc, need get reference after request.


    var vbuf = buffer.vData;
    node.getWorldMatrix(_worldMatrix);

    for (var i = 0; i < vertexCount; i++) {
      var vert = datas[i];

      _index.Vec3.set(vec3_temp, vert.x, vert.y, 0);

      _index.Vec3.transformMat4(vec3_temp, vec3_temp, _worldMatrix);

      vbuf[vertexOffset++] = vec3_temp.x;
      vbuf[vertexOffset++] = vec3_temp.y;
      vbuf[vertexOffset++] = vec3_temp.z;
      vbuf[vertexOffset++] = vert.u;
      vbuf[vertexOffset++] = vert.v;

      _index.Color.toArray(vbuf, color, vertexOffset);

      vertexOffset += 4;
    } // buffer data may be realloc, need get reference after request.


    var ibuf = buffer.iData;

    for (var _i = 0; _i < renderData.dataLength; _i++) {
      ibuf[indiceOffset + _i] = vertexId + _i;
    }
  }

  function fillMeshVertices3D(node, renderer, renderData, color) {
    var datas = renderData.datas;
    var buffer = renderer.currBufferBatch;
    var vertexOffset = buffer.byteOffset >> 2;
    var vertexCount = renderData.vertexCount;
    var indiceOffset = buffer.indiceOffset;
    var vertexId = buffer.vertexOffset;
    var isRecreate = buffer.request(vertexCount, renderData.indiceCount);

    if (!isRecreate) {
      buffer = renderer.currBufferBatch;
      vertexCount = 0;
      indiceOffset = 0;
      vertexId = 0;
    } // buffer data may be realloc, need get reference after request.


    var vbuf = buffer.vData;
    var ibuf = buffer.iData;
    node.getWorldMatrix(_worldMatrix);

    for (var i = 0; i < vertexCount; i++) {
      var vert = datas[i];

      _index.Vec3.set(vec3_temp, vert.x, vert.y, 0);

      _index.Vec3.transformMat4(vec3_temp, vec3_temp, _worldMatrix);

      vbuf[vertexOffset++] = vec3_temp.x;
      vbuf[vertexOffset++] = vec3_temp.y;
      vbuf[vertexOffset++] = vec3_temp.z;
      vbuf[vertexOffset++] = vert.u;
      vbuf[vertexOffset++] = vert.v;

      _index.Color.toArray(vbuf, color, vertexOffset);

      vertexOffset += 4;
    } // fill index data


    for (var _i2 = 0, count = vertexCount / 4; _i2 < count; _i2++) {
      var start = vertexId + _i2 * 4;
      ibuf[indiceOffset++] = start;
      ibuf[indiceOffset++] = start + 1;
      ibuf[indiceOffset++] = start + 2;
      ibuf[indiceOffset++] = start + 1;
      ibuf[indiceOffset++] = start + 3;
      ibuf[indiceOffset++] = start + 2;
    }
  }

  function fillVerticesWithoutCalc3D(node, renderer, renderData, color) {
    var datas = renderData.datas;
    var buffer = renderer.currBufferBatch;
    var vertexOffset = buffer.byteOffset >> 2; // buffer

    var vertexCount = renderData.vertexCount;
    var indiceOffset = buffer.indiceOffset;
    var vertexId = buffer.vertexOffset;
    var isRecreate = buffer.request(vertexCount, renderData.indiceCount);

    if (!isRecreate) {
      buffer = renderer.currBufferBatch;
      vertexCount = 0;
      indiceOffset = 0;
      vertexId = 0;
    } // buffer data may be realloc, need get reference after request.


    var vbuf = buffer.vData;

    for (var i = 0; i < vertexCount; i++) {
      var vert = datas[i];
      vbuf[vertexOffset++] = vert.x;
      vbuf[vertexOffset++] = vert.y;
      vbuf[vertexOffset++] = vert.z;
      vbuf[vertexOffset++] = vert.u;
      vbuf[vertexOffset++] = vert.v;

      _index.Color.toArray(vbuf, color, vertexOffset);

      vertexOffset += 4;
    } // buffer data may be realloc, need get reference after request.


    var ibuf = buffer.iData;
    ibuf[indiceOffset++] = vertexId;
    ibuf[indiceOffset++] = vertexId + 1;
    ibuf[indiceOffset++] = vertexId + 2;
    ibuf[indiceOffset++] = vertexId + 1;
    ibuf[indiceOffset++] = vertexId + 3;
    ibuf[indiceOffset++] = vertexId + 2;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,