(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports);
    global.bits = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.sign = sign;
  _exports.abs = abs;
  _exports.min = min;
  _exports.max = max;
  _exports.isPow2 = isPow2;
  _exports.log2 = log2;
  _exports.log10 = log10;
  _exports.popCount = popCount;
  _exports.countTrailingZeros = countTrailingZeros;
  _exports.nextPow2 = nextPow2;
  _exports.prevPow2 = prevPow2;
  _exports.parity = parity;
  _exports.reverse = reverse;
  _exports.interleave2 = interleave2;
  _exports.deinterleave2 = deinterleave2;
  _exports.interleave3 = interleave3;
  _exports.deinterleave3 = deinterleave3;
  _exports.nextCombination = nextCombination;
  _exports.INT_MIN = _exports.INT_MAX = _exports.INT_BITS = void 0;

  /**
   * 数学库
   * @category core/math
   */

  /**
   * Bit twiddling hacks for JavaScript.
   *
   * Author: Mikola Lysenko
   *
   * Ported from Stanford bit twiddling hack library:
   *    http://graphics.stanford.edu/~seander/bithacks.html
   */
  // Number of bits in an integer
  var INT_BITS = 32;
  _exports.INT_BITS = INT_BITS;
  var INT_MAX = 0x7fffffff;
  _exports.INT_MAX = INT_MAX;
  var INT_MIN = -1 << INT_BITS - 1;
  /**
   * @en Returns -1, 0, +1 depending on sign of x.
   * @zh 根据x的符号返回 -1，0，+1。
   */

  _exports.INT_MIN = INT_MIN;

  function sign(v) {
    return (v > 0) - (v < 0);
  }
  /**
   * @en Computes absolute value of integer.
   * @zh 计算整数的绝对值。
   */


  function abs(v) {
    var mask = v >> INT_BITS - 1;
    return (v ^ mask) - mask;
  }
  /**
   * @en Computes minimum of integers x and y.
   * @zh 计算整数x和y中的最小值。
   */


  function min(x, y) {
    return y ^ (x ^ y) & -(x < y);
  }
  /**
   * @en Computes maximum of integers x and y.
   * @zh 计算整数x和y中的最大值。
   */


  function max(x, y) {
    return x ^ (x ^ y) & -(x < y);
  }
  /**
   * @en Checks if a number is a power of two.
   * @zh 检查一个数字是否是2的幂。
   */


  function isPow2(v) {
    return !(v & v - 1) && !!v;
  }
  /**
   * Computes log base 2 of v.
   */


  function log2(v) {
    var r;
    var shift;
    r = (v > 0xFFFF) << 4;
    v >>>= r;
    shift = (v > 0xFF) << 3;
    v >>>= shift;
    r |= shift;
    shift = (v > 0xF) << 2;
    v >>>= shift;
    r |= shift;
    shift = (v > 0x3) << 1;
    v >>>= shift;
    r |= shift;
    return r | v >> 1;
  }
  /**
   * Computes log base 10 of v.
   */


  function log10(v) {
    return v >= 1000000000 ? 9 : v >= 100000000 ? 8 : v >= 10000000 ? 7 : v >= 1000000 ? 6 : v >= 100000 ? 5 : v >= 10000 ? 4 : v >= 1000 ? 3 : v >= 100 ? 2 : v >= 10 ? 1 : 0;
  }
  /**
   * Counts number of bits.
   */


  function popCount(v) {
    v = v - (v >>> 1 & 0x55555555);
    v = (v & 0x33333333) + (v >>> 2 & 0x33333333);
    return (v + (v >>> 4) & 0xF0F0F0F) * 0x1010101 >>> 24;
  }
  /**
   * @en Counts number of trailing zeros.
   * @zh 计算数字后面零的数量。
   */


  function countTrailingZeros(v) {
    var c = 32;
    v &= -v;

    if (v) {
      c--;
    }

    if (v & 0x0000FFFF) {
      c -= 16;
    }

    if (v & 0x00FF00FF) {
      c -= 8;
    }

    if (v & 0x0F0F0F0F) {
      c -= 4;
    }

    if (v & 0x33333333) {
      c -= 2;
    }

    if (v & 0x55555555) {
      c -= 1;
    }

    return c;
  }
  /**
   * Rounds to next power of 2.
   */


  function nextPow2(v) {
    v += v === 0;
    --v;
    v |= v >>> 1;
    v |= v >>> 2;
    v |= v >>> 4;
    v |= v >>> 8;
    v |= v >>> 16;
    return v + 1;
  }
  /**
   * Rounds down to previous power of 2.
   */


  function prevPow2(v) {
    v |= v >>> 1;
    v |= v >>> 2;
    v |= v >>> 4;
    v |= v >>> 8;
    v |= v >>> 16;
    return v - (v >>> 1);
  }
  /**
   * Computes parity of word.
   */


  function parity(v) {
    v ^= v >>> 16;
    v ^= v >>> 8;
    v ^= v >>> 4;
    v &= 0xf;
    return 0x6996 >>> v & 1;
  }

  var REVERSE_TABLE = new Array(256);

  (function (tab) {
    for (var i = 0; i < 256; ++i) {
      var v = i;
      var r = i;
      var s = 7;

      for (v >>>= 1; v; v >>>= 1) {
        r <<= 1;
        r |= v & 1;
        --s;
      }

      tab[i] = r << s & 0xff;
    }
  })(REVERSE_TABLE);
  /**
   * Reverse bits in a 32 bit word.
   */


  function reverse(v) {
    return REVERSE_TABLE[v & 0xff] << 24 | REVERSE_TABLE[v >>> 8 & 0xff] << 16 | REVERSE_TABLE[v >>> 16 & 0xff] << 8 | REVERSE_TABLE[v >>> 24 & 0xff];
  }
  /**
   * Interleave bits of 2 coordinates with 16 bits. Useful for fast quadtree codes.
   */


  function interleave2(x, y) {
    x &= 0xFFFF;
    x = (x | x << 8) & 0x00FF00FF;
    x = (x | x << 4) & 0x0F0F0F0F;
    x = (x | x << 2) & 0x33333333;
    x = (x | x << 1) & 0x55555555;
    y &= 0xFFFF;
    y = (y | y << 8) & 0x00FF00FF;
    y = (y | y << 4) & 0x0F0F0F0F;
    y = (y | y << 2) & 0x33333333;
    y = (y | y << 1) & 0x55555555;
    return x | y << 1;
  }
  /**
   * Extracts the nth interleaved component.
   */


  function deinterleave2(v, n) {
    v = v >>> n & 0x55555555;
    v = (v | v >>> 1) & 0x33333333;
    v = (v | v >>> 2) & 0x0F0F0F0F;
    v = (v | v >>> 4) & 0x00FF00FF;
    v = (v | v >>> 16) & 0x000FFFF;
    return v << 16 >> 16;
  }
  /**
   * Interleave bits of 3 coordinates, each with 10 bits.  Useful for fast octree codes.
   */


  function interleave3(x, y, z) {
    x &= 0x3FF;
    x = (x | x << 16) & 4278190335;
    x = (x | x << 8) & 251719695;
    x = (x | x << 4) & 3272356035;
    x = (x | x << 2) & 1227133513;
    y &= 0x3FF;
    y = (y | y << 16) & 4278190335;
    y = (y | y << 8) & 251719695;
    y = (y | y << 4) & 3272356035;
    y = (y | y << 2) & 1227133513;
    x |= y << 1;
    z &= 0x3FF;
    z = (z | z << 16) & 4278190335;
    z = (z | z << 8) & 251719695;
    z = (z | z << 4) & 3272356035;
    z = (z | z << 2) & 1227133513;
    return x | z << 2;
  }
  /**
   * Extracts nth interleaved component of a 3-tuple.
   */


  function deinterleave3(v, n) {
    v = v >>> n & 1227133513;
    v = (v | v >>> 2) & 3272356035;
    v = (v | v >>> 4) & 251719695;
    v = (v | v >>> 8) & 4278190335;
    v = (v | v >>> 16) & 0x3FF;
    return v << 22 >> 22;
  }
  /**
   * Computes next combination in colexicographic order (this is
   * mistakenly called nextPermutation on the bit twiddling hacks page).
   */


  function nextCombination(v) {
    var t = v | v - 1;
    return t + 1 | (~t & -~t) - 1 >>> countTrailingZeros(v) + 1;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,