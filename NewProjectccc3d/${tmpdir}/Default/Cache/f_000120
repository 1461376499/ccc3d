(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../../../core/3d/misc/utils.js", "../../../../core/gfx/index.js", "../../../../core/math/index.js", "../../../../core/renderer/ui/ui-vertex-format.js", "../types.js", "./earcut.js", "./impl.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../../../core/3d/misc/utils.js"), require("../../../../core/gfx/index.js"), require("../../../../core/math/index.js"), require("../../../../core/renderer/ui/ui-vertex-format.js"), require("../types.js"), require("./earcut.js"), require("./impl.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.utils, global.index, global.index, global.uiVertexFormat, global.types, global.earcut, global.impl);
    global.graphicsAssembler = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _utils, _index, _index2, _uiVertexFormat, _types, _earcut, _impl2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.graphicsAssembler = void 0;

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  var MAX_VERTEX = 65535;
  var MAX_INDICE = MAX_VERTEX * 2;
  var PI = Math.PI;
  var min = Math.min;
  var max = Math.max;
  var ceil = Math.ceil;
  var acos = Math.acos;
  var cos = Math.cos;
  var sin = Math.sin;
  var atan2 = Math.atan2;
  var abs = Math.abs;
  var attrBytes = 9;
  var attrs = _uiVertexFormat.vfmt;
  var positions = [];
  var uvs = [];
  var colors = [];
  var indices = [];
  var _renderData = null;
  var _impl = null;

  var _curColor = new _index2.Color();

  var vec3_temps = [];

  for (var i = 0; i < 4; i++) {
    vec3_temps.push(new _index2.Vec3());
  }

  function curveDivs(r, arc, tol) {
    var da = acos(r / (r + tol)) * 2.0;
    return max(2, ceil(arc / da));
  }

  function clamp(v, minNum, maxNum) {
    if (v < minNum) {
      return minNum;
    } else if (v > maxNum) {
      return maxNum;
    }

    return v;
  }
  /**
   * graphics 组装器
   * 可通过 cc.UI.graphicsAssembler 获取该组装器。
   */


  var graphicsAssembler = {
    useModel: true,
    createImpl: function createImpl(graphics) {
      return new _impl2.Impl();
    },
    updateRenderData: function updateRenderData(graphics) {
      var datas = graphics.impl ? graphics.impl.getRenderDatas() : [];

      for (var _i = 0, l = datas.length; _i < l; _i++) {
        datas[_i].material = graphics.material;
      }
    },
    fillBuffers: function fillBuffers(graphics, renderer) {// this.renderIA!(graphics, renderer);
    },
    renderIA: function renderIA(graphics, renderer) {},
    getRenderData: function getRenderData(graphics, cverts) {
      if (!_impl) {
        return null;
      }

      var renderDatas = _impl.getRenderDatas();

      var renderData = renderDatas[_impl.dataOffset];

      if (!renderData) {
        return null;
      }

      var meshbuffer = renderData;
      var maxVertsCount = meshbuffer ? meshbuffer.vertexCount + cverts : 0;

      if (maxVertsCount > MAX_VERTEX || maxVertsCount * 3 > MAX_INDICE) {
        ++_impl.dataOffset; // maxVertsCount = cverts;

        if (_impl.dataOffset < renderDatas.length) {
          renderData = renderDatas[_impl.dataOffset];
        } else {
          renderData = _impl.requestRenderData();
          renderDatas[_impl.dataOffset] = renderData;
        }

        renderData.material = graphics.material;
        meshbuffer = renderData;
      }

      if (meshbuffer && meshbuffer.vertexCount < maxVertsCount) {
        meshbuffer.request(cverts, cverts * 3);
      }

      return renderData;
    },
    stroke: function stroke(graphics) {
      _index2.Color.copy(_curColor, graphics.strokeColor); // graphics.node.getWorldMatrix(_currMatrix);


      if (!graphics.impl) {
        return;
      }

      this._flattenPaths(graphics.impl);

      this._expandStroke(graphics);

      graphics.impl.updatePathOffset = true;
      this.end(graphics);
    },
    fill: function fill(graphics) {
      _index2.Color.copy(_curColor, graphics.fillColor); // graphics.node.getWorldMatrix(_currMatrix);


      this._expandFill(graphics);

      if (graphics.impl) {
        graphics.impl.updatePathOffset = true;
      }

      this.end(graphics);
    },
    end: function end(graphics) {
      if (graphics.model && graphics.model.inited) {
        graphics.model.destroy();
      }

      var impl = graphics.impl;
      var primitiveMode = _index.GFXPrimitiveMode.TRIANGLE_LIST;
      var renderDatas = impl && impl.getRenderDatas();

      if (!renderDatas) {
        return;
      }

      var i = 0;
      positions.length = 0;
      uvs.length = 0;
      colors.length = 0;
      indices.length = 0;

      var _iterator = _createForOfIteratorHelper(renderDatas),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var renderData = _step.value;
          var len = renderData.byteCount >> 2;
          var vData = renderData.vData;

          for (i = 0; i < len;) {
            positions.push(vData[i++]);
            positions.push(vData[i++]);
            positions.push(vData[i++]);
            uvs.push(vData[i++]);
            uvs.push(vData[i++]);
            colors.push(vData[i++]);
            colors.push(vData[i++]);
            colors.push(vData[i++]);
            colors.push(vData[i++]);
          }

          len = renderData.indiceCount;
          var iData = renderData.iData;

          for (i = 0; i < len;) {
            indices.push(iData[i++]);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var mesh = (0, _utils.createMesh)({
        primitiveMode: primitiveMode,
        positions: positions,
        uvs: uvs,
        colors: colors,
        attributes: attrs,
        indices: indices
      }, undefined, {
        calculateBounds: false
      });
      graphics.model.initialize(graphics.node);
      graphics.model.initSubModel(0, mesh.renderingSubMeshes[0], graphics.material);
      graphics.markForUpdateRenderData();
    },
    _expandStroke: function _expandStroke(graphics) {
      var w = graphics.lineWidth * 0.5;
      var lineCap = graphics.lineCap;
      var lineJoin = graphics.lineJoin;
      var miterLimit = graphics.miterLimit;
      _impl = graphics.impl;

      if (!_impl) {
        return;
      }

      var ncap = curveDivs(w, PI, _impl.tessTol);

      this._calculateJoins(_impl, w, lineJoin, miterLimit);

      var paths = _impl.paths; // Calculate max vertex usage.

      var cverts = 0;

      for (var _i2 = _impl.pathOffset, l = _impl.pathLength; _i2 < l; _i2++) {
        var path = paths[_i2];
        var pointsLength = path.points.length;

        if (lineJoin === _types.LineJoin.ROUND) {
          cverts += (pointsLength + path.nbevel * (ncap + 2) + 1) * 2;
        } // plus one for loop
        else {
            cverts += (pointsLength + path.nbevel * 5 + 1) * 2;
          } // plus one for loop


        if (!path.closed) {
          // space for caps
          if (lineCap === _types.LineCap.ROUND) {
            cverts += (ncap * 2 + 2) * 2;
          } else {
            cverts += (3 + 3) * 2;
          }
        }
      }

      var meshbuffer = _renderData = this.getRenderData(graphics, cverts);

      if (!meshbuffer) {
        return;
      }

      var vData = meshbuffer.vData;
      var iData = meshbuffer.iData;

      for (var _i3 = _impl.pathOffset, _l = _impl.pathLength; _i3 < _l; _i3++) {
        var _path = paths[_i3];
        var pts = _path.points;
        var _pointsLength = pts.length;
        var offset = meshbuffer.vertexStart;
        var p0 = void 0;
        var p1 = void 0;
        var start = 0;
        var end = 0;
        var loop = _path.closed;

        if (loop) {
          // Looping
          p0 = pts[_pointsLength - 1];
          p1 = pts[0];
          start = 0;
          end = _pointsLength;
        } else {
          // Add cap
          p0 = pts[0];
          p1 = pts[1];
          start = 1;
          end = _pointsLength - 1;
        }

        if (!loop) {
          // Add cap
          var dPos = new _impl2.Point(p1.x, p1.y);
          dPos.subtract(p0);
          dPos.normalize();
          var dx = dPos.x;
          var dy = dPos.y;

          if (lineCap === _types.LineCap.BUTT) {
            this._buttCap(p0, dx, dy, w, 0);
          } else if (lineCap === _types.LineCap.SQUARE) {
            this._buttCap(p0, dx, dy, w, w);
          } else if (lineCap === _types.LineCap.ROUND) {
            this._roundCapStart(p0, dx, dy, w, ncap);
          }
        }

        for (var j = start; j < end; ++j) {
          if (lineJoin === _types.LineJoin.ROUND) {
            this._roundJoin(p0, p1, w, w, ncap);
          } else if ((p1.flags & (_types.PointFlags.PT_BEVEL | _types.PointFlags.PT_INNERBEVEL)) !== 0) {
            this._bevelJoin(p0, p1, w, w);
          } else {
            this._vset(p1.x + p1.dmx * w, p1.y + p1.dmy * w);

            this._vset(p1.x - p1.dmx * w, p1.y - p1.dmy * w);
          }

          p0 = p1;
          p1 = pts[j + 1];
        }

        if (loop) {
          // Loop it
          var vDataoOfset = offset * attrBytes;
          var data = vData.slice(vDataoOfset, vDataoOfset + attrBytes);
          vData.set(data, meshbuffer.vertexStart * attrBytes);
          vDataoOfset += attrBytes;
          meshbuffer.vertexStart++;
          data = vData.slice(vDataoOfset, vDataoOfset + attrBytes);
          vData.set(data, meshbuffer.vertexStart * attrBytes);
          meshbuffer.vertexStart++;
        } else {
          // Add cap
          var _dPos = new _impl2.Point(p1.x, p1.y);

          _dPos.subtract(p0);

          _dPos.normalize();

          var _dx = _dPos.x;
          var _dy = _dPos.y;

          if (lineCap === _types.LineCap.BUTT) {
            this._buttCap(p1, _dx, _dy, w, 0);
          } else if (lineCap === _types.LineCap.SQUARE) {
            this._buttCap(p1, _dx, _dy, w, w);
          } else if (lineCap === _types.LineCap.ROUND) {
            this._roundCapEnd(p1, _dx, _dy, w, ncap);
          }
        } // stroke indices


        var indicesOffset = meshbuffer.indiceStart;

        for (var begin = offset + 2, over = meshbuffer.vertexStart; begin < over; begin++) {
          iData[indicesOffset++] = begin - 2;
          iData[indicesOffset++] = begin - 1;
          iData[indicesOffset++] = begin;
        }

        meshbuffer.indiceStart = indicesOffset;

        if (indicesOffset !== meshbuffer.indiceCount) {
          var arr = new Array(meshbuffer.indiceCount - indicesOffset);
          meshbuffer.iData.set(arr, indicesOffset);
        }
      }

      _renderData = null;
      _impl = null;
    },
    _expandFill: function _expandFill(graphics) {
      _impl = graphics.impl;

      if (!_impl) {
        return;
      }

      var paths = _impl.paths; // Calculate max vertex usage.

      var cverts = 0;

      for (var _i4 = _impl.pathOffset, l = _impl.pathLength; _i4 < l; _i4++) {
        var path = paths[_i4];
        var pointsLength = path.points.length;
        cverts += pointsLength;
      }

      var renderData = _renderData = this.getRenderData(graphics, cverts);

      if (!renderData) {
        return;
      }

      var meshbuffer = renderData;
      var vData = meshbuffer.vData;
      var iData = meshbuffer.iData;

      for (var _i5 = _impl.pathOffset, _l2 = _impl.pathLength; _i5 < _l2; _i5++) {
        var _path2 = paths[_i5];
        var pts = _path2.points;
        var _pointsLength2 = pts.length;

        if (_pointsLength2 === 0) {
          continue;
        } // Calculate shape vertices.


        var vertexOffset = renderData.vertexStart;

        for (var j = 0; j < _pointsLength2; ++j) {
          this._vset(pts[j].x, pts[j].y);
        }

        var indicesOffset = renderData.indiceStart;

        if (_path2.complex) {
          var earcutData = [];

          for (var _j = vertexOffset, end = renderData.vertexStart; _j < end; _j++) {
            var vDataOffset = _j * attrBytes;
            earcutData.push(vData[vDataOffset++]);
            earcutData.push(vData[vDataOffset++]);
            earcutData.push(vData[vDataOffset++]);
          }

          var newIndices = (0, _earcut.earcut)(earcutData, null, 3);

          if (!newIndices || newIndices.length === 0) {
            continue;
          }

          for (var _j2 = 0, nIndices = newIndices.length; _j2 < nIndices; _j2++) {
            iData[indicesOffset++] = newIndices[_j2] + vertexOffset;
          }
        } else {
          var first = vertexOffset;

          for (var start = vertexOffset + 2, _end = meshbuffer.vertexStart; start < _end; start++) {
            iData[indicesOffset++] = first;
            iData[indicesOffset++] = start - 1;
            iData[indicesOffset++] = start;
          }
        }

        meshbuffer.indiceStart = indicesOffset;

        if (indicesOffset !== meshbuffer.indiceCount) {
          var arr = new Array(meshbuffer.indiceCount - indicesOffset);
          meshbuffer.iData.set(arr, indicesOffset);
        }
      }

      _renderData = null;
      _impl = null;
    },
    _calculateJoins: function _calculateJoins(impl, w, lineJoin, miterLimit) {
      var iw = 0.0;

      if (w > 0.0) {
        iw = 1 / w;
      } // Calculate which joins needs extra vertices to append, and gather vertex count.


      var paths = impl.paths;

      for (var _i6 = impl.pathOffset, l = impl.pathLength; _i6 < l; _i6++) {
        var path = paths[_i6];
        var pts = path.points;
        var ptsLength = pts.length;
        var p0 = pts[ptsLength - 1];
        var p1 = pts[0];
        var nleft = 0;
        path.nbevel = 0;

        for (var j = 0; j < ptsLength; j++) {
          var dmr2 = 0;
          var cross = 0;
          var limit = 0; // perp normals

          var dlx0 = p0.dy;
          var dly0 = -p0.dx;
          var dlx1 = p1.dy;
          var dly1 = -p1.dx; // Calculate extrusions

          p1.dmx = (dlx0 + dlx1) * 0.5;
          p1.dmy = (dly0 + dly1) * 0.5;
          dmr2 = p1.dmx * p1.dmx + p1.dmy * p1.dmy;

          if (dmr2 > 0.000001) {
            var scale = 1 / dmr2;

            if (scale > 600) {
              scale = 600;
            }

            p1.dmx *= scale;
            p1.dmy *= scale;
          } // Keep track of left turns.


          cross = p1.dx * p0.dy - p0.dx * p1.dy;

          if (cross > 0) {
            nleft++;
            p1.flags |= _types.PointFlags.PT_LEFT;
          } // Calculate if we should use bevel or miter for inner join.


          limit = max(11, min(p0.len, p1.len) * iw);

          if (dmr2 * limit * limit < 1) {
            p1.flags |= _types.PointFlags.PT_INNERBEVEL;
          } // Check to see if the corner needs to be beveled.


          if (p1.flags & _types.PointFlags.PT_CORNER) {
            if (dmr2 * miterLimit * miterLimit < 1 || lineJoin === _types.LineJoin.BEVEL || lineJoin === _types.LineJoin.ROUND) {
              p1.flags |= _types.PointFlags.PT_BEVEL;
            }
          }

          if ((p1.flags & (_types.PointFlags.PT_BEVEL | _types.PointFlags.PT_INNERBEVEL)) !== 0) {
            path.nbevel++;
          }

          p0 = p1;
          p1 = pts[j + 1];
        }
      }
    },
    _flattenPaths: function _flattenPaths(impl) {
      var paths = impl.paths;

      for (var _i7 = impl.pathOffset, l = impl.pathLength; _i7 < l; _i7++) {
        var path = paths[_i7];
        var pts = path.points;
        var p0 = pts[pts.length - 1];
        var p1 = pts[0];

        if (p0.equals(p1)) {
          path.closed = true;
          pts.pop();
          p0 = pts[pts.length - 1];
        }

        for (var j = 0, size = pts.length; j < size; j++) {
          // Calculate segment direction and length
          var dPos = new _impl2.Point(p1.x, p1.y);
          dPos.subtract(p0);
          p0.len = dPos.length();

          if (dPos.x || dPos.y) {
            dPos.normalize();
          }

          p0.dx = dPos.x;
          p0.dy = dPos.y; // Advance

          p0 = p1;
          p1 = pts[j + 1];
        }
      }
    },
    _chooseBevel: function _chooseBevel(bevel, p0, p1, w) {
      var x = p1.x;
      var y = p1.y;
      var x0 = 0;
      var y0 = 0;
      var x1 = 0;
      var y1 = 0;

      if (bevel !== 0) {
        x0 = x + p0.dy * w;
        y0 = y - p0.dx * w;
        x1 = x + p1.dy * w;
        y1 = y - p1.dx * w;
      } else {
        x0 = x1 = x + p1.dmx * w;
        y0 = y1 = y + p1.dmy * w;
      }

      return [x0, y0, x1, y1];
    },
    _buttCap: function _buttCap(p, dx, dy, w, d) {
      var px = p.x - dx * d;
      var py = p.y - dy * d;
      var dlx = dy;
      var dly = -dx;

      this._vset(px + dlx * w, py + dly * w);

      this._vset(px - dlx * w, py - dly * w);
    },
    _roundCapStart: function _roundCapStart(p, dx, dy, w, ncap) {
      var px = p.x;
      var py = p.y;
      var dlx = dy;
      var dly = -dx;

      for (var _i8 = 0; _i8 < ncap; _i8++) {
        var a = _i8 / (ncap - 1) * PI;
        var ax = cos(a) * w;
        var ay = sin(a) * w;

        this._vset(px - dlx * ax - dx * ay, py - dly * ax - dy * ay);

        this._vset(px, py);
      }

      this._vset(px + dlx * w, py + dly * w);

      this._vset(px - dlx * w, py - dly * w);
    },
    _roundCapEnd: function _roundCapEnd(p, dx, dy, w, ncap) {
      var px = p.x;
      var py = p.y;
      var dlx = dy;
      var dly = -dx;

      this._vset(px + dlx * w, py + dly * w);

      this._vset(px - dlx * w, py - dly * w);

      for (var _i9 = 0; _i9 < ncap; _i9++) {
        var a = _i9 / (ncap - 1) * PI;
        var ax = cos(a) * w;
        var ay = sin(a) * w;

        this._vset(px, py);

        this._vset(px - dlx * ax + dx * ay, py - dly * ax + dy * ay);
      }
    },
    _roundJoin: function _roundJoin(p0, p1, lw, rw, ncap) {
      var dlx0 = p0.dy;
      var dly0 = -p0.dx;
      var dlx1 = p1.dy;
      var dly1 = -p1.dx;
      var p1x = p1.x;
      var p1y = p1.y;

      if ((p1.flags & _types.PointFlags.PT_LEFT) !== 0) {
        var out = this._chooseBevel(p1.flags & _types.PointFlags.PT_INNERBEVEL, p0, p1, lw);

        var lx0 = out[0];
        var ly0 = out[1];
        var lx1 = out[2];
        var ly1 = out[3];
        var a0 = atan2(-dly0, -dlx0);
        var a1 = atan2(-dly1, -dlx1);

        if (a1 > a0) {
          a1 -= PI * 2;
        }

        this._vset(lx0, ly0);

        this._vset(p1x - dlx0 * rw, p1.y - dly0 * rw);

        var n = clamp(ceil((a0 - a1) / PI) * ncap, 2, ncap);

        for (var _i10 = 0; _i10 < n; _i10++) {
          var u = _i10 / (n - 1);
          var a = a0 + u * (a1 - a0);
          var rx = p1x + cos(a) * rw;
          var ry = p1y + sin(a) * rw;

          this._vset(p1x, p1y);

          this._vset(rx, ry);
        }

        this._vset(lx1, ly1);

        this._vset(p1x - dlx1 * rw, p1y - dly1 * rw);
      } else {
        var _out = this._chooseBevel(p1.flags & _types.PointFlags.PT_INNERBEVEL, p0, p1, -rw);

        var rx0 = _out[0];
        var ry0 = _out[1];
        var rx1 = _out[2];
        var ry1 = _out[3];

        var _a = atan2(dly0, dlx0);

        var _a2 = atan2(dly1, dlx1);

        if (_a2 < _a) {
          _a2 += PI * 2;
        }

        this._vset(p1x + dlx0 * rw, p1y + dly0 * rw, 0);

        this._vset(rx0, ry0, 0);

        var _n = clamp(ceil((_a2 - _a) / PI) * ncap, 2, ncap);

        for (var _i11 = 0; _i11 < _n; _i11++) {
          var _u = _i11 / (_n - 1);

          var _a3 = _a + _u * (_a2 - _a);

          var lx = p1x + cos(_a3) * lw;
          var ly = p1y + sin(_a3) * lw;

          this._vset(lx, ly, 0);

          this._vset(p1x, p1y, 0);
        }

        this._vset(p1x + dlx1 * rw, p1y + dly1 * rw);

        this._vset(rx1, ry1);
      }
    },
    _bevelJoin: function _bevelJoin(p0, p1, lw, rw) {
      var rx0 = 0;
      var ry0 = 0;
      var rx1 = 0;
      var ry1 = 0;
      var lx0 = 0;
      var ly0 = 0;
      var lx1 = 0;
      var ly1 = 0;
      var dlx0 = p0.dy;
      var dly0 = -p0.dx;
      var dlx1 = p1.dy;
      var dly1 = -p1.dx;

      if (p1.flags & _types.PointFlags.PT_LEFT) {
        var out = this._chooseBevel(p1.flags & _types.PointFlags.PT_INNERBEVEL, p0, p1, lw);

        lx0 = out[0];
        ly0 = out[1];
        lx1 = out[2];
        ly1 = out[3];

        this._vset(lx0, ly0, 0);

        this._vset(p1.x - dlx0 * rw, p1.y - dly0 * rw, 0);

        this._vset(lx1, ly1, 0);

        this._vset(p1.x - dlx1 * rw, p1.y - dly1 * rw, 0);
      } else {
        var _out2 = this._chooseBevel(p1.flags & _types.PointFlags.PT_INNERBEVEL, p0, p1, -rw);

        rx0 = _out2[0];
        ry0 = _out2[1];
        rx1 = _out2[2];
        ry1 = _out2[3];

        this._vset(p1.x + dlx0 * lw, p1.y + dly0 * lw, 0);

        this._vset(rx0, ry0);

        this._vset(p1.x + dlx1 * lw, p1.y + dly1 * lw, 0);

        this._vset(rx1, ry1);
      }
    },
    _vset: function _vset(x, y) {
      if (!_renderData) {
        return;
      }

      var meshbuffer = _renderData;
      var dataOffset = meshbuffer.vertexStart * attrBytes;
      var vData = meshbuffer.vData; // vec3.set(_tempVec3, x, y, 0);
      // vec3.transformMat4(_tempVec3, _tempVec3, _currMatrix);

      vData[dataOffset++] = x;
      vData[dataOffset++] = y;
      vData[dataOffset++] = 0;
      vData[dataOffset++] = 1;
      vData[dataOffset++] = 1;

      _index2.Color.toArray(vData, _curColor, dataOffset);

      meshbuffer.vertexStart++;
    }
  };
  _exports.graphicsAssembler = graphicsAssembler;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,