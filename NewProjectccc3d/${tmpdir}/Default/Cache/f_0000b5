(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./define.js", "./pipeline-serialization.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./define.js"), require("./pipeline-serialization.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.define, global.pipelineSerialization);
    global.renderView = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _define, _pipelineSerialization) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RenderView = _exports.RenderViewPriority = void 0;

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  /**
   * @en The predefined priority of render view
   * @zh 预设渲染视图优先级。
   */
  var RenderViewPriority;
  /**
   * @en Render view information descriptor
   * @zh 渲染视图描述信息。
   */

  _exports.RenderViewPriority = RenderViewPriority;

  (function (RenderViewPriority) {
    RenderViewPriority[RenderViewPriority["GENERAL"] = 100] = "GENERAL";
  })(RenderViewPriority || (_exports.RenderViewPriority = RenderViewPriority = {}));

  /**
   * @en Render view represents a view from its camera, it also manages a list of [[RenderFlow]]s which will be executed for it.
   * @zh 渲染视图代表了它的相机所拍摄的视图，它也管理一组在视图上执行的 [[RenderFlow]]。
   */
  var RenderView = /*#__PURE__*/function () {
    _createClass(RenderView, [{
      key: "name",

      /**
       * @en Name
       * @zh 名称。
       */
      get: function get() {
        return this._name;
      }
      /**
       * @en The GFX window
       * @zh GFX 窗口。
       */

    }, {
      key: "window",
      get: function get() {
        return this._window;
      },
      set: function set(val) {
        this._window = val;
      }
      /**
       * @en The priority among other render views, used for sorting.
       * @zh 在所有 RenderView 中的优先级，用于排序。
       */

    }, {
      key: "priority",
      get: function get() {
        return this._priority;
      },
      set: function set(val) {
        this._priority = val;

        if (cc.director.root) {
          cc.director.root.sortViews();
        }
      }
      /**
       * @en The visibility is a mask which allows nodes in the scene be seen by the current view if their [[Node.layer]] bit is included in this mask.
       * @zh 可见性是一个掩码，如果场景中节点的 [[Node.layer]] 位被包含在该掩码中，则对应节点对该视图是可见的。
       */

    }, {
      key: "visibility",
      set: function set(vis) {
        this._visibility = vis;
      },
      get: function get() {
        return this._visibility;
      }
      /**
       * @en The camera correspond to this render view
       * @zh 该视图对应的相机。
       * @readonly
       */

    }, {
      key: "camera",
      get: function get() {
        return this._camera;
      }
      /**
       * @en Whether the view is enabled
       * @zh 是否启用。
       * @readonly
       */

    }, {
      key: "isEnable",
      get: function get() {
        return this._isEnable;
      }
      /**
       * @en Render flow list
       * @zh 渲染流程列表。
       * @readonly
       */

    }, {
      key: "flows",
      get: function get() {
        return this._flows;
      }
      /**
       * Internal usage
       */

    }], [{
      key: "registerCreateFunc",
      value: function registerCreateFunc(root) {
        root._createViewFun = function (_root, _camera) {
          return new RenderView(_root, _camera);
        };
      }
    }]);

    /**
     * @en The constructor
     * @zh 构造函数。
     * @param root
     * @param camera
     */
    function RenderView(root, camera) {
      _classCallCheck(this, RenderView);

      this._root = void 0;
      this._name = '';
      this._window = null;
      this._priority = 0;
      this._visibility = _define.CAMERA_DEFAULT_MASK;
      this._camera = void 0;
      this._isEnable = false;
      this._flows = [];
      this._root = root;
      this._camera = camera;
    }
    /**
     * @en Initialization function with a render view information descriptor
     * @zh 使用一个渲染视图描述信息来初始化。
     * @param info Render view information descriptor
     */


    _createClass(RenderView, [{
      key: "initialize",
      value: function initialize(info) {
        this._name = info.name;
        this.priority = info.priority;
        this.setExecuteFlows(info.flows);
        return true;
      }
      /**
       * @en The destroy function
       * @zh 销毁函数。
       */

    }, {
      key: "destroy",
      value: function destroy() {
        this._window = null;
        this._priority = 0;
      }
      /**
       * @en Enable or disable this render view
       * @zh 启用或禁用该渲染视图。
       * @param isEnable Whether to enable or disable this view
       */

    }, {
      key: "enable",
      value: function enable(isEnable) {
        this._isEnable = isEnable;
      }
      /**
       * @en Set the execution render flows with their names, the flows found in the pipeline will then be executed for this view in the render process
       * @zh 使用对应的名字列表设置需要执行的渲染流程，所有在渲染管线中找到的对应渲染流程都会用来对当前视图执行渲染。
       * @param flows The names of all [[RenderFlow]]s
       */

    }, {
      key: "setExecuteFlows",
      value: function setExecuteFlows(flows) {
        this.flows.length = 0;

        if (flows && flows.length === 1 && flows[0] === 'UIFlow') {
          this._flows.push(cc.director.root.pipeline.getFlow('UIFlow'));

          return;
        }

        var pipelineFlows = cc.director.root.pipeline.activeFlows;

        for (var i = 0; i < pipelineFlows.length; ++i) {
          var f = pipelineFlows[i];

          if (f.type === _pipelineSerialization.RenderFlowType.SCENE || flows && flows.indexOf(f.name) !== -1) {
            this.flows.push(f);
          }
        }
      }
    }]);

    return RenderView;
  }();

  _exports.RenderView = RenderView;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,