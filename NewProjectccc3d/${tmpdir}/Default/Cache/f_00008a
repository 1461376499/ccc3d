(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../gfx/index.js", "../math/index.js", "./define.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../gfx/index.js"), require("../math/index.js"), require("./define.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.index, global.define);
    global.batchedBuffer = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _index2, _define) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.BatchedBuffer = void 0;

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var _localBatched = new _define.UBOLocalBatched();

  var BatchedBuffer = /*#__PURE__*/function () {
    function BatchedBuffer(pass) {
      _classCallCheck(this, BatchedBuffer);

      this.batches = [];
      this.pass = void 0;
      this.pass = pass;
    }

    _createClass(BatchedBuffer, [{
      key: "destroy",
      value: function destroy() {
        for (var i = 0; i < this.batches.length; ++i) {
          var batch = this.batches[i];

          for (var j = 0; j < batch.vbs.length; ++j) {
            batch.vbs[j].destroy();
          }

          batch.vbIdx.destroy();
          batch.ia.destroy();
          batch.ubo.destroy();
        }

        this.batches.length = 0;
      }
    }, {
      key: "merge",
      value: function merge(subModel, ro, pso) {
        var flatBuffers = subModel.subMeshData.flatBuffers;

        if (flatBuffers.length === 0) {
          return;
        }

        var vbSize = 0;
        var vbIdxSize = 0;
        var vbCount = flatBuffers[0].count;
        var bindingLayout = pso.pipelineLayout.layouts[0];
        var isBatchExist = false;

        for (var i = 0; i < this.batches.length; ++i) {
          var batch = this.batches[i];

          if (batch.vbs.length === flatBuffers.length && batch.mergeCount < _define.UBOLocalBatched.BATCHING_COUNT) {
            isBatchExist = true;

            for (var j = 0; j < batch.vbs.length; ++j) {
              var vb = batch.vbs[j];

              if (vb.stride !== flatBuffers[j].stride) {
                isBatchExist = false;
                break;
              }
            }

            if (isBatchExist) {
              for (var _j = 0; _j < batch.vbs.length; ++_j) {
                var flatBuff = flatBuffers[_j];
                var batchVB = batch.vbs[_j];
                var vbBuf = batch.vbDatas[_j];
                vbSize = (vbCount + batch.vbCount) * flatBuff.stride;

                if (vbSize > batchVB.size) {
                  batchVB.resize(vbSize);
                  vbBuf = batch.vbDatas[_j] = new Uint8Array(batchVB.bufferView.buffer);
                }

                vbBuf.set(flatBuff.buffer, batch.vbCount * flatBuff.stride);
              }

              vbIdxSize = (vbCount + batch.vbCount) * 4;

              if (vbIdxSize > batch.vbIdx.size) {
                batch.vbIdx.resize(vbIdxSize);
                batch.vbIdxData = new Float32Array(batch.vbIdx.bufferView.buffer);
              }

              var start = batch.vbCount;
              var end = start + vbCount;
              var vbIdxBuf = batch.vbIdxData;
              var mergeCount = batch.mergeCount;

              if (vbIdxBuf[start] !== mergeCount || vbIdxBuf[end - 1] !== mergeCount) {
                for (var _j2 = start; _j2 < end; _j2++) {
                  vbIdxBuf[_j2] = mergeCount + 0.1; // guard against underflow
                }
              } // update world matrix


              _index2.Mat4.toArray(batch.uboData.view, ro.model.transform.worldMatrix, _define.UBOLocalBatched.MAT_WORLDS_OFFSET + batch.mergeCount * 16);

              if (!batch.mergeCount && batch.pso !== pso) {
                bindingLayout.bindBuffer(_define.UBOLocalBatched.BLOCK.binding, batch.ubo);
                bindingLayout.update();
                batch.pso = pso;
              }

              ++batch.mergeCount;
              batch.vbCount += vbCount;
              batch.ia.vertexCount += vbCount;
              return;
            }
          }
        }

        var device = this.pass.device; // Create a new batch

        var vbs = [];
        var vbDatas = [];
        var totalVBs = [];

        for (var _i = 0; _i < flatBuffers.length; ++_i) {
          var _flatBuff = flatBuffers[_i];
          var newVB = device.createBuffer({
            usage: _index.GFXBufferUsageBit.VERTEX | _index.GFXBufferUsageBit.TRANSFER_DST,
            memUsage: _index.GFXMemoryUsageBit.HOST | _index.GFXMemoryUsageBit.DEVICE,
            size: _flatBuff.count * _flatBuff.stride,
            stride: _flatBuff.stride,
            flags: _index.GFXBufferFlagBit.BAKUP_BUFFER
          });
          newVB.update(_flatBuff.buffer.buffer);
          vbs.push(newVB);
          vbDatas.push(new Uint8Array(newVB.bufferView.buffer));
          totalVBs.push(newVB);
        }

        var vbIdx = device.createBuffer({
          usage: _index.GFXBufferUsageBit.VERTEX | _index.GFXBufferUsageBit.TRANSFER_DST,
          memUsage: _index.GFXMemoryUsageBit.HOST | _index.GFXMemoryUsageBit.DEVICE,
          size: vbCount * 4,
          stride: 4,
          flags: _index.GFXBufferFlagBit.BAKUP_BUFFER
        });
        var vbIndices = new Float32Array(vbCount);
        vbIndices.fill(0);
        vbIdx.update(vbIndices);
        totalVBs.push(vbIdx);
        var vbIdxData = new Float32Array(vbIdx.bufferView.buffer);
        var attributes = subModel.inputAssembler.attributes;
        var attrs = new Array(attributes.length + 1);

        for (var a = 0; a < attributes.length; ++a) {
          attrs[a] = attributes[a];
        }

        attrs[attributes.length] = {
          name: 'a_dyn_batch_id',
          format: _index.GFXFormat.R32F,
          stream: flatBuffers.length
        };
        var ia = device.createInputAssembler({
          attributes: attrs,
          vertexBuffers: totalVBs
        });
        var ubo = this.pass.device.createBuffer({
          usage: _index.GFXBufferUsageBit.UNIFORM | _index.GFXBufferUsageBit.TRANSFER_DST,
          memUsage: _index.GFXMemoryUsageBit.HOST | _index.GFXMemoryUsageBit.DEVICE,
          size: _define.UBOLocalBatched.SIZE
        });
        bindingLayout.bindBuffer(_define.UBOLocalBatched.BLOCK.binding, ubo);
        bindingLayout.update();
        var uboData = new _define.UBOLocalBatched();

        _index2.Mat4.toArray(uboData.view, ro.model.transform.worldMatrix, _define.UBOLocalBatched.MAT_WORLDS_OFFSET);

        this.batches.push({
          mergeCount: 1,
          vbs: vbs,
          vbDatas: vbDatas,
          vbIdx: vbIdx,
          vbIdxData: vbIdxData,
          vbCount: vbCount,
          ia: ia,
          ubo: ubo,
          uboData: uboData,
          pso: pso
        });
      }
    }, {
      key: "clear",
      value: function clear() {
        for (var i = 0; i < this.batches.length; ++i) {
          var batch = this.batches[i];
          batch.vbCount = 0;
          batch.mergeCount = 0;
          batch.ia.vertexCount = 0;
        }
      }
    }, {
      key: "clearUBO",
      value: function clearUBO() {
        for (var i = 0; i < this.batches.length; ++i) {
          var batch = this.batches[i];
          batch.ubo.update(_localBatched.view.buffer);
        }
      }
    }]);

    return BatchedBuffer;
  }();

  _exports.BatchedBuffer = BatchedBuffer;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,