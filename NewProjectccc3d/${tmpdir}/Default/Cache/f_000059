(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "@cocos/cannon", "../../core/math/index.js", "./cannon-util.js", "./shapes/cannon-shape.js", "./cannon-shared-body.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("@cocos/cannon"), require("../../core/math/index.js"), require("./cannon-util.js"), require("./shapes/cannon-shape.js"), require("./cannon-shared-body.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.cannon, global.index, global.cannonUtil, global.cannonShape, global.cannonSharedBody);
    global.cannonWorld = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _cannon, _index, _cannonUtil, _cannonShape, _cannonSharedBody) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.CannonWorld = void 0;
  _cannon = _interopRequireDefault(_cannon);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var CannonWorld = /*#__PURE__*/function () {
    _createClass(CannonWorld, [{
      key: "setDefaultMaterial",
      value: function setDefaultMaterial(mat) {
        this._world.defaultMaterial.friction = mat.friction;
        this._world.defaultMaterial.restitution = mat.restitution;

        if (_cannonShape.CannonShape.idToMaterial[mat._uuid] != null) {
          _cannonShape.CannonShape.idToMaterial[mat._uuid] = this._world.defaultMaterial;
        }
      }
    }, {
      key: "setAllowSleep",
      value: function setAllowSleep(v) {
        this._world.allowSleep = v;
      }
    }, {
      key: "setGravity",
      value: function setGravity(gravity) {
        _index.Vec3.copy(this._world.gravity, gravity);
      } // get defaultContactMaterial () {
      //     return this._defaultContactMaterial;
      // }

    }, {
      key: "impl",
      get: function get() {
        return this._world;
      }
    }]);

    function CannonWorld() {
      _classCallCheck(this, CannonWorld);

      this.bodies = [];
      this._world = void 0;
      this._raycastResult = new _cannon.default.RaycastResult();
      this._world = new _cannon.default.World();
      this._world.broadphase = new _cannon.default.NaiveBroadphase();
      this._world.solver.iterations = 10;
      this._world.solver.tolerance = 0.0001;
      this._world.defaultContactMaterial.contactEquationStiffness = 1000000;
      this._world.defaultContactMaterial.frictionEquationStiffness = 1000000;
      this._world.defaultContactMaterial.contactEquationRelaxation = 3;
      this._world.defaultContactMaterial.frictionEquationRelaxation = 3;
    }

    _createClass(CannonWorld, [{
      key: "emitEvents",
      value: function emitEvents() {
        this._world.emitTriggeredEvents();

        this._world.emitCollisionEvents();
      }
    }, {
      key: "syncSceneToPhysics",
      value: function syncSceneToPhysics() {
        for (var i = 0; i < this.bodies.length; i++) {
          this.bodies[i].syncSceneToPhysics();
        }
      }
    }, {
      key: "step",
      value: function step(deltaTime, timeSinceLastCalled, maxSubStep) {
        if (this.bodies.length == 0) return;

        this._world.step(deltaTime, timeSinceLastCalled, maxSubStep); // sync physics to scene


        for (var i = 0; i < this.bodies.length; i++) {
          this.bodies[i].syncPhysicsToScene();
        }
      }
    }, {
      key: "raycastClosest",
      value: function raycastClosest(worldRay, options, result) {
        setupFromAndTo(worldRay, options.maxDistance);
        (0, _cannonUtil.toCannonRaycastOptions)(raycastOpt, options);

        var hit = this._world.raycastClosest(from, to, raycastOpt, this._raycastResult);

        if (hit) {
          (0, _cannonUtil.fillRaycastResult)(result, this._raycastResult);
        }

        return hit;
      }
    }, {
      key: "raycast",
      value: function raycast(worldRay, options, pool, results) {
        setupFromAndTo(worldRay, options.maxDistance);
        (0, _cannonUtil.toCannonRaycastOptions)(raycastOpt, options);

        var hit = this._world.raycastAll(from, to, raycastOpt, function (result) {
          var r = pool.add();
          (0, _cannonUtil.fillRaycastResult)(r, result);
          results.push(r);
        });

        return hit;
      }
    }, {
      key: "getSharedBody",
      value: function getSharedBody(node) {
        return _cannonSharedBody.CannonSharedBody.getSharedBody(node, this);
      }
    }, {
      key: "addSharedBody",
      value: function addSharedBody(sharedBody) {
        var i = this.bodies.indexOf(sharedBody);

        if (i < 0) {
          this.bodies.push(sharedBody);

          this._world.addBody(sharedBody.body);
        }
      }
    }, {
      key: "removeSharedBody",
      value: function removeSharedBody(sharedBody) {
        var i = this.bodies.indexOf(sharedBody);

        if (i >= 0) {
          this.bodies.splice(i, 1);

          this._world.remove(sharedBody.body);
        }
      } //  addContactMaterial (contactMaterial: ContactMaterial) {
      //     this._cannonWorld.addContactMaterial(contactMaterial._getImpl());
      // }

    }, {
      key: "addConstraint",
      value: function addConstraint(constraint) {
        this._world.addConstraint(constraint.impl);
      }
    }, {
      key: "removeConstraint",
      value: function removeConstraint(constraint) {
        this._world.removeConstraint(constraint.impl);
      }
    }]);

    return CannonWorld;
  }();

  _exports.CannonWorld = CannonWorld;
  var from = new _cannon.default.Vec3();
  var to = new _cannon.default.Vec3();

  function setupFromAndTo(worldRay, distance) {
    _index.Vec3.copy(from, worldRay.o);

    worldRay.computeHit(to, distance);
  }

  var raycastOpt = {
    'checkCollisionResponse': false,
    'collisionFilterGroup': -1,
    'collisionFilterMask': -1,
    'skipBackFaces': true
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,