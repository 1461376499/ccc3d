(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../data/class-decorator.js", "../math/index.js", "../3d/misc/buffer.js", "../3d/misc/buffer-blob.js", "../geometry/index.js", "../gfx/define.js", "../gfx/device.js", "../platform/debug.js", "../platform/sys.js", "../utils/murmurhash2_gc.js", "./asset.js", "./utils/mesh-utils.js", "./morph.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../data/class-decorator.js"), require("../math/index.js"), require("../3d/misc/buffer.js"), require("../3d/misc/buffer-blob.js"), require("../geometry/index.js"), require("../gfx/define.js"), require("../gfx/device.js"), require("../platform/debug.js"), require("../platform/sys.js"), require("../utils/murmurhash2_gc.js"), require("./asset.js"), require("./utils/mesh-utils.js"), require("./morph.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.classDecorator, global.index, global.buffer, global.bufferBlob, global.index, global.define, global.device, global.debug, global.sys, global.murmurhash2_gc, global.asset, global.meshUtils, global.morph);
    global.mesh = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _classDecorator, _index, _buffer, _bufferBlob, _index2, _define, _device, _debug, _sys, _murmurhash2_gc, _asset, _meshUtils, _morph) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Mesh = _exports.RenderingSubMesh = void 0;

  var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function getIndexStrideCtor(stride) {
    switch (stride) {
      case 1:
        return Uint8Array;

      case 2:
        return Uint16Array;

      case 4:
        return Uint32Array;
    }

    return Uint8Array;
  }
  /**
   * 允许存储索引的数组视图。
   */


  /**
   * 渲染子网格。
   */
  var RenderingSubMesh = /*#__PURE__*/function () {
    _createClass(RenderingSubMesh, [{
      key: "geometricInfo",

      /**
       * 使用的所有顶点缓冲区。
       */

      /**
       * 所有顶点属性。
       */

      /**
       * 图元类型。
       */

      /**
       * 使用的索引缓冲区，若未使用则无需指定。
       */

      /**
       * 间接绘制缓冲区。
       */

      /**
       * （用于射线检测的）几何信息。
       */
      get: function get() {
        if (this._geometricInfo) {
          return this._geometricInfo;
        }

        if (this.mesh === undefined) {
          return {
            positions: new Float32Array(),
            indices: new Uint8Array(),
            boundingBox: {
              min: _index.Vec3.ZERO,
              max: _index.Vec3.ZERO
            }
          };
        }

        if (this.subMeshIdx === undefined) {
          return {
            positions: new Float32Array(),
            indices: new Uint8Array(),
            boundingBox: {
              min: _index.Vec3.ZERO,
              max: _index.Vec3.ZERO
            }
          };
        }

        var mesh = this.mesh;
        var index = this.subMeshIdx;
        var positions = mesh.readAttribute(index, _define.GFXAttributeName.ATTR_POSITION);
        var indices = mesh.readIndices(index);
        var max = new _index.Vec3();
        var min = new _index.Vec3();
        var pAttri = this.attributes.find(function (element) {
          return element.name === cc.GFXAttributeName.ATTR_POSITION;
        });

        if (pAttri) {
          var conut = _define.GFXFormatInfos[pAttri.format].count;

          if (conut === 2) {
            max.set(positions[0], positions[1], 0);
            min.set(positions[0], positions[1], 0);
          } else {
            max.set(positions[0], positions[1], positions[2]);
            min.set(positions[0], positions[1], positions[2]);
          }

          for (var i = 0; i < positions.length; i += conut) {
            if (conut === 2) {
              max.x = positions[i] > max.x ? positions[i] : max.x;
              max.y = positions[i + 1] > max.y ? positions[i + 1] : max.y;
              min.x = positions[i] < min.x ? positions[i] : min.x;
              min.y = positions[i + 1] < min.y ? positions[i + 1] : min.y;
            } else {
              max.x = positions[i] > max.x ? positions[i] : max.x;
              max.y = positions[i + 1] > max.y ? positions[i + 1] : max.y;
              max.z = positions[i + 2] > max.z ? positions[i + 2] : max.z;
              min.x = positions[i] < min.x ? positions[i] : min.x;
              min.y = positions[i + 1] < min.y ? positions[i + 1] : min.y;
              min.z = positions[i + 2] < min.z ? positions[i + 2] : min.z;
            }
          }
        }

        this._geometricInfo = {
          positions: positions,
          indices: indices,
          boundingBox: {
            max: max,
            min: min
          }
        };
        return this._geometricInfo;
      }
      /**
       * 扁平化的顶点缓冲区。
       */

    }, {
      key: "flatBuffers",
      get: function get() {
        if (this._flatBuffers) {
          return this._flatBuffers;
        }

        var buffers = this._flatBuffers = [];

        if (!this.mesh || this.subMeshIdx === undefined) {
          return buffers;
        }

        var mesh = this.mesh;
        var idxCount = 0;
        var prim = mesh.struct.primitives[this.subMeshIdx];

        if (prim.indexView) {
          idxCount = prim.indexView.count;
        }

        var _iterator = _createForOfIteratorHelper(prim.vertexBundelIndices),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var bundleIdx = _step.value;
            var _vertexBundle = mesh.struct.vertexBundles[bundleIdx];
            var vbCount = prim.indexView ? prim.indexView.count : _vertexBundle.view.count;
            var vbStride = _vertexBundle.view.stride;
            var vbSize = vbStride * vbCount;
            var view = new Uint8Array(mesh.data.buffer, _vertexBundle.view.offset, _vertexBundle.view.length);

            if (!prim.indexView) {
              this._flatBuffers.push({
                stride: vbStride,
                count: vbCount,
                buffer: view
              });

              continue;
            }

            var vbView = new Uint8Array(vbSize);
            var ibView = mesh.readIndices(this.subMeshIdx); // transform to flat buffer

            for (var n = 0; n < idxCount; ++n) {
              var idx = ibView[n];
              var offset = n * vbStride;
              var srcOffset = idx * vbStride;

              for (var m = 0; m < vbStride; ++m) {
                vbView[offset + m] = view[srcOffset + m];
              }
            }

            this._flatBuffers.push({
              stride: vbStride,
              count: vbCount,
              buffer: vbView
            });
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return this._flatBuffers;
      }
      /**
       * 骨骼索引按映射表处理后的顶点缓冲。
       */

    }, {
      key: "jointMappedBuffers",
      get: function get() {
        var _this = this;

        if (this._jointMappedBuffers) {
          return this._jointMappedBuffers;
        }

        var buffers = this._jointMappedBuffers = [];
        var indices = this._jointMappedBufferIndices = [];

        if (!this.mesh || this.subMeshIdx === undefined) {
          return this._jointMappedBuffers = this.vertexBuffers;
        }

        var struct = this.mesh.struct;
        var prim = struct.primitives[this.subMeshIdx];

        if (!struct.jointMaps || prim.jointMapIndex === undefined || !struct.jointMaps[prim.jointMapIndex]) {
          return this._jointMappedBuffers = this.vertexBuffers;
        }

        var jointFormat;
        var jointOffset;
        var device = cc.director.root.device;

        for (var i = 0; i < prim.vertexBundelIndices.length; i++) {
          var bundle = struct.vertexBundles[prim.vertexBundelIndices[i]];
          jointOffset = 0;
          jointFormat = _define.GFXFormat.UNKNOWN;

          for (var j = 0; j < bundle.attributes.length; j++) {
            var attr = bundle.attributes[j];

            if (attr.name === _define.GFXAttributeName.ATTR_JOINTS) {
              jointFormat = attr.format;
              break;
            }

            jointOffset += _define.GFXFormatInfos[attr.format].size;
          }

          if (jointFormat) {
            (function () {
              var data = new Uint8Array(_this.mesh.data.buffer, bundle.view.offset, bundle.view.length);
              var dataView = new DataView(data.slice().buffer);
              var idxMap = struct.jointMaps[prim.jointMapIndex];
              (0, _buffer.mapBuffer)(dataView, function (cur) {
                return idxMap.indexOf(cur);
              }, jointFormat, jointOffset, bundle.view.length, bundle.view.stride, dataView);
              var buffer = device.createBuffer({
                usage: _define.GFXBufferUsageBit.VERTEX | _define.GFXBufferUsageBit.TRANSFER_DST,
                memUsage: _define.GFXMemoryUsageBit.HOST | _define.GFXMemoryUsageBit.DEVICE,
                size: bundle.view.length,
                stride: bundle.view.stride
              });
              buffer.update(dataView.buffer);
              buffers.push(buffer);
              indices.push(i);
            })();
          } else {
            buffers.push(this.vertexBuffers[prim.vertexBundelIndices[i]]);
          }
        }

        if (this._vertexIdChannel) {
          buffers.push(this._allocVertexIdBuffer(device));
        }

        return buffers;
      }
    }]);

    function RenderingSubMesh(vertexBuffers, attributes, primitiveMode) {
      _classCallCheck(this, RenderingSubMesh);

      this.vertexBuffers = void 0;
      this.attributes = void 0;
      this.primitiveMode = void 0;
      this.indexBuffer = void 0;
      this.indirectBuffer = void 0;
      this.mesh = void 0;
      this.subMeshIdx = void 0;
      this._flatBuffers = void 0;
      this._jointMappedBuffers = void 0;
      this._jointMappedBufferIndices = void 0;
      this._vertexIdChannel = void 0;
      this._geometricInfo = void 0;
      this.vertexBuffers = vertexBuffers;
      this.attributes = attributes;
      this.primitiveMode = primitiveMode;
    }

    _createClass(RenderingSubMesh, [{
      key: "destroy",
      value: function destroy() {
        for (var i = 0; i < this.vertexBuffers.length; i++) {
          this.vertexBuffers[i].destroy();
        }

        this.vertexBuffers.length = 0;

        if (this.indexBuffer) {
          this.indexBuffer.destroy();
          this.indexBuffer = undefined;
        }

        if (this._jointMappedBuffers && this._jointMappedBufferIndices) {
          for (var _i = 0; _i < this._jointMappedBufferIndices.length; _i++) {
            this._jointMappedBuffers[this._jointMappedBufferIndices[_i]].destroy();
          }

          this._jointMappedBuffers = undefined;
          this._jointMappedBufferIndices = undefined;
        }

        if (this.indirectBuffer) {
          this.indirectBuffer.destroy();
          this.indirectBuffer = undefined;
        }
      }
      /**
       * Adds a vertex attribute input called 'a_vertexId' into this sub-mesh.
       * This is useful if you want to simulate `gl_VertexId` in WebGL context prior to 2.0.
       * Once you call this function, the vertex attribute is permanently added.
       * Subsequent calls to this function take no effect.
       * @param device Device used to create related rendering resources.
       */

    }, {
      key: "enableVertexIdChannel",
      value: function enableVertexIdChannel(device) {
        if (this._vertexIdChannel) {
          return;
        }

        var streamIndex = this.vertexBuffers.length;
        var attributeIndex = this.attributes.length;

        var vertexIdBuffer = this._allocVertexIdBuffer(device);

        this.vertexBuffers.push(vertexIdBuffer);
        this.attributes.push({
          name: 'a_vertexId',
          format: _define.GFXFormat.R32F,
          stream: streamIndex,
          isNormalized: false
        });
        this._vertexIdChannel = {
          stream: streamIndex,
          index: attributeIndex
        };
      }
    }, {
      key: "_allocVertexIdBuffer",
      value: function _allocVertexIdBuffer(device) {
        var vertexCount = this.vertexBuffers.length === 0 || this.vertexBuffers[0].stride === 0 ? 0 : // TODO: This depends on how stride of a vertex buffer is defined; Consider padding problem.
        this.vertexBuffers[0].size / this.vertexBuffers[0].stride;
        var vertexIds = new Float32Array(vertexCount);

        for (var iVertex = 0; iVertex < vertexCount; ++iVertex) {
          vertexIds[iVertex] = iVertex;
        }

        var vertexIdBuffer = device.createBuffer({
          usage: _define.GFXBufferUsageBit.VERTEX | _define.GFXBufferUsageBit.TRANSFER_DST,
          memUsage: _define.GFXMemoryUsageBit.HOST | _define.GFXMemoryUsageBit.DEVICE,
          size: vertexIds.byteLength,
          stride: vertexIds.BYTES_PER_ELEMENT
        });
        vertexIdBuffer.update(vertexIds);
        return vertexIdBuffer;
      }
    }]);

    return RenderingSubMesh;
  }();

  _exports.RenderingSubMesh = RenderingSubMesh;
  var v3_1 = new _index.Vec3();
  var v3_2 = new _index.Vec3();
  /**
   * 网格资源。
   */

  var Mesh = (_dec = (0, _classDecorator.ccclass)('cc.Mesh'), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Asset) {
    _inherits(Mesh, _Asset);

    _createClass(Mesh, [{
      key: "_nativeAsset",
      get: function get() {
        return this._data.buffer;
      },
      set: function set(value) {
        if (this._data && this._data.byteLength === value.byteLength) {
          this._data.set(new Uint8Array(value));

          if (cc.loader._cache[this.nativeUrl]) {
            cc.loader._cache[this.nativeUrl].content = this._data.buffer;
          }
        } else {
          this._data = new Uint8Array(value);
        }

        this.loaded = true;
        this.emit('load');
      }
      /**
       * 此网格的子网格数量。
       * @deprecated 请使用 `this.renderingMesh.subMeshCount`。
       */

    }, {
      key: "subMeshCount",
      get: function get() {
        var renderingMesh = this.renderingSubMeshes;
        return renderingMesh ? renderingMesh.length : 0;
      }
      /**
       * （各分量都）小于等于此网格任何顶点位置的最大位置。
       * @deprecated 请使用 `this.struct.minPosition`。
       */

    }, {
      key: "minPosition",
      get: function get() {
        return this.struct.minPosition;
      }
      /**
       * （各分量都）大于等于此网格任何顶点位置的最大位置。
       * @deprecated 请使用 `this.struct.maxPosition`。
       */

    }, {
      key: "maxPosition",
      get: function get() {
        return this.struct.maxPosition;
      }
      /**
       * 此网格的结构。
       */

    }, {
      key: "struct",
      get: function get() {
        return this._struct;
      }
      /**
       * 此网格的数据。
       */

    }, {
      key: "data",
      get: function get() {
        return this._data;
      }
      /**
       * 此网格的哈希值。
       */

    }, {
      key: "hash",
      get: function get() {
        // hashes should already be computed offline, but if not, make one
        if (!this._hash && this._data) {
          this._hash = (0, _murmurhash2_gc.murmurhash2_32_gc)(this._data, 666);
        }

        return this._hash;
      }
    }, {
      key: "jointBufferIndices",
      get: function get() {
        if (this._jointBufferIndices) {
          return this._jointBufferIndices;
        }

        return this._jointBufferIndices = this._struct.primitives.map(function (p) {
          return p.jointMapIndex || 0;
        });
      }
    }]);

    function Mesh() {
      var _this2;

      _classCallCheck(this, Mesh);

      _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Mesh).call(this));

      _initializerDefineProperty(_this2, "_struct", _descriptor, _assertThisInitialized(_this2));

      _initializerDefineProperty(_this2, "_dataLength", _descriptor2, _assertThisInitialized(_this2));

      _initializerDefineProperty(_this2, "_hash", _descriptor3, _assertThisInitialized(_this2));

      _this2._data = null;
      _this2._initialized = false;
      _this2._renderingSubMeshes = null;
      _this2._boneSpaceBounds = new Map();
      _this2._jointBufferIndices = null;
      _this2.morphRendering = null;
      _this2.loaded = false;
      return _this2;
    }

    _createClass(Mesh, [{
      key: "initialize",
      value: function initialize() {
        var _this3 = this;

        if (this._initialized) {
          return;
        }

        this._initialized = true;

        if (!this._data) {
          this._data = new Uint8Array(this._dataLength);
          (0, _meshUtils.postLoadMesh)(this);
        }

        var buffer = this._data.buffer;
        var gfxDevice = cc.director.root.device;

        var vertexBuffers = this._createVertexBuffers(gfxDevice, buffer);

        var indexBuffers = [];
        var subMeshes = [];

        var _loop = function _loop(i) {
          var prim = _this3._struct.primitives[i];

          if (prim.vertexBundelIndices.length === 0) {
            return "continue";
          }

          var indexBuffer = void 0;
          var ib = null;

          if (prim.indexView) {
            var idxView = prim.indexView;
            var dstStride = idxView.stride;
            var dstSize = idxView.length;

            if (dstStride === 4 && !gfxDevice.hasFeature(_device.GFXFeature.ELEMENT_INDEX_UINT)) {
              var vertexCount = _this3._struct.vertexBundles[prim.vertexBundelIndices[0]].view.count;

              if (vertexCount >= 65536) {
                (0, _debug.warnID)(10001, vertexCount, 65536);
                return "continue"; // Ignore this primitive
              } else {
                dstStride >>= 1; // Reduce to short.

                dstSize >>= 1;
              }
            }

            indexBuffer = gfxDevice.createBuffer({
              usage: _define.GFXBufferUsageBit.INDEX | _define.GFXBufferUsageBit.TRANSFER_DST,
              memUsage: _define.GFXMemoryUsageBit.HOST | _define.GFXMemoryUsageBit.DEVICE,
              size: dstSize,
              stride: dstStride
            });
            indexBuffers.push(indexBuffer);
            ib = new (getIndexStrideCtor(idxView.stride))(buffer, idxView.offset, idxView.count);

            if (idxView.stride !== dstStride) {
              ib = getIndexStrideCtor(dstStride).from(ib);
            }

            if (_this3.loaded) {
              indexBuffer.update(ib);
            } else {
              _this3.once('load', function () {
                indexBuffer.update(ib);
              });
            }
          }

          var vbReference = prim.vertexBundelIndices.map(function (idx) {
            return vertexBuffers[idx];
          });
          var gfxAttributes = [];

          if (prim.vertexBundelIndices.length > 0) {
            var idx = prim.vertexBundelIndices[0];
            var _vertexBundle2 = _this3._struct.vertexBundles[idx];
            gfxAttributes = _vertexBundle2.attributes;
          }

          var subMesh = new RenderingSubMesh(vbReference, gfxAttributes, prim.primitiveMode);
          subMesh.mesh = _this3;
          subMesh.subMeshIdx = i;
          subMesh.indexBuffer = indexBuffer;
          subMeshes.push(subMesh);
        };

        for (var i = 0; i < this._struct.primitives.length; i++) {
          var _ret = _loop(i);

          if (_ret === "continue") continue;
        }

        this._renderingSubMeshes = subMeshes;

        if (this._struct.morph) {
          this.morphRendering = (0, _morph.createMorphRendering)(this, gfxDevice);
        }
      }
      /**
       * 销毁此网格，并释放它占有的所有 GPU 资源。
       */

    }, {
      key: "destroy",
      value: function destroy() {
        this.destroyRenderingMesh();
        return _get(_getPrototypeOf(Mesh.prototype), "destroy", this).call(this);
      }
      /**
       * 释放此网格占有的所有 GPU 资源。
       */

    }, {
      key: "destroyRenderingMesh",
      value: function destroyRenderingMesh() {
        if (this._renderingSubMeshes) {
          for (var i = 0; i < this._renderingSubMeshes.length; i++) {
            this._renderingSubMeshes[i].destroy();
          }

          this._renderingSubMeshes = null;
          this._data = null;
          this._initialized = false;
        }
      }
      /**
       * 重置此网格的结构和数据。
       * @param struct 新的结构。
       * @param data 新的数据。
       * @deprecated 将在 V1.0.0 移除，请转用 `this.reset()`。
       */

    }, {
      key: "assign",
      value: function assign(struct, data) {
        this.reset({
          struct: struct,
          data: data
        });
      }
      /**
       * 重置此网格。
       * @param info 网格重置选项。
       */

    }, {
      key: "reset",
      value: function reset(info) {
        this.destroyRenderingMesh();
        this._struct = info.struct;
        this._data = info.data;
        this._hash = 0;
        this.loaded = true;
        this.emit('load');
      }
      /**
       * 此网格创建的渲染网格。
       */

    }, {
      key: "getBoneSpaceBounds",
      value: function getBoneSpaceBounds(skeleton) {
        if (this._boneSpaceBounds.has(skeleton.hash)) {
          return this._boneSpaceBounds.get(skeleton.hash);
        }

        var bounds = [];

        this._boneSpaceBounds.set(skeleton.hash, bounds);

        var valid = [];
        var bindposes = skeleton.bindposes;

        for (var i = 0; i < bindposes.length; i++) {
          bounds.push(new _index2.aabb(Infinity, Infinity, Infinity, -Infinity, -Infinity, -Infinity));
          valid.push(false);
        }

        var primitives = this._struct.primitives;

        for (var p = 0; p < primitives.length; p++) {
          var joints = this.readAttribute(p, _define.GFXAttributeName.ATTR_JOINTS);
          var weights = this.readAttribute(p, _define.GFXAttributeName.ATTR_WEIGHTS);
          var positions = this.readAttribute(p, _define.GFXAttributeName.ATTR_POSITION);

          if (!joints || !weights || !positions) {
            continue;
          }

          var vertCount = Math.min(joints.length / 4, weights.length / 4, positions.length / 3);

          for (var _i2 = 0; _i2 < vertCount; _i2++) {
            _index.Vec3.set(v3_1, positions[3 * _i2 + 0], positions[3 * _i2 + 1], positions[3 * _i2 + 2]);

            for (var j = 0; j < 4; ++j) {
              var idx = 4 * _i2 + j;
              var joint = joints[idx];

              if (weights[idx] === 0 || joint >= bindposes.length) {
                continue;
              }

              _index.Vec3.transformMat4(v3_2, v3_1, bindposes[joint]);

              valid[joint] = true;
              var b = bounds[joint];

              _index.Vec3.min(b.center, b.center, v3_2);

              _index.Vec3.max(b.halfExtents, b.halfExtents, v3_2);
            }
          }
        }

        for (var _i3 = 0; _i3 < bindposes.length; _i3++) {
          var _b = bounds[_i3];

          if (!valid[_i3]) {
            bounds[_i3] = null;
          } else {
            _index2.aabb.fromPoints(_b, _b.center, _b.halfExtents);
          }
        }

        return bounds;
      }
      /**
       * 合并指定的网格到此网格中。
       * @param mesh 合并的网格。
       * @param worldMatrix 合并的网格的世界变换矩阵
       * @param [validate=false] 是否进行验证。
       * @returns 是否验证成功。若验证选项为 `true` 且验证未通过则返回 `false`，否则返回 `true`。
       */

    }, {
      key: "merge",
      value: function merge(mesh, worldMatrix, validate) {
        if (validate) {
          if (!this.loaded || !mesh.loaded || !this.validateMergingMesh(mesh)) {
            return false;
          }
        }

        var vec3_temp = new _index.Vec3();
        var rotate = worldMatrix && new _index.Quat();
        var boundingBox = worldMatrix && new _index2.aabb();

        if (rotate) {
          worldMatrix.getRotation(rotate);
        }

        if (!this._initialized && mesh._data) {
          var struct = JSON.parse(JSON.stringify(mesh._struct));

          var data = mesh._data.slice();

          if (worldMatrix) {
            if (struct.maxPosition && struct.minPosition) {
              _index.Vec3.add(boundingBox.center, struct.maxPosition, struct.minPosition);

              _index.Vec3.multiplyScalar(boundingBox.center, boundingBox.center, 0.5);

              _index.Vec3.subtract(boundingBox.halfExtents, struct.maxPosition, struct.minPosition);

              _index.Vec3.multiplyScalar(boundingBox.halfExtents, boundingBox.halfExtents, 0.5);

              _index2.aabb.transform(boundingBox, boundingBox, worldMatrix);

              _index.Vec3.add(struct.maxPosition, boundingBox.center, boundingBox.halfExtents);

              _index.Vec3.subtract(struct.minPosition, boundingBox.center, boundingBox.halfExtents);
            }

            for (var i = 0; i < struct.vertexBundles.length; i++) {
              var vtxBdl = struct.vertexBundles[i];

              for (var j = 0; j < vtxBdl.attributes.length; j++) {
                if (vtxBdl.attributes[j].name === _define.GFXAttributeName.ATTR_POSITION || vtxBdl.attributes[j].name === _define.GFXAttributeName.ATTR_NORMAL) {
                  var format = vtxBdl.attributes[j].format;
                  var inputView = new DataView(data.buffer, vtxBdl.view.offset + getOffset(vtxBdl.attributes, j));
                  var reader = getReader(inputView, format);
                  var writer = getWriter(inputView, format);

                  if (!reader || !writer) {
                    continue;
                  }

                  var vertexCount = vtxBdl.view.count;
                  var vertexStride = vtxBdl.view.stride;
                  var attrComponentByteLength = getComponentByteLength(format);

                  for (var vtxIdx = 0; vtxIdx < vertexCount; vtxIdx++) {
                    var xOffset = vtxIdx * vertexStride;
                    var yOffset = xOffset + attrComponentByteLength;
                    var zOffset = yOffset + attrComponentByteLength;
                    vec3_temp.set(reader(xOffset), reader(yOffset), reader(zOffset));

                    switch (vtxBdl.attributes[j].name) {
                      case _define.GFXAttributeName.ATTR_POSITION:
                        vec3_temp.transformMat4(worldMatrix);
                        break;

                      case _define.GFXAttributeName.ATTR_NORMAL:
                        _index.Vec3.transformQuat(vec3_temp, vec3_temp, rotate);

                        break;
                    }

                    writer(xOffset, vec3_temp.x);
                    writer(yOffset, vec3_temp.y);
                    writer(zOffset, vec3_temp.z);
                  }
                }
              }
            }
          }

          this.reset({
            struct: struct,
            data: data
          });
          this.initialize();
          return true;
        } // merge buffer


        var bufferBlob = new _bufferBlob.BufferBlob(); // merge vertex buffer

        var vertCount = 0;
        var vertStride = 0;
        var srcOffset = 0;
        var dstOffset = 0;
        var vb;
        var vbView;
        var srcVBView;
        var dstVBView;
        var srcAttrOffset = 0;
        var srcVBOffset = 0;
        var dstVBOffset = 0;
        var attrSize = 0;
        var dstAttrView;
        var hasAttr = false;
        var vertexBundles = new Array(this._struct.vertexBundles.length);

        for (var _i4 = 0; _i4 < this._struct.vertexBundles.length; ++_i4) {
          var bundle = this._struct.vertexBundles[_i4];
          var dstBundle = mesh._struct.vertexBundles[_i4];
          srcOffset = bundle.view.offset;
          dstOffset = dstBundle.view.offset;
          vertStride = bundle.view.stride;
          vertCount = bundle.view.count + dstBundle.view.count;
          vb = new ArrayBuffer(vertCount * vertStride);
          vbView = new Uint8Array(vb);
          srcVBView = this._data.subarray(srcOffset, srcOffset + bundle.view.length);
          srcOffset += srcVBView.length;
          dstVBView = mesh._data.subarray(dstOffset, dstOffset + dstBundle.view.length);
          dstOffset += dstVBView.length;
          vbView.set(srcVBView);
          srcAttrOffset = 0;

          var _iterator2 = _createForOfIteratorHelper(bundle.attributes),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var attr = _step2.value;
              dstVBOffset = 0;
              hasAttr = false;

              var _iterator3 = _createForOfIteratorHelper(dstBundle.attributes),
                  _step3;

              try {
                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                  var dstAttr = _step3.value;

                  if (attr.name === dstAttr.name && attr.format === dstAttr.format) {
                    hasAttr = true;
                    break;
                  }

                  dstVBOffset += _define.GFXFormatInfos[dstAttr.format].size;
                }
              } catch (err) {
                _iterator3.e(err);
              } finally {
                _iterator3.f();
              }

              if (hasAttr) {
                attrSize = _define.GFXFormatInfos[attr.format].size;
                srcVBOffset = bundle.view.length + srcAttrOffset;

                for (var v = 0; v < dstBundle.view.count; ++v) {
                  dstAttrView = dstVBView.subarray(dstVBOffset, dstVBOffset + attrSize);
                  vbView.set(dstAttrView, srcVBOffset);

                  if ((attr.name === _define.GFXAttributeName.ATTR_POSITION || attr.name === _define.GFXAttributeName.ATTR_NORMAL) && worldMatrix) {
                    var f32_temp = new Float32Array(vbView.buffer, srcVBOffset, 3);
                    vec3_temp.set(f32_temp[0], f32_temp[1], f32_temp[2]);

                    switch (attr.name) {
                      case _define.GFXAttributeName.ATTR_POSITION:
                        vec3_temp.transformMat4(worldMatrix);
                        break;

                      case _define.GFXAttributeName.ATTR_NORMAL:
                        _index.Vec3.transformQuat(vec3_temp, vec3_temp, rotate);

                        break;
                    }

                    f32_temp[0] = vec3_temp.x;
                    f32_temp[1] = vec3_temp.y;
                    f32_temp[2] = vec3_temp.z;
                  }

                  srcVBOffset += bundle.view.stride;
                  dstVBOffset += dstBundle.view.stride;
                }
              }

              srcAttrOffset += _define.GFXFormatInfos[attr.format].size;
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }

          vertexBundles[_i4] = {
            attributes: bundle.attributes,
            view: {
              offset: bufferBlob.getLength(),
              length: vb.byteLength,
              count: vertCount,
              stride: vertStride
            }
          };
          bufferBlob.addBuffer(vb);
        } // merge index buffer


        var idxCount = 0;
        var idxStride = 2;
        var vertBatchCount = 0;
        var ibView;
        var srcIBView;
        var dstIBView;
        var primitives = new Array(this._struct.primitives.length);

        for (var _i5 = 0; _i5 < this._struct.primitives.length; ++_i5) {
          var prim = this._struct.primitives[_i5];
          var dstPrim = mesh._struct.primitives[_i5];
          primitives[_i5] = {
            primitiveMode: prim.primitiveMode,
            vertexBundelIndices: prim.vertexBundelIndices
          };

          var _iterator4 = _createForOfIteratorHelper(prim.vertexBundelIndices),
              _step4;

          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var bundleIdx = _step4.value;
              vertBatchCount = Math.max(vertBatchCount, this._struct.vertexBundles[bundleIdx].view.count);
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }

          if (prim.indexView && dstPrim.indexView) {
            idxCount = prim.indexView.count;
            idxCount += dstPrim.indexView.count;
            srcOffset = prim.indexView.offset;
            dstOffset = dstPrim.indexView.offset;

            if (idxCount < 256) {
              idxStride = 1;
            } else if (idxCount < 65536) {
              idxStride = 2;
            } else {
              idxStride = 4;
            }

            var ib = new ArrayBuffer(idxCount * idxStride);

            if (idxStride === 2) {
              ibView = new Uint16Array(ib);
            } else if (idxStride === 1) {
              ibView = new Uint8Array(ib);
            } else {
              // Uint32
              ibView = new Uint32Array(ib);
            } // merge src indices


            if (prim.indexView.stride === 2) {
              srcIBView = new Uint16Array(this._data.buffer, srcOffset, prim.indexView.count);
            } else if (prim.indexView.stride === 1) {
              srcIBView = new Uint8Array(this._data.buffer, srcOffset, prim.indexView.count);
            } else {
              // Uint32
              srcIBView = new Uint32Array(this._data.buffer, srcOffset, prim.indexView.count);
            }

            if (idxStride === prim.indexView.stride) {
              ibView.set(srcIBView);
            } else {
              for (var n = 0; n < prim.indexView.count; ++n) {
                ibView[n] = srcIBView[n];
              }
            }

            srcOffset += prim.indexView.length; // merge dst indices

            if (dstPrim.indexView.stride === 2) {
              dstIBView = new Uint16Array(mesh._data.buffer, dstOffset, dstPrim.indexView.count);
            } else if (dstPrim.indexView.stride === 1) {
              dstIBView = new Uint8Array(mesh._data.buffer, dstOffset, dstPrim.indexView.count);
            } else {
              // Uint32
              dstIBView = new Uint32Array(mesh._data.buffer, dstOffset, dstPrim.indexView.count);
            }

            for (var _n = 0; _n < dstPrim.indexView.count; ++_n) {
              ibView[prim.indexView.count + _n] = vertBatchCount + dstIBView[_n];
            }

            dstOffset += dstPrim.indexView.length;
            primitives[_i5].indexView = {
              offset: bufferBlob.getLength(),
              length: ib.byteLength,
              count: idxCount,
              stride: idxStride
            };
            bufferBlob.setNextAlignment(idxStride);
            bufferBlob.addBuffer(ib);
          }
        } // Create mesh struct.


        var meshStruct = {
          vertexBundles: vertexBundles,
          primitives: primitives,
          minPosition: this._struct.minPosition,
          maxPosition: this._struct.maxPosition
        };

        if (meshStruct.minPosition && mesh._struct.minPosition && meshStruct.maxPosition && mesh._struct.maxPosition) {
          if (worldMatrix) {
            _index.Vec3.add(boundingBox.center, mesh._struct.maxPosition, mesh._struct.minPosition);

            _index.Vec3.multiplyScalar(boundingBox.center, boundingBox.center, 0.5);

            _index.Vec3.subtract(boundingBox.halfExtents, mesh._struct.maxPosition, mesh._struct.minPosition);

            _index.Vec3.multiplyScalar(boundingBox.halfExtents, boundingBox.halfExtents, 0.5);

            _index2.aabb.transform(boundingBox, boundingBox, worldMatrix);

            _index.Vec3.add(vec3_temp, boundingBox.center, boundingBox.halfExtents);

            _index.Vec3.max(meshStruct.maxPosition, meshStruct.maxPosition, vec3_temp);

            _index.Vec3.subtract(vec3_temp, boundingBox.center, boundingBox.halfExtents);

            _index.Vec3.min(meshStruct.minPosition, meshStruct.minPosition, vec3_temp);
          } else {
            _index.Vec3.min(meshStruct.minPosition, meshStruct.minPosition, mesh._struct.minPosition);

            _index.Vec3.max(meshStruct.maxPosition, meshStruct.maxPosition, mesh._struct.maxPosition);
          }
        } // Create mesh.


        this.reset({
          struct: meshStruct,
          data: new Uint8Array(bufferBlob.getCombined())
        });
        this.initialize();
        return true;
      }
      /**
       * 验证指定网格是否可以合并至当前网格。
       *
       * 当满足以下条件之一时，指定网格可以合并至当前网格：
       *  - 当前网格无数据而待合并网格有数据；
       *  - 它们的顶点块数目相同且对应顶点块的布局一致，并且它们的子网格数目相同且对应子网格的布局一致。
       *
       * 两个顶点块布局一致当且仅当：
       *  - 它们具有相同数量的顶点属性且对应的顶点属性具有相同的属性格式。
       *
       * 两个子网格布局一致，当且仅当：
       *  - 它们具有相同的图元类型并且引用相同数量、相同索引的顶点块；并且，
       *  - 要么都需要索引绘制，要么都不需要索引绘制。
       * @param mesh 指定的网格。
       */

    }, {
      key: "validateMergingMesh",
      value: function validateMergingMesh(mesh) {
        if (!this._data && mesh._data) {
          return true;
        } // validate vertex bundles


        if (this._struct.vertexBundles.length !== mesh._struct.vertexBundles.length) {
          return false;
        }

        for (var i = 0; i < this._struct.vertexBundles.length; ++i) {
          var bundle = this._struct.vertexBundles[i];
          var dstBundle = mesh._struct.vertexBundles[i];

          if (bundle.attributes.length !== dstBundle.attributes.length) {
            return false;
          }

          for (var j = 0; j < bundle.attributes.length; ++j) {
            if (bundle.attributes[j].format !== dstBundle.attributes[j].format) {
              return false;
            }
          }
        } // validate primitives


        if (this._struct.primitives.length !== mesh._struct.primitives.length) {
          return false;
        }

        for (var _i6 = 0; _i6 < this._struct.primitives.length; ++_i6) {
          var prim = this._struct.primitives[_i6];
          var dstPrim = mesh._struct.primitives[_i6];

          if (prim.vertexBundelIndices.length !== dstPrim.vertexBundelIndices.length) {
            return false;
          }

          for (var _j = 0; _j < prim.vertexBundelIndices.length; ++_j) {
            if (prim.vertexBundelIndices[_j] !== dstPrim.vertexBundelIndices[_j]) {
              return false;
            }
          }

          if (prim.primitiveMode !== dstPrim.primitiveMode) {
            return false;
          }

          if (prim.indexView) {
            if (dstPrim.indexView === undefined) {
              return false;
            }
          } else {
            if (dstPrim.indexView) {
              return false;
            }
          }
        }

        return true;
      }
      /**
       * 读取子网格的指定属性。
       * @param primitiveIndex 子网格索引。
       * @param attributeName 属性名称。
       * @returns 不存在指定的子网格、子网格不存在指定的属性或属性无法读取时返回 `null`，
       * 否则，创建足够大的缓冲区包含指定属性的所有数据，并为该缓冲区创建与属性类型对应的数组视图。
       */

    }, {
      key: "readAttribute",
      value: function readAttribute(primitiveIndex, attributeName) {
        var _this4 = this;

        var result = null;

        this._accessAttribute(primitiveIndex, attributeName, function (vertexBundle, iAttribute) {
          var format = vertexBundle.attributes[iAttribute].format;
          var inputView = new DataView(_this4._data.buffer, vertexBundle.view.offset + getOffset(vertexBundle.attributes, iAttribute));
          var formatInfo = _define.GFXFormatInfos[format];
          var storageConstructor = (0, _define.getTypedArrayConstructor)(_define.GFXFormatInfos[format]);
          var reader = getReader(inputView, format);

          if (!storageConstructor || !reader) {
            return;
          }

          var vertexCount = vertexBundle.view.count;
          var componentCount = formatInfo.count;
          var storage = new storageConstructor(vertexCount * componentCount);
          var inputStride = vertexBundle.view.stride;

          for (var iVertex = 0; iVertex < vertexCount; ++iVertex) {
            for (var iComponent = 0; iComponent < componentCount; ++iComponent) {
              storage[componentCount * iVertex + iComponent] = reader(inputStride * iVertex + storage.BYTES_PER_ELEMENT * iComponent);
            }
          }

          result = storage;
          return;
        });

        return result;
      }
      /**
       * 读取子网格的指定属性到目标缓冲区中。
       * @param primitiveIndex 子网格索引。
       * @param attributeName 属性名称。
       * @param buffer 目标缓冲区。
       * @param stride 相邻属性在目标缓冲区的字节间隔。
       * @param offset 首个属性在目标缓冲区中的偏移。
       * @returns 不存在指定的子网格、子网格不存在指定的属性或属性无法读取时返回 `false`，否则返回 `true`。
       */

    }, {
      key: "copyAttribute",
      value: function copyAttribute(primitiveIndex, attributeName, buffer, stride, offset) {
        var _this5 = this;

        var written = false;

        this._accessAttribute(primitiveIndex, attributeName, function (vertexBundle, iAttribute) {
          var format = vertexBundle.attributes[iAttribute].format;
          var inputView = new DataView(_this5._data.buffer, vertexBundle.view.offset + getOffset(vertexBundle.attributes, iAttribute));
          var outputView = new DataView(buffer, offset);
          var formatInfo = _define.GFXFormatInfos[format];
          var reader = getReader(inputView, format);
          var writer = getWriter(outputView, format);

          if (!reader || !writer) {
            return;
          }

          var vertexCount = vertexBundle.view.count;
          var componentCount = formatInfo.count;
          var inputStride = vertexBundle.view.stride;
          var inputComponentByteLength = getComponentByteLength(format);
          var outputStride = stride;
          var outputComponentByteLength = inputComponentByteLength;

          for (var iVertex = 0; iVertex < vertexCount; ++iVertex) {
            for (var iComponent = 0; iComponent < componentCount; ++iComponent) {
              var inputOffset = inputStride * iVertex + inputComponentByteLength * iComponent;
              var outputOffset = outputStride * iVertex + outputComponentByteLength * iComponent;
              writer(outputOffset, reader(inputOffset));
            }
          }

          written = true;
          return;
        });

        return written;
      }
      /**
       * 读取子网格的索引数据。
       * @param primitiveIndex 子网格索引。
       * @returns 不存在指定的子网格或子网格不存在索引数据时返回 `null`，
       * 否则，创建足够大的缓冲区包含所有索引数据，并为该缓冲区创建与索引类型对应的数组视图。
       */

    }, {
      key: "readIndices",
      value: function readIndices(primitiveIndex) {
        if (!this._data || primitiveIndex >= this._struct.primitives.length) {
          return null;
        }

        var primitive = this._struct.primitives[primitiveIndex];

        if (!primitive.indexView) {
          return null;
        }

        var stride = primitive.indexView.stride;
        var ctor = stride === 1 ? Uint8Array : stride === 2 ? Uint16Array : Uint32Array;
        return new ctor(this._data.buffer, primitive.indexView.offset, primitive.indexView.count);
      }
      /**
       * 读取子网格的索引数据到目标数组中。
       * @param primitiveIndex 子网格索引。
       * @param outputArray 目标数组。
       * @returns 不存在指定的子网格或子网格不存在索引数据时返回 `false`，否则返回 `true`。
       */

    }, {
      key: "copyIndices",
      value: function copyIndices(primitiveIndex, outputArray) {
        if (!this._data || primitiveIndex >= this._struct.primitives.length) {
          return false;
        }

        var primitive = this._struct.primitives[primitiveIndex];

        if (!primitive.indexView) {
          return false;
        }

        var indexCount = primitive.indexView.count;
        var indexFormat = primitive.indexView.stride === 1 ? _define.GFXFormat.R8UI : primitive.indexView.stride === 2 ? _define.GFXFormat.R16UI : _define.GFXFormat.R32UI;
        var reader = getReader(new DataView(this._data.buffer), indexFormat);

        for (var i = 0; i < indexCount; ++i) {
          outputArray[i] = reader(primitive.indexView.offset + _define.GFXFormatInfos[indexFormat].size * i);
        }

        return true;
      }
    }, {
      key: "_accessAttribute",
      value: function _accessAttribute(primitiveIndex, attributeName, accessor) {
        if (!this._data || primitiveIndex >= this._struct.primitives.length) {
          return;
        }

        var primitive = this._struct.primitives[primitiveIndex];

        var _iterator5 = _createForOfIteratorHelper(primitive.vertexBundelIndices),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var vertexBundleIndex = _step5.value;
            var _vertexBundle3 = this._struct.vertexBundles[vertexBundleIndex];

            var _iAttribute = _vertexBundle3.attributes.findIndex(function (a) {
              return a.name === attributeName;
            });

            if (_iAttribute < 0) {
              continue;
            }

            accessor(_vertexBundle3, _iAttribute);
            break;
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }

        return;
      }
    }, {
      key: "_createVertexBuffers",
      value: function _createVertexBuffers(gfxDevice, data) {
        var _this6 = this;

        return this._struct.vertexBundles.map(function (vertexBundle) {
          var vertexBuffer = gfxDevice.createBuffer({
            usage: _define.GFXBufferUsageBit.VERTEX | _define.GFXBufferUsageBit.TRANSFER_DST,
            memUsage: _define.GFXMemoryUsageBit.HOST | _define.GFXMemoryUsageBit.DEVICE,
            size: vertexBundle.view.length,
            stride: vertexBundle.view.stride
          });
          var view = new Uint8Array(data, vertexBundle.view.offset, vertexBundle.view.length);

          if (_this6.loaded) {
            vertexBuffer.update(view);
          } else {
            _this6.once('load', function () {
              vertexBuffer.update(view);
            });
          }

          return vertexBuffer;
        });
      }
    }, {
      key: "renderingSubMeshes",
      get: function get() {
        this.initialize();
        return this._renderingSubMeshes;
      }
    }]);

    return Mesh;
  }(_asset.Asset), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_struct", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return {
        vertexBundles: [],
        primitives: []
      };
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_dataLength", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_hash", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  })), _class2)) || _class);
  _exports.Mesh = Mesh;
  cc.Mesh = Mesh;

  function getOffset(attributes, attributeIndex) {
    var result = 0;

    for (var i = 0; i < attributeIndex; ++i) {
      var attribute = attributes[i];
      result += _define.GFXFormatInfos[attribute.format].size;
    }

    return result;
  }

  var isLittleEndian = _sys.sys.isLittleEndian;

  function getComponentByteLength(format) {
    var info = _define.GFXFormatInfos[format];
    return info.size / info.count;
  }

  function getReader(dataView, format) {
    var info = _define.GFXFormatInfos[format];
    var stride = info.size / info.count;

    switch (info.type) {
      case _define.GFXFormatType.UNORM:
        {
          switch (stride) {
            case 1:
              return function (offset) {
                return dataView.getUint8(offset);
              };

            case 2:
              return function (offset) {
                return dataView.getUint16(offset, isLittleEndian);
              };

            case 4:
              return function (offset) {
                return dataView.getUint32(offset, isLittleEndian);
              };
          }

          break;
        }

      case _define.GFXFormatType.SNORM:
        {
          switch (stride) {
            case 1:
              return function (offset) {
                return dataView.getInt8(offset);
              };

            case 2:
              return function (offset) {
                return dataView.getInt16(offset, isLittleEndian);
              };

            case 4:
              return function (offset) {
                return dataView.getInt32(offset, isLittleEndian);
              };
          }

          break;
        }

      case _define.GFXFormatType.INT:
        {
          switch (stride) {
            case 1:
              return function (offset) {
                return dataView.getInt8(offset);
              };

            case 2:
              return function (offset) {
                return dataView.getInt16(offset, isLittleEndian);
              };

            case 4:
              return function (offset) {
                return dataView.getInt32(offset, isLittleEndian);
              };
          }

          break;
        }

      case _define.GFXFormatType.UINT:
        {
          switch (stride) {
            case 1:
              return function (offset) {
                return dataView.getUint8(offset);
              };

            case 2:
              return function (offset) {
                return dataView.getUint16(offset, isLittleEndian);
              };

            case 4:
              return function (offset) {
                return dataView.getUint32(offset, isLittleEndian);
              };
          }

          break;
        }

      case _define.GFXFormatType.FLOAT:
        {
          return function (offset) {
            return dataView.getFloat32(offset, isLittleEndian);
          };
        }
    }

    return null;
  }

  function getWriter(dataView, format) {
    var info = _define.GFXFormatInfos[format];
    var stride = info.size / info.count;

    switch (info.type) {
      case _define.GFXFormatType.UNORM:
        {
          switch (stride) {
            case 1:
              return function (offset, value) {
                return dataView.setUint8(offset, value);
              };

            case 2:
              return function (offset, value) {
                return dataView.setUint16(offset, value, isLittleEndian);
              };

            case 4:
              return function (offset, value) {
                return dataView.setUint32(offset, value, isLittleEndian);
              };
          }

          break;
        }

      case _define.GFXFormatType.SNORM:
        {
          switch (stride) {
            case 1:
              return function (offset, value) {
                return dataView.setInt8(offset, value);
              };

            case 2:
              return function (offset, value) {
                return dataView.setInt16(offset, value, isLittleEndian);
              };

            case 4:
              return function (offset, value) {
                return dataView.setInt32(offset, value, isLittleEndian);
              };
          }

          break;
        }

      case _define.GFXFormatType.INT:
        {
          switch (stride) {
            case 1:
              return function (offset, value) {
                return dataView.setInt8(offset, value);
              };

            case 2:
              return function (offset, value) {
                return dataView.setInt16(offset, value, isLittleEndian);
              };

            case 4:
              return function (offset, value) {
                return dataView.setInt32(offset, value, isLittleEndian);
              };
          }

          break;
        }

      case _define.GFXFormatType.UINT:
        {
          switch (stride) {
            case 1:
              return function (offset, value) {
                return dataView.setUint8(offset, value);
              };

            case 2:
              return function (offset, value) {
                return dataView.setUint16(offset, value, isLittleEndian);
              };

            case 4:
              return function (offset, value) {
                return dataView.setUint32(offset, value, isLittleEndian);
              };
          }

          break;
        }

      case _define.GFXFormatType.FLOAT:
        {
          return function (offset, value) {
            return dataView.setFloat32(offset, value, isLittleEndian);
          };
        }
    }

    return null;
  } // function get

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,