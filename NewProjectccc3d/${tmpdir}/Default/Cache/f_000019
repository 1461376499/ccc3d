(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../command-buffer.js", "../define.js", "./webgl-commands.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../command-buffer.js"), require("../define.js"), require("./webgl-commands.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.commandBuffer, global.define, global.webglCommands);
    global.webglCommandBuffer = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _commandBuffer, _define, _webglCommands) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.WebGLGFXCommandBuffer = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  var WebGLGFXCommandBuffer = /*#__PURE__*/function (_GFXCommandBuffer) {
    _inherits(WebGLGFXCommandBuffer, _GFXCommandBuffer);

    function WebGLGFXCommandBuffer() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, WebGLGFXCommandBuffer);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(WebGLGFXCommandBuffer)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.cmdPackage = new _webglCommands.WebGLCmdPackage();
      _this._webGLAllocator = null;
      _this._isInRenderPass = false;
      _this._curGPUPipelineState = null;
      _this._curGPUBindingLayout = null;
      _this._curGPUInputAssembler = null;
      _this._curViewport = null;
      _this._curScissor = null;
      _this._curLineWidth = null;
      _this._curDepthBias = null;
      _this._curBlendConstants = [];
      _this._curDepthBounds = null;
      _this._curStencilWriteMask = null;
      _this._curStencilCompareMask = null;
      _this._isStateInvalied = false;
      return _this;
    }

    _createClass(WebGLGFXCommandBuffer, [{
      key: "initialize",
      value: function initialize(info) {
        this._allocator = info.allocator;
        this._type = info.type;
        this._webGLAllocator = this._allocator;
        this._status = _define.GFXStatus.SUCCESS;
        return true;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        if (this._webGLAllocator) {
          this._webGLAllocator.clearCmds(this.cmdPackage);

          this._webGLAllocator = null;
        }

        this._allocator = null;
        this._status = _define.GFXStatus.UNREADY;
      }
    }, {
      key: "begin",
      value: function begin() {
        this._webGLAllocator.clearCmds(this.cmdPackage);

        this._curGPUPipelineState = null;
        this._curGPUBindingLayout = null;
        this._curGPUInputAssembler = null;
        this._curViewport = null;
        this._curScissor = null;
        this._curLineWidth = null;
        this._curDepthBias = null;
        this._curBlendConstants = [];
        this._curDepthBounds = null;
        this._curStencilWriteMask = null;
        this._curStencilCompareMask = null;
        this._numDrawCalls = 0;
        this._numInstances = 0;
        this._numTris = 0;
      }
    }, {
      key: "end",
      value: function end() {
        if (this._isStateInvalied) {
          this.bindStates();
        }

        this._isInRenderPass = false;
      }
    }, {
      key: "beginRenderPass",
      value: function beginRenderPass(framebuffer, renderArea, clearFlag, clearColors, clearDepth, clearStencil) {
        var cmd = this._webGLAllocator.beginRenderPassCmdPool.alloc(_webglCommands.WebGLCmdBeginRenderPass);

        cmd.gpuFramebuffer = framebuffer.gpuFramebuffer;
        cmd.renderArea = renderArea;
        cmd.clearFlag = clearFlag;
        cmd.clearColors.length = clearColors.length;

        for (var i = 0; i < clearColors.length; ++i) {
          cmd.clearColors[i] = clearColors[i];
        }

        cmd.clearDepth = clearDepth;
        cmd.clearStencil = clearStencil;
        this.cmdPackage.beginRenderPassCmds.push(cmd);
        this.cmdPackage.cmds.push(_webglCommands.WebGLCmd.BEGIN_RENDER_PASS);
        this._isInRenderPass = true;
      }
    }, {
      key: "endRenderPass",
      value: function endRenderPass() {
        this._isInRenderPass = false;
      }
    }, {
      key: "bindPipelineState",
      value: function bindPipelineState(pipelineState) {
        var gpuPipelineState = pipelineState.gpuPipelineState;
        this._curGPUPipelineState = gpuPipelineState;
        this._isStateInvalied = true;
      }
    }, {
      key: "bindBindingLayout",
      value: function bindBindingLayout(bindingLayout) {
        var gpuBindingLayout = bindingLayout.gpuBindingLayout;
        this._curGPUBindingLayout = gpuBindingLayout;
        this._isStateInvalied = true;
      }
    }, {
      key: "bindInputAssembler",
      value: function bindInputAssembler(inputAssembler) {
        var gpuInputAssembler = inputAssembler.gpuInputAssembler;
        this._curGPUInputAssembler = gpuInputAssembler;
        this._isStateInvalied = true;
      }
    }, {
      key: "setViewport",
      value: function setViewport(viewport) {
        if (!this._curViewport) {
          this._curViewport = {
            left: viewport.left,
            top: viewport.top,
            width: viewport.width,
            height: viewport.height,
            minDepth: viewport.minDepth,
            maxDepth: viewport.maxDepth
          };
        } else {
          if (this._curViewport.left !== viewport.left || this._curViewport.top !== viewport.top || this._curViewport.width !== viewport.width || this._curViewport.height !== viewport.height || this._curViewport.minDepth !== viewport.minDepth || this._curViewport.maxDepth !== viewport.maxDepth) {
            this._curViewport.left = viewport.left;
            this._curViewport.top = viewport.top;
            this._curViewport.width = viewport.width;
            this._curViewport.height = viewport.height;
            this._curViewport.minDepth = viewport.minDepth;
            this._curViewport.maxDepth = viewport.maxDepth;
            this._isStateInvalied = true;
          }
        }
      }
    }, {
      key: "setScissor",
      value: function setScissor(scissor) {
        if (!this._curScissor) {
          this._curScissor = {
            x: scissor.x,
            y: scissor.y,
            width: scissor.width,
            height: scissor.height
          };
        } else {
          if (this._curScissor.x !== scissor.x || this._curScissor.y !== scissor.y || this._curScissor.width !== scissor.width || this._curScissor.height !== scissor.height) {
            this._curScissor.x = scissor.x;
            this._curScissor.y = scissor.y;
            this._curScissor.width = scissor.width;
            this._curScissor.height = scissor.height;
            this._isStateInvalied = true;
          }
        }
      }
    }, {
      key: "setLineWidth",
      value: function setLineWidth(lineWidth) {
        if (this._curLineWidth !== lineWidth) {
          this._curLineWidth = lineWidth;
          this._isStateInvalied = true;
        }
      }
    }, {
      key: "setDepthBias",
      value: function setDepthBias(depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor) {
        if (!this._curDepthBias) {
          this._curDepthBias = {
            constantFactor: depthBiasConstantFactor,
            clamp: depthBiasClamp,
            slopeFactor: depthBiasSlopeFactor
          };
          this._isStateInvalied = true;
        } else {
          if (this._curDepthBias.constantFactor !== depthBiasConstantFactor || this._curDepthBias.clamp !== depthBiasClamp || this._curDepthBias.slopeFactor !== depthBiasSlopeFactor) {
            this._curDepthBias.constantFactor = depthBiasConstantFactor;
            this._curDepthBias.clamp = depthBiasClamp;
            this._curDepthBias.slopeFactor = depthBiasSlopeFactor;
            this._isStateInvalied = true;
          }
        }
      }
    }, {
      key: "setBlendConstants",
      value: function setBlendConstants(blendConstants) {
        if (!this._curBlendConstants && blendConstants.length === 4) {
          this._curBlendConstants = [blendConstants[0], blendConstants[1], blendConstants[2], blendConstants[3]];
          this._isStateInvalied = true;
        } else {
          if (blendConstants.length === 4 && (this._curBlendConstants[0] !== blendConstants[0] || this._curBlendConstants[1] !== blendConstants[1] || this._curBlendConstants[2] !== blendConstants[2] || this._curBlendConstants[3] !== blendConstants[3])) {
            this._curBlendConstants = [blendConstants[0], blendConstants[1], blendConstants[2], blendConstants[3]];
            this._isStateInvalied = true;
          }
        }
      }
    }, {
      key: "setDepthBound",
      value: function setDepthBound(minDepthBounds, maxDepthBounds) {
        if (!this._curDepthBounds) {
          this._curDepthBounds = {
            minBounds: minDepthBounds,
            maxBounds: maxDepthBounds
          };
          this._isStateInvalied = true;
        } else {
          if (this._curDepthBounds.minBounds !== minDepthBounds || this._curDepthBounds.maxBounds !== maxDepthBounds) {
            this._curDepthBounds = {
              minBounds: minDepthBounds,
              maxBounds: maxDepthBounds
            };
            this._isStateInvalied = true;
          }
        }
      }
    }, {
      key: "setStencilWriteMask",
      value: function setStencilWriteMask(face, writeMask) {
        if (!this._curStencilWriteMask) {
          this._curStencilWriteMask = {
            face: face,
            writeMask: writeMask
          };
          this._isStateInvalied = true;
        } else {
          if (this._curStencilWriteMask.face !== face || this._curStencilWriteMask.writeMask !== writeMask) {
            this._curStencilWriteMask.face = face;
            this._curStencilWriteMask.writeMask = writeMask;
            this._isStateInvalied = true;
          }
        }
      }
    }, {
      key: "setStencilCompareMask",
      value: function setStencilCompareMask(face, reference, compareMask) {
        if (!this._curStencilCompareMask) {
          this._curStencilCompareMask = {
            face: face,
            reference: reference,
            compareMask: compareMask
          };
          this._isStateInvalied = true;
        } else {
          if (this._curStencilCompareMask.face !== face || this._curStencilCompareMask.reference !== reference || this._curStencilCompareMask.compareMask !== compareMask) {
            this._curStencilCompareMask.face = face;
            this._curStencilCompareMask.reference = reference;
            this._curStencilCompareMask.compareMask = compareMask;
            this._isStateInvalied = true;
          }
        }
      }
    }, {
      key: "draw",
      value: function draw(inputAssembler) {
        if (this._type === _define.GFXCommandBufferType.PRIMARY && this._isInRenderPass || this._type === _define.GFXCommandBufferType.SECONDARY) {
          if (this._isStateInvalied) {
            this.bindStates();
          }

          var cmd = this._allocator.drawCmdPool.alloc(_webglCommands.WebGLCmdDraw); // cmd.drawInfo = inputAssembler;


          cmd.drawInfo.vertexCount = inputAssembler.vertexCount;
          cmd.drawInfo.firstVertex = inputAssembler.firstVertex;
          cmd.drawInfo.indexCount = inputAssembler.indexCount;
          cmd.drawInfo.firstIndex = inputAssembler.firstIndex;
          cmd.drawInfo.vertexOffset = inputAssembler.vertexOffset;
          cmd.drawInfo.instanceCount = inputAssembler.instanceCount;
          cmd.drawInfo.firstInstance = inputAssembler.firstInstance;
          this.cmdPackage.drawCmds.push(cmd);
          this.cmdPackage.cmds.push(_webglCommands.WebGLCmd.DRAW);
          ++this._numDrawCalls;
          this._numInstances += inputAssembler.instanceCount;
          var indexCount = inputAssembler.indexCount || inputAssembler.vertexCount;

          if (this._curGPUPipelineState) {
            var glPrimitive = this._curGPUPipelineState.glPrimitive;

            switch (glPrimitive) {
              case 0x0004:
                {
                  // WebGLRenderingContext.TRIANGLES
                  this._numTris += indexCount / 3 * Math.max(inputAssembler.instanceCount, 1);
                  break;
                }

              case 0x0005: // WebGLRenderingContext.TRIANGLE_STRIP

              case 0x0006:
                {
                  // WebGLRenderingContext.TRIANGLE_FAN
                  this._numTris += (indexCount - 2) * Math.max(inputAssembler.instanceCount, 1);
                  break;
                }
            }
          }
        } else {
          console.error('Command \'draw\' must be recorded inside a render pass.');
        }
      }
    }, {
      key: "updateBuffer",
      value: function updateBuffer(buffer, data, offset, size) {
        if (this._type === _define.GFXCommandBufferType.PRIMARY && !this._isInRenderPass || this._type === _define.GFXCommandBufferType.SECONDARY) {
          var gpuBuffer = buffer.gpuBuffer;

          if (gpuBuffer) {
            var cmd = this._webGLAllocator.updateBufferCmdPool.alloc(_webglCommands.WebGLCmdUpdateBuffer);

            if (cmd) {
              var buffSize;

              if (size !== undefined) {
                buffSize = size;
              } else if (buffer.usage & _define.GFXBufferUsageBit.INDIRECT) {
                buffSize = 0;
              } else {
                buffSize = data.byteLength;
              }

              var buff = data;
              cmd.gpuBuffer = gpuBuffer;
              cmd.buffer = buff;
              cmd.offset = offset !== undefined ? offset : 0;
              cmd.size = buffSize;
              this.cmdPackage.updateBufferCmds.push(cmd);
              this.cmdPackage.cmds.push(_webglCommands.WebGLCmd.UPDATE_BUFFER);
            }
          }
        } else {
          console.error('Command \'updateBuffer\' must be recorded outside a render pass.');
        }
      }
    }, {
      key: "copyBufferToTexture",
      value: function copyBufferToTexture(srcBuff, dstTex, dstLayout, regions) {
        if (this._type === _define.GFXCommandBufferType.PRIMARY && !this._isInRenderPass || this._type === _define.GFXCommandBufferType.SECONDARY) {
          var gpuBuffer = srcBuff.gpuBuffer;
          var gpuTexture = dstTex.gpuTexture;

          if (gpuBuffer && gpuTexture) {
            var cmd = this._webGLAllocator.copyBufferToTextureCmdPool.alloc(_webglCommands.WebGLCmdCopyBufferToTexture);

            if (cmd) {
              cmd.gpuBuffer = gpuBuffer;
              cmd.gpuTexture = gpuTexture;
              cmd.dstLayout = dstLayout;
              cmd.regions = regions;
              this.cmdPackage.copyBufferToTextureCmds.push(cmd);
              this.cmdPackage.cmds.push(_webglCommands.WebGLCmd.COPY_BUFFER_TO_TEXTURE);
            }
          }
        } else {
          console.error('Command \'copyBufferToTexture\' must be recorded outside a render pass.');
        }
      } // tslint:disable: max-line-length

    }, {
      key: "execute",
      value: function execute(cmdBuffs, count) {
        for (var i = 0; i < count; ++i) {
          var webGLCmdBuff = cmdBuffs[i];

          for (var c = 0; c < webGLCmdBuff.cmdPackage.beginRenderPassCmds.length; ++c) {
            var cmd = webGLCmdBuff.cmdPackage.beginRenderPassCmds.array[c];
            ++cmd.refCount;
            this.cmdPackage.beginRenderPassCmds.push(cmd);
          }

          for (var _c = 0; _c < webGLCmdBuff.cmdPackage.bindStatesCmds.length; ++_c) {
            var _cmd = webGLCmdBuff.cmdPackage.bindStatesCmds.array[_c];
            ++_cmd.refCount;
            this.cmdPackage.bindStatesCmds.push(_cmd);
          }

          for (var _c2 = 0; _c2 < webGLCmdBuff.cmdPackage.drawCmds.length; ++_c2) {
            var _cmd2 = webGLCmdBuff.cmdPackage.drawCmds.array[_c2];
            ++_cmd2.refCount;
            this.cmdPackage.drawCmds.push(_cmd2);
          }

          for (var _c3 = 0; _c3 < webGLCmdBuff.cmdPackage.updateBufferCmds.length; ++_c3) {
            var _cmd3 = webGLCmdBuff.cmdPackage.updateBufferCmds.array[_c3];
            ++_cmd3.refCount;
            this.cmdPackage.updateBufferCmds.push(_cmd3);
          }

          for (var _c4 = 0; _c4 < webGLCmdBuff.cmdPackage.copyBufferToTextureCmds.length; ++_c4) {
            var _cmd4 = webGLCmdBuff.cmdPackage.copyBufferToTextureCmds.array[_c4];
            ++_cmd4.refCount;
            this.cmdPackage.copyBufferToTextureCmds.push(_cmd4);
          }

          this.cmdPackage.cmds.concat(webGLCmdBuff.cmdPackage.cmds.array);
          this._numDrawCalls += webGLCmdBuff._numDrawCalls;
          this._numInstances += webGLCmdBuff._numInstances;
          this._numTris += webGLCmdBuff._numTris;
        }
      }
    }, {
      key: "bindStates",
      value: function bindStates() {
        var bindStatesCmd = this._webGLAllocator.bindStatesCmdPool.alloc(_webglCommands.WebGLCmdBindStates);

        if (bindStatesCmd) {
          bindStatesCmd.gpuPipelineState = this._curGPUPipelineState;
          bindStatesCmd.gpuBindingLayout = this._curGPUBindingLayout;
          bindStatesCmd.gpuInputAssembler = this._curGPUInputAssembler;
          bindStatesCmd.viewport = this._curViewport;
          bindStatesCmd.scissor = this._curScissor;
          bindStatesCmd.lineWidth = this._curLineWidth;
          bindStatesCmd.depthBias = this._curDepthBias;
          bindStatesCmd.blendConstants = this._curBlendConstants;
          bindStatesCmd.depthBounds = this._curDepthBounds;
          bindStatesCmd.stencilWriteMask = this._curStencilWriteMask;
          bindStatesCmd.stencilCompareMask = this._curStencilCompareMask;
          this.cmdPackage.bindStatesCmds.push(bindStatesCmd);
          this.cmdPackage.cmds.push(_webglCommands.WebGLCmd.BIND_STATES);
          this._isStateInvalied = false;
        }
      }
    }, {
      key: "webGLDevice",
      get: function get() {
        return this._device;
      }
    }]);

    return WebGLGFXCommandBuffer;
  }(_commandBuffer.GFXCommandBuffer);

  _exports.WebGLGFXCommandBuffer = WebGLGFXCommandBuffer;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,