(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../assets/material.js", "../../gfx/define.js", "../../memop/index.js", "../../memop/cached-array.js", "../../pipeline/define.js", "../../scene-graph/index.js", "./mesh-buffer.js", "./stencil-manager.js", "./ui-batch-model.js", "./ui-draw-batch.js", "./ui-material.js", "./ui-vertex-format.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../assets/material.js"), require("../../gfx/define.js"), require("../../memop/index.js"), require("../../memop/cached-array.js"), require("../../pipeline/define.js"), require("../../scene-graph/index.js"), require("./mesh-buffer.js"), require("./stencil-manager.js"), require("./ui-batch-model.js"), require("./ui-draw-batch.js"), require("./ui-material.js"), require("./ui-vertex-format.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.material, global.define, global.index, global.cachedArray, global.define, global.index, global.meshBuffer, global.stencilManager, global.uiBatchModel, global.uiDrawBatch, global.uiMaterial, global.uiVertexFormat);
    global.ui = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _material, _define, _index, _cachedArray, _define2, _index2, _meshBuffer, _stencilManager, _uiBatchModel, _uiDrawBatch, _uiMaterial, UIVertexFormat) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.UI = void 0;
  UIVertexFormat = _interopRequireWildcard(UIVertexFormat);

  function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  /**
   * @zh
   * UI 渲染流程
   */
  var UI = /*#__PURE__*/function () {
    _createClass(UI, [{
      key: "renderScene",
      get: function get() {
        return this._scene;
      }
    }, {
      key: "currBufferBatch",
      get: function get() {
        return this._currMeshBuffer;
      },
      set: function set(value) {
        if (!value) {
          return;
        }

        this._currMeshBuffer = value;
      }
    }, {
      key: "currStaticRoot",
      set: function set(value) {
        this._currStaticRoot = value;
      }
    }]);

    function UI(_root) {
      var _this = this;

      _classCallCheck(this, UI);

      this.device = void 0;
      this._screens = [];
      this._bufferBatchPool = new _index.RecyclePool(function () {
        return new _meshBuffer.MeshBuffer(_this);
      }, 128);
      this._drawBatchPool = new _index.Pool(function () {
        return new _uiDrawBatch.UIDrawBatch();
      }, 128);
      this._cmdBuff = null;
      this._scene = void 0;
      this._attributes = [];
      this._meshBuffers = [];
      this._meshBufferUseCount = 0;
      this._uiMaterials = new Map();
      this._canvasMaterials = new Map();
      this._batches = void 0;
      this._uiModelPool = null;
      this._modelInUse = void 0;
      this._emptyMaterial = new _material.Material();
      this._currMaterial = this._emptyMaterial;
      this._currTexView = null;
      this._currSampler = null;
      this._currCanvas = null;
      this._currMeshBuffer = null;
      this._currStaticRoot = null;
      this._parentOpacity = 1;
      this._root = _root;
      this.device = _root.device;
      this._scene = this._root.createScene({
        name: 'GUIScene'
      });
      this._uiModelPool = new _index.Pool(function () {
        var model = cc.director.root.createModel(_uiBatchModel.UIBatchModel);
        model.enabled = true;
        model.visFlags |= _index2.Layers.Enum.UI_3D;
        return model;
      }, 2);
      this._modelInUse = new _cachedArray.CachedArray(10);
      this._batches = new _cachedArray.CachedArray(64);
      cc.director.on(cc.Director.EVENT_BEFORE_DRAW, this.update, this);
    }

    _createClass(UI, [{
      key: "initialize",
      value: function initialize() {
        this._attributes = UIVertexFormat.vfmt;

        this._requireBufferBatch();

        this._cmdBuff = this.device.createCommandBuffer({
          allocator: this.device.commandAllocator,
          type: _define.GFXCommandBufferType.PRIMARY
        });
        return true;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        var _iterator = _createForOfIteratorHelper(this._batches.array),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var batch = _step.value;
            batch.destroy(this);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        var _iterator2 = _createForOfIteratorHelper(this._meshBuffers),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var buffBatch = _step2.value;
            buffBatch.destroy();
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        this._meshBuffers.splice(0);

        this._destroyUIMaterials();

        if (this._cmdBuff) {
          this._cmdBuff.destroy();

          this._cmdBuff = null;
        }
      }
    }, {
      key: "getRenderSceneGetter",
      value: function getRenderSceneGetter() {
        return Object.getOwnPropertyDescriptor(Object.getPrototypeOf(this), 'renderScene').get.bind(this);
      }
    }, {
      key: "_getUIMaterial",
      value: function _getUIMaterial(mat) {
        if (this._uiMaterials.has(mat.hash)) {
          return this._uiMaterials.get(mat.hash);
        } else {
          var uiMat = new _uiMaterial.UIMaterial();
          uiMat.initialize({
            material: mat
          });

          this._uiMaterials.set(mat.hash, uiMat);

          return uiMat;
        }
      }
    }, {
      key: "_removeUIMaterial",
      value: function _removeUIMaterial(hash) {
        if (this._uiMaterials.has(hash)) {
          if (this._uiMaterials.get(hash).decrease() === 0) {
            this._uiMaterials["delete"](hash);
          }
        }
      }
      /**
       * @en
       * Add the managed CanvasComponent.
       *
       * @zh
       * 添加屏幕组件管理。
       *
       * @param comp - 屏幕组件。
       */

    }, {
      key: "addScreen",
      value: function addScreen(comp) {
        var screens = this._screens; // clear the canvas old visibility cache in canvasMaterial list

        for (var i = 0; i < screens.length; i++) {
          var screen = screens[i];

          if (screen.camera) {
            var visibility = screen.camera.view.visibility;

            var matRecord = this._canvasMaterials.get(visibility);

            if (matRecord) {
              var matHashInter = matRecord.keys();
              var matHash = matHashInter.next();

              while (!matHash.done) {
                this._removeUIMaterial(matHash.value);

                matHash = matHashInter.next();
              }

              matRecord.clear();
            }
          }
        }

        this._screens.push(comp);

        this._screens.sort(this._screenSort);

        for (var _i = 0; _i < screens.length; _i++) {
          var element = screens[_i];

          if (element.camera) {
            element.camera.view.visibility = _index2.Layers.BitMask.UI_2D | _i + 1;

            if (!this._canvasMaterials.has(element.camera.view.visibility)) {
              this._canvasMaterials.set(element.camera.view.visibility, new Map());
            }
          }
        }
      }
      /**
       * @en
       * Get the CanvasComponent by number.
       *
       * @zh
       * 通过屏幕编号获得屏幕组件。
       *
       * @param visibility - 屏幕编号。
       */

    }, {
      key: "getScreen",
      value: function getScreen(visibility) {
        var screens = this._screens;

        for (var i = 0; i < screens.length; ++i) {
          var screen = screens[i];

          if (screen.camera) {
            if (screen.camera.view.visibility === visibility) {
              return screen;
            }
          }
        }

        return null;
      }
      /**
       * @zh
       * Removes the CanvasComponent from the list.
       *
       * @param comp - 被移除的屏幕。
       */

    }, {
      key: "removeScreen",
      value: function removeScreen(comp) {
        var _this2 = this;

        var idx = this._screens.indexOf(comp);

        if (idx === -1) {
          return;
        }

        this._screens.splice(idx, 1);

        if (comp.camera) {
          var matRecord = this._canvasMaterials.get(comp.camera.view.visibility);

          var matHashInter = matRecord.keys();
          var matHash = matHashInter.next();

          while (!matHash.done) {
            this._removeUIMaterial(matHash.value);

            matHash = matHashInter.next();
          }

          matRecord.clear();
        }

        var camera;

        for (var i = idx; i < this._screens.length; i++) {
          camera = this._screens[i].camera;

          if (camera) {
            (function () {
              var matRecord = _this2._canvasMaterials.get(camera.view.visibility);

              camera.view.visibility = _index2.Layers.BitMask.UI_2D | i + 1;

              var newMatRecord = _this2._canvasMaterials.get(camera.view.visibility);

              matRecord.forEach(function (value, key) {
                newMatRecord.set(key, value);
              });
              matRecord.clear();
            })();
          }
        }
      }
    }, {
      key: "update",
      value: function update(dt) {
        this._renderScreens(); // update buffers


        if (this._batches.length > 0) {
          var buffers = this._meshBuffers;

          for (var i = 0; i < buffers.length; ++i) {
            var bufferBatch = buffers[i];
            bufferBatch.uploadData();
            bufferBatch.reset();
          }
        }

        this.render();

        this._reset();
      }
    }, {
      key: "sortScreens",
      value: function sortScreens() {
        this._screens.sort(this._screenSort);
      }
    }, {
      key: "render",
      value: function render() {
        var batchPriority = 0;

        for (var i = 0; i < this._modelInUse.length; i++) {
          this._scene.removeModel(this._modelInUse.get(i));

          this._uiModelPool.free(this._modelInUse.get(i));
        }

        this._modelInUse.clear();

        if (this._batches.length) {
          for (var _i2 = 0; _i2 < this._batches.length; ++_i2) {
            var batch = this._batches.array[_i2];

            if (batch.model) {
              if (batch.camera) {
                var visFlags = batch.camera.view.visibility;
                batch.model.visFlags = visFlags;
                batch.model.node.layer = visFlags;
              }

              for (var j = 0; j < batch.model.subModelNum; j++) {
                batch.model.getSubModel(j).priority = batchPriority++;
              }
            } else {
              var bindingLayout = batch.bindingLayout; // assumes sprite materials has only one sampler

              bindingLayout.bindTextureView(_define2.UniformBinding.CUSTOM_SAMPLER_BINDING_START_POINT, batch.texView);
              bindingLayout.bindSampler(_define2.UniformBinding.CUSTOM_SAMPLER_BINDING_START_POINT, batch.sampler);
              bindingLayout.update();
              var ia = batch.bufferBatch.ia;
              ia.firstIndex = batch.firstIdx;
              ia.indexCount = batch.idxCount;

              var uiModel = this._uiModelPool.alloc();

              uiModel.directInitialize(ia, batch);

              this._scene.addModel(uiModel);

              uiModel.getSubModel(0).priority = batchPriority++;

              if (batch.camera) {
                uiModel.visFlags = batch.camera.view.visibility;

                if (this._canvasMaterials.get(batch.camera.view.visibility).get(batch.material.hash) == null) {
                  this._uiMaterials.get(batch.material.hash).increase();

                  this._canvasMaterials.get(batch.camera.view.visibility).set(batch.material.hash, 1);
                }
              }

              this._modelInUse.push(uiModel);
            }
          }
        }
      }
      /**
       * @en
       * Render component data submission process of UI.
       * The submitted vertex data is the UI for world coordinates.
       * For example: The UI components except Graphics and UIModelComponent.
       *
       * @zh
       * UI 渲染组件数据提交流程（针对提交的顶点数据是世界坐标的提交流程，例如：除 graphics 和 uimodel 的大部分 ui 组件）。
       * 此处的数据最终会生成需要提交渲染的 model 数据。
       *
       * @param comp - 当前执行组件。
       * @param frame - 当前执行组件贴图。
       * @param assembler - 当前组件渲染数据组装器。
       */

    }, {
      key: "commitComp",
      value: function commitComp(comp) {
        var frame = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var assembler = arguments.length > 2 ? arguments[2] : undefined;
        var sampler = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        var renderComp = comp;
        var texView = frame;
        var samp = sampler;

        if (this._currMaterial.hash !== renderComp.material.hash || this._currTexView !== texView || this._currSampler !== samp) {
          this.autoMergeBatches();
          this._currMaterial = renderComp.material;
          this._currTexView = texView;
          this._currSampler = samp;
        }

        if (assembler) {
          assembler.fillBuffers(renderComp, this);

          this._applyOpacity(renderComp);
        }
      }
      /**
       * @en
       * Render component data submission process of UI.
       * The submitted vertex data is the UI for local coordinates.
       * For example: The UI components of Graphics and UIModelComponent.
       *
       * @zh
       * UI 渲染组件数据提交流程（针对例如： graphics 和 uimodel 等数据量较为庞大的 ui 组件）。
       *
       * @param comp - 当前执行组件。
       * @param model - 提交渲染的 model 数据。
       * @param mat - 提交渲染的材质。
       */

    }, {
      key: "commitModel",
      value: function commitModel(comp, model, mat) {
        // if the last comp is spriteComp, previous comps should be batched.
        if (this._currMaterial !== this._emptyMaterial) {
          this.autoMergeBatches();
        }

        if (mat) {
          var rebuild = _stencilManager.StencilManager.sharedManager.handleMaterial(mat);

          if (rebuild && model) {
            for (var i = 0; i < model.subModelNum; i++) {
              model.setSubModelMaterial(i, mat);
            }
          }
        }

        var uiCanvas = this._currCanvas;

        var curDrawBatch = this._drawBatchPool.alloc();

        curDrawBatch.camera = uiCanvas && uiCanvas.camera;
        curDrawBatch.model = model;
        curDrawBatch.bufferBatch = null;
        curDrawBatch.material = mat;
        curDrawBatch.texView = null;
        curDrawBatch.sampler = null;
        curDrawBatch.firstIdx = 0;
        curDrawBatch.idxCount = 0;
        curDrawBatch.pipelineState = null;
        curDrawBatch.bindingLayout = null; // reset current render state to null

        this._currMaterial = this._emptyMaterial;
        this._currTexView = null;
        this._currSampler = null;

        this._batches.push(curDrawBatch);
      }
      /**
       * @en
       * Submit separate render data.
       * This data does not participate in the batch.
       *
       * @zh
       * 提交独立渲染数据.
       * @param comp 静态组件
       */

    }, {
      key: "commitStaticBatch",
      value: function commitStaticBatch(comp) {
        this._batches.concat(comp.drawBatchList);

        this.finishMergeBatches();
      }
      /**
       * @en
       * End a section of render data and submit according to the batch condition.
       *
       * @zh
       * 根据合批条件，结束一段渲染数据并提交。
       */

    }, {
      key: "autoMergeBatches",
      value: function autoMergeBatches() {
        var mat = this._currMaterial;
        var buffer = this._currMeshBuffer;
        var indicsStart = buffer.indiceStart;
        var vCount = buffer.indiceOffset - indicsStart;

        if (!vCount || !mat) {
          return;
        }

        var uiCanvas = this._currCanvas;

        _stencilManager.StencilManager.sharedManager.handleMaterial(mat);

        var curDrawBatch = this._currStaticRoot ? this._currStaticRoot._requireDrawBatch() : this._drawBatchPool.alloc();
        curDrawBatch.camera = uiCanvas && uiCanvas.camera;
        curDrawBatch.bufferBatch = buffer;
        curDrawBatch.material = mat;
        curDrawBatch.texView = this._currTexView;
        curDrawBatch.sampler = this._currSampler;
        curDrawBatch.firstIdx = indicsStart;
        curDrawBatch.idxCount = vCount;
        curDrawBatch.pipelineState = this._getUIMaterial(mat).getPipelineState();
        curDrawBatch.bindingLayout = curDrawBatch.pipelineState.pipelineLayout.layouts[0];

        this._batches.push(curDrawBatch);

        buffer.vertexStart = buffer.vertexOffset;
        buffer.indiceStart = buffer.indiceOffset;
        buffer.byteStart = buffer.byteOffset;
      }
      /**
       * @en
       * Force changes to current batch data and merge
       *
       * @zh
       * 强行修改当前批次数据并合并。
       *
       * @param material - 当前批次的材质。
       * @param sprite - 当前批次的精灵帧。
       */

    }, {
      key: "forceMergeBatches",
      value: function forceMergeBatches(material, sprite) {
        this._currMaterial = material;
        this._currTexView = sprite;
        this.autoMergeBatches();
      }
      /**
       * @en
       * Forced to merge the data of the previous batch to start a new batch.
       *
       * @zh
       * 强制合并上一个批次的数据，开启新一轮合批。
       */

    }, {
      key: "finishMergeBatches",
      value: function finishMergeBatches() {
        this.autoMergeBatches();
        this._currMaterial = this._emptyMaterial;
        this._currTexView = null;
      }
    }, {
      key: "_destroyUIMaterials",
      value: function _destroyUIMaterials() {
        var matIter = this._uiMaterials.values();

        var result = matIter.next();

        while (!result.done) {
          var uiMat = result.value;
          uiMat.destroy();
          result = matIter.next();
        }

        this._uiMaterials.clear();
      }
    }, {
      key: "_walk",
      value: function _walk(node) {
        var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var len = node.children.length;
        var parentOpacity = this._parentOpacity;
        this._parentOpacity *= node._uiProps.opacity;

        this._preprocess(node);

        if (len > 0 && !node._static) {
          var children = node.children;

          for (var i = 0; i < children.length; ++i) {
            var child = children[i];

            this._walk(child, level);
          }
        }

        this._postprocess(node);

        this._parentOpacity = parentOpacity;
        level += 1;
      }
    }, {
      key: "_renderScreens",
      value: function _renderScreens() {
        var screens = this._screens;

        for (var i = 0; i < screens.length; ++i) {
          var screen = screens[i];

          if (!screen.enabledInHierarchy) {
            continue;
          }

          this._currCanvas = screen;

          this._recursiveScreenNode(screen.node);
        }
      }
    }, {
      key: "_preprocess",
      value: function _preprocess(c) {
        if (!c._uiProps.uiTransformComp) {
          return;
        } // parent changed can flush child visibility


        c._uiProps.uiTransformComp._canvas = this._currCanvas;
        var render = c._uiProps.uiComp;

        if (render && render.enabledInHierarchy) {
          render.updateAssembler(this);
        }
      }
    }, {
      key: "_postprocess",
      value: function _postprocess(c) {
        var render = c._uiProps.uiComp;

        if (render && render.enabledInHierarchy) {
          render.postUpdateAssembler(this);
        }
      }
    }, {
      key: "_recursiveScreenNode",
      value: function _recursiveScreenNode(screen) {
        this._walk(screen);

        this.autoMergeBatches();
      }
    }, {
      key: "_reset",
      value: function _reset() {
        for (var i = 0; i < this._batches.length; ++i) {
          var batch = this._batches.array[i];

          if (batch.isStatic) {
            continue;
          }

          batch.clear(this);

          this._drawBatchPool.free(batch);
        }

        this._parentOpacity = 1;

        this._batches.clear();

        this._currMaterial = this._emptyMaterial;
        this._currCanvas = null;
        this._currTexView = null;
        this._currSampler = null;
        this._meshBufferUseCount = 0;

        this._requireBufferBatch();

        _stencilManager.StencilManager.sharedManager.reset();
      }
    }, {
      key: "_createMeshBuffer",
      value: function _createMeshBuffer() {
        var batch = this._bufferBatchPool.add();

        batch.initialize(this._attributes, this._requireBufferBatch.bind(this));

        this._meshBuffers.push(batch);

        return batch;
      }
    }, {
      key: "_requireBufferBatch",
      value: function _requireBufferBatch() {
        if (this._meshBufferUseCount >= this._meshBuffers.length) {
          this._currMeshBuffer = this._createMeshBuffer();
        } else {
          this._currMeshBuffer = this._meshBuffers[this._meshBufferUseCount];
        }

        this._meshBufferUseCount++;

        if (arguments.length === 2) {
          this._currMeshBuffer.request(arguments[0], arguments[1]);
        }
      }
    }, {
      key: "_screenSort",
      value: function _screenSort(a, b) {
        var delta = a.priority - b.priority;
        return delta === 0 ? a.node.getSiblingIndex() - b.node.getSiblingIndex() : delta;
      }
    }, {
      key: "_applyOpacity",
      value: function _applyOpacity(comp) {
        var color = comp.color.a / 255;
        var opacity = this._parentOpacity = this._parentOpacity * color;
        var byteOffset = this._currMeshBuffer.byteOffset >> 2;
        var vbuf = this._currMeshBuffer.vData;
        var lastByteOffset = this._currMeshBuffer.lastByteOffset >> 2;

        for (var i = lastByteOffset; i < byteOffset; i += 9) {
          vbuf[i + _meshBuffer.MeshBuffer.OPACITY_OFFSET] = opacity;
        }

        this._currMeshBuffer.lastByteOffset = this._currMeshBuffer.byteOffset;
      }
    }]);

    return UI;
  }();

  _exports.UI = UI;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,