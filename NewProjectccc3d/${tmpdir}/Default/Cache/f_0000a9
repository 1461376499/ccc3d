(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../data/class-decorator.js", "../renderer/core/program-lib.js", "./asset.js", "../default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../data/class-decorator.js"), require("../renderer/core/program-lib.js"), require("./asset.js"), require("../default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.classDecorator, global.programLib, global.asset, global.defaultConstants);
    global.effectAsset = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _classDecorator, _programLib, _asset, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EffectAsset = void 0;

  var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3, _class3, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  var effects = {};
  /**
   * @zh
   * Effect 资源，作为材质实例初始化的模板，每个 effect 资源都应是全局唯一的。
   */

  var EffectAsset = (_dec = (0, _classDecorator.ccclass)('cc.EffectAsset'), _dec(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Asset) {
    _inherits(EffectAsset, _Asset);

    function EffectAsset() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, EffectAsset);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EffectAsset)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _initializerDefineProperty(_this, "techniques", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "shaders", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "combinations", _descriptor3, _assertThisInitialized(_this));

      return _this;
    }

    _createClass(EffectAsset, [{
      key: "onLoaded",

      /**
       * @zh
       * 通过 Loader 加载完成时的回调，将自动注册 effect 资源。
       */
      value: function onLoaded() {
        this.shaders.forEach(function (s) {
          return _programLib.programLib.define(s);
        });

        if (!_defaultConstants.EDITOR) {
          cc.game.once(cc.Game.EVENT_ENGINE_INITED, this._precompile, this);
        }

        EffectAsset.register(this);
      }
    }, {
      key: "_precompile",
      value: function _precompile() {
        var _this2 = this;

        var root = cc.director.root;

        var _loop = function _loop(i) {
          var shader = _this2.shaders[i];
          var combination = _this2.combinations[i];

          if (!combination) {
            return "continue";
          }

          Object.keys(combination).reduce(function (out, name) {
            return out.reduce(function (acc, cur) {
              var choices = combination[name];
              var next = [cur].concat(_toConsumableArray(Array(choices.length - 1)).map(function () {
                return Object.assign({}, cur);
              }));
              next.forEach(function (defines, idx) {
                return defines[name] = choices[idx];
              });
              return acc.concat(next);
            }, []);
          }, [{}]).forEach(function (defines) {
            return _programLib.programLib.getGFXShader(root.device, shader.name, defines, root.pipeline);
          });
        };

        for (var i = 0; i < this.shaders.length; i++) {
          var _ret = _loop(i);

          if (_ret === "continue") continue;
        }
      }
    }], [{
      key: "register",

      /**
       * @zh
       * 将指定 effect 注册到全局管理器。
       */
      value: function register(asset) {
        effects[asset.name] = asset;
      }
      /**
       * @zh
       * 将指定 effect 从全局管理器移除。
       */

    }, {
      key: "remove",
      value: function remove(name) {
        if (effects[name]) {
          delete effects[name];
          return;
        }

        for (var n in effects) {
          if (effects[n]._uuid === name) {
            delete effects[n];
            return;
          }
        }
      }
      /**
       * @zh
       * 获取指定名字的 effect 资源。
       */

    }, {
      key: "get",
      value: function get(name) {
        if (effects[name]) {
          return effects[name];
        }

        for (var n in effects) {
          if (effects[n]._uuid === name) {
            return effects[n];
          }
        }

        return null;
      }
      /**
       * @zh
       * 获取所有已注册的 effect 资源。
       */

    }, {
      key: "getAll",
      value: function getAll() {
        return effects;
      }
    }]);

    return EffectAsset;
  }(_asset.Asset), _class3._effects = {}, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "techniques", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return [];
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "shaders", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return [];
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "combinations", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return [];
    }
  })), _class2)) || _class);
  _exports.EffectAsset = EffectAsset;
  cc.EffectAsset = EffectAsset;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,