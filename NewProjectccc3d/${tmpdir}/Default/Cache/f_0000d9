(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../core/components/index.js", "../../core/data/class-decorator.js", "../../core/math/index.js", "../../core/value-types/enum.js", "../../core/math/utils.js", "./sprite-component.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../core/components/index.js"), require("../../core/data/class-decorator.js"), require("../../core/math/index.js"), require("../../core/value-types/enum.js"), require("../../core/math/utils.js"), require("./sprite-component.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.classDecorator, global.index, global._enum, global.utils, global.spriteComponent);
    global.scrollBarComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _classDecorator, _index2, _enum, _utils, _spriteComponent) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ScrollBarComponent = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _class3, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  var GETTINGSHORTERFACTOR = 20;
  var ZERO = new _index2.Vec3();

  var _tempPos_1 = new _index2.Vec3();

  var _tempPos_2 = new _index2.Vec3();

  var _tempSize = new _index2.Size();

  var _tempVec2 = new _index2.Vec2();

  var defaultAnchor = new _index2.Vec2();

  var _tempColor = new _index2.Color();
  /**
   * @en
   * Enum for ScrollBar direction.
   *
   * @zh
   * 滚动条方向。
   */


  var Direction;

  (function (Direction) {
    Direction[Direction["HORIZONTAL"] = 0] = "HORIZONTAL";
    Direction[Direction["VERTICAL"] = 1] = "VERTICAL";
  })(Direction || (Direction = {}));

  (0, _enum.ccenum)(Direction);
  /**
   * @en
   * The ScrollBar control allows the user to scroll an image or other view that is too large to see completely.
   *
   * @zh
   * 滚动条组件。
   */

  var ScrollBarComponent = (_dec = (0, _classDecorator.ccclass)('cc.ScrollBarComponent'), _dec2 = (0, _classDecorator.help)('i18n:cc.ScrollBarComponent'), _dec3 = (0, _classDecorator.executionOrder)(110), _dec4 = (0, _classDecorator.menu)('UI/ScrollBar'), _dec5 = (0, _classDecorator.property)({
    type: _spriteComponent.SpriteComponent,
    tooltip: '作为当前滚动区域位置显示的滑块 Sprite',
    displayOrder: 0
  }), _dec6 = (0, _classDecorator.property)({
    type: Direction,
    tooltip: 'ScrollBar 的滚动方向',
    displayOrder: 1
  }), _dec7 = (0, _classDecorator.property)({
    tooltip: '是否在没有滚动动作时自动隐藏 ScrollBar',
    displayOrder: 2
  }), _dec8 = (0, _classDecorator.property)({
    tooltip: '没有滚动动作后经过多久会自动隐藏。\n注意：只要当 “enableAutoHide” 为 true 时，才有效。',
    displayOrder: 3
  }), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Component) {
    _inherits(ScrollBarComponent, _Component);

    function ScrollBarComponent() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, ScrollBarComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ScrollBarComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _initializerDefineProperty(_this, "_scrollView", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_handle", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_direction", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_enableAutoHide", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_autoHideTime", _descriptor5, _assertThisInitialized(_this));

      _this._touching = false;
      _this._opacity = 255;
      _this._autoHideRemainingTime = 0;
      return _this;
    }

    _createClass(ScrollBarComponent, [{
      key: "hide",

      /**
       * @en
       * Hide ScrollBar.
       *
       * @zh
       * 滚动条隐藏。
       */
      value: function hide() {
        this._autoHideRemainingTime = 0;

        this._setOpacity(0);
      }
      /**
       * @en
       * Show ScrollBar.
       *
       * @zh
       * 滚动条显示。
       */

    }, {
      key: "show",
      value: function show() {
        this._autoHideRemainingTime = this._autoHideTime;

        this._setOpacity(this._opacity);
      }
      /**
       * @en
       * Reset the position of ScrollBar.
       *
       * @zh
       * 重置滚动条位置。
       *
       * @param outOfBoundary - 滚动位移。
       */

    }, {
      key: "onScroll",
      value: function onScroll(outOfBoundary) {
        if (!this._scrollView) {
          return;
        }

        var content = this._scrollView.content;

        if (!content) {
          return;
        }

        var contentSize = content.getContentSize();

        var scrollViewSize = this._scrollView.node.getContentSize();

        var barSize = this.node.getContentSize();

        if (this._conditionalDisableScrollBar(contentSize, scrollViewSize)) {
          return;
        }

        if (this._enableAutoHide) {
          this._autoHideRemainingTime = this._autoHideTime;

          this._setOpacity(this._opacity);
        }

        var contentMeasure = 0;
        var scrollViewMeasure = 0;
        var outOfBoundaryValue = 0;
        var contentPosition = 0;
        var handleNodeMeasure = 0;

        if (this._direction === Direction.HORIZONTAL) {
          contentMeasure = contentSize.width;
          scrollViewMeasure = scrollViewSize.width;
          handleNodeMeasure = barSize.width;
          outOfBoundaryValue = outOfBoundary.x;
          contentPosition = -this._convertToScrollViewSpace(content).x;
        } else if (this._direction === Direction.VERTICAL) {
          contentMeasure = contentSize.height;
          scrollViewMeasure = scrollViewSize.height;
          handleNodeMeasure = barSize.height;
          outOfBoundaryValue = outOfBoundary.y;
          contentPosition = -this._convertToScrollViewSpace(content).y;
        }

        var length = this._calculateLength(contentMeasure, scrollViewMeasure, handleNodeMeasure, outOfBoundaryValue);

        var position = this._calculatePosition(contentMeasure, scrollViewMeasure, handleNodeMeasure, contentPosition, outOfBoundaryValue, length);

        this._updateLength(length);

        this._updateHandlerPosition(position);
      }
      /**
       * @zh
       * 滚动视窗设置。
       *
       * @param scrollView - 滚动视窗。
       */

    }, {
      key: "setScrollView",
      value: function setScrollView(scrollView) {
        this._scrollView = scrollView;
      }
    }, {
      key: "onTouchBegan",
      value: function onTouchBegan() {
        if (!this._enableAutoHide) {
          return;
        }

        this._touching = true;
      }
    }, {
      key: "onTouchEnded",
      value: function onTouchEnded() {
        if (!this._enableAutoHide) {
          return;
        }

        this._touching = false;

        if (this._autoHideTime <= 0) {
          return;
        }

        if (this._scrollView) {
          var content = this._scrollView.content;

          if (content) {
            var contentSize = content.getContentSize();

            var scrollViewSize = this._scrollView.node.getContentSize();

            if (this._conditionalDisableScrollBar(contentSize, scrollViewSize)) {
              return;
            }
          }
        }

        this._autoHideRemainingTime = this._autoHideTime;
      }
    }, {
      key: "onEnable",
      value: function onEnable() {
        var renderComp = this.node.getComponent(_spriteComponent.SpriteComponent);

        if (renderComp) {
          this._opacity = renderComp.color.a;
        }
      }
    }, {
      key: "start",
      value: function start() {
        if (this._enableAutoHide) {
          this._setOpacity(0);
        }
      }
    }, {
      key: "update",
      value: function update(dt) {
        this._processAutoHide(dt);
      }
    }, {
      key: "_convertToScrollViewSpace",
      value: function _convertToScrollViewSpace(content) {
        if (!this._scrollView) {
          return ZERO;
        }

        var scrollTrans = this._scrollView.node._uiProps.uiTransformComp;
        var contentTrans = content._uiProps.uiTransformComp;

        if (!scrollTrans || !contentTrans) {
          return ZERO;
        }

        _tempPos_1.set(-content.anchorX * content.width, -content.anchorY * content.height, 0);

        contentTrans.convertToWorldSpaceAR(_tempPos_1, _tempPos_2);
        var scrollViewSpacePos = scrollTrans.convertToNodeSpaceAR(_tempPos_2);
        scrollViewSpacePos.x += scrollTrans.anchorX * scrollTrans.width;
        scrollViewSpacePos.y += scrollTrans.anchorY * scrollTrans.height;
        return scrollViewSpacePos;
      }
    }, {
      key: "_setOpacity",
      value: function _setOpacity(opacity) {
        if (this._handle) {
          var renderComp = this.node.getComponent(_spriteComponent.SpriteComponent);

          if (renderComp) {
            _tempColor.set(renderComp.color);

            _tempColor.a = opacity;
            renderComp.color = _tempColor;
          }

          renderComp = this._handle.getComponent(_spriteComponent.SpriteComponent);

          if (renderComp) {
            _tempColor.set(renderComp.color);

            _tempColor.a = opacity;
            renderComp.color = _tempColor;
          }
        }
      }
    }, {
      key: "_updateHandlerPosition",
      value: function _updateHandlerPosition(position) {
        if (this._handle) {
          var oldPosition = this._fixupHandlerPosition();

          this._handle.node.setPosition(position.x + oldPosition.x, position.y + oldPosition.y, oldPosition.z);
        }
      }
    }, {
      key: "_fixupHandlerPosition",
      value: function _fixupHandlerPosition() {
        var barSize = this.node.getContentSize();
        var barAnchor = this.node.getAnchorPoint();
        var handleSize = this.handle.node.getContentSize();
        var handleParent = this.handle.node.parent;

        _index2.Vec3.set(_tempPos_1, -barSize.width * barAnchor.x, -barSize.height * barAnchor.y, 0);

        var leftBottomWorldPosition = this.node._uiProps.uiTransformComp.convertToWorldSpaceAR(_tempPos_1, _tempPos_2);

        var fixupPosition = new _index2.Vec3();

        handleParent._uiProps.uiTransformComp.convertToNodeSpaceAR(leftBottomWorldPosition, fixupPosition);

        if (this.direction === Direction.HORIZONTAL) {
          fixupPosition = new _index2.Vec3(fixupPosition.x, fixupPosition.y + (barSize.height - handleSize.height) / 2, 0);
        } else if (this.direction === Direction.VERTICAL) {
          fixupPosition = new _index2.Vec3(fixupPosition.x + (barSize.width - handleSize.width) / 2, fixupPosition.y, 0);
        }

        this.handle.node.setPosition(fixupPosition);
        return fixupPosition;
      }
    }, {
      key: "_conditionalDisableScrollBar",
      value: function _conditionalDisableScrollBar(contentSize, scrollViewSize) {
        if (contentSize.width <= scrollViewSize.width && this._direction === Direction.HORIZONTAL) {
          return true;
        }

        if (contentSize.height <= scrollViewSize.height && this._direction === Direction.VERTICAL) {
          return true;
        }

        return false;
      }
    }, {
      key: "_calculateLength",
      value: function _calculateLength(contentMeasure, scrollViewMeasure, handleNodeMeasure, outOfBoundary) {
        var denominatorValue = contentMeasure;

        if (outOfBoundary) {
          denominatorValue += (outOfBoundary > 0 ? outOfBoundary : -outOfBoundary) * GETTINGSHORTERFACTOR;
        }

        var lengthRation = scrollViewMeasure / denominatorValue;
        return handleNodeMeasure * lengthRation;
      }
    }, {
      key: "_calculatePosition",
      value: function _calculatePosition(contentMeasure, scrollViewMeasure, handleNodeMeasure, contentPosition, outOfBoundary, actualLenth) {
        var denominatorValue = contentMeasure - scrollViewMeasure;

        if (outOfBoundary) {
          denominatorValue += Math.abs(outOfBoundary);
        }

        var positionRatio = 0;

        if (denominatorValue) {
          positionRatio = contentPosition / denominatorValue;
          positionRatio = (0, _utils.clamp01)(positionRatio);
        }

        var position = (handleNodeMeasure - actualLenth) * positionRatio;

        if (this._direction === Direction.VERTICAL) {
          return new _index2.Vec3(0, position, 0);
        } else {
          return new _index2.Vec3(position, 0, 0);
        }
      }
    }, {
      key: "_updateLength",
      value: function _updateLength(length) {
        if (this._handle) {
          var handleNode = this._handle.node;
          var handleNodeSize = handleNode.getContentSize();
          var anchor = handleNode.getAnchorPoint();

          if (anchor.x !== defaultAnchor.x || anchor.y !== defaultAnchor.y) {
            handleNode.setAnchorPoint(defaultAnchor);
          }

          if (this._direction === Direction.HORIZONTAL) {
            handleNode.setContentSize(length, handleNodeSize.height);
          } else {
            handleNode.setContentSize(handleNodeSize.width, length);
          }
        }
      }
    }, {
      key: "_processAutoHide",
      value: function _processAutoHide(deltaTime) {
        if (!this._enableAutoHide || this._autoHideRemainingTime <= 0) {
          return;
        } else if (this._touching) {
          return;
        }

        this._autoHideRemainingTime -= deltaTime;

        if (this._autoHideRemainingTime <= this._autoHideTime) {
          this._autoHideRemainingTime = Math.max(0, this._autoHideRemainingTime);
          var opacity = this._opacity * (this._autoHideRemainingTime / this._autoHideTime);

          this._setOpacity(opacity);
        }
      }
    }, {
      key: "handle",

      /**
       * @en
       * The "handle" part of the ScrollBar.
       *
       * @zh
       * 作为当前滚动区域位置显示的滑块 Sprite。
       */
      get: function get() {
        return this._handle;
      },
      set: function set(value) {
        if (this._handle === value) {
          return;
        }

        this._handle = value;
        this.onScroll(new _index2.Vec3(0, 0, 0));
      }
      /**
       * @en
       * The direction of scrolling.
       *
       * @zh
       * ScrollBar 的滚动方向。
       */

    }, {
      key: "direction",
      get: function get() {
        return this._direction;
      },
      set: function set(value) {
        if (this._direction === value) {
          return;
        }

        this._direction = value;
        this.onScroll(new _index2.Vec3());
      }
      /**
       * @en
       * Whether enable auto hide or not.
       *
       * @zh
       * 是否在没有滚动动作时自动隐藏 ScrollBar。
       */

    }, {
      key: "enableAutoHide",
      get: function get() {
        return this._enableAutoHide;
      },
      set: function set(value) {
        if (this._enableAutoHide === value) {
          return;
        }

        this._enableAutoHide = value;

        if (this._enableAutoHide) {
          this._setOpacity(0);
        }
      }
      /**
       * @en
       * The time to hide ScrollBar when scroll finished.
       * Note: This value is only useful when enableAutoHide is true.
       *
       * @zh
       * 没有滚动动作后经过多久会自动隐藏。<br/>
       * 注意：只要当 “enableAutoHide” 为 true 时，才有效。
       */

    }, {
      key: "autoHideTime",
      get: function get() {
        return this._autoHideTime;
      },
      set: function set(value) {
        if (this._autoHideTime === value) {
          return;
        }

        this._autoHideTime = value;
      }
    }]);

    return ScrollBarComponent;
  }(_index.Component), _class3.Direction = Direction, _temp), (_applyDecoratedDescriptor(_class2.prototype, "handle", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "handle"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "direction", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "direction"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "enableAutoHide", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "enableAutoHide"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "autoHideTime", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "autoHideTime"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_scrollView", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_handle", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_direction", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return Direction.HORIZONTAL;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_enableAutoHide", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_autoHideTime", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 1.0;
    }
  })), _class2)) || _class) || _class) || _class) || _class);
  _exports.ScrollBarComponent = ScrollBarComponent;
  cc.ScrollBarComponent = ScrollBarComponent;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,