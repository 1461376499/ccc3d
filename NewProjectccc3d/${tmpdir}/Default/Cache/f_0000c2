(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../data/class-decorator.js", "../data/object.js", "./node.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../data/class-decorator.js"), require("../data/object.js"), require("./node.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.classDecorator, global.object, global.node);
    global.privateNode = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _classDecorator, _object, _node) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.PrivateNode = void 0;

  var _dec, _class;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  // const LocalDirtyFlag = Node._LocalDirtyFlag;
  // const POSITION_ON = 1 << 0;
  // @ts-ignore
  var HideInHierarchy = _object.CCObject.Flags.HideInHierarchy;
  /**
   * @en
   * Class of private entities in Cocos Creator 3d scenes.<br/>
   * The PrivateNode is hidden in editor, and completely transparent to users.<br/>
   * It's normally used as Node's private content created by components in parent node.<br/>
   * So in theory private nodes are not children, they are part of the parent node.<br/>
   * Private node have two important characteristics:<br/>
   * 1. It has the minimum z index and cannot be modified, because they can't be displayed over real children.<br/>
   * 2. The positioning of private nodes is also special, they will consider the left bottom corner of the parent node's bounding box as the origin of local coordinates.<br/>
   *    In this way, they can be easily kept inside the bounding box.<br/>
   * Currently, it's used by RichText component and TileMap component.
   * @zh
   * Cocos Creator 3d 场景中的私有节点类。<br/>
   * 私有节点在编辑器中不可见，对用户透明。<br/>
   * 通常私有节点是被一些特殊的组件创建出来作为父节点的一部分而存在的，理论上来说，它们不是子节点，而是父节点的组成部分。<br/>
   * 私有节点有两个非常重要的特性：<br/>
   * 1. 它有着最小的渲染排序的 Z 轴深度，并且无法被更改，因为它们不能被显示在其他正常子节点之上。<br/>
   * 2. 它的定位也是特殊的，对于私有节点来说，父节点包围盒的左下角是它的局部坐标系原点，这个原点相当于父节点的位置减去它锚点的偏移。这样私有节点可以比较容易被控制在包围盒之中。<br/>
   * 目前在引擎中，RichText 和 TileMap 都有可能生成私有节点。
   */

  var PrivateNode = (_dec = (0, _classDecorator.ccclass)('cc.PrivateNode'), _dec(_class = /*#__PURE__*/function (_Node) {
    _inherits(PrivateNode, _Node);

    // @property({
    //     override: true
    // })
    // get x() {
    //     return this._originPos.x;
    // }
    // set x(value) {
    //     var localPosition = this._originPos;
    //     if (value !== localPosition.x) {
    //         localPosition.x = value;
    //         this._posDirty(true);
    //     }
    // }
    // @property({
    //     override: true
    // })
    // get y() {
    //     return this._originPos.y;
    // }
    // set y(value) {
    //     var localPosition = this._originPos;
    //     if (value !== localPosition.y) {
    //         localPosition.y = value;
    //         this._posDirty(true);
    //     }
    // }
    // @property({
    //     override: true
    // })
    // get zIndex() {
    //     return cc.macro.MIN_ZINDEX;
    // }
    // set zIndex(val) {
    //     cc.warnID(1638);
    // }
    function PrivateNode(name) {
      var _this;

      _classCallCheck(this, PrivateNode);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(PrivateNode).call(this, name)); // this._originPos = cc.v2();

      _this._objFlags |= HideInHierarchy;
      return _this;
    } // _posDirty (sendEvent) {
    //     this.setLocalDirty(LocalDirtyFlag.POSITION);
    //     if (sendEvent === true && (this._eventMask & POSITION_ON)) {
    //         this.emit(Node.EventType.POSITION_CHANGED);
    //     }
    // }
    // _updateLocalMatrix() {
    //     if (!this._localMatDirty) return;
    //     let parent = this.parent;
    //     if (parent) {
    //         // Position correction for transform calculation
    //         this._position.x = this._originPos.x - (parent._anchorPoint.x - 0.5) * parent._contentSize.width;
    //         this._position.y = this._originPos.y - (parent._anchorPoint.y - 0.5) * parent._contentSize.height;
    //     }
    //     super._updateLocalMatrix();
    // }
    // getPosition () {
    //     return new cc.Vec2(this._originPos);
    // }
    // setPosition (x, y) {
    //     if (y === undefined) {
    //         x = x.x;
    //         y = x.y;
    //     }
    //     let pos = this._originPos;
    //     if (pos.x === x && pos.y === y) {
    //         return;
    //     }
    //     pos.x = x;
    //     pos.y = y;
    //     this._posDirty(true);
    // }
    // setParent(value) {
    //     let oldParent = this._parent;
    //     super.setParent(value);
    //     if (oldParent !== value) {
    //         if (oldParent) {
    //             oldParent.off(Node.EventType.ANCHOR_CHANGED, this._posDirty, this);
    //         }
    //         if (value) {
    //             value.on(Node.EventType.ANCHOR_CHANGED, this._posDirty, this);
    //         }
    //     }
    // }
    // do not update order of arrival
    // public _updateOrderOfArrival () {}


    return PrivateNode;
  }(_node.Node)) || _class); // cc.js.getset(PrivateNode.prototype, 'parent', PrivateNode.prototype.getParent, PrivateNode.prototype.setParent);
  // cc.js.getset(PrivateNode.prototype, 'position', PrivateNode.prototype.getPosition, PrivateNode.prototype.setPosition);

  _exports.PrivateNode = PrivateNode;
  cc.PrivateNode = PrivateNode;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,