(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../data/class.js", "../event/event-target.js", "../game.js", "../math/index.js", "./visible-rect.js", "../default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../data/class.js"), require("../event/event-target.js"), require("../game.js"), require("../math/index.js"), require("./visible-rect.js"), require("../default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global._class, global.eventTarget, global.game, global.index, global.visibleRect, global.defaultConstants);
    global.view = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _class, _eventTarget, _game, _index, _visibleRect, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.view = _exports.ResolutionPolicy = _exports.View = void 0;
  _visibleRect = _interopRequireDefault(_visibleRect);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var BrowserGetter = /*#__PURE__*/function () {
    function BrowserGetter() {
      _classCallCheck(this, BrowserGetter);

      this.html = void 0;
      this.meta = {
        width: 'device-width'
      };
      this.adaptationType = cc.sys.browserType;
    }

    _createClass(BrowserGetter, [{
      key: "init",
      value: function init() {
        if (!_defaultConstants.MINIGAME) {
          this.html = document.getElementsByTagName('html')[0];
        }
      }
    }, {
      key: "availWidth",
      value: function availWidth(frame) {
        if (cc.sys.isMobile || !frame || frame === this.html) {
          return window.innerWidth;
        } else {
          return frame.clientWidth;
        }
      }
    }, {
      key: "availHeight",
      value: function availHeight(frame) {
        if (cc.sys.isMobile || !frame || frame === this.html) {
          return window.innerHeight;
        } else {
          return frame.clientHeight;
        }
      }
    }]);

    return BrowserGetter;
  }();

  var __BrowserGetter = new BrowserGetter();

  if (cc.sys.os === cc.sys.OS_IOS) {
    // All browsers are WebView
    __BrowserGetter.adaptationType = cc.sys.BROWSER_TYPE_SAFARI;
  }

  if (_defaultConstants.WECHAT) {
    __BrowserGetter.adaptationType = cc.sys.BROWSER_TYPE_WECHAT_GAME;
  }

  switch (__BrowserGetter.adaptationType) {
    case cc.sys.BROWSER_TYPE_SAFARI:
      __BrowserGetter.meta['minimal-ui'] = 'true';

    case cc.sys.BROWSER_TYPE_SOUGOU:
    case cc.sys.BROWSER_TYPE_UC:
      __BrowserGetter.availWidth = function (frame) {
        return frame.clientWidth;
      };

      __BrowserGetter.availHeight = function (frame) {
        return frame.clientHeight;
      };

      break;

    case cc.sys.BROWSER_TYPE_WECHAT_GAME:
      __BrowserGetter.availWidth = function () {
        return window.innerWidth;
      };

      __BrowserGetter.availHeight = function () {
        return window.innerHeight;
      };

      break;

    case cc.sys.BROWSER_TYPE_WECHAT_GAME_SUB:
      var sharedCanvas = window.sharedCanvas || wx.getSharedCanvas();

      __BrowserGetter.availWidth = function () {
        return sharedCanvas.width;
      };

      __BrowserGetter.availHeight = function () {
        return sharedCanvas.height;
      };

      break;
  }
  /**
   * @en View represents the game window.<br/>
   * It's main task include: <br/>
   *  - Apply the design resolution policy to the UI Canvas<br/>
   *  - Provide interaction with the window, like resize event on web, retina display support, etc...<br/>
   *  - Manage the scale and translation of canvas related to the frame on Web<br/>
   * <br/>
   * With {{view}} as its singleton initialized by the engine, you don't need to call any constructor or create functions,<br/>
   * the standard way to use it is by calling:<br/>
   *  - view.methodName(); <br/>
   * @zh View 代表游戏窗口视图，它的核心功能包括：
   *  - 对所有 UI Canvas 进行设计分辨率适配。
   *  - 提供窗口视图的交互，比如监听 resize 事件，控制 retina 屏幕适配，等等。
   *  - 控制 Canvas 节点相对于外层 DOM 节点的缩放和偏移。
   * 引擎会自动初始化它的单例对象 {{view}}，所以你不需要实例化任何 View，只需要直接使用 `view.methodName();`
   */


  var View = /*#__PURE__*/function (_EventTarget) {
    _inherits(View, _EventTarget);

    function View() {
      var _this;

      _classCallCheck(this, View);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(View).call(this));
      _this._resizeWithBrowserSize = void 0;
      _this._designResolutionSize = void 0;
      _this._originalDesignResolutionSize = void 0;
      _this._frameSize = void 0;
      _this._scaleX = void 0;
      _this._scaleY = void 0;
      _this._viewportRect = void 0;
      _this._visibleRect = void 0;
      _this._autoFullScreen = void 0;
      _this._devicePixelRatio = void 0;
      _this._maxPixelRatio = void 0;
      _this._retinaEnabled = void 0;
      _this._resizeCallback = void 0;
      _this._resizing = void 0;
      _this._orientationChanging = void 0;
      _this._isRotated = void 0;
      _this._orientation = void 0;
      _this._isAdjustViewport = void 0;
      _this._antiAliasEnabled = void 0;
      _this._resolutionPolicy = void 0;
      _this._rpExactFit = void 0;
      _this._rpShowAll = void 0;
      _this._rpNoBorder = void 0;
      _this._rpFixedHeight = void 0;
      _this._rpFixedWidth = void 0;

      var _t = _assertThisInitialized(_this);

      var _strategyer = ContainerStrategy;
      var _strategy = ContentStrategy; // Size of parent node that contains cc.game.container and cc.game.canvas

      _this._frameSize = new _index.Size(0, 0); // resolution size, it is the size appropriate for the app resources.

      _this._designResolutionSize = new _index.Size(0, 0);
      _this._originalDesignResolutionSize = new _index.Size(0, 0);
      _this._scaleX = 1;
      _this._scaleY = 1; // Viewport is the container's rect related to content's coordinates in pixel

      _this._viewportRect = new _index.Rect(0, 0, 0, 0); // The visible rect in content's coordinate in point

      _this._visibleRect = new _index.Rect(0, 0, 0, 0); // Auto full screen disabled by default

      _this._autoFullScreen = false; // The device's pixel ratio (for retina displays)

      _this._devicePixelRatio = 1;

      if (_defaultConstants.JSB) {
        _this._maxPixelRatio = 4;
      } else {
        _this._maxPixelRatio = 2;
      } // Retina disabled by default


      _this._retinaEnabled = false; // Custom callback for resize event

      _this._resizeCallback = null;
      _this._resizing = false;
      _this._resizeWithBrowserSize = false;
      _this._orientationChanging = true;
      _this._isRotated = false;
      _this._orientation = cc.macro.ORIENTATION_AUTO;
      _this._isAdjustViewport = true;
      _this._antiAliasEnabled = false; // Setup system default resolution policies

      _this._rpExactFit = new ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.EXACT_FIT);
      _this._rpShowAll = new ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.SHOW_ALL);
      _this._rpNoBorder = new ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.NO_BORDER);
      _this._rpFixedHeight = new ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.FIXED_HEIGHT);
      _this._rpFixedWidth = new ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.FIXED_WIDTH);
      _this._resolutionPolicy = _this._rpShowAll;
      cc.game.once(cc.Game.EVENT_ENGINE_INITED, _this.init, _assertThisInitialized(_this));
      return _this;
    }

    _createClass(View, [{
      key: "init",
      value: function init() {
        __BrowserGetter.init();

        this._initFrameSize();

        this.enableAntiAlias(true);
        var w = cc.game.canvas.width;
        var h = cc.game.canvas.height;
        this._designResolutionSize.width = w;
        this._designResolutionSize.height = h;
        this._originalDesignResolutionSize.width = w;
        this._originalDesignResolutionSize.height = h;
        this._viewportRect.width = w;
        this._viewportRect.height = h;
        this._visibleRect.width = w;
        this._visibleRect.height = h;
        cc.winSize.width = this._visibleRect.width;
        cc.winSize.height = this._visibleRect.height;

        if (cc.visibleRect) {
          cc.visibleRect.init(this._visibleRect);
        }
      }
      /**
       * @en
       * Sets whether resize canvas automatically when browser's size changed.<br/>
       * Useful only on web.
       * @zh 设置当发现浏览器的尺寸改变时，是否自动调整 canvas 尺寸大小。
       * 仅在 Web 模式下有效。
       * @param enabled - Whether enable automatic resize with browser's resize event
       */

    }, {
      key: "resizeWithBrowserSize",
      value: function resizeWithBrowserSize(enabled) {
        if (enabled) {
          // enable
          if (!this._resizeWithBrowserSize) {
            this._resizeWithBrowserSize = true;
            window.addEventListener('resize', this._resizeEvent);
            window.addEventListener('orientationchange', this._orientationChange);
          }
        } else {
          // disable
          if (this._resizeWithBrowserSize) {
            this._resizeWithBrowserSize = false;
            window.removeEventListener('resize', this._resizeEvent);
            window.removeEventListener('orientationchange', this._orientationChange);
          }
        }
      }
      /**
       * @en
       * Sets the callback function for cc.view's resize action,<br/>
       * this callback will be invoked before applying resolution policy, <br/>
       * so you can do any additional modifications within the callback.<br/>
       * Useful only on web.
       * @zh 设置 cc.view 调整视窗尺寸行为的回调函数，
       * 这个回调函数会在应用适配模式之前被调用，
       * 因此你可以在这个回调函数内添加任意附加改变，
       * 仅在 Web 平台下有效。
       * @param callback - The callback function
       */

    }, {
      key: "setResizeCallback",
      value: function setResizeCallback(callback) {
        if (typeof callback === 'function' || callback == null) {
          this._resizeCallback = callback;
        }
      }
      /**
       * @en
       * Sets the orientation of the game, it can be landscape, portrait or auto.
       * When set it to landscape or portrait, and screen w/h ratio doesn't fit,
       * cc.view will automatically rotate the game canvas using CSS.
       * Note that this function doesn't have any effect in native,
       * in native, you need to set the application orientation in native project settings
       * @zh 设置游戏屏幕朝向，它能够是横版，竖版或自动。
       * 当设置为横版或竖版，并且屏幕的宽高比例不匹配时，
       * cc.view 会自动用 CSS 旋转游戏场景的 canvas，
       * 这个方法不会对 native 部分产生任何影响，对于 native 而言，你需要在应用设置中的设置排版。
       * @param orientation - Possible values: macro.ORIENTATION_LANDSCAPE | macro.ORIENTATION_PORTRAIT | macro.ORIENTATION_AUTO
       */

    }, {
      key: "setOrientation",
      value: function setOrientation(orientation) {
        orientation = orientation & cc.macro.ORIENTATION_AUTO;

        if (orientation && this._orientation !== orientation) {
          this._orientation = orientation;
        }
      }
      /**
       * @en
       * Sets whether the engine modify the "viewport" meta in your web page.<br/>
       * It's enabled by default, we strongly suggest you not to disable it.<br/>
       * And even when it's enabled, you can still set your own "viewport" meta, it won't be overridden<br/>
       * Only useful on web
       * @zh 设置引擎是否调整 viewport meta 来配合屏幕适配。
       * 默认设置为启动，我们强烈建议你不要将它设置为关闭。
       * 即使当它启动时，你仍然能够设置你的 viewport meta，它不会被覆盖。
       * 仅在 Web 模式下有效
       * @param enabled - Enable automatic modification to "viewport" meta
       */

    }, {
      key: "adjustViewportMeta",
      value: function adjustViewportMeta(enabled) {
        this._isAdjustViewport = enabled;
      }
      /**
       * @en
       * Retina support is enabled by default for Apple device but disabled for other devices,<br/>
       * it takes effect only when you called setDesignResolutionPolicy<br/>
       * Only useful on web
       * @zh 对于 Apple 这种支持 Retina 显示的设备上默认进行优化而其他类型设备默认不进行优化，
       * 它仅会在你调用 setDesignResolutionPolicy 方法时有影响。
       * 仅在 Web 模式下有效。
       * @param enabled - Enable or disable retina display
       */

    }, {
      key: "enableRetina",
      value: function enableRetina(enabled) {
        this._retinaEnabled = !!enabled;
      }
      /**
       * @en
       * Check whether retina display is enabled.<br/>
       * Only useful on web
       * @zh 检查是否对 Retina 显示设备进行优化。
       * 仅在 Web 模式下有效。
       */

    }, {
      key: "isRetinaEnabled",
      value: function isRetinaEnabled() {
        return this._retinaEnabled;
      }
      /**
       * @en Whether to Enable on anti-alias
       * @zh 控制抗锯齿是否开启
       * @param enabled - Enable or not anti-alias
       */

    }, {
      key: "enableAntiAlias",
      value: function enableAntiAlias(enabled) {
        if (this._antiAliasEnabled === enabled) {
          return;
        }

        this._antiAliasEnabled = enabled;

        if (cc.game.renderType === cc.Game.RENDER_TYPE_WEBGL) {
          var cache = cc.loader._cache; // tslint:disable-next-line: forin

          for (var key in cache) {
            var item = cache[key];
            var tex = item && item.content instanceof cc.Texture2D ? item.content : null;

            if (tex) {
              var Filter = cc.Texture2D.Filter;

              if (enabled) {
                tex.setFilters(Filter.LINEAR, Filter.LINEAR);
              } else {
                tex.setFilters(Filter.NEAREST, Filter.NEAREST);
              }
            }
          }
        } else if (cc.game.renderType === cc.Game.RENDER_TYPE_CANVAS) {
          var ctx = cc.game.canvas.getContext('2d');
          ctx.imageSmoothingEnabled = enabled;
          ctx.mozImageSmoothingEnabled = enabled;
        }
      }
      /**
       * @en Returns whether the current enable on anti-alias
       * @zh 返回当前是否抗锯齿
       */

    }, {
      key: "isAntiAliasEnabled",
      value: function isAntiAliasEnabled() {
        return this._antiAliasEnabled;
      }
      /**
       * @en
       * If enabled, the application will try automatically to enter full screen mode on mobile devices<br/>
       * You can pass true as parameter to enable it and disable it by passing false.<br/>
       * Only useful on web
       * @zh 启动时，移动端游戏会在移动端自动尝试进入全屏模式。
       * 你能够传入 true 为参数去启动它，用 false 参数来关闭它。
       * @param enabled - Enable or disable auto full screen on mobile devices
       */

    }, {
      key: "enableAutoFullScreen",
      value: function enableAutoFullScreen(enabled) {
        if (enabled && enabled !== this._autoFullScreen && cc.sys.isMobile && cc.sys.browserType !== cc.sys.BROWSER_TYPE_WECHAT) {
          // Automatically full screen when user touches on mobile version
          this._autoFullScreen = true;
          cc.screen.autoFullScreen(cc.game.frame);
        } else {
          this._autoFullScreen = false;
        }
      }
      /**
       * @en
       * Check whether auto full screen is enabled.<br/>
       * Only useful on web
       * @zh 检查自动进入全屏模式是否启动。
       * 仅在 Web 模式下有效。
       * @return Auto full screen enabled or not
       */

    }, {
      key: "isAutoFullScreenEnabled",
      value: function isAutoFullScreenEnabled() {
        return this._autoFullScreen;
      }
      /*
       * Not support on native.<br/>
       * On web, it sets the size of the canvas.
       * @zh 这个方法并不支持 native 平台，在 Web 平台下，可以用来设置 canvas 尺寸。
       * @private
       * @param {Number} width
       * @param {Number} height
       */

    }, {
      key: "setCanvasSize",
      value: function setCanvasSize(width, height) {
        var canvas = cc.game.canvas;
        var container = cc.game.container;
        this._devicePixelRatio = window.devicePixelRatio;
        canvas.width = width * this._devicePixelRatio;
        canvas.height = height * this._devicePixelRatio; // canvas.width = width;
        // canvas.height = height;

        canvas.style.width = width + 'px';
        canvas.style.height = height + 'px';
        container.style.width = width + 'px';
        container.style.height = height + 'px';

        this._resizeEvent();
      }
      /**
       * @en
       * Returns the canvas size of the view.<br/>
       * On native platforms, it returns the screen size since the view is a fullscreen view.<br/>
       * On web, it returns the size of the canvas element.
       * @zh 返回视图中 canvas 的尺寸。
       * 在 native 平台下，它返回全屏视图下屏幕的尺寸。
       * 在 Web 平台下，它返回 canvas 元素尺寸。
       */

    }, {
      key: "getCanvasSize",
      value: function getCanvasSize() {
        return new _index.Size(cc.game.canvas.width, cc.game.canvas.height);
      }
      /**
       * @en
       * Returns the frame size of the view.<br/>
       * On native platforms, it returns the screen size since the view is a fullscreen view.<br/>
       * On web, it returns the size of the canvas's outer DOM element.
       * @zh 返回视图中边框尺寸。
       * 在 native 平台下，它返回全屏视图下屏幕的尺寸。
       * 在 web 平台下，它返回 canvas 元素的外层 DOM 元素尺寸。
       */

    }, {
      key: "getFrameSize",
      value: function getFrameSize() {
        return new _index.Size(this._frameSize.width, this._frameSize.height);
      }
      /**
       * @en On native, it sets the frame size of view.<br/>
       * On web, it sets the size of the canvas's outer DOM element.
       * @zh 在 native 平台下，设置视图框架尺寸。
       * 在 web 平台下，设置 canvas 外层 DOM 元素尺寸。
       * @param {Number} width
       * @param {Number} height
       */

    }, {
      key: "setFrameSize",
      value: function setFrameSize(width, height) {
        this._frameSize.width = width;
        this._frameSize.height = height;
        cc.frame.style.width = width + 'px';
        cc.frame.style.height = height + 'px';

        this._resizeEvent();
      }
      /**
       * @en Returns the visible area size of the view port.
       * @zh 返回视图窗口可见区域尺寸。
       */

    }, {
      key: "getVisibleSize",
      value: function getVisibleSize() {
        return new _index.Size(this._visibleRect.width, this._visibleRect.height);
      }
      /**
       * @en Returns the visible area size of the view port.
       * @zh 返回视图窗口可见区域像素尺寸。
       */

    }, {
      key: "getVisibleSizeInPixel",
      value: function getVisibleSizeInPixel() {
        return new _index.Size(this._visibleRect.width * this._scaleX, this._visibleRect.height * this._scaleY);
      }
      /**
       * @en Returns the visible origin of the view port.
       * @zh 返回视图窗口可见区域原点。
       */

    }, {
      key: "getVisibleOrigin",
      value: function getVisibleOrigin() {
        return new _index.Vec2(this._visibleRect.x, this._visibleRect.y);
      }
      /**
       * @en Returns the visible origin of the view port.
       * @zh 返回视图窗口可见区域像素原点。
       */

    }, {
      key: "getVisibleOriginInPixel",
      value: function getVisibleOriginInPixel() {
        return new _index.Vec2(this._visibleRect.x * this._scaleX, this._visibleRect.y * this._scaleY);
      }
      /**
       * @en Returns the current resolution policy
       * @zh 返回当前分辨率方案
       * @see {{ResolutionPolicy}}
       */

    }, {
      key: "getResolutionPolicy",
      value: function getResolutionPolicy() {
        return this._resolutionPolicy;
      }
      /**
       * @en Sets the current resolution policy
       * @zh 设置当前分辨率模式
       * @see {{ResolutionPolicy}}
       */

    }, {
      key: "setResolutionPolicy",
      value: function setResolutionPolicy(resolutionPolicy) {
        var _t = this;

        if (resolutionPolicy instanceof ResolutionPolicy) {
          _t._resolutionPolicy = resolutionPolicy;
        } // Ensure compatibility with JSB
        else {
            var _locPolicy = ResolutionPolicy;

            if (resolutionPolicy === _locPolicy.EXACT_FIT) {
              _t._resolutionPolicy = _t._rpExactFit;
            }

            if (resolutionPolicy === _locPolicy.SHOW_ALL) {
              _t._resolutionPolicy = _t._rpShowAll;
            }

            if (resolutionPolicy === _locPolicy.NO_BORDER) {
              _t._resolutionPolicy = _t._rpNoBorder;
            }

            if (resolutionPolicy === _locPolicy.FIXED_HEIGHT) {
              _t._resolutionPolicy = _t._rpFixedHeight;
            }

            if (resolutionPolicy === _locPolicy.FIXED_WIDTH) {
              _t._resolutionPolicy = _t._rpFixedWidth;
            }
          }
      } // tslint:disable: max-line-length

      /**
       * @en Sets the resolution policy with designed view size in points.<br/>
       * The resolution policy include: <br/>
       * [1] ResolutionExactFit       Fill screen by stretch-to-fit: if the design resolution ratio of width to height is different from the screen resolution ratio, your game view will be stretched.<br/>
       * [2] ResolutionNoBorder       Full screen without black border: if the design resolution ratio of width to height is different from the screen resolution ratio, two areas of your game view will be cut.<br/>
       * [3] ResolutionShowAll        Full screen with black border: if the design resolution ratio of width to height is different from the screen resolution ratio, two black borders will be shown.<br/>
       * [4] ResolutionFixedHeight    Scale the content's height to screen's height and proportionally scale its width<br/>
       * [5] ResolutionFixedWidth     Scale the content's width to screen's width and proportionally scale its height<br/>
       * [ResolutionPolicy]        [Web only feature] Custom resolution policy, constructed by ResolutionPolicy<br/>
       * @zh 通过设置设计分辨率和匹配模式来进行游戏画面的屏幕适配。
       * @param width Design resolution width.
       * @param height Design resolution height.
       * @param resolutionPolicy The resolution policy desired
       */

    }, {
      key: "setDesignResolutionSize",
      value: function setDesignResolutionSize(width, height, resolutionPolicy) {
        // Defensive code
        if (!(width > 0 || height > 0)) {
          cc.logID(2200);
          return;
        }

        this.setResolutionPolicy(resolutionPolicy);
        var policy = this._resolutionPolicy;

        if (policy) {
          policy.preApply(this);
        } // Reinit frame size


        if (cc.sys.isMobile) {
          this._adjustViewportMeta();
        } // Permit to re-detect the orientation of device.


        this._orientationChanging = true; // If resizing, then frame size is already initialized, this logic should be improved

        if (!this._resizing) {
          this._initFrameSize();
        }

        if (!policy) {
          cc.logID(2201);
          return;
        }

        this._originalDesignResolutionSize.width = this._designResolutionSize.width = width;
        this._originalDesignResolutionSize.height = this._designResolutionSize.height = height;
        var result = policy.apply(this, this._designResolutionSize);

        if (result.scale && result.scale.length === 2) {
          this._scaleX = result.scale[0];
          this._scaleY = result.scale[1];
        }

        if (result.viewport) {
          var vp = this._viewportRect;
          var vb = this._visibleRect;
          var rv = result.viewport;
          vp.x = rv.x;
          vp.y = rv.y;
          vp.width = rv.width;
          vp.height = rv.height;
          vb.x = 0;
          vb.y = 0;
          vb.width = rv.width / this._scaleX;
          vb.height = rv.height / this._scaleY;
        }

        policy.postApply(this);
        cc.winSize.width = this._visibleRect.width;
        cc.winSize.height = this._visibleRect.height;

        if (_visibleRect.default) {
          _visibleRect.default.init(this._visibleRect);
        }

        this.emit('design-resolution-changed');
      }
      /**
       * @en Returns the designed size for the view.
       * Default resolution size is the same as 'getFrameSize'.
       * @zh 返回视图的设计分辨率。
       * 默认下分辨率尺寸同 `getFrameSize` 方法相同
       */

    }, {
      key: "getDesignResolutionSize",
      value: function getDesignResolutionSize() {
        return new _index.Size(this._designResolutionSize.width, this._designResolutionSize.height);
      }
      /**
       * @en Sets the container to desired pixel resolution and fit the game content to it.
       * This function is very useful for adaptation in mobile browsers.
       * In some HD android devices, the resolution is very high, but its browser performance may not be very good.
       * In this case, enabling retina display is very costy and not suggested, and if retina is disabled, the image may be blurry.
       * But this API can be helpful to set a desired pixel resolution which is in between.
       * This API will do the following:
       *     1. Set viewport's width to the desired width in pixel
       *     2. Set body width to the exact pixel resolution
       *     3. The resolution policy will be reset with designed view size in points.
       * @zh 设置容器（container）需要的像素分辨率并且适配相应分辨率的游戏内容。
       * @param width Design resolution width.
       * @param height Design resolution height.
       * @param resolutionPolicy The resolution policy desired
       */

    }, {
      key: "setRealPixelResolution",
      value: function setRealPixelResolution(width, height, resolutionPolicy) {
        if (!_defaultConstants.JSB && !_defaultConstants.MINIGAME) {
          // Set viewport's width
          this._setViewportMeta({
            width: width
          }, true); // Set body width to the exact pixel resolution


          document.documentElement.style.width = width + 'px';
          document.body.style.width = width + 'px';
          document.body.style.left = '0px';
          document.body.style.top = '0px';
        } // Reset the resolution size and policy


        this.setDesignResolutionSize(width, height, resolutionPolicy);
      }
      /**
       * @en Returns the view port rectangle.
       * @zh 返回视窗剪裁区域。
       */

    }, {
      key: "getViewportRect",
      value: function getViewportRect() {
        return this._viewportRect;
      }
      /**
       * @en Returns scale factor of the horizontal direction (X axis).
       * @zh 返回横轴的缩放比，这个缩放比是将画布像素分辨率放到设计分辨率的比例。
       */

    }, {
      key: "getScaleX",
      value: function getScaleX() {
        return this._scaleX;
      }
      /**
       * @en Returns scale factor of the vertical direction (Y axis).
       * @zh 返回纵轴的缩放比，这个缩放比是将画布像素分辨率缩放到设计分辨率的比例。
       */

    }, {
      key: "getScaleY",
      value: function getScaleY() {
        return this._scaleY;
      }
      /**
       * @en Returns device pixel ratio for retina display.
       * @zh 返回设备或浏览器像素比例。
       */

    }, {
      key: "getDevicePixelRatio",
      value: function getDevicePixelRatio() {
        return this._devicePixelRatio;
      }
      /**
       * @en Returns the real location in view for a translation based on a related position
       * @zh 将屏幕坐标转换为游戏视图下的坐标。
       * @param tx - The X axis translation
       * @param ty - The Y axis translation
       * @param relatedPos - The related position object including "left", "top", "width", "height" informations
       * @param out - The out object to save the conversion result
       */

    }, {
      key: "convertToLocationInView",
      value: function convertToLocationInView(tx, ty, relatedPos, out) {
        var result = out || new _index.Vec2();
        var x = this._devicePixelRatio * (tx - relatedPos.left);
        var y = this._devicePixelRatio * (relatedPos.top + relatedPos.height - ty);

        if (this._isRotated) {
          result.x = cc.game.canvas.width - y;
          result.y = x;
        } else {
          result.x = x;
          result.y = y;
        }

        return result;
      } // _convertMouseToLocationInView (in_out_point, relatedPos) {
      //     var viewport = this._viewportRect, _t = this;
      //     in_out_point.x = ((_t._devicePixelRatio * (in_out_point.x - relatedPos.left)) - viewport.x) / _t._scaleX;
      //     in_out_point.y = (_t._devicePixelRatio * (relatedPos.top + relatedPos.height - in_out_point.y) - viewport.y) / _t._scaleY;
      // }

    }, {
      key: "_convertPointWithScale",
      value: function _convertPointWithScale(point) {
        var viewport = this._viewportRect;
        point.x = (point.x - viewport.x) / this._scaleX;
        point.y = (point.y - viewport.y) / this._scaleY;
      } // Resize helper functions

    }, {
      key: "_resizeEvent",
      value: function _resizeEvent() {
        var _view = cc.view; // Check frame size changed or not

        var prevFrameW = _view._frameSize.width;
        var prevFrameH = _view._frameSize.height;
        var prevRotated = _view._isRotated;

        if (cc.sys.isMobile) {
          var containerStyle = cc.game.container.style;
          var margin = containerStyle.margin;
          containerStyle.margin = '0';
          containerStyle.display = 'none';

          _view._initFrameSize();

          containerStyle.margin = margin;
          containerStyle.display = 'block';
        } else {
          _view._initFrameSize();
        }

        if (!_defaultConstants.JSB && !_view._orientationChanging && _view._isRotated === prevRotated && _view._frameSize.width === prevFrameW && _view._frameSize.height === prevFrameH) {
          return;
        } // Frame size changed, do resize works


        var width = _view._originalDesignResolutionSize.width;
        var height = _view._originalDesignResolutionSize.height;
        _view._resizing = true;

        if (width > 0) {
          _view.setDesignResolutionSize(width, height, _view._resolutionPolicy);
        }

        _view._resizing = false;

        if (_view._resizeCallback) {
          _view._resizeCallback.call();
        }
      }
    }, {
      key: "_orientationChange",
      value: function _orientationChange() {
        cc.view._orientationChanging = true;

        cc.view._resizeEvent();
      }
    }, {
      key: "_initFrameSize",
      value: function _initFrameSize() {
        var locFrameSize = this._frameSize;

        var w = __BrowserGetter.availWidth(cc.game.frame);

        var h = __BrowserGetter.availHeight(cc.game.frame);

        var isLandscape = w >= h;

        if (_defaultConstants.EDITOR || !cc.sys.isMobile || isLandscape && this._orientation & cc.macro.ORIENTATION_LANDSCAPE || !isLandscape && this._orientation & cc.macro.ORIENTATION_PORTRAIT) {
          locFrameSize.width = w;
          locFrameSize.height = h;
          cc.game.container.style['-webkit-transform'] = 'rotate(0deg)';
          cc.game.container.style.transform = 'rotate(0deg)';
          this._isRotated = false;
        } else {
          locFrameSize.width = h;
          locFrameSize.height = w;
          cc.game.container.style['-webkit-transform'] = 'rotate(90deg)';
          cc.game.container.style.transform = 'rotate(90deg)';
          cc.game.container.style['-webkit-transform-origin'] = '0px 0px 0px';
          cc.game.container.style.transformOrigin = '0px 0px 0px';
          this._isRotated = true; // Fix for issue: https://github.com/cocos-creator/fireball/issues/8365
          // Reference: https://www.douban.com/note/343402554/
          // For Chrome, z-index not working after container transform rotate 90deg.
          // Because 'transform' style adds canvas (the top-element of container) to a new stack context.
          // That causes the DOM Input was hidden under canvas.
          // This should be done after container rotated, instead of in style-mobile.css.

          cc.game.canvas.style['-webkit-transform'] = 'translateZ(0px)';
          cc.game.canvas.style.transform = 'translateZ(0px)';
        }

        if (this._orientationChanging) {
          setTimeout(function () {
            cc.view._orientationChanging = false;
          }, 1000);
        }
      } // hack

    }, {
      key: "_adjustSizeKeepCanvasSize",
      value: function _adjustSizeKeepCanvasSize() {
        var designWidth = this._originalDesignResolutionSize.width;
        var designHeight = this._originalDesignResolutionSize.height;

        if (designWidth > 0) {
          this.setDesignResolutionSize(designWidth, designHeight, this._resolutionPolicy);
        }
      }
    }, {
      key: "_setViewportMeta",
      value: function _setViewportMeta(metas, overwrite) {
        var vp = document.getElementById('cocosMetaElement');

        if (vp && overwrite) {
          document.head.removeChild(vp);
        }

        var elems = document.getElementsByName('viewport');
        var currentVP = elems ? elems[0] : null;
        var content;
        var key;
        var pattern;
        content = currentVP ? currentVP.content : '';
        vp = vp || document.createElement('meta');
        vp.id = 'cocosMetaElement';
        vp.name = 'viewport';
        vp.content = '';

        for (key in metas) {
          if (content.indexOf(key) === -1) {
            content += ',' + key + '=' + metas[key];
          } else if (overwrite) {
            pattern = new RegExp(key + '\s*=\s*[^,]+');
            content.replace(pattern, key + '=' + metas[key]);
          }
        }

        if (/^,/.test(content)) {
          content = content.substr(1);
        }

        vp.content = content; // For adopting certain android devices which don't support second viewport

        if (currentVP) {
          currentVP.content = content;
        }

        document.head.appendChild(vp);
      }
    }, {
      key: "_adjustViewportMeta",
      value: function _adjustViewportMeta() {
        if (this._isAdjustViewport && !_defaultConstants.JSB && !_defaultConstants.MINIGAME) {
          this._setViewportMeta(__BrowserGetter.meta, false);

          this._isAdjustViewport = false;
        }
      }
    }, {
      key: "_convertMouseToLocation",
      value: function _convertMouseToLocation(in_out_point, relatedPos) {
        in_out_point.x = this._devicePixelRatio * (in_out_point.x - relatedPos.left);
        in_out_point.y = this._devicePixelRatio * (relatedPos.top + relatedPos.height - in_out_point.y);
      }
    }, {
      key: "_convertTouchWidthScale",
      value: function _convertTouchWidthScale(selTouch) {
        var viewport = this._viewportRect;
        var scaleX = this._scaleX;
        var scaleY = this._scaleY;
        selTouch._point.x = (selTouch._point.x - viewport.x) / scaleX;
        selTouch._point.y = (selTouch._point.y - viewport.y) / scaleY;
        selTouch._prevPoint.x = (selTouch._prevPoint.x - viewport.x) / scaleX;
        selTouch._prevPoint.y = (selTouch._prevPoint.y - viewport.y) / scaleY;
      }
    }, {
      key: "_convertTouchesWithScale",
      value: function _convertTouchesWithScale(touches) {
        var viewport = this._viewportRect;
        var scaleX = this._scaleX;
        var scaleY = this._scaleY;
        var selPoint;
        var selPrePoint; // tslint:disable-next-line: prefer-for-of

        for (var i = 0; i < touches.length; i++) {
          var selTouch = touches[i];
          selPoint = selTouch._point;
          selPrePoint = selTouch._prevPoint;
          selPoint.x = (selPoint.x - viewport.x) / scaleX;
          selPoint.y = (selPoint.y - viewport.y) / scaleY;
          selPrePoint.x = (selPrePoint.x - viewport.x) / scaleX;
          selPrePoint.y = (selPrePoint.y - viewport.y) / scaleY;
        }
      }
    }]);

    return View;
  }(_eventTarget.EventTarget);
  /**
   * !en
   * Emit when design resolution changed.
   * !zh
   * 当设计分辨率改变时发送。
   * @event design-resolution-changed
   */


  _exports.View = View;
  View.instance = void 0;

  /** 
   * ContainerStrategy class is the root strategy class of container's scale strategy,
   * it controls the behavior of how to scale the cc.game.container and cc.game.canvas object
   */
  var ContainerStrategy = /*#__PURE__*/function () {
    function ContainerStrategy() {
      _classCallCheck(this, ContainerStrategy);

      this.name = 'ContainerStrategy';
    }

    _createClass(ContainerStrategy, [{
      key: "preApply",

      /**
       * @en Manipulation before appling the strategy
       * @zh 在应用策略之前的操作
       * @param view - The target view
       */
      value: function preApply(_view) {}
      /**
       * @en Function to apply this strategy
       * @zh 策略应用方法
       * @param view
       * @param designedResolution
       */

    }, {
      key: "apply",
      value: function apply(_view, designedResolution) {}
      /**
       * @en
       * Manipulation after applying the strategy
       * @zh 策略调用之后的操作
       * @param view  The target view
       */

    }, {
      key: "postApply",
      value: function postApply(_view) {}
    }, {
      key: "_setupContainer",
      value: function _setupContainer(_view, w, h) {
        var locCanvas = cc.game.canvas;
        var locContainer = cc.game.container;

        if (cc.sys.platform !== cc.sys.WECHAT_GAME) {
          if (cc.sys.os === cc.sys.OS_ANDROID) {
            document.body.style.width = (_view._isRotated ? h : w) + 'px';
            document.body.style.height = (_view._isRotated ? w : h) + 'px';
          } // Setup style


          locContainer.style.width = locCanvas.style.width = w + 'px';
          locContainer.style.height = locCanvas.style.height = h + 'px';
        } // Setup pixel ratio for retina display


        var devicePixelRatio = _view._devicePixelRatio = 1;

        if (_view.isRetinaEnabled()) {
          devicePixelRatio = _view._devicePixelRatio = Math.min(_view._maxPixelRatio, window.devicePixelRatio || 1);
        } // Setup canvas


        locCanvas.width = w * devicePixelRatio;
        locCanvas.height = h * devicePixelRatio;
      }
    }, {
      key: "_fixContainer",
      value: function _fixContainer() {
        // Add container to document body
        document.body.insertBefore(cc.game.container, document.body.firstChild); // Set body's width height to window's size, and forbid overflow, so that game will be centered

        var bs = document.body.style;
        bs.width = window.innerWidth + 'px';
        bs.height = window.innerHeight + 'px';
        bs.overflow = 'hidden'; // Body size solution doesn't work on all mobile browser so this is the aleternative: fixed container

        var contStyle = cc.game.container.style;
        contStyle.position = 'fixed';
        contStyle.left = contStyle.top = '0px'; // Reposition body

        document.body.scrollTop = 0;
      }
    }]);

    return ContainerStrategy;
  }();
  /**
   * ContentStrategy class is the root strategy class of content's scale strategy,
   * it controls the behavior of how to scale the scene and setup the viewport for the game
   *
   * @class ContentStrategy
   */


  ContainerStrategy.EQUAL_TO_FRAME = void 0;
  ContainerStrategy.PROPORTION_TO_FRAME = void 0;

  var ContentStrategy = /*#__PURE__*/function () {
    function ContentStrategy() {
      _classCallCheck(this, ContentStrategy);

      this.name = 'ContentStrategy';
      this._result = void 0;
      this._result = {
        scale: [1, 1],
        viewport: null
      };
    }
    /**
     * @en Manipulation before applying the strategy
     * @zh 策略应用前的操作
     * @param view - The target view
     */


    _createClass(ContentStrategy, [{
      key: "preApply",
      value: function preApply(_view) {}
      /**
       * @en Function to apply this strategy
       * The return value is {scale: [scaleX, scaleY], viewport: {new Rect}},
       * The target view can then apply these value to itself, it's preferred not to modify directly its private variables
       * @zh 调用策略方法
       * @return The result scale and viewport rect
       */

    }, {
      key: "apply",
      value: function apply(_view, designedResolution) {
        return {
          scale: [1, 1]
        };
      }
      /**
       * @en Manipulation after applying the strategy
       * @zh 策略调用之后的操作
       * @param view - The target view
       */

    }, {
      key: "postApply",
      value: function postApply(_view) {}
    }, {
      key: "_buildResult",
      value: function _buildResult(containerW, containerH, contentW, contentH, scaleX, scaleY) {
        // Makes content fit better the canvas
        if (Math.abs(containerW - contentW) < 2) {
          contentW = containerW;
        }

        if (Math.abs(containerH - contentH) < 2) {
          contentH = containerH;
        }

        var viewport = new _index.Rect(Math.round((containerW - contentW) / 2), Math.round((containerH - contentH) / 2), contentW, contentH);
        this._result.scale = [scaleX, scaleY];
        this._result.viewport = viewport;
        return this._result;
      }
    }]);

    return ContentStrategy;
  }();

  ContentStrategy.EXACT_FIT = void 0;
  ContentStrategy.SHOW_ALL = void 0;
  ContentStrategy.NO_BORDER = void 0;
  ContentStrategy.FIXED_HEIGHT = void 0;
  ContentStrategy.FIXED_WIDTH = void 0;

  (function () {
    // Container scale strategys

    /**
     * @class EqualToFrame
     * @extends ContainerStrategy
     */
    var EqualToFrame = /*#__PURE__*/function (_ContainerStrategy) {
      _inherits(EqualToFrame, _ContainerStrategy);

      function EqualToFrame() {
        var _getPrototypeOf2;

        var _this2;

        _classCallCheck(this, EqualToFrame);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this2 = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EqualToFrame)).call.apply(_getPrototypeOf2, [this].concat(args)));
        _this2.name = 'EqualToFrame';
        return _this2;
      }

      _createClass(EqualToFrame, [{
        key: "apply",
        value: function apply(_view) {
          var frameH = _view._frameSize.height;
          var containerStyle = cc.game.container.style;

          this._setupContainer(_view, _view._frameSize.width, _view._frameSize.height); // Setup container's margin and padding


          if (_view._isRotated) {
            containerStyle.margin = '0 0 0 ' + frameH + 'px';
          } else {
            containerStyle.margin = '0px';
          }

          containerStyle.padding = '0px';
        }
      }]);

      return EqualToFrame;
    }(ContainerStrategy);
    /**
     * @class ProportionalToFrame
     * @extends ContainerStrategy
     */


    var ProportionalToFrame = /*#__PURE__*/function (_ContainerStrategy2) {
      _inherits(ProportionalToFrame, _ContainerStrategy2);

      function ProportionalToFrame() {
        var _getPrototypeOf3;

        var _this3;

        _classCallCheck(this, ProportionalToFrame);

        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        _this3 = _possibleConstructorReturn(this, (_getPrototypeOf3 = _getPrototypeOf(ProportionalToFrame)).call.apply(_getPrototypeOf3, [this].concat(args)));
        _this3.name = 'ProportionalToFrame';
        return _this3;
      }

      _createClass(ProportionalToFrame, [{
        key: "apply",
        value: function apply(_view, designedResolution) {
          var frameW = _view._frameSize.width;
          var frameH = _view._frameSize.height;
          var containerStyle = cc.game.container.style;
          var designW = designedResolution.width;
          var designH = designedResolution.height;
          var scaleX = frameW / designW;
          var scaleY = frameH / designH;
          var containerW;
          var containerH;
          scaleX < scaleY ? (containerW = frameW, containerH = designH * scaleX) : (containerW = designW * scaleY, containerH = frameH); // Adjust container size with integer value

          var offx = Math.round((frameW - containerW) / 2);
          var offy = Math.round((frameH - containerH) / 2);
          containerW = frameW - 2 * offx;
          containerH = frameH - 2 * offy;

          this._setupContainer(_view, containerW, containerH);

          if (!_defaultConstants.EDITOR) {
            // Setup container's margin and padding
            if (_view._isRotated) {
              containerStyle.margin = '0 0 0 ' + frameH + 'px';
            } else {
              containerStyle.margin = '0px';
            }

            containerStyle.paddingLeft = offx + 'px';
            containerStyle.paddingRight = offx + 'px';
            containerStyle.paddingTop = offy + 'px';
            containerStyle.paddingBottom = offy + 'px';
          }
        }
      }]);

      return ProportionalToFrame;
    }(ContainerStrategy); // need to adapt prototype before instantiating
    // @ts-ignore


    var _global = typeof window === 'undefined' ? global : window;

    var globalAdapter = _global.__globalAdapter;

    if (globalAdapter) {
      if (globalAdapter.adaptContainerStrategy) {
        globalAdapter.adaptContainerStrategy(ContainerStrategy.prototype);
      }

      if (globalAdapter.adaptView) {
        globalAdapter.adaptView(View.prototype);
      }
    } // Alias: Strategy that makes the container's size equals to the frame's size


    ContainerStrategy.EQUAL_TO_FRAME = new EqualToFrame(); // Alias: Strategy that scale proportionally the container's size to frame's size

    ContainerStrategy.PROPORTION_TO_FRAME = new ProportionalToFrame(); // Content scale strategys

    var ExactFit = /*#__PURE__*/function (_ContentStrategy) {
      _inherits(ExactFit, _ContentStrategy);

      function ExactFit() {
        var _getPrototypeOf4;

        var _this4;

        _classCallCheck(this, ExactFit);

        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        _this4 = _possibleConstructorReturn(this, (_getPrototypeOf4 = _getPrototypeOf(ExactFit)).call.apply(_getPrototypeOf4, [this].concat(args)));
        _this4.name = 'ExactFit';
        return _this4;
      }

      _createClass(ExactFit, [{
        key: "apply",
        value: function apply(_view, designedResolution) {
          var containerW = cc.game.canvas.width;
          var containerH = cc.game.canvas.height;
          var scaleX = containerW / designedResolution.width;
          var scaleY = containerH / designedResolution.height;
          return this._buildResult(containerW, containerH, containerW, containerH, scaleX, scaleY);
        }
      }]);

      return ExactFit;
    }(ContentStrategy);

    var ShowAll = /*#__PURE__*/function (_ContentStrategy2) {
      _inherits(ShowAll, _ContentStrategy2);

      function ShowAll() {
        var _getPrototypeOf5;

        var _this5;

        _classCallCheck(this, ShowAll);

        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }

        _this5 = _possibleConstructorReturn(this, (_getPrototypeOf5 = _getPrototypeOf(ShowAll)).call.apply(_getPrototypeOf5, [this].concat(args)));
        _this5.name = 'ShowAll';
        return _this5;
      }

      _createClass(ShowAll, [{
        key: "apply",
        value: function apply(_view, designedResolution) {
          var containerW = cc.game.canvas.width;
          var containerH = cc.game.canvas.height;
          var designW = designedResolution.width;
          var designH = designedResolution.height;
          var scaleX = containerW / designW;
          var scaleY = containerH / designH;
          var scale = 0;
          var contentW;
          var contentH;
          scaleX < scaleY ? (scale = scaleX, contentW = containerW, contentH = designH * scale) : (scale = scaleY, contentW = designW * scale, contentH = containerH);
          return this._buildResult(containerW, containerH, contentW, contentH, scale, scale);
        }
      }]);

      return ShowAll;
    }(ContentStrategy);

    var NoBorder = /*#__PURE__*/function (_ContentStrategy3) {
      _inherits(NoBorder, _ContentStrategy3);

      function NoBorder() {
        var _getPrototypeOf6;

        var _this6;

        _classCallCheck(this, NoBorder);

        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          args[_key5] = arguments[_key5];
        }

        _this6 = _possibleConstructorReturn(this, (_getPrototypeOf6 = _getPrototypeOf(NoBorder)).call.apply(_getPrototypeOf6, [this].concat(args)));
        _this6.name = 'NoBorder';
        return _this6;
      }

      _createClass(NoBorder, [{
        key: "apply",
        value: function apply(_view, designedResolution) {
          var containerW = cc.game.canvas.width;
          var containerH = cc.game.canvas.height;
          var designW = designedResolution.width;
          var designH = designedResolution.height;
          var scaleX = containerW / designW;
          var scaleY = containerH / designH;
          var scale;
          var contentW;
          var contentH;
          scaleX < scaleY ? (scale = scaleY, contentW = designW * scale, contentH = containerH) : (scale = scaleX, contentW = containerW, contentH = designH * scale);
          return this._buildResult(containerW, containerH, contentW, contentH, scale, scale);
        }
      }]);

      return NoBorder;
    }(ContentStrategy);

    var FixedHeight = /*#__PURE__*/function (_ContentStrategy4) {
      _inherits(FixedHeight, _ContentStrategy4);

      function FixedHeight() {
        var _getPrototypeOf7;

        var _this7;

        _classCallCheck(this, FixedHeight);

        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
          args[_key6] = arguments[_key6];
        }

        _this7 = _possibleConstructorReturn(this, (_getPrototypeOf7 = _getPrototypeOf(FixedHeight)).call.apply(_getPrototypeOf7, [this].concat(args)));
        _this7.name = 'FixedHeight';
        return _this7;
      }

      _createClass(FixedHeight, [{
        key: "apply",
        value: function apply(_view, designedResolution) {
          var containerW = cc.game.canvas.width;
          var containerH = cc.game.canvas.height;
          var designH = designedResolution.height;
          var scale = containerH / designH;
          var contentW = containerW;
          var contentH = containerH;
          return this._buildResult(containerW, containerH, contentW, contentH, scale, scale);
        }
      }]);

      return FixedHeight;
    }(ContentStrategy);

    var FixedWidth = /*#__PURE__*/function (_ContentStrategy5) {
      _inherits(FixedWidth, _ContentStrategy5);

      function FixedWidth() {
        var _getPrototypeOf8;

        var _this8;

        _classCallCheck(this, FixedWidth);

        for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
          args[_key7] = arguments[_key7];
        }

        _this8 = _possibleConstructorReturn(this, (_getPrototypeOf8 = _getPrototypeOf(FixedWidth)).call.apply(_getPrototypeOf8, [this].concat(args)));
        _this8.name = 'FixedWidth';
        return _this8;
      }

      _createClass(FixedWidth, [{
        key: "apply",
        value: function apply(_view, designedResolution) {
          var containerW = cc.game.canvas.width;
          var containerH = cc.game.canvas.height;
          var designW = designedResolution.width;
          var scale = containerW / designW;
          var contentW = containerW;
          var contentH = containerH;
          return this._buildResult(containerW, containerH, contentW, contentH, scale, scale);
        }
      }]);

      return FixedWidth;
    }(ContentStrategy); // Alias: Strategy to scale the content's size to container's size, non proportional


    ContentStrategy.EXACT_FIT = new ExactFit(); // Alias: Strategy to scale the content's size proportionally to maximum size and keeps the whole content area to be visible

    ContentStrategy.SHOW_ALL = new ShowAll(); // Alias: Strategy to scale the content's size proportionally to fill the whole container area

    ContentStrategy.NO_BORDER = new NoBorder(); // Alias: Strategy to scale the content's height to container's height and proportionally scale its width

    ContentStrategy.FIXED_HEIGHT = new FixedHeight(); // Alias: Strategy to scale the content's width to container's width and proportionally scale its height

    ContentStrategy.FIXED_WIDTH = new FixedWidth();
  })();
  /**
   * ResolutionPolicy class is the root strategy class of scale strategy,
   * its main task is to maintain the compatibility with Cocos2d-x</p>
   */


  var ResolutionPolicy = /*#__PURE__*/function () {
    /**
     * The entire application is visible in the specified area without trying to preserve the original aspect ratio.<br/>
     * Distortion can occur, and the application may appear stretched or compressed.
     */

    /**
     * The entire application fills the specified area, without distortion but possibly with some cropping,<br/>
     * while maintaining the original aspect ratio of the application.
     */

    /**
     * The entire application is visible in the specified area without distortion while maintaining the original<br/>
     * aspect ratio of the application. Borders can appear on two sides of the application.
     */

    /**
     * The application takes the height of the design resolution size and modifies the width of the internal<br/>
     * canvas so that it fits the aspect ratio of the device<br/>
     * no distortion will occur however you must make sure your application works on different<br/>
     * aspect ratios
     */

    /**
     * The application takes the width of the design resolution size and modifies the height of the internal<br/>
     * canvas so that it fits the aspect ratio of the device<br/>
     * no distortion will occur however you must make sure your application works on different<br/>
     * aspect ratios
     */

    /**
     * Unknown policy
     */

    /**
     * Constructor of ResolutionPolicy
     * @param containerStg
     * @param contentStg
     */
    function ResolutionPolicy(containerStg, contentStg) {
      _classCallCheck(this, ResolutionPolicy);

      this.name = 'ResolutionPolicy';
      this._containerStrategy = void 0;
      this._contentStrategy = void 0;
      this._containerStrategy = null;
      this._contentStrategy = null;
      this.setContainerStrategy(containerStg);
      this.setContentStrategy(contentStg);
    }

    _createClass(ResolutionPolicy, [{
      key: "preApply",

      /**
       * @en Manipulation before applying the resolution policy
       * @zh 策略应用前的操作
       * @param _view The target view
       */
      value: function preApply(_view) {
        this._containerStrategy.preApply(_view);

        this._contentStrategy.preApply(_view);
      }
      /**
       * @en Function to apply this resolution policy
       * The return value is {scale: [scaleX, scaleY], viewport: {new Rect}},
       * The target view can then apply these value to itself, it's preferred not to modify directly its private variables
       * @zh 调用策略方法
       * @param _view - The target view
       * @param designedResolution - The user defined design resolution
       * @return An object contains the scale X/Y values and the viewport rect
       */

    }, {
      key: "apply",
      value: function apply(_view, designedResolution) {
        this._containerStrategy.apply(_view, designedResolution);

        return this._contentStrategy.apply(_view, designedResolution);
      }
      /**
       * @en Manipulation after appyling the strategy
       * @zh 策略应用之后的操作
       * @param _view - The target view
       */

    }, {
      key: "postApply",
      value: function postApply(_view) {
        this._containerStrategy.postApply(_view);

        this._contentStrategy.postApply(_view);
      }
      /**
       * @en Setup the container's scale strategy
       * @zh 设置容器的适配策略
       * @param containerStg The container strategy
       */

    }, {
      key: "setContainerStrategy",
      value: function setContainerStrategy(containerStg) {
        if (containerStg instanceof ContainerStrategy) {
          this._containerStrategy = containerStg;
        }
      }
      /**
       * @en Setup the content's scale strategy
       * @zh 设置内容的适配策略
       * @param contentStg The content strategy
       */

    }, {
      key: "setContentStrategy",
      value: function setContentStrategy(contentStg) {
        if (contentStg instanceof ContentStrategy) {
          this._contentStrategy = contentStg;
        }
      }
    }, {
      key: "canvasSize",
      get: function get() {
        return cc.v2(cc.game.canvas.width, cc.game.canvas.height);
      }
    }]);

    return ResolutionPolicy;
  }();

  _exports.ResolutionPolicy = ResolutionPolicy;
  ResolutionPolicy.EXACT_FIT = 0;
  ResolutionPolicy.NO_BORDER = 1;
  ResolutionPolicy.SHOW_ALL = 2;
  ResolutionPolicy.FIXED_HEIGHT = 3;
  ResolutionPolicy.FIXED_WIDTH = 4;
  ResolutionPolicy.UNKNOWN = 5;
  ResolutionPolicy.ContainerStrategy = ContainerStrategy;
  ResolutionPolicy.ContentStrategy = ContentStrategy;
  cc.ResolutionPolicy = ResolutionPolicy;
  /**
   * @en view is the singleton view object.
   * @zh view 是全局的视图单例对象。
   */

  var view = View.instance = cc.view = new View();
  /**
   * @en winSize is the alias object for the size of the current game window.
   * @zh winSize 为当前的游戏窗口的大小。
   */

  _exports.view = view;
  cc.winSize = new _index.Vec2();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,