(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../data/class-decorator.js", "../gfx/device.js", "./asset.js", "./asset-enum.js", "../default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../data/class-decorator.js"), require("../gfx/device.js"), require("./asset.js"), require("./asset-enum.js"), require("../default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.classDecorator, global.device, global.asset, global.assetEnum, global.defaultConstants);
    global.imageAsset = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _classDecorator, _device, _asset, _assetEnum, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ImageAsset = void 0;

  var _dec, _dec2, _class, _class2, _class3, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function fetchImageSource(imageSource) {
    return '_data' in imageSource ? imageSource._data : imageSource;
  }
  /**
   * 图像资源。
   */


  var ImageAsset = (_dec = (0, _classDecorator.ccclass)('cc.ImageAsset'), _dec2 = (0, _classDecorator.property)({
    override: true
  }), _dec(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Asset) {
    _inherits(ImageAsset, _Asset);

    _createClass(ImageAsset, [{
      key: "_nativeAsset",
      get: function get() {
        // Maybe returned to pool in webgl.
        return this._nativeData;
      },
      set: function set(value) {
        if (!(value instanceof HTMLElement)) {
          value.format = this._format;
        }

        this.reset(value);
      }
      /**
       * 此图像资源的图像数据。
       */

    }, {
      key: "data",
      get: function get() {
        var data = this._nativeData && this._nativeData._data;
        return ArrayBuffer.isView(data) ? data : this._nativeData;
      }
      /**
       * 此图像资源的像素宽度。
       */

    }, {
      key: "width",
      get: function get() {
        return this._nativeData.width || this._width;
      }
      /**
       * 此图像资源的像素高度。
       */

    }, {
      key: "height",
      get: function get() {
        return this._nativeData.height || this._height;
      }
      /**
       * 此图像资源的像素格式。
       */

    }, {
      key: "format",
      get: function get() {
        return this._format;
      }
      /**
       * 此图像资源是否为压缩像素格式。
       */

    }, {
      key: "isCompressed",
      get: function get() {
        return this._format >= _assetEnum.PixelFormat.RGB_ETC1 && this._format <= _assetEnum.PixelFormat.RGBA_PVRTC_4BPPV1;
      }
      /**
       * 此图像资源的原始图像源的 URL。当原始图像元不是 HTML 文件时可能为空。
       * @deprecated 请转用 `this.nativeUrl`。
       */

    }, {
      key: "url",
      get: function get() {
        return this._url;
      }
    }, {
      key: "_texture",
      set: function set(tex) {
        this._tex = tex;
      },
      get: function get() {
        if (!this._tex) {
          var tex = new cc.Texture2D();
          tex.name = this._url;
          tex.image = this;
          this._tex = tex;
        }

        return this._tex;
      }
    }]);

    /**
     * @param nativeAsset
     */
    function ImageAsset(nativeAsset) {
      var _this;

      _classCallCheck(this, ImageAsset);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(ImageAsset).call(this));
      _this._nativeData = void 0;
      _this._tex = void 0;
      _this._url = void 0;
      _this._exportedExts = undefined;
      _this._format = _assetEnum.PixelFormat.RGBA8888;
      _this._width = 0;
      _this._height = 0;
      _this._url = '';
      _this.loaded = false;
      _this._nativeData = {
        _data: null,
        width: 0,
        height: 0,
        format: 0,
        _compressed: false
      };

      if (_defaultConstants.EDITOR) {
        _this._exportedExts = null;
      }

      if (nativeAsset !== undefined) {
        _this.reset(nativeAsset);
      }

      return _this;
    }
    /**
     * 重置此图像资源使用的原始图像源。
     * @param data 新的原始图像源。
     */


    _createClass(ImageAsset, [{
      key: "reset",
      value: function reset(data) {
        var _this2 = this;

        if (!(data instanceof HTMLElement)) {
          // this._nativeData = Object.create(data);
          this._nativeData = data;
          this._format = data.format;

          this._onDataComplete();
        } else {
          this._nativeData = data;

          if (_defaultConstants.MINIGAME || data.complete || data instanceof HTMLCanvasElement) {
            // todo need adatper
            this._onDataComplete();
          } else {
            this.loaded = false;
            data.addEventListener('load', function () {
              _this2._onDataComplete();
            });
            data.addEventListener('error', function (err) {
              cc.warnID(3119, err.message);
            });
          }
        }
      }
    }, {
      key: "destroy",
      value: function destroy() {
        if (this.data && this.data instanceof HTMLImageElement) {
          this.data.src = "";

          this._setRawAsset("");

          cc.loader.removeItem(this.data.id);
        }

        return _get(_getPrototypeOf(ImageAsset.prototype), "destroy", this).call(this);
      } // SERIALIZATION

    }, {
      key: "_serialize",
      value: function _serialize() {
        var targetExtensions = this._exportedExts;

        if (!targetExtensions && this._native) {
          targetExtensions = [this._native];
        }

        if (!targetExtensions) {
          return '';
        }

        var extensionIndices = [];

        var _iterator = _createForOfIteratorHelper(targetExtensions),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var targetExtension = _step.value;
            var extensionFormat = targetExtension.split('@');
            var i = ImageAsset.extnames.indexOf(extensionFormat[0]);
            var exportedExtensionID = i < 0 ? targetExtension : "".concat(i);

            if (extensionFormat[1]) {
              exportedExtensionID += '@' + extensionFormat[1];
            }

            extensionIndices.push(exportedExtensionID);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return {
          fmt: extensionIndices.join('_'),
          w: this.width,
          h: this.height
        };
      }
    }, {
      key: "_deserialize",
      value: function _deserialize(data, handle) {
        var fmtStr = '';

        if (typeof data === 'string') {
          fmtStr = data;
        } else {
          this._width = data.w;
          this._height = data.h;
          fmtStr = data.fmt;
        }

        var device = _getGlobalDevice();

        var extensionIDs = fmtStr.split('_');
        var preferedExtensionIndex = Number.MAX_VALUE;
        var format = this._format;
        var ext = '';
        var SupportTextureFormats = cc.macro.SUPPORT_TEXTURE_FORMATS;

        var _iterator2 = _createForOfIteratorHelper(extensionIDs),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var extensionID = _step2.value;
            var extFormat = extensionID.split('@');
            var i = parseInt(extFormat[0], undefined);
            var tmpExt = ImageAsset.extnames[i] || extFormat.join();
            var index = SupportTextureFormats.indexOf(tmpExt);

            if (index !== -1 && index < preferedExtensionIndex) {
              var fmt = extFormat[1] ? parseInt(extFormat[1]) : this._format; // check whether or not support compressed texture

              if (tmpExt === '.pvr' && (!device || !device.hasFeature(_device.GFXFeature.FORMAT_PVRTC))) {
                continue;
              } else if (fmt === _assetEnum.PixelFormat.RGB_ETC1 && (!device || !device.hasFeature(_device.GFXFeature.FORMAT_ETC1))) {
                continue;
              } else if ((fmt === _assetEnum.PixelFormat.RGB_ETC2 || fmt === _assetEnum.PixelFormat.RGBA_ETC2) && (!device || !device.hasFeature(_device.GFXFeature.FORMAT_ETC2))) {
                continue;
              } else if (tmpExt === '.webp' && !cc.sys.capabilities.webp) {
                continue;
              }

              preferedExtensionIndex = index;
              ext = tmpExt;
              format = fmt;
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        if (ext) {
          this._setRawAsset(ext);

          this._format = format;
        } // preset uuid to get correct nativeUrl


        var loadingItem = handle.customEnv;
        var uuid = loadingItem && loadingItem.uuid;

        if (uuid) {
          this._uuid = uuid;
          this._url = this.nativeUrl;
        }
      }
    }, {
      key: "_onDataComplete",
      value: function _onDataComplete() {
        this.loaded = true;
        this.emit('load');
      }
    }]);

    return ImageAsset;
  }(_asset.Asset), _class3.extnames = ['.png', '.jpg', '.jpeg', '.bmp', '.webp', '.pvr', '.pkm'], _temp), (_applyDecoratedDescriptor(_class2.prototype, "_nativeAsset", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "_nativeAsset"), _class2.prototype)), _class2)) || _class);
  _exports.ImageAsset = ImageAsset;

  function _getGlobalDevice() {
    if (cc.director.root) {
      return cc.director.root.device;
    } else {
      return null;
    }
  }
  /**
   * @zh
   * 当该资源加载成功后触发该事件。
   * @en
   * This event is emitted when the asset is loaded
   *
   * @event loads
   */


  cc.ImageAsset = ImageAsset;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,