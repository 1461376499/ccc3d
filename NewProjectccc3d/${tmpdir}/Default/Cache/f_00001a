(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../memop/cached-array.js", "../../platform/debug.js", "../define.js", "./webgl-define.js", "../../default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../memop/cached-array.js"), require("../../platform/debug.js"), require("../define.js"), require("./webgl-define.js"), require("../../default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.cachedArray, global.debug, global.define, global.webglDefine, global.defaultConstants);
    global.webglCommands = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _cachedArray, _debug, _define, _webglDefine, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.GFXFormatToWebGLType = GFXFormatToWebGLType;
  _exports.GFXFormatToWebGLInternalFormat = GFXFormatToWebGLInternalFormat;
  _exports.GFXFormatToWebGLFormat = GFXFormatToWebGLFormat;
  _exports.WebGLCmdFuncCreateBuffer = WebGLCmdFuncCreateBuffer;
  _exports.WebGLCmdFuncDestroyBuffer = WebGLCmdFuncDestroyBuffer;
  _exports.WebGLCmdFuncResizeBuffer = WebGLCmdFuncResizeBuffer;
  _exports.WebGLCmdFuncUpdateBuffer = WebGLCmdFuncUpdateBuffer;
  _exports.WebGLCmdFuncCreateTexture = WebGLCmdFuncCreateTexture;
  _exports.WebGLCmdFuncDestroyTexture = WebGLCmdFuncDestroyTexture;
  _exports.WebGLCmdFuncResizeTexture = WebGLCmdFuncResizeTexture;
  _exports.WebGLCmdFuncCreateFramebuffer = WebGLCmdFuncCreateFramebuffer;
  _exports.WebGLCmdFuncDestroyFramebuffer = WebGLCmdFuncDestroyFramebuffer;
  _exports.WebGLCmdFuncCreateShader = WebGLCmdFuncCreateShader;
  _exports.WebGLCmdFuncDestroyShader = WebGLCmdFuncDestroyShader;
  _exports.WebGLCmdFuncCreateInputAssember = WebGLCmdFuncCreateInputAssember;
  _exports.WebGLCmdFuncDestroyInputAssembler = WebGLCmdFuncDestroyInputAssembler;
  _exports.WebGLCmdFuncBeginRenderPass = WebGLCmdFuncBeginRenderPass;
  _exports.WebGLCmdFuncBindStates = WebGLCmdFuncBindStates;
  _exports.WebGLCmdFuncDraw = WebGLCmdFuncDraw;
  _exports.WebGLCmdFuncExecuteCmds = WebGLCmdFuncExecuteCmds;
  _exports.WebGLCmdFuncCopyTexImagesToTexture = WebGLCmdFuncCopyTexImagesToTexture;
  _exports.WebGLCmdFuncCopyBuffersToTexture = WebGLCmdFuncCopyBuffersToTexture;
  _exports.WebGLCmdPackage = _exports.WebGLCmdCopyBufferToTexture = _exports.WebGLGFXBufferTextureCopy = _exports.WebGLGFXTextureSubres = _exports.WebGLCmdUpdateBuffer = _exports.WebGLCmdDraw = _exports.WebGLCmdBindStates = _exports.WebGLCmdBeginRenderPass = _exports.WebGLCmdObject = _exports.WebGLCmd = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function CmpF32NotEuqal(a, b) {
    var c = a - b;
    return c > 0.000001 || c < -0.000001;
  }

  function GFXFormatToWebGLType(format, gl) {
    switch (format) {
      case _define.GFXFormat.R8:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.R8SN:
        return gl.BYTE;

      case _define.GFXFormat.R8UI:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.R8I:
        return gl.BYTE;

      case _define.GFXFormat.R16F:
        return _webglDefine.WebGLEXT.HALF_FLOAT_OES;

      case _define.GFXFormat.R16UI:
        return gl.UNSIGNED_SHORT;

      case _define.GFXFormat.R16I:
        return gl.SHORT;

      case _define.GFXFormat.R32F:
        return gl.FLOAT;

      case _define.GFXFormat.R32UI:
        return gl.UNSIGNED_INT;

      case _define.GFXFormat.R32I:
        return gl.INT;

      case _define.GFXFormat.RG8:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.RG8SN:
        return gl.BYTE;

      case _define.GFXFormat.RG8UI:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.RG8I:
        return gl.BYTE;

      case _define.GFXFormat.RG16F:
        return _webglDefine.WebGLEXT.HALF_FLOAT_OES;

      case _define.GFXFormat.RG16UI:
        return gl.UNSIGNED_SHORT;

      case _define.GFXFormat.RG16I:
        return gl.SHORT;

      case _define.GFXFormat.RG32F:
        return gl.FLOAT;

      case _define.GFXFormat.RG32UI:
        return gl.UNSIGNED_INT;

      case _define.GFXFormat.RG32I:
        return gl.INT;

      case _define.GFXFormat.RGB8:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.SRGB8:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.RGB8SN:
        return gl.BYTE;

      case _define.GFXFormat.RGB8UI:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.RGB8I:
        return gl.BYTE;

      case _define.GFXFormat.RGB16F:
        return _webglDefine.WebGLEXT.HALF_FLOAT_OES;

      case _define.GFXFormat.RGB16UI:
        return gl.UNSIGNED_SHORT;

      case _define.GFXFormat.RGB16I:
        return gl.SHORT;

      case _define.GFXFormat.RGB32F:
        return gl.FLOAT;

      case _define.GFXFormat.RGB32UI:
        return gl.UNSIGNED_INT;

      case _define.GFXFormat.RGB32I:
        return gl.INT;

      case _define.GFXFormat.RGBA8:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.SRGB8_A8:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.RGBA8SN:
        return gl.BYTE;

      case _define.GFXFormat.RGBA8UI:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.RGBA8I:
        return gl.BYTE;

      case _define.GFXFormat.RGBA16F:
        return _webglDefine.WebGLEXT.HALF_FLOAT_OES;

      case _define.GFXFormat.RGBA16UI:
        return gl.UNSIGNED_SHORT;

      case _define.GFXFormat.RGBA16I:
        return gl.SHORT;

      case _define.GFXFormat.RGBA32F:
        return gl.FLOAT;

      case _define.GFXFormat.RGBA32UI:
        return gl.UNSIGNED_INT;

      case _define.GFXFormat.RGBA32I:
        return gl.INT;

      case _define.GFXFormat.R5G6B5:
        return gl.UNSIGNED_SHORT_5_6_5;

      case _define.GFXFormat.R11G11B10F:
        return gl.FLOAT;

      case _define.GFXFormat.RGB5A1:
        return gl.UNSIGNED_SHORT_5_5_5_1;

      case _define.GFXFormat.RGBA4:
        return gl.UNSIGNED_SHORT_4_4_4_4;

      case _define.GFXFormat.RGB10A2:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.RGB10A2UI:
        return gl.UNSIGNED_INT;

      case _define.GFXFormat.RGB9E5:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.D16:
        return gl.UNSIGNED_SHORT;

      case _define.GFXFormat.D16S8:
        return _webglDefine.WebGLEXT.UNSIGNED_INT_24_8_WEBGL;
      // no D16S8 support

      case _define.GFXFormat.D24:
        return gl.UNSIGNED_INT;

      case _define.GFXFormat.D24S8:
        return _webglDefine.WebGLEXT.UNSIGNED_INT_24_8_WEBGL;

      case _define.GFXFormat.D32F:
        return gl.FLOAT;

      case _define.GFXFormat.D32F_S8:
        return _webglDefine.WebGLEXT.UNSIGNED_INT_24_8_WEBGL;
      // no D32FS8 support

      case _define.GFXFormat.BC1:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.BC1_SRGB:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.BC2:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.BC2_SRGB:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.BC3:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.BC3_SRGB:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.BC4:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.BC4_SNORM:
        return gl.BYTE;

      case _define.GFXFormat.BC5:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.BC5_SNORM:
        return gl.BYTE;

      case _define.GFXFormat.BC6H_SF16:
        return gl.FLOAT;

      case _define.GFXFormat.BC6H_UF16:
        return gl.FLOAT;

      case _define.GFXFormat.BC7:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.BC7_SRGB:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.ETC_RGB8:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.ETC2_RGB8:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.ETC2_SRGB8:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.ETC2_RGB8_A1:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.ETC2_SRGB8_A1:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.ETC2_RGB8:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.ETC2_SRGB8:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.EAC_R11:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.EAC_R11SN:
        return gl.BYTE;

      case _define.GFXFormat.EAC_RG11:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.EAC_RG11SN:
        return gl.BYTE;

      case _define.GFXFormat.PVRTC_RGB2:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.PVRTC_RGBA2:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.PVRTC_RGB4:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.PVRTC_RGBA4:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.PVRTC2_2BPP:
        return gl.UNSIGNED_BYTE;

      case _define.GFXFormat.PVRTC2_4BPP:
        return gl.UNSIGNED_BYTE;

      default:
        {
          return gl.UNSIGNED_BYTE;
        }
    }
  }

  function GFXFormatToWebGLInternalFormat(format, gl) {
    switch (format) {
      case _define.GFXFormat.A8:
        return gl.ALPHA;

      case _define.GFXFormat.L8:
        return gl.LUMINANCE;

      case _define.GFXFormat.LA8:
        return gl.LUMINANCE_ALPHA;

      case _define.GFXFormat.RGB8:
        return gl.RGB;

      case _define.GFXFormat.RGB16F:
        return gl.RGB;

      case _define.GFXFormat.RGB32F:
        return gl.RGB;

      case _define.GFXFormat.RGBA8:
        return gl.RGBA;

      case _define.GFXFormat.RGBA16F:
        return gl.RGBA;

      case _define.GFXFormat.RGBA32F:
        return gl.RGBA;

      case _define.GFXFormat.R5G6B5:
        return gl.RGB565;

      case _define.GFXFormat.RGB5A1:
        return gl.RGB5_A1;

      case _define.GFXFormat.RGBA4:
        return gl.RGBA4;

      case _define.GFXFormat.D16:
        return gl.DEPTH_COMPONENT;

      case _define.GFXFormat.D16S8:
        return gl.DEPTH_STENCIL;

      case _define.GFXFormat.D24:
        return gl.DEPTH_COMPONENT;

      case _define.GFXFormat.D24S8:
        return gl.DEPTH_STENCIL;

      case _define.GFXFormat.D32F:
        return gl.DEPTH_COMPONENT;

      case _define.GFXFormat.D32F_S8:
        return gl.DEPTH_STENCIL;

      case _define.GFXFormat.BC1:
        return _webglDefine.WebGLEXT.COMPRESSED_RGB_S3TC_DXT1_EXT;

      case _define.GFXFormat.BC1_ALPHA:
        return _webglDefine.WebGLEXT.COMPRESSED_RGBA_S3TC_DXT1_EXT;

      case _define.GFXFormat.BC1_SRGB:
        return _webglDefine.WebGLEXT.COMPRESSED_SRGB_S3TC_DXT1_EXT;

      case _define.GFXFormat.BC1_SRGB_ALPHA:
        return _webglDefine.WebGLEXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;

      case _define.GFXFormat.BC2:
        return _webglDefine.WebGLEXT.COMPRESSED_RGBA_S3TC_DXT3_EXT;

      case _define.GFXFormat.BC2_SRGB:
        return _webglDefine.WebGLEXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;

      case _define.GFXFormat.BC3:
        return _webglDefine.WebGLEXT.COMPRESSED_RGBA_S3TC_DXT5_EXT;

      case _define.GFXFormat.BC3_SRGB:
        return _webglDefine.WebGLEXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;

      case _define.GFXFormat.ETC_RGB8:
        return _webglDefine.WebGLEXT.COMPRESSED_RGB_ETC1_WEBGL;

      case _define.GFXFormat.ETC2_RGB8:
        return _webglDefine.WebGLEXT.COMPRESSED_RGB8_ETC2;

      case _define.GFXFormat.ETC2_SRGB8:
        return _webglDefine.WebGLEXT.COMPRESSED_SRGB8_ETC2;

      case _define.GFXFormat.ETC2_RGB8_A1:
        return _webglDefine.WebGLEXT.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;

      case _define.GFXFormat.ETC2_SRGB8_A1:
        return _webglDefine.WebGLEXT.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2;

      case _define.GFXFormat.ETC2_RGBA8:
        return _webglDefine.WebGLEXT.COMPRESSED_RGBA8_ETC2_EAC;

      case _define.GFXFormat.ETC2_SRGB8_A8:
        return _webglDefine.WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;

      case _define.GFXFormat.EAC_R11:
        return _webglDefine.WebGLEXT.COMPRESSED_R11_EAC;

      case _define.GFXFormat.EAC_R11SN:
        return _webglDefine.WebGLEXT.COMPRESSED_SIGNED_R11_EAC;

      case _define.GFXFormat.EAC_RG11:
        return _webglDefine.WebGLEXT.COMPRESSED_RG11_EAC;

      case _define.GFXFormat.EAC_RG11SN:
        return _webglDefine.WebGLEXT.COMPRESSED_SIGNED_RG11_EAC;

      case _define.GFXFormat.PVRTC_RGB2:
        return _webglDefine.WebGLEXT.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;

      case _define.GFXFormat.PVRTC_RGBA2:
        return _webglDefine.WebGLEXT.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

      case _define.GFXFormat.PVRTC_RGB4:
        return _webglDefine.WebGLEXT.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;

      case _define.GFXFormat.PVRTC_RGBA4:
        return _webglDefine.WebGLEXT.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;

      default:
        {
          console.error('Unsupported GFXFormat, convert to WebGL internal format failed.');
          return gl.RGBA;
        }
    }
  }

  function GFXFormatToWebGLFormat(format, gl) {
    switch (format) {
      case _define.GFXFormat.A8:
        return gl.ALPHA;

      case _define.GFXFormat.L8:
        return gl.LUMINANCE;

      case _define.GFXFormat.LA8:
        return gl.LUMINANCE_ALPHA;

      case _define.GFXFormat.RGB8:
        return gl.RGB;

      case _define.GFXFormat.RGB16F:
        return gl.RGB;

      case _define.GFXFormat.RGB32F:
        return gl.RGB;

      case _define.GFXFormat.RGBA8:
        return gl.RGBA;

      case _define.GFXFormat.RGBA16F:
        return gl.RGBA;

      case _define.GFXFormat.RGBA32F:
        return gl.RGBA;

      case _define.GFXFormat.R5G6B5:
        return gl.RGB;

      case _define.GFXFormat.RGB5A1:
        return gl.RGBA;

      case _define.GFXFormat.RGBA4:
        return gl.RGBA;

      case _define.GFXFormat.D16:
        return gl.DEPTH_COMPONENT;

      case _define.GFXFormat.D16S8:
        return gl.DEPTH_STENCIL;

      case _define.GFXFormat.D24:
        return gl.DEPTH_COMPONENT;

      case _define.GFXFormat.D24S8:
        return gl.DEPTH_STENCIL;

      case _define.GFXFormat.D32F:
        return gl.DEPTH_COMPONENT;

      case _define.GFXFormat.D32F_S8:
        return gl.DEPTH_STENCIL;

      case _define.GFXFormat.BC1:
        return _webglDefine.WebGLEXT.COMPRESSED_RGB_S3TC_DXT1_EXT;

      case _define.GFXFormat.BC1_ALPHA:
        return _webglDefine.WebGLEXT.COMPRESSED_RGBA_S3TC_DXT1_EXT;

      case _define.GFXFormat.BC1_SRGB:
        return _webglDefine.WebGLEXT.COMPRESSED_SRGB_S3TC_DXT1_EXT;

      case _define.GFXFormat.BC1_SRGB_ALPHA:
        return _webglDefine.WebGLEXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;

      case _define.GFXFormat.BC2:
        return _webglDefine.WebGLEXT.COMPRESSED_RGBA_S3TC_DXT3_EXT;

      case _define.GFXFormat.BC2_SRGB:
        return _webglDefine.WebGLEXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;

      case _define.GFXFormat.BC3:
        return _webglDefine.WebGLEXT.COMPRESSED_RGBA_S3TC_DXT5_EXT;

      case _define.GFXFormat.BC3_SRGB:
        return _webglDefine.WebGLEXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;

      case _define.GFXFormat.ETC_RGB8:
        return _webglDefine.WebGLEXT.COMPRESSED_RGB_ETC1_WEBGL;

      case _define.GFXFormat.ETC2_RGB8:
        return _webglDefine.WebGLEXT.COMPRESSED_RGB8_ETC2;

      case _define.GFXFormat.ETC2_SRGB8:
        return _webglDefine.WebGLEXT.COMPRESSED_SRGB8_ETC2;

      case _define.GFXFormat.ETC2_RGB8_A1:
        return _webglDefine.WebGLEXT.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;

      case _define.GFXFormat.ETC2_SRGB8_A1:
        return _webglDefine.WebGLEXT.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2;

      case _define.GFXFormat.ETC2_RGBA8:
        return _webglDefine.WebGLEXT.COMPRESSED_RGBA8_ETC2_EAC;

      case _define.GFXFormat.ETC2_SRGB8_A8:
        return _webglDefine.WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;

      case _define.GFXFormat.EAC_R11:
        return _webglDefine.WebGLEXT.COMPRESSED_R11_EAC;

      case _define.GFXFormat.EAC_R11SN:
        return _webglDefine.WebGLEXT.COMPRESSED_SIGNED_R11_EAC;

      case _define.GFXFormat.EAC_RG11:
        return _webglDefine.WebGLEXT.COMPRESSED_RG11_EAC;

      case _define.GFXFormat.EAC_RG11SN:
        return _webglDefine.WebGLEXT.COMPRESSED_SIGNED_RG11_EAC;

      case _define.GFXFormat.PVRTC_RGB2:
        return _webglDefine.WebGLEXT.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;

      case _define.GFXFormat.PVRTC_RGBA2:
        return _webglDefine.WebGLEXT.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

      case _define.GFXFormat.PVRTC_RGB4:
        return _webglDefine.WebGLEXT.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;

      case _define.GFXFormat.PVRTC_RGBA4:
        return _webglDefine.WebGLEXT.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;

      default:
        {
          console.error('Unsupported GFXFormat, convert to WebGL format failed.');
          return gl.RGBA;
        }
    }
  }

  function GFXTypeToWebGLType(type, gl) {
    switch (type) {
      case _define.GFXType.BOOL:
        return gl.BOOL;

      case _define.GFXType.BOOL2:
        return gl.BOOL_VEC2;

      case _define.GFXType.BOOL3:
        return gl.BOOL_VEC3;

      case _define.GFXType.BOOL4:
        return gl.BOOL_VEC4;

      case _define.GFXType.INT:
        return gl.INT;

      case _define.GFXType.INT2:
        return gl.INT_VEC2;

      case _define.GFXType.INT3:
        return gl.INT_VEC3;

      case _define.GFXType.INT4:
        return gl.INT_VEC4;

      case _define.GFXType.UINT:
        return gl.UNSIGNED_INT;

      case _define.GFXType.FLOAT:
        return gl.FLOAT;

      case _define.GFXType.FLOAT2:
        return gl.FLOAT_VEC2;

      case _define.GFXType.FLOAT3:
        return gl.FLOAT_VEC3;

      case _define.GFXType.FLOAT4:
        return gl.FLOAT_VEC4;

      case _define.GFXType.MAT2:
        return gl.FLOAT_MAT2;

      case _define.GFXType.MAT3:
        return gl.FLOAT_MAT3;

      case _define.GFXType.MAT4:
        return gl.FLOAT_MAT4;

      case _define.GFXType.SAMPLER2D:
        return gl.SAMPLER_2D;

      case _define.GFXType.SAMPLER_CUBE:
        return gl.SAMPLER_CUBE;

      default:
        {
          console.error('Unsupported GLType, convert to GL type failed.');
          return _define.GFXType.UNKNOWN;
        }
    }
  }

  function WebGLTypeToGFXType(glType, gl) {
    switch (glType) {
      case gl.BOOL:
        return _define.GFXType.BOOL;

      case gl.BOOL_VEC2:
        return _define.GFXType.BOOL2;

      case gl.BOOL_VEC3:
        return _define.GFXType.BOOL3;

      case gl.BOOL_VEC4:
        return _define.GFXType.BOOL4;

      case gl.INT:
        return _define.GFXType.INT;

      case gl.INT_VEC2:
        return _define.GFXType.INT2;

      case gl.INT_VEC3:
        return _define.GFXType.INT3;

      case gl.INT_VEC4:
        return _define.GFXType.INT4;

      case gl.UNSIGNED_INT:
        return _define.GFXType.UINT;

      case gl.FLOAT:
        return _define.GFXType.FLOAT;

      case gl.FLOAT_VEC2:
        return _define.GFXType.FLOAT2;

      case gl.FLOAT_VEC3:
        return _define.GFXType.FLOAT3;

      case gl.FLOAT_VEC4:
        return _define.GFXType.FLOAT4;

      case gl.FLOAT_MAT2:
        return _define.GFXType.MAT2;

      case gl.FLOAT_MAT3:
        return _define.GFXType.MAT3;

      case gl.FLOAT_MAT4:
        return _define.GFXType.MAT4;

      case gl.SAMPLER_2D:
        return _define.GFXType.SAMPLER2D;

      case gl.SAMPLER_CUBE:
        return _define.GFXType.SAMPLER_CUBE;

      default:
        {
          console.error('Unsupported GLType, convert to GFXType failed.');
          return _define.GFXType.UNKNOWN;
        }
    }
  }

  function WebGLGetTypeSize(glType, gl) {
    switch (glType) {
      case gl.BOOL:
        return 4;

      case gl.BOOL_VEC2:
        return 8;

      case gl.BOOL_VEC3:
        return 12;

      case gl.BOOL_VEC4:
        return 16;

      case gl.INT:
        return 4;

      case gl.INT_VEC2:
        return 8;

      case gl.INT_VEC3:
        return 12;

      case gl.INT_VEC4:
        return 16;

      case gl.UNSIGNED_INT:
        return 4;

      case gl.FLOAT:
        return 4;

      case gl.FLOAT_VEC2:
        return 8;

      case gl.FLOAT_VEC3:
        return 12;

      case gl.FLOAT_VEC4:
        return 16;

      case gl.FLOAT_MAT2:
        return 16;

      case gl.FLOAT_MAT3:
        return 36;

      case gl.FLOAT_MAT4:
        return 64;

      case gl.SAMPLER_2D:
        return 4;

      case gl.SAMPLER_CUBE:
        return 4;

      default:
        {
          console.error('Unsupported GLType, get type failed.');
          return 0;
        }
    }
  }

  function WebGLGetComponentCount(glType, gl) {
    switch (glType) {
      case gl.FLOAT_MAT2:
        return 2;

      case gl.FLOAT_MAT3:
        return 3;

      case gl.FLOAT_MAT4:
        return 4;

      default:
        {
          return 1;
        }
    }
  }

  var WebGLCmpFuncs = [0x0200, // WebGLRenderingContext.NEVER,
  0x0201, // WebGLRenderingContext.LESS,
  0x0202, // WebGLRenderingContext.EQUAL,
  0x0203, // WebGLRenderingContext.LEQUAL,
  0x0204, // WebGLRenderingContext.GREATER,
  0x0205, // WebGLRenderingContext.NOTEQUAL,
  0x0206, // WebGLRenderingContext.GEQUAL,
  0x0207 // WebGLRenderingContext.ALWAYS,
  ];
  var WebGLStencilOps = [0x0000, // WebGLRenderingContext.ZERO,
  0x1E00, // WebGLRenderingContext.KEEP,
  0x1E01, // WebGLRenderingContext.REPLACE,
  0x1E02, // WebGLRenderingContext.INCR,
  0x1E03, // WebGLRenderingContext.DECR,
  0x150A, // WebGLRenderingContext.INVERT,
  0x8507, // WebGLRenderingContext.INCR_WRAP,
  0x8508 // WebGLRenderingContext.DECR_WRAP,
  ];
  var WebGLBlendOps = [0x8006, // WebGLRenderingContext.FUNC_ADD,
  0x800A, // WebGLRenderingContext.FUNC_SUBTRACT,
  0x800B, // WebGLRenderingContext.FUNC_REVERSE_SUBTRACT,
  0x8006, // WebGLRenderingContext.FUNC_ADD,
  0x8006 // WebGLRenderingContext.FUNC_ADD,
  ];
  var WebGLBlendFactors = [0x0000, // WebGLRenderingContext.ZERO,
  0x0001, // WebGLRenderingContext.ONE,
  0x0302, // WebGLRenderingContext.SRC_ALPHA,
  0x0304, // WebGLRenderingContext.DST_ALPHA,
  0x0303, // WebGLRenderingContext.ONE_MINUS_SRC_ALPHA,
  0x0305, // WebGLRenderingContext.ONE_MINUS_DST_ALPHA,
  0x0300, // WebGLRenderingContext.SRC_COLOR,
  0x0306, // WebGLRenderingContext.DST_COLOR,
  0x0301, // WebGLRenderingContext.ONE_MINUS_SRC_COLOR,
  0x0307, // WebGLRenderingContext.ONE_MINUS_DST_COLOR,
  0x0308, // WebGLRenderingContext.SRC_ALPHA_SATURATE,
  0x8001, // WebGLRenderingContext.CONSTANT_COLOR,
  0x8002, // WebGLRenderingContext.ONE_MINUS_CONSTANT_COLOR,
  0x8003, // WebGLRenderingContext.CONSTANT_ALPHA,
  0x8004 // WebGLRenderingContext.ONE_MINUS_CONSTANT_ALPHA,
  ];
  var WebGLCmd;
  _exports.WebGLCmd = WebGLCmd;

  (function (WebGLCmd) {
    WebGLCmd[WebGLCmd["BEGIN_RENDER_PASS"] = 0] = "BEGIN_RENDER_PASS";
    WebGLCmd[WebGLCmd["END_RENDER_PASS"] = 1] = "END_RENDER_PASS";
    WebGLCmd[WebGLCmd["BIND_STATES"] = 2] = "BIND_STATES";
    WebGLCmd[WebGLCmd["DRAW"] = 3] = "DRAW";
    WebGLCmd[WebGLCmd["UPDATE_BUFFER"] = 4] = "UPDATE_BUFFER";
    WebGLCmd[WebGLCmd["COPY_BUFFER_TO_TEXTURE"] = 5] = "COPY_BUFFER_TO_TEXTURE";
    WebGLCmd[WebGLCmd["COUNT"] = 6] = "COUNT";
  })(WebGLCmd || (_exports.WebGLCmd = WebGLCmd = {}));

  var WebGLCmdObject = function WebGLCmdObject(type) {
    _classCallCheck(this, WebGLCmdObject);

    this.cmdType = void 0;
    this.refCount = 0;
    this.cmdType = type;
  };

  _exports.WebGLCmdObject = WebGLCmdObject;

  var WebGLCmdBeginRenderPass = /*#__PURE__*/function (_WebGLCmdObject) {
    _inherits(WebGLCmdBeginRenderPass, _WebGLCmdObject);

    function WebGLCmdBeginRenderPass() {
      var _this;

      _classCallCheck(this, WebGLCmdBeginRenderPass);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(WebGLCmdBeginRenderPass).call(this, WebGLCmd.BEGIN_RENDER_PASS));
      _this.gpuFramebuffer = null;
      _this.renderArea = {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      };
      _this.clearFlag = _define.GFXClearFlag.NONE;
      _this.clearColors = [];
      _this.clearDepth = 1.0;
      _this.clearStencil = 0;
      return _this;
    }

    _createClass(WebGLCmdBeginRenderPass, [{
      key: "clear",
      value: function clear() {
        this.gpuFramebuffer = null;
        this.clearColors.length = 0;
      }
    }]);

    return WebGLCmdBeginRenderPass;
  }(WebGLCmdObject);

  _exports.WebGLCmdBeginRenderPass = WebGLCmdBeginRenderPass;

  var WebGLCmdBindStates = /*#__PURE__*/function (_WebGLCmdObject2) {
    _inherits(WebGLCmdBindStates, _WebGLCmdObject2);

    function WebGLCmdBindStates() {
      var _this2;

      _classCallCheck(this, WebGLCmdBindStates);

      _this2 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLCmdBindStates).call(this, WebGLCmd.BIND_STATES));
      _this2.gpuPipelineState = null;
      _this2.gpuBindingLayout = null;
      _this2.gpuInputAssembler = null;
      _this2.viewport = null;
      _this2.scissor = null;
      _this2.lineWidth = null;
      _this2.depthBias = null;
      _this2.blendConstants = null;
      _this2.depthBounds = null;
      _this2.stencilWriteMask = null;
      _this2.stencilCompareMask = null;
      return _this2;
    }

    _createClass(WebGLCmdBindStates, [{
      key: "clear",
      value: function clear() {
        this.gpuPipelineState = null;
        this.gpuBindingLayout = null;
        this.gpuInputAssembler = null;
        this.viewport = null;
        this.scissor = null;
        this.lineWidth = null;
        this.depthBias = null;
        this.blendConstants = null;
        this.depthBounds = null;
        this.stencilWriteMask = null;
        this.stencilCompareMask = null;
      }
    }]);

    return WebGLCmdBindStates;
  }(WebGLCmdObject);

  _exports.WebGLCmdBindStates = WebGLCmdBindStates;

  var WebGLCmdDraw = /*#__PURE__*/function (_WebGLCmdObject3) {
    _inherits(WebGLCmdDraw, _WebGLCmdObject3);

    function WebGLCmdDraw() {
      var _this3;

      _classCallCheck(this, WebGLCmdDraw);

      _this3 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLCmdDraw).call(this, WebGLCmd.DRAW));
      _this3.drawInfo = {
        vertexCount: 0,
        firstVertex: 0,
        indexCount: 0,
        firstIndex: 0,
        vertexOffset: 0,
        instanceCount: 0,
        firstInstance: 0
      };
      return _this3;
    }

    _createClass(WebGLCmdDraw, [{
      key: "clear",
      value: function clear() {}
    }]);

    return WebGLCmdDraw;
  }(WebGLCmdObject);

  _exports.WebGLCmdDraw = WebGLCmdDraw;

  var WebGLCmdUpdateBuffer = /*#__PURE__*/function (_WebGLCmdObject4) {
    _inherits(WebGLCmdUpdateBuffer, _WebGLCmdObject4);

    function WebGLCmdUpdateBuffer() {
      var _this4;

      _classCallCheck(this, WebGLCmdUpdateBuffer);

      _this4 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLCmdUpdateBuffer).call(this, WebGLCmd.UPDATE_BUFFER));
      _this4.gpuBuffer = null;
      _this4.buffer = null;
      _this4.offset = 0;
      _this4.size = 0;
      return _this4;
    }

    _createClass(WebGLCmdUpdateBuffer, [{
      key: "clear",
      value: function clear() {
        this.gpuBuffer = null;
        this.buffer = null;
      }
    }]);

    return WebGLCmdUpdateBuffer;
  }(WebGLCmdObject);

  _exports.WebGLCmdUpdateBuffer = WebGLCmdUpdateBuffer;

  var WebGLGFXTextureSubres = function WebGLGFXTextureSubres() {
    _classCallCheck(this, WebGLGFXTextureSubres);

    this.baseMipLevel = 0;
    this.levelCount = 1;
    this.baseArrayLayer = 0;
    this.layerCount = 1;
  };

  _exports.WebGLGFXTextureSubres = WebGLGFXTextureSubres;

  var WebGLGFXBufferTextureCopy = function WebGLGFXBufferTextureCopy() {
    _classCallCheck(this, WebGLGFXBufferTextureCopy);

    this.buffOffset = 0;
    this.buffStride = 0;
    this.buffTexHeight = 0;
    this.texOffset = [0, 0, 0];
    this.texExtent = [0, 0, 0];
    this.texSubres = new WebGLGFXTextureSubres();
  };

  _exports.WebGLGFXBufferTextureCopy = WebGLGFXBufferTextureCopy;

  var WebGLCmdCopyBufferToTexture = /*#__PURE__*/function (_WebGLCmdObject5) {
    _inherits(WebGLCmdCopyBufferToTexture, _WebGLCmdObject5);

    function WebGLCmdCopyBufferToTexture() {
      var _this5;

      _classCallCheck(this, WebGLCmdCopyBufferToTexture);

      _this5 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLCmdCopyBufferToTexture).call(this, WebGLCmd.COPY_BUFFER_TO_TEXTURE));
      _this5.gpuBuffer = null;
      _this5.gpuTexture = null;
      _this5.dstLayout = null;
      _this5.regions = [];
      return _this5;
    }

    _createClass(WebGLCmdCopyBufferToTexture, [{
      key: "clear",
      value: function clear() {
        this.gpuBuffer = null;
        this.gpuTexture = null;
        this.dstLayout = null;
        this.regions.length = 0;
      }
    }]);

    return WebGLCmdCopyBufferToTexture;
  }(WebGLCmdObject);

  _exports.WebGLCmdCopyBufferToTexture = WebGLCmdCopyBufferToTexture;

  var WebGLCmdPackage = /*#__PURE__*/function () {
    function WebGLCmdPackage() {
      _classCallCheck(this, WebGLCmdPackage);

      this.cmds = new _cachedArray.CachedArray(1);
      this.beginRenderPassCmds = new _cachedArray.CachedArray(1);
      this.bindStatesCmds = new _cachedArray.CachedArray(1);
      this.drawCmds = new _cachedArray.CachedArray(1);
      this.updateBufferCmds = new _cachedArray.CachedArray(1);
      this.copyBufferToTextureCmds = new _cachedArray.CachedArray(1);
    }

    _createClass(WebGLCmdPackage, [{
      key: "clearCmds",
      value: function clearCmds(allocator) {
        if (this.beginRenderPassCmds.length) {
          allocator.beginRenderPassCmdPool.freeCmds(this.beginRenderPassCmds);
          this.beginRenderPassCmds.clear();
        }

        if (this.bindStatesCmds.length) {
          allocator.bindStatesCmdPool.freeCmds(this.bindStatesCmds);
          this.bindStatesCmds.clear();
        }

        if (this.drawCmds.length) {
          allocator.drawCmdPool.freeCmds(this.drawCmds);
          this.drawCmds.clear();
        }

        if (this.updateBufferCmds.length) {
          allocator.updateBufferCmdPool.freeCmds(this.updateBufferCmds);
          this.updateBufferCmds.clear();
        }

        if (this.copyBufferToTextureCmds.length) {
          allocator.copyBufferToTextureCmdPool.freeCmds(this.copyBufferToTextureCmds);
          this.copyBufferToTextureCmds.clear();
        }

        this.cmds.clear();
      }
    }]);

    return WebGLCmdPackage;
  }();

  _exports.WebGLCmdPackage = WebGLCmdPackage;

  function WebGLCmdFuncCreateBuffer(device, gpuBuffer) {
    var gl = device.gl;
    var cache = device.stateCache;
    var glUsage = gpuBuffer.memUsage & _define.GFXMemoryUsageBit.HOST ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;

    if (gpuBuffer.usage & _define.GFXBufferUsageBit.VERTEX) {
      gpuBuffer.glTarget = gl.ARRAY_BUFFER;
      var glBuffer = gl.createBuffer();

      if (glBuffer) {
        gpuBuffer.glBuffer = glBuffer;

        if (gpuBuffer.size > 0) {
          if (device.useVAO) {
            if (cache.glVAO) {
              device.OES_vertex_array_object.bindVertexArrayOES(null);
              cache.glVAO = null;
            }
          }

          if (device.stateCache.glArrayBuffer !== gpuBuffer.glBuffer) {
            gl.bindBuffer(gl.ARRAY_BUFFER, gpuBuffer.glBuffer);
            device.stateCache.glArrayBuffer = gpuBuffer.glBuffer;
          }

          gl.bufferData(gl.ARRAY_BUFFER, gpuBuffer.size, glUsage);
          gl.bindBuffer(gl.ARRAY_BUFFER, null);
          device.stateCache.glArrayBuffer = null;
        }
      }
    } else if (gpuBuffer.usage & _define.GFXBufferUsageBit.INDEX) {
      gpuBuffer.glTarget = gl.ELEMENT_ARRAY_BUFFER;

      var _glBuffer = gl.createBuffer();

      if (_glBuffer) {
        gpuBuffer.glBuffer = _glBuffer;

        if (gpuBuffer.size > 0) {
          if (device.useVAO) {
            if (cache.glVAO) {
              device.OES_vertex_array_object.bindVertexArrayOES(null);
              cache.glVAO = null;
            }
          }

          if (device.stateCache.glElementArrayBuffer !== gpuBuffer.glBuffer) {
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);
            device.stateCache.glElementArrayBuffer = gpuBuffer.glBuffer;
          }

          gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.size, glUsage);
          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
          device.stateCache.glElementArrayBuffer = null;
        }
      }
    } else if (gpuBuffer.usage & _define.GFXBufferUsageBit.UNIFORM) {
      // console.error("WebGL 1.0 doesn't support uniform buffer.");
      gpuBuffer.glTarget = gl.NONE;

      if (gpuBuffer.buffer) {
        gpuBuffer.vf32 = new Float32Array(gpuBuffer.buffer.buffer);
      }
    } else if (gpuBuffer.usage & _define.GFXBufferUsageBit.INDIRECT) {
      gpuBuffer.glTarget = gl.NONE;
    } else if (gpuBuffer.usage & _define.GFXBufferUsageBit.TRANSFER_DST) {
      gpuBuffer.glTarget = gl.NONE;
    } else if (gpuBuffer.usage & _define.GFXBufferUsageBit.TRANSFER_SRC) {
      gpuBuffer.glTarget = gl.NONE;
    } else {
      console.error('Unsupported GFXBufferType, create buffer failed.');
      gpuBuffer.glTarget = gl.NONE;
    }
  }

  function WebGLCmdFuncDestroyBuffer(device, gpuBuffer) {
    if (gpuBuffer.glBuffer) {
      device.gl.deleteBuffer(gpuBuffer.glBuffer);
      gpuBuffer.glBuffer = null;
    }
  }

  function WebGLCmdFuncResizeBuffer(device, gpuBuffer) {
    var gl = device.gl;
    var cache = device.stateCache;
    var glUsage = gpuBuffer.memUsage & _define.GFXMemoryUsageBit.HOST ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;

    if (gpuBuffer.usage & _define.GFXBufferUsageBit.VERTEX) {
      if (device.useVAO) {
        if (cache.glVAO) {
          device.OES_vertex_array_object.bindVertexArrayOES(null);
          cache.glVAO = null;
        }
      }

      if (device.stateCache.glArrayBuffer !== gpuBuffer.glBuffer) {
        gl.bindBuffer(gl.ARRAY_BUFFER, gpuBuffer.glBuffer);
      }

      if (gpuBuffer.buffer) {
        gl.bufferData(gl.ARRAY_BUFFER, gpuBuffer.buffer, glUsage);
      } else {
        gl.bufferData(gl.ARRAY_BUFFER, gpuBuffer.size, glUsage);
      }

      gl.bindBuffer(gl.ARRAY_BUFFER, null);
      device.stateCache.glArrayBuffer = null;
    } else if (gpuBuffer.usage & _define.GFXBufferUsageBit.INDEX) {
      if (device.useVAO) {
        if (cache.glVAO) {
          device.OES_vertex_array_object.bindVertexArrayOES(null);
          cache.glVAO = null;
        }
      }

      if (device.stateCache.glElementArrayBuffer !== gpuBuffer.glBuffer) {
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);
      }

      if (gpuBuffer.buffer) {
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.buffer, glUsage);
      } else {
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.size, glUsage);
      }

      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
      device.stateCache.glElementArrayBuffer = null;
    } else if (gpuBuffer.usage & _define.GFXBufferUsageBit.UNIFORM) {
      // console.error("WebGL 1.0 doesn't support uniform buffer.");
      if (gpuBuffer.buffer) {
        gpuBuffer.vf32 = new Float32Array(gpuBuffer.buffer.buffer);
      }
    } else if (gpuBuffer.usage & _define.GFXBufferUsageBit.INDIRECT || gpuBuffer.usage & _define.GFXBufferUsageBit.TRANSFER_DST || gpuBuffer.usage & _define.GFXBufferUsageBit.TRANSFER_SRC) {
      gpuBuffer.glTarget = gl.NONE;
    } else {
      console.error('Unsupported GFXBufferType, create buffer failed.');
      gpuBuffer.glTarget = gl.NONE;
    }
  }

  function WebGLCmdFuncUpdateBuffer(device, gpuBuffer, buffer, offset, size) {
    if (gpuBuffer.usage & _define.GFXBufferUsageBit.UNIFORM) {
      if (ArrayBuffer.isView(buffer)) {
        gpuBuffer.vf32.set(buffer, offset / Float32Array.BYTES_PER_ELEMENT);
      } else {
        gpuBuffer.vf32.set(new Float32Array(buffer), offset / Float32Array.BYTES_PER_ELEMENT);
      }
    } else if (gpuBuffer.usage & _define.GFXBufferUsageBit.INDIRECT) {
      gpuBuffer.indirects = buffer.drawInfos;
    } else {
      var buff = buffer;
      var gl = device.gl;
      var cache = device.stateCache;

      switch (gpuBuffer.glTarget) {
        case gl.ARRAY_BUFFER:
          {
            if (device.useVAO) {
              if (cache.glVAO) {
                device.OES_vertex_array_object.bindVertexArrayOES(null);
                cache.glVAO = null;
              }
            }

            if (device.stateCache.glArrayBuffer !== gpuBuffer.glBuffer) {
              gl.bindBuffer(gl.ARRAY_BUFFER, gpuBuffer.glBuffer);
              device.stateCache.glArrayBuffer = gpuBuffer.glBuffer;
            }

            break;
          }

        case gl.ELEMENT_ARRAY_BUFFER:
          {
            if (device.useVAO) {
              if (cache.glVAO) {
                device.OES_vertex_array_object.bindVertexArrayOES(null);
                cache.glVAO = null;
              }
            }

            if (device.stateCache.glElementArrayBuffer !== gpuBuffer.glBuffer) {
              gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);
              device.stateCache.glElementArrayBuffer = gpuBuffer.glBuffer;
            }

            break;
          }

        default:
          {
            console.error('Unsupported GFXBufferType, update buffer failed.');
            return;
          }
      }

      if (size === buff.byteLength) {
        gl.bufferSubData(gpuBuffer.glTarget, offset, buff);
      } else {
        gl.bufferSubData(gpuBuffer.glTarget, offset, buff.slice(0, size));
      }
    }
  }

  function WebGLCmdFuncCreateTexture(device, gpuTexture) {
    var gl = device.gl;
    gpuTexture.glInternelFmt = GFXFormatToWebGLInternalFormat(gpuTexture.format, gl);
    gpuTexture.glFormat = GFXFormatToWebGLFormat(gpuTexture.format, gl);
    gpuTexture.glType = GFXFormatToWebGLType(gpuTexture.format, gl);
    var w = gpuTexture.width;
    var h = gpuTexture.height;

    switch (gpuTexture.viewType) {
      case _define.GFXTextureViewType.TV2D:
        {
          gpuTexture.viewType = _define.GFXTextureViewType.TV2D;
          gpuTexture.glTarget = gl.TEXTURE_2D;
          var maxSize = Math.max(w, h);

          if (maxSize > device.maxTextureSize) {
            (0, _debug.errorID)(9100, maxSize, device.maxTextureSize);
          }

          if (!device.WEBGL_depth_texture && _define.GFXFormatInfos[gpuTexture.format].hasDepth) {
            var glRenderbuffer = gl.createRenderbuffer();

            if (glRenderbuffer && gpuTexture.size > 0) {
              gpuTexture.glRenderbuffer = glRenderbuffer;

              if (device.stateCache.glRenderbuffer !== gpuTexture.glRenderbuffer) {
                gl.bindRenderbuffer(gl.RENDERBUFFER, gpuTexture.glRenderbuffer);
                device.stateCache.glRenderbuffer = gpuTexture.glRenderbuffer;
              } // Special treatment, refer to https://developer.mozilla.org/zh-CN/docs/Web/API/WebGLRenderingContext/renderbufferStorage


              if (gpuTexture.glInternelFmt === gl.DEPTH_COMPONENT) {
                gpuTexture.glInternelFmt = gl.DEPTH_COMPONENT16;
              }

              gl.renderbufferStorage(gl.RENDERBUFFER, gpuTexture.glInternelFmt, w, h);
            }
          } else if (gpuTexture.samples === _define.GFXSampleCount.X1) {
            var glTexture = gl.createTexture();

            if (glTexture && gpuTexture.size > 0) {
              gpuTexture.glTexture = glTexture;
              var glTexUnit = device.stateCache.glTexUnits[device.stateCache.texUnit];

              if (glTexUnit.glTexture !== gpuTexture.glTexture) {
                gl.bindTexture(gl.TEXTURE_2D, gpuTexture.glTexture);
                glTexUnit.glTexture = gpuTexture.glTexture;
              }

              if (!_define.GFXFormatInfos[gpuTexture.format].isCompressed) {
                for (var i = 0; i < gpuTexture.mipLevel; ++i) {
                  gl.texImage2D(gl.TEXTURE_2D, i, gpuTexture.glInternelFmt, w, h, 0, gpuTexture.glFormat, gpuTexture.glType, null);
                  w = Math.max(1, w >> 1);
                  h = Math.max(1, h >> 1);
                }
              } else {
                if (gpuTexture.glInternelFmt !== _webglDefine.WebGLEXT.COMPRESSED_RGB_ETC1_WEBGL) {
                  for (var _i = 0; _i < gpuTexture.mipLevel; ++_i) {
                    var imgSize = (0, _define.GFXFormatSize)(gpuTexture.format, w, h, 1);
                    var view = new Uint8Array(imgSize);
                    gl.compressedTexImage2D(gl.TEXTURE_2D, _i, gpuTexture.glInternelFmt, w, h, 0, view);
                    w = Math.max(1, w >> 1);
                    h = Math.max(1, h >> 1);
                  }
                } else {
                  // init 2 x 2 texture
                  var _imgSize = (0, _define.GFXFormatSize)(gpuTexture.format, 2, 2, 1);

                  var _view = new Uint8Array(_imgSize);

                  gl.compressedTexImage2D(gl.TEXTURE_2D, 0, gpuTexture.glInternelFmt, 2, 2, 0, _view);
                }
              }

              if (gpuTexture.isPowerOf2) {
                gpuTexture.glWrapS = gl.REPEAT;
                gpuTexture.glWrapT = gl.REPEAT;
              } else {
                gpuTexture.glWrapS = gl.CLAMP_TO_EDGE;
                gpuTexture.glWrapT = gl.CLAMP_TO_EDGE;
              }

              gpuTexture.glMinFilter = gl.LINEAR;
              gpuTexture.glMagFilter = gl.LINEAR;
              gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_WRAP_S, gpuTexture.glWrapS);
              gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_WRAP_T, gpuTexture.glWrapT);
              gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_MIN_FILTER, gpuTexture.glMinFilter);
              gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_MAG_FILTER, gpuTexture.glMagFilter);
            } else {
              gl.deleteTexture(glTexture);
            }
          }

          break;
        }

      case _define.GFXTextureViewType.CUBE:
        {
          gpuTexture.viewType = _define.GFXTextureViewType.CUBE;
          gpuTexture.glTarget = gl.TEXTURE_CUBE_MAP;

          var _maxSize = Math.max(w, h);

          if (_maxSize > device.maxCubeMapTextureSize) {
            (0, _debug.errorID)(9100, _maxSize, device.maxTextureSize);
          }

          var _glTexture = gl.createTexture();

          if (_glTexture && gpuTexture.size > 0) {
            gpuTexture.glTexture = _glTexture;
            var _glTexUnit = device.stateCache.glTexUnits[device.stateCache.texUnit];

            if (_glTexUnit.glTexture !== gpuTexture.glTexture) {
              gl.bindTexture(gl.TEXTURE_CUBE_MAP, gpuTexture.glTexture);
              _glTexUnit.glTexture = gpuTexture.glTexture;
            }

            if (!_define.GFXFormatInfos[gpuTexture.format].isCompressed) {
              for (var f = 0; f < 6; ++f) {
                w = gpuTexture.width;
                h = gpuTexture.height;

                for (var _i2 = 0; _i2 < gpuTexture.mipLevel; ++_i2) {
                  gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, _i2, gpuTexture.glInternelFmt, w, h, 0, gpuTexture.glFormat, gpuTexture.glType, null);
                  w = Math.max(1, w >> 1);
                  h = Math.max(1, h >> 1);
                }
              }
            } else {
              if (gpuTexture.glInternelFmt !== _webglDefine.WebGLEXT.COMPRESSED_RGB_ETC1_WEBGL) {
                for (var _f = 0; _f < 6; ++_f) {
                  w = gpuTexture.width;
                  h = gpuTexture.height;

                  for (var _i3 = 0; _i3 < gpuTexture.mipLevel; ++_i3) {
                    var _imgSize2 = (0, _define.GFXFormatSize)(gpuTexture.format, w, h, 1);

                    var _view2 = new Uint8Array(_imgSize2);

                    gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + _f, _i3, gpuTexture.glInternelFmt, w, h, 0, _view2);
                    w = Math.max(1, w >> 1);
                    h = Math.max(1, h >> 1);
                  }
                }
              } else {
                for (var _f2 = 0; _f2 < 6; ++_f2) {
                  var _imgSize3 = (0, _define.GFXFormatSize)(gpuTexture.format, 2, 2, 1);

                  var _view3 = new Uint8Array(_imgSize3);

                  gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + _f2, 0, gpuTexture.glInternelFmt, 2, 2, 0, _view3);
                }
              }
            }

            if (gpuTexture.isPowerOf2) {
              gpuTexture.glWrapS = gl.REPEAT;
              gpuTexture.glWrapT = gl.REPEAT;
            } else {
              gpuTexture.glWrapS = gl.CLAMP_TO_EDGE;
              gpuTexture.glWrapT = gl.CLAMP_TO_EDGE;
            }

            gpuTexture.glMinFilter = gl.LINEAR;
            gpuTexture.glMagFilter = gl.LINEAR;
            gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_WRAP_S, gpuTexture.glWrapS);
            gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_WRAP_T, gpuTexture.glWrapT);
            gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_MIN_FILTER, gpuTexture.glMinFilter);
            gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_MAG_FILTER, gpuTexture.glMagFilter);
          }

          break;
        }

      default:
        {
          console.error('Unsupported GFXTextureType, create texture failed.');
          gpuTexture.viewType = _define.GFXTextureViewType.TV2D;
          gpuTexture.glTarget = gl.TEXTURE_2D;
        }
    }
  }

  function WebGLCmdFuncDestroyTexture(device, gpuTexture) {
    if (gpuTexture.glTexture) {
      device.gl.deleteTexture(gpuTexture.glTexture);
      gpuTexture.glTexture = null;
    }

    if (gpuTexture.glRenderbuffer) {
      device.gl.deleteRenderbuffer(gpuTexture.glRenderbuffer);
      gpuTexture.glRenderbuffer = null;
    }
  }

  function WebGLCmdFuncResizeTexture(device, gpuTexture) {
    var gl = device.gl;
    gpuTexture.glInternelFmt = GFXFormatToWebGLInternalFormat(gpuTexture.format, gl);
    gpuTexture.glFormat = GFXFormatToWebGLFormat(gpuTexture.format, gl);
    gpuTexture.glType = GFXFormatToWebGLType(gpuTexture.format, gl);
    var w = gpuTexture.width;
    var h = gpuTexture.height;

    switch (gpuTexture.viewType) {
      case _define.GFXTextureViewType.TV2D:
        {
          gpuTexture.viewType = _define.GFXTextureViewType.TV2D;
          gpuTexture.glTarget = gl.TEXTURE_2D;
          var maxSize = Math.max(w, h);

          if (maxSize > device.maxTextureSize) {
            (0, _debug.errorID)(9100, maxSize, device.maxTextureSize);
          }

          if (gpuTexture.samples === _define.GFXSampleCount.X1) {
            var glTexUnit = device.stateCache.glTexUnits[device.stateCache.texUnit];

            if (glTexUnit.glTexture !== gpuTexture.glTexture) {
              gl.bindTexture(gl.TEXTURE_2D, gpuTexture.glTexture);
              glTexUnit.glTexture = gpuTexture.glTexture;
            }

            if (!_define.GFXFormatInfos[gpuTexture.format].isCompressed) {
              for (var i = 0; i < gpuTexture.mipLevel; ++i) {
                gl.texImage2D(gl.TEXTURE_2D, i, gpuTexture.glInternelFmt, w, h, 0, gpuTexture.glFormat, gpuTexture.glType, null);
                w = Math.max(1, w >> 1);
                h = Math.max(1, h >> 1);
              }
            } else {
              if (gpuTexture.glInternelFmt !== _webglDefine.WebGLEXT.COMPRESSED_RGB_ETC1_WEBGL) {
                for (var _i4 = 0; _i4 < gpuTexture.mipLevel; ++_i4) {
                  var imgSize = (0, _define.GFXFormatSize)(gpuTexture.format, w, h, 1);
                  var view = new Uint8Array(imgSize);
                  gl.compressedTexImage2D(gl.TEXTURE_2D, _i4, gpuTexture.glInternelFmt, w, h, 0, view);
                  w = Math.max(1, w >> 1);
                  h = Math.max(1, h >> 1);
                }
              }
            }
          }

          break;
        }

      case _define.GFXTextureViewType.CUBE:
        {
          gpuTexture.viewType = _define.GFXTextureViewType.CUBE;
          gpuTexture.glTarget = gl.TEXTURE_CUBE_MAP;

          var _maxSize2 = Math.max(w, h);

          if (_maxSize2 > device.maxCubeMapTextureSize) {
            (0, _debug.errorID)(9100, _maxSize2, device.maxTextureSize);
          }

          var _glTexUnit2 = device.stateCache.glTexUnits[device.stateCache.texUnit];

          if (_glTexUnit2.glTexture !== gpuTexture.glTexture) {
            gl.bindTexture(gl.TEXTURE_CUBE_MAP, gpuTexture.glTexture);
            _glTexUnit2.glTexture = gpuTexture.glTexture;
          }

          if (!_define.GFXFormatInfos[gpuTexture.format].isCompressed) {
            for (var f = 0; f < 6; ++f) {
              w = gpuTexture.width;
              h = gpuTexture.height;

              for (var _i5 = 0; _i5 < gpuTexture.mipLevel; ++_i5) {
                gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, _i5, gpuTexture.glInternelFmt, w, h, 0, gpuTexture.glFormat, gpuTexture.glType, null);
                w = Math.max(1, w >> 1);
                h = Math.max(1, h >> 1);
              }
            }
          } else {
            if (gpuTexture.glInternelFmt !== _webglDefine.WebGLEXT.COMPRESSED_RGB_ETC1_WEBGL) {
              for (var _f3 = 0; _f3 < 6; ++_f3) {
                w = gpuTexture.width;
                h = gpuTexture.height;

                for (var _i6 = 0; _i6 < gpuTexture.mipLevel; ++_i6) {
                  var _imgSize4 = (0, _define.GFXFormatSize)(gpuTexture.format, w, h, 1);

                  var _view4 = new Uint8Array(_imgSize4);

                  gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + _f3, _i6, gpuTexture.glInternelFmt, w, h, 0, _view4);
                  w = Math.max(1, w >> 1);
                  h = Math.max(1, h >> 1);
                }
              }
            }
          }

          break;
        }

      default:
        {
          console.error('Unsupported GFXTextureType, create texture failed.');
          gpuTexture.viewType = _define.GFXTextureViewType.TV2D;
          gpuTexture.glTarget = gl.TEXTURE_2D;
        }
    }
  }

  function WebGLCmdFuncCreateFramebuffer(device, gpuFramebuffer) {
    if (gpuFramebuffer.isOffscreen) {
      var gl = device.gl;
      var attachments = [];
      var glFramebuffer = gl.createFramebuffer();

      if (glFramebuffer) {
        gpuFramebuffer.glFramebuffer = glFramebuffer;

        if (device.stateCache.glFramebuffer !== gpuFramebuffer.glFramebuffer) {
          gl.bindFramebuffer(gl.FRAMEBUFFER, gpuFramebuffer.glFramebuffer);
          device.stateCache.glFramebuffer = gpuFramebuffer.glFramebuffer;
        }

        for (var i = 0; i < gpuFramebuffer.gpuColorViews.length; ++i) {
          var cv = gpuFramebuffer.gpuColorViews[i];

          if (cv) {
            if (cv.gpuTexture.glTexture) {
              gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, cv.gpuTexture.glTarget, cv.gpuTexture.glTexture, cv.baseLevel);
            } else {
              gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.RENDERBUFFER, cv.gpuTexture.glRenderbuffer);
            }

            attachments.push(gl.COLOR_ATTACHMENT0 + i);
          }
        }

        var dsv = gpuFramebuffer.gpuDepthStencilView;

        if (dsv) {
          var glAttachment = _define.GFXFormatInfos[dsv.format].hasStencil ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;

          if (dsv.gpuTexture.glTexture) {
            gl.framebufferTexture2D(gl.FRAMEBUFFER, glAttachment, dsv.gpuTexture.glTarget, dsv.gpuTexture.glTexture, dsv.baseLevel);
          } else {
            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, glAttachment, gl.RENDERBUFFER, dsv.gpuTexture.glRenderbuffer);
          }
        }

        if (device.WEBGL_draw_buffers) {
          device.WEBGL_draw_buffers.drawBuffersWEBGL(attachments);
        }

        var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);

        if (status !== gl.FRAMEBUFFER_COMPLETE) {
          switch (status) {
            case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
              {
                console.error('glCheckFramebufferStatus() - FRAMEBUFFER_INCOMPLETE_ATTACHMENT');
                break;
              }

            case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
              {
                console.error('glCheckFramebufferStatus() - FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT');
                break;
              }

            case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
              {
                console.error('glCheckFramebufferStatus() - FRAMEBUFFER_INCOMPLETE_DIMENSIONS');
                break;
              }

            case gl.FRAMEBUFFER_UNSUPPORTED:
              {
                console.error('glCheckFramebufferStatus() - FRAMEBUFFER_UNSUPPORTED');
                break;
              }

            default:
          }
        }
      }
    }
  }

  function WebGLCmdFuncDestroyFramebuffer(device, gpuFramebuffer) {
    if (gpuFramebuffer.glFramebuffer) {
      device.gl.deleteFramebuffer(gpuFramebuffer.glFramebuffer);
      gpuFramebuffer.glFramebuffer = null;
    }
  }

  function WebGLCmdFuncCreateShader(device, gpuShader) {
    var gl = device.gl;

    var _loop = function _loop(k) {
      var gpuStage = gpuShader.gpuStages[k];
      var glShaderType = 0;
      var shaderTypeStr = '';
      var lineNumber = 1;

      switch (gpuStage.type) {
        case _define.GFXShaderType.VERTEX:
          {
            shaderTypeStr = 'VertexShader';
            glShaderType = gl.VERTEX_SHADER;
            break;
          }

        case _define.GFXShaderType.FRAGMENT:
          {
            shaderTypeStr = 'FragmentShader';
            glShaderType = gl.FRAGMENT_SHADER;
            break;
          }

        default:
          {
            console.error('Unsupported GFXShaderType.');
            return {
              v: void 0
            };
          }
      }

      var glShader = gl.createShader(glShaderType);

      if (glShader) {
        gpuStage.glShader = glShader;
        gl.shaderSource(gpuStage.glShader, gpuStage.source);
        gl.compileShader(gpuStage.glShader);

        if (!gl.getShaderParameter(gpuStage.glShader, gl.COMPILE_STATUS)) {
          console.error(shaderTypeStr + ' in \'' + gpuShader.name + '\' compilation failed.');
          console.error('Shader source dump:', gpuStage.source.replace(/^|\n/g, function () {
            return "\n".concat(lineNumber++, " ");
          }));
          console.error(gl.getShaderInfoLog(gpuStage.glShader));

          for (var l = 0; l < gpuShader.gpuStages.length; l++) {
            var stage = gpuShader.gpuStages[k];

            if (stage.glShader) {
              gl.deleteShader(stage.glShader);
              stage.glShader = null;
            }
          }

          return {
            v: void 0
          };
        }
      }
    };

    for (var k = 0; k < gpuShader.gpuStages.length; k++) {
      var _ret = _loop(k);

      if (_typeof(_ret) === "object") return _ret.v;
    }

    var glProgram = gl.createProgram();

    if (!glProgram) {
      return;
    }

    gpuShader.glProgram = glProgram; // link program

    for (var _k = 0; _k < gpuShader.gpuStages.length; _k++) {
      var gpuStage = gpuShader.gpuStages[_k];
      gl.attachShader(gpuShader.glProgram, gpuStage.glShader);
    }

    gl.linkProgram(gpuShader.glProgram); // detach & delete immediately

    for (var _k2 = 0; _k2 < gpuShader.gpuStages.length; _k2++) {
      var _gpuStage = gpuShader.gpuStages[_k2];

      if (_gpuStage.glShader) {
        gl.detachShader(gpuShader.glProgram, _gpuStage.glShader);
        gl.deleteShader(_gpuStage.glShader);
        _gpuStage.glShader = null;
      }
    }

    if (gl.getProgramParameter(gpuShader.glProgram, gl.LINK_STATUS)) {
      console.info('Shader \'' + gpuShader.name + '\' compilation succeeded.');
    } else {
      console.error('Failed to link shader \'' + gpuShader.name + '\'.');
      console.error(gl.getProgramInfoLog(gpuShader.glProgram));
      return;
    } // parse inputs


    var activeAttribCount = gl.getProgramParameter(gpuShader.glProgram, gl.ACTIVE_ATTRIBUTES);
    gpuShader.glInputs = new Array(activeAttribCount);

    for (var i = 0; i < activeAttribCount; ++i) {
      var attribInfo = gl.getActiveAttrib(gpuShader.glProgram, i);

      if (attribInfo) {
        var varName = void 0;
        var nameOffset = attribInfo.name.indexOf('[');

        if (nameOffset !== -1) {
          varName = attribInfo.name.substr(0, nameOffset);
        } else {
          varName = attribInfo.name;
        }

        var glLoc = gl.getAttribLocation(gpuShader.glProgram, varName);
        var type = WebGLTypeToGFXType(attribInfo.type, gl);
        var stride = WebGLGetTypeSize(attribInfo.type, gl);
        gpuShader.glInputs[i] = {
          binding: glLoc,
          name: varName,
          type: type,
          stride: stride,
          count: attribInfo.size,
          size: stride * attribInfo.size,
          glType: attribInfo.type,
          glLoc: glLoc
        };
      }
    } // create uniform blocks


    if (gpuShader.blocks.length > 0) {
      gpuShader.glBlocks = new Array(gpuShader.blocks.length);

      for (var _i7 = 0; _i7 < gpuShader.blocks.length; ++_i7) {
        var block = gpuShader.blocks[_i7];
        var glBlock = {
          binding: block.binding,
          name: block.name,
          size: 0,
          glUniforms: new Array(block.members.length),
          glActiveUniforms: [],
          isUniformPackage: true
        };
        gpuShader.glBlocks[_i7] = glBlock;

        for (var u = 0; u < block.members.length; ++u) {
          var uniform = block.members[u];
          var glType = GFXTypeToWebGLType(uniform.type, gl);

          var _stride = WebGLGetTypeSize(glType, gl);

          var size = _stride * uniform.count;
          var begin = glBlock.size / 4;
          var count = size / 4;
          var array = new Array(count);
          array.fill(0);
          glBlock.glUniforms[u] = {
            binding: -1,
            name: uniform.name,
            type: uniform.type,
            stride: _stride,
            count: uniform.count,
            size: size,
            offset: glBlock.size,
            glType: glType,
            glLoc: -1,
            array: array,
            begin: begin
          };
          glBlock.size += size;
        }
        /*
        glBlock.buffer = new ArrayBuffer(glBlock.size);
          for (let k = 0; k < glBlock.glUniforms.length; k++) {
            const glUniform = glBlock.glUniforms[k];
            switch (glUniform.glType) {
                case gl.BOOL:
                case gl.BOOL_VEC2:
                case gl.BOOL_VEC3:
                case gl.BOOL_VEC4:
                case gl.INT:
                case gl.INT_VEC2:
                case gl.INT_VEC3:
                case gl.INT_VEC4:
                case gl.SAMPLER_2D:
                case gl.SAMPLER_CUBE: {
                    glUniform.vi32 = new Int32Array(glBlock.buffer);
                    break;
                }
                default: {
                    glUniform.vf32 = new Float32Array(glBlock.buffer);
                }
            }
        }
        */

      }
    } // create uniform samplers


    if (gpuShader.samplers.length > 0) {
      gpuShader.glSamplers = new Array(gpuShader.samplers.length);

      for (var _i8 = 0; _i8 < gpuShader.samplers.length; ++_i8) {
        var sampler = gpuShader.samplers[_i8];
        gpuShader.glSamplers[_i8] = {
          binding: sampler.binding,
          name: sampler.name,
          type: sampler.type,
          units: [],
          glType: GFXTypeToWebGLType(sampler.type, gl),
          glLoc: -1
        };
      }
    } // parse uniforms


    var activeUniformCount = gl.getProgramParameter(gpuShader.glProgram, gl.ACTIVE_UNIFORMS);
    var unitIdx = 0;
    var glActiveSamplers = [];

    for (var _i9 = 0; _i9 < activeUniformCount; ++_i9) {
      var uniformInfo = gl.getActiveUniform(gpuShader.glProgram, _i9);

      if (uniformInfo) {
        var _glLoc = gl.getUniformLocation(gpuShader.glProgram, uniformInfo.name);

        if (_glLoc !== null) {
          var _varName = void 0;

          var _nameOffset = uniformInfo.name.indexOf('[');

          if (_nameOffset !== -1) {
            _varName = uniformInfo.name.substr(0, _nameOffset);
          } else {
            _varName = uniformInfo.name;
          }

          var isSampler = uniformInfo.type === gl.SAMPLER_2D || uniformInfo.type === gl.SAMPLER_CUBE;

          if (!isSampler) {
            // let stride = WebGLGetTypeSize(info.type);
            // build uniform block mapping
            for (var j = 0; j < gpuShader.glBlocks.length; j++) {
              var _glBlock = gpuShader.glBlocks[j];

              for (var _k3 = 0; _k3 < _glBlock.glUniforms.length; _k3++) {
                var glUniform = _glBlock.glUniforms[_k3];

                if (glUniform.name === _varName) {
                  // let varSize = stride * info.size;
                  glUniform.glLoc = _glLoc;

                  _glBlock.glActiveUniforms.push(glUniform);

                  break;
                }
              }
            } // for

          } else {
            for (var _j = 0; _j < gpuShader.glSamplers.length; _j++) {
              var glSampler = gpuShader.glSamplers[_j];

              if (glSampler.name === _varName) {
                // let varSize = stride * uniformInfo.size;
                for (var t = 0; t < uniformInfo.size; ++t) {
                  glSampler.units.push(unitIdx + t);
                }

                glSampler.glLoc = _glLoc;
                unitIdx += uniformInfo.size;
                glActiveSamplers.push(glSampler);
                break;
              }
            } // for

          }
        }
      }
    } // for


    if (glActiveSamplers.length) {
      if (device.stateCache.glProgram !== gpuShader.glProgram) {
        gl.useProgram(gpuShader.glProgram);
        device.stateCache.glProgram = gpuShader.glProgram;
      }

      for (var _i10 = 0; _i10 < glActiveSamplers.length; _i10++) {
        var _glSampler = glActiveSamplers[_i10];
        gl.uniform1iv(_glSampler.glLoc, _glSampler.units);
      }
    }
  }

  function WebGLCmdFuncDestroyShader(device, gpuShader) {
    if (gpuShader.glProgram) {
      device.gl.deleteProgram(gpuShader.glProgram);
      gpuShader.glProgram = null;
    }
  }

  function WebGLCmdFuncCreateInputAssember(device, gpuInputAssembler) {
    var gl = device.gl;
    gpuInputAssembler.glAttribs = new Array(gpuInputAssembler.attributes.length);
    var offsets = [0, 0, 0, 0, 0, 0, 0, 0];

    for (var i = 0; i < gpuInputAssembler.attributes.length; ++i) {
      var attrib = gpuInputAssembler.attributes[i];
      var stream = attrib.stream !== undefined ? attrib.stream : 0;
      var gpuBuffer = gpuInputAssembler.gpuVertexBuffers[stream];
      var glType = GFXFormatToWebGLType(attrib.format, gl);
      var size = _define.GFXFormatInfos[attrib.format].size;
      gpuInputAssembler.glAttribs[i] = {
        name: attrib.name,
        glBuffer: gpuBuffer.glBuffer,
        glType: glType,
        size: size,
        count: _define.GFXFormatInfos[attrib.format].count,
        stride: gpuBuffer.stride,
        componentCount: WebGLGetComponentCount(glType, gl),
        isNormalized: attrib.isNormalized !== undefined ? attrib.isNormalized : false,
        isInstanced: attrib.isInstanced !== undefined ? attrib.isInstanced : false,
        offset: offsets[stream]
      };
      offsets[stream] += size;
    }
  }

  function WebGLCmdFuncDestroyInputAssembler(device, gpuInputAssembler) {
    var it = gpuInputAssembler.glVAOs.values();
    var res = it.next();

    while (!res.done) {
      device.OES_vertex_array_object.deleteVertexArrayOES(res.value);
      res = it.next();
    }

    gpuInputAssembler.glVAOs.clear();
  }

  var gfxStateCache = {
    gpuInputAssembler: null,
    gpuShader: null,
    glPrimitive: 0
  };

  function WebGLCmdFuncBeginRenderPass(device, gpuFramebuffer, renderArea, clearFlag, clearColors, clearDepth, clearStencil) {
    gfxStateCache.gpuInputAssembler = null;
    gfxStateCache.gpuShader = null;
    var gl = device.gl;
    var cache = device.stateCache;
    var clears = 0;

    if (gpuFramebuffer) {
      if (cache.glFramebuffer !== gpuFramebuffer.glFramebuffer) {
        gl.bindFramebuffer(gl.FRAMEBUFFER, gpuFramebuffer.glFramebuffer);
        cache.glFramebuffer = gpuFramebuffer.glFramebuffer;
      }

      if (cache.viewport.left !== renderArea.x || cache.viewport.top !== renderArea.y || cache.viewport.width !== renderArea.width || cache.viewport.height !== renderArea.height) {
        gl.viewport(renderArea.x, renderArea.y, renderArea.width, renderArea.height);
        cache.viewport.left = renderArea.x;
        cache.viewport.top = renderArea.y;
        cache.viewport.width = renderArea.width;
        cache.viewport.height = renderArea.height;
      }

      if (cache.scissorRect.x !== renderArea.x || cache.scissorRect.y !== renderArea.y || cache.scissorRect.width !== renderArea.width || cache.scissorRect.height !== renderArea.height) {
        gl.scissor(renderArea.x, renderArea.y, renderArea.width, renderArea.height);
        cache.scissorRect.x = renderArea.x;
        cache.scissorRect.y = renderArea.y;
        cache.scissorRect.width = renderArea.width;
        cache.scissorRect.height = renderArea.height;
      }

      var curGPURenderPass = gpuFramebuffer.gpuRenderPass; // const invalidateAttachments: GLenum[] = [];

      var clearCount = clearColors.length;

      if (!device.WEBGL_draw_buffers) {
        clearCount = 1;
      }

      for (var j = 0; j < clearCount; ++j) {
        var colorAttachment = curGPURenderPass.colorAttachments[j];

        if (colorAttachment.format !== _define.GFXFormat.UNKNOWN) {
          switch (colorAttachment.loadOp) {
            case _define.GFXLoadOp.LOAD:
              break;
            // GL default behavior

            case _define.GFXLoadOp.CLEAR:
              {
                if (clearFlag & _define.GFXClearFlag.COLOR) {
                  if (cache.bs.targets[0].blendColorMask !== _define.GFXColorMask.ALL) {
                    gl.colorMask(true, true, true, true);
                  }

                  var clearColor = clearColors[0];
                  gl.clearColor(clearColor.r, clearColor.g, clearColor.b, clearColor.a);
                  clears |= gl.COLOR_BUFFER_BIT;
                }

                break;
              }

            case _define.GFXLoadOp.DISCARD:
              {
                // invalidate the framebuffer
                // invalidateAttachments.push(gl.COLOR_ATTACHMENT0 + j);
                break;
              }

            default:
          }
        }
      } // if (curGPURenderPass)


      if (curGPURenderPass.depthStencilAttachment) {
        if (curGPURenderPass.depthStencilAttachment.format !== _define.GFXFormat.UNKNOWN) {
          switch (curGPURenderPass.depthStencilAttachment.depthLoadOp) {
            case _define.GFXLoadOp.LOAD:
              break;
            // GL default behavior

            case _define.GFXLoadOp.CLEAR:
              {
                if (clearFlag & _define.GFXClearFlag.DEPTH) {
                  if (!cache.dss.depthWrite) {
                    gl.depthMask(true);
                  }

                  gl.clearDepth(clearDepth);
                  clears |= gl.DEPTH_BUFFER_BIT;
                }

                break;
              }

            case _define.GFXLoadOp.DISCARD:
              {
                // invalidate the framebuffer
                // invalidateAttachments.push(gl.DEPTH_ATTACHMENT);
                break;
              }

            default:
          }

          if (_define.GFXFormatInfos[curGPURenderPass.depthStencilAttachment.format].hasStencil) {
            switch (curGPURenderPass.depthStencilAttachment.stencilLoadOp) {
              case _define.GFXLoadOp.LOAD:
                break;
              // GL default behavior

              case _define.GFXLoadOp.CLEAR:
                {
                  if (clearFlag & _define.GFXClearFlag.STENCIL) {
                    if (!cache.dss.stencilWriteMaskFront) {
                      gl.stencilMaskSeparate(gl.FRONT, 0xffff);
                    }

                    if (!cache.dss.stencilWriteMaskBack) {
                      gl.stencilMaskSeparate(gl.BACK, 0xffff);
                    }

                    gl.clearStencil(clearStencil);
                    clears |= gl.STENCIL_BUFFER_BIT;
                  }

                  break;
                }

              case _define.GFXLoadOp.DISCARD:
                {
                  // invalidate the framebuffer
                  // invalidateAttachments.push(gl.STENCIL_ATTACHMENT);
                  break;
                }

              default:
            }
          }
        }
      } // if (curGPURenderPass.depthStencilAttachment)

      /*
      if (numInvalidAttach) {
          gl.invalidateFramebuffer(gl.FRAMEBUFFER, numInvalidAttach, invalidateAttachments);
      }
      */


      if (clears) {
        gl.clear(clears);
      } // restore states


      if (clears & gl.COLOR_BUFFER_BIT) {
        var colorMask = cache.bs.targets[0].blendColorMask;

        if (colorMask !== _define.GFXColorMask.ALL) {
          var r = (colorMask & _define.GFXColorMask.R) !== _define.GFXColorMask.NONE;
          var g = (colorMask & _define.GFXColorMask.G) !== _define.GFXColorMask.NONE;
          var b = (colorMask & _define.GFXColorMask.B) !== _define.GFXColorMask.NONE;
          var a = (colorMask & _define.GFXColorMask.A) !== _define.GFXColorMask.NONE;
          gl.colorMask(r, g, b, a);
        }
      }

      if (clears & gl.DEPTH_BUFFER_BIT && !cache.dss.depthWrite) {
        gl.depthMask(false);
      }

      if (clears & gl.STENCIL_BUFFER_BIT) {
        if (!cache.dss.stencilWriteMaskFront) {
          gl.stencilMaskSeparate(gl.FRONT, 0);
        }

        if (!cache.dss.stencilWriteMaskBack) {
          gl.stencilMaskSeparate(gl.BACK, 0);
        }
      }
    } // if (gpuFramebuffer)

  }

  function WebGLCmdFuncBindStates(device, gpuPipelineState, gpuBindingLayout, gpuInputAssembler, viewport, scissor, lineWidth, depthBias, blendConstants, depthBounds, stencilWriteMask, stencilCompareMask) {
    var gl = device.gl;
    var cache = device.stateCache;
    var isShaderChanged = false;
    var glWrapS;
    var glWrapT;
    var glMinFilter;
    var gpuShader = null;

    if (gpuPipelineState) {
      gfxStateCache.glPrimitive = gpuPipelineState.glPrimitive;

      if (gpuPipelineState.gpuShader) {
        var glProgram = gpuPipelineState.gpuShader.glProgram;

        if (cache.glProgram !== glProgram) {
          gl.useProgram(glProgram);
          cache.glProgram = glProgram;
          isShaderChanged = true;
        }

        gfxStateCache.gpuShader = gpuShader = gpuPipelineState.gpuShader;
      } // rasterizer state


      var rs = gpuPipelineState.rs;

      if (rs) {
        if (cache.rs.cullMode !== rs.cullMode) {
          switch (rs.cullMode) {
            case _define.GFXCullMode.NONE:
              {
                gl.disable(gl.CULL_FACE);
                break;
              }

            case _define.GFXCullMode.FRONT:
              {
                gl.enable(gl.CULL_FACE);
                gl.cullFace(gl.FRONT);
                break;
              }

            case _define.GFXCullMode.BACK:
              {
                gl.enable(gl.CULL_FACE);
                gl.cullFace(gl.BACK);
                break;
              }

            default:
          }

          cache.rs.cullMode = rs.cullMode;
        }

        var isFrontFaceCCW = device.reverseCW ? !rs.isFrontFaceCCW : rs.isFrontFaceCCW;

        if (cache.rs.isFrontFaceCCW !== isFrontFaceCCW) {
          gl.frontFace(isFrontFaceCCW ? gl.CCW : gl.CW);
          cache.rs.isFrontFaceCCW = isFrontFaceCCW;
        }

        if (cache.rs.depthBias !== rs.depthBias || cache.rs.depthBiasSlop !== rs.depthBiasSlop) {
          gl.polygonOffset(rs.depthBias, rs.depthBiasSlop);
          cache.rs.depthBias = rs.depthBias;
          cache.rs.depthBiasSlop = rs.depthBiasSlop;
        }

        if (cache.rs.lineWidth !== rs.lineWidth) {
          gl.lineWidth(rs.lineWidth);
          cache.rs.lineWidth = rs.lineWidth;
        }
      } // rasterizater state
      // depth-stencil state


      var dss = gpuPipelineState.dss;

      if (dss) {
        if (cache.dss.depthTest !== dss.depthTest) {
          if (dss.depthTest) {
            gl.enable(gl.DEPTH_TEST);
          } else {
            gl.disable(gl.DEPTH_TEST);
          }

          cache.dss.depthTest = dss.depthTest;
        }

        if (cache.dss.depthWrite !== dss.depthWrite) {
          gl.depthMask(dss.depthWrite);
          cache.dss.depthWrite = dss.depthWrite;
        }

        if (cache.dss.depthFunc !== dss.depthFunc) {
          gl.depthFunc(WebGLCmpFuncs[dss.depthFunc]);
          cache.dss.depthFunc = dss.depthFunc;
        } // front


        if (cache.dss.stencilTestFront !== dss.stencilTestFront || cache.dss.stencilTestBack !== dss.stencilTestBack) {
          if (dss.stencilTestFront || dss.stencilTestBack) {
            gl.enable(gl.STENCIL_TEST);
          } else {
            gl.disable(gl.STENCIL_TEST);
          }

          cache.dss.stencilTestFront = dss.stencilTestFront;
          cache.dss.stencilTestBack = dss.stencilTestBack;
        }

        if (cache.dss.stencilFuncFront !== dss.stencilFuncFront || cache.dss.stencilRefFront !== dss.stencilRefFront || cache.dss.stencilReadMaskFront !== dss.stencilReadMaskFront) {
          gl.stencilFuncSeparate(gl.FRONT, WebGLCmpFuncs[dss.stencilFuncFront], dss.stencilRefFront, dss.stencilReadMaskFront);
          cache.dss.stencilFuncFront = dss.stencilFuncFront;
          cache.dss.stencilRefFront = dss.stencilRefFront;
          cache.dss.stencilReadMaskFront = dss.stencilReadMaskFront;
        }

        if (cache.dss.stencilFailOpFront !== dss.stencilFailOpFront || cache.dss.stencilZFailOpFront !== dss.stencilZFailOpFront || cache.dss.stencilPassOpFront !== dss.stencilPassOpFront) {
          gl.stencilOpSeparate(gl.FRONT, WebGLStencilOps[dss.stencilFailOpFront], WebGLStencilOps[dss.stencilZFailOpFront], WebGLStencilOps[dss.stencilPassOpFront]);
          cache.dss.stencilFailOpFront = dss.stencilFailOpFront;
          cache.dss.stencilZFailOpFront = dss.stencilZFailOpFront;
          cache.dss.stencilPassOpFront = dss.stencilPassOpFront;
        }

        if (cache.dss.stencilWriteMaskFront !== dss.stencilWriteMaskFront) {
          gl.stencilMaskSeparate(gl.FRONT, dss.stencilWriteMaskFront);
          cache.dss.stencilWriteMaskFront = dss.stencilWriteMaskFront;
        } // back


        if (cache.dss.stencilFuncBack !== dss.stencilFuncBack || cache.dss.stencilRefBack !== dss.stencilRefBack || cache.dss.stencilReadMaskBack !== dss.stencilReadMaskBack) {
          gl.stencilFuncSeparate(gl.BACK, WebGLCmpFuncs[dss.stencilFuncBack], dss.stencilRefBack, dss.stencilReadMaskBack);
          cache.dss.stencilFuncBack = dss.stencilFuncBack;
          cache.dss.stencilRefBack = dss.stencilRefBack;
          cache.dss.stencilReadMaskBack = dss.stencilReadMaskBack;
        }

        if (cache.dss.stencilFailOpBack !== dss.stencilFailOpBack || cache.dss.stencilZFailOpBack !== dss.stencilZFailOpBack || cache.dss.stencilPassOpBack !== dss.stencilPassOpBack) {
          gl.stencilOpSeparate(gl.BACK, WebGLStencilOps[dss.stencilFailOpBack], WebGLStencilOps[dss.stencilZFailOpBack], WebGLStencilOps[dss.stencilPassOpBack]);
          cache.dss.stencilFailOpBack = dss.stencilFailOpBack;
          cache.dss.stencilZFailOpBack = dss.stencilZFailOpBack;
          cache.dss.stencilPassOpBack = dss.stencilPassOpBack;
        }

        if (cache.dss.stencilWriteMaskBack !== dss.stencilWriteMaskBack) {
          gl.stencilMaskSeparate(gl.BACK, dss.stencilWriteMaskBack);
          cache.dss.stencilWriteMaskBack = dss.stencilWriteMaskBack;
        }
      } // depth-stencil state
      // blend state


      var bs = gpuPipelineState.bs;

      if (bs) {
        if (cache.bs.isA2C !== bs.isA2C) {
          if (bs.isA2C) {
            gl.enable(gl.SAMPLE_ALPHA_TO_COVERAGE);
          } else {
            gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
          }

          cache.bs.isA2C = bs.isA2C;
        }

        if (cache.bs.blendColor[0] !== bs.blendColor[0] || cache.bs.blendColor[1] !== bs.blendColor[1] || cache.bs.blendColor[2] !== bs.blendColor[2] || cache.bs.blendColor[3] !== bs.blendColor[3]) {
          gl.blendColor(bs.blendColor[0], bs.blendColor[1], bs.blendColor[2], bs.blendColor[3]);
          cache.bs.blendColor[0] = bs.blendColor[0];
          cache.bs.blendColor[1] = bs.blendColor[1];
          cache.bs.blendColor[2] = bs.blendColor[2];
          cache.bs.blendColor[3] = bs.blendColor[3];
        }

        var target0 = bs.targets[0];
        var target0Cache = cache.bs.targets[0];

        if (target0Cache.blend !== target0.blend) {
          if (target0.blend) {
            gl.enable(gl.BLEND);
          } else {
            gl.disable(gl.BLEND);
          }

          target0Cache.blend = target0.blend;
        }

        if (target0Cache.blendEq !== target0.blendEq || target0Cache.blendAlphaEq !== target0.blendAlphaEq) {
          gl.blendEquationSeparate(WebGLBlendOps[target0.blendEq], WebGLBlendOps[target0.blendAlphaEq]);
          target0Cache.blendEq = target0.blendEq;
          target0Cache.blendAlphaEq = target0.blendAlphaEq;
        }

        if (target0Cache.blendSrc !== target0.blendSrc || target0Cache.blendDst !== target0.blendDst || target0Cache.blendSrcAlpha !== target0.blendSrcAlpha || target0Cache.blendDstAlpha !== target0.blendDstAlpha) {
          gl.blendFuncSeparate(WebGLBlendFactors[target0.blendSrc], WebGLBlendFactors[target0.blendDst], WebGLBlendFactors[target0.blendSrcAlpha], WebGLBlendFactors[target0.blendDstAlpha]);
          target0Cache.blendSrc = target0.blendSrc;
          target0Cache.blendDst = target0.blendDst;
          target0Cache.blendSrcAlpha = target0.blendSrcAlpha;
          target0Cache.blendDstAlpha = target0.blendDstAlpha;
        }

        if (target0Cache.blendColorMask !== target0.blendColorMask) {
          gl.colorMask((target0.blendColorMask & _define.GFXColorMask.R) !== _define.GFXColorMask.NONE, (target0.blendColorMask & _define.GFXColorMask.G) !== _define.GFXColorMask.NONE, (target0.blendColorMask & _define.GFXColorMask.B) !== _define.GFXColorMask.NONE, (target0.blendColorMask & _define.GFXColorMask.A) !== _define.GFXColorMask.NONE);
          target0Cache.blendColorMask = target0.blendColorMask;
        }
      } // blend state

    } // bind pso


    if (gpuBindingLayout && gpuShader) {
      var bindingLen = gpuBindingLayout.gpuBindings.length;

      for (var j = 0; j < bindingLen; j++) {
        var gpuBinding = gpuBindingLayout.gpuBindings[j];

        switch (gpuBinding.type) {
          case _define.GFXBindingType.UNIFORM_BUFFER:
            {
              if (gpuBinding.gpuBuffer && gpuBinding.gpuBuffer.buffer) {
                var glBlock = null;
                var blockLen = gpuShader.glBlocks.length;

                for (var k = 0; k < blockLen; k++) {
                  var block = gpuShader.glBlocks[k];

                  if (block.binding === gpuBinding.binding) {
                    glBlock = block;
                    break;
                  }
                }

                if (glBlock && gpuBinding.gpuBuffer.vf32) {
                  var uniformLen = glBlock.glActiveUniforms.length;

                  for (var _k4 = 0; _k4 < uniformLen; _k4++) {
                    var glUniform = glBlock.glActiveUniforms[_k4];

                    switch (glUniform.glType) {
                      case gl.BOOL:
                      case gl.INT:
                        {
                          for (var u = 0; u < glUniform.array.length; ++u) {
                            var idx = glUniform.begin + u;

                            if (gpuBinding.gpuBuffer.vf32[idx] !== glUniform.array[u]) {
                              for (var n = u, m = glUniform.begin + u; n < glUniform.array.length; ++n, ++m) {
                                glUniform.array[n] = gpuBinding.gpuBuffer.vf32[m];
                              }

                              gl.uniform1iv(glUniform.glLoc, glUniform.array);
                              break;
                            }
                          }

                          break;
                        }

                      case gl.BOOL_VEC2:
                      case gl.INT_VEC2:
                        {
                          for (var _u = 0; _u < glUniform.array.length; ++_u) {
                            var _idx = glUniform.begin + _u;

                            if (gpuBinding.gpuBuffer.vf32[_idx] !== glUniform.array[_u]) {
                              for (var _n = _u, _m = glUniform.begin + _u; _n < glUniform.array.length; ++_n, ++_m) {
                                glUniform.array[_n] = gpuBinding.gpuBuffer.vf32[_m];
                              }

                              gl.uniform2iv(glUniform.glLoc, glUniform.array);
                              break;
                            }
                          }

                          break;
                        }

                      case gl.BOOL_VEC3:
                      case gl.INT_VEC3:
                        {
                          for (var _u2 = 0; _u2 < glUniform.array.length; ++_u2) {
                            var _idx2 = glUniform.begin + _u2;

                            if (gpuBinding.gpuBuffer.vf32[_idx2] !== glUniform.array[_u2]) {
                              for (var _n2 = _u2, _m2 = glUniform.begin + _u2; _n2 < glUniform.array.length; ++_n2, ++_m2) {
                                glUniform.array[_n2] = gpuBinding.gpuBuffer.vf32[_m2];
                              }

                              gl.uniform3iv(glUniform.glLoc, glUniform.array);
                              break;
                            }
                          }

                          break;
                        }

                      case gl.BOOL_VEC4:
                      case gl.INT_VEC4:
                        {
                          for (var _u3 = 0; _u3 < glUniform.array.length; ++_u3) {
                            var _idx3 = glUniform.begin + _u3;

                            if (gpuBinding.gpuBuffer.vf32[_idx3] !== glUniform.array[_u3]) {
                              for (var _n3 = _u3, _m3 = glUniform.begin + _u3; _n3 < glUniform.array.length; ++_n3, ++_m3) {
                                glUniform.array[_n3] = gpuBinding.gpuBuffer.vf32[_m3];
                              }

                              gl.uniform4iv(glUniform.glLoc, glUniform.array);
                              break;
                            }
                          }

                          break;
                        }

                      case gl.FLOAT:
                        {
                          for (var _u4 = 0; _u4 < glUniform.array.length; ++_u4) {
                            var _idx4 = glUniform.begin + _u4;

                            if (gpuBinding.gpuBuffer.vf32[_idx4] !== glUniform.array[_u4]) {
                              for (var _n4 = _u4, _m4 = glUniform.begin + _u4; _n4 < glUniform.array.length; ++_n4, ++_m4) {
                                glUniform.array[_n4] = gpuBinding.gpuBuffer.vf32[_m4];
                              }

                              gl.uniform1fv(glUniform.glLoc, glUniform.array);
                              break;
                            }
                          }

                          break;
                        }

                      case gl.FLOAT_VEC2:
                        {
                          for (var _u5 = 0; _u5 < glUniform.array.length; ++_u5) {
                            var _idx5 = glUniform.begin + _u5;

                            if (gpuBinding.gpuBuffer.vf32[_idx5] !== glUniform.array[_u5]) {
                              for (var _n5 = _u5, _m5 = glUniform.begin + _u5; _n5 < glUniform.array.length; ++_n5, ++_m5) {
                                glUniform.array[_n5] = gpuBinding.gpuBuffer.vf32[_m5];
                              }

                              gl.uniform2fv(glUniform.glLoc, glUniform.array);
                              break;
                            }
                          }

                          break;
                        }

                      case gl.FLOAT_VEC3:
                        {
                          for (var _u6 = 0; _u6 < glUniform.array.length; ++_u6) {
                            var _idx6 = glUniform.begin + _u6;

                            if (gpuBinding.gpuBuffer.vf32[_idx6] !== glUniform.array[_u6]) {
                              for (var _n6 = _u6, _m6 = glUniform.begin + _u6; _n6 < glUniform.array.length; ++_n6, ++_m6) {
                                glUniform.array[_n6] = gpuBinding.gpuBuffer.vf32[_m6];
                              }

                              gl.uniform3fv(glUniform.glLoc, glUniform.array);
                              break;
                            }
                          }

                          break;
                        }

                      case gl.FLOAT_VEC4:
                        {
                          for (var _u7 = 0; _u7 < glUniform.array.length; ++_u7) {
                            var _idx7 = glUniform.begin + _u7;

                            if (gpuBinding.gpuBuffer.vf32[_idx7] !== glUniform.array[_u7]) {
                              for (var _n7 = _u7, _m7 = glUniform.begin + _u7; _n7 < glUniform.array.length; ++_n7, ++_m7) {
                                glUniform.array[_n7] = gpuBinding.gpuBuffer.vf32[_m7];
                              }

                              gl.uniform4fv(glUniform.glLoc, glUniform.array);
                              break;
                            }
                          }

                          break;
                        }

                      case gl.FLOAT_MAT2:
                        {
                          for (var _u8 = 0; _u8 < glUniform.array.length; ++_u8) {
                            var _idx8 = glUniform.begin + _u8;

                            if (gpuBinding.gpuBuffer.vf32[_idx8] !== glUniform.array[_u8]) {
                              for (var _n8 = _u8, _m8 = glUniform.begin + _u8; _n8 < glUniform.array.length; ++_n8, ++_m8) {
                                glUniform.array[_n8] = gpuBinding.gpuBuffer.vf32[_m8];
                              }

                              gl.uniformMatrix2fv(glUniform.glLoc, false, glUniform.array);
                              break;
                            }
                          }

                          break;
                        }

                      case gl.FLOAT_MAT3:
                        {
                          for (var _u9 = 0; _u9 < glUniform.array.length; ++_u9) {
                            var _idx9 = glUniform.begin + _u9;

                            if (gpuBinding.gpuBuffer.vf32[_idx9] !== glUniform.array[_u9]) {
                              for (var _n9 = _u9, _m9 = glUniform.begin + _u9; _n9 < glUniform.array.length; ++_n9, ++_m9) {
                                glUniform.array[_n9] = gpuBinding.gpuBuffer.vf32[_m9];
                              }

                              gl.uniformMatrix3fv(glUniform.glLoc, false, glUniform.array);
                              break;
                            }
                          }

                          break;
                        }

                      case gl.FLOAT_MAT4:
                        {
                          for (var _u10 = 0; _u10 < glUniform.array.length; ++_u10) {
                            var _idx10 = glUniform.begin + _u10;

                            if (gpuBinding.gpuBuffer.vf32[_idx10] !== glUniform.array[_u10]) {
                              for (var _n10 = _u10, _m10 = glUniform.begin + _u10; _n10 < glUniform.array.length; ++_n10, ++_m10) {
                                glUniform.array[_n10] = gpuBinding.gpuBuffer.vf32[_m10];
                              }

                              gl.uniformMatrix4fv(glUniform.glLoc, false, glUniform.array);
                              break;
                            }
                          }

                          break;
                        }

                      default:
                    }
                  }
                }
              } // if


              break;
            }

          case _define.GFXBindingType.SAMPLER:
            {
              if (gpuBinding.gpuSampler) {
                var glSampler = null;
                var samplerLen = gpuShader.glSamplers.length;

                for (var _k5 = 0; _k5 < samplerLen; _k5++) {
                  var sampler = gpuShader.glSamplers[_k5];

                  if (sampler.binding === gpuBinding.binding) {
                    glSampler = sampler;
                    break;
                  }
                }

                if (glSampler) {
                  var texUnitLen = glSampler.units.length;

                  for (var _k6 = 0; _k6 < texUnitLen; _k6++) {
                    var texUnit = glSampler.units[_k6];

                    if (gpuBinding.gpuTexView && gpuBinding.gpuTexView.gpuTexture.size > 0) {
                      var gpuTexture = gpuBinding.gpuTexView.gpuTexture;
                      var glTexUnit = cache.glTexUnits[texUnit];

                      if (glTexUnit.glTexture !== gpuTexture.glTexture) {
                        if (cache.texUnit !== texUnit) {
                          gl.activeTexture(gl.TEXTURE0 + texUnit);
                          cache.texUnit = texUnit;
                        }

                        if (gpuTexture.glTexture) {
                          gl.bindTexture(gpuTexture.glTarget, gpuTexture.glTexture);
                        } else {
                          gl.bindTexture(gpuTexture.glTarget, device.nullTex2D.gpuTexture.glTexture);
                        }

                        glTexUnit.glTexture = gpuTexture.glTexture;
                      }

                      var gpuSampler = gpuBinding.gpuSampler;

                      if (gpuTexture.isPowerOf2) {
                        glWrapS = gpuSampler.glWrapS;
                        glWrapT = gpuSampler.glWrapT;
                      } else {
                        glWrapS = gl.CLAMP_TO_EDGE;
                        glWrapT = gl.CLAMP_TO_EDGE;
                      }

                      if (gpuTexture.isPowerOf2) {
                        if (gpuTexture.mipLevel <= 1 && (gpuSampler.glMinFilter === gl.LINEAR_MIPMAP_NEAREST || gpuSampler.glMinFilter === gl.LINEAR_MIPMAP_LINEAR)) {
                          glMinFilter = gl.LINEAR;
                        } else {
                          glMinFilter = gpuSampler.glMinFilter;
                        }
                      } else {
                        if (gpuSampler.glMinFilter === gl.LINEAR || gpuSampler.glMinFilter === gl.LINEAR_MIPMAP_NEAREST || gpuSampler.glMinFilter === gl.LINEAR_MIPMAP_LINEAR) {
                          glMinFilter = gl.LINEAR;
                        } else {
                          glMinFilter = gl.NEAREST;
                        }
                      }

                      if (gpuTexture.glWrapS !== glWrapS) {
                        if (cache.texUnit !== texUnit) {
                          gl.activeTexture(gl.TEXTURE0 + texUnit);
                          cache.texUnit = texUnit;
                        }

                        gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_WRAP_S, glWrapS);
                        gpuTexture.glWrapS = glWrapS;
                      }

                      if (gpuTexture.glWrapT !== glWrapT) {
                        if (cache.texUnit !== texUnit) {
                          gl.activeTexture(gl.TEXTURE0 + texUnit);
                          cache.texUnit = texUnit;
                        }

                        gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_WRAP_T, glWrapT);
                        gpuTexture.glWrapT = glWrapT;
                      }

                      if (gpuTexture.glMinFilter !== glMinFilter) {
                        if (cache.texUnit !== texUnit) {
                          gl.activeTexture(gl.TEXTURE0 + texUnit);
                          cache.texUnit = texUnit;
                        }

                        gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_MIN_FILTER, glMinFilter);
                        gpuTexture.glMinFilter = glMinFilter;
                      }

                      if (gpuTexture.glMagFilter !== gpuSampler.glMagFilter) {
                        if (cache.texUnit !== texUnit) {
                          gl.activeTexture(gl.TEXTURE0 + texUnit);
                          cache.texUnit = texUnit;
                        }

                        gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_MAG_FILTER, gpuSampler.glMagFilter);
                        gpuTexture.glMagFilter = gpuSampler.glMagFilter;
                      }
                    }
                  }
                } // if

              } else {
                (0, _debug.error)("Not found sampler on binding unit ".concat(gpuBinding.binding, ", name ").concat(gpuBinding.name));
              }

              break;
            }
        }
      }
    } // bind binding layout


    if (gpuInputAssembler && gpuShader && (isShaderChanged || gfxStateCache.gpuInputAssembler !== gpuInputAssembler)) {
      gfxStateCache.gpuInputAssembler = gpuInputAssembler;
      var ia = device.ANGLE_instanced_arrays;

      if (device.useVAO) {
        var vao = device.OES_vertex_array_object; // check vao

        var glVAO = gpuInputAssembler.glVAOs.get(gpuShader.glProgram);

        if (!glVAO) {
          glVAO = vao.createVertexArrayOES();
          gpuInputAssembler.glVAOs.set(gpuShader.glProgram, glVAO);
          vao.bindVertexArrayOES(glVAO);
          gl.bindBuffer(gl.ARRAY_BUFFER, null);
          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
          var glAttrib;
          var inputLen = gpuShader.glInputs.length;

          for (var _j2 = 0; _j2 < inputLen; _j2++) {
            var glInput = gpuShader.glInputs[_j2];
            glAttrib = null;
            var attribLen = gpuInputAssembler.glAttribs.length;

            for (var _k7 = 0; _k7 < attribLen; _k7++) {
              var attrib = gpuInputAssembler.glAttribs[_k7];

              if (attrib.name === glInput.name) {
                glAttrib = attrib;
                break;
              }
            }

            if (glAttrib) {
              gl.bindBuffer(gl.ARRAY_BUFFER, glAttrib.glBuffer);

              for (var c = 0; c < glAttrib.componentCount; ++c) {
                var glLoc = glInput.glLoc + c;
                var attribOffset = glAttrib.offset + glAttrib.size * c;
                gl.enableVertexAttribArray(glLoc);
                cache.glCurrentAttribLocs[glLoc] = true;
                gl.vertexAttribPointer(glLoc, glAttrib.count, glAttrib.glType, glAttrib.isNormalized, glAttrib.stride, attribOffset);

                if (ia) {
                  ia.vertexAttribDivisorANGLE(glLoc, glAttrib.isInstanced ? 1 : 0);
                }
              }
            }
          }

          var gpuBuffer = gpuInputAssembler.gpuIndexBuffer;

          if (gpuBuffer) {
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);
          }

          vao.bindVertexArrayOES(null);
          gl.bindBuffer(gl.ARRAY_BUFFER, null);
          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
          cache.glArrayBuffer = null;
          cache.glElementArrayBuffer = null;
        }

        if (cache.glVAO !== glVAO) {
          vao.bindVertexArrayOES(glVAO);
          cache.glVAO = glVAO;
        }
      } else {
        for (var a = 0; a < device.maxVertexAttributes; ++a) {
          cache.glCurrentAttribLocs[a] = false;
        }

        var _inputLen = gpuShader.glInputs.length;

        for (var _j3 = 0; _j3 < _inputLen; _j3++) {
          var _glInput = gpuShader.glInputs[_j3];
          var _glAttrib = null;
          var _attribLen = gpuInputAssembler.glAttribs.length;

          for (var _k8 = 0; _k8 < _attribLen; _k8++) {
            var _attrib = gpuInputAssembler.glAttribs[_k8];

            if (_attrib.name === _glInput.name) {
              _glAttrib = _attrib;
              break;
            }
          }

          if (_glAttrib) {
            if (cache.glArrayBuffer !== _glAttrib.glBuffer) {
              gl.bindBuffer(gl.ARRAY_BUFFER, _glAttrib.glBuffer);
              cache.glArrayBuffer = _glAttrib.glBuffer;
            }

            for (var _c = 0; _c < _glAttrib.componentCount; ++_c) {
              var _glLoc2 = _glInput.glLoc + _c;

              var _attribOffset = _glAttrib.offset + _glAttrib.size * _c;

              if (!cache.glEnabledAttribLocs[_glLoc2] && _glLoc2 >= 0) {
                gl.enableVertexAttribArray(_glLoc2);
                cache.glEnabledAttribLocs[_glLoc2] = true;
              }

              cache.glCurrentAttribLocs[_glLoc2] = true;
              gl.vertexAttribPointer(_glLoc2, _glAttrib.count, _glAttrib.glType, _glAttrib.isNormalized, _glAttrib.stride, _attribOffset);

              if (ia) {
                ia.vertexAttribDivisorANGLE(_glLoc2, _glAttrib.isInstanced ? 1 : 0);
              }
            }
          }
        } // for


        var _gpuBuffer = gpuInputAssembler.gpuIndexBuffer;

        if (_gpuBuffer) {
          if (cache.glElementArrayBuffer !== _gpuBuffer.glBuffer) {
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, _gpuBuffer.glBuffer);
            cache.glElementArrayBuffer = _gpuBuffer.glBuffer;
          }
        }

        for (var _a = 0; _a < device.maxVertexAttributes; ++_a) {
          if (cache.glEnabledAttribLocs[_a] !== cache.glCurrentAttribLocs[_a]) {
            gl.disableVertexAttribArray(_a);
            cache.glEnabledAttribLocs[_a] = false;
          }
        }
      } // if (device.useVAO)

    }

    if (gpuPipelineState) {
      var dsLen = gpuPipelineState.dynamicStates.length;

      for (var _j4 = 0; _j4 < dsLen; _j4++) {
        var dynamicState = gpuPipelineState.dynamicStates[_j4];

        switch (dynamicState) {
          case _define.GFXDynamicState.VIEWPORT:
            {
              if (viewport) {
                if (cache.viewport.left !== viewport.left || cache.viewport.top !== viewport.top || cache.viewport.width !== viewport.width || cache.viewport.height !== viewport.height) {
                  gl.viewport(viewport.left, viewport.top, viewport.width, viewport.height);
                  cache.viewport.left = viewport.left;
                  cache.viewport.top = viewport.top;
                  cache.viewport.width = viewport.width;
                  cache.viewport.height = viewport.height;
                }
              }

              break;
            }

          case _define.GFXDynamicState.SCISSOR:
            {
              if (scissor) {
                if (cache.scissorRect.x !== scissor.x || cache.scissorRect.y !== scissor.y || cache.scissorRect.width !== scissor.width || cache.scissorRect.height !== scissor.height) {
                  gl.scissor(scissor.x, scissor.y, scissor.width, scissor.height);
                  cache.scissorRect.x = scissor.x;
                  cache.scissorRect.y = scissor.y;
                  cache.scissorRect.width = scissor.width;
                  cache.scissorRect.height = scissor.height;
                }
              }

              break;
            }

          case _define.GFXDynamicState.LINE_WIDTH:
            {
              if (lineWidth) {
                if (cache.rs.lineWidth !== lineWidth) {
                  gl.lineWidth(lineWidth);
                  cache.rs.lineWidth = lineWidth;
                }
              }

              break;
            }

          case _define.GFXDynamicState.DEPTH_BIAS:
            {
              if (depthBias) {
                if (cache.rs.depthBias !== depthBias.constantFactor || cache.rs.depthBiasSlop !== depthBias.slopeFactor) {
                  gl.polygonOffset(depthBias.constantFactor, depthBias.slopeFactor);
                  cache.rs.depthBias = depthBias.constantFactor;
                  cache.rs.depthBiasSlop = depthBias.slopeFactor;
                }
              }

              break;
            }

          case _define.GFXDynamicState.BLEND_CONSTANTS:
            {
              if (blendConstants) {
                if (cache.bs.blendColor[0] !== blendConstants[0] || cache.bs.blendColor[1] !== blendConstants[1] || cache.bs.blendColor[2] !== blendConstants[2] || cache.bs.blendColor[3] !== blendConstants[3]) {
                  gl.blendColor(blendConstants[0], blendConstants[1], blendConstants[2], blendConstants[3]);
                  cache.bs.blendColor[0] = blendConstants[0];
                  cache.bs.blendColor[1] = blendConstants[1];
                  cache.bs.blendColor[2] = blendConstants[2];
                  cache.bs.blendColor[3] = blendConstants[3];
                }
              }

              break;
            }

          case _define.GFXDynamicState.STENCIL_WRITE_MASK:
            {
              if (stencilWriteMask) {
                switch (stencilWriteMask.face) {
                  case _define.GFXStencilFace.FRONT:
                    {
                      if (cache.dss.stencilWriteMaskFront !== stencilWriteMask.writeMask) {
                        gl.stencilMaskSeparate(gl.FRONT, stencilWriteMask.writeMask);
                        cache.dss.stencilWriteMaskFront = stencilWriteMask.writeMask;
                      }

                      break;
                    }

                  case _define.GFXStencilFace.BACK:
                    {
                      if (cache.dss.stencilWriteMaskBack !== stencilWriteMask.writeMask) {
                        gl.stencilMaskSeparate(gl.BACK, stencilWriteMask.writeMask);
                        cache.dss.stencilWriteMaskBack = stencilWriteMask.writeMask;
                      }

                      break;
                    }

                  case _define.GFXStencilFace.ALL:
                    {
                      if (cache.dss.stencilWriteMaskFront !== stencilWriteMask.writeMask || cache.dss.stencilWriteMaskBack !== stencilWriteMask.writeMask) {
                        gl.stencilMask(stencilWriteMask.writeMask);
                        cache.dss.stencilWriteMaskFront = stencilWriteMask.writeMask;
                        cache.dss.stencilWriteMaskBack = stencilWriteMask.writeMask;
                      }

                      break;
                    }
                }
              }

              break;
            }

          case _define.GFXDynamicState.STENCIL_COMPARE_MASK:
            {
              if (stencilCompareMask) {
                switch (stencilCompareMask.face) {
                  case _define.GFXStencilFace.FRONT:
                    {
                      if (cache.dss.stencilRefFront !== stencilCompareMask.reference || cache.dss.stencilReadMaskFront !== stencilCompareMask.compareMask) {
                        gl.stencilFuncSeparate(gl.FRONT, WebGLCmpFuncs[cache.dss.stencilFuncFront], stencilCompareMask.reference, stencilCompareMask.compareMask);
                        cache.dss.stencilRefFront = stencilCompareMask.reference;
                        cache.dss.stencilReadMaskFront = stencilCompareMask.compareMask;
                      }

                      break;
                    }

                  case _define.GFXStencilFace.BACK:
                    {
                      if (cache.dss.stencilRefBack !== stencilCompareMask.reference || cache.dss.stencilReadMaskBack !== stencilCompareMask.compareMask) {
                        gl.stencilFuncSeparate(gl.BACK, WebGLCmpFuncs[cache.dss.stencilFuncBack], stencilCompareMask.reference, stencilCompareMask.compareMask);
                        cache.dss.stencilRefBack = stencilCompareMask.reference;
                        cache.dss.stencilReadMaskBack = stencilCompareMask.compareMask;
                      }

                      break;
                    }

                  case _define.GFXStencilFace.ALL:
                    {
                      if (cache.dss.stencilRefFront !== stencilCompareMask.reference || cache.dss.stencilReadMaskFront !== stencilCompareMask.compareMask || cache.dss.stencilRefBack !== stencilCompareMask.reference || cache.dss.stencilReadMaskBack !== stencilCompareMask.compareMask) {
                        gl.stencilFunc(WebGLCmpFuncs[cache.dss.stencilFuncBack], stencilCompareMask.reference, stencilCompareMask.compareMask);
                        cache.dss.stencilRefFront = stencilCompareMask.reference;
                        cache.dss.stencilReadMaskFront = stencilCompareMask.compareMask;
                        cache.dss.stencilRefBack = stencilCompareMask.reference;
                        cache.dss.stencilReadMaskBack = stencilCompareMask.compareMask;
                      }

                      break;
                    }
                }
              }

              break;
            }
        } // switch

      } // for

    } // if

  }

  function WebGLCmdFuncDraw(device, drawInfo) {
    var gl = device.gl;
    var ia = device.ANGLE_instanced_arrays;
    var gpuInputAssembler = gfxStateCache.gpuInputAssembler,
        gpuShader = gfxStateCache.gpuShader,
        glPrimitive = gfxStateCache.glPrimitive;

    if (gpuInputAssembler && gpuShader) {
      if (gpuInputAssembler.gpuIndirectBuffer) {
        var diLen = gpuInputAssembler.gpuIndirectBuffer.indirects.length;

        for (var j = 0; j < diLen; j++) {
          var subDrawInfo = gpuInputAssembler.gpuIndirectBuffer.indirects[j];
          var gpuBuffer = gpuInputAssembler.gpuIndexBuffer;

          if (subDrawInfo.instanceCount && ia) {
            if (gpuBuffer && subDrawInfo.indexCount > -1) {
              var offset = subDrawInfo.firstIndex * gpuBuffer.stride;
              ia.drawElementsInstancedANGLE(glPrimitive, subDrawInfo.indexCount, gpuInputAssembler.glIndexType, offset, subDrawInfo.instanceCount);
            } else {
              ia.drawArraysInstancedANGLE(glPrimitive, subDrawInfo.firstVertex, subDrawInfo.vertexCount, subDrawInfo.instanceCount);
            }
          } else {
            if (gpuBuffer && subDrawInfo.indexCount > -1) {
              var _offset = subDrawInfo.firstIndex * gpuBuffer.stride;

              gl.drawElements(glPrimitive, subDrawInfo.indexCount, gpuInputAssembler.glIndexType, _offset);
            } else {
              gl.drawArrays(glPrimitive, subDrawInfo.firstVertex, subDrawInfo.vertexCount);
            }
          }
        }
      } else {
        var _gpuBuffer2 = gpuInputAssembler.gpuIndexBuffer;

        if (drawInfo.instanceCount && ia) {
          if (_gpuBuffer2 && drawInfo.indexCount > -1) {
            var _offset2 = drawInfo.firstIndex * _gpuBuffer2.stride;

            ia.drawElementsInstancedANGLE(glPrimitive, drawInfo.indexCount, gpuInputAssembler.glIndexType, _offset2, drawInfo.instanceCount);
          } else {
            ia.drawArraysInstancedANGLE(glPrimitive, drawInfo.firstVertex, drawInfo.vertexCount, drawInfo.instanceCount);
          }
        } else {
          if (_gpuBuffer2 && drawInfo.indexCount > -1) {
            var _offset3 = drawInfo.firstIndex * _gpuBuffer2.stride;

            gl.drawElements(glPrimitive, drawInfo.indexCount, gpuInputAssembler.glIndexType, _offset3);
          } else {
            gl.drawArrays(glPrimitive, drawInfo.firstVertex, drawInfo.vertexCount);
          }
        }
      }
    }
  }

  var cmdIds = new Array(WebGLCmd.COUNT);

  function WebGLCmdFuncExecuteCmds(device, cmdPackage) {
    cmdIds.fill(0);

    for (var i = 0; i < cmdPackage.cmds.length; ++i) {
      var cmd = cmdPackage.cmds.array[i];
      var cmdId = cmdIds[cmd]++;

      switch (cmd) {
        case WebGLCmd.BEGIN_RENDER_PASS:
          {
            var cmd0 = cmdPackage.beginRenderPassCmds.array[cmdId];
            WebGLCmdFuncBeginRenderPass(device, cmd0.gpuFramebuffer, cmd0.renderArea, cmd0.clearFlag, cmd0.clearColors, cmd0.clearDepth, cmd0.clearStencil);
            break;
          }

        /*
        case WebGLCmd.END_RENDER_PASS: {
            // WebGL 1.0 doesn't support store operation of attachments.
            // GFXStoreOp.Store is the default GL behavior.
            break;
        }
        */

        case WebGLCmd.BIND_STATES:
          {
            var cmd2 = cmdPackage.bindStatesCmds.array[cmdId];
            WebGLCmdFuncBindStates(device, cmd2.gpuPipelineState, cmd2.gpuBindingLayout, cmd2.gpuInputAssembler, cmd2.viewport, cmd2.scissor, cmd2.lineWidth, cmd2.depthBias, cmd2.blendConstants, cmd2.depthBounds, cmd2.stencilWriteMask, cmd2.stencilCompareMask);
            break;
          }

        case WebGLCmd.DRAW:
          {
            var cmd3 = cmdPackage.drawCmds.array[cmdId];
            WebGLCmdFuncDraw(device, cmd3.drawInfo);
            break;
          }

        case WebGLCmd.UPDATE_BUFFER:
          {
            var cmd4 = cmdPackage.updateBufferCmds.array[cmdId];
            WebGLCmdFuncUpdateBuffer(device, cmd4.gpuBuffer, cmd4.buffer, cmd4.offset, cmd4.size);
            break;
          }

        case WebGLCmd.COPY_BUFFER_TO_TEXTURE:
          {
            var cmd5 = cmdPackage.copyBufferToTextureCmds.array[cmdId];
            WebGLCmdFuncCopyBuffersToTexture(device, [cmd5.gpuBuffer.buffer], cmd5.gpuTexture, cmd5.regions);
            break;
          }
      } // switch

    } // for

  }

  function WebGLCmdFuncCopyTexImagesToTexture(device, texImages, gpuTexture, regions) {
    var gl = device.gl;
    var glTexUnit = device.stateCache.glTexUnits[device.stateCache.texUnit];

    if (glTexUnit.glTexture !== gpuTexture.glTexture) {
      gl.bindTexture(gpuTexture.glTarget, gpuTexture.glTexture);
      glTexUnit.glTexture = gpuTexture.glTexture;
    }

    var m = 0;
    var n = 0;
    var f = 0;

    switch (gpuTexture.glTarget) {
      case gl.TEXTURE_2D:
        {
          for (var i = 0; i < regions.length; i++) {
            var region = regions[i]; // console.debug('Copying image to texture 2D: ' + region.texExtent.width + ' x ' + region.texExtent.height);

            for (m = region.texSubres.baseMipLevel; m < region.texSubres.levelCount; ++m) {
              gl.texSubImage2D(gl.TEXTURE_2D, m, region.texOffset.x, region.texOffset.y, gpuTexture.glFormat, gpuTexture.glType, texImages[n++]);
            }
          }

          break;
        }

      case gl.TEXTURE_CUBE_MAP:
        {
          for (var _i11 = 0; _i11 < regions.length; _i11++) {
            var _region = regions[_i11]; // console.debug('Copying image to texture cube: ' + region.texExtent.width + ' x ' + region.texExtent.height);

            var fcount = _region.texSubres.baseArrayLayer + _region.texSubres.layerCount;

            for (f = _region.texSubres.baseArrayLayer; f < fcount; ++f) {
              var mcount = _region.texSubres.baseMipLevel + _region.texSubres.levelCount;

              for (m = _region.texSubres.baseMipLevel; m < mcount; ++m) {
                gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, m, _region.texOffset.x, _region.texOffset.y, gpuTexture.glFormat, gpuTexture.glType, texImages[n++]);
              }
            }
          }

          break;
        }

      default:
        {
          console.error('Unsupported GL texture type, copy buffer to texture failed.');
        }
    }

    if (gpuTexture.flags & _define.GFXTextureFlagBit.GEN_MIPMAP && gpuTexture.isPowerOf2) {
      gl.generateMipmap(gpuTexture.glTarget);
    }
  }

  function WebGLCmdFuncCopyBuffersToTexture(device, buffers, gpuTexture, regions) {
    var gl = device.gl;
    var glTexUnit = device.stateCache.glTexUnits[device.stateCache.texUnit];

    if (glTexUnit.glTexture !== gpuTexture.glTexture) {
      gl.bindTexture(gpuTexture.glTarget, gpuTexture.glTexture);
      glTexUnit.glTexture = gpuTexture.glTexture;
    }

    var m = 0;
    var n = 0;
    var w = 1;
    var h = 1;
    var f = 0;
    var fmtInfo = _define.GFXFormatInfos[gpuTexture.format];
    var isCompressed = fmtInfo.isCompressed;

    switch (gpuTexture.glTarget) {
      case gl.TEXTURE_2D:
        {
          for (var i = 0; i < regions.length; i++) {
            var region = regions[i];
            w = region.texExtent.width;
            h = region.texExtent.height; // console.debug('Copying buffer to texture 2D: ' + w + ' x ' + h);

            for (m = region.texSubres.baseMipLevel; m < region.texSubres.levelCount; ++m) {
              var pixels = buffers[n++];

              if (!isCompressed) {
                gl.texSubImage2D(gl.TEXTURE_2D, m, region.texOffset.x, region.texOffset.y, w, h, gpuTexture.glFormat, gpuTexture.glType, pixels);
              } else {
                if (gpuTexture.glInternelFmt !== _webglDefine.WebGLEXT.COMPRESSED_RGB_ETC1_WEBGL && !_defaultConstants.WECHAT) {
                  gl.compressedTexSubImage2D(gl.TEXTURE_2D, m, region.texOffset.x, region.texOffset.y, w, h, gpuTexture.glFormat, pixels);
                } else {
                  gl.compressedTexImage2D(gl.TEXTURE_2D, m, gpuTexture.glInternelFmt, w, h, 0, pixels);
                }
              }

              w = Math.max(1, w >> 1);
              h = Math.max(1, w >> 1);
            }
          }

          break;
        }

      case gl.TEXTURE_CUBE_MAP:
        {
          for (var _i12 = 0; _i12 < regions.length; _i12++) {
            var _region2 = regions[_i12];
            var fcount = _region2.texSubres.baseArrayLayer + _region2.texSubres.layerCount;

            for (f = _region2.texSubres.baseArrayLayer; f < fcount; ++f) {
              w = _region2.texExtent.width;
              h = _region2.texExtent.height; // console.debug('Copying buffer to texture cube: ' + w + ' x ' + h);

              var mcount = _region2.texSubres.baseMipLevel + _region2.texSubres.levelCount;

              for (m = _region2.texSubres.baseMipLevel; m < mcount; ++m) {
                var _pixels = buffers[n++];

                if (!isCompressed) {
                  gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, m, _region2.texOffset.x, _region2.texOffset.y, w, h, gpuTexture.glFormat, gpuTexture.glType, _pixels);
                } else {
                  if (gpuTexture.glInternelFmt !== _webglDefine.WebGLEXT.COMPRESSED_RGB_ETC1_WEBGL && !_defaultConstants.WECHAT) {
                    gl.compressedTexSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, m, _region2.texOffset.x, _region2.texOffset.y, w, h, gpuTexture.glFormat, _pixels);
                  } else {
                    gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, m, gpuTexture.glInternelFmt, w, h, 0, _pixels);
                  }
                }

                w = Math.max(1, w >> 1);
                h = Math.max(1, w >> 1);
              }
            }
          }

          break;
        }

      default:
        {
          console.error('Unsupported GL texture type, copy buffer to texture failed.');
        }
    }

    if (gpuTexture.flags & _define.GFXTextureFlagBit.GEN_MIPMAP) {
      gl.generateMipmap(gpuTexture.glTarget);
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,