(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../math/index.js", "./enums.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../math/index.js"), require("./enums.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.enums);
    global.aabb = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _enums) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _enums = _interopRequireDefault(_enums);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var _v3_tmp = new _index.Vec3();

  var _v3_tmp2 = new _index.Vec3();

  var _v3_tmp3 = new _index.Vec3();

  var _v3_tmp4 = new _index.Vec3();

  var _m3_tmp = new _index.Mat3(); // https://zeuxcg.org/2010/10/17/aabb-from-obb-with-component-wise-abs/


  var transform_extent_m4 = function transform_extent_m4(out, extent, m4) {
    _m3_tmp.m00 = Math.abs(m4.m00);
    _m3_tmp.m01 = Math.abs(m4.m01);
    _m3_tmp.m02 = Math.abs(m4.m02);
    _m3_tmp.m03 = Math.abs(m4.m04);
    _m3_tmp.m04 = Math.abs(m4.m05);
    _m3_tmp.m05 = Math.abs(m4.m06);
    _m3_tmp.m06 = Math.abs(m4.m08);
    _m3_tmp.m07 = Math.abs(m4.m09);
    _m3_tmp.m08 = Math.abs(m4.m10);

    _index.Vec3.transformMat3(out, extent, _m3_tmp);
  };
  /**
   * @en
   * Basic Geometry: Axis-aligned bounding box, using center and half extents structure.
   * @zh
   * 基础几何  轴对齐包围盒，使用中心点和半长宽高的结构。
   */
  // tslint:disable-next-line: class-name


  var aabb = /*#__PURE__*/function () {
    _createClass(aabb, [{
      key: "type",

      /**
       * @en
       * Gets the type of the shape.
       * @zh
       * 获取形状的类型。
       */
      get: function get() {
        return this._type;
      }
    }], [{
      key: "create",

      /**
       * @en
       * create a new aabb
       * @zh
       * 创建一个新的 aabb 实例。
       * @param px - aabb 的原点的 X 坐标。
       * @param py - aabb 的原点的 Y 坐标。
       * @param pz - aabb 的原点的 Z 坐标。
       * @param hw - aabb 宽度的一半。
       * @param hh - aabb 高度的一半。
       * @param hl - aabb 长度的一半。
       * @returns 返回新创建的 aabb 实例。
       */
      value: function create(px, py, pz, hw, hh, hl) {
        return new aabb(px, py, pz, hw, hh, hl);
      }
      /**
       * @en
       * clone a new aabb
       * @zh
       * 克隆一个 aabb。
       * @param a - 克隆的目标。
       * @returns 克隆出的 aabb。
       */

    }, {
      key: "clone",
      value: function clone(a) {
        return new aabb(a.center.x, a.center.y, a.center.z, a.halfExtents.x, a.halfExtents.y, a.halfExtents.z);
      }
      /**
       * @en
       * copy the values from one aabb to another
       * @zh
       * 将从一个 aabb 的值复制到另一个 aabb。
       * @param {aabb} out 接受操作的 aabb。
       * @param {aabb} a 被复制的 aabb。
       * @return {aabb} out 接受操作的 aabb。
       */

    }, {
      key: "copy",
      value: function copy(out, a) {
        _index.Vec3.copy(out.center, a.center);

        _index.Vec3.copy(out.halfExtents, a.halfExtents);

        return out;
      }
      /**
       * @en
       * create a new aabb from two corner points
       * @zh
       * 从两个点创建一个新的 aabb。
       * @param out - 接受操作的 aabb。
       * @param minPos - aabb 的最小点。
       * @param maxPos - aabb 的最大点。
       * @returns {aabb} out 接受操作的 aabb。
       */

    }, {
      key: "fromPoints",
      value: function fromPoints(out, minPos, maxPos) {
        _index.Vec3.add(_v3_tmp, maxPos, minPos);

        _index.Vec3.subtract(_v3_tmp2, maxPos, minPos);

        _index.Vec3.multiplyScalar(out.center, _v3_tmp, 0.5);

        _index.Vec3.multiplyScalar(out.halfExtents, _v3_tmp2, 0.5);

        return out;
      }
      /**
       * @en
       * Set the components of a aabb to the given values
       * @zh
       * 将 aabb 的属性设置为给定的值。
       * @param {aabb} out 接受操作的 aabb。
       * @param px - aabb 的原点的 X 坐标。
       * @param py - aabb 的原点的 Y 坐标。
       * @param pz - aabb 的原点的 Z 坐标。
       * @param hw - aabb 宽度的一半。
       * @param hh - aabb 高度的一半。
       * @param hl - aabb 长度度的一半。
       * @return {aabb} out 接受操作的 aabb。
       */

    }, {
      key: "set",
      value: function set(out, px, py, pz, hw, hh, hl) {
        _index.Vec3.set(out.center, px, py, pz);

        _index.Vec3.set(out.halfExtents, hw, hh, hl);

        return out;
      }
      /**
       * @en
       * Merge tow aabb.
       * @zh
       * 合并两个 aabb 到 out。
       * @param out 接受操作的 aabb。
       * @param a 输入的 aabb。
       * @param b 输入的 aabb。
       * @returns {aabb} out 接受操作的 aabb。
       */

    }, {
      key: "merge",
      value: function merge(out, a, b) {
        _index.Vec3.subtract(_v3_tmp, a.center, a.halfExtents);

        _index.Vec3.subtract(_v3_tmp2, b.center, b.halfExtents);

        _index.Vec3.add(_v3_tmp3, a.center, a.halfExtents);

        _index.Vec3.add(_v3_tmp4, b.center, b.halfExtents);

        _index.Vec3.max(_v3_tmp4, _v3_tmp3, _v3_tmp4);

        _index.Vec3.min(_v3_tmp3, _v3_tmp, _v3_tmp2);

        return aabb.fromPoints(out, _v3_tmp3, _v3_tmp4);
      }
      /**
       * @en
       * Transform this aabb.
       * @zh
       * 变换一个 aabb 到 out 中。
       * @param out 接受操作的 aabb。
       * @param a 输入的源 aabb。
       * @param matrix 矩阵。
       * @returns {aabb} out 接受操作的 aabb。
       */

    }, {
      key: "transform",
      value: function transform(out, a, matrix) {
        _index.Vec3.transformMat4(out.center, a.center, matrix);

        transform_extent_m4(out.halfExtents, a.halfExtents, matrix);
        return out;
      }
      /**
       * @zh
       * 本地坐标的中心点。
       */

    }]);

    function aabb() {
      var px = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var py = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var pz = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var hw = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
      var hh = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
      var hl = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;

      _classCallCheck(this, aabb);

      this.center = void 0;
      this.halfExtents = void 0;
      this._type = void 0;
      this._type = _enums.default.SHAPE_AABB;
      this.center = new _index.Vec3(px, py, pz);
      this.halfExtents = new _index.Vec3(hw, hh, hl);
    }
    /**
     * @en
     * Get the bounding points of this shape
     * @zh
     * 获取 aabb 的最小点和最大点。
     * @param {Vec3} minPos 最小点。
     * @param {Vec3} maxPos 最大点。
     */


    _createClass(aabb, [{
      key: "getBoundary",
      value: function getBoundary(minPos, maxPos) {
        _index.Vec3.subtract(minPos, this.center, this.halfExtents);

        _index.Vec3.add(maxPos, this.center, this.halfExtents);
      }
      /**
       * @en
       * Transform this shape
       * @zh
       * 将 out 根据这个 aabb 的数据进行变换。
       * @param m 变换的矩阵。
       * @param pos 变换的位置部分。
       * @param rot 变换的旋转部分。
       * @param scale 变换的缩放部分。
       * @param out 变换的目标。
       */

    }, {
      key: "transform",
      value: function transform(m, pos, rot, scale, out) {
        _index.Vec3.transformMat4(out.center, this.center, m);

        transform_extent_m4(out.halfExtents, this.halfExtents, m);
      }
      /**
       * @zh
       * 获得克隆。
       * @returns {aabb}
       */

    }, {
      key: "clone",
      value: function clone() {
        return aabb.clone(this);
      }
      /**
       * @zh
       * 拷贝对象。
       * @param a 拷贝的目标。
       * @returns {aabb}
       */

    }, {
      key: "copy",
      value: function copy(a) {
        return aabb.copy(this, a);
      }
    }]);

    return aabb;
  }();

  _exports.default = aabb;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,