(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../data/class-decorator.js", "../math/index.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../data/class-decorator.js"), require("../math/index.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.classDecorator, global.index);
    global.cubicSplineValue = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _classDecorator, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.CubicSplineNumberValue = _exports.CubicSplineQuatValue = _exports.CubicSplineVec4Value = _exports.CubicSplineVec3Value = _exports.CubicSplineVec2Value = void 0;

  var _dec2, _class4, _class5, _descriptor4, _descriptor5, _descriptor6, _temp2;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  function makeCubicSplineValueConstructor(name, constructorX, scaleFx, scaleAndAdd) {
    var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

    var tempValue = new constructorX();
    var m0 = new constructorX();
    var m1 = new constructorX();
    var CubicSplineValueClass = (_dec = (0, _classDecorator.ccclass)(name), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function () {
      function CubicSplineValueClass(dataPoint, inTangent, outTangent) {
        _classCallCheck(this, CubicSplineValueClass);

        _initializerDefineProperty(this, "dataPoint", _descriptor, this);

        _initializerDefineProperty(this, "inTangent", _descriptor2, this);

        _initializerDefineProperty(this, "outTangent", _descriptor3, this);

        this.dataPoint = dataPoint || new constructorX();
        this.inTangent = inTangent || new constructorX();
        this.outTangent = outTangent || new constructorX();
      }

      _createClass(CubicSplineValueClass, [{
        key: "lerp",
        value: function lerp(to, t, dt) {
          var p0 = this.dataPoint;
          var p1 = to.dataPoint; // dt => t_k+1 - t_k

          m0 = scaleFx(m0, this.inTangent, dt);
          m1 = scaleFx(m1, to.outTangent, dt);
          var t_3 = t * t * t;
          var t_2 = t * t;
          var f_0 = 2 * t_3 - 3 * t_2 + 1;
          var f_1 = t_3 - 2 * t_2 + t;
          var f_2 = -2 * t_3 + 3 * t_2;
          var f_3 = t_3 - t_2;
          tempValue = scaleFx(tempValue, p0, f_0);
          tempValue = scaleAndAdd(tempValue, tempValue, m0, f_1);
          tempValue = scaleAndAdd(tempValue, tempValue, p1, f_2);
          tempValue = scaleAndAdd(tempValue, tempValue, m1, f_3);
          return tempValue;
        }
      }, {
        key: "getNoLerp",
        value: function getNoLerp() {
          return this.dataPoint;
        }
      }]);

      return CubicSplineValueClass;
    }(), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "dataPoint", [_classDecorator.property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return new constructorX();
      }
    }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "inTangent", [_classDecorator.property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return new constructorX();
      }
    }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "outTangent", [_classDecorator.property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return new constructorX();
      }
    })), _class2)) || _class); // @ts-ignore TS2367

    if (constructorX === _index.Quat) {
      var _lerp = CubicSplineValueClass.prototype.lerp;

      CubicSplineValueClass.prototype.lerp = function (to, t, dt) {
        var result = _lerp.call(this, to, t, dt);

        _index.Quat.normalize(result, result);

        return result;
      };
    }

    return CubicSplineValueClass;
  }

  var CubicSplineVec2Value = makeCubicSplineValueConstructor('cc.CubicSplineVec2Value', _index.Vec2, _index.Vec2.multiplyScalar, _index.Vec2.scaleAndAdd);
  _exports.CubicSplineVec2Value = CubicSplineVec2Value;
  cc.CubicSplineVec2Value = CubicSplineVec2Value;
  var CubicSplineVec3Value = makeCubicSplineValueConstructor('cc.CubicSplineVec3Value', _index.Vec3, _index.Vec3.multiplyScalar, _index.Vec3.scaleAndAdd);
  _exports.CubicSplineVec3Value = CubicSplineVec3Value;
  cc.CubicSplineVec3Value = CubicSplineVec3Value;
  var CubicSplineVec4Value = makeCubicSplineValueConstructor('cc.CubicSplineVec4Value', _index.Vec4, _index.Vec4.multiplyScalar, _index.Vec4.scaleAndAdd);
  _exports.CubicSplineVec4Value = CubicSplineVec4Value;
  cc.CubicSplineVec4Value = CubicSplineVec4Value;
  var CubicSplineQuatValue = makeCubicSplineValueConstructor('cc.CubicSplineQuatValue', _index.Quat, _index.Quat.multiplyScalar, _index.Quat.scaleAndAdd);
  _exports.CubicSplineQuatValue = CubicSplineQuatValue;
  cc.CubicSplineQuatValue = CubicSplineQuatValue;
  var CubicSplineNumberValue = (_dec2 = (0, _classDecorator.ccclass)('cc.CubicSplineNumberValue'), _dec2(_class4 = (_class5 = (_temp2 = /*#__PURE__*/function () {
    function CubicSplineNumberValue(dataPoint, inTangent, outTangent) {
      _classCallCheck(this, CubicSplineNumberValue);

      _initializerDefineProperty(this, "dataPoint", _descriptor4, this);

      _initializerDefineProperty(this, "inTangent", _descriptor5, this);

      _initializerDefineProperty(this, "outTangent", _descriptor6, this);

      this.dataPoint = dataPoint;
      this.inTangent = inTangent;
      this.outTangent = outTangent;
    }

    _createClass(CubicSplineNumberValue, [{
      key: "lerp",
      value: function lerp(to, t, dt) {
        var p0 = this.dataPoint;
        var p1 = to.dataPoint; // dt => t_k+1 - t_k

        var m0 = this.outTangent * dt;
        var m1 = to.inTangent * dt;
        var t_3 = t * t * t;
        var t_2 = t * t;
        var f_0 = 2 * t_3 - 3 * t_2 + 1;
        var f_1 = t_3 - 2 * t_2 + t;
        var f_2 = -2 * t_3 + 3 * t_2;
        var f_3 = t_3 - t_2;
        return p0 * f_0 + m0 * f_1 + p1 * f_2 + m1 * f_3;
      }
    }, {
      key: "getNoLerp",
      value: function getNoLerp() {
        return this.dataPoint;
      }
    }]);

    return CubicSplineNumberValue;
  }(), _temp2), (_descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "dataPoint", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class5.prototype, "inTangent", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class5.prototype, "outTangent", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  })), _class5)) || _class4);
  _exports.CubicSplineNumberValue = CubicSplineNumberValue;
  cc.CubicSplineNumberValue = CubicSplineNumberValue;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,