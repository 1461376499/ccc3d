(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../math/index.js", "./enums.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../math/index.js"), require("./enums.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.enums);
    global.ray = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _enums) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _enums = _interopRequireDefault(_enums);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  /**
   * @en
   * Basic Geometry: ray.
   * @zh
   * 基础几何 射线。
   */
  // tslint:disable-next-line:class-name
  var ray = /*#__PURE__*/function () {
    _createClass(ray, [{
      key: "type",

      /**
       * @en
       * Gets the type of the shape.
       * @zh
       * 获取形状的类型。
       */
      get: function get() {
        return this._type;
      }
    }], [{
      key: "create",

      /**
       * @en
       * create a new ray
       * @zh
       * 创建一条射线。
       * @param {number} ox 起点的 x 部分。
       * @param {number} oy 起点的 y 部分。
       * @param {number} oz 起点的 z 部分。
       * @param {number} dx 方向的 x 部分。
       * @param {number} dy 方向的 y 部分。
       * @param {number} dz 方向的 z 部分。
       * @return {ray} 射线。
       */
      value: function create() {
        var ox = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var oy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var oz = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var dx = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
        var dy = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
        var dz = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;
        return new ray(ox, oy, oz, dx, dy, dz);
      }
      /**
       * @en
       * Creates a new ray initialized with values from an existing ray
       * @zh
       * 从一条射线克隆出一条新的射线。
       * @param {ray} a 克隆的目标。
       * @return {ray} 克隆出的新对象。
       */

    }, {
      key: "clone",
      value: function clone(a) {
        return new ray(a.o.x, a.o.y, a.o.z, a.d.x, a.d.y, a.d.z);
      }
      /**
       * @en
       * Copy the values from one ray to another
       * @zh
       * 将从一个 ray 的值复制到另一个 ray。
       * @param {ray} out 接受操作的 ray。
       * @param {ray} a 被复制的 ray。
       * @return {ray} out 接受操作的 ray。
       */

    }, {
      key: "copy",
      value: function copy(out, a) {
        _index.Vec3.copy(out.o, a.o);

        _index.Vec3.copy(out.d, a.d);

        return out;
      }
      /**
       * @en
       * create a ray from two points
       * @zh
       * 用两个点创建一条射线。
       * @param {ray} out 接受操作的射线。
       * @param {Vec3} origin 射线的起点。
       * @param {Vec3} target 射线上的一点。
       * @return {ray} out 接受操作的射线。
       */

    }, {
      key: "fromPoints",
      value: function fromPoints(out, origin, target) {
        _index.Vec3.copy(out.o, origin);

        _index.Vec3.normalize(out.d, _index.Vec3.subtract(out.d, target, origin));

        return out;
      }
      /**
       * @en
       * Set the components of a ray to the given values
       * @zh
       * 将给定射线的属性设置为给定的值。
       * @param {ray} out 接受操作的射线。
       * @param {number} ox 起点的 x 部分。
       * @param {number} oy 起点的 y 部分。
       * @param {number} oz 起点的 z 部分。
       * @param {number} dx 方向的 x 部分。
       * @param {number} dy 方向的 y 部分。
       * @param {number} dz 方向的 z 部分。
       * @return {ray} out 接受操作的射线。
       */

    }, {
      key: "set",
      value: function set(out, ox, oy, oz, dx, dy, dz) {
        out.o.x = ox;
        out.o.y = oy;
        out.o.z = oz;
        out.d.x = dx;
        out.d.y = dy;
        out.d.z = dz;
        return out;
      }
      /**
       * @en
       * The origin of the ray.
       * @zh
       * 起点。
       */

    }]);

    /**
     * @en
     * Construct a ray;
     * @zh
     * 构造一条射线。
     * @param {number} ox 起点的 x 部分。
     * @param {number} oy 起点的 y 部分。
     * @param {number} oz 起点的 z 部分。
     * @param {number} dx 方向的 x 部分。
     * @param {number} dy 方向的 y 部分。
     * @param {number} dz 方向的 z 部分。
     */
    function ray() {
      var ox = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var oy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var oz = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var dx = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var dy = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
      var dz = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : -1;

      _classCallCheck(this, ray);

      this.o = void 0;
      this.d = void 0;
      this._type = void 0;
      this._type = _enums.default.SHAPE_RAY;
      this.o = new _index.Vec3(ox, oy, oz);
      this.d = new _index.Vec3(dx, dy, dz);
    }
    /**
     * @en
     * Compute a point with the distance between the origin.
     * @zh
     * 根据给定距离计算出射线上的一点。
     * @param out 射线上的另一点。
     * @param distance 给定距离。
     */


    _createClass(ray, [{
      key: "computeHit",
      value: function computeHit(out, distance) {
        _index.Vec3.normalize(out, this.d);

        _index.Vec3.scaleAndAdd(out, this.o, out, distance);
      }
    }]);

    return ray;
  }();

  _exports.default = ray;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,