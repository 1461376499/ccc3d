(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../core/components/index.js", "../../core/components/ui-base/ui-transform-component.js", "../../core/data/class-decorator.js", "../../core/math/index.js", "../../core/platform/debug.js", "../../core/platform/event-manager/event-enum.js", "../../core/platform/view.js", "../../core/platform/visible-rect.js", "../../core/scene-graph/index.js", "../../core/scene-graph/node.js", "../../core/value-types/enum.js", "../../core/scene-graph/node-enum.js", "../../core/default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../core/components/index.js"), require("../../core/components/ui-base/ui-transform-component.js"), require("../../core/data/class-decorator.js"), require("../../core/math/index.js"), require("../../core/platform/debug.js"), require("../../core/platform/event-manager/event-enum.js"), require("../../core/platform/view.js"), require("../../core/platform/visible-rect.js"), require("../../core/scene-graph/index.js"), require("../../core/scene-graph/node.js"), require("../../core/value-types/enum.js"), require("../../core/scene-graph/node-enum.js"), require("../../core/default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.uiTransformComponent, global.classDecorator, global.index, global.debug, global.eventEnum, global.view, global.visibleRect, global.index, global.node, global._enum, global.nodeEnum, global.defaultConstants);
    global.widgetComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _uiTransformComponent, _classDecorator, _index2, _debug, _eventEnum, _view, _visibleRect, _index3, _node, _enum, _nodeEnum, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.getReadonlyNodeSize = getReadonlyNodeSize;
  _exports.computeInverseTransForTarget = computeInverseTransForTarget;
  _exports.WidgetComponent = _exports.AlignFlags = _exports.AlignMode = void 0;
  _visibleRect = _interopRequireDefault(_visibleRect);

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _class3, _temp;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  var _zeroVec3 = new _index2.Vec3(); // returns a readonly size of the node


  function getReadonlyNodeSize(parent) {
    if (parent instanceof _index3.Scene) {
      // @ts-ignore
      if (_defaultConstants.EDITOR) {
        // const canvasComp = parent.getComponentInChildren(CanvasComponent);
        if (!_view.View.instance) {
          throw new Error('cc.view uninitiated');
        }

        return _view.View.instance.getDesignResolutionSize();
      }

      return _visibleRect.default;
    } else {
      return parent.getContentSize();
    }
  }

  function computeInverseTransForTarget(widgetNode, target, out_inverseTranslate, out_inverseScale) {
    var scale = widgetNode.parent ? widgetNode.parent.getScale() : _zeroVec3;
    var scaleX = scale.x;
    var scaleY = scale.y;
    var translateX = 0;
    var translateY = 0;

    for (var node = widgetNode.parent;;) {
      if (!node) {
        // ERROR: widgetNode should be child of target
        out_inverseTranslate.x = out_inverseTranslate.y = 0;
        out_inverseScale.x = out_inverseScale.y = 1;
        return;
      }

      var pos = node.getPosition();
      translateX += pos.x;
      translateY += pos.y;
      node = node.parent; // loop increment

      if (node !== target) {
        scale = node ? node.getScale() : _zeroVec3;
        var sx = scale.x;
        var sy = scale.y;
        translateX *= sx;
        translateY *= sy;
        scaleX *= sx;
        scaleY *= sy;
      } else {
        break;
      }
    }

    out_inverseScale.x = scaleX !== 0 ? 1 / scaleX : 1;
    out_inverseScale.y = scaleY !== 0 ? 1 / scaleY : 1;
    out_inverseTranslate.x = -translateX;
    out_inverseTranslate.y = -translateY;
  }
  /**
   * @en Enum for Widget's alignment mode, indicating when the widget should refresh.
   *
   * @zh Widget 的对齐模式，表示 Widget 应该何时刷新。
   */


  var AlignMode;
  _exports.AlignMode = AlignMode;

  (function (AlignMode) {
    AlignMode[AlignMode["ONCE"] = 0] = "ONCE";
    AlignMode[AlignMode["ALWAYS"] = 1] = "ALWAYS";
    AlignMode[AlignMode["ON_WINDOW_RESIZE"] = 2] = "ON_WINDOW_RESIZE";
  })(AlignMode || (_exports.AlignMode = AlignMode = {}));

  (0, _enum.ccenum)(AlignMode);
  /**
   * @en Enum for Widget's alignment flag, indicating when the widget select alignment.
   *
   * @zh Widget 的对齐标志，表示 Widget 选择对齐状态。
   */

  var AlignFlags;
  _exports.AlignFlags = AlignFlags;

  (function (AlignFlags) {
    AlignFlags[AlignFlags["TOP"] = 1] = "TOP";
    AlignFlags[AlignFlags["MID"] = 2] = "MID";
    AlignFlags[AlignFlags["BOT"] = 4] = "BOT";
    AlignFlags[AlignFlags["LEFT"] = 8] = "LEFT";
    AlignFlags[AlignFlags["CENTER"] = 16] = "CENTER";
    AlignFlags[AlignFlags["RIGHT"] = 32] = "RIGHT";
    AlignFlags[AlignFlags["HORIZONTAL"] = 56] = "HORIZONTAL";
    AlignFlags[AlignFlags["VERTICAL"] = 7] = "VERTICAL";
  })(AlignFlags || (_exports.AlignFlags = AlignFlags = {}));

  var TOP_BOT = AlignFlags.TOP | AlignFlags.BOT;
  var LEFT_RIGHT = AlignFlags.LEFT | AlignFlags.RIGHT;
  /**
   * @en
   * Stores and manipulate the anchoring based on its parent.
   * Widget are used for GUI but can also be used for other things.
   * Widget will adjust current node's position and size automatically,
   * but the results after adjustment can not be obtained until the next frame unless you call [[updateAlignment]] manually.
   *
   * @zh Widget 组件，用于设置和适配其相对于父节点的边距，Widget 通常被用于 UI 界面，也可以用于其他地方。<br/>
   * Widget 会自动调整当前节点的坐标和宽高，不过目前调整后的结果要到下一帧才能在脚本里获取到，除非你先手动调用 [[updateAlignment]]。
   */

  var WidgetComponent = (_dec = (0, _classDecorator.ccclass)('cc.WidgetComponent'), _dec2 = (0, _classDecorator.help)('i18n:cc.WidgetComponent'), _dec3 = (0, _classDecorator.executionOrder)(110), _dec4 = (0, _classDecorator.menu)('UI/Widget'), _dec5 = (0, _classDecorator.requireComponent)(_uiTransformComponent.UITransformComponent), _dec6 = (0, _classDecorator.property)({
    type: _node.Node,
    tooltip: '对齐目标'
  }), _dec7 = (0, _classDecorator.property)({
    tooltip: '是否对齐上边'
  }), _dec8 = (0, _classDecorator.property)({
    tooltip: '是否对齐下边'
  }), _dec9 = (0, _classDecorator.property)({
    tooltip: '是否对齐左边'
  }), _dec10 = (0, _classDecorator.property)({
    tooltip: '是否对齐右边'
  }), _dec11 = (0, _classDecorator.property)({
    tooltip: '是否垂直方向对齐中点，开启此项会将垂直方向其他对齐选项取消'
  }), _dec12 = (0, _classDecorator.property)({
    tooltip: '是否水平方向对齐中点，开启此选项会将水平方向其他对齐选项取消'
  }), _dec13 = (0, _classDecorator.property)({
    visible: false
  }), _dec14 = (0, _classDecorator.property)({
    visible: false
  }), _dec15 = (0, _classDecorator.property)({
    type: AlignMode,
    tooltip: '指定 widget 的对齐方式，用于决定运行时 widget 应何时更新'
  }), _dec16 = (0, _classDecorator.property)({
    editorOnly: true
  }), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = _dec5(_class = (0, _classDecorator.executeInEditMode)(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Component) {
    _inherits(WidgetComponent, _Component);

    function WidgetComponent() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, WidgetComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(WidgetComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this._lastPos = new _index2.Vec3();
      _this._lastSize = new _index2.Size();
      _this._dirty = true;

      _initializerDefineProperty(_this, "_alignFlags", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_target", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_left", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_right", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_top", _descriptor5, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_bottom", _descriptor6, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_horizontalCenter", _descriptor7, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_verticalCenter", _descriptor8, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_isAbsLeft", _descriptor9, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_isAbsRight", _descriptor10, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_isAbsTop", _descriptor11, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_isAbsBottom", _descriptor12, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_isAbsHorizontalCenter", _descriptor13, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_isAbsVerticalCenter", _descriptor14, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_originalWidth", _descriptor15, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_originalHeight", _descriptor16, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_alignMode", _descriptor17, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_lockFlags", _descriptor18, _assertThisInitialized(_this));

      return _this;
    }

    _createClass(WidgetComponent, [{
      key: "updateAlignment",

      /**
       * @en
       * Immediately perform the widget alignment. You need to manually call this method only if
       * you need to get the latest results after the alignment before the end of current frame.
       *
       * @zh
       * 立刻执行 widget 对齐操作。这个接口一般不需要手工调用。
       * 只有当你需要在当前帧结束前获得 widget 对齐后的最新结果时才需要手动调用这个方法。
       *
       * @example
       * ```typescript
       * widget.top = 10;       // change top margin
       * cc.log(widget.node.y); // not yet changed
       * widget.updateAlignment();
       * cc.log(widget.node.y); // changed
       * ```
       */
      value: function updateAlignment() {
        cc._widgetManager.updateAlignment(this.node);
      }
    }, {
      key: "_validateTargetInDEV",
      value: function _validateTargetInDEV() {
        if (!_defaultConstants.DEV) {
          return;
        }

        var target = this._target;

        if (target) {
          var isParent = this.node !== target && this.node.isChildOf(target);

          if (!isParent) {
            (0, _debug.errorID)(6500);
            this.target = null;
          }
        }
      }
    }, {
      key: "setDirty",
      value: function setDirty() {
        this._recursiveDirty();
      }
    }, {
      key: "onEnable",
      value: function onEnable() {
        this.node.getPosition(this._lastPos);
        this.node.getContentSize(this._lastSize);

        cc._widgetManager.add(this);

        this._registerEvent();

        this._registerTargetEvents();
      }
    }, {
      key: "onDisable",
      value: function onDisable() {
        cc._widgetManager.remove(this);

        this._unregisterEvent();

        this._unregisterTargetEvents();
      }
    }, {
      key: "onDestroy",
      value: function onDestroy() {
        this._removeParentEvent();
      }
    }, {
      key: "_adjustWidgetToAllowMovingInEditor",
      value: function _adjustWidgetToAllowMovingInEditor(eventType) {
        if (
        /*!EDITOR ||*/
        !(eventType & _nodeEnum.TransformBit.POSITION)) {
          return;
        }

        if (cc._widgetManager.isAligning) {
          return;
        }

        var self = this;
        var newPos = self.node.getPosition();
        var oldPos = this._lastPos;
        var delta = new _index2.Vec3(newPos);
        delta.subtract(oldPos);
        var target = self.node.parent;
        var inverseScale = new _index2.Vec3(1, 1, 1);

        if (self.target) {
          target = self.target;
          computeInverseTransForTarget(self.node, target, new _index2.Vec3(), inverseScale);
        }

        if (!target) {
          return;
        }

        var targetSize = getReadonlyNodeSize(target);
        var deltaInPercent = new _index2.Vec3();

        if (targetSize.width !== 0 && targetSize.height !== 0) {
          _index2.Vec3.set(deltaInPercent, delta.x / targetSize.width, delta.y / targetSize.height, deltaInPercent.z);
        }

        if (self.isAlignTop) {
          self._top -= (self._isAbsTop ? delta.y : deltaInPercent.y) * inverseScale.y;
        }

        if (self.isAlignBottom) {
          self._bottom += (self._isAbsBottom ? delta.y : deltaInPercent.y) * inverseScale.y;
        }

        if (self.isAlignLeft) {
          self._left += (self._isAbsLeft ? delta.x : deltaInPercent.x) * inverseScale.x;
        }

        if (self.isAlignRight) {
          self._right -= (self._isAbsRight ? delta.x : deltaInPercent.x) * inverseScale.x;
        }

        if (self.isAlignHorizontalCenter) {
          self._horizontalCenter += (self._isAbsHorizontalCenter ? delta.x : deltaInPercent.x) * inverseScale.x;
        }

        if (self.isAlignVerticalCenter) {
          self._verticalCenter += (self._isAbsVerticalCenter ? delta.y : deltaInPercent.y) * inverseScale.y;
        }

        this._recursiveDirty();
      }
    }, {
      key: "_adjustWidgetToAllowResizingInEditor",
      value: function _adjustWidgetToAllowResizingInEditor() {
        // if (!EDITOR) {
        //     return;
        // }
        if (cc._widgetManager.isAligning) {
          return;
        }

        this.setDirty();
        var self = this;
        var newSize = self.node.getContentSize();
        var oldSize = this._lastSize;
        var delta = new _index2.Vec3(newSize.width - oldSize.width, newSize.height - oldSize.height, 0);
        var target = self.node.parent;
        var inverseScale = new _index2.Vec3(1, 1, 1);

        if (self.target) {
          target = self.target;
          computeInverseTransForTarget(self.node, target, new _index2.Vec3(), inverseScale);
        }

        if (!target) {
          return;
        }

        var targetSize = getReadonlyNodeSize(target);
        var deltaInPercent = new _index2.Vec3();

        if (targetSize.width !== 0 && targetSize.height !== 0) {
          _index2.Vec3.set(deltaInPercent, delta.x / targetSize.width, delta.y / targetSize.height, deltaInPercent.z);
        }

        var anchor = self.node.getAnchorPoint();

        if (self.isAlignTop) {
          self._top -= (self._isAbsTop ? delta.y : deltaInPercent.y) * (1 - anchor.y) * inverseScale.y;
        }

        if (self.isAlignBottom) {
          self._bottom -= (self._isAbsBottom ? delta.y : deltaInPercent.y) * anchor.y * inverseScale.y;
        }

        if (self.isAlignLeft) {
          self._left -= (self._isAbsLeft ? delta.x : deltaInPercent.x) * anchor.x * inverseScale.x;
        }

        if (self.isAlignRight) {
          self._right -= (self._isAbsRight ? delta.x : deltaInPercent.x) * (1 - anchor.x) * inverseScale.x;
        }

        this._recursiveDirty();
      }
    }, {
      key: "_adjustWidgetToAnchorChanged",
      value: function _adjustWidgetToAnchorChanged() {
        this.setDirty();
      }
    }, {
      key: "_adjustTargetToParentChanged",
      value: function _adjustTargetToParentChanged(oldParent) {
        if (oldParent) {
          this._unregisterOldParentEvents(oldParent);
        }

        if (this.node.getParent()) {
          this._registerTargetEvents();
        }
      }
    }, {
      key: "_registerEvent",
      value: function _registerEvent() {
        this.node.on(_eventEnum.SystemEventType.TRANSFORM_CHANGED, this._adjustWidgetToAllowMovingInEditor, this);
        this.node.on(_eventEnum.SystemEventType.SIZE_CHANGED, this._adjustWidgetToAllowResizingInEditor, this);
        this.node.on(_eventEnum.SystemEventType.ANCHOR_CHANGED, this._adjustWidgetToAnchorChanged, this);
        this.node.on(_eventEnum.SystemEventType.PARENT_CHANGED, this._adjustTargetToParentChanged, this);
      }
    }, {
      key: "_unregisterEvent",
      value: function _unregisterEvent() {
        this.node.off(_eventEnum.SystemEventType.TRANSFORM_CHANGED, this._adjustWidgetToAllowMovingInEditor, this);
        this.node.off(_eventEnum.SystemEventType.SIZE_CHANGED, this._adjustWidgetToAllowResizingInEditor, this);
        this.node.off(_eventEnum.SystemEventType.ANCHOR_CHANGED, this._adjustWidgetToAnchorChanged, this);
      }
    }, {
      key: "_removeParentEvent",
      value: function _removeParentEvent() {
        this.node.off(_eventEnum.SystemEventType.PARENT_CHANGED, this._adjustTargetToParentChanged, this);
      }
    }, {
      key: "_autoChangedValue",
      value: function _autoChangedValue(flag, isAbs) {
        var current = (this._alignFlags & flag) > 0;

        if (!current || !this.node.parent || !this.node.parent._uiProps.uiTransformComp) {
          return;
        }

        var size = this.node.parent.getContentSize();

        if (this.isAlignLeft && flag === AlignFlags.LEFT) {
          this._left = isAbs ? this._left * size.width : this._left / size.width;
        } else if (this.isAlignRight && flag === AlignFlags.RIGHT) {
          this._right = isAbs ? this._right * size.width : this._right / size.width;
        } else if (this.isAlignHorizontalCenter && flag === AlignFlags.CENTER) {
          this._horizontalCenter = isAbs ? this._horizontalCenter * size.width : this._horizontalCenter / size.width;
        } else if (this.isAlignTop && flag === AlignFlags.TOP) {
          this._top = isAbs ? this._top * size.height : this._top / size.height;
        } else if (this.isAlignBottom && flag === AlignFlags.BOT) {
          this._bottom = isAbs ? this._bottom * size.height : this._bottom / size.height;
        } else if (this.isAbsoluteVerticalCenter && flag === AlignFlags.MID) {
          this._verticalCenter = isAbs ? this._verticalCenter / size.height : this._verticalCenter / size.height;
        }

        this._recursiveDirty();
      }
    }, {
      key: "_registerTargetEvents",
      value: function _registerTargetEvents() {
        var target = this._target || this.node.parent;

        if (target) {
          if (target.getComponent(_uiTransformComponent.UITransformComponent)) {
            target.on(_eventEnum.SystemEventType.TRANSFORM_CHANGED, this._targetChangedOperation, this);
            target.on(_eventEnum.SystemEventType.SIZE_CHANGED, this._targetChangedOperation, this);
          } else {
            cc.warnID(6501, this.node.name);
          }
        }
      }
    }, {
      key: "_unregisterTargetEvents",
      value: function _unregisterTargetEvents() {
        var target = this._target || this.node.parent;

        if (target) {
          target.off(_eventEnum.SystemEventType.TRANSFORM_CHANGED, this._targetChangedOperation, this);
          target.off(_eventEnum.SystemEventType.SIZE_CHANGED, this._targetChangedOperation, this);
        }
      }
    }, {
      key: "_unregisterOldParentEvents",
      value: function _unregisterOldParentEvents(oldParent) {
        var target = this._target || oldParent;

        if (target) {
          target.off(_eventEnum.SystemEventType.TRANSFORM_CHANGED, this._targetChangedOperation, this);
          target.off(_eventEnum.SystemEventType.SIZE_CHANGED, this._targetChangedOperation, this);
        }
      }
    }, {
      key: "_targetChangedOperation",
      value: function _targetChangedOperation() {
        this._recursiveDirty();
      }
    }, {
      key: "_setAlign",
      value: function _setAlign(flag, isAlign) {
        var current = (this._alignFlags & flag) > 0;

        if (isAlign === current) {
          return;
        }

        var isHorizontal = (flag & LEFT_RIGHT) > 0;

        if (isAlign) {
          this._alignFlags |= flag;

          if (isHorizontal) {
            this.isAlignHorizontalCenter = false;

            if (this.isStretchWidth) {
              // become stretch
              this._originalWidth = this.node.width; // test check conflict

              if (_defaultConstants.EDITOR
              /*&& !cc.engine.isPlaying*/
              ) {// TODO:
                  // _Scene.DetectConflict.checkConflict_Widget(this);
                }
            }
          } else {
            this.isAlignVerticalCenter = false;

            if (this.isStretchHeight) {
              // become stretch
              this._originalHeight = this.node.height; // test check conflict

              if (_defaultConstants.EDITOR
              /*&& !cc.engine.isPlaying*/
              ) {// TODO:
                  // _Scene.DetectConflict.checkConflict_Widget(this);
                }
            }
          }

          if (_defaultConstants.EDITOR && this.node.parent) {
            // adjust the offsets to keep the size and position unchanged after alignment changed
            cc._widgetManager.updateOffsetsToStayPut(this, flag);
          }
        } else {
          if (isHorizontal) {
            if (this.isStretchWidth) {
              // will cancel stretch
              this.node.width = this._originalWidth;
            }
          } else {
            if (this.isStretchHeight) {
              // will cancel stretch
              this.node.height = this._originalHeight;
            }
          }

          this._alignFlags &= ~flag;
        }
      }
    }, {
      key: "_recursiveDirty",
      value: function _recursiveDirty() {
        if (this._dirty) {
          return;
        }

        this._dirty = true;
      }
    }, {
      key: "target",

      /**
       * @en
       * Specifies an alignment target that can only be one of the parent nodes of the current node.
       * The default value is null, and when null, indicates the current parent.
       *
       * @zh
       * 指定一个对齐目标，只能是当前节点的其中一个父节点，默认为空，为空时表示当前父节点。
       */
      get: function get() {
        return this._target;
      },
      set: function set(value) {
        if (this._target === value) {
          return;
        }

        this._unregisterTargetEvents();

        this._target = value;

        this._registerTargetEvents();

        if (_defaultConstants.EDITOR
        /*&& !cc.engine._isPlaying*/
        && this.node.parent) {
          // adjust the offsets to keep the size and position unchanged after target changed
          cc._widgetManager.updateOffsetsToStayPut(this);
        }

        this._validateTargetInDEV();

        this._recursiveDirty();
      }
      /**
       * @en
       * Whether to align to the top.
       *
       * @zh
       * 是否对齐上边。
       */

    }, {
      key: "isAlignTop",
      get: function get() {
        return (this._alignFlags & AlignFlags.TOP) > 0;
      },
      set: function set(value) {
        this._setAlign(AlignFlags.TOP, value);

        this._recursiveDirty();
      }
      /**
       * @en
       * Whether to align to the bottom.
       *
       * @zh
       * 是否对齐下边。
       */

    }, {
      key: "isAlignBottom",
      get: function get() {
        return (this._alignFlags & AlignFlags.BOT) > 0;
      },
      set: function set(value) {
        this._setAlign(AlignFlags.BOT, value);

        this._recursiveDirty();
      }
      /**
       * @en
       * Whether to align to the left.
       *
       * @zh
       * 是否对齐左边。
       */

    }, {
      key: "isAlignLeft",
      get: function get() {
        return (this._alignFlags & AlignFlags.LEFT) > 0;
      },
      set: function set(value) {
        this._setAlign(AlignFlags.LEFT, value);

        this._recursiveDirty();
      }
      /**
       * @en
       * Whether to align to the right.
       *
       * @zh
       * 是否对齐右边。
       */

    }, {
      key: "isAlignRight",
      get: function get() {
        return (this._alignFlags & AlignFlags.RIGHT) > 0;
      },
      set: function set(value) {
        this._setAlign(AlignFlags.RIGHT, value);

        this._recursiveDirty();
      }
      /**
       * @en
       * Whether to align vertically.
       *
       * @zh
       * 是否垂直方向对齐中点，开启此项会将垂直方向其他对齐选项取消。
       */

    }, {
      key: "isAlignVerticalCenter",
      get: function get() {
        return (this._alignFlags & AlignFlags.MID) > 0;
      },
      set: function set(value) {
        if (value) {
          this.isAlignTop = false;
          this.isAlignBottom = false;
          this._alignFlags |= AlignFlags.MID;
        } else {
          this._alignFlags &= ~AlignFlags.MID;
        }

        this._recursiveDirty();
      }
      /**
       * @en
       * Whether to align horizontally.
       *
       * @zh
       * 是否水平方向对齐中点，开启此选项会将水平方向其他对齐选项取消。
       */

    }, {
      key: "isAlignHorizontalCenter",
      get: function get() {
        return (this._alignFlags & AlignFlags.CENTER) > 0;
      },
      set: function set(value) {
        if (value) {
          this.isAlignLeft = false;
          this.isAlignRight = false;
          this._alignFlags |= AlignFlags.CENTER;
        } else {
          this._alignFlags &= ~AlignFlags.CENTER;
        }

        this._recursiveDirty();
      }
      /**
       * @en
       * Whether to stretch horizontally, when enable the left and right alignment will be stretched horizontally,
       * the width setting is invalid (read only).
       *
       * @zh
       * 当前是否水平拉伸。当同时启用左右对齐时，节点将会被水平拉伸。此时节点的宽度（只读）。
       */

    }, {
      key: "isStretchWidth",
      get: function get() {
        return (this._alignFlags & LEFT_RIGHT) === LEFT_RIGHT;
      }
      /**
       * @en
       * Whether to stretch vertically, when enable the left and right alignment will be stretched vertically,
       * then height setting is invalid (read only).
       *
       * @zh
       * 当前是否垂直拉伸。当同时启用上下对齐时，节点将会被垂直拉伸，此时节点的高度（只读）。
       */

    }, {
      key: "isStretchHeight",
      get: function get() {
        return (this._alignFlags & TOP_BOT) === TOP_BOT;
      } // ALIGN MARGINS

      /**
       * @en
       * The margins between the top of this node and the top of parent node,
       * the value can be negative, Only available in 'isAlignTop' open.
       *
       * @zh
       * 本节点顶边和父节点顶边的距离，可填写负值，只有在 isAlignTop 开启时才有作用。
       */

    }, {
      key: "top",
      get: function get() {
        return this._top;
      },
      set: function set(value) {
        this._top = value;

        this._recursiveDirty();
      }
      /**
       * @EditorOnly Not for user
       */

    }, {
      key: "editorTop",
      get: function get() {
        return this._isAbsTop ? this._top : this._top * 100;
      },
      set: function set(value) {
        this._top = this._isAbsTop ? value : value / 100;

        this._recursiveDirty();
      }
      /**
       * @en
       * The margins between the bottom of this node and the bottom of parent node,
       * the value can be negative, Only available in 'isAlignBottom' open.
       *
       * @zh
       * 本节点底边和父节点底边的距离，可填写负值，只有在 isAlignBottom 开启时才有作用。
       */

    }, {
      key: "bottom",
      get: function get() {
        return this._bottom;
      },
      set: function set(value) {
        this._bottom = value;

        this._recursiveDirty();
      }
      /**
       * @EditorOnly Not for user
       */

    }, {
      key: "editorBottom",
      get: function get() {
        return this._isAbsBottom ? this._bottom : this._bottom * 100;
      },
      set: function set(value) {
        this._bottom = this._isAbsBottom ? value : value / 100;

        this._recursiveDirty();
      }
      /**
       * @en
       * The margins between the left of this node and the left of parent node,
       * the value can be negative, Only available in 'isAlignLeft' open.
       *
       * @zh
       * 本节点左边和父节点左边的距离，可填写负值，只有在 isAlignLeft 开启时才有作用。
       */

    }, {
      key: "left",
      get: function get() {
        return this._left;
      },
      set: function set(value) {
        this._left = value;

        this._recursiveDirty();
      }
      /**
       * @EditorOnly Not for user
       */

    }, {
      key: "editorLeft",
      get: function get() {
        return this._isAbsLeft ? this._left : this._left * 100;
      },
      set: function set(value) {
        this._left = this._isAbsLeft ? value : value / 100;

        this._recursiveDirty();
      }
      /**
       * @en
       * The margins between the right of this node and the right of parent node,
       * the value can be negative, Only available in 'isAlignRight' open.
       *
       * @zh
       * 本节点右边和父节点右边的距离，可填写负值，只有在 isAlignRight 开启时才有作用。
       */

    }, {
      key: "right",
      get: function get() {
        return this._right;
      },
      set: function set(value) {
        this._right = value;

        this._recursiveDirty();
      }
      /**
       * @EditorOnly Not for user
       */

    }, {
      key: "editorRight",
      get: function get() {
        return this._isAbsRight ? this._right : this._right * 100;
      },
      set: function set(value) {
        this._right = this._isAbsRight ? value : value / 100;

        this._recursiveDirty();
      }
      /**
       * @en
       * Horizontally aligns the midpoint offset value,
       * the value can be negative, Only available in 'isAlignHorizontalCenter' open.
       *
       * @zh
       * 水平居中的偏移值，可填写负值，只有在 isAlignHorizontalCenter 开启时才有作用。
       */

    }, {
      key: "horizontalCenter",
      get: function get() {
        return this._horizontalCenter;
      },
      set: function set(value) {
        this._horizontalCenter = value;

        this._recursiveDirty();
      }
      /**
       * @EditorOnly Not for user
       */

    }, {
      key: "editorHorizontalCenter",
      get: function get() {
        return this._isAbsHorizontalCenter ? this._horizontalCenter : this._horizontalCenter * 100;
      },
      set: function set(value) {
        this._horizontalCenter = this._isAbsHorizontalCenter ? value : value / 100;

        this._recursiveDirty();
      }
      /**
       * @en
       * Vertically aligns the midpoint offset value,
       * the value can be negative, Only available in 'isAlignVerticalCenter' open.
       *
       * @zh
       * 垂直居中的偏移值，可填写负值，只有在 isAlignVerticalCenter 开启时才有作用。
       */

    }, {
      key: "verticalCenter",
      get: function get() {
        return this._verticalCenter;
      },
      set: function set(value) {
        this._verticalCenter = value;

        this._recursiveDirty();
      }
      /**
       * @EditorOnly Not for user
       */

    }, {
      key: "editorVerticalCenter",
      get: function get() {
        return this._isAbsVerticalCenter ? this._verticalCenter : this._verticalCenter * 100;
      },
      set: function set(value) {
        this._verticalCenter = this._isAbsVerticalCenter ? value : value / 100;

        this._recursiveDirty();
      }
      /**
       * @en
       * If true, top is pixel margin, otherwise is percentage (0 - 1) margin relative to the parent's height.
       *
       * @zh
       * 如果为 true，"top" 将会以像素作为边距，否则将会以相对父物体高度的比例（0 到 1）作为边距。
       */

    }, {
      key: "isAbsoluteTop",
      get: function get() {
        return this._isAbsTop;
      },
      set: function set(value) {
        if (this._isAbsTop === value) {
          return;
        }

        this._isAbsTop = value;

        this._autoChangedValue(AlignFlags.TOP, this._isAbsTop);
      }
      /**
       * @en
       * If true, bottom is pixel margin, otherwise is percentage (0 - 1) margin relative to the parent's height.
       *
       * @zh
       * 如果为 true，"bottom" 将会以像素作为边距，否则将会以相对父物体高度的比例（0 到 1）作为边距。
       */

    }, {
      key: "isAbsoluteBottom",
      get: function get() {
        return this._isAbsBottom;
      },
      set: function set(value) {
        if (this._isAbsBottom === value) {
          return;
        }

        this._isAbsBottom = value;

        this._autoChangedValue(AlignFlags.BOT, this._isAbsBottom);
      }
      /**
       * @en
       * If true, left is pixel margin, otherwise is percentage (0 - 1) margin relative to the parent's width.
       *
       * @zh
       * 如果为 true，"left" 将会以像素作为边距，否则将会以相对父物体宽度的比例（0 到 1）作为边距。
       */

    }, {
      key: "isAbsoluteLeft",
      get: function get() {
        return this._isAbsLeft;
      },
      set: function set(value) {
        if (this._isAbsLeft === value) {
          return;
        }

        this._isAbsLeft = value;

        this._autoChangedValue(AlignFlags.LEFT, this._isAbsLeft);
      }
      /**
       * @en
       * If true, right is pixel margin, otherwise is percentage (0 - 1) margin relative to the parent's width.
       *
       * @zh
       * 如果为 true，"right" 将会以像素作为边距，否则将会以相对父物体宽度的比例（0 到 1）作为边距。
       */

    }, {
      key: "isAbsoluteRight",
      get: function get() {
        return this._isAbsRight;
      },
      set: function set(value) {
        if (this._isAbsRight === value) {
          return;
        }

        this._isAbsRight = value;

        this._autoChangedValue(AlignFlags.RIGHT, this._isAbsRight);
      }
      /**
       * @en
       * If true, horizontalCenter is pixel margin, otherwise is percentage (0 - 1) margin.
       *
       * @zh
       * 如果为 true，"horizontalCenter" 将会以像素作为偏移值，反之为比例（0 到 1）。
       */

    }, {
      key: "isAbsoluteHorizontalCenter",
      get: function get() {
        return this._isAbsHorizontalCenter;
      },
      set: function set(value) {
        if (this._isAbsHorizontalCenter === value) {
          return;
        }

        this._isAbsHorizontalCenter = value;

        this._autoChangedValue(AlignFlags.CENTER, this._isAbsHorizontalCenter);
      }
      /**
       * @en
       * If true, verticalCenter is pixel margin, otherwise is percentage (0 - 1) margin.
       *
       * @zh
       * 如果为 true，"verticalCenter" 将会以像素作为偏移值，反之为比例（0 到 1）。
       */

    }, {
      key: "isAbsoluteVerticalCenter",
      get: function get() {
        return this._isAbsVerticalCenter;
      },
      set: function set(value) {
        if (this._isAbsVerticalCenter === value) {
          return;
        }

        this._isAbsVerticalCenter = value;

        this._autoChangedValue(AlignFlags.MID, this._isAbsVerticalCenter);
      }
      /**
       * @en
       * Specifies the alignment mode of the Widget, which determines when the widget should refresh.
       *
       * @zh
       * 指定 Widget 的对齐模式，用于决定 Widget 应该何时刷新。
       *
       * @example
       * ```
       * widget.alignMode = cc.Widget.AlignMode.ON_WINDOW_RESIZE;
       * ```
       */

    }, {
      key: "alignMode",
      get: function get() {
        return this._alignMode;
      },
      set: function set(value) {
        this._alignMode = value;

        this._recursiveDirty();
      }
      /**
       * @zh
       * 对齐开关，由 AlignFlags 组成
       */

    }, {
      key: "alignFlags",
      get: function get() {
        return this._alignFlags;
      },
      set: function set(value) {
        if (this._alignFlags === value) {
          return;
        }

        this._alignFlags = value;

        this._recursiveDirty();
      }
    }]);

    return WidgetComponent;
  }(_index.Component), _class3.AlignMode = AlignMode, _temp), (_applyDecoratedDescriptor(_class2.prototype, "target", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "target"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "isAlignTop", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "isAlignTop"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "isAlignBottom", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "isAlignBottom"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "isAlignLeft", [_dec9], Object.getOwnPropertyDescriptor(_class2.prototype, "isAlignLeft"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "isAlignRight", [_dec10], Object.getOwnPropertyDescriptor(_class2.prototype, "isAlignRight"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "isAlignVerticalCenter", [_dec11], Object.getOwnPropertyDescriptor(_class2.prototype, "isAlignVerticalCenter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "isAlignHorizontalCenter", [_dec12], Object.getOwnPropertyDescriptor(_class2.prototype, "isAlignHorizontalCenter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "isStretchWidth", [_dec13], Object.getOwnPropertyDescriptor(_class2.prototype, "isStretchWidth"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "isStretchHeight", [_dec14], Object.getOwnPropertyDescriptor(_class2.prototype, "isStretchHeight"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "editorTop", [_classDecorator.property], Object.getOwnPropertyDescriptor(_class2.prototype, "editorTop"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "editorBottom", [_classDecorator.property], Object.getOwnPropertyDescriptor(_class2.prototype, "editorBottom"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "editorLeft", [_classDecorator.property], Object.getOwnPropertyDescriptor(_class2.prototype, "editorLeft"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "editorRight", [_classDecorator.property], Object.getOwnPropertyDescriptor(_class2.prototype, "editorRight"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "editorHorizontalCenter", [_classDecorator.property], Object.getOwnPropertyDescriptor(_class2.prototype, "editorHorizontalCenter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "editorVerticalCenter", [_classDecorator.property], Object.getOwnPropertyDescriptor(_class2.prototype, "editorVerticalCenter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "isAbsoluteTop", [_classDecorator.property], Object.getOwnPropertyDescriptor(_class2.prototype, "isAbsoluteTop"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "isAbsoluteBottom", [_classDecorator.property], Object.getOwnPropertyDescriptor(_class2.prototype, "isAbsoluteBottom"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "isAbsoluteLeft", [_classDecorator.property], Object.getOwnPropertyDescriptor(_class2.prototype, "isAbsoluteLeft"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "isAbsoluteRight", [_classDecorator.property], Object.getOwnPropertyDescriptor(_class2.prototype, "isAbsoluteRight"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "isAbsoluteHorizontalCenter", [_classDecorator.property], Object.getOwnPropertyDescriptor(_class2.prototype, "isAbsoluteHorizontalCenter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "isAbsoluteVerticalCenter", [_classDecorator.property], Object.getOwnPropertyDescriptor(_class2.prototype, "isAbsoluteVerticalCenter"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "alignMode", [_dec15], Object.getOwnPropertyDescriptor(_class2.prototype, "alignMode"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "alignFlags", [_classDecorator.property], Object.getOwnPropertyDescriptor(_class2.prototype, "alignFlags"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_alignFlags", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_target", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_left", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_right", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_top", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "_bottom", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "_horizontalCenter", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "_verticalCenter", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "_isAbsLeft", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "_isAbsRight", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "_isAbsTop", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "_isAbsBottom", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "_isAbsHorizontalCenter", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "_isAbsVerticalCenter", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "_originalWidth", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "_originalHeight", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "_alignMode", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return AlignMode.ON_WINDOW_RESIZE;
    }
  }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "_lockFlags", [_dec16], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  })), _class2)) || _class) || _class) || _class) || _class) || _class) || _class);
  _exports.WidgetComponent = WidgetComponent;

  (function (_WidgetComponent) {})(WidgetComponent || (_exports.WidgetComponent = WidgetComponent = {})); // @ts-ignore


  cc.WidgetComponent = WidgetComponent; // cc.Widget = module.exports = Widget;

  cc.internal.computeInverseTransForTarget = computeInverseTransForTarget;
  cc.internal.getReadonlyNodeSize = getReadonlyNodeSize;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,