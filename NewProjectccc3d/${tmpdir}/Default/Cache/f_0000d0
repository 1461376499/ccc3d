(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../assets/mesh.js", "../../gfx/define.js", "../../math/index.js", "./buffer.js", "./buffer-blob.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../assets/mesh.js"), require("../../gfx/define.js"), require("../../math/index.js"), require("./buffer.js"), require("./buffer-blob.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.mesh, global.define, global.index, global.buffer, global.bufferBlob);
    global.createMesh = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _mesh, _define, _index, _buffer, _bufferBlob) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.createMesh = createMesh;

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  var _defAttrs = [{
    name: _define.GFXAttributeName.ATTR_POSITION,
    format: _define.GFXFormat.RGB32F
  }, {
    name: _define.GFXAttributeName.ATTR_NORMAL,
    format: _define.GFXFormat.RGB32F
  }, {
    name: _define.GFXAttributeName.ATTR_TEX_COORD,
    format: _define.GFXFormat.RG32F
  }, {
    name: _define.GFXAttributeName.ATTR_COLOR,
    format: _define.GFXFormat.RGBA32F
  }];
  var v3_1 = new _index.Vec3();

  function createMesh(geometry, out, options) {
    options = options || {}; // Collect attributes and calculate length of result vertex buffer.

    var attributes = [];
    var stride = 0;
    var channels = [];
    var vertCount = 0;
    var attr;

    if (geometry.positions.length > 0) {
      attr = null;

      if (geometry.attributes) {
        var _iterator = _createForOfIteratorHelper(geometry.attributes),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var att = _step.value;

            if (att.name === _define.GFXAttributeName.ATTR_POSITION) {
              attr = att;
              break;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      if (!attr) {
        attr = _defAttrs[0];
      }

      var info = _define.GFXFormatInfos[attr.format];
      attributes.push(attr);
      vertCount = Math.max(vertCount, Math.floor(geometry.positions.length / info.count));
      channels.push({
        offset: stride,
        data: geometry.positions,
        attribute: attr
      });
      stride += info.size;
    }

    if (geometry.normals && geometry.normals.length > 0) {
      attr = null;

      if (geometry.attributes) {
        var _iterator2 = _createForOfIteratorHelper(geometry.attributes),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var _att = _step2.value;

            if (_att.name === _define.GFXAttributeName.ATTR_NORMAL) {
              attr = _att;
              break;
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }

      if (!attr) {
        attr = _defAttrs[1];
      }

      var _info = _define.GFXFormatInfos[attr.format];
      attributes.push(attr);
      vertCount = Math.max(vertCount, Math.floor(geometry.normals.length / _info.count));
      channels.push({
        offset: stride,
        data: geometry.normals,
        attribute: attr
      });
      stride += _info.size;
    }

    if (geometry.uvs && geometry.uvs.length > 0) {
      attr = null;

      if (geometry.attributes) {
        var _iterator3 = _createForOfIteratorHelper(geometry.attributes),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _att2 = _step3.value;

            if (_att2.name === _define.GFXAttributeName.ATTR_TEX_COORD) {
              attr = _att2;
              break;
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }

      if (!attr) {
        attr = _defAttrs[2];
      }

      var _info2 = _define.GFXFormatInfos[attr.format];
      attributes.push(attr);
      vertCount = Math.max(vertCount, Math.floor(geometry.uvs.length / _info2.count));
      channels.push({
        offset: stride,
        data: geometry.uvs,
        attribute: attr
      });
      stride += _info2.size;
    }

    if (geometry.colors && geometry.colors.length > 0) {
      attr = null;

      if (geometry.attributes) {
        var _iterator4 = _createForOfIteratorHelper(geometry.attributes),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var _att3 = _step4.value;

            if (_att3.name === _define.GFXAttributeName.ATTR_COLOR) {
              attr = _att3;
              break;
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      }

      if (!attr) {
        attr = _defAttrs[3];
      }

      var _info3 = _define.GFXFormatInfos[attr.format];
      attributes.push(attr);
      vertCount = Math.max(vertCount, Math.floor(geometry.colors.length / _info3.count));
      channels.push({
        offset: stride,
        data: geometry.colors,
        attribute: attr
      });
      stride += _info3.size;
    }

    if (geometry.customAttributes) {
      var _iterator5 = _createForOfIteratorHelper(geometry.customAttributes),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var ca = _step5.value;
          var _info4 = _define.GFXFormatInfos[ca.attr.format];
          attributes.push(ca.attr);
          vertCount = Math.max(vertCount, Math.floor(ca.values.length / _info4.count));
          channels.push({
            offset: stride,
            data: ca.values,
            attribute: ca.attr
          });
          stride += _info4.size;
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    } // Use this to generate final merged buffer.


    var bufferBlob = new _bufferBlob.BufferBlob(); // Fill vertex buffer.

    var vertexBuffer = new ArrayBuffer(vertCount * stride);
    var vertexBufferView = new DataView(vertexBuffer);

    for (var _i = 0, _channels = channels; _i < _channels.length; _i++) {
      var channel = _channels[_i];
      (0, _buffer.writeBuffer)(vertexBufferView, channel.data, channel.attribute.format, channel.offset, stride);
    }

    bufferBlob.setNextAlignment(0);
    var vertexBundle = {
      attributes: attributes,
      view: {
        offset: bufferBlob.getLength(),
        length: vertexBuffer.byteLength,
        count: vertCount,
        stride: stride
      }
    };
    bufferBlob.addBuffer(vertexBuffer); // Fill index buffer.

    var indexBuffer = null;
    var idxCount = 0;
    var idxStride = 2;

    if (geometry.indices) {
      var indices = geometry.indices;
      idxCount = indices.length;
      indexBuffer = new ArrayBuffer(idxStride * idxCount);
      var indexBufferView = new DataView(indexBuffer);
      (0, _buffer.writeBuffer)(indexBufferView, indices, _define.GFXFormat.R16UI);
    } // Create primitive.


    var primitive = {
      primitiveMode: geometry.primitiveMode || _define.GFXPrimitiveMode.TRIANGLE_LIST,
      vertexBundelIndices: [0]
    };

    if (indexBuffer) {
      bufferBlob.setNextAlignment(idxStride);
      primitive.indexView = {
        offset: bufferBlob.getLength(),
        length: indexBuffer.byteLength,
        count: idxCount,
        stride: idxStride
      };
      bufferBlob.addBuffer(indexBuffer);
    }

    var minPosition = geometry.minPos;

    if (!minPosition && options.calculateBounds) {
      minPosition = _index.Vec3.set(new _index.Vec3(), Infinity, Infinity, Infinity);

      for (var iVertex = 0; iVertex < vertCount; ++iVertex) {
        _index.Vec3.set(v3_1, geometry.positions[iVertex * 3 + 0], geometry.positions[iVertex * 3 + 1], geometry.positions[iVertex * 3 + 2]);

        _index.Vec3.min(minPosition, minPosition, v3_1);
      }
    }

    var maxPosition = geometry.maxPos;

    if (!maxPosition && options.calculateBounds) {
      maxPosition = _index.Vec3.set(new _index.Vec3(), -Infinity, -Infinity, -Infinity);

      for (var _iVertex = 0; _iVertex < vertCount; ++_iVertex) {
        _index.Vec3.set(v3_1, geometry.positions[_iVertex * 3 + 0], geometry.positions[_iVertex * 3 + 1], geometry.positions[_iVertex * 3 + 2]);

        _index.Vec3.max(maxPosition, maxPosition, v3_1);
      }
    } // Create mesh struct.


    var meshStruct = {
      vertexBundles: [vertexBundle],
      primitives: [primitive]
    };

    if (minPosition) {
      meshStruct.minPosition = new _index.Vec3(minPosition.x, minPosition.y, minPosition.z);
    }

    if (maxPosition) {
      meshStruct.maxPosition = new _index.Vec3(maxPosition.x, maxPosition.y, maxPosition.z);
    } // Create mesh.


    if (!out) {
      out = new _mesh.Mesh();
    }

    out.reset({
      struct: meshStruct,
      data: new Uint8Array(bufferBlob.getCombined())
    });
    return out;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,