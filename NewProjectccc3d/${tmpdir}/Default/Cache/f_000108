(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../utils/js.js", "../platform/debug.js", "./loading-items.js", "./utils.js", "../default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../utils/js.js"), require("../platform/debug.js"), require("./loading-items.js"), require("./utils.js"), require("../default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.js, global.debug, global.loadingItems, global.utils, global.defaultConstants);
    global.uuidLoader = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, js, _debug, _loadingItems, _utils, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.isSceneObj = isSceneObj;
  _exports.loadUuid = loadUuid;
  js = _interopRequireWildcard(js);

  function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function isSceneObj(json) {
    var SCENE_ID = 'cc.Scene';
    var PREFAB_ID = 'cc.Prefab';
    return json && (json[0] && json[0].__type__ === SCENE_ID || json[1] && json[1].__type__ === SCENE_ID || json[0] && json[0].__type__ === PREFAB_ID);
  }

  function parseDepends(item, asset, tdInfo, deferredLoadRawAssetsInRuntime) {
    var uuidList = tdInfo.uuidList;
    var objList = tdInfo.uuidObjList;
    var propList = tdInfo.uuidPropList;
    var stillUseUrl = tdInfo._stillUseUrl;
    var depends;
    var i, dependUuid; // cache dependencies for auto release

    var dependKeys = item.dependKeys = [];

    if (deferredLoadRawAssetsInRuntime) {
      depends = []; // parse depends assets

      for (i = 0; i < uuidList.length; i++) {
        dependUuid = uuidList[i];
        var obj = objList[i];
        var prop = propList[i];

        var info = cc.AssetLibrary._getAssetInfoInRuntime(dependUuid);

        if (info.raw) {
          // skip preloading raw assets
          var url = info.url;
          obj[prop] = url;
          dependKeys.push(url);
        } else {
          // declare depends assets
          depends.push({
            type: 'uuid',
            uuid: dependUuid,
            deferredLoadRaw: true,
            _owner: obj,
            _ownerProp: prop,
            _stillUseUrl: stillUseUrl[i]
          });
        }
      }
    } else {
      depends = new Array(uuidList.length); // declare depends assets

      for (i = 0; i < uuidList.length; i++) {
        dependUuid = uuidList[i];
        depends[i] = {
          type: 'uuid',
          uuid: dependUuid,
          _owner: objList[i],
          _ownerProp: propList[i],
          _stillUseUrl: stillUseUrl[i]
        };
      } // load native object (Image/Audio) as depends


      if (asset._native && !asset.constructor.preventPreloadNativeObject) {
        depends.push({
          url: asset.nativeUrl,
          _owner: asset,
          _ownerProp: '_nativeAsset'
        });
      }
    }

    return depends;
  }

  function loadDepends(pipeline, item, asset, depends, callback) {
    // Predefine content for dependencies usage
    item.content = asset;
    var dependKeys = item.dependKeys;
    pipeline.flowInDeps(item, depends, function (errors, items) {
      var item, missingAssetReporter;
      var itemsMap = items.map;

      for (var src in itemsMap) {
        item = itemsMap[src];

        if (item.uuid && item.content) {
          item.content._uuid = item.uuid;
        }
      }

      for (var i = 0; i < depends.length; i++) {
        // @ts-ignore
        var loadCallback = function loadCallback(item) {
          var value = item.content; // @ts-ignore

          if (this._stillUseUrl) {
            value = value ? value.nativeUrl : item.rawUrl;
          } // @ts-ignore


          this._owner[this._ownerProp] = value;

          if (item.uuid !== asset._uuid && dependKeys.indexOf(item.id) < 0) {
            dependKeys.push(item.id);
          }
        };

        var dep = depends[i];
        var dependSrc = dep.uuid;
        var dependUrl = dep.url;
        var dependObj = dep._owner;
        var dependProp = dep._ownerProp;
        item = itemsMap[dependUrl];

        if (!item) {
          continue;
        }

        var loadCallbackCtx = dep;

        if (item.complete || item.content) {
          if (item.error) {
            if (_defaultConstants.EDITOR && item.error.errorCode === 'db.NOTFOUND') {
              if (!missingAssetReporter) {
                missingAssetReporter = new EditorExtends.MissingReporter.object(asset);
              }

              missingAssetReporter.stashByOwner(dependObj, dependProp, EditorExtends.serialize.asAsset(dependSrc));
            } else {
              cc._throw(item.error);
            }
          } else {
            loadCallback.call(loadCallbackCtx, item);
          }
        } else {
          // item was removed from cache, but ready in pipeline actually
          var queue = _loadingItems.LoadingItems.getQueue(item);

          if (queue) {
            queue.addListener(dependSrc, loadCallback, loadCallbackCtx);
          }
        }
      } // Emit dependency errors in runtime, but not in editor,
      // because editor need to open the scene / prefab to let user fix missing asset issues


      if (_defaultConstants.EDITOR && missingAssetReporter) {
        missingAssetReporter.reportByOwner();
        callback(null, asset);
      } else {
        callback(errors, asset);
      }
    });
  } // can deferred load raw assets in runtime


  function canDeferredLoad(asset, item, isScene) {
    if (_defaultConstants.EDITOR) {
      return false;
    }

    var res = item.deferredLoadRaw;

    if (res) {
      // check if asset support deferred
      if (asset instanceof cc.Asset && asset.constructor.preventDeferredLoadDependents) {
        res = false;
      }
    } else if (isScene) {
      if (asset instanceof cc.SceneAsset || asset instanceof cc.Prefab) {
        res = asset.asyncLoadAssets; //if (res) {
        //    cc.log('deferred load raw assets for ' + item.id);
        //}
      }
    }

    return res;
  }

  var MissingClass;

  function loadUuid(item, callback) {
    if (_defaultConstants.EDITOR) {
      MissingClass = MissingClass || EditorExtends.MissingReporter.classInstance;
    }

    var json;

    if (typeof item.content === 'string') {
      try {
        json = JSON.parse(item.content);

        if (!_defaultConstants.DEBUG && json.keys && json.data) {
          var keys = json.keys;
          json = json.data;
          (0, _utils.decompressJson)(json, keys);
        }
      } catch (e) {
        return new Error((0, _debug.getError)(4923, item.id, e.stack));
      }
    } else if (_typeof(item.content) === 'object') {
      json = item.content;
    } else {
      return new Error((0, _debug.getError)(4924));
    }

    if (json === undefined || json === null) {
      return new Error((0, _debug.getError)(4923, item.id));
    }

    var classFinder;
    var isScene = isSceneObj(json);

    if (isScene) {
      if (_defaultConstants.EDITOR) {
        MissingClass.hasMissingClass = false;

        classFinder = function classFinder(type, data, owner, propName) {
          var res = MissingClass.classFinder(type, data, owner, propName);

          if (res) {
            return res;
          }

          return cc._MissingScript.getMissingWrapper(type, data);
        };

        classFinder.onDereferenced = MissingClass.classFinder.onDereferenced;
      } else {
        classFinder = cc._MissingScript.safeFindClass;
      }
    } else {
      classFinder = function classFinder(id) {
        var cls = js._getClassById(id);

        if (cls) {
          return cls;
        }

        cc.warnID(4903, id);
        return Object;
      };
    }

    var tdInfo = cc.deserialize.Details.pool.get();
    var asset;

    try {
      asset = cc.deserialize(json, tdInfo, {
        classFinder: classFinder,
        target: item.existingAsset,
        customEnv: item
      });
    } catch (e) {
      cc.deserialize.Details.pool.put(tdInfo);
      console.error(e);
      return new Error("Failed to load asset ".concat(item.id, ", exception occurs during deserialization: ").concat(_defaultConstants.JSB ? e + '\n' + e.stack : e.stack, ".")); // return new Error(debug.getError(4925, item.id, err));
    }

    asset._uuid = item.uuid;

    if (_defaultConstants.EDITOR && isScene && MissingClass.hasMissingClass) {
      MissingClass.reportMissingClass(asset);
    }

    var deferredLoad = canDeferredLoad(asset, item, isScene);
    var depends = parseDepends(item, asset, tdInfo, deferredLoad);
    cc.deserialize.Details.pool.put(tdInfo);

    var wrappedCallback = function wrappedCallback(err, asset) {
      if (!err && asset.onLoaded) {
        try {
          asset.onLoaded();
        } catch (error) {
          err = error;
        }
      }

      if (_defaultConstants.EDITOR && !isScene) {
        // @ts-ignore
        var propSetter = function propSetter(asset, obj, propName, oldAsset, newAsset) {
          if (oldAsset === newAsset || obj[propName] === newAsset) {
            return;
          }

          if (asset instanceof cc.Material && newAsset instanceof cc.Texture2D) {
            for (var i = 0, l = asset.passes.length; i < l; i++) {
              if (asset.getProperty(propName, i) === oldAsset) {
                asset.setProperty(propName, newAsset, i);
              }
            }
          } else {
            obj[propName] = newAsset;
            asset.onLoaded && asset.onLoaded();
          }

          dependListener.emit(asset._uuid, asset);
          assetListener.emit(asset._uuid, asset);
        };

        var dependListener = cc.AssetLibrary.dependListener;
        var assetListener = cc.AssetLibrary.assetListener;
        ;

        if (dependListener) {
          item.references = {};

          for (var i = 0, l = depends.length; i < l; i++) {
            var dep = depends[i];
            var dependSrc = dep.uuid;

            if (dependSrc) {
              var dependObj = dep._owner;
              var dependProp = dep._ownerProp;
              var onDirty = propSetter.bind(null, asset, dependObj, dependProp);
              dependListener.on(dependSrc, onDirty);
              item.references[dependSrc] = onDirty;
            }
          }
        }
      }

      callback(err, asset);
    };

    if (depends.length === 0) {
      return wrappedCallback(null, asset);
    } // @ts-ignore


    loadDepends(this.pipeline, item, asset, depends, wrappedCallback);
  }

  loadUuid.isSceneObj = isSceneObj;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,