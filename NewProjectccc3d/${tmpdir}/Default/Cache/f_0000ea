(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../core/index.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../core/index.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index);
    global.action = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Speed = _exports.FiniteTimeAction = _exports.Action = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  /**
   * !#en Base classAction for action classes.
   * !#zh Action 类是所有动作类型的基类。
   * @class Action
   */
  var Action = /*#__PURE__*/function () {
    function Action() {
      _classCallCheck(this, Action);

      this.originalTarget = null;
      this.target = null;
      this.tag = Action.TAG_INVALID;
    }

    _createClass(Action, [{
      key: "clone",

      /**
       * !#en
       * to copy object with deep copy.
       * returns a clone of action.
       * !#zh 返回一个克隆的动作。
       * @method clone
       * @return {Action}
       */
      value: function clone() {
        var action = new Action();
        action.originalTarget = null;
        action.target = null;
        action.tag = this.tag;
        return action;
      }
      /**
       * !#en
       * return true if the action has finished.
       * !#zh 如果动作已完成就返回 true。
       * @method isDone
       * @return {Boolean}
       */

    }, {
      key: "isDone",
      value: function isDone() {
        return true;
      } // called before the action start. It will also set the target.

    }, {
      key: "startWithTarget",
      value: function startWithTarget(target) {
        this.originalTarget = target;
        this.target = target;
      } // called after the action has finished. It will set the 'target' to nil.

    }, {
      key: "stop",
      value: function stop() {
        this.target = null;
      } // called every frame with it's delta time. <br />

    }, {
      key: "step",
      value: function step(dt) {
        (0, _index.logID)(1006);
      } // Called once per frame. Time is the number of seconds of a frame interval.

    }, {
      key: "update",
      value: function update(dt) {
        (0, _index.logID)(1007);
      }
      /**
       * !#en get the target.
       * !#zh 获取当前目标节点。
       * @method getTarget
       * @return {object}
       */

    }, {
      key: "getTarget",
      value: function getTarget() {
        return this.target;
      }
      /**
       * !#en The action will modify the target properties.
       * !#zh 设置目标节点。
       * @method setTarget
       * @param {object} target
       */

    }, {
      key: "setTarget",
      value: function setTarget(target) {
        this.target = target;
      }
      /**
       * !#en get the original target.
       * !#zh 获取原始目标节点。
       * @method getOriginalTarget
       * @return {object}
       */

    }, {
      key: "getOriginalTarget",
      value: function getOriginalTarget() {
        return this.originalTarget;
      } // Set the original target, since target can be nil.
      // Is the target that were used to run the action.
      // Unless you are doing something complex, like cc.ActionManager, you should NOT call this method.

    }, {
      key: "setOriginalTarget",
      value: function setOriginalTarget(originalTarget) {
        this.originalTarget = originalTarget;
      }
      /**
       * !#en get tag number.
       * !#zh 获取用于识别动作的标签。
       * @method getTag
       * @return {Number}
       */

    }, {
      key: "getTag",
      value: function getTag() {
        return this.tag;
      }
      /**
       * !#en set tag number.
       * !#zh 设置标签，用于识别动作。
       * @method setTag
       * @param {Number} tag
       */

    }, {
      key: "setTag",
      value: function setTag(tag) {
        this.tag = tag;
      }
      /**
       * !#en
       * Returns a reversed action. <br />
       * For example: <br />
       * - The action will be x coordinates of 0 move to 100. <br />
       * - The reversed action will be x of 100 move to 0.
       * - Will be rewritten
       * !#zh 返回一个新的动作，执行与原动作完全相反的动作。
       * @method reverse
       * @return {Action | null}
       */

    }, {
      key: "reverse",
      value: function reverse() {
        (0, _index.logID)(1008);
        return null;
      } // Currently JavaScript Bindigns (JSB), in some cases, needs to use retain and release. This is a bug in JSB,
      // and the ugly workaround is to use retain/release. So, these 2 methods were added to be compatible with JSB.
      // This is a hack, and should be removed once JSB fixes the retain/release bug.

    }, {
      key: "retain",
      value: function retain() {} // Currently JavaScript Bindigns (JSB), in some cases, needs to use retain and release. This is a bug in JSB,
      // and the ugly workaround is to use retain/release. So, these 2 methods were added to be compatible with JSB.
      // This is a hack, and should be removed once JSB fixes the retain/release bug.

    }, {
      key: "release",
      value: function release() {}
    }]);

    return Action;
  }();
  /**
   * !#en
   * Base class actions that do have a finite time duration. <br/>
   * Possible actions: <br/>
   * - An action with a duration of 0 seconds. <br/>
   * - An action with a duration of 35.5 seconds.
   *
   * Infinite time actions are valid
   * !#zh 有限时间动作，这种动作拥有时长 duration 属性。
   * @class FiniteTimeAction
   * @extends Action
   */


  _exports.Action = Action;
  Action.TAG_INVALID = -1;

  var FiniteTimeAction = /*#__PURE__*/function (_Action) {
    _inherits(FiniteTimeAction, _Action);

    function FiniteTimeAction() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, FiniteTimeAction);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FiniteTimeAction)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this._duration = 0;
      _this._timesForRepeat = 1;
      return _this;
    }

    _createClass(FiniteTimeAction, [{
      key: "getDuration",

      /**
       * !#en get duration of the action. (seconds).
       * !#zh 获取动作以秒为单位的持续时间。
       * @method getDuration
       * @return {Number}
       */
      value: function getDuration() {
        return this._duration * (this._timesForRepeat || 1);
      }
      /**
       * !#en set duration of the action. (seconds).
       * !#zh 设置动作以秒为单位的持续时间。
       * @method setDuration
       * @param {Number} duration
       */

    }, {
      key: "setDuration",
      value: function setDuration(duration) {
        this._duration = duration;
      }
      /**
       * !#en
       * to copy object with deep copy.
       * returns a clone of action.
       * !#zh 返回一个克隆的动作。
       * @method clone
       * @return {FiniteTimeAction}
       */

    }, {
      key: "clone",
      value: function clone() {
        return new FiniteTimeAction();
      }
    }]);

    return FiniteTimeAction;
  }(Action);
  /*
   * Changes the speed of an action, making it take longer (speed > 1)
   * or less (speed < 1) time. <br/>
   * Useful to simulate 'slow motion' or 'fast forward' effect.
   *
   * @warning This action can't be Sequenceable because it is not an cc.IntervalAction
   * @class Speed
   * @extends Action
   *
   * @param {ActionInterval} action
   * @param {Number} speed
   */


  _exports.FiniteTimeAction = FiniteTimeAction;

  var Speed = /*#__PURE__*/function (_Action2) {
    _inherits(Speed, _Action2);

    function Speed(action) {
      var _this2;

      var speed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

      _classCallCheck(this, Speed);

      _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Speed).call(this));
      _this2._speed = 0;
      _this2._innerAction = null;
      action && _this2.initWithAction(action, speed);
      return _this2;
    }
    /*
     * Gets the current running speed. <br />
     * Will get a percentage number, compared to the original speed.
     *
     * @method getSpeed
     * @return {Number}
     */


    _createClass(Speed, [{
      key: "getSpeed",
      value: function getSpeed() {
        return this._speed;
      }
      /*
       * alter the speed of the inner function in runtime.
       * @method setSpeed
       * @param {Number} speed
       */

    }, {
      key: "setSpeed",
      value: function setSpeed(speed) {
        this._speed = speed;
      }
      /*
       * initializes the action.
       * @method initWithAction
       * @param {ActionInterval} action
       * @param {Number} speed
       * @return {Boolean}
       */

    }, {
      key: "initWithAction",
      value: function initWithAction(action, speed) {
        if (!action) {
          (0, _index.errorID)(1021);
          return false;
        }

        this._innerAction = action;
        this._speed = speed;
        return true;
      }
    }, {
      key: "clone",
      value: function clone() {
        var action = new Speed();
        action.initWithAction(this._innerAction.clone(), this._speed);
        return action;
      }
    }, {
      key: "startWithTarget",
      value: function startWithTarget(target) {
        Action.prototype.startWithTarget.call(this, target);

        this._innerAction.startWithTarget(target);
      }
    }, {
      key: "stop",
      value: function stop() {
        this._innerAction.stop();

        Action.prototype.stop.call(this);
      }
    }, {
      key: "step",
      value: function step(dt) {
        this._innerAction.step(dt * this._speed);
      }
    }, {
      key: "isDone",
      value: function isDone() {
        return this._innerAction.isDone();
      }
    }, {
      key: "reverse",
      value: function reverse() {
        return new Speed(this._innerAction.reverse(), this._speed);
      }
      /*
       * Set inner Action.
       * @method setInnerAction
       * @param {ActionInterval} action
       */

    }, {
      key: "setInnerAction",
      value: function setInnerAction(action) {
        if (this._innerAction !== action) {
          this._innerAction = action;
        }
      }
      /*
       * Get inner Action.
       * @method getInnerAction
       * @return {ActionInterval}
       */

    }, {
      key: "getInnerAction",
      value: function getInnerAction() {
        return this._innerAction;
      }
    }]);

    return Speed;
  }(Action);

  _exports.Speed = Speed;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,