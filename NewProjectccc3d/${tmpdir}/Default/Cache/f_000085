(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../core/data/class-decorator.js", "../../core/math/index.js", "../animator/curve-range.js", "../enum.js", "../particle-general-function.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../core/data/class-decorator.js"), require("../../core/math/index.js"), require("../animator/curve-range.js"), require("../enum.js"), require("../particle-general-function.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.classDecorator, global.index, global.curveRange, global._enum, global.particleGeneralFunction);
    global.shapeModule = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _classDecorator, _index, _curveRange, _enum, _particleGeneralFunction) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _curveRange = _interopRequireDefault(_curveRange);

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _temp;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  var _intermediVec = new _index.Vec3(0, 0, 0);

  var _intermediArr = new Array();

  var _unitBoxExtent = new _index.Vec3(0.5, 0.5, 0.5);

  var ShapeModule = (_dec = (0, _classDecorator.ccclass)('cc.ShapeModule'), _dec2 = (0, _classDecorator.property)({
    displayOrder: 13,
    tooltip: '粒子发射器位置'
  }), _dec3 = (0, _classDecorator.property)({
    displayOrder: 14,
    tooltip: '粒子发射器旋转角度'
  }), _dec4 = (0, _classDecorator.property)({
    displayOrder: 15,
    tooltip: '粒子发射器缩放比例'
  }), _dec5 = (0, _classDecorator.property)({
    displayOrder: 6,
    tooltip: '粒子发射器在一个扇形范围内发射'
  }), _dec6 = (0, _classDecorator.property)({
    displayOrder: 5,
    tooltip: '圆锥的轴与母线的夹角\n决定圆锥发射器的开合程度'
  }), _dec7 = (0, _classDecorator.property)({
    displayOrder: 0
  }), _dec8 = (0, _classDecorator.property)({
    type: _enum.ShapeType,
    displayOrder: 1,
    formerlySerializedAs: 'shapeType'
  }), _dec9 = (0, _classDecorator.property)({
    type: _enum.ShapeType,
    tooltip: '粒子发射器类型'
  }), _dec10 = (0, _classDecorator.property)({
    type: _enum.EmitLocation,
    displayOrder: 2,
    tooltip: '粒子从发射器哪个部位发射'
  }), _dec11 = (0, _classDecorator.property)({
    displayOrder: 16,
    tooltip: '根据粒子的初始方向决定粒子的移动方向'
  }), _dec12 = (0, _classDecorator.property)({
    displayOrder: 17,
    tooltip: '粒子生成方向随机设定'
  }), _dec13 = (0, _classDecorator.property)({
    displayOrder: 18,
    tooltip: '表示当前发射方向与当前位置到结点中心连线方向的插值'
  }), _dec14 = (0, _classDecorator.property)({
    displayOrder: 19,
    tooltip: '粒子生成位置随机设定（设定此值为非 0 会使粒子生成位置超出生成器大小范围）'
  }), _dec15 = (0, _classDecorator.property)({
    displayOrder: 3,
    tooltip: '粒子发射器半径'
  }), _dec16 = (0, _classDecorator.property)({
    displayOrder: 4,
    tooltip: '粒子发射器发射位置（对 Box 类型的发射器无效）:\n - 0 表示从表面发射；\n - 1 表示从中心发射；\n - 0 ~ 1 之间表示在中心到表面之间发射。'
  }), _dec17 = (0, _classDecorator.property)({
    type: _enum.ArcMode,
    displayOrder: 7,
    tooltip: '粒子在扇形范围内的发射方式'
  }), _dec18 = (0, _classDecorator.property)({
    displayOrder: 9,
    tooltip: '控制可能产生粒子的弧周围的离散间隔'
  }), _dec19 = (0, _classDecorator.property)({
    type: _curveRange.default,
    displayOrder: 10,
    tooltip: '粒子沿圆周发射的速度'
  }), _dec20 = (0, _classDecorator.property)({
    displayOrder: 11,
    tooltip: '圆锥顶部截面距离底部的轴长\n决定圆锥发射器的高度'
  }), _dec21 = (0, _classDecorator.property)({
    displayOrder: 12,
    tooltip: '粒子发射器发射位置（针对 Box 类型的粒子发射器）'
  }), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function () {
    _createClass(ShapeModule, [{
      key: "position",

      /**
       * @zh 粒子发射器位置。
       */
      get: function get() {
        return this._position;
      },
      set: function set(val) {
        this._position = val;
        this.constructMat();
      }
      /**
       * @zh 粒子发射器旋转角度。
       */

    }, {
      key: "rotation",
      get: function get() {
        return this._rotation;
      },
      set: function set(val) {
        this._rotation = val;
        this.constructMat();
      }
      /**
       * @zh 粒子发射器缩放比例。
       */

    }, {
      key: "scale",
      get: function get() {
        return this._scale;
      },
      set: function set(val) {
        this._scale = val;
        this.constructMat();
      }
      /**
       * @zh 粒子发射器在一个扇形范围内发射。
       */

    }, {
      key: "arc",
      get: function get() {
        return (0, _index.toDegree)(this._arc);
      },
      set: function set(val) {
        this._arc = (0, _index.toRadian)(val);
      }
      /**
       * @zh 圆锥的轴与母线的夹角<bg>。
       * 决定圆锥发射器的开合程度。
       */

    }, {
      key: "angle",
      get: function get() {
        return Math.round((0, _index.toDegree)(this._angle) * 100) / 100;
      },
      set: function set(val) {
        this._angle = (0, _index.toRadian)(val);
      }
    }, {
      key: "enable",

      /**
       * @zh 是否启用。
       */
      get: function get() {
        return this._enable;
      },
      set: function set(val) {
        this._enable = val;
      }
      /**
       * @zh 粒子发射器类型 [[ShapeType]]。
       */

    }, {
      key: "shapeType",
      get: function get() {
        return this._shapeType;
      },
      set: function set(val) {
        this._shapeType = val;

        switch (this._shapeType) {
          case _enum.ShapeType.Box:
            if (this.emitFrom === _enum.EmitLocation.Base) {
              this.emitFrom = _enum.EmitLocation.Volume;
            }

            break;

          case _enum.ShapeType.Cone:
            if (this.emitFrom === _enum.EmitLocation.Edge) {
              this.emitFrom = _enum.EmitLocation.Base;
            }

            break;

          case _enum.ShapeType.Sphere:
          case _enum.ShapeType.Hemisphere:
            if (this.emitFrom === _enum.EmitLocation.Base || this.emitFrom === _enum.EmitLocation.Edge) {
              this.emitFrom = _enum.EmitLocation.Volume;
            }

            break;
        }
      }
      /**
       * @zh 粒子从发射器哪个部位发射 [[EmitLocation]]。
       */

    }]);

    function ShapeModule() {
      _classCallCheck(this, ShapeModule);

      _initializerDefineProperty(this, "_enable", _descriptor, this);

      _initializerDefineProperty(this, "_shapeType", _descriptor2, this);

      _initializerDefineProperty(this, "emitFrom", _descriptor3, this);

      _initializerDefineProperty(this, "alignToDirection", _descriptor4, this);

      _initializerDefineProperty(this, "randomDirectionAmount", _descriptor5, this);

      _initializerDefineProperty(this, "sphericalDirectionAmount", _descriptor6, this);

      _initializerDefineProperty(this, "randomPositionAmount", _descriptor7, this);

      _initializerDefineProperty(this, "radius", _descriptor8, this);

      _initializerDefineProperty(this, "radiusThickness", _descriptor9, this);

      _initializerDefineProperty(this, "arcMode", _descriptor10, this);

      _initializerDefineProperty(this, "arcSpread", _descriptor11, this);

      _initializerDefineProperty(this, "arcSpeed", _descriptor12, this);

      _initializerDefineProperty(this, "length", _descriptor13, this);

      _initializerDefineProperty(this, "boxThickness", _descriptor14, this);

      _initializerDefineProperty(this, "_position", _descriptor15, this);

      _initializerDefineProperty(this, "_rotation", _descriptor16, this);

      _initializerDefineProperty(this, "_scale", _descriptor17, this);

      _initializerDefineProperty(this, "_arc", _descriptor18, this);

      _initializerDefineProperty(this, "_angle", _descriptor19, this);

      this.mat = void 0;
      this.quat = void 0;
      this.particleSystem = void 0;
      this.lastTime = void 0;
      this.totalAngle = void 0;
      this.mat = new _index.Mat4();
      this.quat = new _index.Quat();
      this.particleSystem = null;
      this.lastTime = 0;
      this.totalAngle = 0;
    }

    _createClass(ShapeModule, [{
      key: "onInit",
      value: function onInit(ps) {
        this.particleSystem = ps;
        this.constructMat();
        this.lastTime = this.particleSystem._time;
      }
    }, {
      key: "emit",
      value: function emit(p) {
        switch (this.shapeType) {
          case _enum.ShapeType.Box:
            boxEmit(this.emitFrom, this.boxThickness, p.position, p.velocity);
            break;

          case _enum.ShapeType.Circle:
            circleEmit(this.radius, this.radiusThickness, this.generateArcAngle(), p.position, p.velocity);
            break;

          case _enum.ShapeType.Cone:
            coneEmit(this.emitFrom, this.radius, this.radiusThickness, this.generateArcAngle(), this._angle, this.length, p.position, p.velocity);
            break;

          case _enum.ShapeType.Sphere:
            sphereEmit(this.emitFrom, this.radius, this.radiusThickness, p.position, p.velocity);
            break;

          case _enum.ShapeType.Hemisphere:
            hemisphereEmit(this.emitFrom, this.radius, this.radiusThickness, p.position, p.velocity);
            break;

          default:
            console.warn(this.shapeType + ' shapeType is not supported by ShapeModule.');
        }

        if (this.randomPositionAmount > 0) {
          p.position.x += (0, _index.randomRange)(-this.randomPositionAmount, this.randomPositionAmount);
          p.position.y += (0, _index.randomRange)(-this.randomPositionAmount, this.randomPositionAmount);
          p.position.z += (0, _index.randomRange)(-this.randomPositionAmount, this.randomPositionAmount);
        }

        _index.Vec3.transformQuat(p.velocity, p.velocity, this.quat);

        _index.Vec3.transformMat4(p.position, p.position, this.mat);

        if (this.sphericalDirectionAmount > 0) {
          var sphericalVel = _index.Vec3.normalize(_intermediVec, p.position);

          _index.Vec3.lerp(p.velocity, p.velocity, sphericalVel, this.sphericalDirectionAmount);
        }

        this.lastTime = this.particleSystem._time;
      }
    }, {
      key: "constructMat",
      value: function constructMat() {
        _index.Quat.fromEuler(this.quat, this._rotation.x, this._rotation.y, this._rotation.z);

        _index.Mat4.fromRTS(this.mat, this.quat, this._position, this._scale);
      }
    }, {
      key: "generateArcAngle",
      value: function generateArcAngle() {
        if (this.arcMode === _enum.ArcMode.Random) {
          return (0, _index.randomRange)(0, this._arc);
        }

        var angle = this.totalAngle + 2 * Math.PI * this.arcSpeed.evaluate(this.particleSystem._time, 1) * (this.particleSystem._time - this.lastTime);
        this.totalAngle = angle;

        if (this.arcSpread !== 0) {
          angle = Math.floor(angle / (this._arc * this.arcSpread)) * this._arc * this.arcSpread;
        }

        switch (this.arcMode) {
          case _enum.ArcMode.Loop:
            return (0, _index.repeat)(angle, this._arc);

          case _enum.ArcMode.PingPong:
            return (0, _index.pingPong)(angle, this._arc);
        }
      }
    }]);

    return ShapeModule;
  }(), _temp), (_applyDecoratedDescriptor(_class2.prototype, "position", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "position"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "rotation", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "rotation"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "scale", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "scale"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "arc", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "arc"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "angle", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "angle"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_enable", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "enable", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "enable"), _class2.prototype), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_shapeType", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _enum.ShapeType.Cone;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "shapeType", [_dec9], Object.getOwnPropertyDescriptor(_class2.prototype, "shapeType"), _class2.prototype), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "emitFrom", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _enum.EmitLocation.Volume;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "alignToDirection", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "randomDirectionAmount", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "sphericalDirectionAmount", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "randomPositionAmount", [_dec14], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "radius", [_dec15], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 1;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "radiusThickness", [_dec16], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 1;
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "arcMode", [_dec17], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _enum.ArcMode.Random;
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "arcSpread", [_dec18], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "arcSpeed", [_dec19], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _curveRange.default();
    }
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "length", [_dec20], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 5;
    }
  }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "boxThickness", [_dec21], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _index.Vec3(0, 0, 0);
    }
  }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "_position", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _index.Vec3(0, 0, 0);
    }
  }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "_rotation", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _index.Vec3(0, 0, 0);
    }
  }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "_scale", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _index.Vec3(1, 1, 1);
    }
  }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "_arc", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return (0, _index.toRadian)(360);
    }
  }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "_angle", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return (0, _index.toRadian)(25);
    }
  })), _class2)) || _class);
  _exports.default = ShapeModule;

  function sphereEmit(emitFrom, radius, radiusThickness, pos, dir) {
    switch (emitFrom) {
      case _enum.EmitLocation.Volume:
        (0, _particleGeneralFunction.randomPointBetweenSphere)(pos, radius * (1 - radiusThickness), radius);

        _index.Vec3.normalize(dir, pos);

        break;

      case _enum.EmitLocation.Shell:
        (0, _particleGeneralFunction.randomUnitVector)(pos);

        _index.Vec3.multiplyScalar(pos, pos, radius);

        _index.Vec3.normalize(dir, pos);

        break;

      default:
        console.warn(emitFrom + ' is not supported for sphere emitter.');
    }
  }

  function hemisphereEmit(emitFrom, radius, radiusThickness, pos, dir) {
    switch (emitFrom) {
      case _enum.EmitLocation.Volume:
        (0, _particleGeneralFunction.randomPointBetweenSphere)(pos, radius * (1 - radiusThickness), radius);

        if (pos.z > 0) {
          pos.z *= -1;
        }

        _index.Vec3.normalize(dir, pos);

        break;

      case _enum.EmitLocation.Shell:
        (0, _particleGeneralFunction.randomUnitVector)(pos);

        _index.Vec3.multiplyScalar(pos, pos, radius);

        if (pos.z > 0) {
          pos.z *= -1;
        }

        _index.Vec3.normalize(dir, pos);

        break;

      default:
        console.warn(emitFrom + ' is not supported for hemisphere emitter.');
    }
  }

  function coneEmit(emitFrom, radius, radiusThickness, theta, angle, length, pos, dir) {
    switch (emitFrom) {
      case _enum.EmitLocation.Base:
        (0, _particleGeneralFunction.randomPointBetweenCircleAtFixedAngle)(pos, radius * (1 - radiusThickness), radius, theta);

        _index.Vec2.multiplyScalar(dir, pos, Math.sin(angle));

        dir.z = -Math.cos(angle) * radius;

        _index.Vec3.normalize(dir, dir);

        pos.z = 0;
        break;

      case _enum.EmitLocation.Shell:
        (0, _particleGeneralFunction.fixedAngleUnitVector2)(pos, theta);

        _index.Vec2.multiplyScalar(dir, pos, Math.sin(angle));

        dir.z = -Math.cos(angle);

        _index.Vec3.normalize(dir, dir);

        _index.Vec2.multiplyScalar(pos, pos, radius);

        pos.z = 0;
        break;

      case _enum.EmitLocation.Volume:
        (0, _particleGeneralFunction.randomPointBetweenCircleAtFixedAngle)(pos, radius * (1 - radiusThickness), radius, theta);

        _index.Vec2.multiplyScalar(dir, pos, Math.sin(angle));

        dir.z = -Math.cos(angle) * radius;

        _index.Vec3.normalize(dir, dir);

        pos.z = 0;

        _index.Vec3.add(pos, pos, _index.Vec3.multiplyScalar(_intermediVec, dir, length * (0, _index.random)() / -dir.z));

        break;

      default:
        console.warn(emitFrom + ' is not supported for cone emitter.');
    }
  }

  function boxEmit(emitFrom, boxThickness, pos, dir) {
    switch (emitFrom) {
      case _enum.EmitLocation.Volume:
        (0, _particleGeneralFunction.randomPointInCube)(pos, _unitBoxExtent); // randomPointBetweenCube(pos, vec3.multiply(_intermediVec, _unitBoxExtent, boxThickness), _unitBoxExtent);

        break;

      case _enum.EmitLocation.Shell:
        _intermediArr.splice(0, _intermediArr.length);

        _intermediArr.push((0, _index.randomRange)(-0.5, 0.5));

        _intermediArr.push((0, _index.randomRange)(-0.5, 0.5));

        _intermediArr.push((0, _particleGeneralFunction.randomSign)() * 0.5);

        (0, _particleGeneralFunction.randomSortArray)(_intermediArr);
        applyBoxThickness(_intermediArr, boxThickness);

        _index.Vec3.set(pos, _intermediArr[0], _intermediArr[1], _intermediArr[2]);

        break;

      case _enum.EmitLocation.Edge:
        _intermediArr.splice(0, _intermediArr.length);

        _intermediArr.push((0, _index.randomRange)(-0.5, 0.5));

        _intermediArr.push((0, _particleGeneralFunction.randomSign)() * 0.5);

        _intermediArr.push((0, _particleGeneralFunction.randomSign)() * 0.5);

        (0, _particleGeneralFunction.randomSortArray)(_intermediArr);
        applyBoxThickness(_intermediArr, boxThickness);

        _index.Vec3.set(pos, _intermediArr[0], _intermediArr[1], _intermediArr[2]);

        break;

      default:
        console.warn(emitFrom + ' is not supported for box emitter.');
    }

    _index.Vec3.copy(dir, _particleGeneralFunction.particleEmitZAxis);
  }

  function circleEmit(radius, radiusThickness, theta, pos, dir) {
    (0, _particleGeneralFunction.randomPointBetweenCircleAtFixedAngle)(pos, radius * (1 - radiusThickness), radius, theta);

    _index.Vec3.normalize(dir, pos);
  }

  function applyBoxThickness(pos, thickness) {
    if (thickness.x > 0) {
      pos[0] += 0.5 * (0, _index.randomRange)(-thickness.x, thickness.x);
      pos[0] = (0, _index.clamp)(pos[0], -0.5, 0.5);
    }

    if (thickness.y > 0) {
      pos[1] += 0.5 * (0, _index.randomRange)(-thickness.y, thickness.y);
      pos[1] = (0, _index.clamp)(pos[1], -0.5, 0.5);
    }

    if (thickness.z > 0) {
      pos[2] += 0.5 * (0, _index.randomRange)(-thickness.z, thickness.z);
      pos[2] = (0, _index.clamp)(pos[2], -0.5, 0.5);
    }
  } // CCClass.fastDefine('cc.ShapeModule', ShapeModule, {
  //     enable: false,
  //     shapeType: ShapeType.Box,
  //     emitFrom: EmitLocation.Base,
  //     _position: new Vec3(0, 0, 0),
  //     _rotation: new Vec3(0, 0, 0),
  //     _scale: new Vec3(0, 0, 0),
  //     alignToDirection: false,
  //     randomDirectionAmount: 0,
  //     sphericalDirectionAmount: 0,
  //     randomPositionAmount: 0,
  //     radius: 0,
  //     radiusThickness: 1,
  //     arc: 0,
  //     arcMode: ArcMode.Random,
  //     arcSpread: 0,
  //     arcSpeed: null,
  //     angle: 0,
  //     length: 0,
  //     boxThickness: new Vec3(0, 0, 0)
  // });

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,