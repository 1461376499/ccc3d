(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../core/components/component.js", "../../core/data/class-decorator.js", "../../core/math/index.js", "../../core/value-types/enum.js", "../../core/components/ui-base/ui-transform-component.js", "../../core/platform/event-manager/event-enum.js", "../../core/director.js", "../../core/scene-graph/node-enum.js", "../../core/default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../core/components/component.js"), require("../../core/data/class-decorator.js"), require("../../core/math/index.js"), require("../../core/value-types/enum.js"), require("../../core/components/ui-base/ui-transform-component.js"), require("../../core/platform/event-manager/event-enum.js"), require("../../core/director.js"), require("../../core/scene-graph/node-enum.js"), require("../../core/default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.component, global.classDecorator, global.index, global._enum, global.uiTransformComponent, global.eventEnum, global.director, global.nodeEnum, global.defaultConstants);
    global.layoutComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _component, _classDecorator, _index, _enum, _uiTransformComponent, _eventEnum, _director, _nodeEnum, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LayoutComponent = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _class3, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  var NodeEvent = _eventEnum.SystemEventType;
  /**
   * @en Enum for layout.
   *
   * @zh 布局类型。
   */

  var Type;

  (function (Type) {
    Type[Type["NONE"] = 0] = "NONE";
    Type[Type["HORIZONTAL"] = 1] = "HORIZONTAL";
    Type[Type["VERTICAL"] = 2] = "VERTICAL";
    Type[Type["GRID"] = 3] = "GRID";
  })(Type || (Type = {}));

  (0, _enum.ccenum)(Type);
  /**
   * @en Enum for Layout Resize Mode.
   *
   * @zh 缩放模式。
   */

  var ResizeMode;

  (function (ResizeMode) {
    ResizeMode[ResizeMode["NONE"] = 0] = "NONE";
    ResizeMode[ResizeMode["CONTAINER"] = 1] = "CONTAINER";
    ResizeMode[ResizeMode["CHILDREN"] = 2] = "CHILDREN";
  })(ResizeMode || (ResizeMode = {}));

  (0, _enum.ccenum)(ResizeMode);
  /**
   * @en Enum for Grid Layout start axis direction.
   *
   * @zh 布局轴向，只用于 GRID 布局。
   */

  var AxisDirection;

  (function (AxisDirection) {
    AxisDirection[AxisDirection["HORIZONTAL"] = 0] = "HORIZONTAL";
    AxisDirection[AxisDirection["VERTICAL"] = 1] = "VERTICAL";
  })(AxisDirection || (AxisDirection = {}));

  (0, _enum.ccenum)(AxisDirection);
  /**
   * @en Enum for vertical layout direction.
   *
   * @zh 垂直方向布局方式。
   */

  var VerticalDirection;

  (function (VerticalDirection) {
    VerticalDirection[VerticalDirection["BOTTOM_TO_TOP"] = 0] = "BOTTOM_TO_TOP";
    VerticalDirection[VerticalDirection["TOP_TO_BOTTOM"] = 1] = "TOP_TO_BOTTOM";
  })(VerticalDirection || (VerticalDirection = {}));

  (0, _enum.ccenum)(VerticalDirection);
  /**
   * @en Enum for horizontal layout direction.
   *
   * @zh 水平方向布局方式。
   */

  var HorizontalDirection;

  (function (HorizontalDirection) {
    HorizontalDirection[HorizontalDirection["LEFT_TO_RIGHT"] = 0] = "LEFT_TO_RIGHT";
    HorizontalDirection[HorizontalDirection["RIGHT_TO_LEFT"] = 1] = "RIGHT_TO_LEFT";
  })(HorizontalDirection || (HorizontalDirection = {}));

  (0, _enum.ccenum)(HorizontalDirection);

  var _tempPos = new _index.Vec3();

  var _tempScale = new _index.Vec3();
  /**
   * @en
   * The Layout is a container component, use it to arrange child elements easily.<br>
   * Note：<br>
   * 1.Scaling and rotation of child nodes are not considered.<br>
   * 2.After setting the Layout, the results need to be updated until the next frame,unless you manually call.[[updateLayout]]
   *
   * @zh
   * Layout 组件相当于一个容器，能自动对它的所有子节点进行统一排版。<br>
   * 注意：<br>
   * 1.不会考虑子节点的缩放和旋转。<br>
   * 2.对 Layout 设置后结果需要到下一帧才会更新，除非你设置完以后手动调用。[[updateLayout]]
   */


  var LayoutComponent = (_dec = (0, _classDecorator.ccclass)('cc.LayoutComponent'), _dec2 = (0, _classDecorator.help)('i18n:cc.LayoutComponent'), _dec3 = (0, _classDecorator.executionOrder)(110), _dec4 = (0, _classDecorator.menu)('UI/Layout'), _dec5 = (0, _classDecorator.requireComponent)(_uiTransformComponent.UITransformComponent), _dec6 = (0, _classDecorator.property)({
    type: Type,
    tooltip: '自动布局模式，包括：\n 1. NONE，不会对子节点进行自动布局 \n 2. HORIZONTAL，横向自动排布子物体 \n 3. VERTICAL，垂直自动排布子物体\n 4. GRID, 采用网格方式对子物体自动进行布局'
  }), _dec7 = (0, _classDecorator.property)({
    type: ResizeMode,
    tooltip: '缩放模式，包括：\n 1. NONE，不会对子节点和容器进行大小缩放 \n 2. CONTAINER, 对容器的大小进行缩放 \n 3. CHILDREN, 对子节点的大小进行缩放'
  }), _dec8 = (0, _classDecorator.property)({
    tooltip: '每个格子的大小，只有布局类型为 GRID 的时候才有效'
  }), _dec9 = (0, _classDecorator.property)({
    type: AxisDirection,
    tooltip: '起始轴方向类型，可进行水平和垂直布局排列，只有布局类型为 GRID 的时候才有效'
  }), _dec10 = (0, _classDecorator.property)({
    tooltip: '容器内左边距，只会在一个布局方向上生效'
  }), _dec11 = (0, _classDecorator.property)({
    tooltip: '容器内右边距，只会在一个布局方向上生效'
  }), _dec12 = (0, _classDecorator.property)({
    tooltip: '容器内上边距，只会在一个布局方向上生效'
  }), _dec13 = (0, _classDecorator.property)({
    tooltip: '容器内下边距，只会在一个布局方向上生效'
  }), _dec14 = (0, _classDecorator.property)({
    tooltip: '子节点之间的水平间距'
  }), _dec15 = (0, _classDecorator.property)({
    tooltip: '子节点之间的垂直间距'
  }), _dec16 = (0, _classDecorator.property)({
    type: VerticalDirection,
    tooltip: '垂直排列子节点的方向'
  }), _dec17 = (0, _classDecorator.property)({
    type: HorizontalDirection,
    tooltip: '水平排列子节点的方向'
  }), _dec18 = (0, _classDecorator.property)({
    tooltip: '容器内边距，该属性会在四个布局方向上生效'
  }), _dec19 = (0, _classDecorator.property)({
    tooltip: '子节点缩放比例是否影响布局'
  }), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = _dec5(_class = (0, _classDecorator.executeInEditMode)(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Component) {
    _inherits(LayoutComponent, _Component);

    function LayoutComponent() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, LayoutComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LayoutComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _initializerDefineProperty(_this, "_resizeMode", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_N$layoutType", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_N$padding", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_cellSize", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_startAxis", _descriptor5, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_paddingLeft", _descriptor6, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_paddingRight", _descriptor7, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_paddingTop", _descriptor8, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_paddingBottom", _descriptor9, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_spacingX", _descriptor10, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_spacingY", _descriptor11, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_verticalDirection", _descriptor12, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_horizontalDirection", _descriptor13, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_affectedByScale", _descriptor14, _assertThisInitialized(_this));

      _this._layoutSize = new _index.Size(300, 200);
      _this._layoutDirty = true;
      _this._isAlign = false;
      return _this;
    }

    _createClass(LayoutComponent, [{
      key: "updateLayout",

      /**
       * @en
       * Perform the layout update.
       *
       * @zh
       * 立即执行更新布局。
       *
       * @example
       * ```typescript
       * layout.type = cc.LayoutComponent.HORIZONTAL;
       * layout.node.addChild(childNode);
       * cc.log(childNode.x); // not yet changed
       * layout.updateLayout();
       * cc.log(childNode.x); // changed
       * ```
       */
      value: function updateLayout() {
        if (this._layoutDirty && this.node.children.length > 0) {
          this._doLayout();

          this._layoutDirty = false;
        }
      }
    }, {
      key: "onEnable",
      value: function onEnable() {
        this._addEventListeners();

        if (this.node.getContentSize().equals(new _index.Size())) {
          this.node.setContentSize(this._layoutSize);
        }

        if (this._N$padding !== 0) {
          this._migratePaddingData();
        }

        this._doLayoutDirty();
      }
    }, {
      key: "onDisable",
      value: function onDisable() {
        this._removeEventListeners();
      }
    }, {
      key: "_migratePaddingData",
      value: function _migratePaddingData() {
        this._paddingLeft = this._N$padding;
        this._paddingRight = this._N$padding;
        this._paddingTop = this._N$padding;
        this._paddingBottom = this._N$padding;
        this._N$padding = 0;
      }
    }, {
      key: "_addEventListeners",
      value: function _addEventListeners() {
        _director.director.on(_director.Director.EVENT_AFTER_UPDATE, this.updateLayout, this);

        this.node.on(NodeEvent.SIZE_CHANGED, this._resized, this);
        this.node.on(NodeEvent.ANCHOR_CHANGED, this._doLayoutDirty, this);
        this.node.on(NodeEvent.CHILD_ADDED, this._childAdded, this);
        this.node.on(NodeEvent.CHILD_REMOVED, this._childRemoved, this); // this.node.on(NodeEvent.CHILD_REORDER, this._doLayoutDirty, this);

        this._addChildrenEventListeners();
      }
    }, {
      key: "_removeEventListeners",
      value: function _removeEventListeners() {
        _director.director.off(_director.Director.EVENT_AFTER_UPDATE, this.updateLayout, this);

        this.node.off(NodeEvent.SIZE_CHANGED, this._resized, this);
        this.node.off(NodeEvent.ANCHOR_CHANGED, this._doLayoutDirty, this);
        this.node.off(NodeEvent.CHILD_ADDED, this._childAdded, this);
        this.node.off(NodeEvent.CHILD_REMOVED, this._childRemoved, this); // this.node.off(NodeEvent.CHILD_REORDER, this._doLayoutDirty, this);

        this._removeChildrenEventListeners();
      }
    }, {
      key: "_addChildrenEventListeners",
      value: function _addChildrenEventListeners() {
        var children = this.node.children;

        var _iterator = _createForOfIteratorHelper(children),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var child = _step.value;
            child.on(NodeEvent.TRANSFORM_CHANGED, this._doScaleDirty, this);
            child.on(NodeEvent.SIZE_CHANGED, this._doLayoutDirty, this);
            child.on(NodeEvent.TRANSFORM_CHANGED, this._transformDirty, this);
            child.on(NodeEvent.ANCHOR_CHANGED, this._doLayoutDirty, this);
            child.on('active-in-hierarchy-changed', this._doLayoutDirty, this);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }, {
      key: "_removeChildrenEventListeners",
      value: function _removeChildrenEventListeners() {
        var children = this.node.children;

        var _iterator2 = _createForOfIteratorHelper(children),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var child = _step2.value;
            child.off(NodeEvent.TRANSFORM_CHANGED, this._doScaleDirty, this);
            child.off(NodeEvent.SIZE_CHANGED, this._doLayoutDirty, this);
            child.off(NodeEvent.TRANSFORM_CHANGED, this._transformDirty, this);
            child.off(NodeEvent.ANCHOR_CHANGED, this._doLayoutDirty, this);
            child.off('active-in-hierarchy-changed', this._doLayoutDirty, this);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
    }, {
      key: "_childAdded",
      value: function _childAdded(child) {
        child.on(NodeEvent.TRANSFORM_CHANGED, this._doScaleDirty, this);
        child.on(NodeEvent.SIZE_CHANGED, this._doLayoutDirty, this);
        child.on(NodeEvent.TRANSFORM_CHANGED, this._transformDirty, this);
        child.on(NodeEvent.ANCHOR_CHANGED, this._doLayoutDirty, this);
        child.on('active-in-hierarchy-changed', this._doLayoutDirty, this);

        this._doLayoutDirty();
      }
    }, {
      key: "_childRemoved",
      value: function _childRemoved(child) {
        child.off(NodeEvent.TRANSFORM_CHANGED, this._doScaleDirty, this);
        child.off(NodeEvent.SIZE_CHANGED, this._doLayoutDirty, this);
        child.off(NodeEvent.TRANSFORM_CHANGED, this._transformDirty, this);
        child.off(NodeEvent.ANCHOR_CHANGED, this._doLayoutDirty, this);
        child.off('active-in-hierarchy-changed', this._doLayoutDirty, this);

        this._doLayoutDirty();
      }
    }, {
      key: "_resized",
      value: function _resized() {
        this._layoutSize = this.node.getContentSize();

        this._doLayoutDirty();
      }
    }, {
      key: "_doLayoutHorizontally",
      value: function _doLayoutHorizontally(baseWidth, rowBreak, fnPositionY, applyChildren) {
        var layoutAnchor = this.node.getAnchorPoint();
        var children = this.node.children;
        var sign = 1;
        var paddingX = this._paddingLeft;
        var startPos = -layoutAnchor.x * baseWidth;

        if (this._horizontalDirection === HorizontalDirection.RIGHT_TO_LEFT) {
          sign = -1;
          startPos = (1 - layoutAnchor.x) * baseWidth;
          paddingX = this._paddingRight;
        }

        var nextX = startPos + sign * paddingX - sign * this._spacingX;
        var rowMaxHeight = 0;
        var tempMaxHeight = 0;
        var secondMaxHeight = 0;
        var row = 0;
        var containerResizeBoundary = 0;
        var maxHeightChildAnchorY = 0;
        var activeChildCount = 0;

        var _iterator3 = _createForOfIteratorHelper(children),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var child = _step3.value;

            if (child.activeInHierarchy) {
              activeChildCount++;
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        var newChildWidth = this._cellSize.width;

        if (this._N$layoutType !== Type.GRID && this._resizeMode === ResizeMode.CHILDREN) {
          newChildWidth = (baseWidth - (this._paddingLeft + this._paddingRight) - (activeChildCount - 1) * this._spacingX) / activeChildCount;
        }

        var _iterator4 = _createForOfIteratorHelper(children),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var _child = _step4.value;

            if (!_child.activeInHierarchy) {
              continue;
            }

            _child.getScale(_tempScale);

            var childScaleX = this._getUsedScaleValue(_tempScale.x);

            var childScaleY = this._getUsedScaleValue(_tempScale.y); // for resizing children


            if (this._resizeMode === ResizeMode.CHILDREN) {
              _child.width = newChildWidth / childScaleX;

              if (this._N$layoutType === Type.GRID) {
                _child.height = this._cellSize.height / childScaleY;
              }
            }

            var anchorX = _child.anchorX;
            var childBoundingBoxWidth = _child.width * childScaleX;
            var childBoundingBoxHeight = _child.height * childScaleY;

            if (secondMaxHeight > tempMaxHeight) {
              tempMaxHeight = secondMaxHeight;
            }

            if (childBoundingBoxHeight >= tempMaxHeight) {
              secondMaxHeight = tempMaxHeight;
              tempMaxHeight = childBoundingBoxHeight;
              maxHeightChildAnchorY = _child.getAnchorPoint().y;
            }

            if (this._horizontalDirection === HorizontalDirection.RIGHT_TO_LEFT) {
              anchorX = 1 - _child.anchorX;
            }

            nextX = nextX + sign * anchorX * childBoundingBoxWidth + sign * this._spacingX;
            var rightBoundaryOfChild = sign * (1 - anchorX) * childBoundingBoxWidth;

            if (rowBreak) {
              var rowBreakBoundary = nextX + rightBoundaryOfChild + sign * (sign > 0 ? this._paddingRight : this._paddingLeft);
              var leftToRightRowBreak = false;

              if (this._horizontalDirection === HorizontalDirection.LEFT_TO_RIGHT && rowBreakBoundary > (1 - layoutAnchor.x) * baseWidth) {
                leftToRightRowBreak = true;
              }

              var rightToLeftRowBreak = false;

              if (this._horizontalDirection === HorizontalDirection.RIGHT_TO_LEFT && rowBreakBoundary < -layoutAnchor.x * baseWidth) {
                rightToLeftRowBreak = true;
              }

              if (leftToRightRowBreak || rightToLeftRowBreak) {
                if (childBoundingBoxHeight >= tempMaxHeight) {
                  if (secondMaxHeight === 0) {
                    secondMaxHeight = tempMaxHeight;
                  }

                  rowMaxHeight += secondMaxHeight;
                  secondMaxHeight = tempMaxHeight;
                } else {
                  rowMaxHeight += tempMaxHeight;
                  secondMaxHeight = childBoundingBoxHeight;
                  tempMaxHeight = 0;
                }

                nextX = startPos + sign * (paddingX + anchorX * childBoundingBoxWidth);
                row++;
              }
            }

            var finalPositionY = fnPositionY(_child, rowMaxHeight, row);

            if (baseWidth >= childBoundingBoxWidth + this._paddingLeft + this._paddingRight) {
              if (applyChildren) {
                _child.getPosition(_tempPos);

                _child.setPosition(nextX, finalPositionY, _tempPos.z);
              }
            }

            var signX = 1;
            var tempFinalPositionY = void 0;
            var topMargin = tempMaxHeight === 0 ? childBoundingBoxHeight : tempMaxHeight;

            if (this._verticalDirection === VerticalDirection.TOP_TO_BOTTOM) {
              containerResizeBoundary = containerResizeBoundary || this.node.getContentSize().height;
              signX = -1;
              tempFinalPositionY = finalPositionY + signX * (topMargin * maxHeightChildAnchorY + this._paddingBottom);

              if (tempFinalPositionY < containerResizeBoundary) {
                containerResizeBoundary = tempFinalPositionY;
              }
            } else {
              containerResizeBoundary = containerResizeBoundary || -this.node.getContentSize().height;
              tempFinalPositionY = finalPositionY + signX * (topMargin * maxHeightChildAnchorY + this._paddingTop);

              if (tempFinalPositionY > containerResizeBoundary) {
                containerResizeBoundary = tempFinalPositionY;
              }
            }

            nextX += rightBoundaryOfChild;
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }

        return containerResizeBoundary;
      }
    }, {
      key: "_doLayoutVertically",
      value: function _doLayoutVertically(baseHeight, columnBreak, fnPositionX, applyChildren) {
        var layoutAnchor = this.node.getAnchorPoint();
        var children = this.node.children;
        var sign = 1;
        var paddingY = this._paddingBottom;
        var bottomBoundaryOfLayout = -layoutAnchor.y * baseHeight;

        if (this._verticalDirection === VerticalDirection.TOP_TO_BOTTOM) {
          sign = -1;
          bottomBoundaryOfLayout = (1 - layoutAnchor.y) * baseHeight;
          paddingY = this._paddingTop;
        }

        var nextY = bottomBoundaryOfLayout + sign * paddingY - sign * this._spacingY;
        var columnMaxWidth = 0;
        var tempMaxWidth = 0;
        var secondMaxWidth = 0;
        var column = 0;
        var containerResizeBoundary = 0;
        var maxWidthChildAnchorX = 0;
        var activeChildCount = 0;

        var _iterator5 = _createForOfIteratorHelper(children),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var child = _step5.value;

            if (child.activeInHierarchy) {
              activeChildCount++;
            }
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }

        var newChildHeight = this._cellSize.height;

        if (this._N$layoutType !== Type.GRID && this._resizeMode === ResizeMode.CHILDREN) {
          newChildHeight = (baseHeight - (this._paddingTop + this._paddingBottom) - (activeChildCount - 1) * this._spacingY) / activeChildCount;
        }

        var _iterator6 = _createForOfIteratorHelper(children),
            _step6;

        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var _child2 = _step6.value;

            if (!_child2) {
              continue;
            }

            var scale = _child2.getScale();

            var childScaleX = this._getUsedScaleValue(scale.x);

            var childScaleY = this._getUsedScaleValue(scale.y);

            if (!_child2.activeInHierarchy) {
              continue;
            } // for resizing children


            if (this._resizeMode === ResizeMode.CHILDREN) {
              _child2.height = newChildHeight / childScaleY;

              if (this._N$layoutType === Type.GRID) {
                _child2.width = this._cellSize.width / childScaleX;
              }
            }

            var anchorY = _child2.anchorY;
            var childBoundingBoxWidth = _child2.width * childScaleX;
            var childBoundingBoxHeight = _child2.height * childScaleY;

            if (secondMaxWidth > tempMaxWidth) {
              tempMaxWidth = secondMaxWidth;
            }

            if (childBoundingBoxWidth >= tempMaxWidth) {
              secondMaxWidth = tempMaxWidth;
              tempMaxWidth = childBoundingBoxWidth;
              maxWidthChildAnchorX = _child2.getAnchorPoint().x;
            }

            if (this._verticalDirection === VerticalDirection.TOP_TO_BOTTOM) {
              anchorY = 1 - _child2.anchorY;
            }

            nextY = nextY + sign * anchorY * childBoundingBoxHeight + sign * this._spacingY;
            var topBoundaryOfChild = sign * (1 - anchorY) * childBoundingBoxHeight;

            if (columnBreak) {
              var columnBreakBoundary = nextY + topBoundaryOfChild + sign * (sign > 0 ? this._paddingTop : this._paddingBottom);
              var bottomToTopColumnBreak = false;

              if (this._verticalDirection === VerticalDirection.BOTTOM_TO_TOP && columnBreakBoundary > (1 - layoutAnchor.y) * baseHeight) {
                bottomToTopColumnBreak = true;
              }

              var topToBottomColumnBreak = false;

              if (this._verticalDirection === VerticalDirection.TOP_TO_BOTTOM && columnBreakBoundary < -layoutAnchor.y * baseHeight) {
                topToBottomColumnBreak = true;
              }

              if (bottomToTopColumnBreak || topToBottomColumnBreak) {
                if (childBoundingBoxWidth >= tempMaxWidth) {
                  if (secondMaxWidth === 0) {
                    secondMaxWidth = tempMaxWidth;
                  }

                  columnMaxWidth += secondMaxWidth;
                  secondMaxWidth = tempMaxWidth;
                } else {
                  columnMaxWidth += tempMaxWidth;
                  secondMaxWidth = childBoundingBoxWidth;
                  tempMaxWidth = 0;
                }

                nextY = bottomBoundaryOfLayout + sign * (paddingY + anchorY * childBoundingBoxHeight);
                column++;
              }
            }

            var finalPositionX = fnPositionX(_child2, columnMaxWidth, column);

            if (baseHeight >= childBoundingBoxHeight + (this._paddingTop + this._paddingBottom)) {
              if (applyChildren) {
                _child2.getPosition(_tempPos);

                _child2.setPosition(finalPositionX, nextY, _tempPos.z);
              }
            }

            var signX = 1;
            var tempFinalPositionX = void 0; // when the item is the last column break item, the tempMaxWidth will be 0.

            var rightMargin = tempMaxWidth === 0 ? childBoundingBoxWidth : tempMaxWidth;

            if (this._horizontalDirection === HorizontalDirection.RIGHT_TO_LEFT) {
              signX = -1;
              containerResizeBoundary = containerResizeBoundary || this.node.getContentSize().width;
              tempFinalPositionX = finalPositionX + signX * (rightMargin * maxWidthChildAnchorX + this._paddingLeft);

              if (tempFinalPositionX < containerResizeBoundary) {
                containerResizeBoundary = tempFinalPositionX;
              }
            } else {
              containerResizeBoundary = containerResizeBoundary || -this.node.getContentSize().width;
              tempFinalPositionX = finalPositionX + signX * (rightMargin * maxWidthChildAnchorX + this._paddingRight);

              if (tempFinalPositionX > containerResizeBoundary) {
                containerResizeBoundary = tempFinalPositionX;
              }
            }

            nextY += topBoundaryOfChild;
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }

        return containerResizeBoundary;
      }
    }, {
      key: "_doLayoutBasic",
      value: function _doLayoutBasic() {
        var children = this.node.children;
        var allChildrenBoundingBox = null;

        var _iterator7 = _createForOfIteratorHelper(children),
            _step7;

        try {
          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
            var child = _step7.value;
            var childTransform = child.getComponent(_uiTransformComponent.UITransformComponent);

            if (!childTransform) {
              continue;
            }

            if (child.activeInHierarchy) {
              if (!allChildrenBoundingBox) {
                allChildrenBoundingBox = childTransform.getBoundingBoxToWorld();
              } else {
                _index.Rect.union(allChildrenBoundingBox, allChildrenBoundingBox, childTransform.getBoundingBoxToWorld());
              }
            }
          }
        } catch (err) {
          _iterator7.e(err);
        } finally {
          _iterator7.f();
        }

        if (allChildrenBoundingBox) {
          var parentTransform = this.node.parent.getComponent(_uiTransformComponent.UITransformComponent);

          if (!parentTransform) {
            return;
          }

          _index.Vec3.set(_tempPos, allChildrenBoundingBox.x, allChildrenBoundingBox.y, 0);

          var leftBottomInParentSpace = new _index.Vec3();
          parentTransform.convertToNodeSpaceAR(_tempPos, leftBottomInParentSpace);

          _index.Vec3.set(leftBottomInParentSpace, leftBottomInParentSpace.x - this._paddingLeft, leftBottomInParentSpace.y - this._paddingBottom, leftBottomInParentSpace.z);

          _index.Vec3.set(_tempPos, allChildrenBoundingBox.x + allChildrenBoundingBox.width, allChildrenBoundingBox.y + allChildrenBoundingBox.height, 0);

          var rightTopInParentSpace = new _index.Vec3();
          parentTransform.convertToNodeSpaceAR(_tempPos, rightTopInParentSpace);

          _index.Vec3.set(rightTopInParentSpace, rightTopInParentSpace.x + this._paddingRight, rightTopInParentSpace.y + this._paddingTop, rightTopInParentSpace.z);

          var newSize = cc.size(parseFloat((rightTopInParentSpace.x - leftBottomInParentSpace.x).toFixed(2)), parseFloat((rightTopInParentSpace.y - leftBottomInParentSpace.y).toFixed(2)));
          this.node.getPosition(_tempPos);

          if (newSize.width !== 0) {
            var newAnchorX = (_tempPos.x - leftBottomInParentSpace.x) / newSize.width;
            this.node.anchorX = parseFloat(newAnchorX.toFixed(2));
          }

          if (newSize.height !== 0) {
            var newAnchorY = (_tempPos.y - leftBottomInParentSpace.y) / newSize.height;
            this.node.anchorY = parseFloat(newAnchorY.toFixed(2));
          }

          this.node.setContentSize(newSize);
        }
      }
    }, {
      key: "_doLayoutGridAxisHorizontal",
      value: function _doLayoutGridAxisHorizontal(layoutAnchor, layoutSize) {
        var _this2 = this;

        var baseWidth = layoutSize.width;
        var sign = 1;
        var bottomBoundaryOfLayout = -layoutAnchor.y * layoutSize.height;
        var paddingY = this._paddingBottom;

        if (this._verticalDirection === VerticalDirection.TOP_TO_BOTTOM) {
          sign = -1;
          bottomBoundaryOfLayout = (1 - layoutAnchor.y) * layoutSize.height;
          paddingY = this._paddingTop;
        }

        var self = this;

        var fnPositionY = function fnPositionY(child, topOffset, row) {
          return bottomBoundaryOfLayout + sign * (topOffset + child.anchorY * child.height * self._getUsedScaleValue(child.getScale().y) + paddingY + row * _this2._spacingY);
        };

        var newHeight = 0;

        if (this._resizeMode === ResizeMode.CONTAINER) {
          // calculate the new height of container, it won't change the position of it's children
          var boundary = this._doLayoutHorizontally(baseWidth, true, fnPositionY, false);

          newHeight = bottomBoundaryOfLayout - boundary;

          if (newHeight < 0) {
            newHeight *= -1;
          }

          bottomBoundaryOfLayout = -layoutAnchor.y * newHeight;

          if (this._verticalDirection === VerticalDirection.TOP_TO_BOTTOM) {
            sign = -1;
            bottomBoundaryOfLayout = (1 - layoutAnchor.y) * newHeight;
          }
        }

        this._doLayoutHorizontally(baseWidth, true, fnPositionY, true);

        if (this._resizeMode === ResizeMode.CONTAINER) {
          this.node.setContentSize(baseWidth, newHeight);
        }
      }
    }, {
      key: "_doLayoutGridAxisVertical",
      value: function _doLayoutGridAxisVertical(layoutAnchor, layoutSize) {
        var _this3 = this;

        var baseHeight = layoutSize.height;
        var sign = 1;
        var leftBoundaryOfLayout = -layoutAnchor.x * layoutSize.width;
        var paddingX = this._paddingLeft;

        if (this._horizontalDirection === HorizontalDirection.RIGHT_TO_LEFT) {
          sign = -1;
          leftBoundaryOfLayout = (1 - layoutAnchor.x) * layoutSize.width;
          paddingX = this._paddingRight;
        }

        var self = this;

        var fnPositionX = function fnPositionX(child, leftOffset, column) {
          return leftBoundaryOfLayout + sign * (leftOffset + child.anchorX * child.width * self._getUsedScaleValue(child.getScale().x) + paddingX + column * _this3._spacingX);
        };

        var newWidth = 0;

        if (this._resizeMode === ResizeMode.CONTAINER) {
          var boundary = this._doLayoutVertically(baseHeight, true, fnPositionX, false);

          newWidth = leftBoundaryOfLayout - boundary;

          if (newWidth < 0) {
            newWidth *= -1;
          }

          leftBoundaryOfLayout = -layoutAnchor.x * newWidth;

          if (this._horizontalDirection === HorizontalDirection.RIGHT_TO_LEFT) {
            sign = -1;
            leftBoundaryOfLayout = (1 - layoutAnchor.x) * newWidth;
          }
        }

        this._doLayoutVertically(baseHeight, true, fnPositionX, true);

        if (this._resizeMode === ResizeMode.CONTAINER) {
          this.node.setContentSize(newWidth, baseHeight);
        }
      }
    }, {
      key: "_doLayoutGrid",
      value: function _doLayoutGrid() {
        var layoutAnchor = this.node.getAnchorPoint();
        var layoutSize = this.node.getContentSize();

        if (this.startAxis === AxisDirection.HORIZONTAL) {
          this._doLayoutGridAxisHorizontal(layoutAnchor, layoutSize);
        } else if (this.startAxis === AxisDirection.VERTICAL) {
          this._doLayoutGridAxisVertical(layoutAnchor, layoutSize);
        }
      }
    }, {
      key: "_getHorizontalBaseWidth",
      value: function _getHorizontalBaseWidth(children) {
        var newWidth = 0;
        var activeChildCount = 0;

        if (this._resizeMode === ResizeMode.CONTAINER) {
          var _iterator8 = _createForOfIteratorHelper(children),
              _step8;

          try {
            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
              var child = _step8.value;
              child.getScale(_tempScale);

              if (child.activeInHierarchy) {
                activeChildCount++;
                newWidth += child.width * this._getUsedScaleValue(_tempScale.x);
              }
            }
          } catch (err) {
            _iterator8.e(err);
          } finally {
            _iterator8.f();
          }

          newWidth += (activeChildCount - 1) * this._spacingX + this._paddingLeft + this._paddingRight;
        } else {
          newWidth = this.node.getContentSize().width;
        }

        return newWidth;
      }
    }, {
      key: "_getVerticalBaseHeight",
      value: function _getVerticalBaseHeight(children) {
        var newHeight = 0;
        var activeChildCount = 0;

        if (this._resizeMode === ResizeMode.CONTAINER) {
          var _iterator9 = _createForOfIteratorHelper(children),
              _step9;

          try {
            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
              var child = _step9.value;
              child.getScale(_tempScale);

              if (child.activeInHierarchy) {
                activeChildCount++;
                newHeight += child.height * this._getUsedScaleValue(_tempScale.y);
              }
            }
          } catch (err) {
            _iterator9.e(err);
          } finally {
            _iterator9.f();
          }

          newHeight += (activeChildCount - 1) * this._spacingY + this._paddingBottom + this._paddingTop;
        } else {
          newHeight = this.node.getContentSize().height;
        }

        return newHeight;
      }
    }, {
      key: "_doLayout",
      value: function _doLayout() {
        var _this4 = this;

        if (this._N$layoutType === Type.HORIZONTAL) {
          var newWidth = this._getHorizontalBaseWidth(this.node.children);

          var fnPositionY = function fnPositionY(child) {
            var pos = _this4._isAlign ? _index.Vec3.ZERO : child.position;
            return pos.y;
          };

          this._doLayoutHorizontally(newWidth, false, fnPositionY, true);

          this._isAlign = false;
          this.node.width = newWidth;
        } else if (this._N$layoutType === Type.VERTICAL) {
          var newHeight = this._getVerticalBaseHeight(this.node.children);

          var fnPositionX = function fnPositionX(child) {
            var pos = _this4._isAlign ? _index.Vec3.ZERO : child.position;
            return pos.x;
          };

          this._doLayoutVertically(newHeight, false, fnPositionX, true);

          this._isAlign = false;
          this.node.height = newHeight;
        } else if (this._N$layoutType === Type.NONE) {
          if (this._resizeMode === ResizeMode.CONTAINER) {
            this._doLayoutBasic();
          }
        } else if (this._N$layoutType === Type.GRID) {
          this._doLayoutGrid();
        }
      }
    }, {
      key: "_getUsedScaleValue",
      value: function _getUsedScaleValue(value) {
        return this._affectedByScale ? Math.abs(value) : 1;
      }
    }, {
      key: "_transformDirty",
      value: function _transformDirty(type) {
        if (!(type & _nodeEnum.TransformBit.POSITION)) {
          return;
        }

        this._doLayoutDirty();
      }
    }, {
      key: "_doLayoutDirty",
      value: function _doLayoutDirty() {
        this._layoutDirty = true;
      }
    }, {
      key: "_doScaleDirty",
      value: function _doScaleDirty(type) {
        if (type & _nodeEnum.TransformBit.SCALE) {
          this._layoutDirty = this._layoutDirty || this._affectedByScale;
        }
      }
    }, {
      key: "type",

      /**
       * @en
       * The layout type.
       *
       * @zh
       * 布局类型。
       */
      get: function get() {
        return this._N$layoutType;
      },
      set: function set(value) {
        this._N$layoutType = value;

        if (_defaultConstants.EDITOR && this._N$layoutType !== Type.NONE && this._resizeMode === ResizeMode.CONTAINER
        /*&& !cc.engine.isPlaying*/
        ) {// const reLayouted = _Scene.DetectConflict.checkConflict_Layout(this);
            // if (reLayouted) {
            //     return;
            // }
          }

        this._isAlign = true;

        this._doLayoutDirty();
      }
      /**
       * @en
       * The are three resize modes for Layout. None, resize Container and resize children.
       *
       * @zh
       * 缩放模式。
       */

    }, {
      key: "resizeMode",
      get: function get() {
        return this._resizeMode;
      },
      set: function set(value) {
        if (this._N$layoutType === Type.NONE && value === ResizeMode.CHILDREN) {
          return;
        }

        this._resizeMode = value;

        if (_defaultConstants.EDITOR && value === ResizeMode.CONTAINER
        /*&& !cc.engine.isPlaying*/
        ) {// const reLayouted = _Scene.DetectConflict.checkConflict_Layout(this);
            // if (reLayouted) {
            //     return;
            // }
          }

        this._doLayoutDirty();
      }
      /**
       * @en
       * The cell size for grid layout.
       *
       * @zh
       * 每个格子的大小，只有布局类型为 GRID 的时候才有效。
       */

    }, {
      key: "cellSize",
      get: function get() {
        return this._cellSize;
      },
      set: function set(value) {
        if (this._cellSize === value) {
          return;
        }

        this._cellSize.set(value);

        this._doLayoutDirty();
      }
      /**
       * @en
       * The start axis for grid layout. If you choose horizontal, then children will layout horizontally at first,
       * and then break line on demand. Choose vertical if you want to layout vertically at first .
       *
       * @zh
       * 起始轴方向类型，可进行水平和垂直布局排列，只有布局类型为 GRID 的时候才有效。
       */

    }, {
      key: "startAxis",
      get: function get() {
        return this._startAxis;
      },
      set: function set(value) {
        if (this._startAxis === value) {
          return;
        }

        if (_defaultConstants.EDITOR && this._resizeMode === ResizeMode.CONTAINER && !cc.engine.isPlaying) {// const reLayouted = _Scene.DetectConflict.checkConflict_Layout(this);
          // if (reLayouted) {
          //     return;
          // }
        }

        this._startAxis = value;

        this._doLayoutDirty();
      }
      /**
       * @en
       * The left padding of layout, it only effect the layout in one direction.
       *
       * @zh
       * 容器内左边距，只会在一个布局方向上生效。
       */

    }, {
      key: "paddingLeft",
      get: function get() {
        return this._paddingLeft;
      },
      set: function set(value) {
        if (this._paddingLeft === value) {
          return;
        }

        this._paddingLeft = value;

        this._doLayoutDirty();
      }
      /**
       * @en
       * The right padding of layout, it only effect the layout in one direction.
       *
       * @zh
       * 容器内右边距，只会在一个布局方向上生效。
       */

    }, {
      key: "paddingRight",
      get: function get() {
        return this._paddingRight;
      },
      set: function set(value) {
        if (this._paddingRight === value) {
          return;
        }

        this._paddingRight = value;

        this._doLayoutDirty();
      }
      /**
       * @en
       * The top padding of layout, it only effect the layout in one direction.
       *
       * @zh
       * 容器内上边距，只会在一个布局方向上生效。
       */

    }, {
      key: "paddingTop",
      get: function get() {
        return this._paddingTop;
      },
      set: function set(value) {
        if (this._paddingTop === value) {
          return;
        }

        this._paddingTop = value;

        this._doLayoutDirty();
      }
      /**
       * @en
       * The bottom padding of layout, it only effect the layout in one direction.
       *
       * @zh
       * 容器内下边距，只会在一个布局方向上生效。
       */

    }, {
      key: "paddingBottom",
      get: function get() {
        return this._paddingBottom;
      },
      set: function set(value) {
        if (this._paddingBottom === value) {
          return;
        }

        this._paddingBottom = value;

        this._doLayoutDirty();
      }
      /**
       * @en
       * The distance in x-axis between each element in layout.
       *
       * @zh
       * 子节点之间的水平间距。
       */

    }, {
      key: "spacingX",
      get: function get() {
        return this._spacingX;
      },
      set: function set(value) {
        if (this._spacingX === value) {
          return;
        }

        this._spacingX = value;

        this._doLayoutDirty();
      }
      /**
       * @en
       * The distance in y-axis between each element in layout.
       *
       * @zh
       * 子节点之间的垂直间距。
       */

    }, {
      key: "spacingY",
      get: function get() {
        return this._spacingY;
      },
      set: function set(value) {
        if (this._spacingY === value) {
          return;
        }

        this._spacingY = value;

        this._doLayoutDirty();
      }
      /**
       * @en
       * Only take effect in Vertical layout mode.
       * This option changes the start element's positioning.
       *
       * @zh
       * 垂直排列子节点的方向。
       */

    }, {
      key: "verticalDirection",
      get: function get() {
        return this._verticalDirection;
      },
      set: function set(value) {
        if (this._verticalDirection === value) {
          return;
        }

        this._verticalDirection = value;

        this._doLayoutDirty();
      }
      /**
       * @en
       * Only take effect in horizontal layout mode.
       * This option changes the start element's positioning.
       *
       * @zh
       * 水平排列子节点的方向。
       */

    }, {
      key: "horizontalDirection",
      get: function get() {
        return this._horizontalDirection;
      },
      set: function set(value) {
        if (this._horizontalDirection === value) {
          return;
        }

        this._horizontalDirection = value;

        this._doLayoutDirty();
      }
      /**
       * @en
       * The padding of layout, it will effect the layout in horizontal and vertical direction.
       *
       * @zh
       * 容器内边距，该属性会在四个布局方向上生效。
       */

    }, {
      key: "padding",
      get: function get() {
        return this._paddingLeft;
      },
      set: function set(value) {
        this._N$padding = value;

        this._migratePaddingData();

        this._doLayoutDirty();
      }
      /**
       * @en
       * Adjust the layout if the children scaled.
       *
       * @zh
       * 子节点缩放比例是否影响布局。
       */

    }, {
      key: "affectedByScale",
      get: function get() {
        return this._affectedByScale;
      },
      set: function set(value) {
        this._affectedByScale = value;

        this._doLayoutDirty();
      }
    }]);

    return LayoutComponent;
  }(_component.Component), _class3.Type = Type, _class3.VerticalDirection = VerticalDirection, _class3.HorizontalDirection = HorizontalDirection, _class3.ResizeMode = ResizeMode, _class3.AxisDirection = AxisDirection, _temp), (_applyDecoratedDescriptor(_class2.prototype, "type", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "type"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "resizeMode", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "resizeMode"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "cellSize", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "cellSize"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "startAxis", [_dec9], Object.getOwnPropertyDescriptor(_class2.prototype, "startAxis"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "paddingLeft", [_dec10], Object.getOwnPropertyDescriptor(_class2.prototype, "paddingLeft"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "paddingRight", [_dec11], Object.getOwnPropertyDescriptor(_class2.prototype, "paddingRight"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "paddingTop", [_dec12], Object.getOwnPropertyDescriptor(_class2.prototype, "paddingTop"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "paddingBottom", [_dec13], Object.getOwnPropertyDescriptor(_class2.prototype, "paddingBottom"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "spacingX", [_dec14], Object.getOwnPropertyDescriptor(_class2.prototype, "spacingX"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "spacingY", [_dec15], Object.getOwnPropertyDescriptor(_class2.prototype, "spacingY"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "verticalDirection", [_dec16], Object.getOwnPropertyDescriptor(_class2.prototype, "verticalDirection"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "horizontalDirection", [_dec17], Object.getOwnPropertyDescriptor(_class2.prototype, "horizontalDirection"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "padding", [_dec18], Object.getOwnPropertyDescriptor(_class2.prototype, "padding"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "affectedByScale", [_dec19], Object.getOwnPropertyDescriptor(_class2.prototype, "affectedByScale"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_resizeMode", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return ResizeMode.NONE;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_N$layoutType", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return Type.NONE;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_N$padding", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_cellSize", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _index.Size(40, 40);
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_startAxis", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return AxisDirection.HORIZONTAL;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "_paddingLeft", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "_paddingRight", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "_paddingTop", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "_paddingBottom", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "_spacingX", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "_spacingY", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "_verticalDirection", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return VerticalDirection.TOP_TO_BOTTOM;
    }
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "_horizontalDirection", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return HorizontalDirection.LEFT_TO_RIGHT;
    }
  }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "_affectedByScale", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  })), _class2)) || _class) || _class) || _class) || _class) || _class) || _class);
  _exports.LayoutComponent = LayoutComponent;
  cc.LayoutComponent = LayoutComponent;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,