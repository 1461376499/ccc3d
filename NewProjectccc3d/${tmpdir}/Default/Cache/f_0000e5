(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../core/components/ui-base/ui-render-component.js", "../../core/renderer/ui/mesh-buffer.js", "../../core/data/class-decorator.js", "../../core/renderer/ui/ui-draw-batch.js", "../../core/index.js", "../../core/renderer/ui/ui-vertex-format.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../core/components/ui-base/ui-render-component.js"), require("../../core/renderer/ui/mesh-buffer.js"), require("../../core/data/class-decorator.js"), require("../../core/renderer/ui/ui-draw-batch.js"), require("../../core/index.js"), require("../../core/renderer/ui/ui-vertex-format.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.uiRenderComponent, global.meshBuffer, global.classDecorator, global.uiDrawBatch, global.index, global.uiVertexFormat);
    global.uiStaticBatchComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _uiRenderComponent, _meshBuffer, _classDecorator, _uiDrawBatch, _index, _uiVertexFormat) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.UIStaticBatchComponent = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  /**
   * @en
   * Static batch component of UI.
   * This component is placed on the root node of all node objects that need to be batch.
   * Only sprites and label participate in the batch.
   * Static batch must be enabled manually, otherwise dynamic batch is still used.
   * Note: Do not place mask, Graphics, and objects such as UI models or particles under child nodes,
   * otherwise rendering will be skipped after static batching is enabled.
   *
   * @zh
   * UI 静态合批组件。
   * 该组件放在所有需要被静态合批的节点对象的根节点上，子节点放置对象必须是精灵和文本，其余对象不参与静态合批。
   * 用户必须通过手动方式启用收集静态合批数据[[markAsDirty]]，否则合批方式仍然采用动态合批（采集数据的流程相同）。此后渲染的内容是采用收集到的合批渲染数据，子节点的任何修改将不再有效。
   * 注意：子节点下不要放置 Mask，Graphics，以及 UI 模型或者粒子之类对象，否则会在启用完静态合批后跳过渲染。
   */
  var UIStaticBatchComponent = (_dec = (0, _classDecorator.ccclass)('cc.UIStaticBatchComponent'), _dec2 = (0, _classDecorator.help)('i18n:cc.UIStaticBatchComponent'), _dec3 = (0, _classDecorator.menu)('UI/Render/UIStaticBatch'), _dec4 = (0, _classDecorator.executionOrder)(110), _dec5 = (0, _classDecorator.property)({
    visible: false,
    override: true
  }), _dec6 = (0, _classDecorator.property)({
    visible: false,
    override: true
  }), _dec7 = (0, _classDecorator.property)({
    visible: false,
    override: true
  }), _dec8 = (0, _classDecorator.property)({
    type: _index.Material,
    displayOrder: 3,
    visible: false,
    override: true
  }), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = (_class2 = (_temp = /*#__PURE__*/function (_UIRenderComponent) {
    _inherits(UIStaticBatchComponent, _UIRenderComponent);

    function UIStaticBatchComponent() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, UIStaticBatchComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(UIStaticBatchComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this._init = false;
      _this._meshBuffer = null;
      _this._dirty = true;
      _this._lastMeshBuffer = null;
      _this._uiDrawBatchList = [];
      return _this;
    }

    _createClass(UIStaticBatchComponent, [{
      key: "onLoad",
      value: function onLoad() {
        var ui = this._getUI();

        if (!ui) {
          return;
        }

        var attr = _uiVertexFormat.vfmt;
        var buffer = new _meshBuffer.MeshBuffer(ui);
        buffer.initialize(attr, this._arrivalMaxBuffer);
        this._meshBuffer = buffer;
      }
    }, {
      key: "onDestroy",
      value: function onDestroy() {
        _get(_getPrototypeOf(UIStaticBatchComponent.prototype), "onDestroy", this).call(this);

        this._clearData();

        if (this._meshBuffer) {
          this._meshBuffer.destroy();

          this._meshBuffer = null;
        }
      }
    }, {
      key: "updateAssembler",
      value: function updateAssembler(render) {
        if (this._dirty) {
          render.finishMergeBatches();
          this._lastMeshBuffer = render.currBufferBatch;
          render.currBufferBatch = this._meshBuffer;
          render.currStaticRoot = this;
        }

        if (this._init) {
          render.finishMergeBatches();
          render.commitStaticBatch(this);
        }
      }
    }, {
      key: "postUpdateAssembler",
      value: function postUpdateAssembler(render) {
        if (this._dirty) {
          render.finishMergeBatches();
          render.currBufferBatch = this._lastMeshBuffer;
          render.currStaticRoot = null;
          this._dirty = false;
          this._init = true;
          this.node._static = true;

          this._meshBuffer.uploadData();
        }
      }
      /**
       * @en
       * Recollect data tags.
       * The render data will be recollected during the render phase of the current frame, and the next frame will be rendered using fixed data.
       * Note: 尽量不要频繁调用此接口, 会有一定内存损耗.
       *
       * @zh
       * 重新采集数据标记，会在当前帧的渲染阶段重新采集渲染数据，下一帧开始将会使用固定数据进行渲染。
       * 注意：尽量不要频繁调用此接口，因为会清空原先存储的 ia 数据重新采集，会有一定内存损耗。
       */

    }, {
      key: "markAsDirty",
      value: function markAsDirty() {
        if (!this._getUI()) {
          return;
        }

        this.node._static = false;
        this._dirty = true;
        this._init = false;

        this._clearData();
      }
    }, {
      key: "_requireDrawBatch",
      value: function _requireDrawBatch() {
        var batch = new _uiDrawBatch.UIDrawBatch();
        batch.isStatic = true;

        this._uiDrawBatchList.push(batch);

        return batch;
      }
    }, {
      key: "_clearData",
      value: function _clearData() {
        if (this._meshBuffer) {
          this._meshBuffer.reset();

          var ui = this._getUI();

          for (var i = 0; i < this._uiDrawBatchList.length; i++) {
            var element = this._uiDrawBatchList[i];
            element.destroy(ui);
          }
        }

        this._uiDrawBatchList.length = 0;
        this._init = false;
      }
    }, {
      key: "_getUI",
      value: function _getUI() {
        if (_index.director.root && _index.director.root.ui) {
          return _index.director.root.ui;
        }

        (0, _index.warnID)(9301);
        return null;
      }
    }, {
      key: "_arrivalMaxBuffer",
      value: function _arrivalMaxBuffer() {
        (0, _index.warnID)(9300);
      }
    }, {
      key: "dstBlendFactor",
      get: function get() {
        return this._dstBlendFactor;
      },
      set: function set(value) {
        if (this._dstBlendFactor === value) {
          return;
        }

        this._dstBlendFactor = value;

        this._updateBlendFunc();
      }
    }, {
      key: "srcBlendFactor",
      get: function get() {
        return this._srcBlendFactor;
      },
      set: function set(value) {
        if (this._srcBlendFactor === value) {
          return;
        }

        this._srcBlendFactor = value;

        this._updateBlendFunc();
      }
    }, {
      key: "color",
      get: function get() {
        return this._color;
      },
      set: function set(value) {
        if (this._color === value) {
          return;
        }

        this._color.set(value);

        this._updateColor();

        this.markForUpdateRenderData();
      }
    }, {
      key: "sharedMaterial",
      get: function get() {
        return this._sharedMaterial;
      },
      set: function set(value) {
        if (this._sharedMaterial === value) {
          return;
        }

        this._sharedMaterial = value;

        if (this._instanceMaterial) {
          this._instanceMaterial();
        }
      }
    }, {
      key: "drawBatchList",
      get: function get() {
        return this._uiDrawBatchList;
      }
    }]);

    return UIStaticBatchComponent;
  }(_uiRenderComponent.UIRenderComponent), _temp), (_applyDecoratedDescriptor(_class2.prototype, "dstBlendFactor", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "dstBlendFactor"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "srcBlendFactor", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "srcBlendFactor"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "color", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "color"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "sharedMaterial", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "sharedMaterial"), _class2.prototype)), _class2)) || _class) || _class) || _class) || _class);
  _exports.UIStaticBatchComponent = UIStaticBatchComponent;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,