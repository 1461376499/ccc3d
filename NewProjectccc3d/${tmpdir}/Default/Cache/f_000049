(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./math/index.js", "./animation/index.js", "./platform/index.js", "./platform/sys.js", "./default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./math/index.js"), require("./animation/index.js"), require("./platform/index.js"), require("./platform/sys.js"), require("./default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.index, global.index, global.sys, global.defaultConstants);
    global.splashScreenWebgl = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _index2, _index3, _sys, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SplashScreenWebgl = void 0;

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function createShader(gl, type, source) {
    var shader = gl.createShader(type);

    if (!shader) {
      console.error('create shader error', source);
      return;
    }

    gl.shaderSource(shader, source);
    gl.compileShader(shader);
    var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);

    if (success) {
      return shader;
    } else {
      console.error('compile shader error', shader);
      console.log(gl.getShaderInfoLog(shader));
      gl.deleteShader(shader);
    }
  }

  function createProgram(gl, vertexShader, fragmentShader) {
    var program = gl.createProgram();

    if (!program) {
      console.error('create program error');
      return;
    }

    gl.attachShader(program, vertexShader);
    gl.attachShader(program, fragmentShader);
    gl.linkProgram(program);
    var success = gl.getProgramParameter(program, gl.LINK_STATUS);

    if (success) {
      return program;
    } else {
      console.error('link program error', success);
      console.log(gl.getProgramInfoLog(program));
      gl.deleteProgram(program);
    }
  }

  var vs = "precision mediump float;attribute vec2 a_position;attribute vec2 a_texCoord;uniform vec2 u_resolution;uniform mat3 u_worldMat;varying vec2 v_texCoord;void main() {vec3 wpos = u_worldMat * vec3(a_position, 1.0);vec2 clipSpace = wpos.xy / u_resolution * 2.0 - 1.0;gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);v_texCoord = a_texCoord;}";
  var fs = "precision mediump float;uniform float u_alpha;uniform sampler2D u_image;varying vec2 v_texCoord;void main(){gl_FragColor = texture2D(u_image,v_texCoord);gl_FragColor.xyz *= clamp(u_alpha, 0.0, 1.0);}";

  var SplashScreenWebgl = /*#__PURE__*/function () {
    _createClass(SplashScreenWebgl, [{
      key: "_tryToStart",
      value: function _tryToStart() {
        if (this._splashFinish && this._loadFinish) {
          if (this.callBack) {
            this.cancelAnimate = true;
            cancelAnimationFrame(this.handle);
            this.destroy();
            this.callBack();
          }
        }
      }
    }, {
      key: "setOnFinish",
      value: function setOnFinish(cb) {
        if ((!this._isStart || this._directCall) && cb) {
          delete SplashScreenWebgl._ins;
          return cb();
        }

        this.callBack = cb;
      }
    }, {
      key: "main",
      value: function main(canvas) {
        var ccSetting = globalThis._CCSettings;

        if (ccSetting && ccSetting.splashScreen) {
          this.setting = ccSetting.splashScreen;
          this.setting.totalTime = this.setting.totalTime != null ? this.setting.totalTime : 3000;
          this.setting.base64src = this.setting.base64src != null ? this.setting.base64src : '';
          this.setting.effect = this.setting.effect != null ? this.setting.effect : 'Fade-InOut';
          this.setting.clearColor = this.setting.clearColor != null ? this.setting.clearColor : {
            r: 0.88,
            g: 0.88,
            b: 0.88,
            a: 1.0
          };
          this.setting.displayRatio = this.setting.displayRatio != null ? this.setting.displayRatio : 0.4;
          this.setting.displayWatermark = this.setting.displayWatermark != null ? this.setting.displayWatermark : true;
          this.orientation = ccSetting.orientation;
        } else {
          this.setting = {
            totalTime: 3000,
            base64src: '',
            effect: 'Fade-InOut',
            clearColor: {
              r: 0.88,
              g: 0.88,
              b: 0.88,
              a: 1.0
            },
            displayRatio: 0.4,
            displayWatermark: true
          };
        }

        if (canvas == null || this.setting.base64src == '' || this.setting.totalTime <= 0) {
          if (this.callBack) {
            this.callBack();
          }

          this.callBack = null;
          this.setting = null;
          this._directCall = true;
          return;
        } else {
          cc.view.enableRetina(true);
          var designRes = ccSetting.designResolution;

          if (designRes) {
            cc.view.setDesignResolutionSize(designRes.width, designRes.height, designRes.policy);
          } else {
            cc.view.setDesignResolutionSize(960, 640, 4);
          }

          var useWebGL2 = !!globalThis.WebGL2RenderingContext;
          var userAgent = globalThis.navigator.userAgent.toLowerCase();

          if (userAgent.indexOf('safari') !== -1 && userAgent.indexOf('chrome') === -1 || _sys.sys.browserType === _sys.sys.BROWSER_TYPE_UC // UC browser implementation doesn't not conform to WebGL2 standard
          ) {
              useWebGL2 = false;
            }

          var webGLCtxAttribs = {
            alpha: _index3.macro.ENABLE_TRANSPARENT_CANVAS,
            antialias: true,
            depth: true,
            stencil: true,
            premultipliedAlpha: true,
            preserveDrawingBuffer: false,
            powerPreference: 'default',
            failIfMajorPerformanceCaveat: false
          };
          var gl = null;
          var gl2 = null;

          if (useWebGL2 && cc.WebGL2GFXDevice) {
            gl2 = canvas.getContext('webgl2', webGLCtxAttribs);

            if (gl2 == null) {
              gl = canvas.getContext('webgl', webGLCtxAttribs);
            }
          } else {
            gl = canvas.getContext('webgl', webGLCtxAttribs);
          }

          if (gl == null && gl2 == null) {
            return console.error("this device does not support webgl");
          } else {
            if (gl != null) this.gl = gl;
            if (gl2 != null) this.gl = gl2;
          }

          var textImage = this.textImage;
          textImage.width = 330;
          textImage.height = 30;
          textImage.style.width = "".concat(textImage.width);
          textImage.style.height = "".concat(textImage.height);
          var ctx = textImage.getContext('2d');
          ctx.font = "".concat(18, "px Arial");
          ctx.textBaseline = 'top';
          ctx.textAlign = 'left';
          ctx.fillStyle = '`#424242`';
          var text = "Powered by Cocos Creator 3D";
          var textMetrics = ctx.measureText(text);
          ctx.fillText(text, (330 - textMetrics.width) / 2, 6);
          this.logoImage.onload = this.init.bind(this);
          this.logoImage.src = this.setting.base64src;
          this._isStart = true;
        }
      }
    }, {
      key: "init",
      value: function init() {
        // adapt for native mac & ios
        if (_defaultConstants.JSB) {
          if (_sys.sys.os == _sys.sys.OS_OSX || _sys.sys.os == _sys.sys.OS_IOS) {
            this.gl.canvas.width = screen.width * devicePixelRatio;
            this.gl.canvas.height = screen.height * devicePixelRatio;
          }
        } // adapt for cocos play


        if (_defaultConstants.COCOSPLAY) {
          if (this.orientation === 'landscape') {
            try {
              var res = globalThis['loadRuntime']().getSystemInfoSync();
              var t = res.coreVersion;
              this.cocosPlayVersion = parseInt(t.replace(new RegExp("\\.", "g"), ""));
              console.log("getSystemInfo success", res.coreVersion, this.cocosPlayVersion);
            } catch (e) {
              console.log("getSystemInfo error", e);
            }

            if (this.cocosPlayVersion > 134) {
              var width = globalThis.innerWidth;
              var height = globalThis.innerHeight;

              if (width < height) {
                globalThis.innerWidth = height;
                globalThis.innerHeight = width;
              }
            } else {
              // 1.0.8
              var _width = this.gl.canvas.width;
              var _height = this.gl.canvas.height;

              if (_width < _height) {
                this.gl.canvas.width = _height;
                this.gl.canvas.height = _width;
              }
            }
          }
        } // TODO: hack for XIAOMI cause on landscape canvas value is wrong


        if (_defaultConstants.XIAOMI) {
          var _width2 = this.gl.canvas.width;
          var _height2 = this.gl.canvas.height;

          if (this.orientation === 'landscape' && _width2 < _height2) {
            this.gl.canvas.width = _height2;
            this.gl.canvas.height = _width2;
          }
        } // adapt for alipay, adjust the canvas size


        if (_defaultConstants.ALIPAY) {
          if (_sys.sys.os == _sys.sys.OS_IOS) {
            if (this.orientation === 'landscape') {
              this.gl.canvas.width = screen.height * devicePixelRatio;
              this.gl.canvas.height = screen.width * devicePixelRatio;
            } else {
              this.gl.canvas.width = screen.width * devicePixelRatio;
              this.gl.canvas.height = screen.height * devicePixelRatio;
            }
          } else {
            this.gl.canvas.width = screen.width;
            this.gl.canvas.height = screen.height;
          }
        }

        this.initMatrix();
        this.initProgram();
        this.initBuffer();
        this.initTexture();
        this.initState();
        var that = this;

        var animate = function animate(time) {
          if (that.cancelAnimate) {
            return;
          }

          if (time === undefined) {
            time = performance.now();
          }

          that.frame(time);
          requestAnimationFrame(animate);
        };

        this.handle = requestAnimationFrame(animate);
      }
    }, {
      key: "initMatrix",
      value: function initMatrix() {
        var screenWidth = this.gl.canvas.width;
        var screenHeight = this.gl.canvas.height;
        var displayRatio = this.setting.displayRatio;
        var logoW = this.logoImage.width / 2;
        var logoH = this.logoImage.height / 2;
        var textW = this.textImage.width / 2;
        var textH = this.textImage.height / 2;

        if (screenWidth < screenHeight) {
          logoW = screenWidth / 2 * displayRatio;
          logoH = logoW / (this.logoImage.width / this.logoImage.height);
          textW = screenWidth / 2 * 0.5;
          textH = textW / (this.textImage.width / this.textImage.height);
        } else {
          logoW = screenHeight / 2 * displayRatio;
          logoH = logoW / (this.logoImage.width / this.logoImage.height);
          textW = screenHeight / 2 * 0.5;
          textH = textW / (this.textImage.width / this.textImage.height);
        }

        this.logoMat33[0] = logoW;
        this.logoMat33[4] = logoH;
        this.logoMat33[6] = screenWidth / 2;
        this.logoMat33[7] = screenHeight / 2;
        this.textMat33[0] = textW;
        this.textMat33[4] = textH;
        this.textMat33[6] = screenWidth / 2;
        this.textMat33[7] = screenHeight * 0.9;
      }
    }, {
      key: "initProgram",
      value: function initProgram() {
        var gl = this.gl;
        this.vertexShader = createShader(gl, gl.VERTEX_SHADER, vs);
        this.fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fs);
        this.program = createProgram(gl, this.vertexShader, this.fragmentShader);
      }
    }, {
      key: "initBuffer",
      value: function initBuffer() {
        var gl = this.gl;
        gl.useProgram(this.program);
        this.positionBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, this.vertices, gl.STATIC_DRAW);
        this.texcoordBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, this.texcoordBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, this.texcoords, gl.STATIC_DRAW);
        var positionLocation = gl.getAttribLocation(this.program, "a_position");
        gl.enableVertexAttribArray(positionLocation);
        gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer); // Tell the position attribute how to get data out of positionBuffer (ARRAY_BUFFER)

        var size = 2; // 2 components per iteration

        var type = gl.FLOAT; // the data is 32bit floats

        var normalize = false; // don't normalize the data

        var stride = 0; // 0 = move forward size * sizeof(type) each iteration to get the next position

        var offset = 0; // start at the beginning of the buffer

        gl.vertexAttribPointer(positionLocation, size, type, normalize, stride, offset);
        var texcoordLocation = gl.getAttribLocation(this.program, "a_texCoord");
        gl.enableVertexAttribArray(texcoordLocation);
        gl.bindBuffer(gl.ARRAY_BUFFER, this.texcoordBuffer);
        var size = 2; // 2 components per iteration

        var type = gl.FLOAT; // the data is 32bit floats

        var normalize = false; // don't normalize the data

        var stride = 0; // 0 = move forward size * sizeof(type) each iteration to get the next position

        var offset = 0; // start at the beginning of the buffer

        gl.vertexAttribPointer(texcoordLocation, size, type, normalize, stride, offset);
      }
    }, {
      key: "initTexture",
      value: function initTexture() {
        var gl = this.gl;
        this.textureLogo = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, this.textureLogo);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.logoImage);
        this.textureText = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, this.textureText);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.textImage);
      }
    }, {
      key: "initState",
      value: function initState() {
        var gl = this.gl;
        gl.useProgram(this.program);
        var resolutionLocation = gl.getUniformLocation(this.program, "u_resolution");
        gl.uniform2f(resolutionLocation, gl.canvas.width, gl.canvas.height);
        gl.enable(gl.BLEND);
        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
      }
    }, {
      key: "frame",
      value: function frame(time) {
        var gl = this.gl;
        var program = this.program;
        var textureLogo = this.textureLogo;
        var textureText = this.textureText;
        var clearColor = this.setting.clearColor;
        var logoMat33 = this.logoMat33;
        var textMat33 = this.textMat33;

        if (this.startTime < 0) {
          this.startTime = time;
        }

        var elapsedTime = time - this.startTime;
        var precent = (0, _index.clamp01)(elapsedTime / this.setting.totalTime);

        var alpha = _index2.easing.cubicOut(precent);

        gl.enable(gl.BLEND);
        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
        gl.clearColor(clearColor.r, clearColor.g, clearColor.b, clearColor.a);
        gl.depthMask(true);
        gl.clearDepth(1);
        gl.clearStencil(0);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);
        gl.useProgram(this.program);
        var resolutionLocation = gl.getUniformLocation(this.program, "u_resolution");
        gl.uniform2f(resolutionLocation, gl.canvas.width, gl.canvas.height);
        var location = gl.getUniformLocation(program, "u_alpha");
        gl.uniform1f(location, alpha);
        location = gl.getUniformLocation(program, "u_worldMat");
        gl.uniformMatrix3fv(location, false, logoMat33);
        gl.bindTexture(gl.TEXTURE_2D, textureLogo);
        gl.drawArrays(gl.TRIANGLES, 0, 6);

        if (this.setting.displayWatermark) {
          gl.uniformMatrix3fv(location, false, textMat33);
          gl.bindTexture(gl.TEXTURE_2D, textureText);
          gl.drawArrays(gl.TRIANGLES, 0, 6);
        }

        if (elapsedTime > this.setting.totalTime) {
          this.splashFinish = true;
        }
      }
    }, {
      key: "destroy",
      value: function destroy() {
        delete SplashScreenWebgl._ins;
        this.gl.deleteProgram(this.program);
        this.gl.deleteShader(this.vertexShader);
        this.gl.deleteShader(this.fragmentShader);
        this.gl.deleteBuffer(this.positionBuffer);
        this.gl.deleteBuffer(this.texcoordBuffer);
        this.gl.deleteTexture(this.textureLogo);
        this.gl.deleteTexture(this.textureText);
      }
    }, {
      key: "loadFinish",
      set: function set(v) {
        this._loadFinish = v;

        this._tryToStart();
      }
    }, {
      key: "splashFinish",
      set: function set(v) {
        this._splashFinish = v;

        this._tryToStart();
      }
    }], [{
      key: "instance",
      get: function get() {
        if (SplashScreenWebgl._ins == null) {
          SplashScreenWebgl._ins = new SplashScreenWebgl();
        }

        return SplashScreenWebgl._ins;
      }
    }]);

    function SplashScreenWebgl() {
      _classCallCheck(this, SplashScreenWebgl);

      this.logoImage = new Image();
      this.textImage = document.createElement('canvas');
      this.vertices = new Float32Array([-1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, 1]);
      this.texcoords = new Float32Array([0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]);
      this.logoMat33 = new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);
      this.textMat33 = new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);
      this.callBack = null;
      this.cancelAnimate = false;
      this.handle = -1;
      this.startTime = -1;
      this.orientation = '';
      this.cocosPlayVersion = 134;
      this._isStart = false;
      this._directCall = false;
      this._splashFinish = false;
      this._loadFinish = false;
    }

    return SplashScreenWebgl;
  }();

  _exports.SplashScreenWebgl = SplashScreenWebgl;
  SplashScreenWebgl._ins = void 0;
  cc.internal.SplashScreenWebgl = SplashScreenWebgl;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,