(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../../core/index.js", "../../../core/assets/sprite-frame.js", "../../../core/components/component.js", "../../../core/components/component-event-handler.js", "../../../core/data/class-decorator.js", "../../../core/math/index.js", "../../../core/platform/event-manager/event-enum.js", "../../../core/scene-graph/node.js", "../label-component.js", "../sprite-component.js", "./edit-box-impl.js", "./edit-box-impl-base.js", "./types.js", "../../../core/platform/sys.js", "../../../core/default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../../core/index.js"), require("../../../core/assets/sprite-frame.js"), require("../../../core/components/component.js"), require("../../../core/components/component-event-handler.js"), require("../../../core/data/class-decorator.js"), require("../../../core/math/index.js"), require("../../../core/platform/event-manager/event-enum.js"), require("../../../core/scene-graph/node.js"), require("../label-component.js"), require("../sprite-component.js"), require("./edit-box-impl.js"), require("./edit-box-impl-base.js"), require("./types.js"), require("../../../core/platform/sys.js"), require("../../../core/default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.spriteFrame, global.component, global.componentEventHandler, global.classDecorator, global.index, global.eventEnum, global.node, global.labelComponent, global.spriteComponent, global.editBoxImpl, global.editBoxImplBase, global.types, global.sys, global.defaultConstants);
    global.editBoxComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _spriteFrame, _component, _componentEventHandler, _classDecorator, _index2, _eventEnum, _node, _labelComponent, _spriteComponent, _editBoxImpl, _editBoxImplBase, _types, _sys, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EditBoxComponent = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _class3, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  var LEFT_PADDING = 2;

  function capitalize(str) {
    return str.replace(/(?:^|\s)\S/g, function (a) {
      return a.toUpperCase();
    });
  }

  function capitalizeFirstLetter(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }

  var EventType;
  /**
   * @en
   * cc.EditBoxComponent is a component for inputing text, you can use it to gather small amounts of text from users.
   *
   * @zh
   * EditBoxComponent 组件，用于获取用户的输入文本。
   */

  (function (EventType) {
    EventType["EDITING_DID_BEGAN"] = "editing-did-began";
    EventType["EDITING_DID_ENDED"] = "editing-did-ended";
    EventType["TEXT_CHANGED"] = "text-changed";
    EventType["EDITING_RETURN"] = "editing-return";
  })(EventType || (EventType = {}));

  var EditBoxComponent = (_dec = (0, _classDecorator.ccclass)('cc.EditBoxComponent'), _dec2 = (0, _classDecorator.help)('i18n:cc.EditBoxComponent'), _dec3 = (0, _classDecorator.executionOrder)(100), _dec4 = (0, _classDecorator.menu)('UI/EditBox'), _dec5 = (0, _classDecorator.property)({
    tooltip: '输入框的初始输入内容，如果为空则会显示占位符的文本',
    displayOrder: 1
  }), _dec6 = (0, _classDecorator.property)({
    tooltip: '输入框文本的字体大小',
    displayOrder: 2
  }), _dec7 = (0, _classDecorator.property)({
    type: _index2.Color,
    tooltip: '输入框文本的颜色',
    displayOrder: 3
  }), _dec8 = (0, _classDecorator.property)({
    type: _types.InputFlag,
    tooltip: '指定输入标志位，可以指定输入方式为密码或者单词首字母大写',
    displayOrder: 4
  }), _dec9 = (0, _classDecorator.property)({
    type: _types.InputMode,
    tooltip: '指定输入模式: ANY 表示多行输入，其它都是单行输入，移动平台上还可以指定键盘样式',
    displayOrder: 5
  }), _dec10 = (0, _classDecorator.property)({
    type: _types.KeyboardReturnType,
    tooltip: '指定移动设备上面回车按钮的样式',
    displayOrder: 6
  }), _dec11 = (0, _classDecorator.property)({
    tooltip: '输入框最大允许输入的字符个数',
    displayOrder: 7
  }), _dec12 = (0, _classDecorator.property)({
    tooltip: '输入框文本的行高',
    displayOrder: 8
  }), _dec13 = (0, _classDecorator.property)({
    type: _spriteFrame.SpriteFrame,
    tooltip: '输入框的背景图片',
    displayOrder: 10
  }), _dec14 = (0, _classDecorator.property)({
    tooltip: '输入框输入文本节点上挂载的 Label 组件对象',
    type: _labelComponent.LabelComponent,
    displayOrder: 11
  }), _dec15 = (0, _classDecorator.property)({
    tooltip: '输入框占位符节点上挂载的 Label 组件对象',
    type: _labelComponent.LabelComponent,
    displayOrder: 12
  }), _dec16 = (0, _classDecorator.property)({
    tooltip: '输入框占位符的文本内容',
    displayOrder: 13
  }), _dec17 = (0, _classDecorator.property)({
    tooltip: '输入框占位符的字体大小',
    displayOrder: 14
  }), _dec18 = (0, _classDecorator.property)({
    tooltip: '输入框占位符的字体颜色',
    displayOrder: 15
  }), _dec19 = (0, _classDecorator.property)({
    tooltip: '输入框总是可见，并且永远在游戏视图的上面（这个属性只有在 Web 上面修改有意义）',
    displayOrder: 21
  }), _dec20 = (0, _classDecorator.property)({
    tooltip: '修改 DOM 输入元素的 tabIndex（这个属性只有在 Web 上面修改有意义）',
    displayOrder: 22
  }), _dec21 = (0, _classDecorator.property)({
    type: [_componentEventHandler.EventHandler],
    tooltip: '该事件在用户点击输入框获取焦点的时候被触发',
    displayOrder: 31
  }), _dec22 = (0, _classDecorator.property)({
    type: [_componentEventHandler.EventHandler],
    tooltip: '编辑文本输入框时触发的事件回调',
    displayOrder: 32
  }), _dec23 = (0, _classDecorator.property)({
    type: [_componentEventHandler.EventHandler],
    tooltip: '在单行模式下面，一般是在用户按下回车或者点击屏幕输入框以外的地方调用该函数。 如果是多行输入，一般是在用户点击屏幕输入框以外的地方调用该函数',
    displayOrder: 33
  }), _dec24 = (0, _classDecorator.property)({
    type: [_componentEventHandler.EventHandler],
    tooltip: '该事件在用户按下回车键的时候被触发, 如果是单行输入框，按回车键还会使输入框失去焦点',
    displayOrder: 34
  }), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = (0, _classDecorator.executeInEditMode)(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Component) {
    _inherits(EditBoxComponent, _Component);

    function EditBoxComponent() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, EditBoxComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EditBoxComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _initializerDefineProperty(_this, "editingDidBegan", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "textChanged", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "editingDidEnded", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "editingReturn", _descriptor4, _assertThisInitialized(_this));

      _this._impl = null;
      _this._background = null;

      _initializerDefineProperty(_this, "_textLabel", _descriptor5, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_placeholderLabel", _descriptor6, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_returnType", _descriptor7, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_useOriginalSize", _descriptor8, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_string", _descriptor9, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_tabIndex", _descriptor10, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_backgroundImage", _descriptor11, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_inputFlag", _descriptor12, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_inputMode", _descriptor13, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_maxLength", _descriptor14, _assertThisInitialized(_this));

      _this._isLabelVisible = false;
      return _this;
    }

    _createClass(EditBoxComponent, [{
      key: "__preload",
      value: function __preload() {
        this._init();
      }
    }, {
      key: "onEnable",
      value: function onEnable() {
        if (!_defaultConstants.EDITOR) {
          this._registerEvent();
        }

        if (this._impl) {
          this._impl.onEnable();
        }
      }
    }, {
      key: "update",
      value: function update() {
        if (this._impl) {
          this._impl.update();
        }
      }
    }, {
      key: "onDisable",
      value: function onDisable() {
        if (!_defaultConstants.EDITOR) {
          this._unregisterEvent();
        }

        if (this._impl) {
          this._impl.onDisable();
        }
      }
    }, {
      key: "onDestroy",
      value: function onDestroy() {
        if (this._impl) {
          this._impl.clear();
        }
      }
      /**
       * @en Let the EditBox get focus
       * @zh 让当前 EditBox 获得焦点。
       */

    }, {
      key: "setFocus",
      value: function setFocus() {
        if (this._impl) {
          this._impl.setFocus(true);
        }
      }
      /**
       * @en Let the EditBox get focus
       * @zh 让当前 EditBox 获得焦点
       */

    }, {
      key: "focus",
      value: function focus() {
        if (this._impl) {
          this._impl.setFocus(true);
        }
      }
      /**
       * @en Let the EditBox lose focus
       * @zh 让当前 EditBox 失去焦点
       */

    }, {
      key: "blur",
      value: function blur() {
        if (this._impl) {
          this._impl.setFocus(false);
        }
      }
      /**
       * @en Determine whether EditBox is getting focus or not.
       * @zh 判断 EditBox 是否获得了焦点。
       * Note: only available on Web at the moment.
       */

    }, {
      key: "isFocused",
      value: function isFocused() {
        if (this._impl) {
          return this._impl.isFocused();
        }

        return false;
      }
    }, {
      key: "_editBoxEditingDidBegan",
      value: function _editBoxEditingDidBegan() {
        _componentEventHandler.EventHandler.emitEvents(this.editingDidBegan, this);

        this.node.emit(EventType.EDITING_DID_BEGAN, this);
      }
    }, {
      key: "_editBoxEditingDidEnded",
      value: function _editBoxEditingDidEnded() {
        _componentEventHandler.EventHandler.emitEvents(this.editingDidEnded, this);

        this.node.emit(EventType.EDITING_DID_ENDED, this);
      }
    }, {
      key: "_editBoxTextChanged",
      value: function _editBoxTextChanged(text) {
        text = this._updateLabelStringStyle(text, true);
        this.string = text;

        _componentEventHandler.EventHandler.emitEvents(this.textChanged, text, this);

        this.node.emit(EventType.TEXT_CHANGED, this);
      }
    }, {
      key: "_editBoxEditingReturn",
      value: function _editBoxEditingReturn() {
        _componentEventHandler.EventHandler.emitEvents(this.editingReturn, this);

        this.node.emit(EventType.EDITING_RETURN, this);
      }
    }, {
      key: "_showLabels",
      value: function _showLabels() {
        this._isLabelVisible = true;

        this._updateLabels();
      }
    }, {
      key: "_hideLabels",
      value: function _hideLabels() {
        this._isLabelVisible = false;

        if (this._textLabel) {
          this._textLabel.node.active = false;
        }

        if (this._placeholderLabel) {
          this._placeholderLabel.node.active = false;
        }
      }
    }, {
      key: "_onTouchBegan",
      value: function _onTouchBegan(event) {
        event.propagationStopped = true;
      }
    }, {
      key: "_onTouchCancel",
      value: function _onTouchCancel(event) {
        event.propagationStopped = true;
      }
    }, {
      key: "_onTouchEnded",
      value: function _onTouchEnded(event) {
        if (this._impl) {
          this._impl.beginEditing();
        }

        event.propagationStopped = true;
      }
    }, {
      key: "_init",
      value: function _init() {
        this._createBackgroundSprite();

        this._updatePlaceholderLabel();

        this._updateTextLabel();

        this._isLabelVisible = true;
        this.node.on(_eventEnum.SystemEventType.SIZE_CHANGED, this._resizeChildNodes, this);
        var impl = this._impl = new EditBoxComponent._EditBoxImpl();
        impl.init(this);

        this._updateString(this._string);

        this._syncSize();
      }
    }, {
      key: "_createBackgroundSprite",
      value: function _createBackgroundSprite() {
        if (!this._background) {
          this._background = this.node.getComponent(_spriteComponent.SpriteComponent);

          if (!this._background) {
            this._background = this.node.addComponent(_spriteComponent.SpriteComponent);
          }
        }

        this._background.type = _spriteComponent.SpriteComponent.Type.SLICED;
        this._background.spriteFrame = this._backgroundImage;
      }
    }, {
      key: "_updateTextLabel",
      value: function _updateTextLabel() {
        var textLabel = this._textLabel; // If textLabel doesn't exist, create one.

        if (!textLabel) {
          var node = this.node.getChildByName('TEXT_LABEL');

          if (!node) {
            node = new _node.Node('TEXT_LABEL');
          }

          textLabel = node.getComponent(_labelComponent.LabelComponent);

          if (!textLabel) {
            textLabel = node.addComponent(_labelComponent.LabelComponent);
          }

          node.parent = this.node;
          this._textLabel = textLabel;
        } // update


        var transformComp = this._textLabel.node._uiProps.uiTransformComp;
        transformComp.setAnchorPoint(0, 1);
        textLabel.overflow = _labelComponent.LabelComponent.Overflow.CLAMP;

        if (this._inputMode === _types.InputMode.ANY) {
          textLabel.verticalAlign = _labelComponent.VerticalTextAlignment.TOP;
          textLabel.enableWrapText = true;
        } else {
          textLabel.verticalAlign = _labelComponent.VerticalTextAlignment.CENTER;
          textLabel.enableWrapText = false;
        }

        textLabel.string = this._updateLabelStringStyle(this._string);
      }
    }, {
      key: "_updatePlaceholderLabel",
      value: function _updatePlaceholderLabel() {
        var placeholderLabel = this._placeholderLabel; // If placeholderLabel doesn't exist, create one.

        if (!placeholderLabel) {
          var node = this.node.getChildByName('PLACEHOLDER_LABEL');

          if (!node) {
            node = new _node.Node('PLACEHOLDER_LABEL');
          }

          placeholderLabel = node.getComponent(_labelComponent.LabelComponent);

          if (!placeholderLabel) {
            placeholderLabel = node.addComponent(_labelComponent.LabelComponent);
          }

          node.parent = this.node;
          this._placeholderLabel = placeholderLabel;
        } // update


        var transform = this._placeholderLabel.node._uiProps.uiTransformComp;
        transform.setAnchorPoint(0, 1);
        placeholderLabel.overflow = _labelComponent.LabelComponent.Overflow.CLAMP;

        if (this._inputMode === _types.InputMode.ANY) {
          placeholderLabel.verticalAlign = _labelComponent.VerticalTextAlignment.TOP;
          placeholderLabel.enableWrapText = true;
        } else {
          placeholderLabel.verticalAlign = _labelComponent.VerticalTextAlignment.CENTER;
          placeholderLabel.enableWrapText = false;
        }

        placeholderLabel.string = this.placeholder;
      }
    }, {
      key: "_syncSize",
      value: function _syncSize() {
        var size = this.node.getContentSize();

        if (this._background) {
          this._background.node._uiProps.uiTransformComp.anchorPoint = this.node._uiProps.uiTransformComp.anchorPoint;

          this._background.node.setContentSize(size);
        }

        this._updateLabelPosition(size);

        if (this._impl) {
          this._impl.setSize(size.width, size.height);
        }
      }
    }, {
      key: "_updateLabels",
      value: function _updateLabels() {
        if (this._isLabelVisible) {
          var content = this._string;

          if (this._textLabel) {
            this._textLabel.node.active = content !== '';
          }

          if (this._placeholderLabel) {
            this._placeholderLabel.node.active = content === '';
          }
        }
      }
    }, {
      key: "_updateString",
      value: function _updateString(text) {
        var textLabel = this._textLabel; // Not inited yet

        if (!textLabel) {
          return;
        }

        var displayText = text;

        if (displayText) {
          displayText = this._updateLabelStringStyle(displayText);
        }

        textLabel.string = displayText;

        this._updateLabels();
      }
    }, {
      key: "_updateLabelStringStyle",
      value: function _updateLabelStringStyle(text) {
        var ignorePassword = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var inputFlag = this._inputFlag;

        if (!ignorePassword && inputFlag === _types.InputFlag.PASSWORD) {
          var passwordString = '';
          var len = text.length;

          for (var i = 0; i < len; ++i) {
            passwordString += "\u25CF";
          }

          text = passwordString;
        } else if (inputFlag === _types.InputFlag.INITIAL_CAPS_ALL_CHARACTERS) {
          text = text.toUpperCase();
        } else if (inputFlag === _types.InputFlag.INITIAL_CAPS_WORD) {
          text = capitalize(text);
        } else if (inputFlag === _types.InputFlag.INITIAL_CAPS_SENTENCE) {
          text = capitalizeFirstLetter(text);
        }

        return text;
      }
    }, {
      key: "_registerEvent",
      value: function _registerEvent() {
        this.node.on(_eventEnum.SystemEventType.TOUCH_START, this._onTouchBegan, this);
        this.node.on(_eventEnum.SystemEventType.TOUCH_END, this._onTouchEnded, this);
      }
    }, {
      key: "_unregisterEvent",
      value: function _unregisterEvent() {
        this.node.off(_eventEnum.SystemEventType.TOUCH_START, this._onTouchBegan, this);
        this.node.off(_eventEnum.SystemEventType.TOUCH_END, this._onTouchEnded, this);
      }
    }, {
      key: "_updateLabelPosition",
      value: function _updateLabelPosition(size) {
        var node = this.node;
        var offX = -node.anchorX * node.width;
        var offY = -node.anchorY * node.height;
        var placeholderLabel = this._placeholderLabel;
        var textLabel = this._textLabel;

        if (textLabel) {
          textLabel.node.setContentSize(size.width - LEFT_PADDING, size.height);
          textLabel.node.position = new _index2.Vec3(offX + LEFT_PADDING, offY + size.height, textLabel.node.position.z);
          textLabel.verticalAlign = this._inputMode === _types.InputMode.ANY ? _labelComponent.VerticalTextAlignment.TOP : _labelComponent.VerticalTextAlignment.CENTER;
          textLabel.enableWrapText = this._inputMode === _types.InputMode.ANY ? true : false;
        }

        if (placeholderLabel) {
          placeholderLabel.node.setContentSize(size.width - LEFT_PADDING, size.height);
          placeholderLabel.lineHeight = size.height;
          placeholderLabel.node.position = new _index2.Vec3(offX + LEFT_PADDING, offY + size.height, placeholderLabel.node.position.z);
          placeholderLabel.verticalAlign = this._inputMode === _types.InputMode.ANY ? _labelComponent.VerticalTextAlignment.TOP : _labelComponent.VerticalTextAlignment.CENTER;
          placeholderLabel.enableWrapText = this._inputMode === _types.InputMode.ANY ? true : false;
        }
      }
    }, {
      key: "_resizeChildNodes",
      value: function _resizeChildNodes() {
        var textLabelNode = this._textLabel && this._textLabel.node;

        if (textLabelNode) {
          textLabelNode.position = new _index2.Vec3(-this.node.width / 2, this.node.height / 2, textLabelNode.position.z);
          textLabelNode.width = this.node.width;
          textLabelNode.height = this.node.height;
        }

        var placeholderLabelNode = this._placeholderLabel && this._placeholderLabel.node;

        if (placeholderLabelNode) {
          placeholderLabelNode.position = new _index2.Vec3(-this.node.width / 2, this.node.height / 2, placeholderLabelNode.position.z);
          placeholderLabelNode.width = this.node.width;
          placeholderLabelNode.height = this.node.height;
        }

        var backgroundNode = this._background && this._background.node;

        if (backgroundNode) {
          backgroundNode.width = this.node.width;
          backgroundNode.height = this.node.height;
        }
      }
    }, {
      key: "string",

      /**
       * @en
       * Input string of EditBox.
       *
       * @zh
       * 输入框的初始输入内容，如果为空则会显示占位符的文本。
       */
      get: function get() {
        return this._string;
      },
      set: function set(value) {
        if (this._maxLength >= 0 && value.length >= this._maxLength) {
          value = value.slice(0, this._maxLength);
        }

        this._string = value;

        this._updateString(value);
      }
      /**
       * @en
       * Font size of the input text.
       *
       * @zh
       * 输入框文本的字体大小。该属性会在将来的版本中移除，请使用 editBox.textLabel.fontSize。
       */

    }, {
      key: "fontSize",
      get: function get() {
        if (!this._textLabel) {
          return 20;
        }

        return this._textLabel.fontSize;
      },
      set: function set(value) {
        if (this._textLabel) {
          this._textLabel.fontSize = value;
        }
      }
      /**
       * @en
       * Font color of the input text.
       *
       * @zh
       * 输入框文本的颜色。该属性会在将来的版本中移除，请使用 editBox.textLabel.color
       */

    }, {
      key: "fontColor",
      get: function get() {
        if (!this._textLabel) {
          return _index.math.Color.WHITE.clone();
        }

        return this._textLabel.color;
      },
      set: function set(value) {
        if (this._textLabel) {
          this._textLabel.color = value;
        }
      }
      /**
       * @en
       * Set the input flags that are to be applied to the EditBox.
       *
       * @zh
       * 指定输入标志位，可以指定输入方式为密码或者单词首字母大写。
       */

    }, {
      key: "inputFlag",
      get: function get() {
        return this._inputFlag;
      },
      set: function set(value) {
        this._inputFlag = value;

        this._updateString(this._string);
      }
      /**
       * @en
       * Set the input mode of the edit box.
       * If you pass ANY, it will create a multiline EditBox.
       *
       * @zh
       * 指定输入模式: ANY表示多行输入，其它都是单行输入，移动平台上还可以指定键盘样式。
       */

    }, {
      key: "inputMode",
      get: function get() {
        return this._inputMode;
      },
      set: function set(oldValue) {
        if (this._inputMode !== oldValue) {
          this._inputMode = oldValue;

          this._updateTextLabel();

          this._updatePlaceholderLabel();
        }
      }
      /**
       * @en
       * The return key type of EditBox.
       * Note: it is meaningless for web platforms and desktop platforms.
       *
       * @zh
       * 指定移动设备上面回车按钮的样式。
       * 注意：这个选项对 web 平台与 desktop 平台无效。
       */

    }, {
      key: "returnType",
      get: function get() {
        return this._returnType;
      },
      set: function set(value) {
        this._returnType = value;
      }
      /**
       * @en
       * The maximize input length of EditBox.
       * - If pass a value less than 0, it won't limit the input number of characters.
       * - If pass 0, it doesn't allow input any characters.
       *
       * @zh
       * 输入框最大允许输入的字符个数。
       * - 如果值为小于 0 的值，则不会限制输入字符个数。
       * - 如果值为 0，则不允许用户进行任何输入。
       */

    }, {
      key: "maxLength",
      get: function get() {
        return this._maxLength;
      },
      set: function set(value) {
        this._maxLength = value;
      }
      /**
       * @en
       * Change the lineHeight of displayed text.
       *
       * @zh
       * 输入框文本的行高。
       */

    }, {
      key: "lineHeight",
      get: function get() {
        if (!this._textLabel) {
          return 40;
        }

        return this._textLabel.lineHeight;
      },
      set: function set(value) {
        if (this._textLabel) {
          this._textLabel.lineHeight = value;
        }
      }
      /**
       * @en
       * The background image of EditBox.
       *
       * @zh
       * 输入框的背景图片。
       */

    }, {
      key: "backgroundImage",
      get: function get() {
        return this._backgroundImage;
      },
      set: function set(value) {
        if (this._backgroundImage === value) {
          return;
        }

        this._backgroundImage = value;

        this._createBackgroundSprite();
      }
      /**
       * @en
       * The Label component attached to the node for EditBox's input text label
       *
       * @zh
       * 输入框输入文本节点上挂载的 Label 组件对象
       */

    }, {
      key: "textLabel",
      get: function get() {
        return this._textLabel;
      },
      set: function set(oldValue) {
        if (this._textLabel !== oldValue) {
          this._textLabel = oldValue;

          if (this._textLabel) {
            this._updateTextLabel();

            this._updateLabels();
          }
        }
      }
      /**
       * @en
       * The Label component attached to the node for EditBox's placeholder text label.
       *
       * @zh
       * 输入框占位符节点上挂载的 Label 组件对象。
       */

    }, {
      key: "placeholderLabel",
      get: function get() {
        return this._placeholderLabel;
      },
      set: function set(oldValue) {
        if (this._placeholderLabel !== oldValue) {
          this._placeholderLabel = oldValue;

          if (this._placeholderLabel) {
            this._updatePlaceholderLabel();

            this._updateLabels();
          }
        }
      }
      /**
       * @en
       * The display text of placeholder.
       *
       * @zh
       * 输入框占位符的文本内容。
       */

    }, {
      key: "placeholder",
      get: function get() {
        if (!this._placeholderLabel) {
          return '';
        }

        return this._placeholderLabel.string;
      },
      set: function set(value) {
        if (this._placeholderLabel) {
          this._placeholderLabel.string = value;
        }
      }
      /**
       * @en
       * The font size of placeholder.
       *
       * @zh
       * 输入框占位符的字体大小。该属性会在将来的版本中移除，请使用 editBox.placeholderLabel.fontSize
       */

    }, {
      key: "placeholderFontSize",
      get: function get() {
        if (!this._placeholderLabel) {
          return 20;
        }

        return this._placeholderLabel.fontSize;
      },
      set: function set(value) {
        if (this._placeholderLabel) {
          this._placeholderLabel.fontSize = value;
        }
      }
      /**
       * @en
       * The font color of placeholder.
       *
       * @zh
       * 输入框占位符的字体颜色。该属性会在将来的版本中移除，请使用 editBox.placeholderLabel.color
       */

    }, {
      key: "placeholderFontColor",
      get: function get() {
        if (!this._placeholderLabel) {
          return _index.math.Color.GRAY.clone();
        }

        return this._placeholderLabel.color;
      },
      set: function set(value) {
        if (this._placeholderLabel) {
          this._placeholderLabel.color = value;
        }
      }
      /**
       * @en
       * The input is always visible and be on top of the game view (only useful on Web).
       *
       * @zh
       * 输入框总是可见，并且永远在游戏视图的上面（这个属性只有在 Web 上面修改有意义）
       * Note: only available on Web at the moment.
       *
       * @deprecated
       */

    }, {
      key: "stayOnTop",
      get: function get() {
        return;
      },
      set: function set(value) {
        console.warn('stayOnTop is removed.');
      }
      /**
       * @en
       * Set the tabIndex of the DOM input element (only useful on Web).
       *
       * @zh
       * 修改 DOM 输入元素的 tabIndex（这个属性只有在 Web 上面修改有意义）。
       */

    }, {
      key: "tabIndex",
      get: function get() {
        return this._tabIndex;
      },
      set: function set(value) {
        if (this._tabIndex !== value) {
          this._tabIndex = value;

          if (this._impl) {
            this._impl.setTabIndex(value);
          }
        }
      }
    }]);

    return EditBoxComponent;
  }(_component.Component), _class3._EditBoxImpl = _editBoxImplBase.EditBoxImplBase, _class3.KeyboardReturnType = _types.KeyboardReturnType, _class3.InputFlag = _types.InputFlag, _class3.InputMode = _types.InputMode, _class3.EventType = EventType, _temp), (_applyDecoratedDescriptor(_class2.prototype, "string", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "string"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "fontSize", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "fontSize"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "fontColor", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "fontColor"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "inputFlag", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "inputFlag"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "inputMode", [_dec9], Object.getOwnPropertyDescriptor(_class2.prototype, "inputMode"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "returnType", [_dec10], Object.getOwnPropertyDescriptor(_class2.prototype, "returnType"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "maxLength", [_dec11], Object.getOwnPropertyDescriptor(_class2.prototype, "maxLength"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "lineHeight", [_dec12], Object.getOwnPropertyDescriptor(_class2.prototype, "lineHeight"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "backgroundImage", [_dec13], Object.getOwnPropertyDescriptor(_class2.prototype, "backgroundImage"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "textLabel", [_dec14], Object.getOwnPropertyDescriptor(_class2.prototype, "textLabel"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "placeholderLabel", [_dec15], Object.getOwnPropertyDescriptor(_class2.prototype, "placeholderLabel"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "placeholder", [_dec16], Object.getOwnPropertyDescriptor(_class2.prototype, "placeholder"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "placeholderFontSize", [_dec17], Object.getOwnPropertyDescriptor(_class2.prototype, "placeholderFontSize"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "placeholderFontColor", [_dec18], Object.getOwnPropertyDescriptor(_class2.prototype, "placeholderFontColor"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "stayOnTop", [_dec19], Object.getOwnPropertyDescriptor(_class2.prototype, "stayOnTop"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "tabIndex", [_dec20], Object.getOwnPropertyDescriptor(_class2.prototype, "tabIndex"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "editingDidBegan", [_dec21], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return [];
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "textChanged", [_dec22], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return [];
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "editingDidEnded", [_dec23], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return [];
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "editingReturn", [_dec24], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return [];
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_textLabel", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "_placeholderLabel", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "_returnType", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _types.KeyboardReturnType.DEFAULT;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "_useOriginalSize", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "_string", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return '';
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "_tabIndex", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "_backgroundImage", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "_inputFlag", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _types.InputFlag.DEFAULT;
    }
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "_inputMode", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _types.InputMode.ANY;
    }
  }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "_maxLength", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 20;
    }
  })), _class2)) || _class) || _class) || _class) || _class) || _class);
  _exports.EditBoxComponent = EditBoxComponent;

  if (_sys.sys.isBrowser) {
    EditBoxComponent._EditBoxImpl = _editBoxImpl.EditBoxImpl;
  }

  cc.EditBoxComponent = EditBoxComponent;
  /**
   * @en
   * Note: This event is emitted from the node to which the component belongs.
   * @zh
   * 注意：此事件是从该组件所属的 Node 上面派发出来的，需要用 node.on 来监听。
   * @event editing-did-began
   * @param {Event.EventCustom} event
   * @param {EditBox} editbox - The EditBox component.
   */

  /**
   * @en
   * Note: This event is emitted from the node to which the component belongs.
   * @zh
   * 注意：此事件是从该组件所属的 Node 上面派发出来的，需要用 node.on 来监听。
   * @event editing-did-ended
   * @param {Event.EventCustom} event
   * @param {EditBox} editbox - The EditBox component.
   */

  /**
   * @en
   * Note: This event is emitted from the node to which the component belongs.
   * @zh
   * 注意：此事件是从该组件所属的 Node 上面派发出来的，需要用 node.on 来监听。
   * @event text-changed
   * @param {Event.EventCustom} event
   * @param {EditBox} editbox - The EditBox component.
   */

  /**
   * @en
   * Note: This event is emitted from the node to which the component belongs.
   * @zh
   * 注意：此事件是从该组件所属的 Node 上面派发出来的，需要用 node.on 来监听。
   * @event editing-return
   * @param {Event.EventCustom} event
   * @param {EditBox} editbox - The EditBox component.
   */

  /**
   * @en if you don't need the EditBox and it isn't in any running Scene, you should
   * call the destroy method on this component or the associated node explicitly.
   * Otherwise, the created DOM element won't be removed from web page.
   * @zh
   * 如果你不再使用 EditBox，并且组件未添加到场景中，那么你必须手动对组件或所在节点调用 destroy。
   * 这样才能移除网页上的 DOM 节点，避免 Web 平台内存泄露。
   * @example
   * ```
   * editbox.node.parent = null;  // or  editbox.node.removeFromParent(false);
   * // when you don't need editbox anymore
   * editbox.node.destroy();
   * ```
   * @return {Boolean} whether it is the first time the destroy being called
   */
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,