(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../data/class-decorator.js", "../../gfx/define.js", "../define.js", "../render-stage.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../data/class-decorator.js"), require("../../gfx/define.js"), require("../define.js"), require("../render-stage.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.classDecorator, global.define, global.define, global.renderStage);
    global.tonemapStage = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _classDecorator, _define, _define2, _renderStage) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ToneMapStage = void 0;

  var _dec, _class, _class2, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  var bufs = [];
  /**
   * @en The tone mapping render stage
   * @zh 色调映射渲染阶段。
   */

  var ToneMapStage = (_dec = (0, _classDecorator.ccclass)('ToneMapStage'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_RenderStage) {
    _inherits(ToneMapStage, _RenderStage);

    function ToneMapStage() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, ToneMapStage);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ToneMapStage)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this._hTexSampler = 0;
      _this._hBlendTexSampler = 0;
      _this._bindingLayout = null;
      return _this;
    }

    _createClass(ToneMapStage, [{
      key: "activate",
      value: function activate(flow) {
        _get(_getPrototypeOf(ToneMapStage.prototype), "activate", this).call(this, flow);

        this._createCmdBuffer();

        this.rebuild();
      }
    }, {
      key: "destroy",
      value: function destroy() {
        if (this._cmdBuff) {
          this._cmdBuff.destroy();

          this._cmdBuff = null;
        }
      }
    }, {
      key: "resize",
      value: function resize(width, height) {}
    }, {
      key: "rebuild",
      value: function rebuild() {
        this._pass = this._flow.material.passes[0];
        this._hTexSampler = this._pass.getBinding('u_texSampler');

        var globalUBO = this._pipeline.globalBindings.get(_define2.UBOGlobal.BLOCK.name);

        this._pso = this._pass.createPipelineState();
        this._bindingLayout = this._pso.pipelineLayout.layouts[0];

        this._pass.bindBuffer(_define2.UBOGlobal.BLOCK.binding, globalUBO.buffer);

        this._pass.bindTextureView(this._hTexSampler, this._pipeline.getTextureView(this._pipeline.currShading));

        if (this._pipeline.useSMAA) {
          this._hBlendTexSampler = this._pass.getBinding('u_blendTexSampler');

          this._pass.bindTextureView(this._hBlendTexSampler, this._pipeline.getTextureView('smaaBlend'));
        }

        this._pass.update();

        this._bindingLayout.update();
      }
    }, {
      key: "render",
      value: function render(view) {
        var camera = view.camera;

        if (this._cmdBuff) {
          this._renderArea.width = camera.width;
          this._renderArea.height = camera.height;
          var framebuffer = view.window.framebuffer;

          this._cmdBuff.begin();

          this._cmdBuff.beginRenderPass(framebuffer, this._renderArea, _define.GFXClearFlag.ALL, [{
            r: 0.0,
            g: 0.0,
            b: 0.0,
            a: 1.0
          }], 1.0, 0);

          this._cmdBuff.bindPipelineState(this._pso);

          this._cmdBuff.bindBindingLayout(this._pso.pipelineLayout.layouts[0]);

          this._cmdBuff.bindInputAssembler(this._pipeline.quadIA);

          this._cmdBuff.draw(this._pipeline.quadIA);

          this._cmdBuff.endRenderPass();

          this._cmdBuff.end();
        }

        bufs[0] = this._cmdBuff;

        this._device.queue.submit(bufs); // this._pipeline.swapFBOs();

      }
    }, {
      key: "_createCmdBuffer",
      value: function _createCmdBuffer() {
        this._cmdBuff = this._device.createCommandBuffer({
          allocator: this._device.commandAllocator,
          type: _define.GFXCommandBufferType.PRIMARY
        });
      }
    }]);

    return ToneMapStage;
  }(_renderStage.RenderStage), _class2.initInfo = {
    name: 'ToneMapStage',
    priority: 0,
    framebuffer: 'window'
  }, _temp)) || _class);
  _exports.ToneMapStage = ToneMapStage;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,