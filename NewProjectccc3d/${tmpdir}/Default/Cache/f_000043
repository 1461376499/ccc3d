(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./default-constants.js", "./assets/asset-library.js", "./event/event-target.js", "./pipeline/index.js", "./platform/debug.js", "./platform/event-manager/input-manager.js", "./platform/sys.js", "./platform/macro.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./default-constants.js"), require("./assets/asset-library.js"), require("./event/event-target.js"), require("./pipeline/index.js"), require("./platform/debug.js"), require("./platform/event-manager/input-manager.js"), require("./platform/sys.js"), require("./platform/macro.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.defaultConstants, global.assetLibrary, global.eventTarget, global.index, global.debug, global.inputManager, global.sys, global.macro);
    global.game = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _defaultConstants, _assetLibrary, _eventTarget, _index, debug, _inputManager, _sys, _macro) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.game = _exports.Game = void 0;
  _assetLibrary = _interopRequireDefault(_assetLibrary);
  debug = _interopRequireWildcard(debug);
  _inputManager = _interopRequireDefault(_inputManager);

  function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  /**
   * @en An object to boot the game.
   * @zh 包含游戏主体信息并负责驱动游戏的游戏对象。
   * @class game
   * @static
   */
  var Game = /*#__PURE__*/function (_EventTarget) {
    _inherits(Game, _EventTarget);

    function Game() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, Game);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Game)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.frame = null;
      _this.container = null;
      _this.canvas = null;
      _this.renderType = -1;
      _this.eventTargetOn = _get(_getPrototypeOf(Game.prototype), "on", _assertThisInitialized(_this));
      _this.eventTargetOnce = _get(_getPrototypeOf(Game.prototype), "once", _assertThisInitialized(_this));
      _this.config = {};
      _this.onStart = null;
      _this._persistRootNodes = {};
      _this._paused = true;
      _this._configLoaded = false;
      _this._isCloning = false;
      _this._inited = false;
      _this._rendererInitialized = false;
      _this._gfxDevice = null;
      _this._intervalId = null;
      _this._lastTime = null;
      _this._frameTime = null;
      _this._sceneInfos = [];
      _this.collisionMatrix = [];
      _this.groupList = [];
      return _this;
    }

    _createClass(Game, [{
      key: "setFrameRate",
      // @Methods
      //  @Game play control

      /**
       * @en Set frame rate of game.
       * @zh 设置游戏帧率。
       * @param {Number} frameRate
       */
      value: function setFrameRate(frameRate) {
        var config = this.config;

        if (typeof frameRate !== 'number') {
          frameRate = parseInt(frameRate);

          if (isNaN(frameRate)) {
            frameRate = 60;
          }
        }

        config.frameRate = frameRate;
        this._paused = true;

        this._setAnimFrame();

        this._runMainLoop();
      }
      /**
       * @en Get frame rate set for the game, it doesn't represent the real frame rate.
       * @zh 获取设置的游戏帧率（不等同于实际帧率）。
       * @return {Number} frame rate
       */

    }, {
      key: "getFrameRate",
      value: function getFrameRate() {
        return this.config.frameRate || 0;
      }
      /**
       * @en Run the game frame by frame.
       * @zh 执行一帧游戏循环。
       */

    }, {
      key: "step",
      value: function step() {
        cc.director.mainLoop();
      }
      /**
       * @en Pause the game main loop. This will pause:<br>
       * game logic execution, rendering process, event manager, background music and all audio effects.<br>
       * This is different with cc.director.pause which only pause the game logic execution.<br>
       * @zh 暂停游戏主循环。包含：游戏逻辑，渲染，事件处理，背景音乐和所有音效。这点和只暂停游戏逻辑的 cc.director.pause 不同。
       */

    }, {
      key: "pause",
      value: function pause() {
        if (this._paused) {
          return;
        }

        this._paused = true; // Pause main loop

        if (this._intervalId) {
          window.cAF(this._intervalId);
          this._intervalId = 0;
        } // Because JSB platforms never actually stops the swap chain,
        // we draw some more frames here to (try to) make sure swap chain consistency


        if (_defaultConstants.JSB || _defaultConstants.RUNTIME_BASED || _defaultConstants.ALIPAY) {
          var swapbuffers = 3;

          var cb = function cb() {
            if (--swapbuffers > 1) {
              window.rAF(cb);
            }

            var root = cc.director.root;
            root.frameMove(0);
            root.device.present();
          };

          window.rAF(cb);
        }
      }
      /**
       * @en Resume the game from pause. This will resume:<br>
       * game logic execution, rendering process, event manager, background music and all audio effects.<br>
       * @zh 恢复游戏主循环。包含：游戏逻辑，渲染，事件处理，背景音乐和所有音效。
       */

    }, {
      key: "resume",
      value: function resume() {
        if (!this._paused) {
          return;
        }

        this._paused = false; // Resume main loop

        this._runMainLoop();
      }
      /**
       * @en Check whether the game is paused.
       * @zh 判断游戏是否暂停。
       * @return {Boolean}
       */

    }, {
      key: "isPaused",
      value: function isPaused() {
        return this._paused;
      }
      /**
       * @en Restart game.
       * @zh 重新开始游戏
       */

    }, {
      key: "restart",
      value: function restart() {
        cc.director.once(cc.Director.EVENT_AFTER_DRAW, function () {
          // tslint:disable-next-line: forin
          for (var id in cc.game._persistRootNodes) {
            cc.game.removePersistRootNode(cc.game._persistRootNodes[id]);
          } // Clear scene


          cc.director.getScene().destroy();

          cc.Object._deferredDestroy();

          cc.director.purgeDirector();
          cc.director.reset();
          cc.game.onStart();
        });
      }
      /**
       * @en End game, it will close the game window
       * @zh 退出游戏
       */

    }, {
      key: "end",
      value: function end() {
        if (this._gfxDevice) {
          this._gfxDevice.destroy();

          this._gfxDevice = null;
        }

        close();
      }
      /**
       * @en
       * Register an callback of a specific event type on the game object.<br>
       * This type of event should be triggered via `emit`.<br>
       * @zh
       * 注册 game 的特定事件类型回调。这种类型的事件应该被 `emit` 触发。<br>
       *
       * @param {String} type - A string representing the event type to listen for.
       * @param {Function} callback - The callback that will be invoked when the event is dispatched.<br>
       *                              The callback is ignored if it is a duplicate (the callbacks are unique).
       * @param {any} [callback.arg1] arg1
       * @param {any} [callback.arg2] arg2
       * @param {any} [callback.arg3] arg3
       * @param {any} [callback.arg4] arg4
       * @param {any} [callback.arg5] arg5
       * @param {Object} [target] - The target (this object) to invoke the callback, can be null
       * @return {Function} - Just returns the incoming callback so you can save the anonymous function easier.
       */

    }, {
      key: "on",
      value: function on(type, callback, target, once) {
        // Make sure EVENT_ENGINE_INITED callbacks to be invoked
        if (this._inited && type === Game.EVENT_ENGINE_INITED) {
          callback.call(target);
        } else {
          this.eventTargetOn(type, callback, target, once);
        }
      }
      /**
       * @en
       * Register an callback of a specific event type on the game object,<br>
       * the callback will remove itself after the first time it is triggered.<br>
       * @zh
       * 注册 game 的特定事件类型回调，回调会在第一时间被触发后删除自身。
       *
       * @param {String} type - A string representing the event type to listen for.
       * @param {Function} callback - The callback that will be invoked when the event is dispatched.<br>
       *                              The callback is ignored if it is a duplicate (the callbacks are unique).
       * @param {any} [callback.arg1] arg1
       * @param {any} [callback.arg2] arg2
       * @param {any} [callback.arg3] arg3
       * @param {any} [callback.arg4] arg4
       * @param {any} [callback.arg5] arg5
       * @param {Object} [target] - The target (this object) to invoke the callback, can be null
       */
      // @ts-ignore

    }, {
      key: "once",
      value: function once(type, callback, target) {
        // Make sure EVENT_ENGINE_INITED callbacks to be invoked
        if (this._inited && type === Game.EVENT_ENGINE_INITED) {
          callback.call(target);
        } else {
          this.eventTargetOnce(type, callback, target);
        }
      }
      /**
       * @en Init game with configuration object.
       * @zh 使用指定的配置初始化引擎。
       * @param {Object} config - Pass configuration object
       */

    }, {
      key: "init",
      value: function init(config) {
        this._initConfig(config); // Init AssetLibrary


        if (this.config.assetOptions) {
          _assetLibrary.default.init(this.config.assetOptions);
        }

        this._initEngine();

        if (!_defaultConstants.EDITOR && !_defaultConstants.PREVIEW && cc.internal.SplashScreenWebgl && this.canvas) {
          cc.internal.SplashScreenWebgl.instance.main(this.canvas);
        }

        cc.director.root.dataPoolManager.jointTexturePool.registerCustomTextureLayouts(config.customJointTextureLayouts);
        return this._inited;
      }
      /**
       * @en Run game with configuration object and onStart function.
       * @zh 运行游戏，并且指定引擎配置和 onStart 的回调。
       * @param {Function} onStart - function to be executed after game initialized
       */

    }, {
      key: "run",
      value: function run(onStart, legacyOnStart) {
        var _this2 = this;

        if (!_defaultConstants.EDITOR) {
          this._initEvents();
        }

        if (typeof onStart !== 'function' && legacyOnStart) {
          var config = this.onStart;
          this.init(config);
          this.onStart = legacyOnStart;
        } else {
          this.onStart = onStart;
        }

        this._setAnimFrame();

        this._runMainLoop(); // register system events


        if (!_defaultConstants.EDITOR && game.config.registerSystemEvent) {
          _inputManager.default.registerSystemEvent(game.canvas);
        }

        var splashScreen = cc.internal.SplashScreenWebgl && cc.internal.SplashScreenWebgl.instance;
        var useSplash = !_defaultConstants.EDITOR && !_defaultConstants.PREVIEW && splashScreen;

        if (useSplash) {
          splashScreen.setOnFinish(function () {
            if (_this2.onStart) {
              _this2.onStart();
            }
          });
        } // Load render pipeline if needed


        var renderPipeline = this.config.renderPipeline;

        if (renderPipeline) {
          cc.loader.load({
            uuid: renderPipeline
          }, function (err, asset) {
            // failed load renderPipeline
            if (err || !(asset instanceof _index.RenderPipeline)) {
              console.warn("Failed load renderpipeline: ".concat(renderPipeline, ", engine failed to initialize, all process stopped"));
              console.warn(err);
            } else {
              _this2.setRenderPipeline(asset);
            }

            _this2._safeEmit(Game.EVENT_GAME_INITED);

            if (useSplash) {
              splashScreen.loadFinish = true;
            } else {
              if (_this2.onStart) {
                _this2.onStart();
              }
            }
          });
        } else {
          this._safeEmit(Game.EVENT_GAME_INITED);

          if (useSplash) {
            splashScreen.loadFinish = true;
          } else {
            if (this.onStart) {
              this.onStart();
            }
          }
        }
      } //  @ Persist root node section

      /**
       * @en
       * Add a persistent root node to the game, the persistent node won't be destroyed during scene transition.<br>
       * The target node must be placed in the root level of hierarchy, otherwise this API won't have any effect.
       * @zh
       * 声明常驻根节点，该节点不会被在场景切换中被销毁。<br>
       * 目标节点必须位于为层级的根节点，否则无效。
       * @param {Node} node - The node to be made persistent
       */

    }, {
      key: "addPersistRootNode",
      value: function addPersistRootNode(node) {
        if (!cc.Node.isNode(node) || !node.uuid) {
          debug.warnID(3800);
          return;
        }

        var id = node.uuid;

        if (!this._persistRootNodes[id]) {
          var scene = cc.director._scene;

          if (cc.isValid(scene)) {
            if (!node.parent) {
              node.parent = scene;
            } else if (!(node.parent instanceof cc.Scene)) {
              debug.warnID(3801);
              return;
            } else if (node.parent !== scene) {
              debug.warnID(3802);
              return;
            }
          }

          this._persistRootNodes[id] = node;
          node._persistNode = true;
        }
      }
      /**
       * @en Remove a persistent root node.
       * @zh 取消常驻根节点。
       * @param {Node} node - The node to be removed from persistent node list
       */

    }, {
      key: "removePersistRootNode",
      value: function removePersistRootNode(node) {
        var id = node.uuid || '';

        if (node === this._persistRootNodes[id]) {
          delete this._persistRootNodes[id];
          node._persistNode = false;
        }
      }
      /**
       * @en Check whether the node is a persistent root node.
       * @zh 检查节点是否是常驻根节点。
       * @param {Node} node - The node to be checked
       * @return {Boolean}
       */

    }, {
      key: "isPersistRootNode",
      value: function isPersistRootNode(node) {
        return node._persistNode;
      } //  @Engine loading

    }, {
      key: "_initEngine",
      value: function _initEngine() {
        this._initDevice();

        cc.director._init();

        this.setRenderPipeline(); // Log engine version

        console.log('Cocos Creator 3D v' + cc.ENGINE_VERSION);

        this._safeEmit(Game.EVENT_ENGINE_INITED);

        this._inited = true;
      } // @Methods
      //  @Time ticker section

    }, {
      key: "_setAnimFrame",
      value: function _setAnimFrame() {
        this._lastTime = new Date();
        var frameRate = cc.game.config.frameRate;
        this._frameTime = 1000 / frameRate;

        if (_defaultConstants.JSB) {
          jsb.setPreferredFramesPerSecond(frameRate);
          window.rAF = window.requestAnimationFrame;
          window.cAF = window.cancelAnimationFrame;
        } else {
          if (this._intervalId) {
            window.cAF(this._intervalId);
            this._intervalId = 0;
          }

          if (frameRate !== 60 && frameRate !== 30) {
            window.rAF = this._stTime;
            window.cAF = this._ctTime;
          } else {
            window.rAF = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || this._stTime;
            window.cAF = window.cancelAnimationFrame || window.cancelRequestAnimationFrame || window.msCancelRequestAnimationFrame || window.mozCancelRequestAnimationFrame || window.oCancelRequestAnimationFrame || window.webkitCancelRequestAnimationFrame || window.msCancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.ocancelAnimationFrame || this._ctTime;
          }
        }
      }
    }, {
      key: "_stTime",
      value: function _stTime(callback) {
        var currTime = new Date().getTime();
        var timeToCall = Math.max(0, cc.game._frameTime - (currTime - cc.game._lastTime));
        var id = window.setTimeout(callback, timeToCall);
        cc.game._lastTime = currTime + timeToCall;
        return id;
      }
    }, {
      key: "_ctTime",
      value: function _ctTime(id) {
        window.clearTimeout(id);
      } // Run game.

    }, {
      key: "_runMainLoop",
      value: function _runMainLoop() {
        var _this3 = this;

        var _callback;

        var config = this.config;
        var director = cc.director;
        var skip = true;
        var frameRate = config.frameRate;
        debug.setDisplayStats(!!config.showFPS);
        director.startAnimation();

        _callback = function callback(time) {
          if (_this3._paused) {
            return;
          }

          _this3._intervalId = window.rAF(_callback);

          if (!_defaultConstants.JSB && frameRate === 30) {
            skip = !skip;

            if (skip) {
              return;
            }
          }

          director.mainLoop(time);
        };

        if (this._intervalId) {
          window.cAF(this._intervalId);
          this._intervalId = 0;
        }

        this._intervalId = window.rAF(_callback);
        this._paused = false;
      } // @Game loading section

    }, {
      key: "_initConfig",
      value: function _initConfig(config) {
        // Configs adjustment
        if (typeof config.debugMode !== 'number') {
          config.debugMode = 0;
        }

        config.exposeClassName = !!config.exposeClassName;

        if (typeof config.frameRate !== 'number') {
          config.frameRate = 60;
        }

        var renderMode = config.renderMode;

        if (typeof renderMode !== 'number' || renderMode > 2 || renderMode < 0) {
          config.renderMode = 0;
        }

        if (typeof config.registerSystemEvent !== 'boolean') {
          config.registerSystemEvent = true;
        }

        config.showFPS = !!config.showFPS; // Scene parser

        this._sceneInfos = config.scenes || []; // Collide Map and Group List

        this.collisionMatrix = config.collisionMatrix || [];
        this.groupList = config.groupList || [];

        debug._resetDebugSetting(config.debugMode);

        this.config = config;
        this._configLoaded = true;
      }
    }, {
      key: "_determineRenderType",
      value: function _determineRenderType() {
        var config = this.config;
        var userRenderMode = parseInt(config.renderMode); // Determine RenderType

        this.renderType = Game.RENDER_TYPE_CANVAS;
        var supportRender = false;

        if (userRenderMode === 0) {
          if (cc.sys.capabilities.opengl) {
            this.renderType = Game.RENDER_TYPE_WEBGL;
            supportRender = true;
          } else if (cc.sys.capabilities.canvas) {
            this.renderType = Game.RENDER_TYPE_CANVAS;
            supportRender = true;
          }
        } else if (userRenderMode === 1 && cc.sys.capabilities.canvas) {
          this.renderType = Game.RENDER_TYPE_CANVAS;
          supportRender = true;
        } else if (userRenderMode === 2 && cc.sys.capabilities.opengl) {
          this.renderType = Game.RENDER_TYPE_WEBGL;
          supportRender = true;
        }

        if (!supportRender) {
          throw new Error(debug.getError(3820, userRenderMode));
        }
      }
    }, {
      key: "_initDevice",
      value: function _initDevice() {
        // Avoid setup to be called twice.
        if (this._rendererInitialized) {
          return;
        }

        this.canvas = this.config.adapter.canvas;
        this.frame = this.config.adapter.frame;
        this.container = this.config.adapter.container;

        this._determineRenderType(); // WebGL context created successfully


        if (this.renderType === Game.RENDER_TYPE_WEBGL) {
          var useWebGL2 = !!window.WebGL2RenderingContext;
          var userAgent = window.navigator.userAgent.toLowerCase();

          if (userAgent.indexOf('safari') !== -1 && userAgent.indexOf('chrome') === -1 || _sys.sys.browserType === _sys.sys.BROWSER_TYPE_UC // UC browser implementation doesn't conform to WebGL2 standard
          ) {
              useWebGL2 = false;
            } // useWebGL2 = false;


          if (useWebGL2 && cc.WebGL2GFXDevice) {
            this._gfxDevice = new cc.WebGL2GFXDevice();
          } else if (cc.WebGLGFXDevice) {
            this._gfxDevice = new cc.WebGLGFXDevice();
          }

          var opts = {
            canvasElm: this.canvas,
            debug: true,
            isAntialias: _defaultConstants.EDITOR || _macro.macro.ENABLE_WEBGL_ANTIALIAS,
            devicePixelRatio: window.devicePixelRatio,
            nativeWidth: Math.floor(screen.width * window.devicePixelRatio),
            nativeHeight: Math.floor(screen.height * window.devicePixelRatio)
          }; // fallback if WebGL2 is actually unavailable (usually due to driver issues)

          if (!this._gfxDevice.initialize(opts) && useWebGL2) {
            this._gfxDevice = new cc.WebGLGFXDevice();

            this._gfxDevice.initialize(opts);
          }
        }

        if (!this._gfxDevice) {
          // todo fix here for wechat game
          console.error('can not support canvas rendering in 3D');
          this.renderType = Game.RENDER_TYPE_CANVAS;
          return;
        }

        this.canvas.oncontextmenu = function () {
          if (!cc._isContextMenuEnable) {
            return false;
          }
        };
      }
    }, {
      key: "_initEvents",
      value: function _initEvents() {
        var win = window;
        var hiddenPropName;

        if (typeof document.hidden !== 'undefined') {
          hiddenPropName = 'hidden';
        } else if (typeof document.mozHidden !== 'undefined') {
          hiddenPropName = 'mozHidden';
        } else if (typeof document.msHidden !== 'undefined') {
          hiddenPropName = 'msHidden';
        } else if (typeof document.webkitHidden !== 'undefined') {
          hiddenPropName = 'webkitHidden';
        }

        var hidden = false;

        function onHidden() {
          if (!hidden) {
            hidden = true;
            cc.game.emit(Game.EVENT_HIDE);
          }
        }

        function onShown() {
          if (hidden) {
            hidden = false;
            cc.game.emit(Game.EVENT_SHOW);
          }
        }

        if (hiddenPropName) {
          var changeList = ['visibilitychange', 'mozvisibilitychange', 'msvisibilitychange', 'webkitvisibilitychange', 'qbrowserVisibilityChange']; // tslint:disable-next-line: prefer-for-of

          for (var i = 0; i < changeList.length; i++) {
            document.addEventListener(changeList[i], function (event) {
              var visible = document[hiddenPropName]; // QQ App
              // @ts-ignore

              visible = visible || event.hidden;

              if (visible) {
                onHidden();
              } else {
                onShown();
              }
            });
          }
        } else {
          win.addEventListener('blur', onHidden);
          win.addEventListener('focus', onShown);
        }

        if (window.navigator.userAgent.indexOf('MicroMessenger') > -1) {
          win.onfocus = onShown;
        }

        if ('onpageshow' in window && 'onpagehide' in window) {
          win.addEventListener('pagehide', onHidden);
          win.addEventListener('pageshow', onShown); // Taobao UIWebKit

          document.addEventListener('pagehide', onHidden);
          document.addEventListener('pageshow', onShown);
        }

        this.on(Game.EVENT_HIDE, function () {
          cc.game.pause();
        });
        this.on(Game.EVENT_SHOW, function () {
          cc.game.resume();
        });
      }
    }, {
      key: "setRenderPipeline",
      value: function setRenderPipeline(rppl) {
        if (!rppl) {
          rppl = new _index.ForwardPipeline();
          rppl.initialize(_index.ForwardPipeline.initInfo);
        }

        if (!cc.director.root.setRenderPipeline(rppl)) {
          this.setRenderPipeline();
        }

        this._rendererInitialized = true;

        this._safeEmit(Game.EVENT_RENDERER_INITED);
      }
    }, {
      key: "_safeEmit",
      value: function _safeEmit(event) {
        if (_defaultConstants.EDITOR) {
          try {
            this.emit(event);
          } catch (e) {
            console.warn(e);
          }
        } else {
          this.emit(event);
        }
      }
    }, {
      key: "inited",

      /**
       * @en Indicates whether the engine has inited
       * @zh 引擎是否以完成初始化
       */
      get: function get() {
        return this._inited;
      }
    }]);

    return Game;
  }(_eventTarget.EventTarget);

  _exports.Game = Game;
  Game.EVENT_HIDE = 'game_on_hide';
  Game.EVENT_SHOW = 'game_on_show';
  Game.EVENT_GAME_INITED = 'game_inited';
  Game.EVENT_ENGINE_INITED = 'engine_inited';
  Game.EVENT_RENDERER_INITED = 'renderer_inited';
  Game.RENDER_TYPE_CANVAS = 0;
  Game.RENDER_TYPE_WEBGL = 1;
  Game.RENDER_TYPE_OPENGL = 2;
  cc.Game = Game;
  var game = cc.game = new Game();
  _exports.game = game;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,