(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../gfx/define.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../gfx/define.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.define);
    global.samplerLib = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _define) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.genSamplerHash = genSamplerHash;
  _exports.samplerLib = _exports.SamplerInfoIndex = void 0;

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var SamplerInfoIndex;
  _exports.SamplerInfoIndex = SamplerInfoIndex;

  (function (SamplerInfoIndex) {
    SamplerInfoIndex[SamplerInfoIndex["minFilter"] = 0] = "minFilter";
    SamplerInfoIndex[SamplerInfoIndex["magFilter"] = 1] = "magFilter";
    SamplerInfoIndex[SamplerInfoIndex["mipFilter"] = 2] = "mipFilter";
    SamplerInfoIndex[SamplerInfoIndex["addressU"] = 3] = "addressU";
    SamplerInfoIndex[SamplerInfoIndex["addressV"] = 4] = "addressV";
    SamplerInfoIndex[SamplerInfoIndex["addressW"] = 5] = "addressW";
    SamplerInfoIndex[SamplerInfoIndex["maxAnisotropy"] = 6] = "maxAnisotropy";
    SamplerInfoIndex[SamplerInfoIndex["cmpFunc"] = 7] = "cmpFunc";
    SamplerInfoIndex[SamplerInfoIndex["minLOD"] = 8] = "minLOD";
    SamplerInfoIndex[SamplerInfoIndex["maxLOD"] = 9] = "maxLOD";
    SamplerInfoIndex[SamplerInfoIndex["mipLODBias"] = 10] = "mipLODBias";
    SamplerInfoIndex[SamplerInfoIndex["total"] = 11] = "total";
  })(SamplerInfoIndex || (_exports.SamplerInfoIndex = SamplerInfoIndex = {}));

  var defaultInfo = [_define.GFXFilter.LINEAR, _define.GFXFilter.LINEAR, _define.GFXFilter.NONE, _define.GFXAddress.WRAP, _define.GFXAddress.WRAP, _define.GFXAddress.WRAP, 8, _define.GFXComparisonFunc.NEVER, 0, 0, 0];
  var defaultHash = genSamplerHash(defaultInfo);
  var borderColor = {
    r: 0,
    g: 0,
    b: 0,
    a: 0
  };
  var gfxInfo = {};

  function genSamplerHash(info) {
    var value = 0;
    var hash = 0;

    for (var i = 0; i < defaultInfo.length; i++) {
      value = info[i] || defaultInfo[i];

      switch (i) {
        case SamplerInfoIndex.minFilter:
          hash |= value;
          break;

        case SamplerInfoIndex.magFilter:
          hash |= value << 2;
          break;

        case SamplerInfoIndex.mipFilter:
          hash |= value << 4;
          break;

        case SamplerInfoIndex.addressU:
          hash |= value << 6;
          break;

        case SamplerInfoIndex.addressV:
          hash |= value << 8;
          break;

        case SamplerInfoIndex.addressW:
          hash |= value << 10;
          break;

        case SamplerInfoIndex.maxAnisotropy:
          hash |= value << 12;
          break;

        case SamplerInfoIndex.cmpFunc:
          hash |= value << 16;
          break;

        case SamplerInfoIndex.minLOD:
          hash |= value << 20;
          break;

        case SamplerInfoIndex.maxLOD:
          hash |= value << 24;
          break;

        case SamplerInfoIndex.mipLODBias:
          hash |= value << 28;
          break;
      }
    }

    return hash;
  }
  /**
   * @zh
   * 维护 sampler 资源实例的全局管理器。
   */


  var SamplerLib = /*#__PURE__*/function () {
    function SamplerLib() {
      _classCallCheck(this, SamplerLib);

      this._cache = {};
    }

    _createClass(SamplerLib, [{
      key: "getSampler",

      /**
       * @zh
       * 获取指定属性的 sampler 资源。
       * @param device 渲染设备 [GFXDevice]
       * @param info 目标 sampler 属性
       */
      value: function getSampler(device, hash) {
        if (hash === 0) {
          hash = defaultHash;
        }

        var cache = this._cache[hash];

        if (cache) {
          return cache;
        }

        gfxInfo.minFilter = hash & 3;
        gfxInfo.magFilter = hash >> 2 & 3;
        gfxInfo.mipFilter = hash >> 4 & 3;
        gfxInfo.addressU = hash >> 6 & 3;
        gfxInfo.addressV = hash >> 8 & 3;
        gfxInfo.addressW = hash >> 10 & 3;
        gfxInfo.maxAnisotropy = hash >> 12 & 15;
        gfxInfo.cmpFunc = hash >> 16 & 15;
        gfxInfo.minLOD = hash >> 20 & 15;
        gfxInfo.maxLOD = hash >> 24 & 15;
        gfxInfo.mipLODBias = hash >> 28 & 15;
        gfxInfo.borderColor = borderColor;
        var sampler = this._cache[hash] = device.createSampler(gfxInfo);
        return sampler;
      }
    }]);

    return SamplerLib;
  }();

  var samplerLib = new SamplerLib();
  _exports.samplerLib = samplerLib;
  cc.samplerLib = samplerLib;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,