(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "@cocos/ammo", "./ammo-shape.js", "../../../core/index.js", "../ammo-util.js", "../ammo-enum.js", "../ammo-const.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("@cocos/ammo"), require("./ammo-shape.js"), require("../../../core/index.js"), require("../ammo-util.js"), require("../ammo-enum.js"), require("../ammo-const.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.ammo, global.ammoShape, global.index, global.ammoUtil, global.ammoEnum, global.ammoConst);
    global.ammoBvhTriangleMeshShape = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _ammo, _ammoShape, _index, _ammoUtil, _ammoEnum, _ammoConst) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AmmoBvhTriangleMeshShape = void 0;
  _ammo = _interopRequireDefault(_ammo);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  var AmmoBvhTriangleMeshShape = /*#__PURE__*/function (_AmmoShape) {
    _inherits(AmmoBvhTriangleMeshShape, _AmmoShape);

    _createClass(AmmoBvhTriangleMeshShape, [{
      key: "setMesh",
      value: function setMesh(v) {
        if (!this._isBinding) return;

        if (this._btShape != null && this._btShape != _ammoConst.AmmoConstant.instance.EMPTY_SHAPE) {
          // TODO: change the mesh after initialization
          (0, _index.warnID)(9620);
        } else {
          var mesh = v;

          if (mesh && mesh.renderingSubMeshes.length > 0) {
            this._btTriangleMesh = new _ammo.default.btTriangleMesh();
            var len = mesh.renderingSubMeshes.length;

            for (var i = 0; i < len; i++) {
              var subMesh = mesh.renderingSubMeshes[i];
              var geoInfo = subMesh.geometricInfo;

              if (geoInfo) {
                var primitiveMode = subMesh.primitiveMode;
                var vb = geoInfo.positions;
                var ib = geoInfo.indices;

                if (primitiveMode == _index.GFXPrimitiveMode.TRIANGLE_LIST) {
                  var cnt = ib.length;

                  for (var j = 0; j < cnt; j += 3) {
                    var i0 = ib[j] * 3;
                    var i1 = ib[j + 1] * 3;
                    var i2 = ib[j + 2] * 3;
                    var v0 = new _ammo.default.btVector3(vb[i0], vb[i0 + 1], vb[i0 + 2]);
                    var v1 = new _ammo.default.btVector3(vb[i1], vb[i1 + 1], vb[i1 + 2]);
                    var v2 = new _ammo.default.btVector3(vb[i2], vb[i2 + 1], vb[i2 + 2]);

                    this._btTriangleMesh.addTriangle(v0, v1, v2);
                  }
                } else if (primitiveMode == _index.GFXPrimitiveMode.TRIANGLE_STRIP) {
                  var _cnt = ib.length - 2;

                  var rev = 0;

                  for (var _j = 0; _j < _cnt; _j += 1) {
                    var _i = ib[_j - rev] * 3;

                    var _i2 = ib[_j + rev + 1] * 3;

                    var _i3 = ib[_j + 2] * 3;

                    var _v = new _ammo.default.btVector3(vb[_i], vb[_i + 1], vb[_i + 2]);

                    var _v2 = new _ammo.default.btVector3(vb[_i2], vb[_i2 + 1], vb[_i2 + 2]);

                    var _v3 = new _ammo.default.btVector3(vb[_i3], vb[_i3 + 1], vb[_i3 + 2]);

                    this._btTriangleMesh.addTriangle(_v, _v2, _v3);
                  }
                } else if (primitiveMode == _index.GFXPrimitiveMode.TRIANGLE_FAN) {
                  var _cnt2 = ib.length - 1;

                  var _i4 = ib[0] * 3;

                  var _v4 = new _ammo.default.btVector3(vb[_i4], vb[_i4 + 1], vb[_i4 + 2]);

                  for (var _j2 = 1; _j2 < _cnt2; _j2 += 1) {
                    var _i5 = ib[_j2] * 3;

                    var _i6 = ib[_j2 + 1] * 3;

                    var _v5 = new _ammo.default.btVector3(vb[_i5], vb[_i5 + 1], vb[_i5 + 2]);

                    var _v6 = new _ammo.default.btVector3(vb[_i6], vb[_i6 + 1], vb[_i6 + 2]);

                    this._btTriangleMesh.addTriangle(_v4, _v5, _v6);
                  }
                }
              }
            }

            this._btShape = new _ammo.default.btBvhTriangleMeshShape(this._btTriangleMesh, true, true); // this._btShape = new Ammo.btGImpactMeshShape(this._btTriangleMesh);
            // (this._btShape as Ammo.btGImpactMeshShape).updateBound();

            (0, _ammoUtil.cocos2AmmoVec3)(this.scale, this._collider.node.worldScale);

            this._btShape.setLocalScaling(this.scale);

            this.setWrapper();
            this.setCompound(this._btCompound);
          } else {
            this._btShape = _ammoConst.AmmoConstant.instance.EMPTY_SHAPE;
          }
        }
      }
    }, {
      key: "collider",
      get: function get() {
        return this._collider;
      }
    }, {
      key: "impl",
      get: function get() {
        return this._btShape;
      }
    }]);

    function AmmoBvhTriangleMeshShape() {
      _classCallCheck(this, AmmoBvhTriangleMeshShape);

      return _possibleConstructorReturn(this, _getPrototypeOf(AmmoBvhTriangleMeshShape).call(this, _ammoEnum.AmmoBroadphaseNativeTypes.TRIANGLE_MESH_SHAPE_PROXYTYPE));
    }

    _createClass(AmmoBvhTriangleMeshShape, [{
      key: "onComponentSet",
      value: function onComponentSet() {
        this.setMesh(this.collider.mesh);
      }
    }, {
      key: "setCompound",
      value: function setCompound(compound) {
        _get(_getPrototypeOf(AmmoBvhTriangleMeshShape.prototype), "setCompound", this).call(this, compound);

        this.impl.setUserIndex(this._index);
      }
    }, {
      key: "setScale",
      value: function setScale() {
        _get(_getPrototypeOf(AmmoBvhTriangleMeshShape.prototype), "setScale", this).call(this);

        (0, _ammoUtil.cocos2AmmoVec3)(this.scale, this._collider.node.worldScale);

        this._btShape.setLocalScaling(this.scale);

        if (this._btCompound) {
          this._btCompound.updateChildTransform(this.index, this.transform, true);
        }
      }
    }]);

    return AmmoBvhTriangleMeshShape;
  }(_ammoShape.AmmoShape);

  _exports.AmmoBvhTriangleMeshShape = AmmoBvhTriangleMeshShape;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,