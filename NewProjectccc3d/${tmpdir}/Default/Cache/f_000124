(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../core/assets/mesh.js", "../../core/gfx/buffer.js", "../../core/gfx/define.js", "../../core/math/color.js", "../../core/renderer/scene/model.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../core/assets/mesh.js"), require("../../core/gfx/buffer.js"), require("../../core/gfx/define.js"), require("../../core/math/color.js"), require("../../core/renderer/scene/model.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.mesh, global.buffer, global.define, global.color, global.model);
    global.particleBatchModel = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _mesh, _buffer, _define, _color, _model) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  var _uvs = [0, 0, // bottom-left
  1, 0, // bottom-right
  0, 1, // top-left
  1, 1 // top-right
  ];

  var ParticleBatchModel = /*#__PURE__*/function (_Model) {
    _inherits(ParticleBatchModel, _Model);

    function ParticleBatchModel() {
      var _this;

      _classCallCheck(this, ParticleBatchModel);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(ParticleBatchModel).call(this));
      _this._capacity = void 0;
      _this._vertAttrs = void 0;
      _this._vertSize = void 0;
      _this._vBuffer = void 0;
      _this._vertAttrsFloatCount = void 0;
      _this._vdataF32 = void 0;
      _this._vdataUint32 = void 0;
      _this._iaInfo = void 0;
      _this._iaInfoBuffer = void 0;
      _this._subMeshData = void 0;
      _this._mesh = void 0;
      _this._vertCount = 0;
      _this._indexCount = 0;
      _this._startTimeOffset = 0;
      _this._lifeTimeOffset = 0;
      _this.type = _model.ModelType.PARTICLE_BATCH;
      _this._capacity = 0;
      _this._vertAttrs = null;
      _this._vertSize = 0;
      _this._vBuffer = null;
      _this._vertAttrsFloatCount = 0;
      _this._vdataF32 = null;
      _this._vdataUint32 = null;
      _this._iaInfo = {
        drawInfos: [{
          vertexCount: 0,
          firstVertex: 0,
          indexCount: 0,
          firstIndex: 0,
          vertexOffset: 0,
          instanceCount: 0,
          firstInstance: 0
        }]
      };
      _this._iaInfoBuffer = _this._device.createBuffer({
        usage: _define.GFXBufferUsageBit.INDIRECT,
        memUsage: _define.GFXMemoryUsageBit.HOST | _define.GFXMemoryUsageBit.DEVICE,
        size: _buffer.GFX_DRAW_INFO_SIZE,
        stride: 1
      });
      _this._subMeshData = null;
      _this._mesh = null;
      return _this;
    }

    _createClass(ParticleBatchModel, [{
      key: "setCapacity",
      value: function setCapacity(capacity) {
        var capChanged = this._capacity !== capacity;
        this._capacity = capacity;

        if (this._inited && capChanged) {
          this._recreateBuffer();
        }
      }
    }, {
      key: "setVertexAttributes",
      value: function setVertexAttributes(mesh, attrs) {
        if (this._mesh === mesh && this._vertAttrs === attrs) {
          return;
        }

        this._mesh = mesh;
        this._vertAttrs = attrs;
        this._vertSize = 0;

        var _iterator = _createForOfIteratorHelper(this._vertAttrs),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var a = _step.value;
            a.offset = this._vertSize;
            this._vertSize += _define.GFXFormatInfos[a.format].size;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        this._vertAttrsFloatCount = this._vertSize / 4; // number of float
        // rebuid

        this._vBuffer = this._createSubMeshData();
        this._vdataF32 = new Float32Array(this._vBuffer);
        this._vdataUint32 = new Uint32Array(this._vBuffer);
        this._inited = true;
      }
    }, {
      key: "_createSubMeshData",
      value: function _createSubMeshData() {
        this.destroySubMeshData();
        this._vertCount = 4;
        this._indexCount = 6;

        if (this._mesh) {
          this._vertCount = this._mesh.struct.vertexBundles[this._mesh.struct.primitives[0].vertexBundelIndices[0]].view.count;
          this._indexCount = this._mesh.struct.primitives[0].indexView.count;
        }

        var vertexBuffer = this._device.createBuffer({
          usage: _define.GFXBufferUsageBit.VERTEX | _define.GFXBufferUsageBit.TRANSFER_DST,
          memUsage: _define.GFXMemoryUsageBit.HOST | _define.GFXMemoryUsageBit.DEVICE,
          size: this._vertSize * this._capacity * this._vertCount,
          stride: this._vertSize
        });

        var vBuffer = new ArrayBuffer(this._vertSize * this._capacity * this._vertCount);

        if (this._mesh) {
          var vIdx = this._vertAttrs.findIndex(function (val) {
            return val.name === _define.GFXAttributeName.ATTR_TEX_COORD3;
          });

          var vOffset = this._vertAttrs[vIdx++].offset;

          this._mesh.copyAttribute(0, _define.GFXAttributeName.ATTR_POSITION, vBuffer, this._vertSize, vOffset); // copy mesh position to ATTR_TEX_COORD3


          vOffset = this._vertAttrs[vIdx++].offset;

          this._mesh.copyAttribute(0, _define.GFXAttributeName.ATTR_NORMAL, vBuffer, this._vertSize, vOffset); // copy mesh normal to ATTR_NORMAL


          vOffset = this._vertAttrs[this._vertAttrs.findIndex(function (val) {
            return val.name === _define.GFXAttributeName.ATTR_TEX_COORD;
          })].offset;

          this._mesh.copyAttribute(0, _define.GFXAttributeName.ATTR_TEX_COORD, vBuffer, this._vertSize, vOffset); // copy mesh uv to ATTR_TEX_COORD


          vOffset = this._vertAttrs[vIdx++].offset;

          if (!this._mesh.copyAttribute(0, _define.GFXAttributeName.ATTR_COLOR, vBuffer, this._vertSize, vOffset)) {
            // copy mesh color to ATTR_COLOR1
            var vb = new Uint32Array(vBuffer);

            for (var iVertex = 0; iVertex < this._vertCount; ++iVertex) {
              vb[iVertex * this._vertAttrsFloatCount + vOffset / 4] = _color.Color.WHITE._val;
            }
          }

          var vbFloatArray = new Float32Array(vBuffer);

          for (var i = 1; i < this._capacity; i++) {
            vbFloatArray.copyWithin(i * this._vertSize * this._vertCount / 4, 0, this._vertSize * this._vertCount / 4);
          }
        }

        vertexBuffer.update(vBuffer);
        var indices = new Uint16Array(this._capacity * this._indexCount);

        if (this._mesh) {
          this._mesh.copyIndices(0, indices);

          for (var _i = 1; _i < this._capacity; _i++) {
            for (var j = 0; j < this._indexCount; j++) {
              indices[_i * this._indexCount + j] = indices[j] + _i * this._vertCount;
            }
          }
        } else {
          var dst = 0;

          for (var _i2 = 0; _i2 < this._capacity; ++_i2) {
            var baseIdx = 4 * _i2;
            indices[dst++] = baseIdx;
            indices[dst++] = baseIdx + 1;
            indices[dst++] = baseIdx + 2;
            indices[dst++] = baseIdx + 3;
            indices[dst++] = baseIdx + 2;
            indices[dst++] = baseIdx + 1;
          }
        }

        var indexBuffer = this._device.createBuffer({
          usage: _define.GFXBufferUsageBit.INDEX | _define.GFXBufferUsageBit.TRANSFER_DST,
          memUsage: _define.GFXMemoryUsageBit.HOST | _define.GFXMemoryUsageBit.DEVICE,
          size: this._capacity * this._indexCount * Uint16Array.BYTES_PER_ELEMENT,
          stride: Uint16Array.BYTES_PER_ELEMENT
        });

        indexBuffer.update(indices);
        this._iaInfo.drawInfos[0].vertexCount = this._capacity * this._vertCount;
        this._iaInfo.drawInfos[0].indexCount = this._capacity * this._indexCount;

        if (this._iaInfoBuffer.status === _define.GFXStatus.UNREADY) {
          this._iaInfoBuffer.initialize({
            usage: _define.GFXBufferUsageBit.INDIRECT,
            memUsage: _define.GFXMemoryUsageBit.HOST | _define.GFXMemoryUsageBit.DEVICE,
            size: _buffer.GFX_DRAW_INFO_SIZE,
            stride: 1
          });
        }

        this._iaInfoBuffer.update(this._iaInfo);

        this._subMeshData = new _mesh.RenderingSubMesh([vertexBuffer], this._vertAttrs, _define.GFXPrimitiveMode.TRIANGLE_LIST);
        this._subMeshData.indexBuffer = indexBuffer;
        this._subMeshData.indirectBuffer = this._iaInfoBuffer;
        this.setSubModelMesh(0, this._subMeshData);
        return vBuffer;
      }
    }, {
      key: "setSubModelMaterial",
      value: function setSubModelMaterial(idx, mat) {
        this.initLocalBindings(mat);

        _get(_getPrototypeOf(ParticleBatchModel.prototype), "setSubModelMaterial", this).call(this, idx, mat);
      }
    }, {
      key: "addParticleVertexData",
      value: function addParticleVertexData(index, pvdata) {
        if (!this._mesh) {
          var offset = index * this._vertAttrsFloatCount;
          this._vdataF32[offset++] = pvdata[0].x; // position

          this._vdataF32[offset++] = pvdata[0].y;
          this._vdataF32[offset++] = pvdata[0].z;
          this._vdataF32[offset++] = pvdata[1].x; // uv

          this._vdataF32[offset++] = pvdata[1].y;
          this._vdataF32[offset++] = pvdata[1].z; // frame idx

          this._vdataF32[offset++] = pvdata[2].x; // size

          this._vdataF32[offset++] = pvdata[2].y;
          this._vdataF32[offset++] = pvdata[2].z;
          this._vdataF32[offset++] = pvdata[3].x; // rotation

          this._vdataF32[offset++] = pvdata[3].y;
          this._vdataF32[offset++] = pvdata[3].z;
          this._vdataUint32[offset++] = pvdata[4]; // color

          if (pvdata[5]) {
            this._vdataF32[offset++] = pvdata[5].x; // velocity

            this._vdataF32[offset++] = pvdata[5].y;
            this._vdataF32[offset++] = pvdata[5].z;
          }
        } else {
          for (var i = 0; i < this._vertCount; i++) {
            var _offset = (index * this._vertCount + i) * this._vertAttrsFloatCount;

            this._vdataF32[_offset++] = pvdata[0].x; // position

            this._vdataF32[_offset++] = pvdata[0].y;
            this._vdataF32[_offset++] = pvdata[0].z;
            _offset += 2; // this._vdataF32![offset++] = index;
            // this._vdataF32![offset++] = pvdata[1].y;

            this._vdataF32[_offset++] = pvdata[1].z; // frame idx

            this._vdataF32[_offset++] = pvdata[2].x; // size

            this._vdataF32[_offset++] = pvdata[2].y;
            this._vdataF32[_offset++] = pvdata[2].z;
            this._vdataF32[_offset++] = pvdata[3].x; // rotation

            this._vdataF32[_offset++] = pvdata[3].y;
            this._vdataF32[_offset++] = pvdata[3].z;
            this._vdataUint32[_offset++] = pvdata[4]; // color
          }
        }
      }
    }, {
      key: "addGPUParticleVertexData",
      value: function addGPUParticleVertexData(p, num, time) {
        var offset = num * this._vertAttrsFloatCount * this._vertCount;

        for (var i = 0; i < this._vertCount; i++) {
          var idx = offset;
          this._vdataF32[idx++] = p.position.x;
          this._vdataF32[idx++] = p.position.y;
          this._vdataF32[idx++] = p.position.z;
          this._vdataF32[idx++] = time;
          this._vdataF32[idx++] = p.startSize.x;
          this._vdataF32[idx++] = p.startSize.y;
          this._vdataF32[idx++] = p.startSize.z;
          this._vdataF32[idx++] = _uvs[2 * i];
          this._vdataF32[idx++] = p.rotation.x;
          this._vdataF32[idx++] = p.rotation.y;
          this._vdataF32[idx++] = p.rotation.z;
          this._vdataF32[idx++] = _uvs[2 * i + 1];
          this._vdataF32[idx++] = p.startColor.r / 255.0;
          this._vdataF32[idx++] = p.startColor.g / 255.0;
          this._vdataF32[idx++] = p.startColor.b / 255.0;
          this._vdataF32[idx++] = p.startColor.a / 255.0;
          this._vdataF32[idx++] = p.velocity.x;
          this._vdataF32[idx++] = p.velocity.y;
          this._vdataF32[idx++] = p.velocity.z;
          this._vdataF32[idx++] = p.startLifetime;
          this._vdataF32[idx++] = p.randomSeed;
          offset += this._vertAttrsFloatCount;
        }
      }
    }, {
      key: "updateGPUParticles",
      value: function updateGPUParticles(num, time, dt) {
        var pSize = this._vertAttrsFloatCount * this._vertCount;
        var pBaseIndex = 0;
        var startTime = 0;
        var lifeTime = 0;
        var lastBaseIndex = 0;
        var interval = 0;

        for (var i = 0; i < num; ++i) {
          pBaseIndex = i * pSize;
          startTime = this._vdataF32[pBaseIndex + this._startTimeOffset];
          lifeTime = this._vdataF32[pBaseIndex + this._lifeTimeOffset];
          interval = time - startTime;

          if (lifeTime - interval < dt) {
            lastBaseIndex = --num * pSize;

            this._vdataF32.copyWithin(pBaseIndex, lastBaseIndex, lastBaseIndex + pSize);

            i--;
          }
        }

        return num;
      }
    }, {
      key: "constructAttributeIndex",
      value: function constructAttributeIndex() {
        if (!this._vertAttrs) {
          return;
        }

        var vIdx = this._vertAttrs.findIndex(function (val) {
          return val.name === 'a_position_starttime';
        });

        var vOffset = this._vertAttrs[vIdx].offset;
        this._startTimeOffset = vOffset / 4 + 3;
        vIdx = this._vertAttrs.findIndex(function (val) {
          return val.name === 'a_dir_life';
        });
        vOffset = this._vertAttrs[vIdx].offset;
        this._lifeTimeOffset = vOffset / 4 + 3;
      }
    }, {
      key: "updateIA",
      value: function updateIA(count) {
        var ia = this.getSubModel(0).inputAssembler;
        ia.vertexBuffers[0].update(this._vdataF32);
        ia.indexCount = this._indexCount * count;
        this._iaInfo.drawInfos[0] = ia;

        this._iaInfoBuffer.update(this._iaInfo);
      }
    }, {
      key: "clear",
      value: function clear() {
        this.getSubModel(0).inputAssembler.indexCount = 0;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        _get(_getPrototypeOf(ParticleBatchModel.prototype), "destroy", this).call(this);

        this._vBuffer = null;
        this._vdataF32 = null;
        this.destroySubMeshData();

        this._iaInfoBuffer.destroy();
      }
    }, {
      key: "_recreateBuffer",
      value: function _recreateBuffer() {
        this._vBuffer = this._createSubMeshData();
        this.getSubModel(0).updateCommandBuffer();
        this._vdataF32 = new Float32Array(this._vBuffer);
        this._vdataUint32 = new Uint32Array(this._vBuffer);
      }
    }, {
      key: "destroySubMeshData",
      value: function destroySubMeshData() {
        if (this._subMeshData) {
          this._subMeshData.destroy();

          this._subMeshData = null;
        }
      }
    }]);

    return ParticleBatchModel;
  }(_model.Model);

  _exports.default = ParticleBatchModel;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,