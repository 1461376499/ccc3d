(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../data/class.js", "../value-types/value-type.js", "./mat3.js", "./quat.js", "./utils.js", "./vec3.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../data/class.js"), require("../value-types/value-type.js"), require("./mat3.js"), require("./quat.js"), require("./utils.js"), require("./vec3.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global._class, global.valueType, global.mat3, global.quat, global.utils, global.vec3);
    global.mat4 = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _class, _valueType, _mat, _quat, _utils, _vec) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.mat4 = mat4;
  _exports.Mat4 = void 0;
  _class = _interopRequireDefault(_class);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  /**
   * 表示四维（4x4）矩阵。
   */
  // tslint:disable:one-variable-per-declaration
  var Mat4 = /*#__PURE__*/function (_ValueType) {
    _inherits(Mat4, _ValueType);

    _createClass(Mat4, null, [{
      key: "clone",

      /**
       * @zh 获得指定矩阵的拷贝
       */
      value: function clone(a) {
        return new Mat4(a.m00, a.m01, a.m02, a.m03, a.m04, a.m05, a.m06, a.m07, a.m08, a.m09, a.m10, a.m11, a.m12, a.m13, a.m14, a.m15);
      }
      /**
       * @zh 复制目标矩阵
       */

    }, {
      key: "copy",
      value: function copy(out, a) {
        out.m00 = a.m00;
        out.m01 = a.m01;
        out.m02 = a.m02;
        out.m03 = a.m03;
        out.m04 = a.m04;
        out.m05 = a.m05;
        out.m06 = a.m06;
        out.m07 = a.m07;
        out.m08 = a.m08;
        out.m09 = a.m09;
        out.m10 = a.m10;
        out.m11 = a.m11;
        out.m12 = a.m12;
        out.m13 = a.m13;
        out.m14 = a.m14;
        out.m15 = a.m15;
        return out;
      }
      /**
       * @zh 设置矩阵值
       */

    }, {
      key: "set",
      value: function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
        out.m00 = m00;
        out.m01 = m01;
        out.m02 = m02;
        out.m03 = m03;
        out.m04 = m10;
        out.m05 = m11;
        out.m06 = m12;
        out.m07 = m13;
        out.m08 = m20;
        out.m09 = m21;
        out.m10 = m22;
        out.m11 = m23;
        out.m12 = m30;
        out.m13 = m31;
        out.m14 = m32;
        out.m15 = m33;
        return out;
      }
      /**
       * @zh 将目标赋值为单位矩阵
       */

    }, {
      key: "identity",
      value: function identity(out) {
        out.m00 = 1;
        out.m01 = 0;
        out.m02 = 0;
        out.m03 = 0;
        out.m04 = 0;
        out.m05 = 1;
        out.m06 = 0;
        out.m07 = 0;
        out.m08 = 0;
        out.m09 = 0;
        out.m10 = 1;
        out.m11 = 0;
        out.m12 = 0;
        out.m13 = 0;
        out.m14 = 0;
        out.m15 = 1;
        return out;
      }
      /**
       * @zh 转置矩阵
       */

    }, {
      key: "transpose",
      value: function transpose(out, a) {
        // If we are transposing ourselves we can skip a few steps but have to cache some values
        if (out === a) {
          var a01 = a.m01,
              a02 = a.m02,
              a03 = a.m03,
              a12 = a.m06,
              a13 = a.m07,
              a23 = a.m11;
          out.m01 = a.m04;
          out.m02 = a.m08;
          out.m03 = a.m12;
          out.m04 = a01;
          out.m06 = a.m09;
          out.m07 = a.m13;
          out.m08 = a02;
          out.m09 = a12;
          out.m11 = a.m14;
          out.m12 = a03;
          out.m13 = a13;
          out.m14 = a23;
        } else {
          out.m00 = a.m00;
          out.m01 = a.m04;
          out.m02 = a.m08;
          out.m03 = a.m12;
          out.m04 = a.m01;
          out.m05 = a.m05;
          out.m06 = a.m09;
          out.m07 = a.m13;
          out.m08 = a.m02;
          out.m09 = a.m06;
          out.m10 = a.m10;
          out.m11 = a.m14;
          out.m12 = a.m03;
          out.m13 = a.m07;
          out.m14 = a.m11;
          out.m15 = a.m15;
        }

        return out;
      }
      /**
       * @zh 矩阵求逆，注意，在矩阵不可逆时，会返回一个全为 0 的矩阵。
       */

    }, {
      key: "invert",
      value: function invert(out, a) {
        var a00 = a.m00;
        var a01 = a.m01;
        var a02 = a.m02;
        var a03 = a.m03;
        var a10 = a.m04;
        var a11 = a.m05;
        var a12 = a.m06;
        var a13 = a.m07;
        var a20 = a.m08;
        var a21 = a.m09;
        var a22 = a.m10;
        var a23 = a.m11;
        var a30 = a.m12;
        var a31 = a.m13;
        var a32 = a.m14;
        var a33 = a.m15;
        var b00 = a00 * a11 - a01 * a10;
        var b01 = a00 * a12 - a02 * a10;
        var b02 = a00 * a13 - a03 * a10;
        var b03 = a01 * a12 - a02 * a11;
        var b04 = a01 * a13 - a03 * a11;
        var b05 = a02 * a13 - a03 * a12;
        var b06 = a20 * a31 - a21 * a30;
        var b07 = a20 * a32 - a22 * a30;
        var b08 = a20 * a33 - a23 * a30;
        var b09 = a21 * a32 - a22 * a31;
        var b10 = a21 * a33 - a23 * a31;
        var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

        var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

        if (det === 0) {
          out.m00 = 0;
          out.m01 = 0;
          out.m02 = 0;
          out.m03 = 0;
          out.m04 = 0;
          out.m05 = 0;
          out.m06 = 0;
          out.m07 = 0;
          out.m08 = 0;
          out.m09 = 0;
          out.m10 = 0;
          out.m11 = 0;
          out.m12 = 0;
          out.m13 = 0;
          out.m14 = 0;
          out.m15 = 0;
          return out;
        }

        det = 1.0 / det;
        out.m00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
        out.m01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
        out.m02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
        out.m03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
        out.m04 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
        out.m05 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
        out.m06 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
        out.m07 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
        out.m08 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
        out.m09 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
        out.m10 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
        out.m11 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
        out.m12 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
        out.m13 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
        out.m14 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
        out.m15 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
        return out;
      }
      /**
       * @zh 矩阵行列式
       */

    }, {
      key: "determinant",
      value: function determinant(a) {
        var a00 = a.m00;
        var a01 = a.m01;
        var a02 = a.m02;
        var a03 = a.m03;
        var a10 = a.m04;
        var a11 = a.m05;
        var a12 = a.m06;
        var a13 = a.m07;
        var a20 = a.m08;
        var a21 = a.m09;
        var a22 = a.m10;
        var a23 = a.m11;
        var a30 = a.m12;
        var a31 = a.m13;
        var a32 = a.m14;
        var a33 = a.m15;
        var b00 = a00 * a11 - a01 * a10;
        var b01 = a00 * a12 - a02 * a10;
        var b02 = a00 * a13 - a03 * a10;
        var b03 = a01 * a12 - a02 * a11;
        var b04 = a01 * a13 - a03 * a11;
        var b05 = a02 * a13 - a03 * a12;
        var b06 = a20 * a31 - a21 * a30;
        var b07 = a20 * a32 - a22 * a30;
        var b08 = a20 * a33 - a23 * a30;
        var b09 = a21 * a32 - a22 * a31;
        var b10 = a21 * a33 - a23 * a31;
        var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

        return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
      }
      /**
       * @zh 矩阵乘法
       */

    }, {
      key: "multiply",
      value: function multiply(out, a, b) {
        var a00 = a.m00;
        var a01 = a.m01;
        var a02 = a.m02;
        var a03 = a.m03;
        var a10 = a.m04;
        var a11 = a.m05;
        var a12 = a.m06;
        var a13 = a.m07;
        var a20 = a.m08;
        var a21 = a.m09;
        var a22 = a.m10;
        var a23 = a.m11;
        var a30 = a.m12;
        var a31 = a.m13;
        var a32 = a.m14;
        var a33 = a.m15; // Cache only the current line of the second matrix

        var b0 = b.m00,
            b1 = b.m01,
            b2 = b.m02,
            b3 = b.m03;
        out.m00 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        out.m01 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        out.m02 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        out.m03 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        b0 = b.m04;
        b1 = b.m05;
        b2 = b.m06;
        b3 = b.m07;
        out.m04 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        out.m05 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        out.m06 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        out.m07 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        b0 = b.m08;
        b1 = b.m09;
        b2 = b.m10;
        b3 = b.m11;
        out.m08 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        out.m09 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        out.m10 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        out.m11 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        b0 = b.m12;
        b1 = b.m13;
        b2 = b.m14;
        b3 = b.m15;
        out.m12 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        out.m13 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        out.m14 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        out.m15 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        return out;
      }
      /**
       * @zh 在给定矩阵变换基础上加入变换
       */

    }, {
      key: "transform",
      value: function transform(out, a, v) {
        var x = v.x,
            y = v.y,
            z = v.z;

        if (a === out) {
          out.m12 = a.m00 * x + a.m04 * y + a.m08 * z + a.m12;
          out.m13 = a.m01 * x + a.m05 * y + a.m09 * z + a.m13;
          out.m14 = a.m02 * x + a.m06 * y + a.m10 * z + a.m14;
          out.m15 = a.m03 * x + a.m07 * y + a.m11 * z + a.m15;
        } else {
          var a00 = a.m00;
          var a01 = a.m01;
          var a02 = a.m02;
          var a03 = a.m03;
          var a10 = a.m04;
          var a11 = a.m05;
          var a12 = a.m06;
          var a13 = a.m07;
          var a20 = a.m08;
          var a21 = a.m09;
          var a22 = a.m10;
          var a23 = a.m11;
          var a30 = a.m12;
          var a31 = a.m13;
          var a32 = a.m14;
          var a33 = a.m15;
          out.m00 = a00;
          out.m01 = a01;
          out.m02 = a02;
          out.m03 = a03;
          out.m04 = a10;
          out.m05 = a11;
          out.m06 = a12;
          out.m07 = a13;
          out.m08 = a20;
          out.m09 = a21;
          out.m10 = a22;
          out.m11 = a23;
          out.m12 = a00 * x + a10 * y + a20 * z + a.m12;
          out.m13 = a01 * x + a11 * y + a21 * z + a.m13;
          out.m14 = a02 * x + a12 * y + a22 * z + a.m14;
          out.m15 = a03 * x + a13 * y + a23 * z + a.m15;
        }

        return out;
      }
      /**
       * @zh 在给定矩阵变换基础上加入新位移变换
       */

    }, {
      key: "translate",
      value: function translate(out, a, v) {
        console.warn('function changed');

        if (a === out) {
          out.m12 += v.x;
          out.m13 += v.y;
          out.m14 += v.z;
        } else {
          out.m00 = a.m00;
          out.m01 = a.m01;
          out.m02 = a.m02;
          out.m03 = a.m03;
          out.m04 = a.m04;
          out.m05 = a.m05;
          out.m06 = a.m06;
          out.m07 = a.m07;
          out.m08 = a.m08;
          out.m09 = a.m09;
          out.m10 = a.m10;
          out.m11 = a.m11;
          out.m12 += v.x;
          out.m13 += v.y;
          out.m14 += v.z;
          out.m15 = a.m15;
        }

        return out;
      }
      /**
       * @zh 在给定矩阵变换基础上加入新缩放变换
       */

    }, {
      key: "scale",
      value: function scale(out, a, v) {
        var x = v.x,
            y = v.y,
            z = v.z;
        out.m00 = a.m00 * x;
        out.m01 = a.m01 * x;
        out.m02 = a.m02 * x;
        out.m03 = a.m03 * x;
        out.m04 = a.m04 * y;
        out.m05 = a.m05 * y;
        out.m06 = a.m06 * y;
        out.m07 = a.m07 * y;
        out.m08 = a.m08 * z;
        out.m09 = a.m09 * z;
        out.m10 = a.m10 * z;
        out.m11 = a.m11 * z;
        out.m12 = a.m12;
        out.m13 = a.m13;
        out.m14 = a.m14;
        out.m15 = a.m15;
        return out;
      }
      /**
       * @zh 在给定矩阵变换基础上加入新旋转变换
       * @param rad 旋转角度
       * @param axis 旋转轴
       */

    }, {
      key: "rotate",
      value: function rotate(out, a, rad, axis) {
        var x = axis.x,
            y = axis.y,
            z = axis.z;
        var len = Math.sqrt(x * x + y * y + z * z);

        if (Math.abs(len) < _utils.EPSILON) {
          return null;
        }

        len = 1 / len;
        x *= len;
        y *= len;
        z *= len;
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        var t = 1 - c;
        var a00 = a.m00;
        var a01 = a.m01;
        var a02 = a.m02;
        var a03 = a.m03;
        var a10 = a.m04;
        var a11 = a.m05;
        var a12 = a.m06;
        var a13 = a.m07;
        var a20 = a.m08;
        var a21 = a.m09;
        var a22 = a.m10;
        var a23 = a.m11; // Construct the elements of the rotation matrix

        var b00 = x * x * t + c,
            b01 = y * x * t + z * s,
            b02 = z * x * t - y * s;
        var b10 = x * y * t - z * s,
            b11 = y * y * t + c,
            b12 = z * y * t + x * s;
        var b20 = x * z * t + y * s,
            b21 = y * z * t - x * s,
            b22 = z * z * t + c; // Perform rotation-specific matrix multiplication

        out.m00 = a00 * b00 + a10 * b01 + a20 * b02;
        out.m01 = a01 * b00 + a11 * b01 + a21 * b02;
        out.m02 = a02 * b00 + a12 * b01 + a22 * b02;
        out.m03 = a03 * b00 + a13 * b01 + a23 * b02;
        out.m04 = a00 * b10 + a10 * b11 + a20 * b12;
        out.m05 = a01 * b10 + a11 * b11 + a21 * b12;
        out.m06 = a02 * b10 + a12 * b11 + a22 * b12;
        out.m07 = a03 * b10 + a13 * b11 + a23 * b12;
        out.m08 = a00 * b20 + a10 * b21 + a20 * b22;
        out.m09 = a01 * b20 + a11 * b21 + a21 * b22;
        out.m10 = a02 * b20 + a12 * b21 + a22 * b22;
        out.m11 = a03 * b20 + a13 * b21 + a23 * b22; // If the source and destination differ, copy the unchanged last row

        if (a !== out) {
          out.m12 = a.m12;
          out.m13 = a.m13;
          out.m14 = a.m14;
          out.m15 = a.m15;
        }

        return out;
      }
      /**
       * @zh 在给定矩阵变换基础上加入绕 X 轴的旋转变换
       * @param rad 旋转角度
       */

    }, {
      key: "rotateX",
      value: function rotateX(out, a, rad) {
        var s = Math.sin(rad),
            c = Math.cos(rad),
            a10 = a.m04,
            a11 = a.m05,
            a12 = a.m06,
            a13 = a.m07,
            a20 = a.m08,
            a21 = a.m09,
            a22 = a.m10,
            a23 = a.m11;

        if (a !== out) {
          // If the source and destination differ, copy the unchanged rows
          out.m00 = a.m00;
          out.m01 = a.m01;
          out.m02 = a.m02;
          out.m03 = a.m03;
          out.m12 = a.m12;
          out.m13 = a.m13;
          out.m14 = a.m14;
          out.m15 = a.m15;
        } // Perform axis-specific matrix multiplication


        out.m04 = a10 * c + a20 * s;
        out.m05 = a11 * c + a21 * s;
        out.m06 = a12 * c + a22 * s;
        out.m07 = a13 * c + a23 * s;
        out.m08 = a20 * c - a10 * s;
        out.m09 = a21 * c - a11 * s;
        out.m10 = a22 * c - a12 * s;
        out.m11 = a23 * c - a13 * s;
        return out;
      }
      /**
       * @zh 在给定矩阵变换基础上加入绕 Y 轴的旋转变换
       * @param rad 旋转角度
       */

    }, {
      key: "rotateY",
      value: function rotateY(out, a, rad) {
        var s = Math.sin(rad),
            c = Math.cos(rad),
            a00 = a.m00,
            a01 = a.m01,
            a02 = a.m02,
            a03 = a.m03,
            a20 = a.m08,
            a21 = a.m09,
            a22 = a.m10,
            a23 = a.m11;

        if (a !== out) {
          // If the source and destination differ, copy the unchanged rows
          out.m04 = a.m04;
          out.m05 = a.m05;
          out.m06 = a.m06;
          out.m07 = a.m07;
          out.m12 = a.m12;
          out.m13 = a.m13;
          out.m14 = a.m14;
          out.m15 = a.m15;
        } // Perform axis-specific matrix multiplication


        out.m00 = a00 * c - a20 * s;
        out.m01 = a01 * c - a21 * s;
        out.m02 = a02 * c - a22 * s;
        out.m03 = a03 * c - a23 * s;
        out.m08 = a00 * s + a20 * c;
        out.m09 = a01 * s + a21 * c;
        out.m10 = a02 * s + a22 * c;
        out.m11 = a03 * s + a23 * c;
        return out;
      }
      /**
       * @zh 在给定矩阵变换基础上加入绕 Z 轴的旋转变换
       * @param rad 旋转角度
       */

    }, {
      key: "rotateZ",
      value: function rotateZ(out, a, rad) {
        var s = Math.sin(rad),
            c = Math.cos(rad),
            a00 = a.m00,
            a01 = a.m01,
            a02 = a.m02,
            a03 = a.m03,
            a10 = a.m04,
            a11 = a.m05,
            a12 = a.m06,
            a13 = a.m07; // If the source and destination differ, copy the unchanged last row

        if (a !== out) {
          out.m08 = a.m08;
          out.m09 = a.m09;
          out.m10 = a.m10;
          out.m11 = a.m11;
          out.m12 = a.m12;
          out.m13 = a.m13;
          out.m14 = a.m14;
          out.m15 = a.m15;
        } // Perform axis-specific matrix multiplication


        out.m00 = a00 * c + a10 * s;
        out.m01 = a01 * c + a11 * s;
        out.m02 = a02 * c + a12 * s;
        out.m03 = a03 * c + a13 * s;
        out.m04 = a10 * c - a00 * s;
        out.m05 = a11 * c - a01 * s;
        out.m06 = a12 * c - a02 * s;
        out.m07 = a13 * c - a03 * s;
        return out;
      }
      /**
       * @zh 计算位移矩阵
       */

    }, {
      key: "fromTranslation",
      value: function fromTranslation(out, v) {
        out.m00 = 1;
        out.m01 = 0;
        out.m02 = 0;
        out.m03 = 0;
        out.m04 = 0;
        out.m05 = 1;
        out.m06 = 0;
        out.m07 = 0;
        out.m08 = 0;
        out.m09 = 0;
        out.m10 = 1;
        out.m11 = 0;
        out.m12 = v.x;
        out.m13 = v.y;
        out.m14 = v.z;
        out.m15 = 1;
        return out;
      }
      /**
       * @zh 计算缩放矩阵
       */

    }, {
      key: "fromScaling",
      value: function fromScaling(out, v) {
        out.m00 = v.x;
        out.m01 = 0;
        out.m02 = 0;
        out.m03 = 0;
        out.m04 = 0;
        out.m05 = v.y;
        out.m06 = 0;
        out.m07 = 0;
        out.m08 = 0;
        out.m09 = 0;
        out.m10 = v.z;
        out.m11 = 0;
        out.m12 = 0;
        out.m13 = 0;
        out.m14 = 0;
        out.m15 = 1;
        return out;
      }
      /**
       * @zh 计算旋转矩阵
       */

    }, {
      key: "fromRotation",
      value: function fromRotation(out, rad, axis) {
        var x = axis.x,
            y = axis.y,
            z = axis.z;
        var len = Math.sqrt(x * x + y * y + z * z);

        if (Math.abs(len) < _utils.EPSILON) {
          return null;
        }

        len = 1 / len;
        x *= len;
        y *= len;
        z *= len;
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        var t = 1 - c; // Perform rotation-specific matrix multiplication

        out.m00 = x * x * t + c;
        out.m01 = y * x * t + z * s;
        out.m02 = z * x * t - y * s;
        out.m03 = 0;
        out.m04 = x * y * t - z * s;
        out.m05 = y * y * t + c;
        out.m06 = z * y * t + x * s;
        out.m07 = 0;
        out.m08 = x * z * t + y * s;
        out.m09 = y * z * t - x * s;
        out.m10 = z * z * t + c;
        out.m11 = 0;
        out.m12 = 0;
        out.m13 = 0;
        out.m14 = 0;
        out.m15 = 1;
        return out;
      }
      /**
       * @zh 计算绕 X 轴的旋转矩阵
       */

    }, {
      key: "fromXRotation",
      value: function fromXRotation(out, rad) {
        var s = Math.sin(rad),
            c = Math.cos(rad); // Perform axis-specific matrix multiplication

        out.m00 = 1;
        out.m01 = 0;
        out.m02 = 0;
        out.m03 = 0;
        out.m04 = 0;
        out.m05 = c;
        out.m06 = s;
        out.m07 = 0;
        out.m08 = 0;
        out.m09 = -s;
        out.m10 = c;
        out.m11 = 0;
        out.m12 = 0;
        out.m13 = 0;
        out.m14 = 0;
        out.m15 = 1;
        return out;
      }
      /**
       * @zh 计算绕 Y 轴的旋转矩阵
       */

    }, {
      key: "fromYRotation",
      value: function fromYRotation(out, rad) {
        var s = Math.sin(rad),
            c = Math.cos(rad); // Perform axis-specific matrix multiplication

        out.m00 = c;
        out.m01 = 0;
        out.m02 = -s;
        out.m03 = 0;
        out.m04 = 0;
        out.m05 = 1;
        out.m06 = 0;
        out.m07 = 0;
        out.m08 = s;
        out.m09 = 0;
        out.m10 = c;
        out.m11 = 0;
        out.m12 = 0;
        out.m13 = 0;
        out.m14 = 0;
        out.m15 = 1;
        return out;
      }
      /**
       * @zh 计算绕 Z 轴的旋转矩阵
       */

    }, {
      key: "fromZRotation",
      value: function fromZRotation(out, rad) {
        var s = Math.sin(rad),
            c = Math.cos(rad); // Perform axis-specific matrix multiplication

        out.m00 = c;
        out.m01 = s;
        out.m02 = 0;
        out.m03 = 0;
        out.m04 = -s;
        out.m05 = c;
        out.m06 = 0;
        out.m07 = 0;
        out.m08 = 0;
        out.m09 = 0;
        out.m10 = 1;
        out.m11 = 0;
        out.m12 = 0;
        out.m13 = 0;
        out.m14 = 0;
        out.m15 = 1;
        return out;
      }
      /**
       * @zh 根据旋转和位移信息计算矩阵
       */

    }, {
      key: "fromRT",
      value: function fromRT(out, q, v) {
        var x = q.x,
            y = q.y,
            z = q.z,
            w = q.w;
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var xy = x * y2;
        var xz = x * z2;
        var yy = y * y2;
        var yz = y * z2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        out.m00 = 1 - (yy + zz);
        out.m01 = xy + wz;
        out.m02 = xz - wy;
        out.m03 = 0;
        out.m04 = xy - wz;
        out.m05 = 1 - (xx + zz);
        out.m06 = yz + wx;
        out.m07 = 0;
        out.m08 = xz + wy;
        out.m09 = yz - wx;
        out.m10 = 1 - (xx + yy);
        out.m11 = 0;
        out.m12 = v.x;
        out.m13 = v.y;
        out.m14 = v.z;
        out.m15 = 1;
        return out;
      }
      /**
       * @zh 提取矩阵的位移信息, 默认矩阵中的变换以 S->R->T 的顺序应用
       */

    }, {
      key: "getTranslation",
      value: function getTranslation(out, mat) {
        out.x = mat.m12;
        out.y = mat.m13;
        out.z = mat.m14;
        return out;
      }
      /**
       * @zh 提取矩阵的缩放信息, 默认矩阵中的变换以 S->R->T 的顺序应用
       */

    }, {
      key: "getScaling",
      value: function getScaling(out, mat) {
        var m00 = m3_1.m00 = mat.m00;
        var m01 = m3_1.m01 = mat.m01;
        var m02 = m3_1.m02 = mat.m02;
        var m04 = m3_1.m03 = mat.m04;
        var m05 = m3_1.m04 = mat.m05;
        var m06 = m3_1.m05 = mat.m06;
        var m08 = m3_1.m06 = mat.m08;
        var m09 = m3_1.m07 = mat.m09;
        var m10 = m3_1.m08 = mat.m10;
        out.x = Math.sqrt(m00 * m00 + m01 * m01 + m02 * m02);
        out.y = Math.sqrt(m04 * m04 + m05 * m05 + m06 * m06);
        out.z = Math.sqrt(m08 * m08 + m09 * m09 + m10 * m10); // account for refections

        if (_mat.Mat3.determinant(m3_1) < 0) {
          out.x *= -1;
        }

        return out;
      }
      /**
       * @zh 提取矩阵的旋转信息, 默认输入矩阵不含有缩放信息，如考虑缩放应使用 `toRTS` 函数。
       */

    }, {
      key: "getRotation",
      value: function getRotation(out, mat) {
        var trace = mat.m00 + mat.m05 + mat.m10;
        var S = 0;

        if (trace > 0) {
          S = Math.sqrt(trace + 1.0) * 2;
          out.w = 0.25 * S;
          out.x = (mat.m06 - mat.m09) / S;
          out.y = (mat.m08 - mat.m02) / S;
          out.z = (mat.m01 - mat.m04) / S;
        } else if (mat.m00 > mat.m05 && mat.m00 > mat.m10) {
          S = Math.sqrt(1.0 + mat.m00 - mat.m05 - mat.m10) * 2;
          out.w = (mat.m06 - mat.m09) / S;
          out.x = 0.25 * S;
          out.y = (mat.m01 + mat.m04) / S;
          out.z = (mat.m08 + mat.m02) / S;
        } else if (mat.m05 > mat.m10) {
          S = Math.sqrt(1.0 + mat.m05 - mat.m00 - mat.m10) * 2;
          out.w = (mat.m08 - mat.m02) / S;
          out.x = (mat.m01 + mat.m04) / S;
          out.y = 0.25 * S;
          out.z = (mat.m06 + mat.m09) / S;
        } else {
          S = Math.sqrt(1.0 + mat.m10 - mat.m00 - mat.m05) * 2;
          out.w = (mat.m01 - mat.m04) / S;
          out.x = (mat.m08 + mat.m02) / S;
          out.y = (mat.m06 + mat.m09) / S;
          out.z = 0.25 * S;
        }

        return out;
      }
      /**
       * @zh 提取旋转、位移、缩放信息， 默认矩阵中的变换以 S->R->T 的顺序应用
       */

    }, {
      key: "toRTS",
      value: function toRTS(m, q, v, s) {
        s.x = _vec.Vec3.set(v3_1, m.m00, m.m01, m.m02).length();
        m3_1.m00 = m.m00 / s.x;
        m3_1.m01 = m.m01 / s.x;
        m3_1.m02 = m.m02 / s.x;
        s.y = _vec.Vec3.set(v3_1, m.m04, m.m05, m.m06).length();
        m3_1.m03 = m.m04 / s.y;
        m3_1.m04 = m.m05 / s.y;
        m3_1.m05 = m.m06 / s.y;
        s.z = _vec.Vec3.set(v3_1, m.m08, m.m09, m.m10).length();
        m3_1.m06 = m.m08 / s.z;
        m3_1.m07 = m.m09 / s.z;
        m3_1.m08 = m.m10 / s.z;

        var det = _mat.Mat3.determinant(m3_1);

        if (det < 0) {
          s.x *= -1;
          m3_1.m00 *= -1;
          m3_1.m01 *= -1;
          m3_1.m02 *= -1;
        }

        _quat.Quat.fromMat3(q, m3_1); // already normalized


        _vec.Vec3.set(v, m.m12, m.m13, m.m14);
      }
      /**
       * @zh 根据旋转、位移、缩放信息计算矩阵，以 S->R->T 的顺序应用
       */

    }, {
      key: "fromRTS",
      value: function fromRTS(out, q, v, s) {
        var x = q.x,
            y = q.y,
            z = q.z,
            w = q.w;
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var xy = x * y2;
        var xz = x * z2;
        var yy = y * y2;
        var yz = y * z2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        var sx = s.x;
        var sy = s.y;
        var sz = s.z;
        out.m00 = (1 - (yy + zz)) * sx;
        out.m01 = (xy + wz) * sx;
        out.m02 = (xz - wy) * sx;
        out.m03 = 0;
        out.m04 = (xy - wz) * sy;
        out.m05 = (1 - (xx + zz)) * sy;
        out.m06 = (yz + wx) * sy;
        out.m07 = 0;
        out.m08 = (xz + wy) * sz;
        out.m09 = (yz - wx) * sz;
        out.m10 = (1 - (xx + yy)) * sz;
        out.m11 = 0;
        out.m12 = v.x;
        out.m13 = v.y;
        out.m14 = v.z;
        out.m15 = 1;
        return out;
      }
      /**
       * @zh 根据指定的旋转、位移、缩放及变换中心信息计算矩阵，以 S->R->T 的顺序应用
       * @param q 旋转值
       * @param v 位移值
       * @param s 缩放值
       * @param o 指定变换中心
       */

    }, {
      key: "fromRTSOrigin",
      value: function fromRTSOrigin(out, q, v, s, o) {
        var x = q.x,
            y = q.y,
            z = q.z,
            w = q.w;
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var xy = x * y2;
        var xz = x * z2;
        var yy = y * y2;
        var yz = y * z2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        var sx = s.x;
        var sy = s.y;
        var sz = s.z;
        var ox = o.x;
        var oy = o.y;
        var oz = o.z;
        out.m00 = (1 - (yy + zz)) * sx;
        out.m01 = (xy + wz) * sx;
        out.m02 = (xz - wy) * sx;
        out.m03 = 0;
        out.m04 = (xy - wz) * sy;
        out.m05 = (1 - (xx + zz)) * sy;
        out.m06 = (yz + wx) * sy;
        out.m07 = 0;
        out.m08 = (xz + wy) * sz;
        out.m09 = (yz - wx) * sz;
        out.m10 = (1 - (xx + yy)) * sz;
        out.m11 = 0;
        out.m12 = v.x + ox - (out.m00 * ox + out.m04 * oy + out.m08 * oz);
        out.m13 = v.y + oy - (out.m01 * ox + out.m05 * oy + out.m09 * oz);
        out.m14 = v.z + oz - (out.m02 * ox + out.m06 * oy + out.m10 * oz);
        out.m15 = 1;
        return out;
      }
      /**
       * @zh 根据指定的旋转信息计算矩阵
       */

    }, {
      key: "fromQuat",
      value: function fromQuat(out, q) {
        var x = q.x,
            y = q.y,
            z = q.z,
            w = q.w;
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var yx = y * x2;
        var yy = y * y2;
        var zx = z * x2;
        var zy = z * y2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        out.m00 = 1 - yy - zz;
        out.m01 = yx + wz;
        out.m02 = zx - wy;
        out.m03 = 0;
        out.m04 = yx - wz;
        out.m05 = 1 - xx - zz;
        out.m06 = zy + wx;
        out.m07 = 0;
        out.m08 = zx + wy;
        out.m09 = zy - wx;
        out.m10 = 1 - xx - yy;
        out.m11 = 0;
        out.m12 = 0;
        out.m13 = 0;
        out.m14 = 0;
        out.m15 = 1;
        return out;
      }
      /**
       * @zh 根据指定的视锥体信息计算矩阵
       * @param left 左平面距离
       * @param right 右平面距离
       * @param bottom 下平面距离
       * @param top 上平面距离
       * @param near 近平面距离
       * @param far 远平面距离
       */

    }, {
      key: "frustum",
      value: function frustum(out, left, right, bottom, top, near, far) {
        var rl = 1 / (right - left);
        var tb = 1 / (top - bottom);
        var nf = 1 / (near - far);
        out.m00 = near * 2 * rl;
        out.m01 = 0;
        out.m02 = 0;
        out.m03 = 0;
        out.m04 = 0;
        out.m05 = near * 2 * tb;
        out.m06 = 0;
        out.m07 = 0;
        out.m08 = (right + left) * rl;
        out.m09 = (top + bottom) * tb;
        out.m10 = (far + near) * nf;
        out.m11 = -1;
        out.m12 = 0;
        out.m13 = 0;
        out.m14 = far * near * 2 * nf;
        out.m15 = 0;
        return out;
      }
      /**
       * @zh 计算透视投影矩阵
       * @param fovy 纵向视角高度
       * @param aspect 长宽比
       * @param near 近平面距离
       * @param far 远平面距离
       */

    }, {
      key: "perspective",
      value: function perspective(out, fov, aspect, near, far) {
        var isFOVY = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
        var f = 1.0 / Math.tan(fov / 2);
        var nf = 1 / (near - far);
        out.m00 = isFOVY ? f / aspect : f;
        out.m01 = 0;
        out.m02 = 0;
        out.m03 = 0;
        out.m04 = 0;
        out.m05 = isFOVY ? f : f * aspect;
        out.m06 = 0;
        out.m07 = 0;
        out.m08 = 0;
        out.m09 = 0;
        out.m10 = (far + near) * nf;
        out.m11 = -1;
        out.m12 = 0;
        out.m13 = 0;
        out.m14 = 2 * far * near * nf;
        out.m15 = 0;
        return out;
      }
      /**
       * @zh 计算正交投影矩阵
       * @param left 左平面距离
       * @param right 右平面距离
       * @param bottom 下平面距离
       * @param top 上平面距离
       * @param near 近平面距离
       * @param far 远平面距离
       */

    }, {
      key: "ortho",
      value: function ortho(out, left, right, bottom, top, near, far) {
        var lr = 1 / (left - right);
        var bt = 1 / (bottom - top);
        var nf = 1 / (near - far);
        out.m00 = -2 * lr;
        out.m01 = 0;
        out.m02 = 0;
        out.m03 = 0;
        out.m04 = 0;
        out.m05 = -2 * bt;
        out.m06 = 0;
        out.m07 = 0;
        out.m08 = 0;
        out.m09 = 0;
        out.m10 = 2 * nf;
        out.m11 = 0;
        out.m12 = (left + right) * lr;
        out.m13 = (top + bottom) * bt;
        out.m14 = (far + near) * nf;
        out.m15 = 1;
        return out;
      }
      /**
       * @zh 根据视点计算矩阵，注意 `eye - center` 不能为零向量或与 `up` 向量平行
       * @param eye 当前位置
       * @param center 目标视点
       * @param up 视口上方向
       */

    }, {
      key: "lookAt",
      value: function lookAt(out, eye, center, up) {
        var eyex = eye.x;
        var eyey = eye.y;
        var eyez = eye.z;
        var upx = up.x;
        var upy = up.y;
        var upz = up.z;
        var centerx = center.x;
        var centery = center.y;
        var centerz = center.z;
        var z0 = eyex - centerx;
        var z1 = eyey - centery;
        var z2 = eyez - centerz;
        var len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
        z0 *= len;
        z1 *= len;
        z2 *= len;
        var x0 = upy * z2 - upz * z1;
        var x1 = upz * z0 - upx * z2;
        var x2 = upx * z1 - upy * z0;
        len = 1 / Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
        x0 *= len;
        x1 *= len;
        x2 *= len;
        var y0 = z1 * x2 - z2 * x1;
        var y1 = z2 * x0 - z0 * x2;
        var y2 = z0 * x1 - z1 * x0;
        out.m00 = x0;
        out.m01 = y0;
        out.m02 = z0;
        out.m03 = 0;
        out.m04 = x1;
        out.m05 = y1;
        out.m06 = z1;
        out.m07 = 0;
        out.m08 = x2;
        out.m09 = y2;
        out.m10 = z2;
        out.m11 = 0;
        out.m12 = -(x0 * eyex + x1 * eyey + x2 * eyez);
        out.m13 = -(y0 * eyex + y1 * eyey + y2 * eyez);
        out.m14 = -(z0 * eyex + z1 * eyey + z2 * eyez);
        out.m15 = 1;
        return out;
      }
      /**
       * @zh 计算逆转置矩阵
       */

    }, {
      key: "inverseTranspose",
      value: function inverseTranspose(out, a) {
        var a00 = a.m00;
        var a01 = a.m01;
        var a02 = a.m02;
        var a03 = a.m03;
        var a10 = a.m04;
        var a11 = a.m05;
        var a12 = a.m06;
        var a13 = a.m07;
        var a20 = a.m08;
        var a21 = a.m09;
        var a22 = a.m10;
        var a23 = a.m11;
        var a30 = a.m12;
        var a31 = a.m13;
        var a32 = a.m14;
        var a33 = a.m15;
        var b00 = a00 * a11 - a01 * a10;
        var b01 = a00 * a12 - a02 * a10;
        var b02 = a00 * a13 - a03 * a10;
        var b03 = a01 * a12 - a02 * a11;
        var b04 = a01 * a13 - a03 * a11;
        var b05 = a02 * a13 - a03 * a12;
        var b06 = a20 * a31 - a21 * a30;
        var b07 = a20 * a32 - a22 * a30;
        var b08 = a20 * a33 - a23 * a30;
        var b09 = a21 * a32 - a22 * a31;
        var b10 = a21 * a33 - a23 * a31;
        var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

        var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

        if (!det) {
          return null;
        }

        det = 1.0 / det;
        out.m00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
        out.m01 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
        out.m02 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
        out.m03 = 0;
        out.m04 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
        out.m05 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
        out.m06 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
        out.m07 = 0;
        out.m08 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
        out.m09 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
        out.m10 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
        out.m11 = 0;
        out.m12 = 0;
        out.m13 = 0;
        out.m14 = 0;
        out.m15 = 1;
        return out;
      }
      /**
       * @zh 矩阵转数组
       * @param ofs 数组内的起始偏移量
       */

    }, {
      key: "toArray",
      value: function toArray(out, m) {
        var ofs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        out[ofs + 0] = m.m00;
        out[ofs + 1] = m.m01;
        out[ofs + 2] = m.m02;
        out[ofs + 3] = m.m03;
        out[ofs + 4] = m.m04;
        out[ofs + 5] = m.m05;
        out[ofs + 6] = m.m06;
        out[ofs + 7] = m.m07;
        out[ofs + 8] = m.m08;
        out[ofs + 9] = m.m09;
        out[ofs + 10] = m.m10;
        out[ofs + 11] = m.m11;
        out[ofs + 12] = m.m12;
        out[ofs + 13] = m.m13;
        out[ofs + 14] = m.m14;
        out[ofs + 15] = m.m15;
        return out;
      }
      /**
       * @zh 数组转矩阵
       * @param ofs 数组起始偏移量
       */

    }, {
      key: "fromArray",
      value: function fromArray(out, arr) {
        var ofs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        out.m00 = arr[ofs + 0];
        out.m01 = arr[ofs + 1];
        out.m02 = arr[ofs + 2];
        out.m03 = arr[ofs + 3];
        out.m04 = arr[ofs + 4];
        out.m05 = arr[ofs + 5];
        out.m06 = arr[ofs + 6];
        out.m07 = arr[ofs + 7];
        out.m08 = arr[ofs + 8];
        out.m09 = arr[ofs + 9];
        out.m10 = arr[ofs + 10];
        out.m11 = arr[ofs + 11];
        out.m12 = arr[ofs + 12];
        out.m13 = arr[ofs + 13];
        out.m14 = arr[ofs + 14];
        out.m15 = arr[ofs + 15];
        return out;
      }
      /**
       * @zh 逐元素矩阵加法
       */

    }, {
      key: "add",
      value: function add(out, a, b) {
        out.m00 = a.m00 + b.m00;
        out.m01 = a.m01 + b.m01;
        out.m02 = a.m02 + b.m02;
        out.m03 = a.m03 + b.m03;
        out.m04 = a.m04 + b.m04;
        out.m05 = a.m05 + b.m05;
        out.m06 = a.m06 + b.m06;
        out.m07 = a.m07 + b.m07;
        out.m08 = a.m08 + b.m08;
        out.m09 = a.m09 + b.m09;
        out.m10 = a.m10 + b.m10;
        out.m11 = a.m11 + b.m11;
        out.m12 = a.m12 + b.m12;
        out.m13 = a.m13 + b.m13;
        out.m14 = a.m14 + b.m14;
        out.m15 = a.m15 + b.m15;
        return out;
      }
      /**
       * @zh 逐元素矩阵减法
       */

    }, {
      key: "subtract",
      value: function subtract(out, a, b) {
        out.m00 = a.m00 - b.m00;
        out.m01 = a.m01 - b.m01;
        out.m02 = a.m02 - b.m02;
        out.m03 = a.m03 - b.m03;
        out.m04 = a.m04 - b.m04;
        out.m05 = a.m05 - b.m05;
        out.m06 = a.m06 - b.m06;
        out.m07 = a.m07 - b.m07;
        out.m08 = a.m08 - b.m08;
        out.m09 = a.m09 - b.m09;
        out.m10 = a.m10 - b.m10;
        out.m11 = a.m11 - b.m11;
        out.m12 = a.m12 - b.m12;
        out.m13 = a.m13 - b.m13;
        out.m14 = a.m14 - b.m14;
        out.m15 = a.m15 - b.m15;
        return out;
      }
      /**
       * @zh 矩阵标量乘法
       */

    }, {
      key: "multiplyScalar",
      value: function multiplyScalar(out, a, b) {
        out.m00 = a.m00 * b;
        out.m01 = a.m01 * b;
        out.m02 = a.m02 * b;
        out.m03 = a.m03 * b;
        out.m04 = a.m04 * b;
        out.m05 = a.m05 * b;
        out.m06 = a.m06 * b;
        out.m07 = a.m07 * b;
        out.m08 = a.m08 * b;
        out.m09 = a.m09 * b;
        out.m10 = a.m10 * b;
        out.m11 = a.m11 * b;
        out.m12 = a.m12 * b;
        out.m13 = a.m13 * b;
        out.m14 = a.m14 * b;
        out.m15 = a.m15 * b;
        return out;
      }
      /**
       * @zh 逐元素矩阵标量乘加: A + B * scale
       */

    }, {
      key: "multiplyScalarAndAdd",
      value: function multiplyScalarAndAdd(out, a, b, scale) {
        out.m00 = a.m00 + b.m00 * scale;
        out.m01 = a.m01 + b.m01 * scale;
        out.m02 = a.m02 + b.m02 * scale;
        out.m03 = a.m03 + b.m03 * scale;
        out.m04 = a.m04 + b.m04 * scale;
        out.m05 = a.m05 + b.m05 * scale;
        out.m06 = a.m06 + b.m06 * scale;
        out.m07 = a.m07 + b.m07 * scale;
        out.m08 = a.m08 + b.m08 * scale;
        out.m09 = a.m09 + b.m09 * scale;
        out.m10 = a.m10 + b.m10 * scale;
        out.m11 = a.m11 + b.m11 * scale;
        out.m12 = a.m12 + b.m12 * scale;
        out.m13 = a.m13 + b.m13 * scale;
        out.m14 = a.m14 + b.m14 * scale;
        out.m15 = a.m15 + b.m15 * scale;
        return out;
      }
      /**
       * @zh 矩阵等价判断
       */

    }, {
      key: "strictEquals",
      value: function strictEquals(a, b) {
        return a.m00 === b.m00 && a.m01 === b.m01 && a.m02 === b.m02 && a.m03 === b.m03 && a.m04 === b.m04 && a.m05 === b.m05 && a.m06 === b.m06 && a.m07 === b.m07 && a.m08 === b.m08 && a.m09 === b.m09 && a.m10 === b.m10 && a.m11 === b.m11 && a.m12 === b.m12 && a.m13 === b.m13 && a.m14 === b.m14 && a.m15 === b.m15;
      }
      /**
       * @zh 排除浮点数误差的矩阵近似等价判断
       */

    }, {
      key: "equals",
      value: function equals(a, b) {
        var epsilon = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _utils.EPSILON;
        // TAOCP vol.2, 3rd ed., s.4.2.4, p.213-225
        // defines a 'close enough' relationship between u and v that scales for magnitude
        return Math.abs(a.m00 - b.m00) <= epsilon * Math.max(1.0, Math.abs(a.m00), Math.abs(b.m00)) && Math.abs(a.m01 - b.m01) <= epsilon * Math.max(1.0, Math.abs(a.m01), Math.abs(b.m01)) && Math.abs(a.m02 - b.m02) <= epsilon * Math.max(1.0, Math.abs(a.m02), Math.abs(b.m02)) && Math.abs(a.m03 - b.m03) <= epsilon * Math.max(1.0, Math.abs(a.m03), Math.abs(b.m03)) && Math.abs(a.m04 - b.m04) <= epsilon * Math.max(1.0, Math.abs(a.m04), Math.abs(b.m04)) && Math.abs(a.m05 - b.m05) <= epsilon * Math.max(1.0, Math.abs(a.m05), Math.abs(b.m05)) && Math.abs(a.m06 - b.m06) <= epsilon * Math.max(1.0, Math.abs(a.m06), Math.abs(b.m06)) && Math.abs(a.m07 - b.m07) <= epsilon * Math.max(1.0, Math.abs(a.m07), Math.abs(b.m07)) && Math.abs(a.m08 - b.m08) <= epsilon * Math.max(1.0, Math.abs(a.m08), Math.abs(b.m08)) && Math.abs(a.m09 - b.m09) <= epsilon * Math.max(1.0, Math.abs(a.m09), Math.abs(b.m09)) && Math.abs(a.m10 - b.m10) <= epsilon * Math.max(1.0, Math.abs(a.m10), Math.abs(b.m10)) && Math.abs(a.m11 - b.m11) <= epsilon * Math.max(1.0, Math.abs(a.m11), Math.abs(b.m11)) && Math.abs(a.m12 - b.m12) <= epsilon * Math.max(1.0, Math.abs(a.m12), Math.abs(b.m12)) && Math.abs(a.m13 - b.m13) <= epsilon * Math.max(1.0, Math.abs(a.m13), Math.abs(b.m13)) && Math.abs(a.m14 - b.m14) <= epsilon * Math.max(1.0, Math.abs(a.m14), Math.abs(b.m14)) && Math.abs(a.m15 - b.m15) <= epsilon * Math.max(1.0, Math.abs(a.m15), Math.abs(b.m15));
      }
      /**
       * 矩阵第 0 列第 0 行的元素。
       */

    }]);

    function Mat4() {
      var _this;

      var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var m03 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var m04 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
      var m05 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;
      var m06 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
      var m07 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
      var m08 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;
      var m09 = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;
      var m10 = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 1;
      var m11 = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 0;
      var m12 = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : 0;
      var m13 = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : 0;
      var m14 = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : 0;
      var m15 = arguments.length > 15 && arguments[15] !== undefined ? arguments[15] : 1;

      _classCallCheck(this, Mat4);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Mat4).call(this));
      _this.m00 = void 0;
      _this.m01 = void 0;
      _this.m02 = void 0;
      _this.m03 = void 0;
      _this.m04 = void 0;
      _this.m05 = void 0;
      _this.m06 = void 0;
      _this.m07 = void 0;
      _this.m08 = void 0;
      _this.m09 = void 0;
      _this.m10 = void 0;
      _this.m11 = void 0;
      _this.m12 = void 0;
      _this.m13 = void 0;
      _this.m14 = void 0;
      _this.m15 = void 0;

      if (_typeof(m00) === 'object') {
        _this.m00 = m00.m00;
        _this.m01 = m00.m01;
        _this.m02 = m00.m02;
        _this.m03 = m00.m03;
        _this.m04 = m00.m04;
        _this.m05 = m00.m05;
        _this.m06 = m00.m06;
        _this.m07 = m00.m07;
        _this.m08 = m00.m08;
        _this.m09 = m00.m09;
        _this.m10 = m00.m10;
        _this.m11 = m00.m11;
        _this.m12 = m00.m12;
        _this.m13 = m00.m13;
        _this.m14 = m00.m14;
        _this.m15 = m00.m15;
      } else {
        _this.m00 = m00;
        _this.m01 = m01;
        _this.m02 = m02;
        _this.m03 = m03;
        _this.m04 = m04;
        _this.m05 = m05;
        _this.m06 = m06;
        _this.m07 = m07;
        _this.m08 = m08;
        _this.m09 = m09;
        _this.m10 = m10;
        _this.m11 = m11;
        _this.m12 = m12;
        _this.m13 = m13;
        _this.m14 = m14;
        _this.m15 = m15;
      }

      return _this;
    }
    /**
     * @zh 克隆当前矩阵。
     */


    _createClass(Mat4, [{
      key: "clone",
      value: function clone() {
        var t = this;
        return new Mat4(t.m00, t.m01, t.m02, t.m03, t.m04, t.m05, t.m06, t.m07, t.m08, t.m09, t.m10, t.m11, t.m12, t.m13, t.m14, t.m15);
      }
      /**
       * @zh 设置当前矩阵使其与指定矩阵相等。
       * @param other 相比较的矩阵。
       * @return this
       */

    }, {
      key: "set",
      value: function set() {
        var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var m03 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
        var m04 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
        var m05 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;
        var m06 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
        var m07 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
        var m08 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;
        var m09 = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;
        var m10 = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 1;
        var m11 = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 0;
        var m12 = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : 0;
        var m13 = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : 0;
        var m14 = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : 0;
        var m15 = arguments.length > 15 && arguments[15] !== undefined ? arguments[15] : 1;

        if (_typeof(m00) === 'object') {
          this.m01 = m00.m01;
          this.m02 = m00.m02;
          this.m03 = m00.m03;
          this.m04 = m00.m04;
          this.m05 = m00.m05;
          this.m06 = m00.m06;
          this.m07 = m00.m07;
          this.m08 = m00.m08;
          this.m09 = m00.m09;
          this.m10 = m00.m10;
          this.m11 = m00.m11;
          this.m12 = m00.m12;
          this.m13 = m00.m13;
          this.m14 = m00.m14;
          this.m15 = m00.m15;
          this.m00 = m00.m00;
        } else {
          this.m01 = m01;
          this.m02 = m02;
          this.m03 = m03;
          this.m04 = m04;
          this.m05 = m05;
          this.m06 = m06;
          this.m07 = m07;
          this.m08 = m08;
          this.m09 = m09;
          this.m10 = m10;
          this.m11 = m11;
          this.m12 = m12;
          this.m13 = m13;
          this.m14 = m14;
          this.m15 = m15;
          this.m00 = m00;
        }

        return this;
      }
      /**
       * @zh 判断当前矩阵是否在误差范围内与指定矩阵相等。
       * @param other 相比较的矩阵。
       * @param epsilon 允许的误差，应为非负数。
       * @return 两矩阵的各元素都分别相等时返回 `true`；否则返回 `false`。
       */

    }, {
      key: "equals",
      value: function equals(other) {
        var epsilon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _utils.EPSILON;
        return Math.abs(this.m00 - other.m00) <= epsilon * Math.max(1.0, Math.abs(this.m00), Math.abs(other.m00)) && Math.abs(this.m01 - other.m01) <= epsilon * Math.max(1.0, Math.abs(this.m01), Math.abs(other.m01)) && Math.abs(this.m02 - other.m02) <= epsilon * Math.max(1.0, Math.abs(this.m02), Math.abs(other.m02)) && Math.abs(this.m03 - other.m03) <= epsilon * Math.max(1.0, Math.abs(this.m03), Math.abs(other.m03)) && Math.abs(this.m04 - other.m04) <= epsilon * Math.max(1.0, Math.abs(this.m04), Math.abs(other.m04)) && Math.abs(this.m05 - other.m05) <= epsilon * Math.max(1.0, Math.abs(this.m05), Math.abs(other.m05)) && Math.abs(this.m06 - other.m06) <= epsilon * Math.max(1.0, Math.abs(this.m06), Math.abs(other.m06)) && Math.abs(this.m07 - other.m07) <= epsilon * Math.max(1.0, Math.abs(this.m07), Math.abs(other.m07)) && Math.abs(this.m08 - other.m08) <= epsilon * Math.max(1.0, Math.abs(this.m08), Math.abs(other.m08)) && Math.abs(this.m09 - other.m09) <= epsilon * Math.max(1.0, Math.abs(this.m09), Math.abs(other.m09)) && Math.abs(this.m10 - other.m10) <= epsilon * Math.max(1.0, Math.abs(this.m10), Math.abs(other.m10)) && Math.abs(this.m11 - other.m11) <= epsilon * Math.max(1.0, Math.abs(this.m11), Math.abs(other.m11)) && Math.abs(this.m12 - other.m12) <= epsilon * Math.max(1.0, Math.abs(this.m12), Math.abs(other.m12)) && Math.abs(this.m13 - other.m13) <= epsilon * Math.max(1.0, Math.abs(this.m13), Math.abs(other.m13)) && Math.abs(this.m14 - other.m14) <= epsilon * Math.max(1.0, Math.abs(this.m14), Math.abs(other.m14)) && Math.abs(this.m15 - other.m15) <= epsilon * Math.max(1.0, Math.abs(this.m15), Math.abs(other.m15));
      }
      /**
       * @zh 判断当前矩阵是否与指定矩阵相等。
       * @param other 相比较的矩阵。
       * @return 两矩阵的各元素都分别相等时返回 `true`；否则返回 `false`。
       */

    }, {
      key: "strictEquals",
      value: function strictEquals(other) {
        return this.m00 === other.m00 && this.m01 === other.m01 && this.m02 === other.m02 && this.m03 === other.m03 && this.m04 === other.m04 && this.m05 === other.m05 && this.m06 === other.m06 && this.m07 === other.m07 && this.m08 === other.m08 && this.m09 === other.m09 && this.m10 === other.m10 && this.m11 === other.m11 && this.m12 === other.m12 && this.m13 === other.m13 && this.m14 === other.m14 && this.m15 === other.m15;
      }
      /**
       * 返回当前矩阵的字符串表示。
       * @return 当前矩阵的字符串表示。
       */

    }, {
      key: "toString",
      value: function toString() {
        return '[\n' + this.m00 + ', ' + this.m01 + ', ' + this.m02 + ', ' + this.m03 + ',\n' + this.m04 + ', ' + this.m05 + ', ' + this.m06 + ', ' + this.m07 + ',\n' + this.m08 + ', ' + this.m09 + ', ' + this.m10 + ', ' + this.m11 + ',\n' + this.m12 + ', ' + this.m13 + ', ' + this.m14 + ', ' + this.m15 + '\n' + ']';
      }
      /**
       * 将当前矩阵设为单位矩阵。
       * @return `this`
       */

    }, {
      key: "identity",
      value: function identity() {
        this.m00 = 1;
        this.m01 = 0;
        this.m02 = 0;
        this.m03 = 0;
        this.m04 = 0;
        this.m05 = 1;
        this.m06 = 0;
        this.m07 = 0;
        this.m08 = 0;
        this.m09 = 0;
        this.m10 = 1;
        this.m11 = 0;
        this.m12 = 0;
        this.m13 = 0;
        this.m14 = 0;
        this.m15 = 1;
        return this;
      }
      /**
       * @zh 计算当前矩阵的转置矩阵。
       */

    }, {
      key: "transpose",
      value: function transpose() {
        var a01 = this.m01,
            a02 = this.m02,
            a03 = this.m03,
            a12 = this.m06,
            a13 = this.m07,
            a23 = this.m11;
        this.m01 = this.m04;
        this.m02 = this.m08;
        this.m03 = this.m12;
        this.m04 = a01;
        this.m06 = this.m09;
        this.m07 = this.m13;
        this.m08 = a02;
        this.m09 = a12;
        this.m11 = this.m14;
        this.m12 = a03;
        this.m13 = a13;
        this.m14 = a23;
        return this;
      }
      /**
       * @zh 计算当前矩阵的逆矩阵。注意，在矩阵不可逆时，会返回一个全为 0 的矩阵。
       */

    }, {
      key: "invert",
      value: function invert() {
        var a00 = this.m00;
        var a01 = this.m01;
        var a02 = this.m02;
        var a03 = this.m03;
        var a10 = this.m04;
        var a11 = this.m05;
        var a12 = this.m06;
        var a13 = this.m07;
        var a20 = this.m08;
        var a21 = this.m09;
        var a22 = this.m10;
        var a23 = this.m11;
        var a30 = this.m12;
        var a31 = this.m13;
        var a32 = this.m14;
        var a33 = this.m15;
        var b00 = a00 * a11 - a01 * a10;
        var b01 = a00 * a12 - a02 * a10;
        var b02 = a00 * a13 - a03 * a10;
        var b03 = a01 * a12 - a02 * a11;
        var b04 = a01 * a13 - a03 * a11;
        var b05 = a02 * a13 - a03 * a12;
        var b06 = a20 * a31 - a21 * a30;
        var b07 = a20 * a32 - a22 * a30;
        var b08 = a20 * a33 - a23 * a30;
        var b09 = a21 * a32 - a22 * a31;
        var b10 = a21 * a33 - a23 * a31;
        var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

        var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

        if (det === 0) {
          this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
          return this;
        }

        det = 1.0 / det;
        this.m00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
        this.m01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
        this.m02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
        this.m03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
        this.m04 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
        this.m05 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
        this.m06 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
        this.m07 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
        this.m08 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
        this.m09 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
        this.m10 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
        this.m11 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
        this.m12 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
        this.m13 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
        this.m14 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
        this.m15 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
        return this;
      }
      /**
       * 计算当前矩阵的行列式。
       * @return 当前矩阵的行列式。
       */

    }, {
      key: "determinant",
      value: function determinant() {
        var a00 = this.m00;
        var a01 = this.m01;
        var a02 = this.m02;
        var a03 = this.m03;
        var a10 = this.m04;
        var a11 = this.m05;
        var a12 = this.m06;
        var a13 = this.m07;
        var a20 = this.m08;
        var a21 = this.m09;
        var a22 = this.m10;
        var a23 = this.m11;
        var a30 = this.m12;
        var a31 = this.m13;
        var a32 = this.m14;
        var a33 = this.m15;
        var b00 = a00 * a11 - a01 * a10;
        var b01 = a00 * a12 - a02 * a10;
        var b02 = a00 * a13 - a03 * a10;
        var b03 = a01 * a12 - a02 * a11;
        var b04 = a01 * a13 - a03 * a11;
        var b05 = a02 * a13 - a03 * a12;
        var b06 = a20 * a31 - a21 * a30;
        var b07 = a20 * a32 - a22 * a30;
        var b08 = a20 * a33 - a23 * a30;
        var b09 = a21 * a32 - a22 * a31;
        var b10 = a21 * a33 - a23 * a31;
        var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

        return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
      }
      /**
       * @zh 矩阵加法。将当前矩阵与指定矩阵的相加，结果返回给当前矩阵。
       * @param mat 相加的矩阵
       */

    }, {
      key: "add",
      value: function add(mat) {
        this.m00 = this.m00 + mat.m00;
        this.m01 = this.m01 + mat.m01;
        this.m02 = this.m02 + mat.m02;
        this.m03 = this.m03 + mat.m03;
        this.m04 = this.m04 + mat.m04;
        this.m05 = this.m05 + mat.m05;
        this.m06 = this.m06 + mat.m06;
        this.m07 = this.m07 + mat.m07;
        this.m08 = this.m08 + mat.m08;
        this.m09 = this.m09 + mat.m09;
        this.m10 = this.m10 + mat.m10;
        this.m11 = this.m11 + mat.m11;
        this.m12 = this.m12 + mat.m12;
        this.m13 = this.m13 + mat.m13;
        this.m14 = this.m14 + mat.m14;
        this.m15 = this.m15 + mat.m15;
        return this;
      }
      /**
       * @zh 计算矩阵减法。将当前矩阵减去指定矩阵的结果赋值给当前矩阵。
       * @param mat 减数矩阵。
       */

    }, {
      key: "subtract",
      value: function subtract(mat) {
        this.m00 = this.m00 - mat.m00;
        this.m01 = this.m01 - mat.m01;
        this.m02 = this.m02 - mat.m02;
        this.m03 = this.m03 - mat.m03;
        this.m04 = this.m04 - mat.m04;
        this.m05 = this.m05 - mat.m05;
        this.m06 = this.m06 - mat.m06;
        this.m07 = this.m07 - mat.m07;
        this.m08 = this.m08 - mat.m08;
        this.m09 = this.m09 - mat.m09;
        this.m10 = this.m10 - mat.m10;
        this.m11 = this.m11 - mat.m11;
        this.m12 = this.m12 - mat.m12;
        this.m13 = this.m13 - mat.m13;
        this.m14 = this.m14 - mat.m14;
        this.m15 = this.m15 - mat.m15;
        return this;
      }
      /**
       * @zh 矩阵乘法。将当前矩阵左乘指定矩阵的结果赋值给当前矩阵。
       * @param mat 指定的矩阵。
       */

    }, {
      key: "multiply",
      value: function multiply(mat) {
        var a00 = this.m00;
        var a01 = this.m01;
        var a02 = this.m02;
        var a03 = this.m03;
        var a10 = this.m04;
        var a11 = this.m05;
        var a12 = this.m06;
        var a13 = this.m07;
        var a20 = this.m08;
        var a21 = this.m09;
        var a22 = this.m10;
        var a23 = this.m11;
        var a30 = this.m12;
        var a31 = this.m13;
        var a32 = this.m14;
        var a33 = this.m15; // Cache only the current line of the second matrix

        var b0 = mat.m00,
            b1 = mat.m01,
            b2 = mat.m02,
            b3 = mat.m03;
        this.m00 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        this.m01 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        this.m02 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        this.m03 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        b0 = mat.m04;
        b1 = mat.m05;
        b2 = mat.m06;
        b3 = mat.m07;
        this.m04 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        this.m05 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        this.m06 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        this.m07 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        b0 = mat.m08;
        b1 = mat.m09;
        b2 = mat.m10;
        b3 = mat.m11;
        this.m08 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        this.m09 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        this.m10 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        this.m11 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        b0 = mat.m12;
        b1 = mat.m13;
        b2 = mat.m14;
        b3 = mat.m15;
        this.m12 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
        this.m13 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
        this.m14 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
        this.m15 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
        return this;
      }
      /**
       * @zh 矩阵数乘。将当前矩阵与指定标量的数乘结果赋值给当前矩阵。
       * @param scalar 指定的标量。
       */

    }, {
      key: "multiplyScalar",
      value: function multiplyScalar(scalar) {
        this.m00 = this.m00 * scalar;
        this.m01 = this.m01 * scalar;
        this.m02 = this.m02 * scalar;
        this.m03 = this.m03 * scalar;
        this.m04 = this.m04 * scalar;
        this.m05 = this.m05 * scalar;
        this.m06 = this.m06 * scalar;
        this.m07 = this.m07 * scalar;
        this.m08 = this.m08 * scalar;
        this.m09 = this.m09 * scalar;
        this.m10 = this.m10 * scalar;
        this.m11 = this.m11 * scalar;
        this.m12 = this.m12 * scalar;
        this.m13 = this.m13 * scalar;
        this.m14 = this.m14 * scalar;
        this.m15 = this.m15 * scalar;
        return this;
      }
      /**
       * @zh 将当前矩阵左乘位移矩阵的结果赋值给当前矩阵，位移矩阵由各个轴的位移给出。
       * @param vec 位移向量。
       */

    }, {
      key: "translate",
      value: function translate(vec) {
        console.warn('function changed');
        this.m12 += vec.x;
        this.m13 += vec.y;
        this.m14 += vec.z;
        return this;
      }
      /**
       * @zh 将当前矩阵左乘缩放矩阵的结果赋值给当前矩阵，缩放矩阵由各个轴的缩放给出。
       * @param vec 各个轴的缩放。
       */

    }, {
      key: "scale",
      value: function scale(vec) {
        var x = vec.x,
            y = vec.y,
            z = vec.z;
        this.m00 = this.m00 * x;
        this.m01 = this.m01 * x;
        this.m02 = this.m02 * x;
        this.m03 = this.m03 * x;
        this.m04 = this.m04 * y;
        this.m05 = this.m05 * y;
        this.m06 = this.m06 * y;
        this.m07 = this.m07 * y;
        this.m08 = this.m08 * z;
        this.m09 = this.m09 * z;
        this.m10 = this.m10 * z;
        this.m11 = this.m11 * z;
        this.m12 = this.m12;
        this.m13 = this.m13;
        this.m14 = this.m14;
        this.m15 = this.m15;
        return this;
      }
      /**
       * @zh 将当前矩阵左乘旋转矩阵的结果赋值给当前矩阵，旋转矩阵由旋转轴和旋转角度给出。
       * @param mat 矩阵
       * @param rad 旋转角度（弧度制）
       * @param axis 旋转轴
       */

    }, {
      key: "rotate",
      value: function rotate(rad, axis) {
        var x = axis.x,
            y = axis.y,
            z = axis.z;
        var len = Math.sqrt(x * x + y * y + z * z);

        if (Math.abs(len) < _utils.EPSILON) {
          return null;
        }

        len = 1 / len;
        x *= len;
        y *= len;
        z *= len;
        var s = Math.sin(rad);
        var c = Math.cos(rad);
        var t = 1 - c;
        var a00 = this.m00;
        var a01 = this.m01;
        var a02 = this.m02;
        var a03 = this.m03;
        var a10 = this.m04;
        var a11 = this.m05;
        var a12 = this.m06;
        var a13 = this.m07;
        var a20 = this.m08;
        var a21 = this.m09;
        var a22 = this.m10;
        var a23 = this.m11; // Construct the elements of the rotation matrix

        var b00 = x * x * t + c,
            b01 = y * x * t + z * s,
            b02 = z * x * t - y * s;
        var b10 = x * y * t - z * s,
            b11 = y * y * t + c,
            b12 = z * y * t + x * s;
        var b20 = x * z * t + y * s,
            b21 = y * z * t - x * s,
            b22 = z * z * t + c; // Perform rotation-specific matrix multiplication

        this.m00 = a00 * b00 + a10 * b01 + a20 * b02;
        this.m01 = a01 * b00 + a11 * b01 + a21 * b02;
        this.m02 = a02 * b00 + a12 * b01 + a22 * b02;
        this.m03 = a03 * b00 + a13 * b01 + a23 * b02;
        this.m04 = a00 * b10 + a10 * b11 + a20 * b12;
        this.m05 = a01 * b10 + a11 * b11 + a21 * b12;
        this.m06 = a02 * b10 + a12 * b11 + a22 * b12;
        this.m07 = a03 * b10 + a13 * b11 + a23 * b12;
        this.m08 = a00 * b20 + a10 * b21 + a20 * b22;
        this.m09 = a01 * b20 + a11 * b21 + a21 * b22;
        this.m10 = a02 * b20 + a12 * b21 + a22 * b22;
        this.m11 = a03 * b20 + a13 * b21 + a23 * b22;
        return this;
      }
      /**
       * @zh 从当前矩阵中计算出位移变换的部分，并以各个轴上位移的形式赋值给出口向量。
       * @param out 返回向量，当未指定时将创建为新的向量。
       */

    }, {
      key: "getTranslation",
      value: function getTranslation(out) {
        out.x = this.m12;
        out.y = this.m13;
        out.z = this.m14;
        return out;
      }
      /**
       * @zh 从当前矩阵中计算出缩放变换的部分，并以各个轴上缩放的形式赋值给出口向量。
       * @param out 返回值，当未指定时将创建为新的向量。
       */

    }, {
      key: "getScale",
      value: function getScale(out) {
        var m00 = m3_1.m00 = this.m00;
        var m01 = m3_1.m01 = this.m01;
        var m02 = m3_1.m02 = this.m02;
        var m04 = m3_1.m03 = this.m04;
        var m05 = m3_1.m04 = this.m05;
        var m06 = m3_1.m05 = this.m06;
        var m08 = m3_1.m06 = this.m08;
        var m09 = m3_1.m07 = this.m09;
        var m10 = m3_1.m08 = this.m10;
        out.x = Math.sqrt(m00 * m00 + m01 * m01 + m02 * m02);
        out.y = Math.sqrt(m04 * m04 + m05 * m05 + m06 * m06);
        out.z = Math.sqrt(m08 * m08 + m09 * m09 + m10 * m10); // account for refections

        if (_mat.Mat3.determinant(m3_1) < 0) {
          out.x *= -1;
        }

        return out;
      }
      /**
       * @zh 从当前矩阵中计算出旋转变换的部分，并以四元数的形式赋值给出口四元数。
       * @param out 返回值，当未指定时将创建为新的四元数。
       */

    }, {
      key: "getRotation",
      value: function getRotation(out) {
        var trace = this.m00 + this.m05 + this.m10;
        var S = 0;

        if (trace > 0) {
          S = Math.sqrt(trace + 1.0) * 2;
          out.w = 0.25 * S;
          out.x = (this.m06 - this.m09) / S;
          out.y = (this.m08 - this.m02) / S;
          out.z = (this.m01 - this.m04) / S;
        } else if (this.m00 > this.m05 && this.m00 > this.m10) {
          S = Math.sqrt(1.0 + this.m00 - this.m05 - this.m10) * 2;
          out.w = (this.m06 - this.m09) / S;
          out.x = 0.25 * S;
          out.y = (this.m01 + this.m04) / S;
          out.z = (this.m08 + this.m02) / S;
        } else if (this.m05 > this.m10) {
          S = Math.sqrt(1.0 + this.m05 - this.m00 - this.m10) * 2;
          out.w = (this.m08 - this.m02) / S;
          out.x = (this.m01 + this.m04) / S;
          out.y = 0.25 * S;
          out.z = (this.m06 + this.m09) / S;
        } else {
          S = Math.sqrt(1.0 + this.m10 - this.m00 - this.m05) * 2;
          out.w = (this.m01 - this.m04) / S;
          out.x = (this.m08 + this.m02) / S;
          out.y = (this.m06 + this.m09) / S;
          out.z = 0.25 * S;
        }

        return out;
      }
      /**
       * @zh 重置当前矩阵的值，使其表示指定的旋转、缩放、位移依次组合的变换。
       * @param q 四元数表示的旋转变换。
       * @param v 位移变换，表示为各个轴的位移。
       * @param s 缩放变换，表示为各个轴的缩放。
       * @return `this`
       */

    }, {
      key: "fromRTS",
      value: function fromRTS(q, v, s) {
        var x = q.x,
            y = q.y,
            z = q.z,
            w = q.w;
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var xy = x * y2;
        var xz = x * z2;
        var yy = y * y2;
        var yz = y * z2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        var sx = s.x;
        var sy = s.y;
        var sz = s.z;
        this.m00 = (1 - (yy + zz)) * sx;
        this.m01 = (xy + wz) * sx;
        this.m02 = (xz - wy) * sx;
        this.m03 = 0;
        this.m04 = (xy - wz) * sy;
        this.m05 = (1 - (xx + zz)) * sy;
        this.m06 = (yz + wx) * sy;
        this.m07 = 0;
        this.m08 = (xz + wy) * sz;
        this.m09 = (yz - wx) * sz;
        this.m10 = (1 - (xx + yy)) * sz;
        this.m11 = 0;
        this.m12 = v.x;
        this.m13 = v.y;
        this.m14 = v.z;
        this.m15 = 1;
        return this;
      }
      /**
       * @zh 重置当前矩阵的值，使其表示指定四元数表示的旋转变换。
       * @param q 四元数表示的旋转变换。
       * @return `this`
       */

    }, {
      key: "fromQuat",
      value: function fromQuat(q) {
        var x = q.x,
            y = q.y,
            z = q.z,
            w = q.w;
        var x2 = x + x;
        var y2 = y + y;
        var z2 = z + z;
        var xx = x * x2;
        var yx = y * x2;
        var yy = y * y2;
        var zx = z * x2;
        var zy = z * y2;
        var zz = z * z2;
        var wx = w * x2;
        var wy = w * y2;
        var wz = w * z2;
        this.m00 = 1 - yy - zz;
        this.m01 = yx + wz;
        this.m02 = zx - wy;
        this.m03 = 0;
        this.m04 = yx - wz;
        this.m05 = 1 - xx - zz;
        this.m06 = zy + wx;
        this.m07 = 0;
        this.m08 = zx + wy;
        this.m09 = zy - wx;
        this.m10 = 1 - xx - yy;
        this.m11 = 0;
        this.m12 = 0;
        this.m13 = 0;
        this.m14 = 0;
        this.m15 = 1;
        return this;
      }
    }]);

    return Mat4;
  }(_valueType.ValueType);

  _exports.Mat4 = Mat4;
  Mat4.IDENTITY = Object.freeze(new Mat4());
  var v3_1 = new _vec.Vec3();
  var m3_1 = new _mat.Mat3();

  _class.default.fastDefine('cc.Mat4', Mat4, {
    m00: 1,
    m01: 0,
    m02: 0,
    m03: 0,
    m04: 0,
    m05: 1,
    m06: 0,
    m07: 0,
    m08: 0,
    m09: 0,
    m10: 1,
    m11: 0,
    m12: 0,
    m13: 0,
    m14: 0,
    m15: 1
  });

  cc.Mat4 = Mat4;

  function mat4(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
    return new Mat4(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
  }

  cc.mat4 = mat4;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,