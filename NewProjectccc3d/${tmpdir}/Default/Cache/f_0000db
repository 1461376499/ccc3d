(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../core/components/index.js", "../../core/data/class-decorator.js", "../../core/event/index.js", "../../core/platform/index.js", "../../core/math/index.js", "./layout-component.js", "./scroll-bar-component.js", "./view-group-component.js", "../../core/scene-graph/node.js", "../../core/director.js", "../../core/scene-graph/node-enum.js", "../../core/default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../core/components/index.js"), require("../../core/data/class-decorator.js"), require("../../core/event/index.js"), require("../../core/platform/index.js"), require("../../core/math/index.js"), require("./layout-component.js"), require("./scroll-bar-component.js"), require("./view-group-component.js"), require("../../core/scene-graph/node.js"), require("../../core/director.js"), require("../../core/scene-graph/node-enum.js"), require("../../core/default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.classDecorator, global.index, global.index, global.index, global.layoutComponent, global.scrollBarComponent, global.viewGroupComponent, global.node, global.director, global.nodeEnum, global.defaultConstants);
    global.scrollViewComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _classDecorator, _index2, _index3, _index4, _layoutComponent, _scrollBarComponent, _viewGroupComponent, _node, _director, _nodeEnum, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ScrollViewComponent = _exports.EventType = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _class3, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  var NUMBER_OF_GATHERED_TOUCHES_FOR_MOVE_SPEED = 5;
  var OUT_OF_BOUNDARY_BREAKING_FACTOR = 0.05;
  var EPSILON = 1e-4;
  var TOLERANCE = 1e4;
  var MOVEMENT_FACTOR = 0.7;
  var ZERO = new _index4.Vec3();

  var _tempVec3 = new _index4.Vec3();

  var _tempVec3_1 = new _index4.Vec3();

  var _tempVec2 = new _index4.Vec2();

  var _tempVec2_1 = new _index4.Vec2();

  var quintEaseOut = function quintEaseOut(time) {
    time -= 1;
    return time * time * time * time * time + 1;
  };

  var getTimeInMilliseconds = function getTimeInMilliseconds() {
    var currentTime = new Date();
    return currentTime.getMilliseconds();
  };

  var eventMap = {
    'scroll-to-top': 0,
    'scroll-to-bottom': 1,
    'scroll-to-left': 2,
    'scroll-to-right': 3,
    'scrolling': 4,
    'bounce-bottom': 6,
    'bounce-left': 7,
    'bounce-right': 8,
    'bounce-top': 5,
    'scroll-ended': 9,
    'touch-up': 10,
    'scroll-ended-with-threshold': 11,
    'scroll-began': 12
  };
  /**
   * @en
   * Enum for ScrollView event type.
   *
   * @zh
   * 滚动视图事件类型
   */

  var EventType;
  /**
   * @en
   * Layout container for a view hierarchy that can be scrolled by the user,
   * allowing it to be larger than the physical display.
   *
   * @zh
   * 滚动视图组件。
   */

  _exports.EventType = EventType;

  (function (EventType) {
    EventType["SCROLL_TO_TOP"] = "scroll-to-top";
    EventType["SCROLL_TO_BOTTOM"] = "scroll-to-bottom";
    EventType["SCROLL_TO_LEFT"] = "scroll-to-left";
    EventType["SCROLL_TO_RIGHT"] = "scroll-to-right";
    EventType["SCROLL_BEGAN"] = "scroll-began";
    EventType["SCROLL_ENDED"] = "scroll-ended";
    EventType["BOUNCE_TOP"] = "bounce-top";
    EventType["BOUNCE_BOTTOM"] = "bounce-bottom";
    EventType["BOUNCE_LEFT"] = "bounce-left";
    EventType["BOUNCE_RIGHT"] = "bounce-right";
    EventType["SCROLLING"] = "scrolling";
    EventType["SCROLL_ENG_WITH_THRESHOLD"] = "scroll-ended-with-threshold";
    EventType["TOUCH_UP"] = "touch-up";
  })(EventType || (_exports.EventType = EventType = {}));

  var ScrollViewComponent = (_dec = (0, _classDecorator.ccclass)('cc.ScrollViewComponent'), _dec2 = (0, _classDecorator.help)('i18n:cc.ScrollViewComponent'), _dec3 = (0, _classDecorator.executionOrder)(110), _dec4 = (0, _classDecorator.menu)('UI/ScrollView'), _dec5 = (0, _classDecorator.property)({
    range: [0, 10],
    tooltip: '回弹持续的时间，0 表示将立即反弹',
    displayOrder: 0
  }), _dec6 = (0, _classDecorator.property)({
    range: [0, 1, 0.1],
    tooltip: '开启惯性后，在用户停止触摸后滚动多快停止，0 表示永不停止，1 表示立刻停止',
    displayOrder: 1
  }), _dec7 = (0, _classDecorator.property)({
    tooltip: '是否允许滚动内容超过边界，并在停止触摸后回弹',
    displayOrder: 2
  }), _dec8 = (0, _classDecorator.property)({
    tooltip: '是否开启滚动惯性',
    displayOrder: 3
  }), _dec9 = (0, _classDecorator.property)({
    type: _node.Node,
    tooltip: '可滚动展示内容的节点',
    displayOrder: 4
  }), _dec10 = (0, _classDecorator.property)({
    tooltip: '是否开启水平滚动',
    displayOrder: 5
  }), _dec11 = (0, _classDecorator.property)({
    type: _scrollBarComponent.ScrollBarComponent,
    tooltip: '水平滚动的 ScrollBar',
    displayOrder: 6
  }), _dec12 = (0, _classDecorator.property)({
    tooltip: '是否开启垂直滚动',
    displayOrder: 7
  }), _dec13 = (0, _classDecorator.property)({
    type: _scrollBarComponent.ScrollBarComponent,
    tooltip: '垂直滚动的 ScrollBar',
    displayOrder: 8
  }), _dec14 = (0, _classDecorator.property)({
    tooltip: '滚动行为是否会取消子节点上注册的触摸事件',
    displayOrder: 9
  }), _dec15 = (0, _classDecorator.property)({
    type: [_index.EventHandler],
    tooltip: '滚动视图的事件回调函数',
    displayOrder: 10
  }), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_ViewGroupComponent) {
    _inherits(ScrollViewComponent, _ViewGroupComponent);

    function ScrollViewComponent() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, ScrollViewComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ScrollViewComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _initializerDefineProperty(_this, "bounceDuration", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "brake", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "elastic", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "inertia", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "horizontal", _descriptor5, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "vertical", _descriptor6, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "cancelInnerEvents", _descriptor7, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "scrollEvents", _descriptor8, _assertThisInitialized(_this));

      _this._autoScrolling = false;
      _this._scrolling = false;

      _initializerDefineProperty(_this, "_content", _descriptor9, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_horizontalScrollBar", _descriptor10, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_verticalScrollBar", _descriptor11, _assertThisInitialized(_this));

      _this._topBoundary = 0;
      _this._bottomBoundary = 0;
      _this._leftBoundary = 0;
      _this._rightBoundary = 0;
      _this._touchMoveDisplacements = [];
      _this._touchMoveTimeDeltas = [];
      _this._touchMovePreviousTimestamp = 0;
      _this._touchMoved = false;
      _this._autoScrollAttenuate = false;
      _this._autoScrollStartPosition = new _index4.Vec3();
      _this._autoScrollTargetDelta = new _index4.Vec3();
      _this._autoScrollTotalTime = 0;
      _this._autoScrollAccumulatedTime = 0;
      _this._autoScrollCurrentlyOutOfBoundary = false;
      _this._autoScrollBraking = false;
      _this._autoScrollBrakingStartPosition = new _index4.Vec3();
      _this._outOfBoundaryAmount = new _index4.Vec3();
      _this._outOfBoundaryAmountDirty = true;
      _this._stopMouseWheel = false;
      _this._mouseWheelEventElapsedTime = 0.0;
      _this._isScrollEndedWithThresholdEventFired = false;
      _this._scrollEventEmitMask = 0;
      _this._isBouncing = false;
      _this._contentPos = new _index4.Vec3();
      _this._deltaPos = new _index4.Vec3();
      return _this;
    }

    _createClass(ScrollViewComponent, [{
      key: "scrollToBottom",

      /**
       * @en
       * Scroll the content to the bottom boundary of ScrollView.
       *
       * @zh
       * 视图内容将在规定时间内滚动到视图底部。
       *
       * @param timeInSecond - 滚动时间（s）。 如果超时，内容将立即跳到底部边界。
       * @param attenuated - 滚动加速是否衰减，默认为 true。
       * @example
       * ```typescript
       * // Scroll to the bottom of the view.
       * scrollView.scrollToBottom(0.1);
       * ```
       */
      value: function scrollToBottom(timeInSecond) {
        var attenuated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        var moveDelta = this._calculateMovePercentDelta({
          anchor: new _index4.Vec2(0, 0),
          applyToHorizontal: false,
          applyToVertical: true
        });

        if (timeInSecond) {
          this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
        } else {
          this._moveContent(moveDelta, true);
        }
      }
      /**
       * @en
       * Scroll the content to the top boundary of ScrollView.
       *
       * @zh
       * 视图内容将在规定时间内滚动到视图顶部。
       *
       * @param timeInSecond - 滚动时间（s）。 如果超时，内容将立即跳到顶部边界。
       * @param attenuated - 滚动加速是否衰减，默认为 true。
       * @example
       * ```typescript
       * // Scroll to the top of the view.
       * scrollView.scrollToTop(0.1);
       * ```
       */

    }, {
      key: "scrollToTop",
      value: function scrollToTop(timeInSecond) {
        var attenuated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        var moveDelta = this._calculateMovePercentDelta({
          anchor: new _index4.Vec2(0, 1),
          applyToHorizontal: false,
          applyToVertical: true
        });

        if (timeInSecond) {
          this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
        } else {
          this._moveContent(moveDelta);
        }
      }
      /**
       * @en
       * Scroll the content to the left boundary of ScrollView.
       *
       * @zh
       * 视图内容将在规定时间内滚动到视图左边。
       *
       * @param timeInSecond - 滚动时间（s）。 如果超时，内容将立即跳到左边边界。
       * @param attenuated - 滚动加速是否衰减，默认为 true。
       * @example
       * ```typescript
       * // Scroll to the left of the view.
       * scrollView.scrollToLeft(0.1);
       * ```
       */

    }, {
      key: "scrollToLeft",
      value: function scrollToLeft(timeInSecond) {
        var attenuated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        var moveDelta = this._calculateMovePercentDelta({
          anchor: new _index4.Vec2(0, 0),
          applyToHorizontal: true,
          applyToVertical: false
        });

        if (timeInSecond) {
          this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
        } else {
          this._moveContent(moveDelta);
        }
      }
      /**
       * @en
       * Scroll the content to the right boundary of ScrollView.
       *
       * @zh
       * 视图内容将在规定时间内滚动到视图右边。
       *
       * @param timeInSecond - 滚动时间（s）。 如果超时，内容将立即跳到右边边界。
       * @param attenuated - 滚动加速是否衰减，默认为 true。
       * @example
       * ```typescript
       * // Scroll to the right of the view.
       * scrollView.scrollToRight(0.1);
       * ```
       */

    }, {
      key: "scrollToRight",
      value: function scrollToRight(timeInSecond) {
        var attenuated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        var moveDelta = this._calculateMovePercentDelta({
          anchor: new _index4.Vec2(1, 0),
          applyToHorizontal: true,
          applyToVertical: false
        });

        if (timeInSecond) {
          this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
        } else {
          this._moveContent(moveDelta);
        }
      }
      /**
       * @en
       * Scroll the content to the top left boundary of ScrollView.
       *
       * @zh
       * 视图内容将在规定时间内滚动到视图左上角。
       *
       * @param timeInSecond - 滚动时间（s）。 如果超时，内容将立即跳到左上边边界。
       * @param attenuated - 滚动加速是否衰减，默认为 true。
       * @example
       * ```typescript
       * // Scroll to the upper left corner of the view.
       * scrollView.scrollToTopLeft(0.1);
       * ```
       */

    }, {
      key: "scrollToTopLeft",
      value: function scrollToTopLeft(timeInSecond) {
        var attenuated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        var moveDelta = this._calculateMovePercentDelta({
          anchor: new _index4.Vec2(0, 1),
          applyToHorizontal: true,
          applyToVertical: true
        });

        if (timeInSecond) {
          this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
        } else {
          this._moveContent(moveDelta);
        }
      }
      /**
       * @en
       * Scroll the content to the top right boundary of ScrollView.
       *
       * @zh
       * 视图内容将在规定时间内滚动到视图右上角。
       *
       * @param timeInSecond - 滚动时间（s）。 如果超时，内容将立即跳到右上边界。
       * @param attenuated - 滚动加速是否衰减，默认为 true。
       * @example
       * ```typescript
       * // Scroll to the top right corner of the view.
       * scrollView.scrollToTopRight(0.1);
       * ```
       */

    }, {
      key: "scrollToTopRight",
      value: function scrollToTopRight(timeInSecond) {
        var attenuated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        var moveDelta = this._calculateMovePercentDelta({
          anchor: new _index4.Vec2(1, 1),
          applyToHorizontal: true,
          applyToVertical: true
        });

        if (timeInSecond) {
          this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
        } else {
          this._moveContent(moveDelta);
        }
      }
      /**
       * @en
       * Scroll the content to the bottom left boundary of ScrollView.
       *
       * @zh
       * 视图内容将在规定时间内滚动到视图左下角。
       *
       * @param timeInSecond - 滚动时间（s）。 如果超时，内容将立即跳到左下边界。
       * @param attenuated - 滚动加速是否衰减，默认为 true。
       * @example
       * ```typescript
       * // Scroll to the lower left corner of the view.
       * scrollView.scrollToBottomLeft(0.1);
       * ```
       */

    }, {
      key: "scrollToBottomLeft",
      value: function scrollToBottomLeft(timeInSecond) {
        var attenuated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        var moveDelta = this._calculateMovePercentDelta({
          anchor: new _index4.Vec2(0, 0),
          applyToHorizontal: true,
          applyToVertical: true
        });

        if (timeInSecond) {
          this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
        } else {
          this._moveContent(moveDelta);
        }
      }
      /**
       * @en
       * Scroll the content to the bottom right boundary of ScrollView.
       *
       * @zh
       * 视图内容将在规定时间内滚动到视图右下角。
       *
       * @param timeInSecond - 滚动时间（s）。 如果超时，内容将立即跳到右边下边界。
       * @param attenuated - 滚动加速是否衰减，默认为 true。
       * @example
       * ```typescript
       * // Scroll to the lower right corner of the view.
       * scrollView.scrollToBottomRight(0.1);
       * ```
       */

    }, {
      key: "scrollToBottomRight",
      value: function scrollToBottomRight(timeInSecond) {
        var attenuated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        var moveDelta = this._calculateMovePercentDelta({
          anchor: new _index4.Vec2(1, 0),
          applyToHorizontal: true,
          applyToVertical: true
        });

        if (timeInSecond) {
          this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
        } else {
          this._moveContent(moveDelta);
        }
      }
      /**
       * @en
       * Scroll with an offset related to the ScrollView's top left origin, if timeInSecond is omitted, then it will jump to the specific offset immediately.
       *
       * @zh
       * 视图内容在规定时间内将滚动到 ScrollView 相对左上角原点的偏移位置, 如果 timeInSecond 参数不传，则立即滚动到指定偏移位置。
       *
       * @param offset - 指定移动偏移量。
       * @param timeInSecond - 滚动时间（s）。 如果超时，内容将立即跳到指定偏移量处。
       * @param attenuated - 滚动加速是否衰减，默认为 true。
       * @example
       * ```typescript
       * // Scroll to middle position in 0.1 second in x-axis
       * let maxScrollOffset = this.getMaxScrollOffset();
       * scrollView.scrollToOffset(new Vec3(maxScrollOffset.x / 2, 0, 0), 0.1);
       * ```
       */

    }, {
      key: "scrollToOffset",
      value: function scrollToOffset(offset, timeInSecond) {
        var attenuated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        var maxScrollOffset = this.getMaxScrollOffset();
        var anchor = new _index4.Vec2(0, 0); // if maxScrollOffset is 0, then always align the content's top left origin to the top left corner of its parent

        if (maxScrollOffset.x === 0) {
          anchor.x = 0;
        } else {
          anchor.x = offset.x / maxScrollOffset.x;
        }

        if (maxScrollOffset.y === 0) {
          anchor.y = 1;
        } else {
          anchor.y = (maxScrollOffset.y - offset.y) / maxScrollOffset.y;
        }

        this.scrollTo(anchor, timeInSecond, attenuated);
      }
      /**
       * @en
       * Get the positive offset value corresponds to the content's top left boundary.
       *
       * @zh
       * 获取滚动视图相对于左上角原点的当前滚动偏移。
       *
       * @return - 当前滚动偏移量。
       */

    }, {
      key: "getScrollOffset",
      value: function getScrollOffset() {
        var topDelta = this._getContentTopBoundary() - this._topBoundary;

        var leftDelta = this._getContentLeftBoundary() - this._leftBoundary;

        return new _index4.Vec3(leftDelta, topDelta, 0);
      }
      /**
       * @en
       * Get the maximize available  scroll offset.
       *
       * @zh
       * 获取滚动视图最大可以滚动的偏移量。
       *
       * @return - 最大可滚动偏移量。
       */

    }, {
      key: "getMaxScrollOffset",
      value: function getMaxScrollOffset() {
        var scrollSize = this.node._uiProps.uiTransformComp.contentSize;
        var contentSize = this._content._uiProps.uiTransformComp.contentSize;
        var horizontalMaximizeOffset = contentSize.width - scrollSize.width;
        var verticalMaximizeOffset = contentSize.height - scrollSize.height;
        horizontalMaximizeOffset = horizontalMaximizeOffset >= 0 ? horizontalMaximizeOffset : 0;
        verticalMaximizeOffset = verticalMaximizeOffset >= 0 ? verticalMaximizeOffset : 0;
        return new _index4.Vec3(horizontalMaximizeOffset, verticalMaximizeOffset, 0);
      }
      /**
       * @en
       * Scroll the content to the horizontal percent position of ScrollView.
       *
       * @zh
       * 视图内容在规定时间内将滚动到 ScrollView 水平方向的百分比位置上。
       *
       * @param percent - 0 - 之间的百分比。
       * @param timeInSecond - 滚动时间（s）。 如果超时，内容将立即跳到指定水平百分比位置。
       * @param attenuated - 滚动加速是否衰减，默认为 true。
       * @example
       * ```typescript
       * // Scroll to middle position.
       * scrollView.scrollToBottomRight(0.5, 0.1);
       * ```
       */

    }, {
      key: "scrollToPercentHorizontal",
      value: function scrollToPercentHorizontal(percent, timeInSecond, attenuated) {
        var moveDelta = this._calculateMovePercentDelta({
          anchor: new _index4.Vec2(percent, 0),
          applyToHorizontal: true,
          applyToVertical: false
        });

        if (timeInSecond) {
          this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
        } else {
          this._moveContent(moveDelta);
        }
      }
      /**
       * @en
       * Scroll the content to the percent position of ScrollView in any direction.
       *
       * @zh
       * 视图内容在规定时间内进行垂直方向和水平方向的滚动，并且滚动到指定百分比位置上。
       *
       * @param anchor - 在 new Vec2(0,0) and new Vec2(1,1) 上取差值的一个点。
       * @param timeInSecond - 滚动时间（s）。 如果超时，内容将立即跳到指定水平或垂直百分比位置。
       * @param attenuated - 滚动加速是否衰减，默认为 true。
       * @example
       * ```typescript
       * // Vertical scroll to the bottom of the view.
       * scrollView.scrollTo(new Vec2(0, 1), 0.1);
       *
       * // Horizontal scroll to view right.
       * scrollView.scrollTo(new Vec2(1, 0), 0.1);
       * ```
       */

    }, {
      key: "scrollTo",
      value: function scrollTo(anchor, timeInSecond, attenuated) {
        var moveDelta = this._calculateMovePercentDelta({
          anchor: new _index4.Vec2(anchor),
          applyToHorizontal: true,
          applyToVertical: true
        });

        if (timeInSecond) {
          this._startAutoScroll(moveDelta, timeInSecond, attenuated);
        } else {
          this._moveContent(moveDelta);
        }
      }
      /**
       * @en
       * Scroll the content to the vertical percent position of ScrollView.
       *
       * @zh
       * 视图内容在规定时间内滚动到 ScrollView 垂直方向的百分比位置上。
       *
       * @param percent - 0 - 1 之间的百分比。
       * @param timeInSecond - 滚动时间（s）。 如果超时，内容将立即跳到指定垂直百分比位置。
       * @param attenuated - 滚动加速是否衰减，默认为 true。
       * @example
       * ```typescript
       * scrollView.scrollToPercentVertical(0.5, 0.1);
       * ```
       */

    }, {
      key: "scrollToPercentVertical",
      value: function scrollToPercentVertical(percent, timeInSecond, attenuated) {
        var moveDelta = this._calculateMovePercentDelta({
          anchor: new _index4.Vec2(0, percent),
          applyToHorizontal: false,
          applyToVertical: true
        });

        if (timeInSecond) {
          this._startAutoScroll(moveDelta, timeInSecond, attenuated);
        } else {
          this._moveContent(moveDelta);
        }
      }
      /**
       * @en
       * Stop auto scroll immediately.
       *
       * @zh
       * 停止自动滚动, 调用此 API 可以让 ScrollView 立即停止滚动。
       */

    }, {
      key: "stopAutoScroll",
      value: function stopAutoScroll() {
        this._autoScrolling = false;
        this._autoScrollAccumulatedTime = this._autoScrollTotalTime;
      }
      /**
       * @en
       * Modify the content position.
       *
       * @zh
       * 设置当前视图内容的坐标点。
       *
       * @param position - 当前视图坐标点.
       */

    }, {
      key: "setContentPosition",
      value: function setContentPosition(position) {
        var contentPos = this.getContentPosition();

        if (Math.abs(position.x - contentPos.x) < EPSILON && Math.abs(position.y - contentPos.y) < EPSILON) {
          return;
        }

        this._content.setPosition(position);

        this._outOfBoundaryAmountDirty = true;
      }
      /**
       * @en
       * Query the content's position in its parent space.
       *
       * @zh
       * 获取当前视图内容的坐标点。
       *
       * @returns - 当前视图内容的坐标点.
       */

    }, {
      key: "getContentPosition",
      value: function getContentPosition() {
        if (!this._content) {
          return ZERO;
        }

        this._contentPos.set(this._content.position);

        return this._contentPos;
      }
      /**
       * @en
       * Query whether the user is currently dragging the ScrollView to scroll it.
       *
       * @zh
       * 用户是否在拖拽当前滚动视图。
       *
       * @returns - 是否在拖拽当前滚动视图。
       */

    }, {
      key: "isScrolling",
      value: function isScrolling() {
        return this._scrolling;
      }
      /**
       * @en
       * Query whether the ScrollView is currently scrolling because of a bounceback or inertia slowdown.
       *
       * @zh
       * 当前滚动视图是否在惯性滚动。
       *
       * @returns - 滚动视图是否在惯性滚动。
       */

    }, {
      key: "isAutoScrolling",
      value: function isAutoScrolling() {
        return this._autoScrolling;
      }
    }, {
      key: "getScrollEndedEventTiming",
      value: function getScrollEndedEventTiming() {
        return EPSILON;
      }
    }, {
      key: "start",
      value: function start() {
        this._calculateBoundary(); // Because widget component will adjust content position and scrollView position is correct after visit
        // So this event could make sure the content is on the correct position after loading.


        if (this._content) {
          _director.director.once(_director.Director.EVENT_BEFORE_DRAW, this._adjustContentOutOfBoundary, this);
        }
      }
    }, {
      key: "onEnable",
      value: function onEnable() {
        if (!_defaultConstants.EDITOR) {
          this._registerEvent();

          if (this.content) {
            this.content.on(_node.Node.EventType.SIZE_CHANGED, this._calculateBoundary, this);
            this.content.on(_node.Node.EventType.TRANSFORM_CHANGED, this._scaleChanged, this);

            if (this.view) {
              this.view.on(_node.Node.EventType.TRANSFORM_CHANGED, this._scaleChanged, this);
              this.view.on(_node.Node.EventType.SIZE_CHANGED, this._calculateBoundary, this);
            }
          }

          this._calculateBoundary();
        }

        this._showScrollBar();
      }
    }, {
      key: "update",
      value: function update(dt) {
        if (this._autoScrolling) {
          this._processAutoScrolling(dt);
        }
      }
    }, {
      key: "onDisable",
      value: function onDisable() {
        if (!_defaultConstants.EDITOR) {
          this._unregisterEvent();

          if (this.content) {
            this.content.off(_node.Node.EventType.SIZE_CHANGED, this._calculateBoundary, this);
            this.content.off(_node.Node.EventType.TRANSFORM_CHANGED, this._scaleChanged, this);

            if (this.view) {
              this.view.off(_node.Node.EventType.TRANSFORM_CHANGED, this._scaleChanged, this);
              this.view.off(_node.Node.EventType.SIZE_CHANGED, this._calculateBoundary, this);
            }
          }
        }

        this._hideScrollBar();

        this.stopAutoScroll();
      } // private methods

    }, {
      key: "_registerEvent",
      value: function _registerEvent() {
        this.node.on(_node.Node.EventType.TOUCH_START, this._onTouchBegan, this, true);
        this.node.on(_node.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this, true);
        this.node.on(_node.Node.EventType.TOUCH_END, this._onTouchEnded, this, true);
        this.node.on(_node.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this, true);
        this.node.on(_node.Node.EventType.MOUSE_WHEEL, this._onMouseWheel, this, true);
      }
    }, {
      key: "_unregisterEvent",
      value: function _unregisterEvent() {
        this.node.off(_node.Node.EventType.TOUCH_START, this._onTouchBegan, this, true);
        this.node.off(_node.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this, true);
        this.node.off(_node.Node.EventType.TOUCH_END, this._onTouchEnded, this, true);
        this.node.off(_node.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this, true);
        this.node.off(_node.Node.EventType.MOUSE_WHEEL, this._onMouseWheel, this, true);
      }
    }, {
      key: "_onMouseWheel",
      value: function _onMouseWheel(event, captureListeners) {
        if (!this.enabledInHierarchy) {
          return;
        }

        if (this._hasNestedViewGroup(event, captureListeners)) {
          return;
        }

        var deltaMove = new _index4.Vec3();
        var wheelPrecision = -0.1;
        var scrollY = event.getScrollY();

        if (this.vertical) {
          deltaMove.set(0, scrollY * wheelPrecision, 0);
        } else if (this.horizontal) {
          deltaMove.set(scrollY * wheelPrecision, 0, 0);
        }

        this._mouseWheelEventElapsedTime = 0;

        this._processDeltaMove(deltaMove);

        if (!this._stopMouseWheel) {
          this._handlePressLogic();

          this.schedule(this._checkMouseWheel, 1.0 / 60, NaN, 0);
          this._stopMouseWheel = true;
        }

        this._stopPropagationIfTargetIsMe(event);
      }
    }, {
      key: "_onTouchBegan",
      value: function _onTouchBegan(event, captureListeners) {
        if (!this.enabledInHierarchy || !this._content) {
          return;
        }

        if (this._hasNestedViewGroup(event, captureListeners)) {
          return;
        } // let touch = event.touch;


        if (this._content) {
          this._handlePressLogic();
        }

        this._touchMoved = false;

        this._stopPropagationIfTargetIsMe(event);
      }
    }, {
      key: "_onTouchMoved",
      value: function _onTouchMoved(event, captureListeners) {
        if (!this.enabledInHierarchy || !this._content) {
          return;
        }

        if (this._hasNestedViewGroup(event, captureListeners)) {
          return;
        }

        var touch = event.touch;

        if (this._content) {
          this._handleMoveLogic(touch);
        } // Do not prevent touch events in inner nodes


        if (!this.cancelInnerEvents) {
          return;
        }

        var deltaMove = touch.getUILocation(_tempVec2);
        deltaMove.subtract(touch.getUIStartLocation(_tempVec2_1)); // FIXME: touch move delta should be calculated by DPI.

        if (deltaMove.length() > 7) {
          if (!this._touchMoved && event.target !== this.node) {
            // Simulate touch cancel for target node
            var cancelEvent = new _index3.EventTouch(event.getTouches(), event.bubbles);
            cancelEvent.type = _node.Node.EventType.TOUCH_CANCEL;
            cancelEvent.touch = event.touch;
            cancelEvent.simulate = true;
            event.target.dispatchEvent(cancelEvent);
            this._touchMoved = true;
          }
        }

        this._stopPropagationIfTargetIsMe(event);
      }
    }, {
      key: "_onTouchEnded",
      value: function _onTouchEnded(event, captureListeners) {
        if (!this.enabledInHierarchy || !this._content || !event) {
          return;
        }

        if (this._hasNestedViewGroup(event, captureListeners)) {
          return;
        }

        this._dispatchEvent(EventType.TOUCH_UP);

        var touch = event.touch;

        if (this._content) {
          this._handleReleaseLogic(touch);
        }

        if (this._touchMoved) {
          event.propagationStopped = true;
        } else {
          this._stopPropagationIfTargetIsMe(event);
        }
      }
    }, {
      key: "_onTouchCancelled",
      value: function _onTouchCancelled(event, captureListeners) {
        if (!this.enabledInHierarchy || !this._content) {
          return;
        }

        if (this._hasNestedViewGroup(event, captureListeners)) {
          return;
        } // Filter touch cancel event send from self


        if (event && !event.simulate) {
          var touch = event.touch;

          if (this._content) {
            this._handleReleaseLogic(touch);
          }
        }

        this._stopPropagationIfTargetIsMe(event);
      }
    }, {
      key: "_calculateBoundary",
      value: function _calculateBoundary() {
        if (this.content) {
          // refresh content size
          var layout = this.content.getComponent(_layoutComponent.LayoutComponent);

          if (layout && layout.enabledInHierarchy) {
            layout.updateLayout();
          }

          var viewSize = this.view._uiProps.uiTransformComp.contentSize;
          var anchorX = viewSize.width * this.view.anchorX;
          var anchorY = viewSize.height * this.view.anchorY;
          this._leftBoundary = -anchorX;
          this._bottomBoundary = -anchorY;
          this._rightBoundary = this._leftBoundary + viewSize.width;
          this._topBoundary = this._bottomBoundary + viewSize.height;

          this._moveContentToTopLeft(viewSize);
        }
      }
    }, {
      key: "_hasNestedViewGroup",
      value: function _hasNestedViewGroup(event, captureListeners) {
        if (!event || event.eventPhase !== _index2.Event.CAPTURING_PHASE) {
          return;
        }

        if (captureListeners) {
          // captureListeners are arranged from child to parent
          var _iterator = _createForOfIteratorHelper(captureListeners),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var listener = _step.value;
              var item = listener;

              if (this.node === item) {
                if (event.target && event.target.getComponent(_viewGroupComponent.ViewGroupComponent)) {
                  return true;
                }

                return false;
              }

              if (item.getComponent(_viewGroupComponent.ViewGroupComponent)) {
                return true;
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }

        return false;
      }
    }, {
      key: "_startInertiaScroll",
      value: function _startInertiaScroll(touchMoveVelocity) {
        var inertiaTotalMovement = new _index4.Vec3(touchMoveVelocity);
        inertiaTotalMovement.multiplyScalar(MOVEMENT_FACTOR);

        this._startAttenuatingAutoScroll(inertiaTotalMovement, touchMoveVelocity);
      }
    }, {
      key: "_calculateAttenuatedFactor",
      value: function _calculateAttenuatedFactor(distance) {
        if (this.brake <= 0) {
          return 1 - this.brake;
        } // attenuate formula from: http://learnopengl.com/#!Lighting/Light-casters


        return (1 - this.brake) * (1 / (1 + distance * 0.000014 + distance * distance * 0.000000008));
      }
    }, {
      key: "_startAttenuatingAutoScroll",
      value: function _startAttenuatingAutoScroll(deltaMove, initialVelocity) {
        var time = this._calculateAutoScrollTimeByInitialSpeed(initialVelocity.length());

        var targetDelta = new _index4.Vec3(deltaMove);
        targetDelta.normalize();
        var contentSize = this._content._uiProps.uiTransformComp.contentSize;
        var scrollViewSize = this.node._uiProps.uiTransformComp.contentSize;
        var totalMoveWidth = contentSize.width - scrollViewSize.width;
        var totalMoveHeight = contentSize.height - scrollViewSize.height;

        var attenuatedFactorX = this._calculateAttenuatedFactor(totalMoveWidth);

        var attenuatedFactorY = this._calculateAttenuatedFactor(totalMoveHeight);

        targetDelta.x = targetDelta.x * totalMoveWidth * (1 - this.brake) * attenuatedFactorX;
        targetDelta.y = targetDelta.y * totalMoveHeight * attenuatedFactorY * (1 - this.brake);
        targetDelta.z = 0;
        var originalMoveLength = deltaMove.length();
        var factor = targetDelta.length() / originalMoveLength;
        targetDelta.add(deltaMove);

        if (this.brake > 0 && factor > 7) {
          factor = Math.sqrt(factor);
          var a = new _index4.Vec3(deltaMove);
          a.multiplyScalar(factor);
          targetDelta.set(a);
          targetDelta.add(deltaMove);
        }

        if (this.brake > 0 && factor > 3) {
          factor = 3;
          time = time * factor;
        }

        if (this.brake === 0 && factor > 1) {
          time = time * factor;
        }

        this._startAutoScroll(targetDelta, time, true);
      }
    }, {
      key: "_calculateAutoScrollTimeByInitialSpeed",
      value: function _calculateAutoScrollTimeByInitialSpeed(initialSpeed) {
        return Math.sqrt(Math.sqrt(initialSpeed / 5));
      }
    }, {
      key: "_startAutoScroll",
      value: function _startAutoScroll(deltaMove, timeInSecond) {
        var attenuated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        var adjustedDeltaMove = this._flattenVectorByDirection(deltaMove);

        this._autoScrolling = true;
        this._autoScrollTargetDelta = adjustedDeltaMove;
        this._autoScrollAttenuate = attenuated;

        _index4.Vec3.copy(this._autoScrollStartPosition, this.getContentPosition());

        this._autoScrollTotalTime = timeInSecond;
        this._autoScrollAccumulatedTime = 0;
        this._autoScrollBraking = false;
        this._isScrollEndedWithThresholdEventFired = false;
        this._autoScrollBrakingStartPosition = new _index4.Vec3();

        var currentOutOfBoundary = this._getHowMuchOutOfBoundary();

        if (!currentOutOfBoundary.equals(ZERO, EPSILON)) {
          this._autoScrollCurrentlyOutOfBoundary = true;
        }
      }
    }, {
      key: "_calculateTouchMoveVelocity",
      value: function _calculateTouchMoveVelocity() {
        var totalTime = 0;
        totalTime = this._touchMoveTimeDeltas.reduce(function (a, b) {
          return a + b;
        }, totalTime);

        if (totalTime <= 0 || totalTime >= 0.5) {
          return new _index4.Vec3();
        }

        var totalMovement = new _index4.Vec3();
        totalMovement = this._touchMoveDisplacements.reduce(function (a, b) {
          a.add(b);
          return a;
        }, totalMovement);
        return new _index4.Vec3(totalMovement.x * (1 - this.brake) / totalTime, totalMovement.y * (1 - this.brake) / totalTime, 0);
      }
    }, {
      key: "_flattenVectorByDirection",
      value: function _flattenVectorByDirection(vector) {
        var result = vector;
        result.x = this.horizontal ? result.x : 0;
        result.y = this.vertical ? result.y : 0;
        return result;
      }
    }, {
      key: "_moveContent",
      value: function _moveContent(deltaMove, canStartBounceBack) {
        var adjustedMove = this._flattenVectorByDirection(deltaMove);

        _tempVec3.set(this.getContentPosition());

        _tempVec3.add(adjustedMove);

        _tempVec3.set(Math.floor(_tempVec3.x * TOLERANCE) * EPSILON, Math.floor(_tempVec3.y * TOLERANCE) * EPSILON, _tempVec3.z);

        this.setContentPosition(_tempVec3);

        var outOfBoundary = this._getHowMuchOutOfBoundary();

        this._updateScrollBar(outOfBoundary);

        if (this.elastic && canStartBounceBack) {
          this._startBounceBackIfNeeded();
        }
      }
    }, {
      key: "_getContentLeftBoundary",
      value: function _getContentLeftBoundary() {
        var contentPos = this.getContentPosition();
        return contentPos.x - this._content.anchorX * this._content.width;
      }
    }, {
      key: "_getContentRightBoundary",
      value: function _getContentRightBoundary() {
        return this._getContentLeftBoundary() + this._content.width;
      }
    }, {
      key: "_getContentTopBoundary",
      value: function _getContentTopBoundary() {
        return this._getContentBottomBoundary() + this._content.height;
      }
    }, {
      key: "_getContentBottomBoundary",
      value: function _getContentBottomBoundary() {
        var contentPos = this.getContentPosition();
        return contentPos.y - this._content.anchorY * this._content.height;
      }
    }, {
      key: "_getHowMuchOutOfBoundary",
      value: function _getHowMuchOutOfBoundary(addition) {
        addition = addition || new _index4.Vec3();

        if (addition.equals(ZERO, EPSILON) && !this._outOfBoundaryAmountDirty) {
          return this._outOfBoundaryAmount;
        }

        var outOfBoundaryAmount = new _index4.Vec3();

        if (this._getContentLeftBoundary() + addition.x > this._leftBoundary) {
          outOfBoundaryAmount.x = this._leftBoundary - (this._getContentLeftBoundary() + addition.x);
        } else if (this._getContentRightBoundary() + addition.x < this._rightBoundary) {
          outOfBoundaryAmount.x = this._rightBoundary - (this._getContentRightBoundary() + addition.x);
        }

        if (this._getContentTopBoundary() + addition.y < this._topBoundary) {
          outOfBoundaryAmount.y = this._topBoundary - (this._getContentTopBoundary() + addition.y);
        } else if (this._getContentBottomBoundary() + addition.y > this._bottomBoundary) {
          outOfBoundaryAmount.y = this._bottomBoundary - (this._getContentBottomBoundary() + addition.y);
        }

        if (addition.equals(ZERO, EPSILON)) {
          this._outOfBoundaryAmount = outOfBoundaryAmount;
          this._outOfBoundaryAmountDirty = false;
        }

        outOfBoundaryAmount = this._clampDelta(outOfBoundaryAmount);
        return outOfBoundaryAmount;
      }
    }, {
      key: "_updateScrollBar",
      value: function _updateScrollBar(outOfBoundary) {
        if (this._horizontalScrollBar) {
          this._horizontalScrollBar.onScroll(outOfBoundary);
        }

        if (this.verticalScrollBar) {
          this.verticalScrollBar.onScroll(outOfBoundary);
        }
      }
    }, {
      key: "_onScrollBarTouchBegan",
      value: function _onScrollBarTouchBegan() {
        if (this._horizontalScrollBar) {
          this._horizontalScrollBar.onTouchBegan();
        }

        if (this.verticalScrollBar) {
          this.verticalScrollBar.onTouchBegan();
        }
      }
    }, {
      key: "_onScrollBarTouchEnded",
      value: function _onScrollBarTouchEnded() {
        if (this._horizontalScrollBar) {
          this._horizontalScrollBar.onTouchEnded();
        }

        if (this.verticalScrollBar) {
          this.verticalScrollBar.onTouchEnded();
        }
      }
    }, {
      key: "_dispatchEvent",
      value: function _dispatchEvent(event) {
        if (event === EventType.SCROLL_ENDED) {
          this._scrollEventEmitMask = 0;
        } else if (event === EventType.SCROLL_TO_TOP || event === EventType.SCROLL_TO_BOTTOM || event === EventType.SCROLL_TO_LEFT || event === EventType.SCROLL_TO_RIGHT) {
          var flag = 1 << eventMap[event];

          if (this._scrollEventEmitMask & flag) {
            return;
          } else {
            this._scrollEventEmitMask |= flag;
          }
        }

        _index.EventHandler.emitEvents(this.scrollEvents, this, eventMap[event]);

        this.node.emit(event, this);
      }
    }, {
      key: "_adjustContentOutOfBoundary",
      value: function _adjustContentOutOfBoundary() {
        if (!this._content) {
          return;
        }

        this._outOfBoundaryAmountDirty = true;

        if (this._isOutOfBoundary()) {
          var outOfBoundary = this._getHowMuchOutOfBoundary();

          _tempVec3.set(this.getContentPosition());

          _tempVec3.add(outOfBoundary);

          if (this._content) {
            this._content.setPosition(_tempVec3);

            this._updateScrollBar(ZERO);
          }
        }
      }
    }, {
      key: "_hideScrollBar",
      value: function _hideScrollBar() {
        if (this._horizontalScrollBar) {
          this._horizontalScrollBar.hide();
        }

        if (this._verticalScrollBar) {
          this._verticalScrollBar.hide();
        }
      }
    }, {
      key: "_showScrollBar",
      value: function _showScrollBar() {
        if (this._horizontalScrollBar) {
          this._horizontalScrollBar.show();
        }

        if (this._verticalScrollBar) {
          this._verticalScrollBar.show();
        }
      } // This is for ScrollView as children of a Button

    }, {
      key: "_stopPropagationIfTargetIsMe",
      value: function _stopPropagationIfTargetIsMe(event) {
        if (event.eventPhase === _index2.Event.AT_TARGET && event.target === this.node) {
          event.propagationStopped = true;
        }
      }
    }, {
      key: "_processDeltaMove",
      value: function _processDeltaMove(deltaMove) {
        this._scrollChildren(deltaMove);

        this._gatherTouchMove(deltaMove);
      }
    }, {
      key: "_handleMoveLogic",
      value: function _handleMoveLogic(touch) {
        this._deltaPos.set(this._getLocalAxisAlignDelta(touch));

        this._processDeltaMove(this._deltaPos);
      }
    }, {
      key: "_handleReleaseLogic",
      value: function _handleReleaseLogic(touch) {
        this._deltaPos.set(this._getLocalAxisAlignDelta(touch));

        this._gatherTouchMove(this._deltaPos);

        this._processInertiaScroll();

        if (this._scrolling) {
          this._scrolling = false;

          if (!this._autoScrolling) {
            this._dispatchEvent(EventType.SCROLL_ENDED);
          }
        }
      }
    }, {
      key: "_getLocalAxisAlignDelta",
      value: function _getLocalAxisAlignDelta(touch) {
        var uiTransformComp = this.node._uiProps.uiTransformComp;
        var vec = new _index4.Vec3();

        if (uiTransformComp) {
          touch.getUILocation(_tempVec2);
          touch.getUIPreviousLocation(_tempVec2_1);

          _tempVec3.set(_tempVec2.x, _tempVec2.y, 0);

          _tempVec3_1.set(_tempVec2_1.x, _tempVec2_1.y, 0);

          uiTransformComp.convertToNodeSpaceAR(_tempVec3, _tempVec3);
          uiTransformComp.convertToNodeSpaceAR(_tempVec3_1, _tempVec3_1);

          _index4.Vec3.subtract(vec, _tempVec3, _tempVec3_1);
        }

        return vec;
      }
    }, {
      key: "_scrollChildren",
      value: function _scrollChildren(deltaMove) {
        deltaMove = this._clampDelta(deltaMove);
        var realMove = deltaMove;
        var outOfBoundary;

        if (this.elastic) {
          outOfBoundary = this._getHowMuchOutOfBoundary();
          realMove.x *= outOfBoundary.x === 0 ? 1 : 0.5;
          realMove.y *= outOfBoundary.y === 0 ? 1 : 0.5;
        }

        if (!this.elastic) {
          outOfBoundary = this._getHowMuchOutOfBoundary(realMove);
          realMove.add(outOfBoundary);
        }

        var scrollEventType;
        var pos = this._content.position;

        if (realMove.y > 0) {
          // up
          var icBottomPos = pos.y - this._content.anchorY * this._content.height;

          if (icBottomPos + realMove.y >= this._bottomBoundary) {
            scrollEventType = EventType.SCROLL_TO_BOTTOM;
          }
        } else if (realMove.y < 0) {
          // down
          var icTopPos = pos.y - this._content.anchorY * this._content.height + this._content.height;

          if (icTopPos + realMove.y <= this._topBoundary) {
            scrollEventType = EventType.SCROLL_TO_TOP;
          }
        } else if (realMove.x < 0) {
          // left
          var icRightPos = pos.x - this._content.anchorX * this._content.width + this._content.width;

          if (icRightPos + realMove.x <= this._rightBoundary) {
            scrollEventType = EventType.SCROLL_TO_RIGHT;
          }
        } else if (realMove.x > 0) {
          // right
          var icLeftPos = pos.x - this._content.anchorX * this._content.width;

          if (icLeftPos + realMove.x >= this._leftBoundary) {
            scrollEventType = EventType.SCROLL_TO_LEFT;
          }
        }

        this._moveContent(realMove, false);

        if (realMove.x !== 0 || realMove.y !== 0) {
          if (!this._scrolling) {
            this._scrolling = true;

            this._dispatchEvent(EventType.SCROLL_BEGAN);
          }

          this._dispatchEvent(EventType.SCROLLING);
        }

        if (scrollEventType && scrollEventType.length > 0) {
          this._dispatchEvent(scrollEventType);
        }
      }
    }, {
      key: "_handlePressLogic",
      value: function _handlePressLogic() {
        if (this._autoScrolling) {
          this._dispatchEvent(EventType.SCROLL_ENDED);
        }

        this._autoScrolling = false;
        this._isBouncing = false;
        this._touchMovePreviousTimestamp = getTimeInMilliseconds();
        this._touchMoveDisplacements.length = 0;
        this._touchMoveTimeDeltas.length = 0;

        this._onScrollBarTouchBegan();
      }
    }, {
      key: "_clampDelta",
      value: function _clampDelta(delta) {
        var contentSize = this._content._uiProps.uiTransformComp.contentSize;
        var scrollViewSize = this.node._uiProps.uiTransformComp.contentSize;

        if (contentSize.width < scrollViewSize.width) {
          delta.x = 0;
        }

        if (contentSize.height < scrollViewSize.height) {
          delta.y = 0;
        }

        return delta;
      }
    }, {
      key: "_gatherTouchMove",
      value: function _gatherTouchMove(delta) {
        var clampDt = delta.clone();

        this._clampDelta(clampDt);

        while (this._touchMoveDisplacements.length >= NUMBER_OF_GATHERED_TOUCHES_FOR_MOVE_SPEED) {
          this._touchMoveDisplacements.shift();

          this._touchMoveTimeDeltas.shift();
        }

        this._touchMoveDisplacements.push(clampDt);

        var timeStamp = getTimeInMilliseconds();

        this._touchMoveTimeDeltas.push((timeStamp - this._touchMovePreviousTimestamp) / 1000);

        this._touchMovePreviousTimestamp = timeStamp;
      }
    }, {
      key: "_startBounceBackIfNeeded",
      value: function _startBounceBackIfNeeded() {
        if (!this.elastic) {
          return false;
        }

        var bounceBackAmount = this._getHowMuchOutOfBoundary();

        bounceBackAmount = this._clampDelta(bounceBackAmount);

        if (bounceBackAmount.equals(ZERO, EPSILON)) {
          return false;
        }

        var bounceBackTime = Math.max(this.bounceDuration, 0);

        this._startAutoScroll(bounceBackAmount, bounceBackTime, true);

        if (!this._isBouncing) {
          if (bounceBackAmount.y > 0) {
            this._dispatchEvent(EventType.BOUNCE_TOP);
          }

          if (bounceBackAmount.y < 0) {
            this._dispatchEvent(EventType.BOUNCE_BOTTOM);
          }

          if (bounceBackAmount.x > 0) {
            this._dispatchEvent(EventType.BOUNCE_RIGHT);
          }

          if (bounceBackAmount.x < 0) {
            this._dispatchEvent(EventType.BOUNCE_LEFT);
          }

          this._isBouncing = true;
        }

        return true;
      }
    }, {
      key: "_processInertiaScroll",
      value: function _processInertiaScroll() {
        var bounceBackStarted = this._startBounceBackIfNeeded();

        if (!bounceBackStarted && this.inertia) {
          var touchMoveVelocity = this._calculateTouchMoveVelocity();

          if (!touchMoveVelocity.equals(_tempVec3, EPSILON) && this.brake < 1) {
            this._startInertiaScroll(touchMoveVelocity);
          }
        }

        this._onScrollBarTouchEnded();
      }
    }, {
      key: "_isOutOfBoundary",
      value: function _isOutOfBoundary() {
        var outOfBoundary = this._getHowMuchOutOfBoundary();

        return !outOfBoundary.equals(ZERO, EPSILON);
      }
    }, {
      key: "_isNecessaryAutoScrollBrake",
      value: function _isNecessaryAutoScrollBrake() {
        if (this._autoScrollBraking) {
          return true;
        }

        if (this._isOutOfBoundary()) {
          if (!this._autoScrollCurrentlyOutOfBoundary) {
            this._autoScrollCurrentlyOutOfBoundary = true;
            this._autoScrollBraking = true;
            this._autoScrollBrakingStartPosition = this.getContentPosition();
            return true;
          }
        } else {
          this._autoScrollCurrentlyOutOfBoundary = false;
        }

        return false;
      }
    }, {
      key: "_processAutoScrolling",
      value: function _processAutoScrolling(dt) {
        var isAutoScrollBrake = this._isNecessaryAutoScrollBrake();

        var brakingFactor = isAutoScrollBrake ? OUT_OF_BOUNDARY_BREAKING_FACTOR : 1;
        this._autoScrollAccumulatedTime += dt * (1 / brakingFactor);
        var percentage = Math.min(1, this._autoScrollAccumulatedTime / this._autoScrollTotalTime);

        if (this._autoScrollAttenuate) {
          percentage = quintEaseOut(percentage);
        }

        var a = new _index4.Vec3(this._autoScrollTargetDelta);
        a.multiplyScalar(percentage);
        var newPosition = new _index4.Vec3(this._autoScrollStartPosition);
        newPosition.add(a);
        var reachedEnd = Math.abs(percentage - 1) <= EPSILON;
        var fireEvent = Math.abs(percentage - 1) <= this.getScrollEndedEventTiming();

        if (fireEvent && !this._isScrollEndedWithThresholdEventFired) {
          this._dispatchEvent(EventType.SCROLL_ENG_WITH_THRESHOLD);

          this._isScrollEndedWithThresholdEventFired = true;
        }

        if (this.elastic) {
          var brakeOffsetPosition = new _index4.Vec3(newPosition);
          brakeOffsetPosition.subtract(this._autoScrollBrakingStartPosition);

          if (isAutoScrollBrake) {
            brakeOffsetPosition.multiplyScalar(brakingFactor);
          }

          newPosition.set(this._autoScrollBrakingStartPosition);
          newPosition.add(brakeOffsetPosition);
        } else {
          var moveDelta = new _index4.Vec3(newPosition);
          moveDelta.subtract(this.getContentPosition());

          var outOfBoundary = this._getHowMuchOutOfBoundary(moveDelta);

          if (!outOfBoundary.equals(ZERO, EPSILON)) {
            newPosition.add(outOfBoundary);
            reachedEnd = true;
          }
        }

        if (reachedEnd) {
          this._autoScrolling = false;
        }

        var deltaMove = new _index4.Vec3(newPosition);
        deltaMove.subtract(this.getContentPosition());

        this._moveContent(this._clampDelta(deltaMove), reachedEnd);

        this._dispatchEvent(EventType.SCROLLING);

        if (!this._autoScrolling) {
          this._isBouncing = false;
          this._scrolling = false;

          this._dispatchEvent(EventType.SCROLL_ENDED);
        }
      }
    }, {
      key: "_checkMouseWheel",
      value: function _checkMouseWheel(dt) {
        var currentOutOfBoundary = this._getHowMuchOutOfBoundary();

        var maxElapsedTime = 0.1;

        if (!currentOutOfBoundary.equals(ZERO, EPSILON)) {
          this._processInertiaScroll();

          this.unschedule(this._checkMouseWheel);
          this._stopMouseWheel = false;
          return;
        }

        this._mouseWheelEventElapsedTime += dt; // mouse wheel event is ended

        if (this._mouseWheelEventElapsedTime > maxElapsedTime) {
          this._onScrollBarTouchEnded();

          this.unschedule(this._checkMouseWheel);
          this._stopMouseWheel = false;
        }
      }
    }, {
      key: "_calculateMovePercentDelta",
      value: function _calculateMovePercentDelta(options) {
        var anchor = options.anchor;
        var applyToHorizontal = options.applyToHorizontal;
        var applyToVertical = options.applyToVertical;

        this._calculateBoundary();

        anchor.clampf(new _index4.Vec2(0, 0), new _index4.Vec2(1, 1));
        var scrollSize = this.node._uiProps.uiTransformComp.contentSize;
        var contentSize = this._content._uiProps.uiTransformComp.contentSize;

        var bottomDelta = this._getContentBottomBoundary() - this._bottomBoundary;

        bottomDelta = -bottomDelta;

        var leftDelta = this._getContentLeftBoundary() - this._leftBoundary;

        leftDelta = -leftDelta;
        var moveDelta = new _index4.Vec3();
        var totalScrollDelta = 0;

        if (applyToHorizontal) {
          totalScrollDelta = contentSize.width - scrollSize.width;
          moveDelta.x = leftDelta - totalScrollDelta * anchor.x;
        }

        if (applyToVertical) {
          totalScrollDelta = contentSize.height - scrollSize.height;
          moveDelta.y = bottomDelta - totalScrollDelta * anchor.y;
        }

        return moveDelta;
      }
    }, {
      key: "_moveContentToTopLeft",
      value: function _moveContentToTopLeft(scrollViewSize) {
        var contentSize = this._content._uiProps.uiTransformComp.contentSize;

        var bottomDelta = this._getContentBottomBoundary() - this._bottomBoundary;

        bottomDelta = -bottomDelta;
        var moveDelta = new _index4.Vec3();
        var totalScrollDelta = 0;

        var leftDelta = this._getContentLeftBoundary() - this._leftBoundary;

        leftDelta = -leftDelta; // 是否限制在上视区上边

        if (contentSize.height < scrollViewSize.height) {
          totalScrollDelta = contentSize.height - scrollViewSize.height;
          moveDelta.y = bottomDelta - totalScrollDelta;

          if (this.verticalScrollBar) {
            this.verticalScrollBar.hide();
          }
        } else {
          if (this.verticalScrollBar) {
            this.verticalScrollBar.show();
          }
        } // 是否限制在上视区左边


        if (contentSize.width < scrollViewSize.width) {
          totalScrollDelta = contentSize.width - scrollViewSize.width;
          moveDelta.x = leftDelta;

          if (this._horizontalScrollBar) {
            this._horizontalScrollBar.hide();
          }
        } else {
          if (this._horizontalScrollBar) {
            this._horizontalScrollBar.show();
          }
        }

        this._moveContent(moveDelta);

        this._adjustContentOutOfBoundary();
      }
    }, {
      key: "_scaleChanged",
      value: function _scaleChanged(value) {
        if (value === _nodeEnum.TransformBit.SCALE) {
          this._calculateBoundary();
        }
      }
    }, {
      key: "content",

      /**
       * @en
       * This is a reference to the UI element to be scrolled.
       *
       * @zh
       * 可滚动展示内容的节点。
       */
      get: function get() {
        return this._content;
      },
      set: function set(value) {
        if (this._content === value) {
          return;
        }

        this._content = value;

        this._calculateBoundary();
      }
      /**
       * @en
       * Enable horizontal scroll.
       *
       * @zh
       * 是否开启水平滚动。
       */

    }, {
      key: "horizontalScrollBar",

      /**
       * @en
       * The horizontal scrollbar reference.
       * @zh
       * 水平滚动的 ScrollBar。
       */
      get: function get() {
        return this._horizontalScrollBar;
      },
      set: function set(value) {
        if (this._horizontalScrollBar === value) {
          return;
        }

        this._horizontalScrollBar = value;

        if (this._horizontalScrollBar) {
          this._horizontalScrollBar.setScrollView(this);

          this._updateScrollBar(ZERO);
        }
      }
      /**
       * @en
       * Enable vertical scroll.
       *
       * @zh
       * 是否开启垂直滚动。
       */

    }, {
      key: "verticalScrollBar",

      /**
       * @en
       * The vertical scrollbar reference.
       *
       * @zh
       * 垂直滚动的 ScrollBar。
       */
      get: function get() {
        return this._verticalScrollBar;
      },
      set: function set(value) {
        if (this._verticalScrollBar === value) {
          return;
        }

        this._verticalScrollBar = value;

        if (this._verticalScrollBar) {
          this._verticalScrollBar.setScrollView(this);

          this._updateScrollBar(ZERO);
        }
      }
      /**
       * @en
       * If cancelInnerEvents is set to true, the scroll behavior will cancel touch events on inner content nodes
       * It's set to true by default.
       *
       * @zh
       * 如果这个属性被设置为 true，那么滚动行为会取消子节点上注册的触摸事件，默认被设置为 true。<br/>
       * 注意，子节点上的 touchstart 事件仍然会触发，触点移动距离非常短的情况下 touchmove 和 touchend 也不会受影响。
       */

    }, {
      key: "view",
      get: function get() {
        if (!this._content) {
          return null;
        }

        return this._content.parent;
      }
    }]);

    return ScrollViewComponent;
  }(_viewGroupComponent.ViewGroupComponent), _class3.EventType = EventType, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bounceDuration", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 1;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "brake", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0.5;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "elastic", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "inertia", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "content", [_dec9], Object.getOwnPropertyDescriptor(_class2.prototype, "content"), _class2.prototype), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "horizontal", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "horizontalScrollBar", [_dec11], Object.getOwnPropertyDescriptor(_class2.prototype, "horizontalScrollBar"), _class2.prototype), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "vertical", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "verticalScrollBar", [_dec13], Object.getOwnPropertyDescriptor(_class2.prototype, "verticalScrollBar"), _class2.prototype), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "cancelInnerEvents", [_dec14], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "scrollEvents", [_dec15], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return [];
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "_content", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "_horizontalScrollBar", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "_verticalScrollBar", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  })), _class2)) || _class) || _class) || _class) || _class);
  _exports.ScrollViewComponent = ScrollViewComponent;
  cc.ScrollViewComponent = ScrollViewComponent;
  /**
   * @en
   * Note: This event is emitted from the node to which the component belongs.
   * @zh
   * 注意：此事件是从该组件所属的 Node 上面派发出来的，需要用 node.on 来监听。
   * @event scroll-to-top
   * @param {Event.EventCustom} event
   * @param {ScrollView} scrollView - The ScrollView component.
   */

  /**
   * @en
   * Note: This event is emitted from the node to which the component belongs.
   * @zh
   * 注意：此事件是从该组件所属的 Node 上面派发出来的，需要用 node.on 来监听。
   * @event scroll-to-bottom
   * @param {Event.EventCustom} event
   * @param {ScrollView} scrollView - The ScrollView component.
   */

  /**
   * @en
   * Note: This event is emitted from the node to which the component belongs.
   * @zh
   * 注意：此事件是从该组件所属的 Node 上面派发出来的，需要用 node.on 来监听。
   * @event scroll-to-left
   * @param {Event.EventCustom} event
   * @param {ScrollView} scrollView - The ScrollView component.
   */

  /**
   * @en
   * Note: This event is emitted from the node to which the component belongs.
   * @zh
   * 注意：此事件是从该组件所属的 Node 上面派发出来的，需要用 node.on 来监听。
   * @event scroll-to-right
   * @param {Event.EventCustom} event
   * @param {ScrollView} scrollView - The ScrollView component.
   */

  /**
   * @en
   * Note: This event is emitted from the node to which the component belongs.
   * @zh
   * 注意：此事件是从该组件所属的 Node 上面派发出来的，需要用 node.on 来监听。
   * @event scrolling
   * @param {Event.EventCustom} event
   * @param {ScrollView} scrollView - The ScrollView component.
   */

  /**
   * @en
   * Note: This event is emitted from the node to which the component belongs.
   * @zh
   * 注意：此事件是从该组件所属的 Node 上面派发出来的，需要用 node.on 来监听。
   * @event bounce-bottom
   * @param {Event.EventCustom} event
   * @param {ScrollView} scrollView - The ScrollView component.
   */

  /**
   * @en
   * Note: This event is emitted from the node to which the component belongs.
   * @zh
   * 注意：此事件是从该组件所属的 Node 上面派发出来的，需要用 node.on 来监听。
   * @event bounce-top
   * @param {Event.EventCustom} event
   * @param {ScrollView} scrollView - The ScrollView component.
   */

  /**
   * @en
   * Note: This event is emitted from the node to which the component belongs.
   * @zh
   * 注意：此事件是从该组件所属的 Node 上面派发出来的，需要用 node.on 来监听。
   * @event bounce-left
   * @param {Event.EventCustom} event
   * @param {ScrollView} scrollView - The ScrollView component.
   */

  /**
   * @en
   * Note: This event is emitted from the node to which the component belongs.
   * @zh
   * 注意：此事件是从该组件所属的 Node 上面派发出来的，需要用 node.on 来监听。
   * @event bounce-right
   * @param {Event.EventCustom} event
   * @param {ScrollView} scrollView - The ScrollView component.
   */

  /**
   * @en
   * Note: This event is emitted from the node to which the component belongs.
   * @zh
   * 注意：此事件是从该组件所属的 Node 上面派发出来的，需要用 node.on 来监听。
   * @event scroll-ended
   * @param {Event.EventCustom} event
   * @param {ScrollView} scrollView - The ScrollView component.
   */

  /**
   * @en
   * Note: This event is emitted from the node to which the component belongs.
   * @zh
   * 注意：此事件是从该组件所属的 Node 上面派发出来的，需要用 node.on 来监听。
   * @event touch-up
   * @param {Event.EventCustom} event
   * @param {ScrollView} scrollView - The ScrollView component.
   */

  /**
   * @en
   * Note: This event is emitted from the node to which the component belongs.
   * @zh
   * 注意：此事件是从该组件所属的 Node 上面派发出来的，需要用 node.on 来监听。
   * @event scroll-began
   * @param {Event.EventCustom} event
   * @param {ScrollView} scrollView - The ScrollView component.
   */
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,