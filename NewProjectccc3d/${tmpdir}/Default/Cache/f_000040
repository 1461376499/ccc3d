(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../geometry/index.js", "../../gfx/define.js", "../../math/index.js", "../../memop/index.js", "../../scene-graph/layers.js", "./ambient.js", "./model.js", "./planar-shadows.js", "./skybox.js", "../../default-constants.js", "../../scene-graph/node-enum.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../geometry/index.js"), require("../../gfx/define.js"), require("../../math/index.js"), require("../../memop/index.js"), require("../../scene-graph/layers.js"), require("./ambient.js"), require("./model.js"), require("./planar-shadows.js"), require("./skybox.js"), require("../../default-constants.js"), require("../../scene-graph/node-enum.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.define, global.index, global.index, global.layers, global.ambient, global.model, global.planarShadows, global.skybox, global.defaultConstants, global.nodeEnum);
    global.renderScene = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _define, _index2, _index3, _layers, _ambient, _model, _planarShadows, _skybox, _defaultConstants, _nodeEnum) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RenderScene = void 0;

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var RenderScene = /*#__PURE__*/function () {
    _createClass(RenderScene, [{
      key: "root",
      get: function get() {
        return this._root;
      }
    }, {
      key: "name",
      get: function get() {
        return this._name;
      }
    }, {
      key: "cameras",
      get: function get() {
        return this._cameras;
      }
    }, {
      key: "ambient",
      get: function get() {
        return this._ambient;
      }
    }, {
      key: "skybox",
      get: function get() {
        return this._skybox;
      }
    }, {
      key: "planarShadows",
      get: function get() {
        return this._planarShadows;
      }
    }, {
      key: "mainLight",
      get: function get() {
        return this._mainLight;
      }
    }, {
      key: "sphereLights",
      get: function get() {
        return this._sphereLights;
      }
    }, {
      key: "spotLights",
      get: function get() {
        return this._spotLights;
      }
    }, {
      key: "models",
      get: function get() {
        return this._models;
      }
      /**
       * @zh
       * 获取 raycastAllCanvas 后的检测结果
       */

    }, {
      key: "rayResultCanvas",
      get: function get() {
        return resultCanvas;
      }
      /**
       * @zh
       * 获取 raycastAllModels 后的检测结果
       */

    }, {
      key: "rayResultModels",
      get: function get() {
        return resultModels;
      }
      /**
       * @zh
       * 获取 raycastAll 后的检测结果
       */

    }, {
      key: "rayResultAll",
      get: function get() {
        return resultAll;
      }
      /**
       * @zh
       * 获取 raycastSingleModel 后的检测结果
       */

    }, {
      key: "rayResultSingleModel",
      get: function get() {
        return resultSingleModel;
      }
    }], [{
      key: "registerCreateFunc",
      value: function registerCreateFunc(root) {
        root._createSceneFun = function (_root) {
          return new RenderScene(_root);
        };
      }
    }]);

    function RenderScene(root) {
      _classCallCheck(this, RenderScene);

      this._root = void 0;
      this._name = '';
      this._cameras = [];
      this._ambient = void 0;
      this._skybox = void 0;
      this._planarShadows = void 0;
      this._models = [];
      this._directionalLights = [];
      this._sphereLights = [];
      this._spotLights = [];
      this._mainLight = null;
      this._modelId = 0;
      this._root = root;
      this._ambient = new _ambient.Ambient(this);
      this._skybox = new _skybox.Skybox(this);
      this._planarShadows = new _planarShadows.PlanarShadows(this);
    }

    _createClass(RenderScene, [{
      key: "initialize",
      value: function initialize(info) {
        this._name = info.name;
        return true;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.removeCameras();
        this.removeSphereLights();
        this.removeSpotLights();
        this.removeModels();

        this._skybox.destroy();

        this._planarShadows.destroy();
      }
    }, {
      key: "addCamera",
      value: function addCamera(cam) {
        cam.attachToScene(this);

        this._cameras.push(cam);
      }
    }, {
      key: "removeCamera",
      value: function removeCamera(camera) {
        for (var i = 0; i < this._cameras.length; ++i) {
          if (this._cameras[i] === camera) {
            this._cameras.splice(i, 1);

            camera.detachFromScene();
            return;
          }
        }
      }
    }, {
      key: "removeCameras",
      value: function removeCameras() {
        var _iterator = _createForOfIteratorHelper(this._cameras),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var camera = _step.value;
            camera.detachFromScene();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        this._cameras.splice(0);
      }
    }, {
      key: "setMainLight",
      value: function setMainLight(dl) {
        this._mainLight = dl;
      }
    }, {
      key: "unsetMainLight",
      value: function unsetMainLight(dl) {
        if (this._mainLight === dl) {
          var dlList = this._directionalLights;

          if (dlList.length) {
            this._mainLight = dlList[dlList.length - 1];

            if (this._mainLight.node) {
              // trigger update
              this._mainLight.node.hasChangedFlags |= _nodeEnum.TransformBit.ROTATION;
            }
          } else {
            this._mainLight = null;
          }
        }
      }
    }, {
      key: "addDirectionalLight",
      value: function addDirectionalLight(dl) {
        dl.attachToScene(this);

        this._directionalLights.push(dl);
      }
    }, {
      key: "removeDirectionalLight",
      value: function removeDirectionalLight(dl) {
        for (var i = 0; i < this._directionalLights.length; ++i) {
          if (this._directionalLights[i] === dl) {
            dl.detachFromScene();

            this._directionalLights.splice(i, 1);

            return;
          }
        }
      }
    }, {
      key: "addSphereLight",
      value: function addSphereLight(pl) {
        pl.attachToScene(this);

        this._sphereLights.push(pl);
      }
    }, {
      key: "removeSphereLight",
      value: function removeSphereLight(pl) {
        for (var i = 0; i < this._sphereLights.length; ++i) {
          if (this._sphereLights[i] === pl) {
            pl.detachFromScene();

            this._sphereLights.splice(i, 1);

            return;
          }
        }
      }
    }, {
      key: "addSpotLight",
      value: function addSpotLight(sl) {
        sl.attachToScene(this);

        this._spotLights.push(sl);
      }
    }, {
      key: "removeSpotLight",
      value: function removeSpotLight(sl) {
        for (var i = 0; i < this._spotLights.length; ++i) {
          if (this._spotLights[i] === sl) {
            sl.detachFromScene();

            this._spotLights.splice(i, 1);

            return;
          }
        }
      }
    }, {
      key: "removeSphereLights",
      value: function removeSphereLights() {
        for (var i = 0; i < this._sphereLights.length; ++i) {
          this._sphereLights[i].detachFromScene();
        }

        this._sphereLights.length = 0;
      }
    }, {
      key: "removeSpotLights",
      value: function removeSpotLights() {
        for (var i = 0; i < this._spotLights.length; ++i) {
          this._spotLights[i].detachFromScene();
        }

        this._spotLights = [];
      }
    }, {
      key: "addModel",
      value: function addModel(m) {
        m.attachToScene(this);

        this._models.push(m);
      }
    }, {
      key: "removeModel",
      value: function removeModel(model) {
        for (var i = 0; i < this._models.length; ++i) {
          if (this._models[i] === model) {
            this._planarShadows.destroyShadowData(model);

            model.detachFromScene();

            this._models.splice(i, 1);

            return;
          }
        }
      }
    }, {
      key: "removeModels",
      value: function removeModels() {
        var _iterator2 = _createForOfIteratorHelper(this._models),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var m = _step2.value;

            this._planarShadows.destroyShadowData(m);

            m.detachFromScene();
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        this._models.length = 0;
      }
    }, {
      key: "onGlobalPipelineStateChanged",
      value: function onGlobalPipelineStateChanged() {
        var _iterator3 = _createForOfIteratorHelper(this._models),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var m = _step3.value;
            m.onGlobalPipelineStateChanged();
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        this._skybox.onGlobalPipelineStateChanged();

        this._planarShadows.onGlobalPipelineStateChanged();
      }
    }, {
      key: "generateModelId",
      value: function generateModelId() {
        return this._modelId++;
      }
      /**
       * @en
       * Cast a ray into the scene, record all the intersected models and ui2d nodes in the result array
       * @param worldRay the testing ray
       * @param mask the layer mask to filter the models
       * @param distance the max distance , Infinity by default
       * @returns boolean , ray is hit or not
       * @note getter of this.rayResultAll can get recently result
       * @zh
       * 传入一条射线检测场景中所有的 3D 模型和 UI2D Node
       * @param worldRay 世界射线
       * @param mask mask 用于标记所有要检测的层，默认为 Default | UI2D
       * @param distance 射线检测的最大距离, 默认为 Infinity
       * @returns boolean , 射线是否有击中
       * @note 通过 this.rayResultAll 可以获取到最近的结果
       */

    }, {
      key: "raycastAll",
      value: function raycastAll(worldRay) {
        var mask = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _layers.Layers.Enum.DEFAULT | _layers.Layers.Enum.UI_2D;
        var distance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;
        var r_3d = this.raycastAllModels(worldRay, mask, distance);
        var r_ui2d = this.raycastAllCanvas(worldRay, mask, distance);
        var isHit = r_3d || r_ui2d;
        resultAll.length = 0;

        if (isHit) {
          Array.prototype.push.apply(resultAll, resultModels);
          Array.prototype.push.apply(resultAll, resultCanvas);
        }

        return isHit;
      }
      /**
       * @en
       * Cast a ray into the scene, record all the intersected models in the result array
       * @param worldRay the testing ray
       * @param mask the layer mask to filter the models
       * @param distance the max distance , Infinity by default
       * @returns boolean , ray is hit or not
       * @note getter of this.rayResultModels can get recently result
       * @zh
       * 传入一条射线检测场景中所有的 3D 模型。
       * @param worldRay 世界射线
       * @param mask 用于标记所有要检测的层，默认为 Default
       * @param distance 射线检测的最大距离, 默认为 Infinity
       * @returns boolean , 射线是否有击中
       * @note 通过 this.rayResultModels 可以获取到最近的结果
       */

    }, {
      key: "raycastAllModels",
      value: function raycastAllModels(worldRay) {
        var mask = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _layers.Layers.Enum.DEFAULT;
        var distance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;
        pool.reset();

        var _iterator4 = _createForOfIteratorHelper(this._models),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var m = _step4.value;
            var transform = m.transform;

            if (!transform || !m.enabled || !(m.node.layer & (mask & ~_layers.Layers.Enum.IGNORE_RAYCAST)) || !m.worldBounds) {
              continue;
            } // broadphase


            var d = _index.intersect.ray_aabb(worldRay, m.worldBounds);

            if (d <= 0 || d >= distance) {
              continue;
            }

            if (m.type === _model.ModelType.DEFAULT) {
              // transform ray back to model space
              _index2.Mat4.invert(m4, transform.getWorldMatrix(m4));

              _index2.Vec3.transformMat4(modelRay.o, worldRay.o, m4);

              _index2.Vec3.normalize(modelRay.d, _index2.Vec3.transformMat4Normal(modelRay.d, worldRay.d, m4));

              d = Infinity;

              for (var i = 0; i < m.subModelNum; ++i) {
                var subModel = m.getSubModel(i).subMeshData;

                if (subModel && subModel.geometricInfo) {
                  var _subModel$geometricIn = subModel.geometricInfo,
                      vb = _subModel$geometricIn.positions,
                      ib = _subModel$geometricIn.indices,
                      sides = _subModel$geometricIn.doubleSided;
                  narrowphase(vb, ib, subModel.primitiveMode, sides, distance);
                  d = Math.min(d, narrowDis * _index2.Vec3.multiply(v3, modelRay.d, transform.worldScale).length());
                }
              }
            }

            if (d < distance) {
              var r = pool.add();
              r.node = m.node;
              r.distance = d;
              resultModels[pool.length - 1] = r;
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }

        resultModels.length = pool.length;
        return resultModels.length > 0;
      }
      /**
       * @en
       * Before you raycast the model, make sure the model is not null
       * @param worldRay the testing ray
       * @param model the testing model
       * @param mask the layer mask to filter the models
       * @param distance the max distance , Infinity by default
       * @returns boolean , ray is hit or not
       * @zh
       * 传入一条射线和一个 3D 模型进行射线检测。
       * @param worldRay 世界射线
       * @param model 进行检测的模型
       * @param mask 用于标记所有要检测的层，默认为 Default
       * @param distance 射线检测的最大距离, 默认为 Infinity
       * @returns boolean , 射线是否有击中
       */

    }, {
      key: "raycastSingleModel",
      value: function raycastSingleModel(worldRay, model) {
        var mask = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _layers.Layers.Enum.DEFAULT;
        var distance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Infinity;

        if (_defaultConstants.PREVIEW) {
          if (model == null) {
            console.error(' 检测前请保证 model 不为 null ');
          }
        }

        pool.reset();
        var m = model;
        var transform = m.transform;

        if (!transform || !m.enabled || !(m.node.layer & (mask & ~_layers.Layers.Enum.IGNORE_RAYCAST)) || !m.worldBounds) {
          return false;
        } // broadphase


        var d = _index.intersect.ray_aabb(worldRay, m.worldBounds);

        if (d <= 0 || d >= distance) {
          return false;
        }

        if (m.type === _model.ModelType.DEFAULT) {
          // transform ray back to model space
          _index2.Mat4.invert(m4, transform.getWorldMatrix(m4));

          _index2.Vec3.transformMat4(modelRay.o, worldRay.o, m4);

          _index2.Vec3.normalize(modelRay.d, _index2.Vec3.transformMat4Normal(modelRay.d, worldRay.d, m4));

          d = Infinity;

          for (var i = 0; i < m.subModelNum; ++i) {
            var subModel = m.getSubModel(i).subMeshData;

            if (subModel && subModel.geometricInfo) {
              var _subModel$geometricIn2 = subModel.geometricInfo,
                  vb = _subModel$geometricIn2.positions,
                  ib = _subModel$geometricIn2.indices,
                  sides = _subModel$geometricIn2.doubleSided;
              narrowphase(vb, ib, subModel.primitiveMode, sides, distance);
              d = Math.min(d, narrowDis * _index2.Vec3.multiply(v3, modelRay.d, transform.worldScale).length());
            }
          }
        }

        if (d < distance) {
          var r = pool.add();
          r.node = m.node;
          r.distance = d;
          resultSingleModel[pool.length - 1] = r;
        }

        resultSingleModel.length = pool.length;
        return resultSingleModel.length > 0;
      }
      /**
       * @en
       * Cast a ray into the scene, detect all canvas and its children
       * @param worldRay the testing ray
       * @param mask the layer mask to filter all ui2d aabb
       * @param distance the max distance , Infinity by default
       * @returns boolean , ray is hit or not
       * @note getter of this.rayResultCanvas can get recently result
       * @zh
       * 传入一条射线检测场景中所有的 Canvas 以及 Canvas 下的 Node
       * @param worldRay 世界射线
       * @param mask 用于标记所有要检测的层，默认为 UI_2D
       * @param distance 射线检测的最大距离, 默认为 Infinity
       * @returns boolean , 射线是否有击中
       * @note 通过 this.rayResultCanvas 可以获取到最近的结果
       */

    }, {
      key: "raycastAllCanvas",
      value: function raycastAllCanvas(worldRay) {
        var mask = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _layers.Layers.Enum.UI_2D;
        var distance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;
        poolUI.reset();
        var canvasComs = cc.director.getScene().getComponentsInChildren(cc.CanvasComponent);

        if (canvasComs != null && canvasComs.length > 0) {
          for (var i = 0; i < canvasComs.length; i++) {
            var canvasNode = canvasComs[i].node;

            if (canvasNode != null && canvasNode.active) {
              this._raycastUI2DNodeRecursiveChildren(worldRay, canvasNode, mask, distance);
            }
          }
        }

        resultCanvas.length = poolUI.length;
        return resultCanvas.length > 0;
      }
    }, {
      key: "_raycastUI2DNode",
      value: function _raycastUI2DNode(worldRay, ui2dNode) {
        var mask = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _layers.Layers.Enum.UI_2D;
        var distance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Infinity;

        if (_defaultConstants.PREVIEW) {
          if (ui2dNode == null) {
            console.error('make sure UINode is not null');
          }
        }

        var uiTransform = ui2dNode._uiProps.uiTransformComp;

        if (uiTransform == null || ui2dNode.layer & _layers.Layers.Enum.IGNORE_RAYCAST || !(ui2dNode.layer & mask)) {
          return;
        }

        uiTransform.getComputeAABB(aabbUI);

        var d = _index.intersect.ray_aabb(worldRay, aabbUI);

        if (d <= 0) {
          return;
        } else if (d < distance) {
          var r = poolUI.add();
          r.node = ui2dNode;
          r.distance = d;
          return r;
        }
      }
    }, {
      key: "_raycastUI2DNodeRecursiveChildren",
      value: function _raycastUI2DNodeRecursiveChildren(worldRay, parent) {
        var mask = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _layers.Layers.Enum.UI_2D;
        var distance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Infinity;

        var result = this._raycastUI2DNode(worldRay, parent, mask, distance);

        if (result != null) {
          resultCanvas[poolUI.length - 1] = result;
        }

        var _iterator5 = _createForOfIteratorHelper(parent.children),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var node = _step5.value;

            if (node != null && node.active) {
              this._raycastUI2DNodeRecursiveChildren(worldRay, node, mask, distance);
            }
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      }
    }]);

    return RenderScene;
  }();

  _exports.RenderScene = RenderScene;

  var modelRay = _index.ray.create();

  var v3 = new _index2.Vec3();
  var m4 = new _index2.Mat4();
  var narrowDis = Infinity;

  var tri = _index.triangle.create();

  var pool = new _index3.RecyclePool(function () {
    return {
      node: null,
      distance: Infinity
    };
  }, 8);
  var resultModels = [];
  /** Canvas raycast result pool */

  var aabbUI = new _index.aabb();
  var poolUI = new _index3.RecyclePool(function () {
    return {
      node: null,
      distance: Infinity
    };
  }, 8);
  var resultCanvas = [];
  /** raycast all */

  var resultAll = [];
  /** raycast single model */

  var resultSingleModel = [];

  var narrowphase = function narrowphase(vb, ib, pm, sides) {
    var distance = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Infinity;
    narrowDis = distance;

    if (pm === _define.GFXPrimitiveMode.TRIANGLE_LIST) {
      var cnt = ib.length;

      for (var j = 0; j < cnt; j += 3) {
        var i0 = ib[j] * 3;
        var i1 = ib[j + 1] * 3;
        var i2 = ib[j + 2] * 3;

        _index2.Vec3.set(tri.a, vb[i0], vb[i0 + 1], vb[i0 + 2]);

        _index2.Vec3.set(tri.b, vb[i1], vb[i1 + 1], vb[i1 + 2]);

        _index2.Vec3.set(tri.c, vb[i2], vb[i2 + 1], vb[i2 + 2]);

        var dist = _index.intersect.ray_triangle(modelRay, tri, sides);

        if (dist <= 0 || dist >= narrowDis) {
          continue;
        }

        narrowDis = dist;
      }
    } else if (pm === _define.GFXPrimitiveMode.TRIANGLE_STRIP) {
      var _cnt = ib.length - 2;

      var rev = 0;

      for (var _j = 0; _j < _cnt; _j += 1) {
        var _i = ib[_j - rev] * 3;

        var _i2 = ib[_j + rev + 1] * 3;

        var _i3 = ib[_j + 2] * 3;

        _index2.Vec3.set(tri.a, vb[_i], vb[_i + 1], vb[_i + 2]);

        _index2.Vec3.set(tri.b, vb[_i2], vb[_i2 + 1], vb[_i2 + 2]);

        _index2.Vec3.set(tri.c, vb[_i3], vb[_i3 + 1], vb[_i3 + 2]);

        rev = ~rev;

        var _dist = _index.intersect.ray_triangle(modelRay, tri, sides);

        if (_dist <= 0 || _dist >= narrowDis) {
          continue;
        }

        narrowDis = _dist;
      }
    } else if (pm === _define.GFXPrimitiveMode.TRIANGLE_FAN) {
      var _cnt2 = ib.length - 1;

      var _i4 = ib[0] * 3;

      _index2.Vec3.set(tri.a, vb[_i4], vb[_i4 + 1], vb[_i4 + 2]);

      for (var _j2 = 1; _j2 < _cnt2; _j2 += 1) {
        var _i5 = ib[_j2] * 3;

        var _i6 = ib[_j2 + 1] * 3;

        _index2.Vec3.set(tri.b, vb[_i5], vb[_i5 + 1], vb[_i5 + 2]);

        _index2.Vec3.set(tri.c, vb[_i6], vb[_i6 + 1], vb[_i6 + 2]);

        var _dist2 = _index.intersect.ray_triangle(modelRay, tri, sides);

        if (_dist2 <= 0 || _dist2 >= narrowDis) {
          continue;
        }

        narrowDis = _dist2;
      }
    }
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,