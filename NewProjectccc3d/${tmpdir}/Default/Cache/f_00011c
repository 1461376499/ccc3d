(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../../core/math/index.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../../core/math/index.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index);
    global.tiled = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.tilled = void 0;

  /*
   Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
  
   http://www.cocos.com
  
   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated engine source code (the "Software"), a limited,
   worldwide, royalty-free, non-assignable, revocable and non-exclusive license
   to use Cocos Creator solely to develop games on your target platforms. You shall
   not use Cocos Creator software for developing other software or tools that's
   used for developing games. You are not granted to publish, distribute,
   sublicense, and/or sell copies of Cocos Creator.
  
   The software or tools in this License Agreement are licensed, not sold.
   Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
  
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.
  */

  /**
   * @hidden
   */
  var vec3_temps = [];

  for (var i = 0; i < 4; i++) {
    vec3_temps.push(new _index.Vec3());
  }

  var _perVertextLength = 9;
  var tilled = {
    useModel: false,
    createData: function createData(sprite) {
      return sprite.requestRenderData();
    },
    updateRenderData: function updateRenderData(sprite) {
      var renderData = sprite.renderData;
      var frame = sprite.spriteFrame;

      if (!frame || !renderData || !(renderData.uvDirty || renderData.vertDirty)) {
        return;
      }

      var node = sprite.node;
      var contentWidth = Math.abs(node.width);
      var contentHeight = Math.abs(node.height);
      var appx = node.anchorX * contentWidth;
      var appy = node.anchorY * contentHeight;
      var rect = frame.getRect();
      var rectWidth = rect.width;
      var rectHeight = rect.height;
      var hRepeat = contentWidth / rectWidth;
      var vRepeat = contentHeight / rectHeight;
      var row = Math.ceil(vRepeat);
      var col = Math.ceil(hRepeat);
      var datas = renderData.datas;
      renderData.dataLength = Math.max(8, row + 1, col + 1);

      for (var _i = 0; _i <= col; ++_i) {
        datas[_i].x = Math.min(rectWidth * _i, contentWidth) - appx;
      }

      for (var _i2 = 0; _i2 <= row; ++_i2) {
        datas[_i2].y = Math.min(rectHeight * _i2, contentHeight) - appy;
      } // update data property


      renderData.vertexCount = row * col * 4;
      renderData.indiceCount = row * col * 6;
      renderData.uvDirty = false;
      renderData.vertDirty = false;
    },
    fillBuffers: function fillBuffers(sprite, renderer) {
      var node = sprite.node;
      var renderData = sprite.renderData; // buffer

      var buffer = renderer.currBufferBatch; // buffer data may be realloc, need get reference after request.

      var indiceOffset = buffer.indiceOffset;
      var vertexOffset = buffer.byteOffset >> 2;
      var vertexId = buffer.vertexOffset;
      var vertexCount = renderData.vertexCount;
      var indiceCount = renderData.indiceCount;
      var vbuf = buffer.vData;
      var ibuf = buffer.iData;
      var isRecreate = buffer.request(vertexCount, indiceCount);

      if (!isRecreate) {
        buffer = renderer.currBufferBatch;
        vertexOffset = 0;
        indiceOffset = 0;
        vertexId = 0;
      }

      var frame = sprite.spriteFrame;
      var rotated = frame.isRotated();
      var uv = frame.uv;
      var rect = frame.getRect();
      var contentWidth = Math.abs(node.width);
      var contentHeight = Math.abs(node.height);
      var hRepeat = contentWidth / rect.width;
      var vRepeat = contentHeight / rect.height;
      var row = Math.ceil(vRepeat);
      var col = Math.ceil(hRepeat);
      var matrix = node.worldMatrix;
      this.fillVertices(vbuf, vertexOffset, matrix, row, col, renderData.datas);
      var offset = _perVertextLength;
      var offset1 = offset;
      var offset2 = offset * 2;
      var offset3 = offset * 3;
      var offset4 = offset * 4;
      var coefu = 0;
      var coefv = 0;

      for (var yindex = 0, ylength = row; yindex < ylength; ++yindex) {
        coefv = Math.min(1, vRepeat - yindex);

        for (var xindex = 0, xlength = col; xindex < xlength; ++xindex) {
          coefu = Math.min(1, hRepeat - xindex);
          var vertexOffsetU = vertexOffset + 3;
          var vertexOffsetV = vertexOffsetU + 1; // UV

          if (rotated) {
            // lb
            vbuf[vertexOffsetU] = uv[0];
            vbuf[vertexOffsetV] = uv[1]; // rb

            vbuf[vertexOffsetU + offset1] = uv[0];
            vbuf[vertexOffsetV + offset1] = uv[1] + (uv[7] - uv[1]) * coefu; // lt

            vbuf[vertexOffsetU + offset2] = uv[0] + (uv[6] - uv[0]) * coefv;
            vbuf[vertexOffsetV + offset2] = uv[1]; // rt

            vbuf[vertexOffsetU + offset3] = vbuf[vertexOffsetU + offset2];
            vbuf[vertexOffsetV + offset3] = vbuf[vertexOffsetV + offset1];
          } else {
            // lb
            vbuf[vertexOffsetU] = uv[0];
            vbuf[vertexOffsetV] = uv[1]; // rb

            vbuf[vertexOffsetU + offset1] = uv[0] + (uv[6] - uv[0]) * coefu;
            vbuf[vertexOffsetV + offset1] = uv[1]; // lt

            vbuf[vertexOffsetU + offset2] = uv[0];
            vbuf[vertexOffsetV + offset2] = uv[1] + (uv[7] - uv[1]) * coefv; // rt

            vbuf[vertexOffsetU + offset3] = vbuf[vertexOffsetU + offset1];
            vbuf[vertexOffsetV + offset3] = vbuf[vertexOffsetV + offset2];
          } // color


          _index.Color.toArray(vbuf, sprite.color, vertexOffsetV + 1);

          _index.Color.toArray(vbuf, sprite.color, vertexOffsetV + offset1 + 1);

          _index.Color.toArray(vbuf, sprite.color, vertexOffsetV + offset2 + 1);

          _index.Color.toArray(vbuf, sprite.color, vertexOffsetV + offset3 + 1);

          vertexOffset += offset4;
        }
      } // update indices


      for (var _i3 = 0; _i3 < indiceCount; _i3 += 6) {
        ibuf[indiceOffset++] = vertexId;
        ibuf[indiceOffset++] = vertexId + 1;
        ibuf[indiceOffset++] = vertexId + 2;
        ibuf[indiceOffset++] = vertexId + 1;
        ibuf[indiceOffset++] = vertexId + 3;
        ibuf[indiceOffset++] = vertexId + 2;
        vertexId += 4;
      }
    },
    fillVertices: function fillVertices(vbuf, vertexOffset, matrix, row, col, datas) {
      var x = 0;
      var x1 = 0;
      var y = 0;
      var y1 = 0;

      for (var yindex = 0, ylength = row; yindex < ylength; ++yindex) {
        y = datas[yindex].y;
        y1 = datas[yindex + 1].y;

        for (var xindex = 0, xlength = col; xindex < xlength; ++xindex) {
          x = datas[xindex].x;
          x1 = datas[xindex + 1].x;

          _index.Vec3.set(vec3_temps[0], x, y, 0);

          _index.Vec3.set(vec3_temps[1], x1, y, 0);

          _index.Vec3.set(vec3_temps[2], x, y1, 0);

          _index.Vec3.set(vec3_temps[3], x1, y1, 0);

          for (var _i4 = 0; _i4 < 4; _i4++) {
            var vec3_temp = vec3_temps[_i4];

            _index.Vec3.transformMat4(vec3_temp, vec3_temp, matrix);

            var offset = _i4 * _perVertextLength;
            vbuf[vertexOffset + offset] = vec3_temp.x;
            vbuf[vertexOffset + offset + 1] = vec3_temp.y;
            vbuf[vertexOffset + offset + 2] = vec3_temp.z;
          }

          vertexOffset += 36;
        }
      }
    }
  };
  _exports.tilled = tilled;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,