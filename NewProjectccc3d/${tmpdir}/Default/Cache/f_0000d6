(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../core/components/ui-base/ui-render-component.js", "../../core/data/class-decorator.js", "../../core/math/index.js", "../../core/platform/index.js", "../../core/platform/visible-rect.js", "../../core/scene-graph/index.js", "../../core/value-types/enum.js", "./graphics-component.js", "../../core/index.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../core/components/ui-base/ui-render-component.js"), require("../../core/data/class-decorator.js"), require("../../core/math/index.js"), require("../../core/platform/index.js"), require("../../core/platform/visible-rect.js"), require("../../core/scene-graph/index.js"), require("../../core/value-types/enum.js"), require("./graphics-component.js"), require("../../core/index.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.uiRenderComponent, global.classDecorator, global.index, global.index, global.visibleRect, global.index, global._enum, global.graphicsComponent, global.index);
    global.maskComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _uiRenderComponent, _classDecorator, _index, _index2, _visibleRect, _index3, _enum, _graphicsComponent, _index4) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MaskComponent = _exports.MaskType = void 0;
  _visibleRect = _interopRequireDefault(_visibleRect);

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _class3, _temp;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  var _worldMatrix = new _index.Mat4();

  var _vec2_temp = new _index.Vec2();

  var _mat4_temp = new _index.Mat4();

  var _circlePoints = [];

  function _calculateCircle(center, radius, segments) {
    _circlePoints.length = 0;
    var anglePerStep = Math.PI * 2 / segments;

    for (var step = 0; step < segments; ++step) {
      _circlePoints.push(new _index.Vec3(radius.x * Math.cos(anglePerStep * step) + center.x, radius.y * Math.sin(anglePerStep * step) + center.y, 0));
    }

    return _circlePoints;
  }
  /**
   * @en The type for mask.
   *
   * @zh 遮罩组件类型。
   */


  var MaskType;
  _exports.MaskType = MaskType;

  (function (MaskType) {
    MaskType[MaskType["RECT"] = 0] = "RECT";
    MaskType[MaskType["ELLIPSE"] = 1] = "ELLIPSE";
    MaskType[MaskType["GRAPHICS_STENCIL"] = 2] = "GRAPHICS_STENCIL";
  })(MaskType || (_exports.MaskType = MaskType = {}));

  (0, _enum.ccenum)(MaskType);
  var SEGMENTS_MIN = 3;
  var SEGMENTS_MAX = 10000;
  /**
   * @en
   * The Mask Component.
   *
   * @zh
   * 遮罩组件。
   */

  var MaskComponent = (_dec = (0, _classDecorator.ccclass)('cc.MaskComponent'), _dec2 = (0, _classDecorator.help)('i18n:cc.MaskComponent'), _dec3 = (0, _classDecorator.executionOrder)(110), _dec4 = (0, _classDecorator.menu)('UI/Render/Mask'), _dec5 = (0, _classDecorator.property)({
    type: MaskType,
    displayOrder: 4,
    tooltip: '遮罩类型'
  }), _dec6 = (0, _classDecorator.property)({
    tooltip: '反向遮罩'
  }), _dec7 = (0, _classDecorator.property)({
    visible: false,
    override: true
  }), _dec8 = (0, _classDecorator.property)({
    visible: false,
    override: true
  }), _dec9 = (0, _classDecorator.property)({
    visible: false,
    override: true
  }), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_UIRenderComponent) {
    _inherits(MaskComponent, _UIRenderComponent);

    _createClass(MaskComponent, [{
      key: "type",

      /**
       * @en
       * The mask type.
       *
       * @zh
       * 遮罩类型。
       */
      get: function get() {
        return this._type;
      },
      set: function set(value) {
        if (this._type === value) {
          return;
        }

        this._type = value;

        this._updateGraphics();

        if (this._renderData) {
          this.destroyRenderData();
          this._renderData = null;
        }
      }
      /**
       * @en
       * Reverse mask (Not supported Canvas Mode)
       * .
       * @zh
       * 反向遮罩（不支持 Canvas 模式）。
       */

    }, {
      key: "inverted",
      get: function get() {
        return this._inverted;
      },
      set: function set(value) {
        if (cc.game.renderType === _index4.Game.RENDER_TYPE_CANVAS) {
          cc.warnID(4202);
          return;
        }

        this._inverted = value;
      }
      /**
       * @en
       * The segments for ellipse mask.
       *
       * TODO: remove segments, not supported by graphics
       * @zh
       * 椭圆遮罩的曲线细分数。
       */

    }, {
      key: "segments",
      get: function get() {
        return this._segments;
      },
      set: function set(value) {
        if (this._segments === value) {
          return;
        }

        this._segments = (0, _index.clamp)(value, SEGMENTS_MIN, SEGMENTS_MAX);

        this._updateGraphics();
      }
    }, {
      key: "graphics",
      get: function get() {
        return this._graphics;
      }
    }, {
      key: "clearGraphics",
      get: function get() {
        return this._clearGraphics;
      }
    }, {
      key: "dstBlendFactor",
      get: function get() {
        return this._dstBlendFactor;
      },
      set: function set(value) {
        if (this._dstBlendFactor === value) {
          return;
        }

        this._dstBlendFactor = value;

        this._updateBlendFunc();
      }
    }, {
      key: "srcBlendFactor",
      get: function get() {
        return this._srcBlendFactor;
      },
      set: function set(value) {
        if (this._srcBlendFactor === value) {
          return;
        }

        this._srcBlendFactor = value;

        this._updateBlendFunc();
      }
    }, {
      key: "color",
      get: function get() {
        return this._color;
      },
      set: function set(value) {
        if (this._color === value) {
          return;
        }

        this._color.set(value);

        this.markForUpdateRenderData();
      }
    }]);

    function MaskComponent() {
      var _this;

      _classCallCheck(this, MaskComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(MaskComponent).call(this));

      _initializerDefineProperty(_this, "_type", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_inverted", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_segments", _descriptor3, _assertThisInitialized(_this));

      _this._graphics = null;
      _this._clearGraphics = null;
      _this._instanceMaterialType = _uiRenderComponent.InstanceMaterialType.ADDCOLOR;
      return _this;
    }

    _createClass(MaskComponent, [{
      key: "onLoad",
      value: function onLoad() {
        this._createGraphics();

        if (this._clearGraphics) {
          this._clearGraphics.onLoad();
        }

        if (this._graphics) {
          this._graphics.onLoad();
        }
      }
      /**
       * @zh
       * 图形内容重塑。
       */

    }, {
      key: "onRestore",
      value: function onRestore() {
        this._createGraphics();

        this._updateGraphics();
      }
    }, {
      key: "onEnable",
      value: function onEnable() {
        _get(_getPrototypeOf(MaskComponent.prototype), "onEnable", this).call(this);

        this._enableGraphics();

        _index2.view.on('design-resolution-changed', this._updateClearGraphics, this);
      }
    }, {
      key: "onDisable",
      value: function onDisable() {
        _get(_getPrototypeOf(MaskComponent.prototype), "onDisable", this).call(this);

        this._disableGraphics();

        _index2.view.off('design-resolution-changed', this._updateClearGraphics);
      }
    }, {
      key: "onDestroy",
      value: function onDestroy() {
        _get(_getPrototypeOf(MaskComponent.prototype), "onDestroy", this).call(this);

        this._removeGraphics();
      }
      /**
       * @zh
       * 根据屏幕坐标计算点击事件。
       *
       * @param cameraPt  屏幕点转换到相机坐标系下的点。
       */

    }, {
      key: "isHit",
      value: function isHit(cameraPt) {
        var node = this.node;
        var size = node.getContentSize();
        var w = size.width;
        var h = size.height;
        var testPt = _vec2_temp;
        this.node.getWorldMatrix(_worldMatrix);

        _index.Mat4.invert(_mat4_temp, _worldMatrix);

        _index.Vec2.transformMat4(testPt, cameraPt, _mat4_temp);

        var ap = node.getAnchorPoint();
        testPt.x += ap.x * w;
        testPt.y += ap.y * h;
        var result = false;

        if (this.type === MaskType.RECT || this.type === MaskType.GRAPHICS_STENCIL) {
          result = testPt.x >= 0 && testPt.y >= 0 && testPt.x <= w && testPt.y <= h;
        } else if (this.type === MaskType.ELLIPSE) {
          var rx = w / 2;
          var ry = h / 2;
          var px = testPt.x - 0.5 * w;
          var py = testPt.y - 0.5 * h;
          result = px * px / (rx * rx) + py * py / (ry * ry) < 1;
        }

        if (this._inverted) {
          result = !result;
        }

        return result;
      }
    }, {
      key: "_render",
      value: function _render(render) {
        render.commitComp(this, null, this._assembler);
      }
    }, {
      key: "_postRender",
      value: function _postRender(render) {
        if (!this._postAssembler) {
          return;
        }

        render.commitComp(this, null, this._postAssembler);
      }
    }, {
      key: "_nodeStateChange",
      value: function _nodeStateChange(type) {
        _get(_getPrototypeOf(MaskComponent.prototype), "_nodeStateChange", this).call(this, type);

        this._updateGraphics();
      }
    }, {
      key: "_resolutionChanged",
      value: function _resolutionChanged() {
        this._updateClearGraphics();
      }
    }, {
      key: "_canRender",
      value: function _canRender() {
        if (!_get(_getPrototypeOf(MaskComponent.prototype), "_canRender", this).call(this)) {
          return false;
        }

        return this._clearGraphics !== null && this._graphics !== null;
      }
    }, {
      key: "_flushAssembler",
      value: function _flushAssembler() {
        var assembler = MaskComponent.Assembler.getAssembler(this);
        var posAssembler = MaskComponent.PostAssembler.getAssembler(this);

        if (this._assembler !== assembler) {
          this.destroyRenderData();
          this._assembler = assembler;
        }

        if (this._postAssembler !== posAssembler) {
          this._postAssembler = posAssembler;
        }

        if (!this._renderData) {
          if (this._assembler && this._assembler.createData) {
            this._renderData = this._assembler.createData(this);
            this._renderData.material = this.sharedMaterial;
            this.markForUpdateRenderData();
          }
        }
      }
    }, {
      key: "_createGraphics",
      value: function _createGraphics() {
        if (!this._clearGraphics) {
          var node = new _index3.Node('clear-graphics');
          var clearGraphics = this._clearGraphics = node.addComponent(_graphicsComponent.GraphicsComponent);
          clearGraphics.delegateSrc = this.node;
          clearGraphics.helpInstanceMaterial();
          clearGraphics.lineWidth = 0;

          var color = _index.Color.WHITE.clone();

          color.a = 0;
          clearGraphics.fillColor = color;
        }

        if (!this._graphics) {
          var graphics = this._graphics = new _graphicsComponent.GraphicsComponent();
          graphics.node = this.node;
          graphics.node.getWorldMatrix();
          graphics.helpInstanceMaterial();
          graphics.lineWidth = 0;

          var _color = _index.Color.WHITE.clone();

          _color.a = 0;
          graphics.fillColor = _color;
        }
      }
    }, {
      key: "_updateClearGraphics",
      value: function _updateClearGraphics() {
        if (!this._clearGraphics) {
          return;
        }

        var size = _visibleRect.default;

        this._clearGraphics.node.setWorldPosition(size.width / 2, size.height / 2, 0);

        this._clearGraphics.clear();

        this._clearGraphics.rect(-size.width / 2, -size.height / 2, size.width, size.height);

        this._clearGraphics.fill();
      }
    }, {
      key: "_updateGraphics",
      value: function _updateGraphics() {
        if (!this._graphics) {
          return;
        }

        var node = this.node;
        var graphics = this._graphics; // Share render data with graphics content

        graphics.clear();
        var size = node.getContentSize();
        var width = size.width;
        var height = size.height;
        var ap = node.getAnchorPoint();
        var x = -width * ap.x;
        var y = -height * ap.y;

        if (this._type === MaskType.RECT) {
          graphics.rect(x, y, width, height);
        } else if (this._type === MaskType.ELLIPSE) {
          var center = new _index.Vec3(x + width / 2, y + height / 2, 0);
          var radius = new _index.Vec3(width / 2, height / 2, 0);

          var points = _calculateCircle(center, radius, this._segments);

          for (var i = 0; i < points.length; ++i) {
            var point = points[i];

            if (i === 0) {
              graphics.moveTo(point.x, point.y);
            } else {
              graphics.lineTo(point.x, point.y);
            }
          }

          graphics.close();
        }

        graphics.fill();
      }
    }, {
      key: "_enableGraphics",
      value: function _enableGraphics() {
        if (this._clearGraphics) {
          this._clearGraphics.onEnable();

          this._updateClearGraphics();
        }

        if (this._graphics) {
          this._graphics.onEnable();

          this._updateGraphics();
        }
      }
    }, {
      key: "_disableGraphics",
      value: function _disableGraphics() {
        if (this._graphics) {
          this._graphics.onDisable();
        }

        if (this._clearGraphics) {
          this._clearGraphics.onDisable();
        }
      }
    }, {
      key: "_removeGraphics",
      value: function _removeGraphics() {
        if (this._graphics) {
          this._graphics.destroy();
        }

        if (this._clearGraphics) {
          this._clearGraphics.destroy();
        }
      }
    }]);

    return MaskComponent;
  }(_uiRenderComponent.UIRenderComponent), _class3.Type = MaskType, _temp), (_applyDecoratedDescriptor(_class2.prototype, "type", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "type"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "inverted", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "inverted"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "segments", [_classDecorator.property], Object.getOwnPropertyDescriptor(_class2.prototype, "segments"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "dstBlendFactor", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "dstBlendFactor"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "srcBlendFactor", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "srcBlendFactor"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "color", [_dec9], Object.getOwnPropertyDescriptor(_class2.prototype, "color"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_type", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return MaskType.RECT;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_inverted", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_segments", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 64;
    }
  })), _class2)) || _class) || _class) || _class) || _class); // tslint:disable-next-line

  _exports.MaskComponent = MaskComponent;
  cc.MaskComponent = MaskComponent;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,