(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../math/index.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../math/index.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index);
    global.box = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = box;

  /**
   * @category 3d/primitive
   */

  /**
   * @en
   * This function generates a box with specified extents and centered at origin,
   * but may be repositioned through the `center` option.
   * @zh
   * 生成一个立方体，其大小是定义的范围且中心在原点。
   * @param options 参数选项。
   */
  function box(options) {
    options = options || {};
    var ws = options.widthSegments || 1;
    var hs = options.heightSegments || 1;
    var ls = options.lengthSegments || 1;
    var hw = (options.width || 1) / 2;
    var hh = (options.height || 1) / 2;
    var hl = (options.length || 1) / 2;
    var corners = [_index.Vec3.set(c0, -hw, -hh, hl), _index.Vec3.set(c1, hw, -hh, hl), _index.Vec3.set(c2, hw, hh, hl), _index.Vec3.set(c3, -hw, hh, hl), _index.Vec3.set(c4, hw, -hh, -hl), _index.Vec3.set(c5, -hw, -hh, -hl), _index.Vec3.set(c6, -hw, hh, -hl), _index.Vec3.set(c7, hw, hh, -hl)];
    var faceAxes = [[2, 3, 1], // FRONT
    [4, 5, 7], // BACK
    [7, 6, 2], // TOP
    [1, 0, 4], // BOTTOM
    [1, 4, 2], // RIGHT
    [5, 0, 6] // LEFT
    ];
    var faceNormals = [[0, 0, 1], // FRONT
    [0, 0, -1], // BACK
    [0, 1, 0], // TOP
    [0, -1, 0], // BOTTOM
    [1, 0, 0], // RIGHT
    [-1, 0, 0] // LEFT
    ];
    var positions = [];
    var normals = [];
    var uvs = [];
    var indices = [];
    var minPos = new _index.Vec3(-hw, -hh, -hl);
    var maxPos = new _index.Vec3(hw, hh, hl);
    var boundingRadius = Math.sqrt(hw * hw + hh * hh + hl * hl);

    function _buildPlane(side, uSegments, vSegments) {
      var u;
      var v;
      var ix;
      var iy;
      var offset = positions.length / 3;
      var faceAxe = faceAxes[side];
      var faceNormal = faceNormals[side];

      for (iy = 0; iy <= vSegments; iy++) {
        for (ix = 0; ix <= uSegments; ix++) {
          u = ix / uSegments;
          v = iy / vSegments;

          _index.Vec3.lerp(temp1, corners[faceAxe[0]], corners[faceAxe[1]], u);

          _index.Vec3.lerp(temp2, corners[faceAxe[0]], corners[faceAxe[2]], v);

          _index.Vec3.subtract(temp3, temp2, corners[faceAxe[0]]);

          _index.Vec3.add(r, temp1, temp3);

          positions.push(r.x, r.y, r.z);
          normals.push(faceNormal[0], faceNormal[1], faceNormal[2]);
          uvs.push(u, v);

          if (ix < uSegments && iy < vSegments) {
            var useg1 = uSegments + 1;
            var a = ix + iy * useg1;
            var b = ix + (iy + 1) * useg1;
            var c = ix + 1 + (iy + 1) * useg1;
            var d = ix + 1 + iy * useg1;
            indices.push(offset + a, offset + d, offset + b);
            indices.push(offset + b, offset + d, offset + c);
          }
        }
      }
    }

    _buildPlane(0, ws, hs); // FRONT


    _buildPlane(4, ls, hs); // RIGHT


    _buildPlane(1, ws, hs); // BACK


    _buildPlane(5, ls, hs); // LEFT


    _buildPlane(3, ws, ls); // BOTTOM


    _buildPlane(2, ws, ls); // TOP


    return {
      positions: positions,
      normals: normals,
      uvs: uvs,
      indices: indices,
      minPos: minPos,
      maxPos: maxPos,
      boundingRadius: boundingRadius
    };
  }

  var temp1 = new _index.Vec3();
  var temp2 = new _index.Vec3();
  var temp3 = new _index.Vec3();
  var r = new _index.Vec3();
  var c0 = new _index.Vec3();
  var c1 = new _index.Vec3();
  var c2 = new _index.Vec3();
  var c3 = new _index.Vec3();
  var c4 = new _index.Vec3();
  var c5 = new _index.Vec3();
  var c6 = new _index.Vec3();
  var c7 = new _index.Vec3();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkY6L2plbmtpbnMvd29ya3NwYWNlL0NyZWF0b3JfM0QvZWRpdG9yLTNkL3Jlc291cmNlcy8zZC9lbmdpbmUvY29jb3MvY29yZS9wcmltaXRpdmUvYm94LnRzIl0sIm5hbWVzIjpbImJveCIsIm9wdGlvbnMiLCJ3cyIsIndpZHRoU2VnbWVudHMiLCJocyIsImhlaWdodFNlZ21lbnRzIiwibHMiLCJsZW5ndGhTZWdtZW50cyIsImh3Iiwid2lkdGgiLCJoaCIsImhlaWdodCIsImhsIiwibGVuZ3RoIiwiY29ybmVycyIsIlZlYzMiLCJzZXQiLCJjMCIsImMxIiwiYzIiLCJjMyIsImM0IiwiYzUiLCJjNiIsImM3IiwiZmFjZUF4ZXMiLCJmYWNlTm9ybWFscyIsInBvc2l0aW9ucyIsIm5vcm1hbHMiLCJ1dnMiLCJpbmRpY2VzIiwibWluUG9zIiwibWF4UG9zIiwiYm91bmRpbmdSYWRpdXMiLCJNYXRoIiwic3FydCIsIl9idWlsZFBsYW5lIiwic2lkZSIsInVTZWdtZW50cyIsInZTZWdtZW50cyIsInUiLCJ2IiwiaXgiLCJpeSIsIm9mZnNldCIsImZhY2VBeGUiLCJmYWNlTm9ybWFsIiwibGVycCIsInRlbXAxIiwidGVtcDIiLCJzdWJ0cmFjdCIsInRlbXAzIiwiYWRkIiwiciIsInB1c2giLCJ4IiwieSIsInoiLCJ1c2VnMSIsImEiLCJiIiwiYyIsImQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7QUErREE7Ozs7Ozs7O0FBUWUsV0FBU0EsR0FBVCxDQUFjQyxPQUFkLEVBQWdEO0FBQzNEQSxJQUFBQSxPQUFPLEdBQUdBLE9BQU8sSUFBSSxFQUFyQjtBQUNBLFFBQU1DLEVBQUUsR0FBR0QsT0FBTyxDQUFDRSxhQUFSLElBQXlCLENBQXBDO0FBQ0EsUUFBTUMsRUFBRSxHQUFHSCxPQUFPLENBQUNJLGNBQVIsSUFBMEIsQ0FBckM7QUFDQSxRQUFNQyxFQUFFLEdBQUdMLE9BQU8sQ0FBQ00sY0FBUixJQUEwQixDQUFyQztBQUVBLFFBQU1D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SCxXQUFKLEVBQVg7QUFDQSxNQUFNSSxFQUFFLEdBQUcsSUFBSUosV0FBSixFQUFYO0FBQ0EsTUFBTUssRUFBRSxHQUFHLElBQUlMLFdBQUosRUFBWDtBQUNBLE1BQU1NLEVBQUUsR0FBRyxJQUFJTixXQUFKLEVBQVg7QUFDQSxNQUFNTyxFQUFFLEdBQUcsSUFBSVAsV0FBSixFQUFYO0FBQ0EsTUFBTVEsRUFBRSxHQUFHLElBQUlSLFdBQUosRUFBWDtBQUNBLE1BQU1TLEVBQUUsR0FBRyxJQUFJVCxXQUFKLEVBQVgiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGNhdGVnb3J5IDNkL3ByaW1pdGl2ZVxyXG4gKi9cclxuXHJcbmltcG9ydCB7IFZlYzMgfSBmcm9tICcuLi9tYXRoJztcclxuaW1wb3J0IHsgSUdlb21ldHJ5LCBJR2VvbWV0cnlPcHRpb25zIH0gZnJvbSAnLi9kZWZpbmUnO1xyXG5cclxuLyoqXHJcbiAqIEBlblxyXG4gKiBUaGUgZGVmaW5pdGlvbiBvZiB0aGUgcGFyYW1ldGVyIGZvciBidWlsZGluZyBhIGJveC5cclxuICogQHpoXHJcbiAqIOeri+aWueS9k+WPguaVsOmAiemhueOAglxyXG4gKi9cclxuaW50ZXJmYWNlIElCb3hPcHRpb25zIGV4dGVuZHMgUmVjdXJzaXZlUGFydGlhbDxJR2VvbWV0cnlPcHRpb25zPiB7XHJcbiAgICAvKipcclxuICAgICAqIEBlblxyXG4gICAgICogQm94IGV4dGVudCBvbiBYLWF4aXMuXHJcbiAgICAgKiBAemhcclxuICAgICAqIOeri+aWueS9k+WuveW6puOAglxyXG4gICAgICovXHJcbiAgICB3aWR0aD86IG51bWJlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBlblxyXG4gICAgICogQm94IGV4dGVudCBvbiBZLWF4aXMuXHJcbiAgICAgKiBAemhcclxuICAgICAqIOeri+aWueS9k+mrmOW6puOAglxyXG4gICAgICovXHJcbiAgICBoZWlnaHQ/OiBudW1iZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW5cclxuICAgICAqIEJveCBleHRlbnQgb24gWi1heGlzLlxyXG4gICAgICogQHpoXHJcbiAgICAgKiDnq4vmlrnkvZPplb/luqbjgIJcclxuICAgICAqL1xyXG4gICAgbGVuZ3RoPzogbnVtYmVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGVuXHJcbiAgICAgKiBTZWdtZW50IGNvdW50IG9uIFgtYXhpcy5cclxuICAgICAqIEB6aFxyXG4gICAgICog5a695bqm57q/5q615pWw44CCXHJcbiAgICAgKi9cclxuICAgIHdpZHRoU2VnbWVudHM/OiBudW1iZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW5cclxuICAgICAqIFNlZ21lbnQgY291bnQgb24gWS1heGlzLlxyXG4gICAgICogQHpoXHJcbiAgICAgKiDpq5jluqbnur/mrrXmlbDjgIJcclxuICAgICAqL1xyXG4gICAgaGVpZ2h0U2VnbWVudHM/OiBudW1iZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAZW5cclxuICAgICAqIFNlZ21lbnQgY291bnQgb24gWi1heGlzLlxyXG4gICAgICogQHpoXHJcbiAgICAgKiDplb/luqbnur/mrrXmlbDjgIJcclxuICAgICAqL1xyXG4gICAgbGVuZ3RoU2VnbWVudHM/OiBudW1iZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZW5cclxuICogVGhpcyBmdW5jdGlvbiBnZW5lcmF0ZXMgYSBib3ggd2l0aCBzcGVjaWZpZWQgZXh0ZW50cyBhbmQgY2VudGVyZWQgYXQgb3JpZ2luLFxyXG4gKiBidXQgbWF5IGJlIHJlcG9zaXRpb25lZCB0aHJvdWdoIHRoZSBgY2VudGVyYCBvcHRpb24uXHJcbiAqIEB6aFxyXG4gKiDnlJ/miJDkuIDkuKrnq4vmlrnkvZPvvIzlhbblpKflsI/mmK/lrprkuYnnmoTojIPlm7TkuJTkuK3lv4PlnKjljp/ngrnjgIJcclxuICogQHBhcmFtIG9wdGlvbnMg5Y+C5pWw6YCJ6aG544CCXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBib3ggKG9wdGlvbnM/OiBJQm94T3B0aW9ucyk6IElHZW9tZXRyeSB7XHJcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuICAgIGNvbnN0IHdzID0gb3B0aW9ucy53aWR0aFNlZ21lbnRzIHx8IDE7XHJcbiAgICBjb25zdCBocyA9IG9wdGlvbnMuaGVpZ2h0U2VnbWVudHMgfHwgMTtcclxuICAgIGNvbnN0IGxzID0gb3B0aW9ucy5sZW5ndGhTZWdtZW50cyB8fCAxO1xyXG5cclxuICAgIGNvbnN0IGh3ID0gKG9wdGlvbnMud2lkdGggfHwgMSkgLyAyO1xyXG4gICAgY29uc3QgaGggPSAob3B0aW9ucy5oZWlnaHQgfHwgMSkgLyAyO1xyXG4gICAgY29uc3QgaGwgPSAob3B0aW9ucy5sZW5ndGggfHwgMSkgLyAyO1xyXG5cclxuICAgIGNvbnN0IGNvcm5lcnMgPSBbXHJcbiAgICAgICAgVmVjMy5zZXQoYzAsIC1odywgLWhoLCBobCksXHJcbiAgICAgICAgVmVjMy5zZXQoYzEsIGh3LCAtaGgsIGhsKSxcclxuICAgICAgICBWZWMzLnNldChjMiwgaHcsIGhoLCBobCksXHJcbiAgICAgICAgVmVjMy5zZXQoYzMsIC1odywgaGgsIGhsKSxcclxuICAgICAgICBWZWMzLnNldChjNCwgaHcsIC1oaCwgLWhsKSxcclxuICAgICAgICBWZWMzLnNldChjNSwgLWh3LCAtaGgsIC1obCksXHJcbiAgICAgICAgVmVjMy5zZXQoYzYsIC1odywgaGgsIC1obCksXHJcbiAgICAgICAgVmVjMy5zZXQoYzcsIGh3LCBoaCwgLWhsKSxcclxuICAgIF07XHJcblxyXG4gICAgY29uc3QgZmFjZUF4ZXMgPSBbXHJcbiAgICAgICAgWzIsIDMsIDFdLCAvLyBGUk9OVFxyXG4gICAgICAgIFs0LCA1LCA3XSwgLy8gQkFDS1xyXG4gICAgICAgIFs3LCA2LCAyXSwgLy8gVE9QXHJcbiAgICAgICAgWzEsIDAsIDRdLCAvLyBCT1RUT01cclxuICAgICAgICBbMSwgNCwgMl0sIC8vIFJJR0hUXHJcbiAgICAgICAgWzUsIDAsIDZdLCAgLy8gTEVGVFxyXG4gICAgXTtcclxuXHJcbiAgICBjb25zdCBmYWNlTm9ybWFscyA9IFtcclxuICAgICAgICBbMCwgMCwgMV0sIC8vIEZST05UXHJcbiAgICAgICAgWzAsIDAsIC0xXSwgLy8gQkFDS1xyXG4gICAgICAgIFswLCAxLCAwXSwgLy8gVE9QXHJcbiAgICAgICAgWzAsIC0xLCAwXSwgLy8gQk9UVE9NXHJcbiAgICAgICAgWzEsIDAsIDBdLCAvLyBSSUdIVFxyXG4gICAgICAgIFstMSwgMCwgMF0sICAvLyBMRUZUXHJcbiAgICBdO1xyXG5cclxuICAgIGNvbnN0IHBvc2l0aW9uczogbnVtYmVyW10gPSBbXTtcclxuICAgIGNvbnN0IG5vcm1hbHM6IG51bWJlcltdID0gW107XHJcbiAgICBjb25zdCB1dnM6IG51bWJlcltdID0gW107XHJcbiAgICBjb25zdCBpbmRpY2VzOiBudW1iZXJbXSA9IFtdO1xyXG4gICAgY29uc3QgbWluUG9zID0gbmV3IFZlYzMoLWh3LCAtaGgsIC1obCk7XHJcbiAgICBjb25zdCBtYXhQb3MgPSBuZXcgVmVjMyhodywgaGgsIGhsKTtcclxuICAgIGNvbnN0IGJvdW5kaW5nUmFkaXVzID0gTWF0aC5zcXJ0KGh3ICogaHcgKyBoaCAqIGhoICsgaGwgKiBobCk7XHJcblxyXG4gICAgZnVuY3Rpb24gX2J1aWxkUGxhbmUgKHNpZGU6IG51bWJlciwgdVNlZ21lbnRzOiBudW1iZXIsIHZTZWdtZW50czogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IHU6IG51bWJlcjtcclxuICAgICAgICBsZXQgdjogbnVtYmVyO1xyXG4gICAgICAgIGxldCBpeDogbnVtYmVyO1xyXG4gICAgICAgIGxldCBpeTogbnVtYmVyO1xyXG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHBvc2l0aW9ucy5sZW5ndGggLyAzO1xyXG4gICAgICAgIGNvbnN0IGZhY2VBeGUgPSBmYWNlQXhlc1tzaWRlXTtcclxuICAgICAgICBjb25zdCBmYWNlTm9ybWFsID0gZmFjZU5vcm1hbHNbc2lkZV07XHJcblxyXG4gICAgICAgIGZvciAoaXkgPSAwOyBpeSA8PSB2U2VnbWVudHM7IGl5KyspIHtcclxuICAgICAgICAgICAgZm9yIChpeCA9IDA7IGl4IDw9IHVTZWdtZW50czsgaXgrKykge1xyXG4gICAgICAgICAgICAgICAgdSA9IGl4IC8gdVNlZ21lbnRzO1xyXG4gICAgICAgICAgICAgICAgdiA9IGl5IC8gdlNlZ21lbnRzO1xyXG5cclxuICAgICAgICAgICAgICAgIFZlYzMubGVycCh0ZW1wMSwgY29ybmVyc1tmYWNlQXhlWzBdXSwgY29ybmVyc1tmYWNlQXhlWzFdXSwgdSk7XHJcbiAgICAgICAgICAgICAgICBWZWMzLmxlcnAodGVtcDIsIGNvcm5lcnNbZmFjZUF4ZVswXV0sIGNvcm5lcnNbZmFjZUF4ZVsyXV0sIHYpO1xyXG4gICAgICAgICAgICAgICAgVmVjMy5zdWJ0cmFjdCh0ZW1wMywgdGVtcDIsIGNvcm5lcnNbZmFjZUF4ZVswXV0pO1xyXG4gICAgICAgICAgICAgICAgVmVjMy5hZGQociwgdGVtcDEsIHRlbXAzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbnMucHVzaChyLngsIHIueSwgci56KTtcclxuICAgICAgICAgICAgICAgIG5vcm1hbHMucHVzaChmYWNlTm9ybWFsWzBdLCBmYWNlTm9ybWFsWzFdLCBmYWNlTm9ybWFsWzJdKTtcclxuICAgICAgICAgICAgICAgIHV2cy5wdXNoKHUsIHYpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICgoaXggPCB1U2VnbWVudHMpICYmIChpeSA8IHZTZWdtZW50cykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB1c2VnMSA9IHVTZWdtZW50cyArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYSA9IGl4ICsgaXkgKiB1c2VnMTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBiID0gaXggKyAoaXkgKyAxKSAqIHVzZWcxO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGMgPSAoaXggKyAxKSArIChpeSArIDEpICogdXNlZzE7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZCA9IChpeCArIDEpICsgaXkgKiB1c2VnMTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaW5kaWNlcy5wdXNoKG9mZnNldCArIGEsIG9mZnNldCArIGQsIG9mZnNldCArIGIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGljZXMucHVzaChvZmZzZXQgKyBiLCBvZmZzZXQgKyBkLCBvZmZzZXQgKyBjKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBfYnVpbGRQbGFuZSgwLCB3cywgaHMpOyAvLyBGUk9OVFxyXG4gICAgX2J1aWxkUGxhbmUoNCwgbHMsIGhzKTsgLy8gUklHSFRcclxuICAgIF9idWlsZFBsYW5lKDEsIHdzLCBocyk7IC8vIEJBQ0tcclxuICAgIF9idWlsZFBsYW5lKDUsIGxzLCBocyk7IC8vIExFRlRcclxuICAgIF9idWlsZFBsYW5lKDMsIHdzLCBscyk7IC8vIEJPVFRPTVxyXG4gICAgX2J1aWxkUGxhbmUoMiwgd3MsIGxzKTsgLy8gVE9QXHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBwb3NpdGlvbnMsXHJcbiAgICAgICAgbm9ybWFscyxcclxuICAgICAgICB1dnMsXHJcbiAgICAgICAgaW5kaWNlcyxcclxuICAgICAgICBtaW5Qb3MsXHJcbiAgICAgICAgbWF4UG9zLFxyXG4gICAgICAgIGJvdW5kaW5nUmFkaXVzLFxyXG4gICAgfTtcclxufVxyXG5cclxuY29uc3QgdGVtcDEgPSBuZXcgVmVjMygpO1xyXG5jb25zdCB0ZW1wMiA9IG5ldyBWZWMzKCk7XHJcbmNvbnN0IHRlbXAzID0gbmV3IFZlYzMoKTtcclxuY29uc3QgciA9IG5ldyBWZWMzKCk7XHJcbmNvbnN0IGMwID0gbmV3IFZlYzMoKTtcclxuY29uc3QgYzEgPSBuZXcgVmVjMygpO1xyXG5jb25zdCBjMiA9IG5ldyBWZWMzKCk7XHJcbmNvbnN0IGMzID0gbmV3IFZlYzMoKTtcclxuY29uc3QgYzQgPSBuZXcgVmVjMygpO1xyXG5jb25zdCBjNSA9IG5ldyBWZWMzKCk7XHJcbmNvbnN0IGM2ID0gbmV3IFZlYzMoKTtcclxuY29uc3QgYzcgPSBuZXcgVmVjMygpO1xyXG4iXX0=