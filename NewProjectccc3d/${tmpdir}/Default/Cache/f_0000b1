(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../data/object.js", "../utils/js.js", "../utils/misc.js", "./component-scheduler.js", "../default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../data/object.js"), require("../utils/js.js"), require("../utils/misc.js"), require("./component-scheduler.js"), require("../default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.object, global.js, global.misc, global.componentScheduler, global.defaultConstants);
    global.nodeActivator = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _object, _js, _misc, _componentScheduler, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  var MAX_POOL_SIZE = 4; // @ts-ignore

  var IsPreloadStarted = _object.CCObject.Flags.IsPreloadStarted; // @ts-ignore

  var IsOnLoadStarted = _object.CCObject.Flags.IsOnLoadStarted; // @ts-ignore

  var IsOnLoadCalled = _object.CCObject.Flags.IsOnLoadCalled; // @ts-ignore

  var Deactivating = _object.CCObject.Flags.Deactivating;
  var callPreloadInTryCatch = _defaultConstants.EDITOR && (0, _misc.tryCatchFunctor_EDITOR)('__preload');

  var callOnLoadInTryCatch = _defaultConstants.EDITOR && function (c) {
    try {
      c.onLoad();
    } catch (e) {
      cc._throw(e);
    }

    c._objFlags |= IsOnLoadCalled;

    _onLoadInEditor(c);
  };

  var callOnDestroyInTryCatch = _defaultConstants.EDITOR && (0, _misc.tryCatchFunctor_EDITOR)('onDestroy');
  var callResetInTryCatch = _defaultConstants.EDITOR && (0, _misc.tryCatchFunctor_EDITOR)('resetInEditor');
  var callOnFocusInTryCatch = _defaultConstants.EDITOR && (0, _misc.tryCatchFunctor_EDITOR)('onFocusInEditor');
  var callOnLostFocusInTryCatch = _defaultConstants.EDITOR && (0, _misc.tryCatchFunctor_EDITOR)('onLostFocusInEditor'); // for __preload: used internally, no sort

  var UnsortedInvoker = /*#__PURE__*/function (_LifeCycleInvoker) {
    _inherits(UnsortedInvoker, _LifeCycleInvoker);

    function UnsortedInvoker() {
      _classCallCheck(this, UnsortedInvoker);

      return _possibleConstructorReturn(this, _getPrototypeOf(UnsortedInvoker).apply(this, arguments));
    }

    _createClass(UnsortedInvoker, [{
      key: "add",
      value: function add(comp) {
        this._zero.array.push(comp);
      }
    }, {
      key: "remove",
      value: function remove(comp) {
        this._zero.fastRemove(comp);
      }
    }, {
      key: "cancelInactive",
      value: function cancelInactive(flagToClear) {
        _componentScheduler.LifeCycleInvoker.stableRemoveInactive(this._zero, flagToClear);
      }
    }, {
      key: "invoke",
      value: function invoke() {
        this._invoke(this._zero);

        this._zero.array.length = 0;
      }
    }]);

    return UnsortedInvoker;
  }(_componentScheduler.LifeCycleInvoker);

  var invokePreload = _defaultConstants.SUPPORT_JIT ? (0, _componentScheduler.createInvokeImplJit)('c.__preload();') : (0, _componentScheduler.createInvokeImpl)(function (c) {
    c.__preload();
  }, function (iterator) {
    var array = iterator.array;

    for (iterator.i = 0; iterator.i < array.length; ++iterator.i) {
      array[iterator.i].__preload();
    }
  });
  var invokeOnLoad = _defaultConstants.SUPPORT_JIT ? (0, _componentScheduler.createInvokeImplJit)('c.onLoad();c._objFlags|=' + IsOnLoadCalled, false, IsOnLoadCalled) : (0, _componentScheduler.createInvokeImpl)(function (c) {
    c.onLoad();
    c._objFlags |= IsOnLoadCalled;
  }, function (iterator) {
    var array = iterator.array;

    for (iterator.i = 0; iterator.i < array.length; ++iterator.i) {
      var comp = array[iterator.i];
      comp.onLoad();
      comp._objFlags |= IsOnLoadCalled;
    }
  }, IsOnLoadCalled);
  var activateTasksPool = new _js.Pool(MAX_POOL_SIZE);

  activateTasksPool.get = function getActivateTask() {
    var task = this._get() || {
      preload: new UnsortedInvoker(invokePreload),
      onLoad: new _componentScheduler.OneOffInvoker(invokeOnLoad),
      onEnable: new _componentScheduler.OneOffInvoker(_componentScheduler.invokeOnEnable)
    }; // reset index to -1 so we can skip invoked component in cancelInactive

    task.preload._zero.i = -1;
    var invoker = task.onLoad;
    invoker._zero.i = -1;
    invoker._neg.i = -1;
    invoker._pos.i = -1;
    invoker = task.onEnable;
    invoker._zero.i = -1;
    invoker._neg.i = -1;
    invoker._pos.i = -1;
    return task;
  };

  function _componentCorrupted(node, comp, index) {
    if (_defaultConstants.DEV) {
      cc.errorID(3817, node.name, index);
      console.log('Corrupted component value:', comp);
    }

    if (comp) {
      node._removeComponent(comp);
    } else {
      _js.array.removeAt(node._components, index);
    }
  }

  function _onLoadInEditor(comp) {
    if (comp.onLoad && !cc.engine._isPlaying) {
      // @ts-ignore
      var focused = Editor.Selection.curActivate('node') === comp.node.uuid;

      if (focused) {
        if (comp.onFocusInEditor && callOnFocusInTryCatch) {
          callOnFocusInTryCatch(comp);
        }
      } else {
        if (comp.onLostFocusInEditor && callOnLostFocusInTryCatch) {
          callOnLostFocusInTryCatch(comp);
        }
      }
    }

    if (!_defaultConstants.TEST) {
      // @ts-ignore
      _Scene.AssetsWatcher.start(comp);
    }
  }
  /**
   * @en The class used to perform activating and deactivating operations of node and component.
   * @zh 用于执行节点和组件的激活和停用操作的管理器。
   */


  var NodeActivator = /*#__PURE__*/function () {
    function NodeActivator() {
      _classCallCheck(this, NodeActivator);

      this.resetComp = void 0;
      this.reset();
    }
    /**
     * @en Reset all activation or des-activation tasks
     * @zh 重置所有激活或非激活任务
     */


    _createClass(NodeActivator, [{
      key: "reset",
      value: function reset() {
        // a stack of node's activating tasks
        this._activatingStack = [];
      }
      /**
       * @en Activate or des-activate a node
       * @zh 激活或者停用某个节点
       * @param node Target node
       * @param active Which state to set the node to
       */

    }, {
      key: "activateNode",
      value: function activateNode(node, active) {
        if (active) {
          var task = activateTasksPool.get();

          this._activatingStack.push(task);

          this._activateNodeRecursively(node, task.preload, task.onLoad, task.onEnable);

          task.preload.invoke();
          task.onLoad.invoke();
          task.onEnable.invoke();

          this._activatingStack.pop();

          activateTasksPool.put(task);
        } else {
          this._deactivateNodeRecursively(node); // remove children of this node from previous activating tasks to debounce
          // (this is an inefficient operation but it ensures general case could be implemented in a efficient way)


          var stack = this._activatingStack;

          var _iterator = _createForOfIteratorHelper(stack),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var lastTask = _step.value;
              lastTask.preload.cancelInactive(IsPreloadStarted);
              lastTask.onLoad.cancelInactive(IsOnLoadStarted);
              lastTask.onEnable.cancelInactive();
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }

        node.emit('active-in-hierarchy-changed', node);
      }
      /**
       * @en Activate or des-activate a component
       * @zh 激活或者停用某个组件
       * @param comp Target component
       * @param preloadInvoker The invoker for `_preload` method, normally from [[ComponentScheduler]]
       * @param onLoadInvoker The invoker for `onLoad` method, normally from [[ComponentScheduler]]
       * @param onEnableInvoker The invoker for `onEnable` method, normally from [[ComponentScheduler]]
       */

    }, {
      key: "activateComp",
      value: function activateComp(comp, preloadInvoker, onLoadInvoker, onEnableInvoker) {
        if (!(comp._objFlags & IsPreloadStarted)) {
          comp._objFlags |= IsPreloadStarted;

          if (comp.__preload) {
            if (preloadInvoker) {
              preloadInvoker.add(comp);
            } else {
              comp.__preload();
            }
          }
        }

        if (!(comp._objFlags & IsOnLoadStarted)) {
          comp._objFlags |= IsOnLoadStarted;

          if (comp.onLoad) {
            if (onLoadInvoker) {
              onLoadInvoker.add(comp);
            } else {
              comp.onLoad();
              comp._objFlags |= IsOnLoadCalled;
            }
          } else {
            comp._objFlags |= IsOnLoadCalled;
          }
        }

        if (comp._enabled) {
          var deactivatedOnLoading = !comp.node._activeInHierarchy;

          if (deactivatedOnLoading) {
            return;
          }

          cc.director._compScheduler.enableComp(comp, onEnableInvoker);
        }
      }
      /**
       * @en Destroy a component
       * @zh 销毁一个组件
       * @param comp Target component
       */

    }, {
      key: "destroyComp",
      value: function destroyComp(comp) {
        // ensure onDisable called
        cc.director._compScheduler.disableComp(comp);

        if (comp.onDestroy && comp._objFlags & IsOnLoadCalled) {
          comp.onDestroy();
        }
      }
    }, {
      key: "_activateNodeRecursively",
      value: function _activateNodeRecursively(node, preloadInvoker, onLoadInvoker, onEnableInvoker) {
        if (node._objFlags & Deactivating) {
          // en:
          // Forbid reactive the same node during its deactivating procedure
          // to avoid endless loop and simplify the implementation.
          // zh:
          // 对相同节点而言，无法撤销反激活，防止反激活 - 激活 - 反激活的死循环发生。
          // 这样设计简化了一些引擎的实现，而且对调用者来说能保证反激活操作都能成功。
          cc.errorID(3816, node.name);
          return;
        }

        node._activeInHierarchy = true; // component maybe added during onEnable, and the onEnable of new component is already called
        // so we should record the origin length

        var originCount = node._components.length; // activate components

        for (var i = 0; i < originCount; ++i) {
          var component = node._components[i];

          if (component instanceof cc.Component) {
            this.activateComp(component, preloadInvoker, onLoadInvoker, onEnableInvoker);
          } else {
            _componentCorrupted(node, component, i);

            --i;
            --originCount;
          }
        }

        node._childArrivalOrder = node._children.length; // activate children recursively

        for (var _i = 0, len = node._children.length; _i < len; ++_i) {
          var child = node._children[_i];

          if (child._active) {
            this._activateNodeRecursively(child, preloadInvoker, onLoadInvoker, onEnableInvoker);
          }
        }

        node._onPostActivated(true);
      }
    }, {
      key: "_deactivateNodeRecursively",
      value: function _deactivateNodeRecursively(node) {
        if (_defaultConstants.DEV) {
          cc.assert(!(node._objFlags & Deactivating), 'node should not deactivating'); // ensures _activeInHierarchy is always changing when Deactivating flagged

          cc.assert(node._activeInHierarchy, 'node should not deactivated');
        }

        node._objFlags |= Deactivating;
        node._activeInHierarchy = false; // component maybe added during onEnable, and the onEnable of new component is already called
        // so we should record the origin length

        var originCount = node._components.length;

        for (var c = 0; c < originCount; ++c) {
          var component = node._components[c];

          if (component._enabled) {
            cc.director._compScheduler.disableComp(component);

            if (node._activeInHierarchy) {
              // reactivated from root
              node._objFlags &= ~Deactivating;
              return;
            }
          }
        }

        for (var i = 0, len = node._children.length; i < len; ++i) {
          var child = node._children[i];

          if (child._activeInHierarchy) {
            this._deactivateNodeRecursively(child);

            if (node._activeInHierarchy) {
              // reactivated from root
              node._objFlags &= ~Deactivating;
              return;
            }
          }
        }

        node._onPostActivated(false);

        node._objFlags &= ~Deactivating;
      }
    }]);

    return NodeActivator;
  }();

  _exports.default = NodeActivator;

  if (_defaultConstants.EDITOR) {
    NodeActivator.prototype.activateComp = function (comp, preloadInvoker, onLoadInvoker, onEnableInvoker) {
      if (cc.engine._isPlaying || comp.constructor._executeInEditMode) {
        if (!(comp._objFlags & IsPreloadStarted)) {
          comp._objFlags |= IsPreloadStarted;

          if (comp.__preload) {
            if (preloadInvoker) {
              preloadInvoker.add(comp);
            } else if (callPreloadInTryCatch) {
              callPreloadInTryCatch(comp);
            }
          }
        }

        if (!(comp._objFlags & IsOnLoadStarted)) {
          comp._objFlags |= IsOnLoadStarted;

          if (comp.onLoad) {
            if (onLoadInvoker) {
              onLoadInvoker.add(comp);
            } else if (callOnLoadInTryCatch) {
              callOnLoadInTryCatch(comp);
            }
          } else {
            comp._objFlags |= IsOnLoadCalled;

            _onLoadInEditor(comp);
          }
        }
      }

      if (comp._enabled) {
        var deactivatedOnLoading = !comp.node._activeInHierarchy;

        if (deactivatedOnLoading) {
          return;
        }

        cc.director._compScheduler.enableComp(comp, onEnableInvoker);
      }
    };

    NodeActivator.prototype.destroyComp = function (comp) {
      // ensure onDisable called
      cc.director._compScheduler.disableComp(comp);

      if (comp.onDestroy && comp._objFlags & IsOnLoadCalled) {
        if (cc.engine._isPlaying || comp.constructor._executeInEditMode) {
          callOnDestroyInTryCatch && callOnDestroyInTryCatch(comp);
        }
      }
    };

    NodeActivator.prototype.resetComp = function (comp) {
      if (comp.resetInEditor && callResetInTryCatch) {
        callResetInTryCatch(comp);
      }
    };
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,