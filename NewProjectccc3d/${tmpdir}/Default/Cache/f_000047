(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../3d/index.js", "../../3d/misc/utils.js", "../../assets/material.js", "../../gfx/define.js", "../../math/index.js", "../../scene-graph/index.js", "../../scene-graph/node.js", "./perf-counter.js", "../../default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../3d/index.js"), require("../../3d/misc/utils.js"), require("../../assets/material.js"), require("../../gfx/define.js"), require("../../math/index.js"), require("../../scene-graph/index.js"), require("../../scene-graph/node.js"), require("./perf-counter.js"), require("../../default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.utils, global.material, global.define, global.index, global.index, global.node, global.perfCounter, global.defaultConstants);
    global.profiler = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _utils, _material2, _define, _index2, _index3, _node, _perfCounter, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.profiler = _exports.Profiler = void 0;

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var _characters = '0123456789. ';
  var _string2offset = {
    '0': 0,
    '1': 1,
    '2': 2,
    '3': 3,
    '4': 4,
    '5': 5,
    '6': 6,
    '7': 7,
    '8': 8,
    '9': 9,
    '.': 10
  };
  var _profileInfo = {
    frame: {
      desc: 'Frame time (ms)',
      min: 0,
      max: 50,
      average: 500
    },
    fps: {
      desc: 'Framerate (FPS)',
      below: 30,
      average: 500,
      isInteger: true
    },
    draws: {
      desc: 'Draw call',
      isInteger: true
    },
    instances: {
      desc: 'Instance Count',
      isInteger: true
    },
    tricount: {
      desc: 'Triangle',
      isInteger: true
    },
    logic: {
      desc: 'Game Logic (ms)',
      min: 0,
      max: 50,
      average: 500,
      color: '#080'
    },
    physics: {
      desc: 'Physics (ms)',
      min: 0,
      max: 50,
      average: 500
    },
    render: {
      desc: 'Renderer (ms)',
      min: 0,
      max: 50,
      average: 500,
      color: '#f90'
    },
    textureMemory: {
      desc: 'GFX Texture Mem(M)'
    },
    bufferMemory: {
      desc: 'GFX Buffer Mem(M)'
    }
  };
  var _constants = {
    fontSize: 24,
    quadHeight: 0.18,
    segmentsPerLine: 8,
    textureWidth: 256,
    textureHeight: 256
  };

  var Profiler = /*#__PURE__*/function () {
    // total lines to display
    // update use time
    function Profiler() {
      _classCallCheck(this, Profiler);

      this._stats = null;
      this.id = '__Profiler__';
      this._showFPS = false;
      this._rootNode = null;
      this._device = null;
      this._canvas = null;
      this._ctx = null;
      this._texture = null;
      this._textureView = null;
      this._region = new _define.GFXBufferTextureCopy();
      this._canvasArr = [];
      this._regionArr = [this._region];
      this.digitsData = null;
      this._canvasDone = false;
      this._statsDone = false;
      this._inited = false;
      this._lineHeight = _constants.textureHeight / (Object.keys(_profileInfo).length + 1);
      this._wordHeight = 0;
      this._eachNumWidth = 0;
      this._totalLines = 0;
      this.lastTime = 0;
      this._uvOffset = [];

      if (!_defaultConstants.TEST) {
        this._canvas = document.createElement('canvas');
        this._ctx = this._canvas.getContext('2d');
        this._region = new _define.GFXBufferTextureCopy();

        this._canvasArr.push(this._canvas);
      }
    }

    _createClass(Profiler, [{
      key: "isShowingStats",
      value: function isShowingStats() {
        return this._showFPS;
      }
    }, {
      key: "hideStats",
      value: function hideStats() {
        if (this._showFPS) {
          if (this._rootNode) {
            this._rootNode.active = false;
          }

          cc.director.off(cc.Director.EVENT_BEFORE_UPDATE, this.beforeUpdate, this);
          cc.director.off(cc.Director.EVENT_AFTER_UPDATE, this.afterUpdate, this);
          cc.director.off(cc.Director.EVENT_BEFORE_PHYSICS, this.beforePhysics, this);
          cc.director.off(cc.Director.EVENT_AFTER_PHYSICS, this.afterPhysics, this);
          cc.director.off(cc.Director.EVENT_BEFORE_DRAW, this.beforeDraw, this);
          cc.director.off(cc.Director.EVENT_AFTER_DRAW, this.afterDraw, this);
          this._showFPS = false;
        }
      }
    }, {
      key: "showStats",
      value: function showStats() {
        if (!this._showFPS) {
          if (!this._device) {
            this._device = cc.director.root.device;
          }

          this.generateCanvas();
          this.generateStats();
          cc.game.once(cc.Game.EVENT_ENGINE_INITED, this.generateNode, this);

          if (this._rootNode) {
            this._rootNode.active = true;
          }

          cc.director.on(cc.Director.EVENT_BEFORE_UPDATE, this.beforeUpdate, this);
          cc.director.on(cc.Director.EVENT_AFTER_UPDATE, this.afterUpdate, this);
          cc.director.on(cc.Director.EVENT_BEFORE_PHYSICS, this.beforePhysics, this);
          cc.director.on(cc.Director.EVENT_AFTER_PHYSICS, this.afterPhysics, this);
          cc.director.on(cc.Director.EVENT_BEFORE_DRAW, this.beforeDraw, this);
          cc.director.on(cc.Director.EVENT_AFTER_DRAW, this.afterDraw, this);
          this._showFPS = true;
          this._canvasDone = true;
          this._statsDone = true;
        }
      }
    }, {
      key: "generateCanvas",
      value: function generateCanvas() {
        if (this._canvasDone) {
          return;
        }

        var textureWidth = _constants.textureWidth,
            textureHeight = _constants.textureHeight;

        if (!this._ctx || !this._canvas) {
          return;
        }

        this._canvas.width = textureWidth;
        this._canvas.height = textureHeight;
        this._canvas.style.width = "".concat(this._canvas.width);
        this._canvas.style.height = "".concat(this._canvas.height);
        this._ctx.font = "".concat(_constants.fontSize, "px Arial");
        this._ctx.textBaseline = 'top';
        this._ctx.fillStyle = '#fff';
        this._texture = this._device.createTexture({
          type: _define.GFXTextureType.TEX2D,
          usage: _define.GFXTextureUsageBit.SAMPLED,
          format: _define.GFXFormat.RGBA8,
          width: textureWidth,
          height: textureHeight,
          mipLevel: 1
        });
        this._textureView = this._device.createTextureView({
          texture: this._texture,
          type: _define.GFXTextureViewType.TV2D,
          format: _define.GFXFormat.RGBA8
        });
        this._region.texExtent.width = textureWidth;
        this._region.texExtent.height = textureHeight;
      }
    }, {
      key: "generateStats",
      value: function generateStats() {
        if (this._statsDone || !this._ctx || !this._canvas) {
          return;
        }

        this._stats = null;
        var now = performance.now();
        this._ctx.textAlign = 'left';
        var i = 0;

        for (var id in _profileInfo) {
          var element = _profileInfo[id];

          this._ctx.fillText(element.desc, 0, i * this._lineHeight);

          element.counter = new _perfCounter.PerfCounter(id, element, now);
          i++;
        }

        this._totalLines = i;
        this._wordHeight = this._totalLines * this._lineHeight / this._canvas.height;
        var offsets = new Array();
        offsets[0] = 0;

        for (var j = 0; j < _characters.length; ++j) {
          var offset = this._ctx.measureText(_characters[j]).width;

          this._eachNumWidth = Math.max(this._eachNumWidth, offset);
          offsets[j + 1] = offsets[j] + offset / this._canvas.width;
        }

        for (var _j = 0; _j < _characters.length; ++_j) {
          this._ctx.fillText(_characters[_j], _j * this._eachNumWidth, this._totalLines * this._lineHeight);
        }

        this._eachNumWidth /= this._canvas.width;
        var len = Math.ceil(offsets.length / 4);

        for (var _j2 = 0; _j2 < len; _j2++) {
          this._uvOffset.push(new _index2.Vec4(offsets[_j2 * 4], offsets[_j2 * 4 + 1], offsets[_j2 * 4 + 2], offsets[_j2 * 4 + 3]));
        }

        this._stats = _profileInfo;
        this._canvasArr[0] = this._canvas;

        this._device.copyTexImagesToTexture(this._canvasArr, this._texture, this._regionArr);
      }
    }, {
      key: "generateNode",
      value: function generateNode() {
        if (this._rootNode && this._rootNode.isValid) {
          return;
        }

        this._rootNode = new _node.Node('PROFILER_NODE');
        cc.game.addPersistRootNode(this._rootNode);
        var cameraNode = new _node.Node('Profiler_Camera');
        cameraNode.setPosition(0, 0, 1);
        cameraNode.parent = this._rootNode;
        var camera = cameraNode.addComponent('cc.CameraComponent');
        camera.projection = _index.CameraComponent.ProjectionType.ORTHO;
        camera.near = 0;
        camera.far = 0;
        camera.orthoHeight = this._device.height;
        camera.visibility = _index3.Layers.BitMask.PROFILER;
        camera.clearFlags = _define.GFXClearFlag.NONE;
        camera.priority = 0xffffffff; // after everything else

        camera.flows = ['UIFlow'];
        var managerNode = new _node.Node('Profiler_Root');
        managerNode.parent = this._rootNode;
        var height = _constants.quadHeight;
        var rowHeight = height / this._totalLines;
        var lWidth = height / this._wordHeight;
        var scale = rowHeight / _constants.fontSize;
        var columnWidth = this._eachNumWidth * this._canvas.width * scale;
        var vertexPos = [0, height, 0, // top-left
        lWidth, height, 0, // top-right
        lWidth, 0, 0, // bottom-right
        0, 0, 0 // bottom-left
        ];
        var vertexindices = [0, 2, 1, 0, 3, 2];
        var vertexUV = [0, 0, -1, 0, 1, 0, -1, 0, 1, this._wordHeight, -1, 0, 0, this._wordHeight, -1, 0];
        var offset = 0;

        for (var i = 0; i < this._totalLines; i++) {
          for (var j = 0; j < _constants.segmentsPerLine; j++) {
            vertexPos.push(lWidth + j * columnWidth, height - i * rowHeight, 0); // tl

            vertexPos.push(lWidth + (j + 1) * columnWidth, height - i * rowHeight, 0); // tr

            vertexPos.push(lWidth + (j + 1) * columnWidth, height - (i + 1) * rowHeight, 0); // br

            vertexPos.push(lWidth + j * columnWidth, height - (i + 1) * rowHeight, 0); // bl

            offset = (i * _constants.segmentsPerLine + j + 1) * 4;
            vertexindices.push(0 + offset, 2 + offset, 1 + offset, 0 + offset, 3 + offset, 2 + offset);
            var idx = i * _constants.segmentsPerLine + j;
            var z = Math.floor(idx / 4);
            var w = idx - z * 4;
            vertexUV.push(0, this._wordHeight, z, w); // tl

            vertexUV.push(this._eachNumWidth, this._wordHeight, z, w); // tr

            vertexUV.push(this._eachNumWidth, 1, z, w); // br

            vertexUV.push(0, 1, z, w); // bl
          }
        }

        var modelCom = managerNode.addComponent('cc.ModelComponent');
        modelCom.mesh = (0, _utils.createMesh)({
          positions: vertexPos,
          indices: vertexindices,
          colors: vertexUV // pack all the necessary info in a_color: { x: u, y: v, z: id.x, w: id.y }

        });

        var _material = new _material2.Material();

        _material.initialize({
          effectName: 'util/profiler'
        });

        _material.setProperty('offset', new _index2.Vec4(-0.9, -0.9, this._eachNumWidth, 0));

        var pass = _material.passes[0];
        var handle = pass.getBinding('mainTexture');
        var binding = pass.getBinding('digits');
        pass.bindTextureView(handle, this._textureView);
        this.digitsData = pass.blocks[binding];
        modelCom.material = _material;
        modelCom.node.layer = _index3.Layers.Enum.PROFILER;
        this._inited = true;
      }
    }, {
      key: "beforeUpdate",
      value: function beforeUpdate() {
        if (!this._stats) {
          return;
        }

        var now = performance.now();

        this._stats.frame.counter.end(now);

        this._stats.frame.counter.start(now);

        this._stats.logic.counter.start(now);
      }
    }, {
      key: "afterUpdate",
      value: function afterUpdate() {
        if (!this._stats) {
          return;
        }

        var now = performance.now();

        if (cc.director.isPaused()) {
          this._stats.frame.counter.start(now);
        } else {
          this._stats.logic.counter.end(now);
        }
      }
    }, {
      key: "beforePhysics",
      value: function beforePhysics() {
        if (!this._stats) {
          return;
        }

        var now = performance.now();

        this._stats.physics.counter.start(now);
      }
    }, {
      key: "afterPhysics",
      value: function afterPhysics() {
        if (!this._stats) {
          return;
        }

        var now = performance.now();

        this._stats.physics.counter.end(now);
      }
    }, {
      key: "beforeDraw",
      value: function beforeDraw() {
        if (!this._stats) {
          return;
        }

        var now = performance.now();

        this._stats.render.counter.start(now);
      }
    }, {
      key: "afterDraw",
      value: function afterDraw() {
        if (!this._stats || !this._inited) {
          return;
        }

        var now = performance.now();

        this._stats.fps.counter.frame(now);

        this._stats.render.counter.end(now);

        if (now - this.lastTime < 500) {
          return;
        }

        this.lastTime = now;
        var device = this._device;
        this._stats.draws.counter.value = device.numDrawCalls;
        this._stats.instances.counter.value = device.numInstances;
        this._stats.bufferMemory.counter.value = device.memoryStatus.bufferSize / (1024 * 1024);
        this._stats.textureMemory.counter.value = device.memoryStatus.textureSize / (1024 * 1024);
        this._stats.tricount.counter.value = device.numTris;
        var i = 0;
        var view = this.digitsData.view;

        for (var id in this._stats) {
          var stat = this._stats[id];
          stat.counter.sample(now);
          var result = stat.counter.human().toString();

          for (var j = _constants.segmentsPerLine - 1; j >= 0; j--) {
            var index = i * _constants.segmentsPerLine + j;
            var character = result[result.length - (_constants.segmentsPerLine - j)];
            var offset = _string2offset[character];

            if (offset === undefined) {
              offset = 11;
            }

            view[index] = offset;
          }

          i++;
        }

        this.digitsData.dirty = true;
      }
    }]);

    return Profiler;
  }();

  _exports.Profiler = Profiler;
  var profiler = new Profiler();
  _exports.profiler = profiler;
  cc.profiler = profiler;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,