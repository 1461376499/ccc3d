(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../math/utils.js", "../utils/array.js", "./playable.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../math/utils.js"), require("../utils/array.js"), require("./playable.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.utils, global.array, global.playable);
    global.crossFade = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _utils, _array, _playable) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.CrossFade = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  var CrossFade = /*#__PURE__*/function (_Playable) {
    _inherits(CrossFade, _Playable);

    function CrossFade() {
      var _this;

      _classCallCheck(this, CrossFade);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(CrossFade).call(this));
      _this._managedStates = [];
      _this._fadings = [];
      return _this;
    }

    _createClass(CrossFade, [{
      key: "update",
      value: function update(deltaTime) {
        if (this.isMotionless) {
          return;
        } // Set all state's weight to 0.


        for (var iManagedState = 0; iManagedState < this._managedStates.length; ++iManagedState) {
          var state = this._managedStates[iManagedState].state;

          if (state) {
            state.weight = 0;
          }
        } // Allocate weights.


        var absoluteWeight = 1.0;
        var deadFadingBegin = this._fadings.length;

        for (var iFading = 0; iFading < this._fadings.length; ++iFading) {
          var fading = this._fadings[iFading];
          fading.easeTime += deltaTime; // We should properly handle the case of
          // `fading.easeTime === 0 && fading.easeDuration === 0`, which yields `NaN`.

          var relativeWeight = fading.easeDuration === 0 ? 1 : (0, _utils.clamp01)(fading.easeTime / fading.easeDuration);
          var weight = relativeWeight * absoluteWeight;
          absoluteWeight = absoluteWeight * (1.0 - relativeWeight);

          if (fading.target.state) {
            fading.target.state.weight += weight;
          }

          if (fading.easeTime >= fading.easeDuration) {
            deadFadingBegin = iFading + 1;
            fading.easeTime = fading.easeDuration;
            break;
          }
        } // Kill fadings having no lifetime.


        if (deadFadingBegin !== this._fadings.length) {
          for (var iDeadFading = deadFadingBegin; iDeadFading < this._fadings.length; ++iDeadFading) {
            var deadFading = this._fadings[iDeadFading];
            --deadFading.target.reference;

            if (deadFading.target.reference <= 0) {
              if (deadFading.target.state) {
                deadFading.target.state.stop();
              }

              (0, _array.remove)(this._managedStates, deadFading.target);
            }
          }

          this._fadings.splice(deadFadingBegin);
        }

        for (var _iManagedState = 0; _iManagedState < this._managedStates.length; ++_iManagedState) {
          var _state = this._managedStates[_iManagedState].state;

          if (_state && _state.isMotionless) {
            _state.sample();
          }
        }
      }
      /**
       * 在指定时间内将从当前动画状态切换到指定的动画状态。
       * @param state 指定的动画状态。
       * @param duration 切换时间。
       */

    }, {
      key: "crossFade",
      value: function crossFade(state, duration) {
        var _target$state;

        if (this._managedStates.length === 0) {
          // If we are cross fade from a "initial" pose,
          // we do not use the duration.
          // It's meaning-less and may get a bad visual effect.
          duration = 0;
        }

        if (duration === 0) {
          this.clear();
        }

        var target = this._managedStates.find(function (weightedState) {
          return weightedState.state === state;
        });

        if (!target) {
          target = {
            state: state,
            reference: 0
          };

          if (state) {
            state.play();
          }

          this._managedStates.push(target);
        } else if ((_target$state = target.state) === null || _target$state === void 0 ? void 0 : _target$state.isMotionless) {
          target.state.play();
        }

        ++target.reference;

        this._fadings.unshift({
          easeDuration: duration,
          easeTime: 0,
          target: target
        });
      }
    }, {
      key: "clear",
      value: function clear() {
        for (var iManagedState = 0; iManagedState < this._managedStates.length; ++iManagedState) {
          var state = this._managedStates[iManagedState].state;

          if (state) {
            state.stop();
          }
        }

        this._managedStates.length = 0;
        this._fadings.length = 0;
      }
    }, {
      key: "onPlay",
      value: function onPlay() {
        _get(_getPrototypeOf(CrossFade.prototype), "onPlay", this).call(this);

        cc.director.getAnimationManager().addCrossFade(this);
      }
      /**
       * 停止我们淡入淡出的所有动画状态并停止淡入淡出。
       */

    }, {
      key: "onPause",
      value: function onPause() {
        _get(_getPrototypeOf(CrossFade.prototype), "onPause", this).call(this);

        cc.director.getAnimationManager().removeCrossFade(this);

        for (var iManagedState = 0; iManagedState < this._managedStates.length; ++iManagedState) {
          var state = this._managedStates[iManagedState].state;

          if (state) {
            state.pause();
          }
        }
      }
      /**
       * 恢复我们淡入淡出的所有动画状态并继续淡入淡出。
       */

    }, {
      key: "onResume",
      value: function onResume() {
        _get(_getPrototypeOf(CrossFade.prototype), "onResume", this).call(this);

        cc.director.getAnimationManager().addCrossFade(this);

        for (var iManagedState = 0; iManagedState < this._managedStates.length; ++iManagedState) {
          var state = this._managedStates[iManagedState].state;

          if (state) {
            state.resume();
          }
        }
      }
      /**
       * 停止所有淡入淡出的动画状态。
       */

    }, {
      key: "onStop",
      value: function onStop() {
        _get(_getPrototypeOf(CrossFade.prototype), "onStop", this).call(this);

        cc.director.getAnimationManager().removeCrossFade(this);
        this.clear();
      }
    }]);

    return CrossFade;
  }(_playable.Playable);

  _exports.CrossFade = CrossFade;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,