(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../default-constants.js", "../../gfx/define.js", "../../pipeline/define.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../default-constants.js"), require("../../gfx/define.js"), require("../../pipeline/define.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.defaultConstants, global.define, global.define);
    global.submodel = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _defaultConstants, _define, _define2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SubModel = void 0;

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var SubModel = /*#__PURE__*/function () {
    function SubModel() {
      _classCallCheck(this, SubModel);

      this.priority = _define2.RenderPriority.DEFAULT;
      this._psos = null;
      this._subMeshObject = null;
      this._material = null;
      this._inputAssembler = null;
      this._cmdBuffers = [];
    }

    _createClass(SubModel, [{
      key: "initialize",
      value: function initialize(subMesh, mat, psos) {
        this.psos = psos;
        this.subMeshData = subMesh;
        this.material = mat;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        if (this._inputAssembler) {
          this._inputAssembler.destroy();

          this._inputAssembler = null;
        }

        for (var i = 0; i < this.passes.length; i++) {
          this.passes[i].destroyPipelineState(this._psos[i]);
        }

        var _iterator = _createForOfIteratorHelper(this._cmdBuffers),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var cmdBuffer = _step.value;
            cmdBuffer.destroy();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        this._cmdBuffers.length = 0;
        this._material = null;
      }
    }, {
      key: "updateCommandBuffer",
      value: function updateCommandBuffer() {
        if (!this._material) {
          return;
        }

        for (var i = 0; i < this._material.passes.length; i++) {
          if (_defaultConstants.EDITOR && this._subMeshObject && this._material.passes[i].primitive !== this._subMeshObject.primitiveMode) {
            console.warn("mesh primitive type doesn't match with pass settings");
          }

          this.recordCommandBuffer(i);
        }

        for (var _i = this._cmdBuffers.length - 1; _i >= this._material.passes.length; _i--) {
          var cmdBuff = this._cmdBuffers.pop();

          if (cmdBuff) {
            cmdBuff.destroy();
          }
        }
      }
    }, {
      key: "recordCommandBuffer",
      value: function recordCommandBuffer(index) {
        var device = cc.director.root.device;
        var pso = this._psos[index];

        if (this._cmdBuffers[index] == null) {
          var cmdBufferInfo = {
            allocator: device.commandAllocator,
            type: _define.GFXCommandBufferType.SECONDARY
          };
          this._cmdBuffers[index] = device.createCommandBuffer(cmdBufferInfo);
        } else if (this._cmdBuffers[index].status === _define.GFXStatus.UNREADY) {
          this._cmdBuffers[index].initialize({
            allocator: device.commandAllocator,
            type: _define.GFXCommandBufferType.SECONDARY
          });
        }

        var inputAssembler = this._inputAssembler;
        var cmdBuff = this._cmdBuffers[index];
        cmdBuff.begin();
        cmdBuff.bindPipelineState(pso);
        cmdBuff.bindBindingLayout(pso.pipelineLayout.layouts[0]);
        cmdBuff.bindInputAssembler(inputAssembler);
        cmdBuff.draw(inputAssembler);
        cmdBuff.end();
      }
    }, {
      key: "psos",
      set: function set(val) {
        this._psos = val;
      },
      get: function get() {
        return this._psos;
      }
    }, {
      key: "subMeshData",
      set: function set(sm) {
        if (this._inputAssembler) {
          this._inputAssembler.destroy();
        }

        this._subMeshObject = sm;

        if (this._inputAssembler) {
          this._inputAssembler.initialize(sm);
        } else {
          this._inputAssembler = cc.director.root.device.createInputAssembler(sm);
        }
      },
      get: function get() {
        return this._subMeshObject;
      }
    }, {
      key: "material",
      set: function set(material) {
        this._material = material;

        if (material == null) {
          return;
        }

        this.updateCommandBuffer();
      },
      get: function get() {
        return this._material;
      }
    }, {
      key: "passes",
      get: function get() {
        return this._material.passes;
      }
    }, {
      key: "inputAssembler",
      get: function get() {
        return this._inputAssembler;
      }
    }, {
      key: "commandBuffers",
      get: function get() {
        return this._cmdBuffers;
      }
    }]);

    return SubModel;
  }();

  _exports.SubModel = SubModel;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,