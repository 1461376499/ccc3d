(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../core/assets/index.js", "../../core/components/index.js", "../../core/data/class-decorator.js", "../../core/platform/index.js", "../../core/math/index.js", "../../core/value-types/enum.js", "../../core/math/utils.js", "../../core/scene-graph/node.js", "./sprite-component.js", "../../core/components/ui-base/ui-render-component.js", "../../core/default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../core/assets/index.js"), require("../../core/components/index.js"), require("../../core/data/class-decorator.js"), require("../../core/platform/index.js"), require("../../core/math/index.js"), require("../../core/value-types/enum.js"), require("../../core/math/utils.js"), require("../../core/scene-graph/node.js"), require("./sprite-component.js"), require("../../core/components/ui-base/ui-render-component.js"), require("../../core/default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.index, global.classDecorator, global.index, global.index, global._enum, global.utils, global.node, global.spriteComponent, global.uiRenderComponent, global.defaultConstants);
    global.buttonComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _index2, _classDecorator, _index3, _index4, _enum, _utils, _node, _spriteComponent, _uiRenderComponent, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ButtonComponent = _exports.EventType = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _class3, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  var _tempColor = new _index4.Color();
  /**
   * @en Enum for transition type.
   *
   * @zh 过渡类型。
   */


  var Transition;

  (function (Transition) {
    Transition[Transition["NONE"] = 0] = "NONE";
    Transition[Transition["COLOR"] = 1] = "COLOR";
    Transition[Transition["SPRITE"] = 2] = "SPRITE";
    Transition[Transition["SCALE"] = 3] = "SCALE";
  })(Transition || (Transition = {}));

  (0, _enum.ccenum)(Transition);
  var State;

  (function (State) {
    State["NORMAL"] = "normal";
    State["HOVER"] = "hover";
    State["PRESSED"] = "pressed";
    State["DISABLED"] = "disabled";
  })(State || (State = {}));

  var EventType;
  /**
   * @en
   * Button has 4 Transition types<br/>
   * When Button state changed:<br/>
   *  If Transition type is Button.Transition.NONE, Button will do nothing<br/>
   *  If Transition type is Button.Transition.COLOR, Button will change target's color<br/>
   *  If Transition type is Button.Transition.SPRITE, Button will change target Sprite's sprite<br/>
   *  If Transition type is Button.Transition.SCALE, Button will change target node's scale<br/>
   *
   * Button will trigger 5 events:<br/>
   *  Button.EVENT_TOUCH_DOWN<br/>
   *  Button.EVENT_TOUCH_UP<br/>
   *  Button.EVENT_HOVER_IN<br/>
   *  Button.EVENT_HOVER_MOVE<br/>
   *  Button.EVENT_HOVER_OUT<br/>
   *  User can get the current clicked node with 'event.target' from event object which is passed as parameter in the callback function of click event.
   *
   * @zh
   * 按钮组件。可以被按下,或者点击。<br/>
   *
   * 按钮可以通过修改 Transition 来设置按钮状态过渡的方式：<br/>
   *   -Button.Transition.NONE   // 不做任何过渡<br/>
   *   -Button.Transition.COLOR  // 进行颜色之间过渡<br/>
   *   -Button.Transition.SPRITE // 进行精灵之间过渡<br/>
   *   -Button.Transition.SCALE // 进行缩放过渡<br/>
   *
   * 按钮可以绑定事件（但是必须要在按钮的 Node 上才能绑定事件）：<br/>
   *   // 以下事件可以在全平台上都触发<br/>
   *   -cc.Node.EventType.TOUCH_START  // 按下时事件<br/>
   *   -cc.Node.EventType.TOUCH_Move   // 按住移动后事件<br/>
   *   -cc.Node.EventType.TOUCH_END    // 按下后松开后事件<br/>
   *   -cc.Node.EventType.TOUCH_CANCEL // 按下取消事件<br/>
   *   // 以下事件只在 PC 平台上触发<br/>
   *   -cc.Node.EventType.MOUSE_DOWN  // 鼠标按下时事件<br/>
   *   -cc.Node.EventType.MOUSE_MOVE  // 鼠标按住移动后事件<br/>
   *   -cc.Node.EventType.MOUSE_ENTER // 鼠标进入目标事件<br/>
   *   -cc.Node.EventType.MOUSE_LEAVE // 鼠标离开目标事件<br/>
   *   -cc.Node.EventType.MOUSE_UP    // 鼠标松开事件<br/>
   *   -cc.Node.EventType.MOUSE_WHEEL // 鼠标滚轮事件<br/>
   *
   * @example
   * ```typescript
   * // Add an event to the button.
   * button.node.on(cc.Node.EventType.TOUCH_START, (event) => {
   *     cc.log("This is a callback after the trigger event");
   * });
   * // You could also add a click event
   * //Note: In this way, you can't get the touch event info, so use it wisely.
   * button.node.on('click', (button) => {
   *    //The event is a custom event, you could get the Button component via first argument
   * })
   * ```
   */

  _exports.EventType = EventType;

  (function (EventType) {
    EventType["CLICK"] = "click";
  })(EventType || (_exports.EventType = EventType = {}));

  var ButtonComponent = (_dec = (0, _classDecorator.ccclass)('cc.ButtonComponent'), _dec2 = (0, _classDecorator.help)('i18n:cc.ButtonComponent'), _dec3 = (0, _classDecorator.executionOrder)(110), _dec4 = (0, _classDecorator.menu)('UI/Button'), _dec5 = (0, _classDecorator.requireComponent)(_index2.UITransformComponent), _dec6 = (0, _classDecorator.property)({
    type: _node.Node,
    displayOrder: 0,
    tooltip: '指定 Button 背景节点，Button 状态改变时会修改此节点的 Color 或 Sprite 属性'
  }), _dec7 = (0, _classDecorator.property)({
    displayOrder: 1,
    tooltip: '按钮是否可交互，这一项未选中时，按钮处在禁用状态'
  }), _dec8 = (0, _classDecorator.property)({
    type: Transition,
    displayOrder: 2,
    tooltip: '按钮状态变化时的过渡类型'
  }), _dec9 = (0, _classDecorator.property)({
    tooltip: '普通状态的按钮背景颜色'
  }), _dec10 = (0, _classDecorator.property)({
    tooltip: '按下状态的按钮背景颜色'
  }), _dec11 = (0, _classDecorator.property)({
    tooltip: '悬停状态的按钮背景颜色'
  }), _dec12 = (0, _classDecorator.property)({
    tooltip: '禁用状态的按钮背景颜色'
  }), _dec13 = (0, _classDecorator.property)({
    min: 0,
    max: 10,
    tooltip: '按钮颜色变化或者缩放变化的过渡时间'
  }), _dec14 = (0, _classDecorator.property)({
    tooltip: '当用户点击按钮后，按钮会缩放到一个值，这个值等于 Button 原始 scale * zoomScale。'
  }), _dec15 = (0, _classDecorator.property)({
    type: _index.SpriteFrame,
    tooltip: '普通状态的按钮背景图资源'
  }), _dec16 = (0, _classDecorator.property)({
    type: _index.SpriteFrame,
    tooltip: '按下状态的按钮背景图资源'
  }), _dec17 = (0, _classDecorator.property)({
    type: _index.SpriteFrame,
    tooltip: '悬停状态的按钮背景图资源'
  }), _dec18 = (0, _classDecorator.property)({
    type: _index.SpriteFrame,
    tooltip: '禁用状态的按钮背景图资源'
  }), _dec19 = (0, _classDecorator.property)({
    type: [_index2.EventHandler],
    displayOrder: 20,
    tooltip: '按钮点击事件的列表。先将数量改为1或更多，就可以为每个点击事件设置接受者和处理方法'
  }), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = _dec5(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Component) {
    _inherits(ButtonComponent, _Component);

    function ButtonComponent() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, ButtonComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ButtonComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _initializerDefineProperty(_this, "clickEvents", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_interactable", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_transition", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_normalColor", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_hoverColor", _descriptor5, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_pressColor", _descriptor6, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_disabledColor", _descriptor7, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_normalSprite", _descriptor8, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_hoverSprite", _descriptor9, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_pressedSprite", _descriptor10, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_disabledSprite", _descriptor11, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_duration", _descriptor12, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_zoomScale", _descriptor13, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_target", _descriptor14, _assertThisInitialized(_this));

      _this._pressed = false;
      _this._hovered = false;
      _this._fromColor = new _index4.Color();
      _this._toColor = new _index4.Color();
      _this._time = 0;
      _this._transitionFinished = true;
      _this._fromScale = new _index4.Vec3();
      _this._toScale = new _index4.Vec3();
      _this._originalScale = new _index4.Vec3();
      _this._sprite = null;
      _this._targetScale = new _index4.Vec3();
      return _this;
    }

    _createClass(ButtonComponent, [{
      key: "__preload",
      value: function __preload() {
        if (!this.target) {
          this.target = this.node;
        }

        var sprite = this.node.getComponent(_spriteComponent.SpriteComponent);

        if (sprite) {
          this._normalSprite = sprite.spriteFrame;
        }

        this._applyTarget();

        this._updateState();
      }
    }, {
      key: "onEnable",
      value: function onEnable() {
        var _this2 = this;

        // check sprite frames
        //
        if (!_defaultConstants.EDITOR) {
          this._registerEvent();
        } else {
          this.node.on(_spriteComponent.SpriteComponent.EventType.SPRITE_FRAME_CHANGED, function (comp) {
            if (_this2._transition === Transition.SPRITE) {
              _this2._normalSprite = comp.spriteFrame;
            } else {
              // avoid serialization data loss when in no-sprite mode
              _this2._normalSprite = null;
              _this2._hoverSprite = null;
              _this2._pressedSprite = null;
              _this2._disabledSprite = null;
            }
          }, this);
        }
      }
    }, {
      key: "onDisable",
      value: function onDisable() {
        this._resetState();

        if (!_defaultConstants.EDITOR) {
          this.node.off(_index3.SystemEventType.TOUCH_START, this._onTouchBegan, this);
          this.node.off(_index3.SystemEventType.TOUCH_MOVE, this._onTouchMove, this);
          this.node.off(_index3.SystemEventType.TOUCH_END, this._onTouchEnded, this);
          this.node.off(_index3.SystemEventType.TOUCH_CANCEL, this._onTouchCancel, this);
          this.node.off(_index3.SystemEventType.MOUSE_ENTER, this._onMouseMoveIn, this);
          this.node.off(_index3.SystemEventType.MOUSE_LEAVE, this._onMouseMoveOut, this);
        } else {
          this.node.off(_spriteComponent.SpriteComponent.EventType.SPRITE_FRAME_CHANGED);
        }
      }
    }, {
      key: "update",
      value: function update(dt) {
        var target = this._target ? this._target : this.node;

        if (this._transitionFinished) {
          return;
        }

        if (this._transition !== Transition.COLOR && this._transition !== Transition.SCALE) {
          return;
        }

        this._time += dt;
        var ratio = 1.0;

        if (this._duration > 0) {
          ratio = this._time / this._duration;
        }

        if (ratio >= 1) {
          ratio = 1;
          this._transitionFinished = true;
        }

        var renderComp = target.getComponent(_uiRenderComponent.UIRenderComponent);

        if (!renderComp) {
          return;
        }

        if (this._transition === Transition.COLOR) {
          _index4.Color.lerp(_tempColor, this._fromColor, this._toColor, ratio);

          renderComp.color = _tempColor;
        } else if (this.transition === Transition.SCALE) {
          target.getScale(this._targetScale);
          this._targetScale.x = (0, _utils.lerp)(this._fromScale.x, this._toScale.x, ratio);
          this._targetScale.y = (0, _utils.lerp)(this._fromScale.y, this._toScale.y, ratio);
          target.setScale(this._targetScale);
        }
      }
    }, {
      key: "_resizeNodeToTargetNode",
      value: function _resizeNodeToTargetNode() {
        if (_defaultConstants.EDITOR && this._target) {
          this.node.setContentSize(this._target.getContentSize());
        }
      }
    }, {
      key: "_resetState",
      value: function _resetState() {
        this._pressed = false;
        this._hovered = false; // Restore button status

        var target = this._target;

        if (!target) {
          return;
        }

        var renderComp = target.getComponent(_uiRenderComponent.UIRenderComponent);

        if (!renderComp) {
          return;
        }

        var transition = this._transition;

        if (transition === Transition.COLOR && this._interactable) {
          renderComp.color = this._normalColor;
        } else if (transition === Transition.SCALE) {
          target.setScale(this._originalScale);
        }

        this._transitionFinished = true;
      }
    }, {
      key: "_registerEvent",
      value: function _registerEvent() {
        this.node.on(_index3.SystemEventType.TOUCH_START, this._onTouchBegan, this);
        this.node.on(_index3.SystemEventType.TOUCH_MOVE, this._onTouchMove, this);
        this.node.on(_index3.SystemEventType.TOUCH_END, this._onTouchEnded, this);
        this.node.on(_index3.SystemEventType.TOUCH_CANCEL, this._onTouchCancel, this);
        this.node.on(_index3.SystemEventType.MOUSE_ENTER, this._onMouseMoveIn, this);
        this.node.on(_index3.SystemEventType.MOUSE_LEAVE, this._onMouseMoveOut, this);
      }
    }, {
      key: "_getTargetSprite",
      value: function _getTargetSprite(target) {
        var sprite = null;

        if (target) {
          sprite = target.getComponent(_spriteComponent.SpriteComponent);
        }

        return sprite;
      }
    }, {
      key: "_applyTarget",
      value: function _applyTarget() {
        this._sprite = this._getTargetSprite(this._target);

        if (this._target) {
          _index4.Vec3.copy(this._originalScale, this._target.getScale());
        }
      } // touch event handler

    }, {
      key: "_onTouchBegan",
      value: function _onTouchBegan(event) {
        if (!this._interactable || !this.enabledInHierarchy) {
          return;
        }

        this._pressed = true;

        this._updateState();

        if (event) {
          event.propagationStopped = true;
        }
      }
    }, {
      key: "_onTouchMove",
      value: function _onTouchMove(event) {
        if (!this._interactable || !this.enabledInHierarchy || !this._pressed) {
          return;
        } // mobile phone will not emit _onMouseMoveOut,
        // so we have to do hit test when touch moving


        if (!event) {
          return false;
        }

        var touch = event.touch;

        if (!touch) {
          return false;
        }

        var hit = this.node._uiProps.uiTransformComp.isHit(touch.getUILocation());

        if (this._transition === Transition.SCALE && this._target) {
          if (hit) {
            _index4.Vec3.copy(this._fromScale, this._originalScale);

            _index4.Vec3.multiplyScalar(this._toScale, this._originalScale, this._zoomScale);

            this._transitionFinished = false;
          } else {
            this._time = 0;
            this._transitionFinished = true;

            if (this._target) {
              this._target.setScale(this._originalScale);
            }
          }
        } else {
          var state;

          if (hit) {
            state = State.PRESSED;
          } else {
            state = State.NORMAL;
          }

          this._applyTransition(state);
        }

        if (event) {
          event.propagationStopped = true;
        }
      }
    }, {
      key: "_onTouchEnded",
      value: function _onTouchEnded(event) {
        if (!this._interactable || !this.enabledInHierarchy) {
          return;
        }

        if (this._pressed) {
          _index2.EventHandler.emitEvents(this.clickEvents, event);

          this.node.emit(EventType.CLICK, this);
        }

        this._pressed = false;

        this._updateState();

        if (event) {
          event.propagationStopped = true;
        }
      }
    }, {
      key: "_onTouchCancel",
      value: function _onTouchCancel(event) {
        if (!this._interactable || !this.enabledInHierarchy) {
          return;
        }

        this._pressed = false;

        this._updateState();
      }
    }, {
      key: "_onMouseMoveIn",
      value: function _onMouseMoveIn(event) {
        if (this._pressed || !this.interactable || !this.enabledInHierarchy) {
          return;
        }

        if (this._transition === Transition.SPRITE && !this._hoverSprite) {
          return;
        }

        if (!this._hovered) {
          this._hovered = true;

          this._updateState();
        }
      }
    }, {
      key: "_onMouseMoveOut",
      value: function _onMouseMoveOut(event) {
        if (this._hovered) {
          this._hovered = false;

          this._updateState();
        }
      } // state handler

    }, {
      key: "_updateState",
      value: function _updateState() {
        var state = this._getButtonState();

        this._applyTransition(state);
      }
    }, {
      key: "_getButtonState",
      value: function _getButtonState() {
        var state = State.NORMAL;

        if (!this._interactable) {
          state = State.DISABLED;
        } else if (this._pressed) {
          state = State.PRESSED;
        } else if (this._hovered) {
          state = State.HOVER;
        }

        return state.toString();
      }
    }, {
      key: "_updateColorTransition",
      value: function _updateColorTransition(state) {
        var color = this[state + 'Color'];
        var target = this._target;

        if (!target) {
          return;
        }

        var renderComp = target.getComponent(_uiRenderComponent.UIRenderComponent);

        if (!renderComp) {
          return;
        }

        if (_defaultConstants.EDITOR || state === State.DISABLED) {
          renderComp.color = color;
        } else {
          this._fromColor = renderComp.color.clone();
          this._toColor = color;
          this._time = 0;
          this._transitionFinished = false;
        }
      }
    }, {
      key: "_updateSpriteTransition",
      value: function _updateSpriteTransition(state) {
        var sprite = this[state + 'Sprite'];

        if (this._sprite && sprite) {
          this._sprite.spriteFrame = sprite;
        }
      }
    }, {
      key: "_updateScaleTransition",
      value: function _updateScaleTransition(state) {
        if (!this._interactable) {
          return;
        }

        if (state === State.PRESSED) {
          this._zoomUp();
        } else {
          this._zoomBack();
        }
      }
    }, {
      key: "_zoomUp",
      value: function _zoomUp() {
        _index4.Vec3.copy(this._fromScale, this._originalScale);

        _index4.Vec3.multiplyScalar(this._toScale, this._originalScale, this._zoomScale);

        this._time = 0;
        this._transitionFinished = false;
      }
    }, {
      key: "_zoomBack",
      value: function _zoomBack() {
        if (!this._target) {
          return;
        }

        _index4.Vec3.copy(this._fromScale, this._target.getScale());

        _index4.Vec3.copy(this._toScale, this._originalScale);

        this._time = 0;
        this._transitionFinished = false;
      }
    }, {
      key: "_applyTransition",
      value: function _applyTransition(state) {
        var transition = this._transition;

        if (transition === Transition.COLOR) {
          this._updateColorTransition(state);
        } else if (transition === Transition.SPRITE) {
          this._updateSpriteTransition(state);
        } else if (transition === Transition.SCALE) {
          this._updateScaleTransition(state);
        }
      }
    }, {
      key: "target",

      /**
       * @en
       * Transition target.
       * When Button state changed:
       * - If Transition type is Button.Transition.NONE, Button will do nothing.
       * - If Transition type is Button.Transition.COLOR, Button will change target's color.
       * - If Transition type is Button.Transition.SPRITE, Button will change target Sprite's sprite.
       *
       * @zh
       * 需要过渡的目标。<br/>
       * 当前按钮状态改变规则：<br/>
       * - 如果 Transition type 选择 Button.Transition.NONE，按钮不做任何过渡。
       * - 如果 Transition type 选择 Button.Transition.COLOR，按钮会对目标颜色进行颜色之间的过渡。
       * - 如果 Transition type 选择 Button.Transition.Sprite，按钮会对目标 Sprite 进行 Sprite 之间的过渡。
       */
      get: function get() {
        return this._target;
      },
      set: function set(value) {
        if (this._target === value) {
          return;
        }

        this._target = value;

        this._applyTarget();
      }
      /**
       * @en
       * Whether the Button is disabled.
       * If true, the Button will trigger event and do transition.
       *
       * @zh
       * 按钮事件是否被响应，如果为 false，则按钮将被禁用。
       */

    }, {
      key: "interactable",
      get: function get() {
        return this._interactable;
      },
      set: function set(value) {
        // if (EDITOR) {
        //     if (value) {
        //         this._previousNormalSprite = this.normalSprite;
        //     } else {
        //         this.normalSprite = this._previousNormalSprite;
        //     }
        // }
        this._interactable = value;

        this._updateState();

        if (!this._interactable) {
          this._resetState();
        }
      }
    }, {
      key: "_resizeToTarget",
      set: function set(value) {
        if (value) {
          this._resizeNodeToTargetNode();
        }
      }
      /**
       * @en
       * Transition type.
       *
       * @zh
       * 按钮状态改变时过渡方式。
       */

    }, {
      key: "transition",
      get: function get() {
        return this._transition;
      },
      set: function set(value) {
        if (this._transition === value) {
          return;
        }

        this._transition = value;
      } // color transition

      /**
       * @en
       * Normal state color.
       *
       * @zh
       * 普通状态下按钮所显示的颜色。
       */

    }, {
      key: "normalColor",
      get: function get() {
        return this._normalColor;
      },
      set: function set(value) {
        if (this._normalColor === value) {
          return;
        }

        this._normalColor.set(value);

        this._updateState();
      }
      /**
       * @en
       * Pressed state color.
       *
       * @zh
       * 按下状态时按钮所显示的颜色。
       */

    }, {
      key: "pressedColor",
      get: function get() {
        return this._pressColor;
      },
      set: function set(value) {
        if (this._pressColor === value) {
          return;
        }

        this._pressColor.set(value);
      }
      /**
       * @en
       * Hover state color.
       *
       * @zh
       * 悬停状态下按钮所显示的颜色。
       */

    }, {
      key: "hoverColor",
      get: function get() {
        return this._hoverColor;
      },
      set: function set(value) {
        if (this._hoverColor === value) {
          return;
        }

        this._hoverColor.set(value);
      }
      /**
       * @en
       * Disabled state color.
       *
       * @zh
       * 禁用状态下按钮所显示的颜色。
       */

    }, {
      key: "disabledColor",
      get: function get() {
        return this._disabledColor;
      },
      set: function set(value) {
        if (this._disabledColor === value) {
          return;
        }

        this._disabledColor.set(value);

        this._updateState();
      }
      /**
       * @en
       * Color and Scale transition duration.
       *
       * @zh
       * 颜色过渡和缩放过渡时所需时间。
       */

    }, {
      key: "duration",
      get: function get() {
        return this._duration;
      },
      set: function set(value) {
        if (this._duration === value) {
          return;
        }

        this._duration = value;
      }
      /**
       * @en
       * When user press the button, the button will zoom to a scale.
       * The final scale of the button equals (button original scale * zoomScale)
       *
       * @zh
       * 当用户点击按钮后，按钮会缩放到一个值，这个值等于 Button 原始 scale * zoomScale。
       */

    }, {
      key: "zoomScale",
      get: function get() {
        return this._zoomScale;
      },
      set: function set(value) {
        if (this._zoomScale === value) {
          return;
        }

        this._zoomScale = value;
      } // sprite transition

      /**
       * @en
       * Normal state sprite.
       *
       * @zh
       * 普通状态下按钮所显示的 Sprite。
       */

    }, {
      key: "normalSprite",
      get: function get() {
        return this._normalSprite;
      },
      set: function set(value) {
        if (this._normalSprite === value) {
          return;
        }

        this._normalSprite = value;
        var sprite = this.node.getComponent(_spriteComponent.SpriteComponent);

        if (sprite) {
          sprite.spriteFrame = value;
        }

        this._updateState();
      }
      /**
       * @en
       * Pressed state sprite.
       *
       * @zh
       * 按下状态时按钮所显示的 Sprite。
       */

    }, {
      key: "pressedSprite",
      get: function get() {
        return this._pressedSprite;
      },
      set: function set(value) {
        if (this._pressedSprite === value) {
          return;
        }

        this._pressedSprite = value;

        this._updateState();
      }
      /**
       * @en
       * Hover state sprite.
       *
       * @zh
       * 悬停状态下按钮所显示的 Sprite。
       */

    }, {
      key: "hoverSprite",
      get: function get() {
        return this._hoverSprite;
      },
      set: function set(value) {
        if (this._hoverSprite === value) {
          return;
        }

        this._hoverSprite = value;

        this._updateState();
      }
      /**
       * @en
       * Disabled state sprite.
       *
       * @zh
       * 禁用状态下按钮所显示的 Sprite。
       */

    }, {
      key: "disabledSprite",
      get: function get() {
        return this._disabledSprite;
      },
      set: function set(value) {
        if (this._disabledSprite === value) {
          return;
        }

        this._disabledSprite = value;

        this._updateState();
      }
    }]);

    return ButtonComponent;
  }(_index2.Component), _class3.Transition = Transition, _class3.EventType = EventType, _temp), (_applyDecoratedDescriptor(_class2.prototype, "target", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "target"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "interactable", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "interactable"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "transition", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "transition"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "normalColor", [_dec9], Object.getOwnPropertyDescriptor(_class2.prototype, "normalColor"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "pressedColor", [_dec10], Object.getOwnPropertyDescriptor(_class2.prototype, "pressedColor"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "hoverColor", [_dec11], Object.getOwnPropertyDescriptor(_class2.prototype, "hoverColor"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "disabledColor", [_dec12], Object.getOwnPropertyDescriptor(_class2.prototype, "disabledColor"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "duration", [_dec13], Object.getOwnPropertyDescriptor(_class2.prototype, "duration"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "zoomScale", [_dec14], Object.getOwnPropertyDescriptor(_class2.prototype, "zoomScale"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "normalSprite", [_dec15], Object.getOwnPropertyDescriptor(_class2.prototype, "normalSprite"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "pressedSprite", [_dec16], Object.getOwnPropertyDescriptor(_class2.prototype, "pressedSprite"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "hoverSprite", [_dec17], Object.getOwnPropertyDescriptor(_class2.prototype, "hoverSprite"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "disabledSprite", [_dec18], Object.getOwnPropertyDescriptor(_class2.prototype, "disabledSprite"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "clickEvents", [_dec19], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return [];
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_interactable", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_transition", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return Transition.NONE;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_normalColor", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _index4.Color(214, 214, 214, 255);
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_hoverColor", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _index4.Color(211, 211, 211, 255);
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "_pressColor", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _index4.Color.WHITE.clone();
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "_disabledColor", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _index4.Color(124, 124, 124, 255);
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "_normalSprite", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "_hoverSprite", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "_pressedSprite", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "_disabledSprite", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "_duration", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0.1;
    }
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "_zoomScale", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 1.2;
    }
  }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "_target", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  })), _class2)) || _class) || _class) || _class) || _class) || _class);
  _exports.ButtonComponent = ButtonComponent;
  cc.ButtonComponent = ButtonComponent;
  /**
   * @zh
   * 注意：此事件是从该组件所属的 Node 上面派发出来的，需要用 node.on 来监听。
   * @event click
   * @param {Event.EventCustom} event
   * @param {Button} button - The Button component.
   */
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,