(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../data/class-decorator.js", "../utils/murmurhash2_gc.js", "../3d/builtin/init.js", "../gfx/define.js", "../gfx/texture-view.js", "../renderer/core/pass.js", "../renderer/core/sampler-lib.js", "./asset.js", "./effect-asset.js", "./sprite-frame.js", "./texture-base.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../data/class-decorator.js"), require("../utils/murmurhash2_gc.js"), require("../3d/builtin/init.js"), require("../gfx/define.js"), require("../gfx/texture-view.js"), require("../renderer/core/pass.js"), require("../renderer/core/sampler-lib.js"), require("./asset.js"), require("./effect-asset.js"), require("./sprite-frame.js"), require("./texture-base.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.classDecorator, global.murmurhash2_gc, global.init, global.define, global.textureView, global.pass, global.samplerLib, global.asset, global.effectAsset, global.spriteFrame, global.textureBase);
    global.material = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _classDecorator, _murmurhash2_gc, _init, _define, _textureView, _pass2, _samplerLib, _asset, _effectAsset, _spriteFrame, _textureBase) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Material = void 0;

  var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  /**
   * @en
   * The material asset, specifies in details how a model is drawn on screen.
   * @zh
   * 材质资源类，包含模型绘制方式的全部细节描述。
   */
  var Material = (_dec = (0, _classDecorator.ccclass)('cc.Material'), _dec2 = (0, _classDecorator.property)(_effectAsset.EffectAsset), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Asset) {
    _inherits(Material, _Asset);

    _createClass(Material, [{
      key: "effectAsset",

      /**
       * @en The current [[EffectAsset]].
       * @zh 当前使用的 [[EffectAsset]] 资源。
       */
      get: function get() {
        return this._effectAsset;
      }
      /**
       * @en Name of the current [[EffectAsset]].
       * @zh 当前使用的 [[EffectAsset]] 资源名。
       */

    }, {
      key: "effectName",
      get: function get() {
        return this._effectAsset ? this._effectAsset.name : '';
      }
      /**
       * @en The current technique index.
       * @zh 当前的 technique 索引。
       */

    }, {
      key: "technique",
      get: function get() {
        return this._techIdx;
      }
      /**
       * @en The passes defined in this material.
       * @zh 当前正在使用的 pass 数组。
       */

    }, {
      key: "passes",
      get: function get() {
        return this._passes;
      }
      /**
       * @en The hash value of this material.
       * @zh 材质的 hash。
       */

    }, {
      key: "hash",
      get: function get() {
        return this._hash;
      }
    }, {
      key: "parent",
      get: function get() {
        return null;
      }
    }, {
      key: "owner",
      get: function get() {
        return null;
      }
    }], [{
      key: "getHash",
      value: function getHash(material) {
        var str = '';

        var _iterator = _createForOfIteratorHelper(material.passes),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var pass = _step.value;
            str += pass.hash;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return (0, _murmurhash2_gc.murmurhash2_32_gc)(str, 666);
      }
    }]);

    function Material() {
      var _this;

      _classCallCheck(this, Material);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Material).call(this));

      _initializerDefineProperty(_this, "_effectAsset", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_techIdx", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_defines", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_states", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_props", _descriptor5, _assertThisInitialized(_this));

      _this._passes = [];
      _this._hash = 0;
      _this.loaded = false;
      return _this;
    }
    /**
     * @en Initialize this material with the given information.
     * @zh 根据所给信息初始化这个材质，初始化正常结束后材质即可立即用于渲染。
     * @param info Material description info.
     */


    _createClass(Material, [{
      key: "initialize",
      value: function initialize(info) {
        if (!this._defines) {
          this._defines = [];
        }

        if (!this._states) {
          this._states = [];
        }

        if (!this._props) {
          this._props = [];
        }

        if (info.technique !== undefined) {
          this._techIdx = info.technique;
        }

        if (info.effectAsset) {
          this._effectAsset = info.effectAsset;
        } else if (info.effectName) {
          this._effectAsset = _effectAsset.EffectAsset.get(info.effectName);
        }

        if (info.defines) {
          this._prepareInfo(info.defines, this._defines);
        }

        if (info.states) {
          this._prepareInfo(info.states, this._states);
        }

        this._update();
      }
    }, {
      key: "reset",
      value: function reset(info) {
        // consistency with other assets
        this.initialize(info);
      }
      /**
       * @en
       * Destroy the material definitively.<br>
       * Cannot re-initialize after destroy.<br>
       * For re-initialize purposes, call [[Material.initialize]] directly.
       * @zh
       * 彻底销毁材质，注意销毁后无法重新初始化。<br>
       * 如需重新初始化材质，不必先调用 destroy。
       */

    }, {
      key: "destroy",
      value: function destroy() {
        this._doDestroy();

        return _get(_getPrototypeOf(Material.prototype), "destroy", this).call(this);
      }
      /**
       * @en Recompile the shader with the specified macro overrides. Allowed only on material instances.
       * @zh 使用指定预处理宏重新编译当前 pass（数组）中的 shader。只允许对材质实例执行。
       * @param overrides The shader macro override values.
       * @param passIdx The pass to apply to. Will apply to all passes if not specified.
       */

    }, {
      key: "recompileShaders",
      value: function recompileShaders(overrides, passIdx) {
        console.warn('Shaders in material asset \'' + this.name + '\' cannot be modified at runtime, please instantiate the material first.');
      }
      /**
       * @en Override the passes with the specified pipeline states. Allowed only on material instances.
       * @zh 使用指定管线状态重载当前的 pass（数组）。只允许对材质实例执行。
       * @param overrides The pipeline state override values.
       * @param passIdx The pass to apply to. Will apply to all passes if not specified.
       */

    }, {
      key: "overridePipelineStates",
      value: function overridePipelineStates(overrides, passIdx) {
        console.warn('Pipeline states in material asset \'' + this.name + '\' cannot be modified at runtime, please instantiate the material first.');
      }
      /**
       * @en Callback function after material is loaded in [[Loader]]. Initialize the resources automatically.
       * @zh 通过 [[Loader]] 加载完成时的回调，将自动初始化材质资源。
       */

    }, {
      key: "onLoaded",
      value: function onLoaded() {
        this._update();

        this.loaded = true;
        this.emit('load');
      }
      /**
       * @en Reset all the uniforms to the default value specified in [[EffectAsset]].
       * @zh 重置材质的所有 uniform 参数数据为 [[EffectAsset]] 中的默认初始值。
       * @param clearPasses Will the rendering data be cleared too?
       */

    }, {
      key: "resetUniforms",
      value: function resetUniforms() {
        var clearPasses = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        this._props.length = this._passes.length;

        for (var i = 0; i < this._props.length; i++) {
          this._props[i] = {};
        }

        if (!clearPasses) {
          return;
        }

        var _iterator2 = _createForOfIteratorHelper(this._passes),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var pass = _step2.value;
            pass.resetUBOs();
            pass.resetTextures();
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
      /**
       * @en
       * Convenient property setter provided for quick material setup.<br>
       * [[Pass.setUniform]] should be used instead if you need to do per-frame uniform update.
       * @zh
       * 设置材质 uniform 参数的统一入口。<br>
       * 注意如果需要每帧更新 uniform，建议使用 [[Pass.setUniform]] 以获得更好的性能。
       * @param name The target uniform name.
       * @param val The target value.
       * @param passIdx The pass to apply to. Will apply to all passes if not specified.
       */

    }, {
      key: "setProperty",
      value: function setProperty(name, val, passIdx) {
        var success = false;

        if (passIdx === undefined) {
          // try set property for all applicable passes
          var passes = this._passes;
          var len = passes.length;

          for (var i = 0; i < len; i++) {
            var pass = passes[i];

            if (this._uploadProperty(pass, name, val)) {
              this._props[i][name] = val;
              success = true;
            }
          }
        } else {
          if (passIdx >= this._passes.length) {
            console.warn("illegal pass index: ".concat(passIdx, "."));
            return;
          }

          var _pass = this._passes[passIdx];

          if (this._uploadProperty(_pass, name, val)) {
            this._props[passIdx][name] = val;
            success = true;
          }
        }

        if (!success) {
          console.warn("illegal property name: ".concat(name, "."));
          return;
        }
      }
      /**
       * @en
       * Get the specified uniform value for this material.<br>
       * Note that only uniforms set through [[Material.setProperty]] can be acquired here.<br>
       * For the complete rendering data, use [[Pass.getUniform]] instead.
       * @zh
       * 获取当前材质的指定 uniform 参数的值。<br>
       * 注意只有通过 [[Material.setProperty]] 函数设置的参数才能从此函数取出，<br>
       * 如需取出完整的渲染数据，请使用 [[Pass.getUniform]]。
       * @param name The property or uniform name.
       * @param passIdx The target pass index. If not specified, return the first found value in all passes.
       */

    }, {
      key: "getProperty",
      value: function getProperty(name, passIdx) {
        if (passIdx === undefined) {
          // try get property in all possible passes
          var propsArray = this._props;
          var len = propsArray.length;

          for (var i = 0; i < len; i++) {
            var props = propsArray[i];

            for (var p in props) {
              if (p === name) {
                return props[p];
              }
            }
          }
        } else {
          if (passIdx >= this._props.length) {
            console.warn("illegal pass index: ".concat(passIdx, "."));
            return null;
          }

          var _props = this._props[passIdx];

          for (var _p in _props) {
            if (_p === name) {
              return _props[_p];
            }
          }
        }

        return null;
      }
      /**
       * @en Copy the target material.
       * @zh 复制目标材质到当前实例。
       * @param mat The material to be copied.
       */

    }, {
      key: "copy",
      value: function copy(mat) {
        this._techIdx = mat._techIdx;
        this._props.length = mat._props.length;

        for (var i = 0; i < mat._props.length; i++) {
          this._props[i] = Object.assign({}, mat._props[i]);
        }

        this._defines.length = mat._defines.length;

        for (var _i = 0; _i < mat._defines.length; _i++) {
          this._defines[_i] = Object.assign({}, mat._defines[_i]);
        }

        this._states.length = mat._states.length;

        for (var _i2 = 0; _i2 < mat._states.length; _i2++) {
          this._states[_i2] = Object.assign({}, mat._states[_i2]);
        }

        this._effectAsset = mat._effectAsset;

        this._update();
      }
    }, {
      key: "_prepareInfo",
      value: function _prepareInfo(patch, cur) {
        if (!Array.isArray(patch)) {
          // fill all the passes if not specified
          var len = this._effectAsset ? this._effectAsset.techniques[this._techIdx].passes.length : 1;
          patch = Array(len).fill(patch);
        }

        for (var i = 0; i < patch.length; ++i) {
          Object.assign(cur[i] || (cur[i] = {}), patch[i]);
        }
      }
    }, {
      key: "_createPasses",
      value: function _createPasses() {
        var tech = this._effectAsset.techniques[this._techIdx || 0];

        if (!tech) {
          return [];
        }

        var passNum = tech.passes.length;
        var passes = [];

        for (var k = 0; k < passNum; ++k) {
          var passInfo = tech.passes[k];
          var defs = passInfo.defines = this._defines.length > k ? this._defines[k] : {};

          if (passInfo["switch"] && !defs[passInfo["switch"]]) {
            continue;
          }

          passInfo.stateOverrides = this._states.length > k ? this._states[k] : {};
          passInfo.idxInTech = k;
          var pass = new _pass2.Pass(cc.director.root.device);
          pass.initialize(passInfo);
          passes.push(pass);
        }

        return passes;
      }
    }, {
      key: "_update",
      value: function _update() {
        var _this2 = this;

        var keepProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        if (this._effectAsset) {
          if (this._passes && this._passes.length) {
            var _iterator3 = _createForOfIteratorHelper(this._passes),
                _step3;

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var pass = _step3.value;
                pass.destroy();
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }
          }

          this._passes = this._createPasses(); // handle property values

          var totalPasses = this._effectAsset.techniques[this._techIdx].passes.length;
          this._props.length = totalPasses;

          if (keepProps) {
            this._passes.forEach(function (pass, i) {
              var props = _this2._props[pass.idxInTech];

              if (!props) {
                props = _this2._props[i] = {};
              }

              for (var p in props) {
                _this2._uploadProperty(pass, p, props[p]);
              }
            });
          } else {
            for (var i = 0; i < this._props.length; i++) {
              this._props[i] = {};
            }
          }
        } else {
          // ugly yellow indicating missing effect
          var missing = _init.builtinResMgr.get('missing-effect-material');

          if (missing) {
            this._passes = missing._passes.slice();
          }
        }

        this._hash = Material.getHash(this);
      }
    }, {
      key: "_uploadProperty",
      value: function _uploadProperty(pass, name, val) {
        var handle = pass.getHandle(name);

        if (handle === undefined) {
          return false;
        }

        var bindingType = _pass2.Pass.getBindingTypeFromHandle(handle);

        if (bindingType === _define.GFXBindingType.UNIFORM_BUFFER) {
          if (Array.isArray(val)) {
            pass.setUniformArray(handle, val);
          } else if (val !== null) {
            pass.setUniform(handle, val);
          } else {
            pass.resetUniform(name);
          }
        } else if (bindingType === _define.GFXBindingType.SAMPLER) {
          var binding = _pass2.Pass.getBindingFromHandle(handle);

          if (val instanceof _textureView.GFXTextureView) {
            pass.bindTextureView(binding, val);
          } else if (val instanceof _textureBase.TextureBase || val instanceof _spriteFrame.SpriteFrame) {
            var textureView = val.getGFXTextureView();

            if (!textureView || !textureView.texture.width || !textureView.texture.height) {
              // console.warn(`material '${this._uuid}' received incomplete texture asset '${val._uuid}'`);
              return false;
            }

            pass.bindTextureView(binding, textureView);

            if (val instanceof _textureBase.TextureBase) {
              pass.bindSampler(binding, _samplerLib.samplerLib.getSampler(cc.director.root.device, val.getSamplerHash()));
            }
          } else if (!val) {
            pass.resetTexture(name);
          }
        }

        return true;
      }
    }, {
      key: "_doDestroy",
      value: function _doDestroy() {
        if (this._passes && this._passes.length) {
          var _iterator4 = _createForOfIteratorHelper(this._passes),
              _step4;

          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var pass = _step4.value;
              pass.destroy();
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
        }

        this._effectAsset = null;
        this._passes.length = 0;
        this._props.length = 0;
        this._defines.length = 0;
        this._states.length = 0;
      }
    }]);

    return Material;
  }(_asset.Asset), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_effectAsset", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_techIdx", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_defines", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return [];
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_states", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return [];
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_props", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return [];
    }
  })), _class2)) || _class);
  _exports.Material = Material;
  cc.Material = Material;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,