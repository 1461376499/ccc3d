(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../utils/js.js", "../assets/image-asset.js", "./plist-parser.js", "./pipeline.js", "./uuid-loader.js", "./font-loader.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../utils/js.js"), require("../assets/image-asset.js"), require("./plist-parser.js"), require("./pipeline.js"), require("./uuid-loader.js"), require("./font-loader.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.js, global.imageAsset, global.plistParser, global.pipeline, global.uuidLoader, global.fontLoader);
    global.loader = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _js, _imageAsset, _plistParser, _pipeline, _uuidLoader, _fontLoader) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _plistParser = _interopRequireDefault(_plistParser);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function loadNothing() {
    return null;
  }

  function loadJSON(item) {
    if (typeof item.content !== 'string') {
      return new Error('JSON Loader: Input item doesn\'t contain string content');
    }

    try {
      var result = JSON.parse(item.content);
      return result;
    } catch (e) {
      return new Error('JSON Loader: Parse json [' + item.id + '] failed : ' + e);
    }
  }

  function loadImage(item) {
    var loadByDeserializedAsset = item._owner instanceof cc.Asset;

    if (loadByDeserializedAsset) {
      // already has cc.Asset
      return null;
    }

    var image = item.content;

    if (cc.sys.platform !== cc.sys.FB_PLAYABLE_ADS && !(image instanceof Image)) {
      return new Error('Image Loader: Input item doesn\'t contain Image content');
    } // load cc.ImageAsset


    var rawUrl = item.rawUrl;
    var imageAsset = item.imageAsset || new _imageAsset.ImageAsset();
    imageAsset._uuid = item.uuid;
    imageAsset._url = rawUrl;

    imageAsset._setRawAsset(rawUrl, false);

    imageAsset._nativeAsset = image;
    return imageAsset;
  } // If audio is loaded by url directly, than this loader will wrap it into a new cc.AudioClip object.
  // If audio is loaded by deserialized AudioClip, than this loader will be skipped.


  function loadAudioAsAsset(item, callback) {
    var loadByDeserializedAsset = item._owner instanceof cc.Asset;

    if (loadByDeserializedAsset) {
      // already has cc.Asset
      return null;
    }

    var audioClip = new cc.AudioClip();

    audioClip._setRawAsset(item.rawUrl, false);

    audioClip._nativeAsset = item.content;
    return audioClip;
  }

  function loadPlist(item) {
    if (typeof item.content !== 'string') {
      return new Error('Plist Loader: Input item doesn\'t contain string content');
    }

    var result = _plistParser.default.parse(item.content);

    if (result) {
      return result;
    } else {
      return new Error('Plist Loader: Parse [' + item.id + '] failed');
    }
  }

  function loadBinary(item) {
    // Invoke custom handle
    if (item.load) {
      return item.load(item.content);
    } else {
      return item.content;
    }
  } //===============//
  // PVR constants //
  //===============//
  // https://github.com/toji/texture-tester/blob/master/js/webgl-texture-util.js#L424


  var PVR_HEADER_LENGTH = 13; // The header length in 32 bit ints.

  var PVR_MAGIC = 0x03525650; //0x50565203;
  // Offsets into the header array.

  var PVR_HEADER_MAGIC = 0;
  var PVR_HEADER_FORMAT = 2;
  var PVR_HEADER_HEIGHT = 6;
  var PVR_HEADER_WIDTH = 7;
  var PVR_HEADER_MIPMAPCOUNT = 11;
  var PVR_HEADER_METADATA = 12;

  function loadPVRTex(item) {
    var buffer = item.content instanceof ArrayBuffer ? item.content : item.content.buffer; // Get a view of the arrayBuffer that represents the DDS header.

    var header = new Int32Array(buffer, 0, PVR_HEADER_LENGTH); // Do some sanity checks to make sure this is a valid DDS file.

    if (header[PVR_HEADER_MAGIC] === PVR_MAGIC) {
      // Gather other basic metrics and a view of the raw the DXT data.
      var width = header[PVR_HEADER_WIDTH];
      var height = header[PVR_HEADER_HEIGHT];
      var dataOffset = header[PVR_HEADER_METADATA] + 52; // todo: use new Uint8Array(buffer, dataOffset) instead

      buffer = buffer.slice(dataOffset, buffer.byteLength);
      var pvrtcData = new Uint8Array(buffer);
      var pvrAsset = {
        _data: pvrtcData,
        _compressed: true,
        width: width,
        height: height
      };
      return pvrAsset;
    } else if (header[11] === 0x21525650) {
      var headerLength = header[0],
          _height = header[1],
          _width = header[2]; // todo: use new Uint8Array(buffer, headerLength) instead

      buffer = buffer.slice(headerLength, buffer.byteLength);

      var _pvrtcData = new Uint8Array(buffer);

      var _pvrAsset = {
        _data: _pvrtcData,
        _compressed: true,
        width: _width,
        height: _height
      };
      return _pvrAsset;
    } else {
      return new Error("Invalid magic number in PVR header");
    }
  } //===============//
  // ETC constants //
  //===============//


  var ETC_PKM_HEADER_SIZE = 16;
  var ETC_PKM_FORMAT_OFFSET = 6;
  var ETC_PKM_ENCODED_WIDTH_OFFSET = 8;
  var ETC_PKM_ENCODED_HEIGHT_OFFSET = 10;
  var ETC_PKM_WIDTH_OFFSET = 12;
  var ETC_PKM_HEIGHT_OFFSET = 14;
  var ETC1_RGB_NO_MIPMAPS = 0;
  var ETC2_RGB_NO_MIPMAPS = 1;
  var ETC2_RGBA_NO_MIPMAPS = 3;

  function readBEUint16(header, offset) {
    return header[offset] << 8 | header[offset + 1];
  }

  function loadPKMTex(item) {
    var buffer = item.content instanceof ArrayBuffer ? item.content : item.content.buffer;
    var header = new Uint8Array(buffer);
    var format = readBEUint16(header, ETC_PKM_FORMAT_OFFSET);

    if (format !== ETC1_RGB_NO_MIPMAPS && format !== ETC2_RGB_NO_MIPMAPS && format !== ETC2_RGBA_NO_MIPMAPS) {
      return new Error("Invalid magic number in ETC header");
    }

    var width = readBEUint16(header, ETC_PKM_WIDTH_OFFSET);
    var height = readBEUint16(header, ETC_PKM_HEIGHT_OFFSET);
    var encodedWidth = readBEUint16(header, ETC_PKM_ENCODED_WIDTH_OFFSET);
    var encodedHeight = readBEUint16(header, ETC_PKM_ENCODED_HEIGHT_OFFSET); // todo: use new Uint8Array(buffer, ETC_PKM_HEADER_SIZE) instead

    buffer = buffer.slice(ETC_PKM_HEADER_SIZE, buffer.byteLength);
    var etcData = new Uint8Array(buffer);
    var etcAsset = {
      _data: etcData,
      _compressed: true,
      width: width,
      height: height
    };
    return etcAsset;
  }

  var defaultMap = {
    // Images
    'png': loadImage,
    'jpg': loadImage,
    'bmp': loadImage,
    'jpeg': loadImage,
    'gif': loadImage,
    'ico': loadImage,
    'tiff': loadImage,
    'webp': loadImage,
    'image': loadImage,
    'pvr': loadPVRTex,
    'pkm': loadPKMTex,
    // Audio
    'mp3': loadAudioAsAsset,
    'ogg': loadAudioAsAsset,
    'wav': loadAudioAsAsset,
    'm4a': loadAudioAsAsset,
    // json
    'json': loadJSON,
    'ExportJson': loadJSON,
    // plist
    'plist': loadPlist,
    // asset
    'uuid': _uuidLoader.loadUuid,
    'prefab': _uuidLoader.loadUuid,
    'fire': _uuidLoader.loadUuid,
    'scene': _uuidLoader.loadUuid,
    // binary
    'binary': loadBinary,
    'bin': loadBinary,
    // Font
    'font': _fontLoader.loadFont,
    'eot': _fontLoader.loadFont,
    'ttf': _fontLoader.loadFont,
    'woff': _fontLoader.loadFont,
    'svg': _fontLoader.loadFont,
    'ttc': _fontLoader.loadFont,
    'default': loadNothing
  };
  var ID = 'Loader';
  /**
   * @en The loader pipe in {{loader}}, it can load several types of files:
   * 1. Images
   * 2. JSON
   * 3. Plist
   * 4. Audio
   * 5. Font
   * 6. Binary
   * 7. Cocos Assets
   * It will not interfere with items of unknown type.
   * You can pass custom supported types in the {{loader.addLoadHandlers}}.
   * @zh {{loader}} 中的解析加载管线，可以解析加载下列类型的资源：
   * 1. Images
   * 2. JSON
   * 3. Plist
   * 4. Audio
   * 5. Font
   * 6. Binary
   * 7. Cocos Assets
   * 所有未知类型不会被处理，也可以通过 {{loader.addLoadHandlers}} 来定制加载行为
   */

  var Loader = /*#__PURE__*/function () {
    function Loader(extMap) {
      _classCallCheck(this, Loader);

      this.id = ID;
      this.async = true;
      this.pipeline = null;
      this.extMap = void 0;
      this.extMap = (0, _js.mixin)(extMap, defaultMap);
    }
    /**
     * @en Add custom supported types handler or modify existing type handler.
     * @zh 添加自定义支持的类型处理程序或修改现有的类型处理程序。
     * @param extMap Custom supported types with corresponded handler
     * @param extMap Custom supported types with corresponded handler
     */


    _createClass(Loader, [{
      key: "addHandlers",
      value: function addHandlers(extMap) {
        this.extMap = (0, _js.mixin)(this.extMap, extMap);
      }
    }, {
      key: "handle",
      value: function handle(item, callback) {
        var loadFunc = this.extMap[item.type] || this.extMap['default'];
        return loadFunc.call(this, item, callback);
      }
    }]);

    return Loader;
  }(); // @ts-ignore


  _exports.default = Loader;
  Loader.ID = ID;
  _pipeline.Pipeline.Loader = Loader;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,