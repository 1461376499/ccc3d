(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../utils/misc.js", "../value-types/index.js", "./object.js", "../utils/index.js", "../platform/debug.js", "../default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../utils/misc.js"), require("../value-types/index.js"), require("./object.js"), require("../utils/index.js"), require("../platform/debug.js"), require("../default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.misc, global.index, global.object, global.index, global.debug, global.defaultConstants);
    global.instantiate = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _misc, _index, _object, _index2, _debug, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  // @ts-ignore
  var Destroyed = _object.CCObject.Flags.Destroyed; // @ts-ignore

  var PersistentMask = _object.CCObject.Flags.PersistentMask;
  var objsToClearTmpVar = []; // used to reset _iN$t variable

  /**
   * @en Clones the object `original` and returns the clone, or instantiate a node from the Prefab.
   * @zh 克隆指定的任意类型的对象，或者从 Prefab 实例化出新节点。
   * （Instantiate 时，function 和 dom 等非可序列化对象会直接保留原有引用，Asset 会直接进行浅拷贝，可序列化类型会进行深拷贝。）
   * @param original - An existing object that you want to make a copy of.
   * @return {} the newly instantiated object
   * @example
   * ```typescript
   * // instantiate node from prefab
   * var scene = cc.director.getScene();
   * var node = cc.instantiate(prefabAsset);
   * node.parent = scene;
   * // clone node
   * var scene = cc.director.getScene();
   * var node = cc.instantiate(targetNode);
   * node.parent = scene;
   * ```
   */

  function instantiate(original, internal_force) {
    if (!internal_force) {
      if (_typeof(original) !== 'object' || Array.isArray(original)) {
        if (_defaultConstants.DEV) {
          (0, _debug.errorID)(6900);
        }

        return null;
      }

      if (!original) {
        if (_defaultConstants.DEV) {
          (0, _debug.errorID)(6901);
        }

        return null;
      }

      if (!cc.isValid(original)) {
        if (_defaultConstants.DEV) {
          (0, _debug.errorID)(6902);
        }

        return null;
      }

      if (_defaultConstants.DEV && original instanceof cc.Component) {
        (0, _debug.warn)('Should not instantiate a single cc.Component directly, you must instantiate the entire node.');
      }
    }

    var clone;

    if (original instanceof _object.CCObject) {
      original = original; // Invoke _instantiate method if supplied.
      // The _instantiate callback will be called only on the root object, its associated object will not be called.
      // @callback associated
      // @param {Object} [instantiated] - If supplied, _instantiate just need to initialize the instantiated object,
      //                                  no need to create new object by itself.
      // @returns {Object} - the instantiated object
      // @ts-ignore

      if (original._instantiate) {
        cc.game._isCloning = true; // @ts-ignore

        clone = original._instantiate();
        cc.game._isCloning = false;
        return clone;
      } else if (original instanceof cc.Asset) {
        // 不允许用通用方案实例化资源
        if (_defaultConstants.DEV) {
          (0, _debug.errorID)(6903);
        }

        return null;
      }
    }

    cc.game._isCloning = true;
    clone = doInstantiate(original);
    cc.game._isCloning = false;
    return clone;
  }
  /*
   * @en
   * Do instantiate object, the object to instantiate must be non-nil.
   * @zh
   * 这是一个通用的 instantiate 方法，可能效率比较低。
   * 之后可以给各种类型重写快速实例化的特殊实现，但应该在单元测试中将结果和这个方法的结果进行对比。
   * 值得注意的是，这个方法不可重入。
   * @param obj - 该方法仅供内部使用，用户需负责保证参数合法。什么参数是合法的请参考 cc.instantiate 的实现。
   * @param parent - 只有在该对象下的场景物体会被克隆。
   * @return {Object}
   * @private
   */


  function doInstantiate(obj, parent) {
    if (Array.isArray(obj)) {
      if (_defaultConstants.DEV) {
        (0, _debug.errorID)(6904);
      }

      return null;
    }

    if (_misc.isDomNode && (0, _misc.isDomNode)(obj)) {
      if (_defaultConstants.DEV) {
        (0, _debug.errorID)(6905);
      }

      return null;
    }

    var clone;

    if (obj._iN$t) {
      // User can specify an existing object by assigning the "_iN$t" property.
      // enumerateObject will always push obj to objsToClearTmpVar
      clone = obj._iN$t;
    } else if (obj.constructor) {
      var klass = obj.constructor;
      clone = new klass();
    } else {
      clone = Object.create(null);
    }

    enumerateObject(obj, clone, parent);

    for (var i = 0, len = objsToClearTmpVar.length; i < len; ++i) {
      objsToClearTmpVar[i]._iN$t = null;
    }

    objsToClearTmpVar.length = 0;
    return clone;
  } // @param {Object} obj - The object to instantiate, typeof must be 'object' and should not be an array.


  function enumerateCCClass(klass, obj, clone, parent) {
    var props = klass.__values__; // tslint:disable: prefer-for-of

    for (var p = 0; p < props.length; p++) {
      var key = props[p];
      var value = obj[key];

      if (_typeof(value) === 'object' && value) {
        var initValue = clone[key];

        if (initValue instanceof _index.ValueType && initValue.constructor === value.constructor) {
          initValue.set(value);
        } else {
          clone[key] = value._iN$t || instantiateObj(value, parent);
        }
      } else {
        clone[key] = value;
      }
    }
  }

  function enumerateObject(obj, clone, parent) {
    // 目前使用“_iN$t”这个特殊字段来存实例化后的对象，这样做主要是为了防止循环引用
    // 注意，为了避免循环引用，所有新创建的实例，必须在赋值前被设为源对象的_iN$t
    _index2.js.value(obj, '_iN$t', clone, true);

    objsToClearTmpVar.push(obj);
    var klass = obj.constructor;

    if (cc.Class._isCCClass(klass)) {
      enumerateCCClass(klass, obj, clone, parent);
    } else {
      // primitive javascript object
      for (var key in obj) {
        if (!obj.hasOwnProperty(key) || key.charCodeAt(0) === 95 && key.charCodeAt(1) === 95 && // starts with "__"
        key !== '__type__') {
          continue;
        }

        var value = obj[key];

        if (_typeof(value) === 'object' && value) {
          if (value === clone) {
            continue; // value is obj._iN$t
          }

          clone[key] = value._iN$t || instantiateObj(value, parent);
        } else {
          clone[key] = value;
        }
      }
    }

    if (obj instanceof _object.CCObject) {
      clone._objFlags &= PersistentMask;
    }
  }
  /*
   * @param {Object|Array} obj - the original non-nil object, typeof must be 'object'
   * @return {Object|Array} - the original non-nil object, typeof must be 'object'
   */


  function instantiateObj(obj, parent) {
    if (obj instanceof _index.ValueType) {
      return obj.clone();
    }

    if (obj instanceof cc.Asset) {
      // 所有资源直接引用，不需要拷贝
      return obj;
    }

    var clone;

    if (Array.isArray(obj)) {
      var len = obj.length;
      clone = new Array(len); // @ts-ignore

      obj._iN$t = clone;

      for (var i = 0; i < len; ++i) {
        var value = obj[i];

        if (_typeof(value) === 'object' && value) {
          clone[i] = value._iN$t || instantiateObj(value, parent);
        } else {
          clone[i] = value;
        }
      }

      objsToClearTmpVar.push(obj);
      return clone;
    } else if (obj._objFlags & Destroyed) {
      // the same as cc.isValid(obj)
      return null;
    }

    var ctor = obj.constructor;

    if (cc.Class._isCCClass(ctor)) {
      if (parent) {
        if (parent instanceof cc.Component) {
          if (obj instanceof cc._BaseNode || obj instanceof cc.Component) {
            return obj;
          }
        } else if (parent instanceof cc._BaseNode) {
          if (obj instanceof cc._BaseNode) {
            if (!obj.isChildOf(parent)) {
              // should not clone other nodes if not descendant
              return obj;
            }
          } else if (obj instanceof cc.Component) {
            if (!obj.node.isChildOf(parent)) {
              // should not clone other component if not descendant
              return obj;
            }
          }
        }
      }

      clone = new ctor();
    } else if (ctor === Object) {
      clone = {};
    } else if (!ctor) {
      clone = Object.create(null);
    } else {
      // unknown type
      return obj;
    }

    enumerateObject(obj, clone, parent);
    return clone;
  }

  instantiate._clone = doInstantiate;
  cc.instantiate = instantiate;
  var _default = instantiate;
  _exports.default = _default;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,