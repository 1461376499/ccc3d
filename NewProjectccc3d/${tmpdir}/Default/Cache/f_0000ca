(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../components/system.js", "../data/class-decorator.js", "../director.js", "../platform/debug.js", "../scheduler.js", "../utils/array.js", "./skeletal-animation-blending.js", "../renderer/models/skinning-model.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../components/system.js"), require("../data/class-decorator.js"), require("../director.js"), require("../platform/debug.js"), require("../scheduler.js"), require("../utils/array.js"), require("./skeletal-animation-blending.js"), require("../renderer/models/skinning-model.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.system, global.classDecorator, global.director, global.debug, global.scheduler, global.array, global.skeletalAnimationBlending, global.skinningModel);
    global.animationManager = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _system, _classDecorator, _director, _debug, _scheduler, _array, _skeletalAnimationBlending, _skinningModel) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AnimationManager = void 0;
  _system = _interopRequireDefault(_system);

  var _class, _class2, _temp;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  var AnimationManager = (0, _classDecorator.ccclass)(_class = (_temp = _class2 = /*#__PURE__*/function (_System) {
    _inherits(AnimationManager, _System);

    function AnimationManager() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, AnimationManager);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AnimationManager)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this._anims = new _array.MutableForwardIterator([]);
      _this._delayEvents = [];
      _this._blendStateBuffer = new _skeletalAnimationBlending.BlendStateBuffer();
      _this._crossFades = [];
      _this._sockets = [];
      return _this;
    }

    _createClass(AnimationManager, [{
      key: "addCrossFade",
      value: function addCrossFade(crossFade) {
        this._crossFades.push(crossFade);
      }
    }, {
      key: "removeCrossFade",
      value: function removeCrossFade(crossFade) {
        (0, _array.remove)(this._crossFades, crossFade);
      }
    }, {
      key: "update",
      value: function update(dt) {
        var _delayEvents = this._delayEvents,
            _crossFades = this._crossFades,
            _sockets = this._sockets;

        for (var i = 0, l = _crossFades.length; i < l; i++) {
          _crossFades[i].update(dt);
        }

        var iterator = this._anims;
        var array = iterator.array;

        for (iterator.i = 0; iterator.i < array.length; ++iterator.i) {
          var anim = array[iterator.i];

          if (!anim.isMotionless) {
            anim.update(dt);
          }
        }

        this._blendStateBuffer.apply();

        var stamp = cc.director.getTotalFrames();

        for (var _i = 0, _l = _sockets.length; _i < _l; _i++) {
          var _sockets$_i = _sockets[_i],
              target = _sockets$_i.target,
              transform = _sockets$_i.transform;
          target.matrix = (0, _skinningModel.getWorldMatrix)(transform, stamp);
        }

        for (var _i2 = 0, _l2 = _delayEvents.length; _i2 < _l2; _i2++) {
          var event = _delayEvents[_i2];
          event.fn.apply(event.thisArg, event.args);
        }

        _delayEvents.length = 0;
      }
    }, {
      key: "destruct",
      value: function destruct() {}
    }, {
      key: "addAnimation",
      value: function addAnimation(anim) {
        var index = this._anims.array.indexOf(anim);

        if (index === -1) {
          this._anims.push(anim);
        }
      }
    }, {
      key: "removeAnimation",
      value: function removeAnimation(anim) {
        var index = this._anims.array.indexOf(anim);

        if (index >= 0) {
          this._anims.fastRemoveAt(index);
        } else {
          (0, _debug.errorID)(3907);
        }
      }
    }, {
      key: "pushDelayEvent",
      value: function pushDelayEvent(fn, thisArg, args) {
        this._delayEvents.push({
          fn: fn,
          thisArg: thisArg,
          args: args
        });
      }
    }, {
      key: "addSockets",
      value: function addSockets(root, sockets) {
        var _this2 = this;

        var _loop = function _loop(i) {
          var socket = sockets[i];

          if (_this2._sockets.find(function (s) {
            return s.target === socket.target;
          })) {
            return "continue";
          }

          var targetNode = root.getChildByPath(socket.path);
          var transform = socket.target && targetNode && (0, _skinningModel.getTransform)(targetNode, root);

          if (transform) {
            _this2._sockets.push({
              target: socket.target,
              transform: transform
            });
          }
        };

        for (var i = 0; i < sockets.length; ++i) {
          var _ret = _loop(i);

          if (_ret === "continue") continue;
        }
      }
    }, {
      key: "removeSockets",
      value: function removeSockets(root, sockets) {
        for (var i = 0; i < sockets.length; ++i) {
          var socketToRemove = sockets[i];

          for (var j = 0; j < this._sockets.length; ++j) {
            var socket = this._sockets[j];

            if (socket.target === socketToRemove.target) {
              (0, _skinningModel.deleteTransform)(socket.transform.node);
              this._sockets[j] = this._sockets[this._sockets.length - 1];
              this._sockets.length--;
              break;
            }
          }
        }
      }
    }, {
      key: "blendState",
      get: function get() {
        return this._blendStateBuffer;
      }
    }]);

    return AnimationManager;
  }(_system.default), _class2.ID = 'animation', _temp)) || _class;

  _exports.AnimationManager = AnimationManager;

  _director.director.on(_director.Director.EVENT_INIT, function () {
    var animationManager = new AnimationManager();

    _director.director.registerSystem(AnimationManager.ID, animationManager, _scheduler.Scheduler.PRIORITY_SYSTEM);
  });

  cc.AnimationManager = AnimationManager;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,