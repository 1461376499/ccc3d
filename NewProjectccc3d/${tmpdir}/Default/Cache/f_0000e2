(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../core/3d/builtin/index.js", "../../core/3d/framework/renderable-component.js", "../../core/components/ui-base/ui-render-component.js", "../../core/data/class-decorator.js", "../../core/director.js", "../../core/math/index.js", "../../core/renderer/index.js", "../assembler/graphics/types.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../core/3d/builtin/index.js"), require("../../core/3d/framework/renderable-component.js"), require("../../core/components/ui-base/ui-render-component.js"), require("../../core/data/class-decorator.js"), require("../../core/director.js"), require("../../core/math/index.js"), require("../../core/renderer/index.js"), require("../assembler/graphics/types.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.renderableComponent, global.uiRenderComponent, global.classDecorator, global.director, global.index, global.index, global.types);
    global.graphicsComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _renderableComponent, _uiRenderComponent, _classDecorator, _director, _index2, _index3, _types) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.GraphicsComponent = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _class3, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  var _matInsInfo = {
    parent: null,
    owner: null,
    subModelIdx: 0
  };
  /**
   * @en
   * Graphics component.
   *
   * @zh
   * 自定义图形类
   */

  var GraphicsComponent = (_dec = (0, _classDecorator.ccclass)('cc.GraphicsComponent'), _dec2 = (0, _classDecorator.help)('i18n:cc.GraphicsComponent'), _dec3 = (0, _classDecorator.executionOrder)(110), _dec4 = (0, _classDecorator.menu)('UI/Render/Graphics'), _dec5 = (0, _classDecorator.property)({
    type: _types.LineJoin,
    tooltip: '两条线相交时，所创建的拐角类型'
  }), _dec6 = (0, _classDecorator.property)({
    type: _types.LineCap,
    tooltip: '线条的结束端点样式'
  }), _dec7 = (0, _classDecorator.property)({
    tooltip: '笔触的颜色'
  }), _dec8 = (0, _classDecorator.property)({
    tooltip: '填充绘画的颜色'
  }), _dec9 = (0, _classDecorator.property)({
    tooltip: '最大斜接长度'
  }), _dec10 = (0, _classDecorator.property)({
    override: true,
    visible: false
  }), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_UIRenderComponent) {
    _inherits(GraphicsComponent, _UIRenderComponent);

    _createClass(GraphicsComponent, [{
      key: "lineWidth",

      /**
       * @en
       * Current line width.
       *
       * @zh
       * 当前线条宽度。
       */
      get: function get() {
        return this._lineWidth;
      },
      set: function set(value) {
        this._lineWidth = value;

        if (!this.impl) {
          return;
        }

        this.impl.lineWidth = value;
      }
      /**
       * @en
       * Determines how two connecting segments (of lines, arcs or curves) with non-zero lengths in a shape are joined together.
       *
       * @zh
       * 用来设置2个长度不为0的相连部分（线段，圆弧，曲线）如何连接在一起的属性。
       */

    }, {
      key: "lineJoin",
      get: function get() {
        return this._lineJoin;
      },
      set: function set(value) {
        this._lineJoin = value;

        if (!this.impl) {
          return;
        }

        this.impl.lineJoin = value;
      }
      /**
       * @en
       * Determines how the end points of every line are drawn.
       *
       * @zh
       * 指定如何绘制每一条线段末端。
       */

    }, {
      key: "lineCap",
      get: function get() {
        return this._lineCap;
      },
      set: function set(value) {
        this._lineCap = value;

        if (!this.impl) {
          return;
        }

        this.impl.lineCap = value;
      }
      /**
       * @en
       * Stroke color.
       *
       * @zh
       * 线段颜色。
       */

    }, {
      key: "strokeColor",
      get: function get() {
        return this._strokeColor;
      },
      set: function set(value) {
        if (!this.impl) {
          return;
        }

        this._strokeColor.set(value);

        this.impl.strokeColor = this._strokeColor;
      }
      /**
       * @en
       * Fill color.
       *
       * @zh
       * 填充颜色。
       */

    }, {
      key: "fillColor",
      get: function get() {
        return this._fillColor;
      },
      set: function set(value) {
        if (!this.impl) {
          return;
        }

        this._fillColor.set(value);

        this.impl.fillColor = this._fillColor;
      }
      /**
       * @en
       * Sets the miter limit ratio.
       *
       * @zh
       * 设置斜接面限制比例。
       */

    }, {
      key: "miterLimit",
      get: function get() {
        return this._miterLimit;
      },
      set: function set(value) {
        this._miterLimit = value; // this.impl.miterLimit = value;
      }
    }, {
      key: "color",
      get: function get() {
        return this._color;
      },
      set: function set(value) {
        if (this._color === value) {
          return;
        }

        this._color.set(value);

        this._updateColor();

        this.markForUpdateRenderData();
      }
    }]);

    function GraphicsComponent() {
      var _this;

      _classCallCheck(this, GraphicsComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(GraphicsComponent).call(this));
      _this.impl = null;
      _this.model = null;

      _initializerDefineProperty(_this, "_lineWidth", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_strokeColor", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_lineJoin", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_lineCap", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_fillColor", _descriptor5, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_miterLimit", _descriptor6, _assertThisInitialized(_this));

      _this._instanceMaterialType = _uiRenderComponent.InstanceMaterialType.ADDCOLOR;
      return _this;
    }

    _createClass(GraphicsComponent, [{
      key: "onRestore",
      value: function onRestore() {
        if (!this.impl) {
          this._flushAssembler();
        }
      }
    }, {
      key: "__preload",
      value: function __preload() {
        if (_get(_getPrototypeOf(GraphicsComponent.prototype), "__preload", this)) {
          _get(_getPrototypeOf(GraphicsComponent.prototype), "__preload", this).call(this);
        } // this._flushAssembler();


        this.impl = this._assembler && this._assembler.createImpl(this);
      }
    }, {
      key: "onLoad",
      value: function onLoad() {
        this._sceneGetter = _director.director.root.ui.getRenderSceneGetter();

        if (!this.model) {
          this.model = _director.director.root.createModel(_index3.Model);
        }
      }
    }, {
      key: "onEnable",
      value: function onEnable() {
        _get(_getPrototypeOf(GraphicsComponent.prototype), "onEnable", this).call(this);

        this._activateMaterial();
      }
    }, {
      key: "onDisable",
      value: function onDisable() {
        this._detachFromScene();
      }
    }, {
      key: "onDestroy",
      value: function onDestroy() {
        _get(_getPrototypeOf(GraphicsComponent.prototype), "onDestroy", this).call(this);

        this._sceneGetter = null;

        if (this.model) {
          this.model.destroy();

          _director.director.root.destroyModel(this.model);

          this.model = null;
        }

        if (!this.impl) {
          return;
        }

        this.impl.clear();
        this.impl = null;
      }
    }, {
      key: "_activateMaterial",
      value: function _activateMaterial() {
        if (!this._material) {
          return;
        }

        this._updateMaterial(this._material);
      }
      /**
       * @en
       * Move path start point to (x,y).
       *
       * @zh
       * 移动路径起点到坐标(x, y)。
       *
       * @param x - 移动坐标 x 轴。
       * @param y - 移动坐标 y 轴。
       */

    }, {
      key: "moveTo",
      value: function moveTo(x, y) {
        if (!this.impl) {
          return;
        }

        this.impl.moveTo(x, y);
      }
      /**
       * @en
       * Adds a straight line to the path.
       *
       * @zh
       * 绘制直线路径。
       *
       * @param x - 绘制路径坐标 x 轴。
       * @param y - 绘制路径坐标 y 轴。
       */

    }, {
      key: "lineTo",
      value: function lineTo(x, y) {
        if (!this.impl) {
          return;
        }

        this.impl.lineTo(x, y);
      }
      /**
       * @en
       * Adds a cubic Bézier curve to the path.
       *
       * @zh
       * 绘制三次贝赛尔曲线路径。
       *
       * @param c1x - 第一个控制点的坐标 x 轴。
       * @param c1y - 第一个控制点的坐标 y 轴。
       * @param c2x - 第二个控制点的坐标 x 轴。
       * @param c2y - 第二个控制点的坐标 y 轴。
       * @param x - 最后一个控制点的坐标 x 轴。
       * @param y - 最后一个控制点的坐标 y 轴。
       */

    }, {
      key: "bezierCurveTo",
      value: function bezierCurveTo(c1x, c1y, c2x, c2y, x, y) {
        if (!this.impl) {
          return;
        }

        this.impl.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
      }
      /**
       * @en
       * Adds a quadratic Bézier curve to the path.
       *
       * @zh
       * 绘制二次贝赛尔曲线路径。
       *
       * @param cx - 起始控制点的坐标 x 轴。
       * @param cy - 起始控制点的坐标 y 轴。
       * @param x - 终点控制点的坐标 x 轴。
       * @param y - 终点控制点的坐标 x 轴。
       */

    }, {
      key: "quadraticCurveTo",
      value: function quadraticCurveTo(cx, cy, x, y) {
        if (!this.impl) {
          return;
        }

        this.impl.quadraticCurveTo(cx, cy, x, y);
      }
      /**
       * @en
       * Adds an arc to the path which is centered at (cx, cy) position with radius r starting at startAngle
       * and ending at endAngle going in the given direction by counterclockwise (defaulting to false).
       *
       * @zh
       * 绘制圆弧路径。圆弧路径的圆心在 (cx, cy) 位置，半径为 r ，根据 counterclockwise （默认为false）指定的方向从 startAngle 开始绘制，到 endAngle 结束。
       *
       * @param cx - 中心控制点的坐标 x 轴。
       * @param cy - 中心控制点的坐标 y 轴。
       * @param r - 圆弧弧度。
       * @param startAngle - 开始弧度，从正 x 轴顺时针方向测量。
       * @param endAngle - 结束弧度，从正 x 轴顺时针方向测量。
       * @param counterclockwise 如果为真，在两个角度之间逆时针绘制。默认顺时针。
       */

    }, {
      key: "arc",
      value: function arc(cx, cy, r, startAngle, endAngle, counterclockwise) {
        if (!this.impl) {
          return;
        }

        this.impl.arc(cx, cy, r, startAngle, endAngle, counterclockwise);
      }
      /**
       * @en
       * Adds an ellipse to the path.
       *
       * @zh
       * 绘制椭圆路径。
       *
       * @param cx - 中心点的坐标 x 轴。
       * @param cy - 中心点的坐标 y 轴。
       * @param rx - 椭圆 x 轴半径。
       * @param ry - 椭圆 y 轴半径。
       */

    }, {
      key: "ellipse",
      value: function ellipse(cx, cy, rx, ry) {
        if (!this.impl) {
          return;
        }

        this.impl.ellipse(cx, cy, rx, ry);
      }
      /**
       * @en
       * Adds a circle to the path.
       *
       * @zh
       * 绘制圆形路径。
       *
       * @param cx - 中心点的坐标 x 轴。
       * @param cy - 中心点的坐标 y 轴。
       * @param r - 圆半径。
       */

    }, {
      key: "circle",
      value: function circle(cx, cy, r) {
        if (!this.impl) {
          return;
        }

        this.impl.circle(cx, cy, r);
      }
      /**
       * @en
       * Adds a rectangle to the path.
       *
       * @zh
       * 绘制矩形路径。
       *
       * @param x - 矩形起始坐标 x 轴。
       * @param y - 矩形起始坐标 y 轴。
       * @param w - 矩形宽度。
       * @param h - 矩形高度。
       */

    }, {
      key: "rect",
      value: function rect(x, y, w, h) {
        if (!this.impl) {
          return;
        }

        this.impl.rect(x, y, w, h);
      }
      /**
       * @en
       * Adds a round corner rectangle to the path.
       *
       * @zh
       * 绘制圆角矩形路径。
       *
       * @param x - 矩形起始坐标 x 轴。
       * @param y - 矩形起始坐标 y 轴。
       * @param w - 矩形宽度。
       * @param h - 矩形高度。
       * @param r - 矩形圆角半径。
       */

    }, {
      key: "roundRect",
      value: function roundRect(x, y, w, h, r) {
        if (!this.impl) {
          return;
        }

        this.impl.roundRect(x, y, w, h, r);
      }
      /**
       * @en
       * Draws a filled rectangle.
       *
       * @zh
       * 绘制填充矩形。
       *
       * @param x - 矩形起始坐标 x 轴。
       * @param y - 矩形起始坐标 y 轴。
       * @param w - 矩形宽度。
       * @param h - 矩形高度。
       */

    }, {
      key: "fillRect",
      value: function fillRect(x, y, w, h) {
        this.rect(x, y, w, h);
        this.fill();
      }
      /**
       * @en
       * Erasing any previously drawn content.
       *
       * @zh
       * 擦除之前绘制的所有内容的方法。
       */

    }, {
      key: "clear",
      value: function clear() {
        var clean = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

        if (!this.impl) {
          return;
        }

        this.impl.clear(clean);

        this._detachFromScene();

        if (this.model) {
          this.model.destroy();
        }

        this.markForUpdateRenderData();
      }
      /**
       * @en
       * Causes the point of the pen to move back to the start of the current path.
       * It tries to add a straight line from the current point to the start.
       *
       * @zh
       * 将笔点返回到当前路径起始点的。它尝试从当前点到起始点绘制一条直线。
       */

    }, {
      key: "close",
      value: function close() {
        if (!this.impl) {
          return;
        }

        this.impl.close();
      }
      /**
       * @en
       * Strokes the current or given path with the current stroke style.
       *
       * @zh
       * 根据当前的画线样式，绘制当前或已经存在的路径。
       */

    }, {
      key: "stroke",
      value: function stroke() {
        this._assembler.stroke(this);

        this._attachToScene();
      }
      /**
       * @en
       * Fills the current or given path with the current fill style.
       *
       * @zh
       * 根据当前的画线样式，填充当前或已经存在的路径。
       */

    }, {
      key: "fill",
      value: function fill() {
        this._assembler.fill(this);

        this._attachToScene();
      }
      /**
       * @en
       * Manual instance material.
       *
       * @zh
       * 辅助材质实例化。可用于只取数据而无实体情况下渲染使用。特殊情况可参考：[[instanceMaterial]]
       */

    }, {
      key: "helpInstanceMaterial",
      value: function helpInstanceMaterial() {
        var mat = null;
        _matInsInfo.owner = new _renderableComponent.RenderableComponent();

        if (this._sharedMaterial) {
          _matInsInfo.parent = this._sharedMaterial;
          mat = new _index3.MaterialInstance(_matInsInfo);
        } else {
          _matInsInfo.parent = _index.builtinResMgr.get('ui-base-material');
          mat = new _index3.MaterialInstance(_matInsInfo);
          mat.recompileShaders({
            USE_LOCAL: true
          });
        }

        this._updateMaterial(mat);

        if (!this.impl) {
          this._flushAssembler();

          this.impl = this._assembler && this._assembler.createImpl(this);
        }
      }
    }, {
      key: "_render",
      value: function _render(render) {
        render.commitModel(this, this.model, this._material);
      }
    }, {
      key: "_instanceMaterial",
      value: function _instanceMaterial() {
        this.helpInstanceMaterial();
      }
    }, {
      key: "_flushAssembler",
      value: function _flushAssembler() {
        var assembler = GraphicsComponent.Assembler.getAssembler(this);

        if (this._assembler !== assembler) {
          this._assembler = assembler;
        }
      }
    }, {
      key: "_canRender",
      value: function _canRender() {
        if (!_get(_getPrototypeOf(GraphicsComponent.prototype), "_canRender", this).call(this)) {
          return false;
        }

        return !!this.model && this.model.inited;
      }
    }, {
      key: "_attachToScene",
      value: function _attachToScene() {
        var scene = _director.director.root.ui.renderScene;

        if (!this.model || this.model.scene === scene) {
          return;
        }

        if (this.model.scene !== null) {
          this._detachFromScene();
        }

        scene.addModel(this.model);
      }
    }, {
      key: "_detachFromScene",
      value: function _detachFromScene() {
        if (this.model && this.model.scene) {
          this.model.scene.removeModel(this.model);
          this.model.scene = null;
        }
      }
    }]);

    return GraphicsComponent;
  }(_uiRenderComponent.UIRenderComponent), _class3.LineJoin = _types.LineJoin, _class3.LineCap = _types.LineCap, _temp), (_applyDecoratedDescriptor(_class2.prototype, "lineWidth", [_classDecorator.property], Object.getOwnPropertyDescriptor(_class2.prototype, "lineWidth"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "lineJoin", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "lineJoin"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "lineCap", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "lineCap"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "strokeColor", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "strokeColor"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "fillColor", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "fillColor"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "miterLimit", [_dec9], Object.getOwnPropertyDescriptor(_class2.prototype, "miterLimit"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "color", [_dec10], Object.getOwnPropertyDescriptor(_class2.prototype, "color"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_lineWidth", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 1;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_strokeColor", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _index2.Color.BLACK.clone();
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_lineJoin", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _types.LineJoin.MITER;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_lineCap", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _types.LineCap.BUTT;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_fillColor", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _index2.Color.WHITE.clone();
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "_miterLimit", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 10;
    }
  })), _class2)) || _class) || _class) || _class) || _class);
  _exports.GraphicsComponent = GraphicsComponent;
  cc.GraphicsComponent = GraphicsComponent;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,