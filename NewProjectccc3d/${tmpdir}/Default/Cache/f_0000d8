(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../core/assets/index.js", "../../core/data/class-decorator.js", "../../core/utils/index.js", "../../core/utils/pool.js", "../../core/math/index.js", "../../core/scene-graph/index.js", "./label-component.js", "./label-outline-component.js", "./sprite-component.js", "../../core/components/ui-base/ui-component.js", "../../core/components/ui-base/ui-transform-component.js", "../../core/platform/debug.js", "../../core/load-pipeline/index.js", "../../core/default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../core/assets/index.js"), require("../../core/data/class-decorator.js"), require("../../core/utils/index.js"), require("../../core/utils/pool.js"), require("../../core/math/index.js"), require("../../core/scene-graph/index.js"), require("./label-component.js"), require("./label-outline-component.js"), require("./sprite-component.js"), require("../../core/components/ui-base/ui-component.js"), require("../../core/components/ui-base/ui-transform-component.js"), require("../../core/platform/debug.js"), require("../../core/load-pipeline/index.js"), require("../../core/default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.classDecorator, global.index, global.pool, global.index, global.index, global.labelComponent, global.labelOutlineComponent, global.spriteComponent, global.uiComponent, global.uiTransformComponent, global.debug, global.index, global.defaultConstants);
    global.richTextComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _classDecorator, _index2, _pool, _index3, _index4, _labelComponent, _labelOutlineComponent, _spriteComponent, _uiComponent, _uiTransformComponent, _debug, _index5, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextComponent = void 0;
  _pool = _interopRequireDefault(_pool);

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _class3, _temp;

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  var _htmlTextParser = new _index2.HtmlTextParser();

  var RichTextChildName = 'RICHTEXT_CHILD';
  var RichTextChildImageName = 'RICHTEXT_Image_CHILD';
  /**
   * @zh
   * 返回一个可延时调用函数。只要不被调用就不会触发。选择 ‘immediate’ 则在触发时不会延迟而是立马回调。
   *
   * @param func - 延时调用函数。
   * @param wait - 延时时间。
   * @param immediate - 是否立马执行回调。
   */

  function debounce(func, wait, immediate) {
    var timeout;
    return function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var context = this;

      var later = function later() {
        timeout = null;

        if (!immediate) {
          func.apply(context, args);
        }
      };

      var callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);

      if (callNow) {
        func.apply(context, args);
      }
    };
  }
  /**
   * 富文本池。<br/>
   */


  var pool = new _pool.default(function (labelSeg) {
    if (_defaultConstants.EDITOR) {
      return false;
    }

    if (_defaultConstants.DEV) {
      (0, _debug.assert)(!labelSeg.node.parent, 'Recycling node\'s parent should be null!');
    }

    if (!cc.isValid(labelSeg.node)) {
      return false;
    } else if (labelSeg.node.getComponent(_labelOutlineComponent.LabelOutlineComponent)) {
      return false;
    }

    return true;
  }, 20); // @ts-ignore

  pool.get = function (str, richtext) {
    var labelSeg = this._get();

    if (!labelSeg) {
      labelSeg = {
        node: new _index4.PrivateNode(RichTextChildName),
        comp: null,
        lineCount: 0,
        styleIndex: 0,
        clickHandler: ''
      };
    }

    var labelNode = labelSeg.node;

    if (!labelNode) {
      labelNode = new _index4.PrivateNode(RichTextChildName);
    }

    var labelComponent = labelNode.getComponent(_labelComponent.LabelComponent);

    if (!labelComponent) {
      labelComponent = labelNode.addComponent(_labelComponent.LabelComponent);
    }

    labelComponent = labelComponent;
    labelNode.setPosition(0, 0, 0);
    labelNode.setAnchorPoint(0.5, 0.5);
    labelNode.setContentSize(128, 128); // labelNode.skewX = 0;

    if (typeof str !== 'string') {
      str = '' + str;
    }

    var isAsset = richtext.font instanceof _index.Font;

    if (isAsset) {
      labelComponent.font = richtext.font;
    } else {
      labelComponent.fontFamily = 'Arial';
    }

    labelComponent.string = str;
    labelComponent.horizontalAlign = _labelComponent.HorizontalTextAlignment.LEFT;
    labelComponent.verticalAlign = _labelComponent.VerticalTextAlignment.TOP;
    labelComponent.fontSize = richtext.fontSize || 40;
    labelComponent.overflow = 0;
    labelComponent.enableWrapText = true;
    labelComponent.lineHeight = 40;
    labelComponent.isBold = false;
    labelComponent.isItalic = false;
    labelComponent.isUnderline = false;
    var labelObj = {
      node: labelNode,
      comp: labelComponent,
      lineCount: 0,
      clickHandler: '',
      styleIndex: 0
    };
    return labelObj;
  };

  /**
   * @en
   * The RichText Component.
   *
   * @zh
   * 富文本组件。
   */
  var RichTextComponent = (_dec = (0, _classDecorator.ccclass)('cc.RichTextComponent'), _dec2 = (0, _classDecorator.help)('i18n:cc.RichTextComponent'), _dec3 = (0, _classDecorator.executionOrder)(110), _dec4 = (0, _classDecorator.menu)('UI/Render/RichText'), _dec5 = (0, _classDecorator.property)({
    multiline: true,
    tooltip: '富文本显示的文本内容'
  }), _dec6 = (0, _classDecorator.property)({
    type: _labelComponent.HorizontalTextAlignment,
    tooltip: '文本内容的水平对齐方式'
  }), _dec7 = (0, _classDecorator.property)({
    tooltip: '富文本字体大小'
  }), _dec8 = (0, _classDecorator.property)({
    type: _index.Font,
    tooltip: '富文本定制字体'
  }), _dec9 = (0, _classDecorator.property)({
    tooltip: '富文本的最大宽度'
  }), _dec10 = (0, _classDecorator.property)({
    tooltip: '富文本行高'
  }), _dec11 = (0, _classDecorator.property)({
    type: _index.SpriteAtlas,
    tooltip: '对于 img 标签里面的 src 属性名称，都需要在 imageAtlas 里面找到一个有效的 spriteFrame，否则 img tag 会判定为无效'
  }), _dec12 = (0, _classDecorator.property)({
    tooltip: '选中此选项后，RichText 将阻止节点边界框中的所有输入事件（鼠标和触摸），从而防止输入事件穿透到底层节点'
  }), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = (0, _classDecorator.executeInEditMode)(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_UIComponent) {
    _inherits(RichTextComponent, _UIComponent);

    _createClass(RichTextComponent, [{
      key: "string",

      /**
       * @en
       * Content string of RichText.
       *
       * @zh
       * 富文本显示的文本内容。
       */
      get: function get() {
        return this._string;
      },
      set: function set(value) {
        if (this._string === value) {
          return;
        }

        this._string = value;

        this._updateRichTextStatus();
      }
      /**
       * @en
       * Horizontal Alignment of each line in RichText.
       *
       * @zh
       * 文本内容的水平对齐方式。
       */

    }, {
      key: "horizontalAlign",
      get: function get() {
        return this._horizontalAlign;
      },
      set: function set(value) {
        if (this.horizontalAlign === value) {
          return;
        }

        this._horizontalAlign = value;
        this._layoutDirty = true;

        this._updateRichTextStatus();
      }
      /**
       * @en
       * Font size of RichText.
       *
       * @zh
       * 富文本字体大小。
       */

    }, {
      key: "fontSize",
      get: function get() {
        return this._fontSize;
      },
      set: function set(value) {
        if (this._fontSize === value) {
          return;
        }

        this._fontSize = value;
        this._layoutDirty = true;

        this._updateRichTextStatus();
      }
      /**
       * @en
       * Custom System font of RichText.
       *
       * @zh
       * 富文本定制字体。
       */

    }, {
      key: "font",
      get: function get() {
        return this._font;
      },
      set: function set(value) {
        if (this._font === value) {
          return;
        } // TODO: Remove when Editor inspector add multi-format support


        if (value instanceof _index.BitmapFont) {
          console.warn('RichText only accepts TTF fonts, but you are trying to use a bitmap font.');
          return;
        }

        this._font = value;
        this._layoutDirty = true;

        if (this._font) {
          this._onTTFLoaded();
        }

        this._updateRichTextStatus();
      }
      /**
       * @en
       * The maximize width of the RichText.
       *
       * @zh
       * 富文本的最大宽度。
       */

    }, {
      key: "maxWidth",
      get: function get() {
        return this._maxWidth;
      },
      set: function set(value) {
        if (this._maxWidth === value) {
          return;
        }

        this._maxWidth = value;
        this._layoutDirty = true;

        this._updateRichTextStatus();
      }
      /**
       * @en
       * Line Height of RichText.
       *
       * @zh
       * 富文本行高。
       */

    }, {
      key: "lineHeight",
      get: function get() {
        return this._lineHeight;
      },
      set: function set(value) {
        if (this._lineHeight === value) {
          return;
        }

        this._lineHeight = value;
        this._layoutDirty = true;

        this._updateRichTextStatus();
      }
      /**
       * @en
       * The image atlas for the img tag. For each src value in the img tag, there should be a valid spriteFrame in the image atlas.
       *
       * @zh
       * 对于 img 标签里面的 src 属性名称，都需要在 imageAtlas 里面找到一个有效的 spriteFrame，否则 img tag 会判定为无效。
       */

    }, {
      key: "imageAtlas",
      get: function get() {
        return this._imageAtlas;
      },
      set: function set(value) {
        if (this._imageAtlas === value) {
          return;
        }

        this._imageAtlas = value;
        this._layoutDirty = true;

        this._updateRichTextStatus();
      }
      /**
       * @en
       * Once checked, the RichText will block all input events (mouse and touch) within
       * the bounding box of the node, preventing the input from penetrating into the underlying node.
       *
       * @zh
       * 选中此选项后，RichText 将阻止节点边界框中的所有输入事件（鼠标和触摸），从而防止输入事件穿透到底层节点。
       */

    }, {
      key: "handleTouchEvent",
      get: function get() {
        return this._handleTouchEvent;
      },
      set: function set(value) {
        if (this._handleTouchEvent === value) {
          return;
        }

        this._handleTouchEvent = value;

        if (this.enabledInHierarchy) {
          this.handleTouchEvent ? this._addEventListeners() : this._removeEventListeners();
        }
      }
    }]);

    function RichTextComponent() {
      var _this;

      _classCallCheck(this, RichTextComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(RichTextComponent).call(this));

      _initializerDefineProperty(_this, "_lineHeight", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_string", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_horizontalAlign", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_fontSize", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_maxWidth", _descriptor5, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_font", _descriptor6, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_imageAtlas", _descriptor7, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_handleTouchEvent", _descriptor8, _assertThisInitialized(_this));

      _this._textArray = [];
      _this._labelSegments = [];
      _this._labelSegmentsCache = [];
      _this._linesWidth = [];
      _this._lineCount = 1;
      _this._labelWidth = 0;
      _this._labelHeight = 0;
      _this._layoutDirty = true;
      _this._lineOffsetX = 0;
      _this._updateRichTextStatus = void 0;

      if (_defaultConstants.EDITOR) {
        _this._updateRichTextStatus = debounce(_this._updateRichText, 200);
      } else {
        _this._updateRichTextStatus = _this._updateRichText;
      }

      return _this;
    }

    _createClass(RichTextComponent, [{
      key: "onEnable",
      value: function onEnable() {
        if (this.handleTouchEvent) {
          this._addEventListeners();
        }

        this._updateRichText();

        this._activateChildren(true);
      }
    }, {
      key: "onDisable",
      value: function onDisable() {
        if (this.handleTouchEvent) {
          this._removeEventListeners();
        }

        this._activateChildren(false);
      }
    }, {
      key: "start",
      value: function start() {
        this._onTTFLoaded();

        this.node.on(_index4.Node.EventType.ANCHOR_CHANGED, this._anchorChanged, this);
      }
    }, {
      key: "onRestore",
      value: function onRestore() {
        if (!_defaultConstants.EDITOR) {
          return;
        } // TODO: refine undo/redo system
        // Because undo/redo will not call onEnable/onDisable,
        // we need call onEnable/onDisable manually to active/disactive children nodes.


        if (this.enabledInHierarchy) {
          this.onEnable();
        } else {
          this.onDisable();
        }
      }
    }, {
      key: "onDestroy",
      value: function onDestroy() {
        var _iterator = _createForOfIteratorHelper(this._labelSegments),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var seg = _step.value;
            seg.node.removeFromParent();
            pool.put(seg);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        this.node.off(_index4.Node.EventType.ANCHOR_CHANGED, this._anchorChanged);
      }
    }, {
      key: "_addEventListeners",
      value: function _addEventListeners() {
        this.node.on(_index4.Node.EventType.TOUCH_END, this._onTouchEnded, this);
      }
    }, {
      key: "_removeEventListeners",
      value: function _removeEventListeners() {
        this.node.off(_index4.Node.EventType.TOUCH_END, this._onTouchEnded, this);
      }
    }, {
      key: "_updateLabelSegmentTextAttributes",
      value: function _updateLabelSegmentTextAttributes() {
        var _this2 = this;

        this._labelSegments.forEach(function (item) {
          _this2._applyTextAttribute(item);
        });
      }
    }, {
      key: "_createFontLabel",
      value: function _createFontLabel(str) {
        // @ts-ignore
        return pool.get(str, this);
      }
    }, {
      key: "_onTTFLoaded",
      value: function _onTTFLoaded() {
        if (this._font instanceof _index.TTFFont) {
          if (this._font._nativeAsset) {
            this._layoutDirty = true;

            this._updateRichText();
          } else {
            var self = this;

            _index5.loader.load(this._font.nativeUrl, function (err, fontFamily) {
              self._layoutDirty = true;

              self._updateRichText();
            });
          }
        } else {
          this._layoutDirty = true;

          this._updateRichText();
        }
      }
    }, {
      key: "_measureText",
      value: function _measureText(styleIndex, string) {
        var self = this;

        var func = function func(s) {
          var label;

          if (self._labelSegmentsCache.length === 0) {
            label = self._createFontLabel(s);

            self._labelSegmentsCache.push(label);
          } else {
            label = self._labelSegmentsCache[0];
            label.node.getComponent(_labelComponent.LabelComponent).string = s;
          }

          label.styleIndex = styleIndex;

          self._applyTextAttribute(label);

          var labelSize = label.node.getContentSize();
          return labelSize.width;
        };

        if (string) {
          return func(string);
        } else {
          return func;
        }
      }
    }, {
      key: "_onTouchEnded",
      value: function _onTouchEnded(event) {
        var _this3 = this;

        var components = this.node.getComponents(_uiComponent.UIComponent);
        var self = this;

        var _iterator2 = _createForOfIteratorHelper(this._labelSegments),
            _step2;

        try {
          var _loop = function _loop() {
            var seg = _step2.value;
            var clickHandler = seg.clickHandler;

            if (clickHandler && _this3._containsTouchLocation(seg, event.touch.getUILocation())) {
              components.forEach(function (component) {
                var func = component[clickHandler];

                if (component.enabledInHierarchy && func) {
                  func.call(self, event);
                }
              });
              event.propagationStopped = true;
            }
          };

          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
    }, {
      key: "_containsTouchLocation",
      value: function _containsTouchLocation(label, point) {
        var comp = label.node.getComponent(_uiTransformComponent.UITransformComponent);

        if (!comp) {
          return false;
        }

        var myRect = comp.getBoundingBoxToWorld();
        return myRect.contains(point);
      }
    }, {
      key: "_resetState",
      value: function _resetState() {
        var _this4 = this;

        var children = this.node.children;

        var _loop2 = function _loop2(i) {
          var child = children[i];

          if (child.name === RichTextChildName || child.name === RichTextChildImageName) {
            if (child.parent === _this4.node) {
              child.parent = null;
            } else {
              // In case child.parent !== this.node, child cannot be removed from children
              children.splice(i, 1);
            }

            if (child.name === RichTextChildName) {
              var index = _this4._labelSegments.findIndex(function (seg) {
                return seg.node === child;
              });

              if (index !== -1) {
                pool.put(_this4._labelSegments[index]);
              }
            }
          }
        };

        for (var i = children.length - 1; i >= 0; i--) {
          _loop2(i);
        }

        this._labelSegments.length = 0;
        this._labelSegmentsCache.length = 0;
        this._linesWidth.length = 0;
        this._lineOffsetX = 0;
        this._lineCount = 1;
        this._labelWidth = 0;
        this._labelHeight = 0;
        this._layoutDirty = true;
      }
    }, {
      key: "_activateChildren",
      value: function _activateChildren(active) {
        for (var i = this.node.children.length - 1; i >= 0; i--) {
          var child = this.node.children[i];

          if (child.name === RichTextChildName || child.name === RichTextChildImageName) {
            child.active = active;
          }
        }
      }
    }, {
      key: "_addLabelSegment",
      value: function _addLabelSegment(stringToken, styleIndex) {
        var labelSegment;

        if (this._labelSegmentsCache.length === 0) {
          labelSegment = this._createFontLabel(stringToken);
        } else {
          labelSegment = this._labelSegmentsCache.pop();
          var label = labelSegment.node.getComponent(_labelComponent.LabelComponent);

          if (label) {
            label.string = stringToken;
          }
        }

        labelSegment.styleIndex = styleIndex;
        labelSegment.lineCount = this._lineCount;
        labelSegment.node.setAnchorPoint(0, 0);

        this._applyTextAttribute(labelSegment); // @ts-ignore


        this.node.addChild(labelSegment.node);

        this._labelSegments.push(labelSegment);

        return labelSegment;
      }
    }, {
      key: "_updateRichTextWithMaxWidth",
      value: function _updateRichTextWithMaxWidth(labelString, labelWidth, styleIndex) {
        var fragmentWidth = labelWidth;
        var labelSegment;

        if (this._lineOffsetX > 0 && fragmentWidth + this._lineOffsetX > this.maxWidth) {
          // concat previous line
          var checkStartIndex = 0;

          while (this._lineOffsetX <= this.maxWidth) {
            var checkEndIndex = this._getFirstWordLen(labelString, checkStartIndex, labelString.length);

            var checkString = labelString.substr(checkStartIndex, checkEndIndex);

            var checkStringWidth = this._measureText(styleIndex, checkString);

            if (this._lineOffsetX + checkStringWidth <= this.maxWidth) {
              this._lineOffsetX += checkStringWidth;
              checkStartIndex += checkEndIndex;
            } else {
              if (checkStartIndex > 0) {
                var remainingString = labelString.substr(0, checkStartIndex);

                this._addLabelSegment(remainingString, styleIndex);

                labelString = labelString.substr(checkStartIndex, labelString.length);
                fragmentWidth = this._measureText(styleIndex, labelString);
              }

              this._updateLineInfo();

              break;
            }
          }
        }

        if (fragmentWidth > this.maxWidth) {
          var fragments = (0, _index2.fragmentText)(labelString, fragmentWidth, this.maxWidth, this._measureText(styleIndex));

          for (var k = 0; k < fragments.length; ++k) {
            var splitString = fragments[k];
            labelSegment = this._addLabelSegment(splitString, styleIndex);
            var labelSize = labelSegment.node.getContentSize();
            this._lineOffsetX += labelSize.width;

            if (fragments.length > 1 && k < fragments.length - 1) {
              this._updateLineInfo();
            }
          }
        } else {
          this._lineOffsetX += fragmentWidth;

          this._addLabelSegment(labelString, styleIndex);
        }
      }
    }, {
      key: "_isLastComponentCR",
      value: function _isLastComponentCR(stringToken) {
        return stringToken.length - 1 === stringToken.lastIndexOf('\n');
      }
    }, {
      key: "_updateLineInfo",
      value: function _updateLineInfo() {
        this._linesWidth.push(this._lineOffsetX);

        this._lineOffsetX = 0;
        this._lineCount++;
      }
    }, {
      key: "_needsUpdateTextLayout",
      value: function _needsUpdateTextLayout(newTextArray) {
        if (this._layoutDirty || !this._textArray || !newTextArray) {
          return true;
        }

        if (this._textArray.length !== newTextArray.length) {
          return true;
        }

        for (var i = 0; i < this._textArray.length; i++) {
          var oldItem = this._textArray[i];
          var newItem = newTextArray[i];

          if (oldItem.text !== newItem.text) {
            return true;
          } else {
            if (oldItem.style) {
              if (newItem.style) {
                if (!!newItem.style.outline !== !!oldItem.style.outline) {
                  return true;
                }

                if (oldItem.style.size !== newItem.style.size || oldItem.style.italic !== newItem.style.italic || oldItem.style.isImage !== newItem.style.isImage) {
                  return true;
                }

                if (oldItem.style.isImage === newItem.style.isImage) {
                  if (oldItem.style.src !== newItem.style.src) {
                    return true;
                  }
                }
              } else {
                if (oldItem.style.size || oldItem.style.italic || oldItem.style.isImage || oldItem.style.outline) {
                  return true;
                }
              }
            } else {
              if (newItem.style) {
                if (newItem.style.size || newItem.style.italic || newItem.style.isImage || newItem.style.outline) {
                  return true;
                }
              }
            }
          }
        }

        return false;
      }
    }, {
      key: "_addRichTextImageElement",
      value: function _addRichTextImageElement(richTextElement) {
        if (!richTextElement.style) {
          return;
        }

        var spriteFrameName = richTextElement.style.src;

        var spriteFrame = this._imageAtlas && spriteFrameName && this._imageAtlas.getSpriteFrame(spriteFrameName);

        if (spriteFrame) {
          var spriteNode = new _index4.PrivateNode(RichTextChildImageName);
          var spriteComponent = spriteNode.addComponent(_spriteComponent.SpriteComponent);
          spriteNode.setAnchorPoint(0, 0);
          spriteComponent.type = _spriteComponent.SpriteComponent.Type.SLICED;
          spriteComponent.sizeMode = _spriteComponent.SpriteComponent.SizeMode.CUSTOM; // @ts-ignore

          this.node.addChild(spriteNode);
          var obj = {
            node: spriteNode,
            comp: spriteComponent,
            lineCount: 0,
            clickHandler: '',
            styleIndex: 0
          };

          this._labelSegments.push(obj);

          var spriteRect = spriteFrame.getRect();
          var scaleFactor = 1;
          var spriteWidth = spriteRect.width;
          var spriteHeight = spriteRect.height;
          var expectWidth = richTextElement.style.imageWidth;
          var expectHeight = richTextElement.style.imageHeight; // follow the original rule, expectHeight must less then lineHeight

          if (expectHeight !== undefined && expectHeight > 0 && expectHeight < this.lineHeight) {
            scaleFactor = expectHeight / spriteHeight;
            spriteWidth = spriteWidth * scaleFactor;
            spriteHeight = spriteHeight * scaleFactor;
          } else {
            scaleFactor = this.lineHeight / spriteHeight;
            spriteWidth = spriteWidth * scaleFactor;
            spriteHeight = spriteHeight * scaleFactor;
          }

          if (expectWidth !== undefined && expectWidth > 0) {
            spriteWidth = expectWidth;
          }

          if (this.maxWidth > 0) {
            if (this._lineOffsetX + spriteWidth > this.maxWidth) {
              this._updateLineInfo();
            }

            this._lineOffsetX += spriteWidth;
          } else {
            this._lineOffsetX += spriteWidth;

            if (this._lineOffsetX > this._labelWidth) {
              this._labelWidth = this._lineOffsetX;
            }
          }

          spriteComponent.spriteFrame = spriteFrame;
          spriteNode.setContentSize(spriteWidth, spriteHeight);
          obj.lineCount = this._lineCount;

          if (richTextElement.style.event) {
            var c = 'click';

            if (richTextElement.style.event[c]) {
              obj.clickHandler = richTextElement.style.event[c];
            }
          }
        } else {
          (0, _debug.warnID)(4400);
        }
      }
    }, {
      key: "_updateRichText",
      value: function _updateRichText() {
        if (!this.enabled) {
          return;
        }

        var newTextArray = _htmlTextParser.parse(this._string);

        if (!this._needsUpdateTextLayout(newTextArray)) {
          this._textArray = newTextArray.slice();

          this._updateLabelSegmentTextAttributes();

          return;
        }

        this._textArray = newTextArray.slice();

        this._resetState();

        var lastEmptyLine = false;
        var label;
        var labelSize;

        for (var i = 0; i < this._textArray.length; ++i) {
          var richTextElement = this._textArray[i];
          var text = richTextElement.text;

          if (text === undefined) {
            continue;
          } // handle <br/> <img /> tag


          if (text === '') {
            if (richTextElement.style && richTextElement.style.isNewLine) {
              this._updateLineInfo();

              continue;
            }

            if (richTextElement.style && richTextElement.style.isImage && this.imageAtlas) {
              this._addRichTextImageElement(richTextElement);

              continue;
            }
          }

          var multilineTexts = text.split('\n');

          for (var j = 0; j < multilineTexts.length; ++j) {
            var labelString = multilineTexts[j];

            if (labelString === '') {
              // for continues \n
              if (this._isLastComponentCR(text) && j === multilineTexts.length - 1) {
                continue;
              }

              this._updateLineInfo();

              lastEmptyLine = true;
              continue;
            }

            lastEmptyLine = false;

            if (this.maxWidth > 0) {
              var labelWidth = this._measureText(i, labelString);

              this._updateRichTextWithMaxWidth(labelString, labelWidth, i);

              if (multilineTexts.length > 1 && j < multilineTexts.length - 1) {
                this._updateLineInfo();
              }
            } else {
              label = this._addLabelSegment(labelString, i);
              labelSize = label.node.getContentSize();
              this._lineOffsetX += labelSize.width;

              if (this._lineOffsetX > this._labelWidth) {
                this._labelWidth = this._lineOffsetX;
              }

              if (multilineTexts.length > 1 && j < multilineTexts.length - 1) {
                this._updateLineInfo();
              }
            }
          }
        }

        if (!lastEmptyLine) {
          this._linesWidth.push(this._lineOffsetX);
        }

        if (this.maxWidth > 0) {
          this._labelWidth = this.maxWidth;
        }

        this._labelHeight = (this._lineCount + _index2.BASELINE_RATIO) * this.lineHeight; // trigger "size-changed" event

        this.node.setContentSize(this._labelWidth, this._labelHeight);

        this._updateRichTextPosition();

        this._layoutDirty = false;
      }
    }, {
      key: "_getFirstWordLen",
      value: function _getFirstWordLen(text, startIndex, textLen) {
        var character = text.charAt(startIndex);

        if ((0, _index2.isUnicodeCJK)(character) || (0, _index2.isUnicodeSpace)(character)) {
          return 1;
        }

        var len = 1;

        for (var index = startIndex + 1; index < textLen; ++index) {
          character = text.charAt(index);

          if ((0, _index2.isUnicodeSpace)(character) || (0, _index2.isUnicodeCJK)(character)) {
            break;
          }

          len++;
        }

        return len;
      }
    }, {
      key: "_updateRichTextPosition",
      value: function _updateRichTextPosition() {
        var nextTokenX = 0;
        var nextLineIndex = 1;
        var totalLineCount = this._lineCount;

        var _iterator3 = _createForOfIteratorHelper(this._labelSegments),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var label = _step3.value;
            var lineCount = label.lineCount;

            if (lineCount > nextLineIndex) {
              nextTokenX = 0;
              nextLineIndex = lineCount;
            }

            var anchorX = this.node.anchorX;
            var lineOffsetX = this._labelWidth * (this.horizontalAlign * 0.5 - anchorX);

            switch (this.horizontalAlign) {
              case _labelComponent.HorizontalTextAlignment.LEFT:
                break;

              case _labelComponent.HorizontalTextAlignment.CENTER:
                lineOffsetX -= this._linesWidth[lineCount - 1] / 2;
                break;

              case _labelComponent.HorizontalTextAlignment.RIGHT:
                lineOffsetX -= this._linesWidth[lineCount - 1];
                break;

              default:
                break;
            }

            var pos = label.node.position;
            var anchorY = this.node.anchorY;
            label.node.setPosition(nextTokenX + lineOffsetX, this.lineHeight * (totalLineCount - lineCount) - this._labelHeight * anchorY, pos.z);

            if (lineCount === nextLineIndex) {
              nextTokenX += label.node.width;
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
    }, {
      key: "_convertLiteralColorValue",
      value: function _convertLiteralColorValue(color) {
        var colorValue = color.toUpperCase();

        if (_index3.Color[colorValue]) {
          return _index3.Color[colorValue];
        } else {
          var out = new _index3.Color();
          return out.fromHEX(color);
        }
      }
    }, {
      key: "_applyTextAttribute",
      value: function _applyTextAttribute(labelSeg) {
        var labelComponent = labelSeg.node.getComponent(_labelComponent.LabelComponent);

        if (!labelComponent) {
          return;
        }

        var index = labelSeg.styleIndex;
        labelComponent.lineHeight = this.lineHeight;
        labelComponent.horizontalAlign = _labelComponent.HorizontalTextAlignment.LEFT;
        labelComponent.verticalAlign = _labelComponent.VerticalTextAlignment.CENTER;
        var textStyle;

        if (this._textArray[index]) {
          textStyle = this._textArray[index].style;
        }

        var labelComp = labelSeg.node.getComponent(_labelComponent.LabelComponent);

        if (labelComp) {
          if (textStyle && textStyle.color) {
            labelComp.color = this._convertLiteralColorValue(textStyle.color);
          } else {
            labelComp.color = this._convertLiteralColorValue('white');
          }
        }

        labelComponent.isBold = !!(textStyle && textStyle.bold);
        labelComponent.isItalic = !!(textStyle && textStyle.italic); // TODO: temporary implementation, the italic effect should be implemented in the internal of label-assembler.
        // if (textStyle && textStyle.italic) {
        //     labelNode.skewX = 12;
        // }

        labelComponent.isUnderline = !!(textStyle && textStyle.underline);

        if (textStyle && textStyle.outline) {
          var labelOutlineComponent = labelSeg.node.getComponent(_labelOutlineComponent.LabelOutlineComponent);

          if (!labelOutlineComponent) {
            labelOutlineComponent = labelSeg.node.addComponent(_labelOutlineComponent.LabelOutlineComponent);
          }

          labelOutlineComponent.color = this._convertLiteralColorValue(textStyle.outline.color);
          labelOutlineComponent.width = textStyle.outline.width;
        }

        if (textStyle && textStyle.size) {
          labelComponent.fontSize = textStyle.size;
        } else {
          labelComponent.fontSize = this._fontSize;
        }

        labelComponent.updateRenderData(true);

        if (textStyle && textStyle.event) {
          var c = 'click';

          if (textStyle.event[c]) {
            labelSeg.clickHandler = textStyle.event[c];
          }
        }
      }
    }, {
      key: "_anchorChanged",
      value: function _anchorChanged() {
        this._updateRichTextPosition();
      }
    }]);

    return RichTextComponent;
  }(_uiComponent.UIComponent), _class3.HorizontalAlign = _labelComponent.HorizontalTextAlignment, _class3.VerticalAlign = _labelComponent.VerticalTextAlignment, _temp), (_applyDecoratedDescriptor(_class2.prototype, "string", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "string"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "horizontalAlign", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "horizontalAlign"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "fontSize", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "fontSize"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "font", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "font"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "maxWidth", [_dec9], Object.getOwnPropertyDescriptor(_class2.prototype, "maxWidth"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "lineHeight", [_dec10], Object.getOwnPropertyDescriptor(_class2.prototype, "lineHeight"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "imageAtlas", [_dec11], Object.getOwnPropertyDescriptor(_class2.prototype, "imageAtlas"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleTouchEvent", [_dec12], Object.getOwnPropertyDescriptor(_class2.prototype, "handleTouchEvent"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_lineHeight", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 40;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_string", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return '<color=#00ff00>Rich</c><color=#0fffff>Text</color>';
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_horizontalAlign", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _labelComponent.HorizontalTextAlignment.LEFT;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_fontSize", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 40;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_maxWidth", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "_font", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "_imageAtlas", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "_handleTouchEvent", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  })), _class2)) || _class) || _class) || _class) || _class) || _class);
  _exports.RichTextComponent = RichTextComponent;
  cc.RichTextComponent = RichTextComponent;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,