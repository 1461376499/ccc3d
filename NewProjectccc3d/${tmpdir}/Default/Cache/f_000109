(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../utils/text-utils.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../utils/text-utils.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.textUtils);
    global.fontLoader = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _textUtils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.loadFont = loadFont;
  _exports._getFontFamily = _getFontFamily;

  /*
   Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
  
   http://www.cocos.com
  
   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated engine source code (the "Software"), a limited,
    worldwide, royalty-free, non-assignable, revocable and non-exclusive license
   to use Cocos Creator solely to develop games on your target platforms. You shall
    not use Cocos Creator software for developing other software or tools that's
    used for developing games. You are not granted to publish, distribute,
    sublicense, and/or sell copies of Cocos Creator.
  
   The software or tools in this License Agreement are licensed, not sold.
   Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
  
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.
   */

  /**
   * @hidden
   */
  var _canvasContext = null; // letter symbol number CJK

  var _testString = "BES bswy:->@123\u4E01\u3041\u1101";
  var _fontFaces = {};

  var _intervalId = -1;

  var _loadingFonts = []; // 3 seconds timeout

  var _timeout = 3000;

  var useNativeCheck = function () {
    var nativeCheck;
    return function () {
      if (!nativeCheck) {
        if (!!window.FontFace) {
          var match = /Gecko.*Firefox\/(\d+)/.exec(window.navigator.userAgent);
          var safari10Match = /OS X.*Version\/10\..*Safari/.exec(window.navigator.userAgent) && /Apple/.exec(window.navigator.vendor);

          if (match) {
            nativeCheck = parseInt(match[1], 10) > 42;
          } else if (safari10Match) {
            nativeCheck = false;
          } else {
            nativeCheck = true;
          }
        } else {
          nativeCheck = false;
        }
      }

      return nativeCheck;
    };
  }();

  function nativeCheckFontLoaded(start, font, callback) {
    var loader = new Promise(function (resolve, reject) {
      var check = function check() {
        var now = Date.now();

        if (now - start >= _timeout) {
          reject();
        } else {
          // @ts-ignore
          document.fonts.load('40px ' + font).then(function (fonts) {
            if (fonts.length >= 1) {
              resolve();
            } else {
              setTimeout(check, 100);
            }
          }, function () {
            reject();
          });
        }
      };

      check();
    });
    var timeoutId;
    var timer = new Promise(function (resolve, reject) {
      timeoutId = setTimeout(reject, _timeout);
    });
    Promise.race([timer, loader]).then(function () {
      if (timeoutId) {
        clearTimeout(timeoutId);
        timeoutId = null;
      }

      callback(null, font);
    }, function () {
      cc.warnID(4933, font);
      callback(null, font);
    });
  }

  function _checkFontLoaded() {
    var allFontsLoaded = true;
    var now = Date.now();

    for (var i = _loadingFonts.length - 1; i >= 0; i--) {
      var fontLoadHandle = _loadingFonts[i];
      var fontFamily = fontLoadHandle.fontFamilyName; // load timeout

      if (now - fontLoadHandle.startTime > _timeout) {
        cc.warnID(4933, fontFamily);
        fontLoadHandle.callback(null, fontFamily);

        _loadingFonts.splice(i, 1);

        continue;
      }

      var oldWidth = fontLoadHandle.refWidth; // @ts-ignore

      _canvasContext.font = '40px ' + fontFamily; // @ts-ignore

      var newWidth = (0, _textUtils.safeMeasureText)(_canvasContext, _testString); // loaded successfully

      if (oldWidth !== newWidth) {
        _loadingFonts.splice(i, 1);

        fontLoadHandle.callback(null, fontFamily);
      } else {
        allFontsLoaded = false;
      }
    }

    if (allFontsLoaded) {
      clearInterval(_intervalId);
      _intervalId = -1;
    }
  }

  function loadFont(item, callback) {
    var url = item.url;

    var fontFamilyName = _getFontFamily(url); // Already loaded fonts


    if (_fontFaces[fontFamilyName]) {
      return fontFamilyName;
    }

    if (!_canvasContext) {
      var labelCanvas = document.createElement('canvas');
      labelCanvas.width = 100;
      labelCanvas.height = 100;
      _canvasContext = labelCanvas.getContext('2d');
    } // Default width reference to test whether new font is loaded correctly


    var fontDesc = '40px ' + fontFamilyName; // @ts-ignore

    _canvasContext.font = fontDesc; // @ts-ignore

    var refWidth = (0, _textUtils.safeMeasureText)(_canvasContext, _testString); // Setup font face style

    var fontStyle = document.createElement("style");
    fontStyle.type = "text/css";
    var fontStr = "";
    if (isNaN(fontFamilyName - 0)) fontStr += "@font-face { font-family:" + fontFamilyName + "; src:";else fontStr += "@font-face { font-family:'" + fontFamilyName + "'; src:";
    fontStr += "url('" + url + "');";
    fontStyle.textContent = fontStr + "}";
    document.body.appendChild(fontStyle); // Preload font with div

    var preloadDiv = document.createElement("div");
    var divStyle = preloadDiv.style;
    divStyle.fontFamily = fontFamilyName;
    preloadDiv.innerHTML = ".";
    divStyle.position = "absolute";
    divStyle.left = "-100px";
    divStyle.top = "-100px";
    document.body.appendChild(preloadDiv);

    if (useNativeCheck()) {
      nativeCheckFontLoaded(Date.now(), fontFamilyName, callback);
    } else {
      // Save loading font
      var fontLoadHandle = {
        fontFamilyName: fontFamilyName,
        refWidth: refWidth,
        callback: callback,
        startTime: Date.now()
      };

      _loadingFonts.push(fontLoadHandle);

      if (_intervalId === -1) {
        _intervalId = setInterval(_checkFontLoaded, 100);
      }
    }

    _fontFaces[fontFamilyName] = fontStyle;
  }

  function _getFontFamily(fontHandle) {
    var ttfIndex = fontHandle.lastIndexOf(".ttf");
    if (ttfIndex === -1) return fontHandle;
    var slashPos = fontHandle.lastIndexOf("/");
    var fontFamilyName;

    if (slashPos === -1) {
      fontFamilyName = fontHandle.substring(0, ttfIndex) + "_LABEL";
    } else {
      fontFamilyName = fontHandle.substring(slashPos + 1, ttfIndex) + "_LABEL";
    }

    if (fontFamilyName.indexOf(' ') !== -1) {
      fontFamilyName = '"' + fontFamilyName + '"';
    }

    return fontFamilyName;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkY6L2plbmtpbnMvd29ya3NwYWNlL0NyZWF0b3JfM0QvZWRpdG9yLTNkL3Jlc291cmNlcy8zZC9lbmdpbmUvY29jb3MvY29yZS9sb2FkLXBpcGVsaW5lL2ZvbnQtbG9hZGVyLnRzIl0sIm5hbWVzIjpbIl9jYW52YXNDb250ZXh0IiwiX3Rlc3RTdHJpbmciLCJfZm9udEZhY2VzIiwiX2ludGVydmFsSWQiLCJfbG9hZGluZ0ZvbnRzIiwiX3RpbWVvdXQiLCJ1c2VOYXRpdmVDaGVjayIsIm5hdGl2ZUNoZWNrIiwid2luZG93IiwiRm9udEZhY2UiLCJtYXRjaCIsImV4ZWMiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJzYWZhcmkxME1hdGNoIiwidmVuZG9yIiwicGFyc2VJbnQiLCJuYXRpdmVDaGVja0ZvbnRMb2FkZWQiLCJzdGFydCIsImZvbnQiLCJjYWxsYmFjayIsImxvYWRlciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiY2hlY2siLCJub3ciLCJEYXRlIiwiZG9jdW1lbnQiLCJmb250cyIsImxvYWQiLCJ0aGVuIiwibGVuZ3RoIiwic2V0VGltZW91dCIsInRpbWVvdXRJZCIsInRpbWVyIiwicmFjZSIsImNsZWFyVGltZW91dCIsImNjIiwid2FybklEIiwiX2NoZWNrRm9udExvYWRlZCIsImFsbEZvbnRzTG9hZGVkIiwiaSIsImZvbnRMb2FkSGFuZGxlIiwiZm9udEZhbWlseSIsImZvbnRGYW1pbHlOYW1lIiwic3RhcnRUaW1lIiwic3BsaWNlIiwib2xkV2lkdGgiLCJyZWZXaWR0aCIsIm5ld1dpZHRoIiwiY2xlYXJJbnRlcnZhbCIsImxvYWRGb250IiwiaXRlbSIsInVybCIsIl9nZXRGb250RmFtaWx5IiwibGFiZWxDYW52YXMiLCJjcmVhdGVFbGVtZW50Iiwid2lkdGgiLCJoZWlnaHQiLCJnZXRDb250ZXh0IiwiZm9udERlc2MiLCJmb250U3R5bGUiLCJ0eXBlIiwiZm9udFN0ciIsImlzTmFOIiwidGV4dENvbnRlbnQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJwcmVsb2FkRGl2IiwiZGl2U3R5bGUiLCJzdHlsZSIsImlubmVySFRNTCIsInBvc2l0aW9uIiwibGVmdCIsInRvcCIsInB1c2giLCJzZXRJbnRlcnZhbCIsImZvbnRIYW5kbGUiLCJ0dGZJbmRleCIsImxhc3RJbmRleE9mIiwic2xhc2hQb3MiLCJzdWJzdHJpbmciLCJpbmRleE9mIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlCQTs7O0FBYUEsTUFBSUEsY0FBNkMsR0FBRyxJQUFwRCxDLENBQ0E7O0FBQ0EsTUFBTUMsV0FBVyxHQUFHLG1DQUFwQjtBQUVBLE1BQUlDLFVBQVUsR0FBRyxFQUFqQjs7QUFDQSxNQUFJQyxXQUFXLEdBQUcsQ0FBQyxDQUFuQjs7QUFDQSxNQUFJQyxhQUFxQyxHQUFHLEVBQTVDLEMsQ0FDQTs7QUFDQSxNQUFJQyxRQUFRLEdBQUcsSUFBZjs7QUFFQSxNQUFJQyxjQUFjLEdBQUksWUFBWTtBQUM5QixRQUFJQyxXQUFKO0FBQ0EsV0FBTyxZQUFZO0FBQ2YsVUFBSSxDQUFDQSxXQUFMLEVBQWtCO0FBQ2QsWUFBSSxDQUFDLENBQUNDLE1BQU0sQ0FBQ0MsUUFBYixFQUF1QjtBQUNuQixjQUFJQyxLQUFLLEdBQUcsd0JBQXdCQyxJQUF4QixDQUE2QkgsTUFBTSxDQUFDSSxTQUFQLENBQWlCQyxTQUE5QyxDQUFaO0FBQ0EsY0FBSUMsYUFBYSxHQUFHLDhCQUE4QkgsSUFBOUIsQ0FBbUNILE1BQU0sQ0FBQ0ksU0FBUCxDQUFpQkMsU0FBcEQsS0FBa0UsUUFBUUYsSUFBUixDQUFhSCxNQUFNLENBQUNJLFNBQVAsQ0FBaUJHLE1BQTlCLENBQXRGOztBQUVBLGNBQUlMLEtBQUosRUFBVztBQUNQSCxZQUFBQSxXQUFXLEdBQUdTLFFBQVEsQ0FBQ04sS0FBSyxDQUFDLENBQUQsQ0FBTixFQUFXLEVBQVgsQ0FBUixHQUF5QixFQUF2QztBQUNILFdBRkQsTUFHSyxJQUFJSSxhQUFKLEVBQW1CO0FB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QyxNQUFBQSxjQUFjLEdBQUdpQyxVQUFVLENBQUNJLFNBQVgsQ0FBcUIsQ0FBckIsRUFBd0JILFFBQXhCLElBQW9DLFFBQXJEO0FBQ0gsS0FGRCxNQUVPO0FBQ0hsQyxNQUFBQSxjQUFjLEdBQUdpQyxVQUFVLENBQUNJLFNBQVgsQ0FBcUJELFFBQVEsR0FBRyxDQUFoQyxFQUFtQ0YsUUFBbkMsSUFBK0MsUUFBaEU7QUFDSDs7QUFDRCxRQUFJbEMsY0FBYyxDQUFDc0MsT0FBZixDQUF1QixHQUF2QixNQUFnQyxDQUFDLENBQXJDLEVBQXdDO0FBQ3BDdEMsTUFBQUEsY0FBYyxHQUFHLE1BQU1BLGNBQU4sR0FBdUIsR0FBeEM7QUFDSDs7QUFDRCxXQUFPQSxjQUFQO0FBQ0giLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXHJcblxyXG4gaHR0cDovL3d3dy5jb2Nvcy5jb21cclxuXHJcbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XHJcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcclxuICB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXHJcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxyXG4gIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcclxuICB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXHJcbiAgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXHJcblxyXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cclxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXHJcblxyXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXHJcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcclxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcclxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXHJcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXHJcbiBUSEUgU09GVFdBUkUuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEBoaWRkZW5cclxuICovXHJcblxyXG5pbXBvcnQge3NhZmVNZWFzdXJlVGV4dH0gZnJvbSAnLi4vdXRpbHMvdGV4dC11dGlscyc7XHJcblxyXG5pbnRlcmZhY2UgSUZvbnRMb2FkSGFuZGxlIHtcclxuICAgIGZvbnRGYW1pbHlOYW1lO1xyXG4gICAgcmVmV2lkdGg7XHJcbiAgICBjYWxsYmFjaztcclxuICAgIHN0YXJ0VGltZTtcclxufVxyXG5cclxubGV0IF9jYW52YXNDb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR8bnVsbCA9IG51bGw7XHJcbi8vIGxldHRlciBzeW1ib2wgbnVtYmVyIENKS1xyXG5jb25zdCBfdGVzdFN0cmluZyA9IFwiQkVTIGJzd3k6LT5AMTIzXFx1NEUwMVxcdTMwNDFcXHUxMTAxXCI7XHJcblxyXG5sZXQgX2ZvbnRGYWNlcyA9IHt9O1xyXG5sZXQgX2ludGVydmFsSWQgPSAtMTtcclxubGV0IF9sb2FkaW5nRm9udHM6IEFycmF5PElGb250TG9hZEhhbmRsZT4gPSBbXTtcclxuLy8gMyBzZWNvbmRzIHRpbWVvdXRcclxubGV0IF90aW1lb3V0ID0gMzAwMDtcclxuXHJcbmxldCB1c2VOYXRpdmVDaGVjayA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBsZXQgbmF0aXZlQ2hlY2s7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghbmF0aXZlQ2hlY2spIHtcclxuICAgICAgICAgICAgaWYgKCEhd2luZG93LkZvbnRGYWNlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSAvR2Vja28uKkZpcmVmb3hcXC8oXFxkKykvLmV4ZWMod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNhZmFyaTEwTWF0Y2ggPSAvT1MgWC4qVmVyc2lvblxcLzEwXFwuLipTYWZhcmkvLmV4ZWMod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpICYmIC9BcHBsZS8uZXhlYyh3aW5kb3cubmF2aWdhdG9yLnZlbmRvcik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHtcclxuICAgICAgICAgICAgICAgICAgICBuYXRpdmVDaGVjayA9IHBhcnNlSW50KG1hdGNoWzFdLCAxMCkgPiA0MjtcclxuICAgICAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzYWZhcmkxME1hdGNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmF0aXZlQ2hlY2sgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBuYXRpdmVDaGVjayA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBuYXRpdmVDaGVjayA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuYXRpdmVDaGVjaztcclxuICAgIH1cclxufSkoKTtcclxuXHJcbmZ1bmN0aW9uIG5hdGl2ZUNoZWNrRm9udExvYWRlZCAoc3RhcnQsIGZvbnQsIGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgbG9hZGVyID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIHZhciBjaGVjayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7XHJcblxyXG4gICAgICAgICAgICBpZiAobm93IC0gc3RhcnQgPj0gX3RpbWVvdXQpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdCgpO1xyXG4gICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmZvbnRzLmxvYWQoJzQwcHggJyArIGZvbnQpLnRoZW4oZnVuY3Rpb24gKGZvbnRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvbnRzLmxlbmd0aCA+PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGNoZWNrLCAxMDApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjaGVjaygpO1xyXG4gICAgfSk7XHJcbiAgXHJcbiAgICBsZXQgdGltZW91dElkO1xyXG4gICAgbGV0IHRpbWVyID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQocmVqZWN0LCBfdGltZW91dCk7XHJcbiAgICB9KTtcclxuICBcclxuICAgIFByb21pc2UucmFjZShbdGltZXIsIGxvYWRlcl0pLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aW1lb3V0SWQpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XHJcbiAgICAgICAgICAgIHRpbWVvdXRJZCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhbGxiYWNrKG51bGwsIGZvbnQpO1xyXG4gICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNjLndhcm5JRCg0OTMzLCBmb250KTtcclxuICAgICAgICBjYWxsYmFjayhudWxsLCBmb250KTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBfY2hlY2tGb250TG9hZGVkICgpIHtcclxuICAgIGxldCBhbGxGb250c0xvYWRlZCA9IHRydWU7XHJcbiAgICBsZXQgbm93ID0gRGF0ZS5ub3coKTtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gX2xvYWRpbmdGb250cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgIGxldCBmb250TG9hZEhhbmRsZSA9IF9sb2FkaW5nRm9udHNbaV07XHJcbiAgICAgICAgbGV0IGZvbnRGYW1pbHkgPSBmb250TG9hZEhhbmRsZS5mb250RmFtaWx5TmFtZTtcclxuICAgICAgICAvLyBsb2FkIHRpbWVvdXRcclxuICAgICAgICBpZiAobm93IC0gZm9udExvYWRIYW5kbGUuc3RhcnRUaW1lID4gX3RpbWVvdXQpIHtcclxuICAgICAgICAgICAgY2Mud2FybklEKDQ5MzMsIGZvbnRGYW1pbHkpO1xyXG4gICAgICAgICAgICBmb250TG9hZEhhbmRsZS5jYWxsYmFjayhudWxsLCBmb250RmFtaWx5KTtcclxuICAgICAgICAgICAgX2xvYWRpbmdGb250cy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IG9sZFdpZHRoID0gZm9udExvYWRIYW5kbGUucmVmV2lkdGg7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIF9jYW52YXNDb250ZXh0LmZvbnQgPSAnNDBweCAnICsgZm9udEZhbWlseTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgbGV0IG5ld1dpZHRoID0gc2FmZU1lYXN1cmVUZXh0KF9jYW52YXNDb250ZXh0LCBfdGVzdFN0cmluZyk7XHJcbiAgICAgICAgLy8gbG9hZGVkIHN1Y2Nlc3NmdWxseVxyXG4gICAgICAgIGlmIChvbGRXaWR0aCAhPT0gbmV3V2lkdGgpIHtcclxuICAgICAgICAgICAgX2xvYWRpbmdGb250cy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgIGZvbnRMb2FkSGFuZGxlLmNhbGxiYWNrKG51bGwsIGZvbnRGYW1pbHkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYWxsRm9udHNMb2FkZWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGFsbEZvbnRzTG9hZGVkKSB7XHJcbiAgICAgICAgY2xlYXJJbnRlcnZhbChfaW50ZXJ2YWxJZCk7XHJcbiAgICAgICAgX2ludGVydmFsSWQgPSAtMTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRGb250IChpdGVtLCBjYWxsYmFjaykge1xyXG4gICAgbGV0IHVybCA9IGl0ZW0udXJsO1xyXG4gICAgbGV0IGZvbnRGYW1pbHlOYW1lID0gX2dldEZvbnRGYW1pbHkodXJsKTtcclxuXHJcbiAgICAvLyBBbHJlYWR5IGxvYWRlZCBmb250c1xyXG4gICAgaWYgKF9mb250RmFjZXNbZm9udEZhbWlseU5hbWVdKSB7XHJcbiAgICAgICAgcmV0dXJuIGZvbnRGYW1pbHlOYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghX2NhbnZhc0NvbnRleHQpIHtcclxuICAgICAgICBsZXQgbGFiZWxDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICAgICAgICBsYWJlbENhbnZhcy53aWR0aCA9IDEwMDtcclxuICAgICAgICBsYWJlbENhbnZhcy5oZWlnaHQgPSAxMDA7XHJcbiAgICAgICAgX2NhbnZhc0NvbnRleHQgPSBsYWJlbENhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERlZmF1bHQgd2lkdGggcmVmZXJlbmNlIHRvIHRlc3Qgd2hldGhlciBuZXcgZm9udCBpcyBsb2FkZWQgY29ycmVjdGx5XHJcbiAgICBsZXQgZm9udERlc2MgPSAnNDBweCAnICsgZm9udEZhbWlseU5hbWU7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBfY2FudmFzQ29udGV4dC5mb250ID0gZm9udERlc2M7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBsZXQgcmVmV2lkdGggPSBzYWZlTWVhc3VyZVRleHQoX2NhbnZhc0NvbnRleHQsIF90ZXN0U3RyaW5nKTtcclxuXHJcbiAgICAvLyBTZXR1cCBmb250IGZhY2Ugc3R5bGVcclxuICAgIGxldCBmb250U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XHJcbiAgICBmb250U3R5bGUudHlwZSA9IFwidGV4dC9jc3NcIjtcclxuICAgIGxldCBmb250U3RyID0gXCJcIjtcclxuICAgIGlmIChpc05hTihmb250RmFtaWx5TmFtZSAtIDApKVxyXG4gICAgICAgIGZvbnRTdHIgKz0gXCJAZm9udC1mYWNlIHsgZm9udC1mYW1pbHk6XCIgKyBmb250RmFtaWx5TmFtZSArIFwiOyBzcmM6XCI7XHJcbiAgICBlbHNlXHJcbiAgICAgICAgZm9udFN0ciArPSBcIkBmb250LWZhY2UgeyBmb250LWZhbWlseTonXCIgKyBmb250RmFtaWx5TmFtZSArIFwiJzsgc3JjOlwiO1xyXG4gICAgZm9udFN0ciArPSBcInVybCgnXCIgKyB1cmwgKyBcIicpO1wiO1xyXG4gICAgZm9udFN0eWxlLnRleHRDb250ZW50ID0gZm9udFN0ciArIFwifVwiO1xyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmb250U3R5bGUpO1xyXG5cclxuICAgIC8vIFByZWxvYWQgZm9udCB3aXRoIGRpdlxyXG4gICAgbGV0IHByZWxvYWREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgbGV0IGRpdlN0eWxlID0gcHJlbG9hZERpdi5zdHlsZTtcclxuICAgIGRpdlN0eWxlLmZvbnRGYW1pbHkgPSBmb250RmFtaWx5TmFtZTtcclxuICAgIHByZWxvYWREaXYuaW5uZXJIVE1MID0gXCIuXCI7XHJcbiAgICBkaXZTdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcclxuICAgIGRpdlN0eWxlLmxlZnQgPSBcIi0xMDBweFwiO1xyXG4gICAgZGl2U3R5bGUudG9wID0gXCItMTAwcHhcIjtcclxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocHJlbG9hZERpdik7XHJcblxyXG4gICAgaWYgKHVzZU5hdGl2ZUNoZWNrKCkpIHtcclxuICAgICAgICBuYXRpdmVDaGVja0ZvbnRMb2FkZWQoRGF0ZS5ub3coKSwgZm9udEZhbWlseU5hbWUsIGNhbGxiYWNrKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIFNhdmUgbG9hZGluZyBmb250XHJcbiAgICAgICAgbGV0IGZvbnRMb2FkSGFuZGxlOiBJRm9udExvYWRIYW5kbGUgPSB7XHJcbiAgICAgICAgICAgIGZvbnRGYW1pbHlOYW1lLFxyXG4gICAgICAgICAgICByZWZXaWR0aCxcclxuICAgICAgICAgICAgY2FsbGJhY2ssXHJcbiAgICAgICAgICAgIHN0YXJ0VGltZTogRGF0ZS5ub3coKVxyXG4gICAgICAgIH1cclxuICAgICAgICBfbG9hZGluZ0ZvbnRzLnB1c2goZm9udExvYWRIYW5kbGUpO1xyXG4gICAgICAgIGlmIChfaW50ZXJ2YWxJZCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgX2ludGVydmFsSWQgPSBzZXRJbnRlcnZhbChfY2hlY2tGb250TG9hZGVkLCAxMDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIF9mb250RmFjZXNbZm9udEZhbWlseU5hbWVdID0gZm9udFN0eWxlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX2dldEZvbnRGYW1pbHkgKGZvbnRIYW5kbGUpIHtcclxuICAgIGxldCB0dGZJbmRleCA9IGZvbnRIYW5kbGUubGFzdEluZGV4T2YoXCIudHRmXCIpO1xyXG4gICAgaWYgKHR0ZkluZGV4ID09PSAtMSkgcmV0dXJuIGZvbnRIYW5kbGU7XHJcblxyXG4gICAgbGV0IHNsYXNoUG9zID0gZm9udEhhbmRsZS5sYXN0SW5kZXhPZihcIi9cIik7XHJcbiAgICBsZXQgZm9udEZhbWlseU5hbWU7XHJcbiAgICBpZiAoc2xhc2hQb3MgPT09IC0xKSB7XHJcbiAgICAgICAgZm9udEZhbWlseU5hbWUgPSBmb250SGFuZGxlLnN1YnN0cmluZygwLCB0dGZJbmRleCkgKyBcIl9MQUJFTFwiO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBmb250RmFtaWx5TmFtZSA9IGZvbnRIYW5kbGUuc3Vic3RyaW5nKHNsYXNoUG9zICsgMSwgdHRmSW5kZXgpICsgXCJfTEFCRUxcIjtcclxuICAgIH1cclxuICAgIGlmIChmb250RmFtaWx5TmFtZS5pbmRleE9mKCcgJykgIT09IC0xKSB7XHJcbiAgICAgICAgZm9udEZhbWlseU5hbWUgPSAnXCInICsgZm9udEZhbWlseU5hbWUgKyAnXCInO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZvbnRGYW1pbHlOYW1lO1xyXG59Il19