(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../gfx/define.js", "../../math/index.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../gfx/define.js"), require("../../math/index.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.define, global.index);
    global.passUtils = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _define, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.getDefaultFromType = getDefaultFromType;
  _exports.assignDefines = assignDefines;
  _exports.type2writer = _exports.type2reader = _exports.customizeType = _exports.getOffsetFromHandle = _exports.getBindingFromHandle = _exports.getTypeFromHandle = _exports.getBindingTypeFromHandle = _exports.genHandle = void 0;

  var _type2reader, _type2writer;

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var btMask = 0xf0000000; //  4 bits => 16 binding types

  var typeMask = 0x0fc00000; //  6 bits => 64 types

  var bindingMask = 0x003fc000; //  8 bits => 256 bindings

  var offsetMask = 0x00003fff; // 14 bits => 4096 vectors

  var genHandle = function genHandle(bt, binding, type) {
    var offset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    return bt << 28 & btMask | type << 22 & typeMask | binding << 14 & bindingMask | offset & offsetMask;
  };

  _exports.genHandle = genHandle;

  var getBindingTypeFromHandle = function getBindingTypeFromHandle(handle) {
    return (handle & btMask) >>> 28;
  };

  _exports.getBindingTypeFromHandle = getBindingTypeFromHandle;

  var getTypeFromHandle = function getTypeFromHandle(handle) {
    return (handle & typeMask) >>> 22;
  };

  _exports.getTypeFromHandle = getTypeFromHandle;

  var getBindingFromHandle = function getBindingFromHandle(handle) {
    return (handle & bindingMask) >>> 14;
  };

  _exports.getBindingFromHandle = getBindingFromHandle;

  var getOffsetFromHandle = function getOffsetFromHandle(handle) {
    return handle & offsetMask;
  };

  _exports.getOffsetFromHandle = getOffsetFromHandle;

  var customizeType = function customizeType(handle, type) {
    return handle & ~typeMask | type << 22 & typeMask;
  };

  _exports.customizeType = customizeType;
  var type2reader = (_type2reader = {}, _defineProperty(_type2reader, _define.GFXType.UNKNOWN, function (a, v) {
    var idx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    return console.warn('illegal uniform handle');
  }), _defineProperty(_type2reader, _define.GFXType.INT, function (a, v) {
    var idx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    return a[idx];
  }), _defineProperty(_type2reader, _define.GFXType.INT2, function (a, v) {
    var idx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    return _index.Vec2.fromArray(v, a, idx);
  }), _defineProperty(_type2reader, _define.GFXType.INT3, function (a, v) {
    var idx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    return _index.Vec3.fromArray(v, a, idx);
  }), _defineProperty(_type2reader, _define.GFXType.INT4, function (a, v) {
    var idx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    return _index.Vec4.fromArray(v, a, idx);
  }), _defineProperty(_type2reader, _define.GFXType.FLOAT, function (a, v) {
    var idx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    return a[idx];
  }), _defineProperty(_type2reader, _define.GFXType.FLOAT2, function (a, v) {
    var idx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    return _index.Vec2.fromArray(v, a, idx);
  }), _defineProperty(_type2reader, _define.GFXType.FLOAT3, function (a, v) {
    var idx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    return _index.Vec3.fromArray(v, a, idx);
  }), _defineProperty(_type2reader, _define.GFXType.FLOAT4, function (a, v) {
    var idx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    return _index.Vec4.fromArray(v, a, idx);
  }), _defineProperty(_type2reader, _define.GFXType.MAT3, function (a, v) {
    var idx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    return _index.Mat3.fromArray(v, a, idx);
  }), _defineProperty(_type2reader, _define.GFXType.MAT4, function (a, v) {
    var idx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    return _index.Mat4.fromArray(v, a, idx);
  }), _type2reader);
  _exports.type2reader = type2reader;
  var type2writer = (_type2writer = {}, _defineProperty(_type2writer, _define.GFXType.UNKNOWN, function (a, v) {
    var idx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    return console.warn('illegal uniform handle');
  }), _defineProperty(_type2writer, _define.GFXType.INT, function (a, v) {
    var idx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    return a[idx] = v;
  }), _defineProperty(_type2writer, _define.GFXType.INT2, function (a, v) {
    var idx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    return _index.Vec2.toArray(a, v, idx);
  }), _defineProperty(_type2writer, _define.GFXType.INT3, function (a, v) {
    var idx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    return _index.Vec3.toArray(a, v, idx);
  }), _defineProperty(_type2writer, _define.GFXType.INT4, function (a, v) {
    var idx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    return _index.Vec4.toArray(a, v, idx);
  }), _defineProperty(_type2writer, _define.GFXType.FLOAT, function (a, v) {
    var idx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    return a[idx] = v;
  }), _defineProperty(_type2writer, _define.GFXType.FLOAT2, function (a, v) {
    var idx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    return _index.Vec2.toArray(a, v, idx);
  }), _defineProperty(_type2writer, _define.GFXType.FLOAT3, function (a, v) {
    var idx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    return _index.Vec3.toArray(a, v, idx);
  }), _defineProperty(_type2writer, _define.GFXType.FLOAT4, function (a, v) {
    var idx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    return _index.Vec4.toArray(a, v, idx);
  }), _defineProperty(_type2writer, _define.GFXType.MAT3, function (a, v) {
    var idx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    return _index.Mat3.toArray(a, v, idx);
  }), _defineProperty(_type2writer, _define.GFXType.MAT4, function (a, v) {
    var idx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    return _index.Mat4.toArray(a, v, idx);
  }), _type2writer);
  _exports.type2writer = type2writer;
  var defaultValues = [Object.freeze([0]), Object.freeze([0, 0]), Object.freeze([0, 0, 0, 0]), Object.freeze([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1])];

  function getDefaultFromType(type) {
    switch (type) {
      case _define.GFXType.BOOL:
      case _define.GFXType.INT:
      case _define.GFXType.UINT:
      case _define.GFXType.FLOAT:
        return defaultValues[0];

      case _define.GFXType.BOOL2:
      case _define.GFXType.INT2:
      case _define.GFXType.UINT2:
      case _define.GFXType.FLOAT2:
        return defaultValues[1];

      case _define.GFXType.BOOL4:
      case _define.GFXType.INT4:
      case _define.GFXType.UINT4:
      case _define.GFXType.FLOAT4:
        return defaultValues[2];

      case _define.GFXType.MAT4:
        return defaultValues[3];

      case _define.GFXType.SAMPLER2D:
        return 'default-texture';

      case _define.GFXType.SAMPLER_CUBE:
        return 'default-cube-texture';
    }

    return defaultValues[0];
  }

  function assignDefines(target, source) {
    var entries = Object.entries(source);
    var isDifferent = false;

    for (var i = 0; i < entries.length; i++) {
      if (target[entries[i][0]] !== entries[i][1]) {
        target[entries[i][0]] = entries[i][1];
        isDifferent = true;
      }
    }

    return isDifferent;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,