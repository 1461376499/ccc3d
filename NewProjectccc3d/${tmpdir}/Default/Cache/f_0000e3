(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../core/components/index.js", "../../core/data/class-decorator.js", "../../core/platform/index.js", "../../core/math/index.js", "../../core/value-types/enum.js", "./layout-component.js", "./page-view-indicator-component.js", "./scroll-view-component.js", "./scroll-bar-component.js", "../../core/platform/debug.js", "../../core/data/utils/extends-enum.js", "../../core/default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../core/components/index.js"), require("../../core/data/class-decorator.js"), require("../../core/platform/index.js"), require("../../core/math/index.js"), require("../../core/value-types/enum.js"), require("./layout-component.js"), require("./page-view-indicator-component.js"), require("./scroll-view-component.js"), require("./scroll-bar-component.js"), require("../../core/platform/debug.js"), require("../../core/data/utils/extends-enum.js"), require("../../core/default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.classDecorator, global.index, global.index, global._enum, global.layoutComponent, global.pageViewIndicatorComponent, global.scrollViewComponent, global.scrollBarComponent, global.debug, global.extendsEnum, global.defaultConstants);
    global.pageViewComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _classDecorator, _index2, _index3, _enum, _layoutComponent, _pageViewIndicatorComponent, _scrollViewComponent, _scrollBarComponent, _debug, _extendsEnum, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.PageViewComponent = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _class3, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function set(target, property, value, receiver) { if (typeof Reflect !== "undefined" && Reflect.set) { set = Reflect.set; } else { set = function set(target, property, value, receiver) { var base = _superPropBase(target, property); var desc; if (base) { desc = Object.getOwnPropertyDescriptor(base, property); if (desc.set) { desc.set.call(receiver, value); return true; } else if (!desc.writable) { return false; } } desc = Object.getOwnPropertyDescriptor(receiver, property); if (desc) { if (!desc.writable) { return false; } desc.value = value; Object.defineProperty(receiver, property, desc); } else { _defineProperty(receiver, property, value); } return true; }; } return set(target, property, value, receiver); }

  function _set(target, property, value, receiver, isStrict) { var s = set(target, property, value, receiver || target); if (!s && isStrict) { throw new Error('failed to set property'); } return value; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  var _temp_vec2 = new _index3.Vec2();
  /**
   * @en Enum for Page View Size Mode.
   *
   * @zh 页面视图每个页面统一的大小类型
   */


  var SizeMode;

  (function (SizeMode) {
    SizeMode[SizeMode["Unified"] = 0] = "Unified";
    SizeMode[SizeMode["Free"] = 1] = "Free";
  })(SizeMode || (SizeMode = {}));

  (0, _enum.ccenum)(SizeMode);
  /**
   * @en Enum for Page View Direction.
   *
   * @zh 页面视图滚动类型
   */

  var Direction;

  (function (Direction) {
    Direction[Direction["Horizontal"] = 0] = "Horizontal";
    Direction[Direction["Vertical"] = 1] = "Vertical";
  })(Direction || (Direction = {}));

  (0, _enum.ccenum)(Direction);
  /**
   * @en Enum for ScrollView event type.
   *
   * @zh 滚动视图事件类型
   */

  var EventType;
  /**
   * @en
   * The PageView control.
   *
   * @zh
   * 页面视图组件
   */

  (function (EventType) {
    EventType["PAGE_TURNING"] = "page-turning";
  })(EventType || (EventType = {}));

  var // @ts-ignore
  PageViewComponent = (_dec = (0, _classDecorator.ccclass)('cc.PageViewComponent'), _dec2 = (0, _classDecorator.help)('i18n:cc.PageViewComponent'), _dec3 = (0, _classDecorator.executionOrder)(110), _dec4 = (0, _classDecorator.menu)('UI/PageView'), _dec5 = (0, _classDecorator.property)({
    type: SizeMode,
    tooltip: '页面视图中每个页面大小类型'
  }), _dec6 = (0, _classDecorator.property)({
    type: Direction,
    tooltip: '页面视图滚动类型'
  }), _dec7 = (0, _classDecorator.property)({
    slide: true,
    range: [0, 1, 0.01],
    tooltip: '滚动临界值，默认单位百分比，当拖拽超出该数值时，松开会自动滚动下一页，小于时则还原'
  }), _dec8 = (0, _classDecorator.property)({
    slide: true,
    range: [0, 1, 0.01],
    tooltip: '设置 PageView PageTurning 事件的发送时机'
  }), _dec9 = (0, _classDecorator.property)({
    type: _pageViewIndicatorComponent.PageViewIndicatorComponent,
    tooltip: '页面视图指示器组件'
  }), _dec10 = (0, _classDecorator.property)({
    tooltip: '快速滑动翻页临界值\n当用户快速滑动时，会根据滑动开始和结束的距离与时间计算出一个速度值\n该值与此临界值相比较，如果大于临界值，则进行自动翻页'
  }), _dec11 = (0, _classDecorator.property)({
    type: _scrollBarComponent.ScrollBarComponent,
    visible: false,
    override: true
  }), _dec12 = (0, _classDecorator.property)({
    type: _scrollBarComponent.ScrollBarComponent,
    visible: false,
    override: true
  }), _dec13 = (0, _classDecorator.property)({
    visible: false,
    override: true
  }), _dec14 = (0, _classDecorator.property)({
    visible: false,
    override: true
  }), _dec15 = (0, _classDecorator.property)({
    visible: false,
    override: true
  }), _dec16 = (0, _classDecorator.property)({
    visible: false,
    override: true,
    type: [_index.EventHandler]
  }), _dec17 = (0, _classDecorator.property)({
    type: [_index.EventHandler],
    tooltip: '滚动视图的事件回调函数'
  }), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_ScrollViewComponent) {
    _inherits(PageViewComponent, _ScrollViewComponent);

    function PageViewComponent() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, PageViewComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PageViewComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _initializerDefineProperty(_this, "autoPageTurningThreshold", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "horizontal", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "vertical", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "cancelInnerEvents", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "scrollEvents", _descriptor5, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "pageTurningSpeed", _descriptor6, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "pageEvents", _descriptor7, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_sizeMode", _descriptor8, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_direction", _descriptor9, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_scrollThreshold", _descriptor10, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_pageTurningEventTiming", _descriptor11, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_indicator", _descriptor12, _assertThisInitialized(_this));

      _this._curPageIdx = 0;
      _this._lastPageIdx = 0;
      _this._pages = [];
      _this._initContentPos = new _index3.Vec3();
      _this._scrollCenterOffsetX = [];
      _this._scrollCenterOffsetY = [];
      _this._touchBeganPosition = new _index3.Vec3();
      _this._touchEndPosition = new _index3.Vec3();
      return _this;
    }

    _createClass(PageViewComponent, [{
      key: "__preload",
      value: function __preload() {
        this.node.on(_index2.SystemEventType.SIZE_CHANGED, this._updateAllPagesSize, this);
      }
    }, {
      key: "onEnable",
      value: function onEnable() {
        _get(_getPrototypeOf(PageViewComponent.prototype), "onEnable", this).call(this);

        if (!_defaultConstants.EDITOR) {
          this.node.on(PageViewComponent.EventType.SCROLL_ENG_WITH_THRESHOLD, this._dispatchPageTurningEvent, this);
        }
      }
    }, {
      key: "onDisable",
      value: function onDisable() {
        _get(_getPrototypeOf(PageViewComponent.prototype), "onDisable", this).call(this);

        if (!_defaultConstants.EDITOR) {
          this.node.off(PageViewComponent.EventType.SCROLL_ENG_WITH_THRESHOLD, this._dispatchPageTurningEvent, this);
        }
      }
    }, {
      key: "onLoad",
      value: function onLoad() {
        this._initPages();

        if (this.indicator) {
          this.indicator.setPageView(this);
        }
      }
    }, {
      key: "onDestroy",
      value: function onDestroy() {
        this.node.off(_index2.SystemEventType.SIZE_CHANGED, this._updateAllPagesSize, this);
      }
      /**
       * @en
       * Returns current page index.
       *
       * @zh
       * 返回当前页面索引。
       *
       * @returns 当前页面索引。
       */

    }, {
      key: "getCurrentPageIndex",
      value: function getCurrentPageIndex() {
        return this._curPageIdx;
      }
      /**
       * @en
       * Set current page index.
       *
       * @zh
       * 设置当前页面索引。
       * @param index 索引。
       */

    }, {
      key: "setCurrentPageIndex",
      value: function setCurrentPageIndex(index) {
        this.scrollToPage(index, 1);
      }
      /**
       * @en
       * Returns all pages of pageview.
       *
       * @zh
       * 返回视图中的所有页面。
       *
       * @returns 输=视图所有页面。
       */

    }, {
      key: "getPages",
      value: function getPages() {
        return this._pages;
      }
      /**
       * @en
       * At the end of the current page view to insert a new view.
       *
       * @zh
       * 在当前页面视图的尾部插入一个新视图。
       *
       * @param page 新视图。
       */

    }, {
      key: "addPage",
      value: function addPage(page) {
        if (!page || this._pages.indexOf(page) !== -1 || !this.content) {
          return;
        }

        this.content.addChild(page);

        this._pages.push(page);

        this._updatePageView();
      }
      /**
       * @en
       * Inserts a page in the specified location.
       *
       * @zh
       * 将页面插入指定位置中。
       *
       * @param page 新视图。
       * @param index 指定位置。
       */

    }, {
      key: "insertPage",
      value: function insertPage(page, index) {
        if (index < 0 || !page || this._pages.indexOf(page) !== -1 || !this.content) {
          return;
        }

        var pageCount = this._pages.length;

        if (index >= pageCount) {
          this.addPage(page);
        } else {
          this._pages.splice(index, 0, page);

          this.content.insertChild(page, index);

          this._updatePageView();
        }
      }
      /**
       * @en
       * Removes a page from PageView.
       *
       * @zh
       * 移除指定页面。
       *
       * @param page 指定页面。
       */

    }, {
      key: "removePage",
      value: function removePage(page) {
        if (!page || !this.content) {
          return;
        }

        var index = this._pages.indexOf(page);

        if (index === -1) {
          (0, _debug.warnID)(4300, page.name);
          return;
        }

        this.removePageAtIndex(index);
      }
      /**
       * @en
       * Removes a page at index of PageView.
       *
       * @zh
       * 移除指定下标的页面。
       *
       * @param index 页面下标。
       */

    }, {
      key: "removePageAtIndex",
      value: function removePageAtIndex(index) {
        var pageList = this._pages;

        if (index < 0 || index >= pageList.length) {
          return;
        }

        var page = pageList[index];

        if (!page || !this.content) {
          return;
        }

        this.content.removeChild(page);
        pageList.splice(index, 1);

        this._updatePageView();
      }
      /**
       * @en
       * Removes all pages from PageView.
       *
       * @zh
       * 移除所有页面。
       */

    }, {
      key: "removeAllPages",
      value: function removeAllPages() {
        if (!this.content) {
          return;
        }

        var locPages = this._pages;

        for (var i = 0, len = locPages.length; i < len; i++) {
          this.content.removeChild(locPages[i]);
        }

        this._pages.length = 0;

        this._updatePageView();
      }
      /**
       * @en
       * Scroll PageView to index.
       *
       * @zh
       * 滚动到指定页面
       *
       * @param idx index of page.
       * @param timeInSecond scrolling time.
       */

    }, {
      key: "scrollToPage",
      value: function scrollToPage(idx) {
        var timeInSecond = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.3;

        if (idx < 0 || idx >= this._pages.length) {
          return;
        }

        this._curPageIdx = idx;
        this.scrollToOffset(this._moveOffsetValue(idx), timeInSecond, true);

        if (this.indicator) {
          this.indicator._changedState();
        }
      } // override the method of ScrollView

    }, {
      key: "getScrollEndedEventTiming",
      value: function getScrollEndedEventTiming() {
        return this.pageTurningEventTiming;
      } // 刷新页面视图

    }, {
      key: "_updatePageView",
      value: function _updatePageView() {
        // 当页面数组变化时修改 content 大小
        var layout = this.content.getComponent(_layoutComponent.LayoutComponent);

        if (layout && layout.enabled) {
          layout.updateLayout();
        }

        var pageCount = this._pages.length;

        if (this._curPageIdx >= pageCount) {
          this._curPageIdx = pageCount === 0 ? 0 : pageCount - 1;
          this._lastPageIdx = this._curPageIdx;
        } // 进行排序


        var contentPos = this._initContentPos;

        for (var i = 0; i < pageCount; ++i) {
          var page = this._pages[i]; // page.setSiblingIndex(i);

          var pos = page.position;

          if (this.direction === Direction.Horizontal) {
            this._scrollCenterOffsetX[i] = Math.abs(contentPos.x + pos.x);
          } else {
            this._scrollCenterOffsetY[i] = Math.abs(contentPos.y + pos.y);
          }
        } // 刷新 indicator 信息与状态


        if (this.indicator) {
          this.indicator._refresh();
        }
      } // 刷新所有页面的大小

    }, {
      key: "_updateAllPagesSize",
      value: function _updateAllPagesSize() {
        if (!this.content || !this.view) {
          return;
        }

        if (this._sizeMode !== SizeMode.Unified) {
          return;
        }

        var locPages = _defaultConstants.EDITOR ? this.content.children : this._pages;
        var selfSize = this.view.getContentSize();

        for (var i = 0, len = locPages.length; i < len; i++) {
          locPages[i].setContentSize(selfSize);
        }
      }
    }, {
      key: "_handleReleaseLogic",
      value: function _handleReleaseLogic() {
        this._autoScrollToPage();

        if (this._scrolling) {
          this._scrolling = false;

          if (!this._autoScrolling) {
            this._dispatchEvent(PageViewComponent.EventType.SCROLL_ENDED);
          }
        }
      }
    }, {
      key: "_onTouchBegan",
      value: function _onTouchBegan(event, captureListeners) {
        event.touch.getUILocation(_temp_vec2);

        _index3.Vec3.set(this._touchBeganPosition, _temp_vec2.x, _temp_vec2.y, 0);

        _get(_getPrototypeOf(PageViewComponent.prototype), "_onTouchBegan", this).call(this, event, captureListeners);
      }
    }, {
      key: "_onTouchMoved",
      value: function _onTouchMoved(event, captureListeners) {
        _get(_getPrototypeOf(PageViewComponent.prototype), "_onTouchMoved", this).call(this, event, captureListeners);
      }
    }, {
      key: "_onTouchEnded",
      value: function _onTouchEnded(event, captureListeners) {
        event.touch.getUILocation(_temp_vec2);

        _index3.Vec3.set(this._touchEndPosition, _temp_vec2.x, _temp_vec2.y, 0);

        _get(_getPrototypeOf(PageViewComponent.prototype), "_onTouchEnded", this).call(this, event, captureListeners);
      }
    }, {
      key: "_onTouchCancelled",
      value: function _onTouchCancelled(event, captureListeners) {
        event.touch.getUILocation(_temp_vec2);

        _index3.Vec3.set(this._touchEndPosition, _temp_vec2.x, _temp_vec2.y, 0);

        _get(_getPrototypeOf(PageViewComponent.prototype), "_onTouchCancelled", this).call(this, event, captureListeners);
      }
    }, {
      key: "_onMouseWheel",
      value: function _onMouseWheel() {}
    }, {
      key: "_syncScrollDirection",
      value: function _syncScrollDirection() {
        this.horizontal = this.direction === Direction.Horizontal;
        this.vertical = this.direction === Direction.Vertical;
      }
    }, {
      key: "_syncSizeMode",
      value: function _syncSizeMode() {
        var view = this.view;

        if (!this.content || !view) {
          return;
        }

        var layout = this.content.getComponent(_layoutComponent.LayoutComponent);

        if (layout) {
          if (this._sizeMode === SizeMode.Free && this._pages.length > 0) {
            var lastPage = this._pages[this._pages.length - 1];

            if (this.direction === Direction.Horizontal) {
              layout.paddingLeft = (view.width - this._pages[0].width) / 2;
              layout.paddingRight = (view.width - lastPage.width) / 2;
            } else if (this.direction === Direction.Vertical) {
              layout.paddingTop = (view.height - this._pages[0].height) / 2;
              layout.paddingBottom = (view.height - lastPage.height) / 2;
            }
          }

          layout.updateLayout();
        }
      } // 初始化页面

    }, {
      key: "_initPages",
      value: function _initPages() {
        if (!this.content) {
          return;
        }

        this._initContentPos = this.content.position;
        var children = this.content.children;

        for (var i = 0; i < children.length; ++i) {
          var page = children[i];

          if (this._pages.indexOf(page) >= 0) {
            continue;
          }

          this._pages.push(page);
        }

        this._syncScrollDirection();

        this._syncSizeMode();

        this._updatePageView();
      }
    }, {
      key: "_dispatchPageTurningEvent",
      value: function _dispatchPageTurningEvent() {
        if (this._lastPageIdx === this._curPageIdx) {
          return;
        }

        this._lastPageIdx = this._curPageIdx;

        _index.EventHandler.emitEvents(this.pageEvents, this);

        this.node.emit(EventType.PAGE_TURNING, this);
      } // 快速滑动

    }, {
      key: "_isQuicklyScrollable",
      value: function _isQuicklyScrollable(touchMoveVelocity) {
        if (this.direction === Direction.Horizontal) {
          if (Math.abs(touchMoveVelocity.x) > this.autoPageTurningThreshold) {
            return true;
          }
        } else if (this.direction === Direction.Vertical) {
          if (Math.abs(touchMoveVelocity.y) > this.autoPageTurningThreshold) {
            return true;
          }
        }

        return false;
      } // 通过 idx 获取偏移值数值

    }, {
      key: "_moveOffsetValue",
      value: function _moveOffsetValue(idx) {
        var offset = new _index3.Vec3();

        if (this._sizeMode === SizeMode.Free) {
          if (this.direction === Direction.Horizontal) {
            offset.x = this._scrollCenterOffsetX[idx];
          } else if (this.direction === Direction.Vertical) {
            offset.y = this._scrollCenterOffsetY[idx];
          }
        } else {
          var view = this.view;

          if (!view) {
            return offset;
          }

          if (this.direction === Direction.Horizontal) {
            offset.x = idx * view.width;
          } else if (this.direction === Direction.Vertical) {
            offset.y = idx * view.height;
          }
        }

        return offset;
      }
    }, {
      key: "_getDragDirection",
      value: function _getDragDirection(moveOffset) {
        if (this._direction === Direction.Horizontal) {
          if (moveOffset.x === 0) {
            return 0;
          }

          return moveOffset.x > 0 ? 1 : -1;
        } else {
          // 由于滚动 Y 轴的原点在在右上角所以应该是小于 0
          if (moveOffset.y === 0) {
            return 0;
          }

          return moveOffset.y < 0 ? 1 : -1;
        }
      } // 是否超过自动滚动临界值

    }, {
      key: "_isScrollable",
      value: function _isScrollable(offset, index, nextIndex) {
        if (this._sizeMode === SizeMode.Free) {
          var curPageCenter = 0;
          var nextPageCenter = 0;

          if (this.direction === Direction.Horizontal) {
            curPageCenter = this._scrollCenterOffsetX[index];
            nextPageCenter = this._scrollCenterOffsetX[nextIndex];
            return Math.abs(offset.x) >= Math.abs(curPageCenter - nextPageCenter) * this.scrollThreshold;
          } else if (this.direction === Direction.Vertical) {
            curPageCenter = this._scrollCenterOffsetY[index];
            nextPageCenter = this._scrollCenterOffsetY[nextIndex];
            return Math.abs(offset.y) >= Math.abs(curPageCenter - nextPageCenter) * this.scrollThreshold;
          }
        } else {
          var view = this.view;

          if (!view) {
            return;
          }

          if (this.direction === Direction.Horizontal) {
            return Math.abs(offset.x) >= view.width * this.scrollThreshold;
          } else if (this.direction === Direction.Vertical) {
            return Math.abs(offset.y) >= view.height * this.scrollThreshold;
          }
        }
      }
    }, {
      key: "_autoScrollToPage",
      value: function _autoScrollToPage() {
        var bounceBackStarted = this._startBounceBackIfNeeded(); // Note:


        var moveOffset = new _index3.Vec3();

        _index3.Vec3.subtract(moveOffset, this._touchBeganPosition, this._touchEndPosition); // this._touchBeganPosition.subtract(this._touchEndPosition);


        if (bounceBackStarted) {
          var dragDirection = this._getDragDirection(moveOffset);

          if (dragDirection === 0) {
            return;
          }

          if (dragDirection > 0) {
            this._curPageIdx = this._pages.length - 1;
          } else {
            this._curPageIdx = 0;
          }

          if (this.indicator) {
            this.indicator._changedState();
          }
        } else {
          var index = this._curPageIdx;

          var nextIndex = index + this._getDragDirection(moveOffset);

          var timeInSecond = this.pageTurningSpeed * Math.abs(index - nextIndex);

          if (nextIndex < this._pages.length) {
            if (this._isScrollable(moveOffset, index, nextIndex)) {
              this.scrollToPage(nextIndex, timeInSecond);
              return;
            } else {
              var touchMoveVelocity = this._calculateTouchMoveVelocity();

              if (this._isQuicklyScrollable(touchMoveVelocity)) {
                this.scrollToPage(nextIndex, timeInSecond);
                return;
              }
            }
          }

          this.scrollToPage(index, timeInSecond);
        }
      }
    }, {
      key: "sizeMode",

      /**
       * @en
       * Specify the size type of each page in PageView.
       *
       * @zh
       * 页面视图中每个页面大小类型
       */
      get: function get() {
        return this._sizeMode;
      },
      set: function set(value) {
        if (this._sizeMode === value) {
          return;
        }

        this._sizeMode = value;

        this._syncSizeMode();
      }
      /**
       * @en
       * The page view direction.
       *
       * @zh
       * 页面视图滚动类型
       */

    }, {
      key: "direction",
      get: function get() {
        return this._direction;
      },
      set: function set(value) {
        if (this._direction === value) {
          return;
        }

        this._direction = value;

        this._syncScrollDirection();
      }
      /**
       * @en
       * The scroll threshold value, when drag exceeds this value,
       * release the next page will automatically scroll, less than the restore.
       *
       * @zh
       * 滚动临界值，默认单位百分比，当拖拽超出该数值时，松开会自动滚动下一页，小于时则还原。
       */

    }, {
      key: "scrollThreshold",
      get: function get() {
        return this._scrollThreshold;
      },
      set: function set(value) {
        if (this._scrollThreshold === value) {
          return;
        }

        this._scrollThreshold = value;
      }
      /**
       * @en
       * Change the PageTurning event timing of PageView.
       *
       * @zh
       * 设置 PageView PageTurning 事件的发送时机。
       */

    }, {
      key: "pageTurningEventTiming",
      get: function get() {
        return this._pageTurningEventTiming;
      },
      set: function set(value) {
        if (this._pageTurningEventTiming === value) {
          return;
        }

        this._pageTurningEventTiming = value;
      }
      /**
       * @en
       * The Page View Indicator.
       *
       * @zh
       * 页面视图指示器组件
       */

    }, {
      key: "indicator",
      get: function get() {
        return this._indicator;
      },
      set: function set(value) {
        if (this._indicator === value) {
          return;
        }

        this._indicator = value;

        if (this.indicator) {
          this.indicator.setPageView(this);
        }
      }
    }, {
      key: "curPageIdx",
      get: function get() {
        return this._curPageIdx;
      }
    }, {
      key: "verticalScrollBar",
      get: function get() {
        return _get(_getPrototypeOf(PageViewComponent.prototype), "verticalScrollBar", this);
      },
      set: function set(value) {
        _set(_getPrototypeOf(PageViewComponent.prototype), "verticalScrollBar", value, this, true);
      }
    }, {
      key: "horizontalScrollBar",
      get: function get() {
        return _get(_getPrototypeOf(PageViewComponent.prototype), "horizontalScrollBar", this);
      },
      set: function set(value) {
        _set(_getPrototypeOf(PageViewComponent.prototype), "horizontalScrollBar", value, this, true);
      }
    }]);

    return PageViewComponent;
  }(_scrollViewComponent.ScrollViewComponent), _class3.SizeMode = SizeMode, _class3.Direction = Direction, _class3.EventType = (0, _extendsEnum.extendsEnum)(EventType, _scrollViewComponent.EventType), _temp), (_applyDecoratedDescriptor(_class2.prototype, "sizeMode", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "sizeMode"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "direction", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "direction"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "scrollThreshold", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "scrollThreshold"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "pageTurningEventTiming", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "pageTurningEventTiming"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "indicator", [_dec9], Object.getOwnPropertyDescriptor(_class2.prototype, "indicator"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "autoPageTurningThreshold", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 100;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "verticalScrollBar", [_dec11], Object.getOwnPropertyDescriptor(_class2.prototype, "verticalScrollBar"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "horizontalScrollBar", [_dec12], Object.getOwnPropertyDescriptor(_class2.prototype, "horizontalScrollBar"), _class2.prototype), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "horizontal", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "vertical", [_dec14], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "cancelInnerEvents", [_dec15], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "scrollEvents", [_dec16], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return [];
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "pageTurningSpeed", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0.3;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "pageEvents", [_dec17], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return [];
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "_sizeMode", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return SizeMode.Unified;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "_direction", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return Direction.Horizontal;
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "_scrollThreshold", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0.5;
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "_pageTurningEventTiming", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0.1;
    }
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "_indicator", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  })), _class2)) || _class) || _class) || _class) || _class);
  _exports.PageViewComponent = PageViewComponent;
  cc.PageViewComponent = PageViewComponent;
  /**
   * @en
   * Note: This event is emitted from the node to which the component belongs.
   * @zh
   * 注意：此事件是从该组件所属的 Node 上面派发出来的，需要用 node.on 来监听。
   * @event page-turning
   * @param {Event.EventCustom} event
   * @param {PageView} pageView - The PageView component.
   */
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,