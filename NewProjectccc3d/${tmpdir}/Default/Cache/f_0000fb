(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../core/3d/builtin/index.js", "../../core/gfx/define.js", "../../core/math/index.js", "../../core/renderer/core/material-instance.js", "../enum.js", "../particle.js", "../animator/gradient-range.js", "../../core/renderer/index.js", "../animator/curve-range.js", "./particle-system-renderer-base.js", "../../core/default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../core/3d/builtin/index.js"), require("../../core/gfx/define.js"), require("../../core/math/index.js"), require("../../core/renderer/core/material-instance.js"), require("../enum.js"), require("../particle.js"), require("../animator/gradient-range.js"), require("../../core/renderer/index.js"), require("../animator/curve-range.js"), require("./particle-system-renderer-base.js"), require("../../core/default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.define, global.index, global.materialInstance, global._enum, global.particle, global.gradientRange, global.index, global.curveRange, global.particleSystemRendererBase, global.defaultConstants);
    global.particleSystemRendererGpu = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _define, _index2, _materialInstance, _enum, _particle, _gradientRange, _index3, _curveRange, _particleSystemRendererBase, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  var _tempWorldTrans = new _index2.Mat4();

  var _tempVec4 = new _index2.Vec4();

  var _world_rot = new _index2.Quat();

  var _sample_num = 32;

  var _sample_interval = 1.0 / _sample_num;

  var CC_USE_WORLD_SPACE = 'CC_USE_WORLD_SPACE';
  var CC_RENDER_MODE = 'CC_RENDER_MODE';
  var RENDER_MODE_BILLBOARD = 0;
  var RENDER_MODE_STRETCHED_BILLBOARD = 1;
  var RENDER_MODE_HORIZONTAL_BILLBOARD = 2;
  var RENDER_MODE_VERTICAL_BILLBOARD = 3;
  var RENDER_MODE_MESH = 4;
  var COLOR_OVER_TIME_MODULE_ENABLE = 'COLOR_OVER_TIME_MODULE_ENABLE';
  var ROTATION_OVER_TIME_MODULE_ENABLE = 'ROTATION_OVER_TIME_MODULE_ENABLE';
  var SIZE_OVER_TIME_MODULE_ENABLE = 'SIZE_OVER_TIME_MODULE_ENABLE';
  var VELOCITY_OVER_TIME_MODULE_ENABLE = 'VELOCITY_OVER_TIME_MODULE_ENABLE';
  var FORCE_OVER_TIME_MODULE_ENABLE = 'FORCE_OVER_TIME_MODULE_ENABLE';
  var TEXTURE_ANIMATION_MODULE_ENABLE = 'TEXTURE_ANIMATION_MODULE_ENABLE';
  var _vert_attr_name = {
    POSITION_STARTTIME: 'a_position_starttime',
    VERT_SIZE_UV: 'a_size_uv',
    VERT_ROTATION_UV: 'a_rotation_uv',
    COLOR: 'a_color',
    DIR_LIFE: 'a_dir_life',
    RANDOM_SEED: 'a_rndSeed'
  };
  var _gpu_vert_attr = [{
    name: _vert_attr_name.POSITION_STARTTIME,
    format: _define.GFXFormat.RGBA32F
  }, {
    name: _vert_attr_name.VERT_SIZE_UV,
    format: _define.GFXFormat.RGBA32F
  }, {
    name: _vert_attr_name.VERT_ROTATION_UV,
    format: _define.GFXFormat.RGBA32F
  }, {
    name: _vert_attr_name.COLOR,
    format: _define.GFXFormat.RGBA32F
  }, {
    name: _vert_attr_name.DIR_LIFE,
    format: _define.GFXFormat.RGBA32F
  }, {
    name: _vert_attr_name.RANDOM_SEED,
    format: _define.GFXFormat.R32F
  }];
  var _gpu_vert_attr_mesh = [{
    name: _vert_attr_name.POSITION_STARTTIME,
    format: _define.GFXFormat.RGBA32F
  }, {
    name: _vert_attr_name.VERT_SIZE_UV,
    format: _define.GFXFormat.RGBA32F
  }, {
    name: _vert_attr_name.VERT_ROTATION_UV,
    format: _define.GFXFormat.RGBA32F
  }, {
    name: _vert_attr_name.COLOR,
    format: _define.GFXFormat.RGBA32F
  }, {
    name: _vert_attr_name.DIR_LIFE,
    format: _define.GFXFormat.RGBA32F
  }, {
    name: _vert_attr_name.RANDOM_SEED,
    format: _define.GFXFormat.R32F
  }, {
    name: _define.GFXAttributeName.ATTR_TEX_COORD,
    format: _define.GFXFormat.RGB32F
  }, // uv,frame idx
  {
    name: _define.GFXAttributeName.ATTR_TEX_COORD3,
    format: _define.GFXFormat.RGB32F
  }, // mesh position
  {
    name: _define.GFXAttributeName.ATTR_NORMAL,
    format: _define.GFXFormat.RGB32F
  }, // mesh normal
  {
    name: _define.GFXAttributeName.ATTR_COLOR1,
    format: _define.GFXFormat.RGBA8,
    isNormalized: true
  } // mesh color
  ];
  var _matInsInfo = {
    parent: null,
    owner: null,
    subModelIdx: 0
  };

  var ParticleSystemRendererGPU = /*#__PURE__*/function (_ParticleSystemRender) {
    _inherits(ParticleSystemRendererGPU, _ParticleSystemRender);

    function ParticleSystemRendererGPU(info) {
      var _this;

      _classCallCheck(this, ParticleSystemRendererGPU);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(ParticleSystemRendererGPU).call(this, info));
      _this._defines = void 0;
      _this._frameTile_velLenScale = void 0;
      _this._node_scale = void 0;
      _this._vertAttrs = [];
      _this._defaultMat = null;
      _this._particleNum = 0;
      _this._tempParticle = null;
      _this._colorTexture = null;
      _this._forceTexture = null;
      _this._velocityTexture = null;
      _this._rotationTexture = null;
      _this._sizeTexture = null;
      _this._animTexture = null;
      _this._uTimeHandle = 0;
      _this._uRotHandle = 0;
      _this._frameTile_velLenScale = new _index2.Vec4(1, 1, 0, 0);
      _this._node_scale = new _index2.Vec4();
      _this._defines = {
        CC_USE_WORLD_SPACE: true,
        CC_USE_BILLBOARD: true,
        CC_USE_STRETCHED_BILLBOARD: false,
        CC_USE_HORIZONTAL_BILLBOARD: false,
        CC_USE_VERTICAL_BILLBOARD: false,
        COLOR_OVER_TIME_MODULE_ENABLE: false
      };
      _this._tempParticle = new _particle.Particle(null);
      _this._particleNum = 0;
      return _this;
    }

    _createClass(ParticleSystemRendererGPU, [{
      key: "onInit",
      value: function onInit(ps) {
        _get(_getPrototypeOf(ParticleSystemRendererGPU.prototype), "onInit", this).call(this, ps);

        this._setVertexAttrib();

        this._updateModel();

        this._model.constructAttributeIndex();

        this.updateMaterialParams();
      }
    }, {
      key: "updateRenderMode",
      value: function updateRenderMode() {
        this._setVertexAttrib();

        this._updateModel();

        this.updateMaterialParams();
      }
    }, {
      key: "clear",
      value: function clear() {
        this._particleNum = 0;
        this.updateRenderData();
      }
    }, {
      key: "onDestroy",
      value: function onDestroy() {
        _get(_getPrototypeOf(ParticleSystemRendererGPU.prototype), "onDestroy", this).call(this);

        this._forceTexture && this._forceTexture.destroy();
        this._velocityTexture && this._velocityTexture.destroy();
        this._colorTexture && this._colorTexture.destroy();
        this._sizeTexture && this._sizeTexture.destroy();
        this._rotationTexture && this._rotationTexture.destroy();
        this._animTexture && this._animTexture.destroy();
      }
    }, {
      key: "enableModule",
      value: function enableModule(name, val, pm) {
        var mat = this._particleSystem.getMaterialInstance(0) || this._defaultMat;

        if (!mat) {
          return;
        }

        this.initShaderUniform(mat);
        mat.recompileShaders(this._defines);

        if (this._model) {
          this._model.setSubModelMaterial(0, mat);
        }
      }
    }, {
      key: "getFreeParticle",
      value: function getFreeParticle() {
        if (this._particleNum >= this._particleSystem._capacity) {
          return null;
        }

        return this._tempParticle;
      }
    }, {
      key: "setNewParticle",
      value: function setNewParticle(p) {
        this._model.addGPUParticleVertexData(p, this._particleNum, this._particleSystem._time);

        this._particleNum++;
      }
    }, {
      key: "updateParticles",
      value: function updateParticles(dt) {
        if (_defaultConstants.EDITOR) {
          var mat = this._particleSystem.getMaterialInstance(0) || this._defaultMat;

          this._particleSystem.node.getWorldMatrix(_tempWorldTrans);

          switch (this._particleSystem.scaleSpace) {
            case _enum.Space.Local:
              this._particleSystem.node.getScale(this._node_scale);

              break;

            case _enum.Space.World:
              this._particleSystem.node.getWorldScale(this._node_scale);

              break;
          }

          this.initShaderUniform(mat);
        }

        this._particleNum = this._model.updateGPUParticles(this._particleNum, this._particleSystem._time, dt);
        this.updateShaderUniform(dt);
        return this._particleNum;
      } // internal function

    }, {
      key: "updateRenderData",
      value: function updateRenderData() {
        // update vertex buffer
        this._model.updateIA(this._particleNum);
      }
    }, {
      key: "updateShaderUniform",
      value: function updateShaderUniform(dt) {
        var mat = this._particleSystem.getMaterialInstance(0) || this._defaultMat;

        if (!mat) {
          return;
        }

        var pass = mat.passes[0];
        _tempVec4.x = this._particleSystem._time;
        _tempVec4.y = dt;
        pass.setUniform(this._uTimeHandle, _tempVec4);

        this._particleSystem.node.getWorldRotation(_world_rot);

        pass.setUniform(this._uRotHandle, _world_rot);
      }
    }, {
      key: "initShaderUniform",
      value: function initShaderUniform(mat) {
        var pass = mat.passes[0];
        this._uTimeHandle = pass.getHandle('u_timeDelta');
        this._uRotHandle = pass.getHandle('u_worldRot');
        pass.setUniform(pass.getHandle('scale'), this._node_scale);
        pass.setUniform(pass.getHandle('frameTile_velLenScale'), this._frameTile_velLenScale);
        _tempVec4.x = _sample_num;
        _tempVec4.y = _sample_interval;
        pass.setUniform(pass.getHandle('u_sampleInfo'), _tempVec4);
        var enable = false; // force

        var forceModule = this._particleSystem._forceOvertimeModule;
        enable = forceModule && forceModule.enable;
        this._defines[FORCE_OVER_TIME_MODULE_ENABLE] = enable;

        if (enable) {
          this._forceTexture && this._forceTexture.destroy();
          this._forceTexture = (0, _curveRange.packCurveRangeXYZ)(_sample_num, forceModule.x, forceModule.y, forceModule.z);
          var handle = pass.getHandle('force_over_time_tex0');

          var binding = _index3.Pass.getBindingFromHandle(handle);

          pass.bindSampler(binding, this._forceTexture.getGFXSampler());
          pass.bindTextureView(binding, this._forceTexture.getGFXTextureView());
          var spaceHandle = pass.getHandle('u_force_space');
          pass.setUniform(spaceHandle, forceModule.space);
          var modeHandle = pass.getHandle('u_force_mode');
          pass.setUniform(modeHandle, this._forceTexture.height);
        } // velocity


        var velocityModule = this._particleSystem._velocityOvertimeModule;
        enable = velocityModule && velocityModule.enable;
        this._defines[VELOCITY_OVER_TIME_MODULE_ENABLE] = enable;

        if (enable) {
          this._velocityTexture && this._velocityTexture.destroy();
          this._velocityTexture = (0, _curveRange.packCurveRangeXYZW)(_sample_num, velocityModule.x, velocityModule.y, velocityModule.z, velocityModule.speedModifier);

          var _handle = pass.getHandle('velocity_over_time_tex0');

          var _binding = _index3.Pass.getBindingFromHandle(_handle);

          pass.bindSampler(_binding, this._velocityTexture.getGFXSampler());
          pass.bindTextureView(_binding, this._velocityTexture.getGFXTextureView());

          var _spaceHandle = pass.getHandle('u_velocity_space');

          pass.setUniform(_spaceHandle, velocityModule.space);

          var _modeHandle = pass.getHandle('u_velocity_mode');

          pass.setUniform(_modeHandle, this._velocityTexture.height);
        } // color module


        var colorModule = this._particleSystem._colorOverLifetimeModule;
        enable = colorModule && colorModule.enable;
        this._defines[COLOR_OVER_TIME_MODULE_ENABLE] = enable;

        if (enable) {
          this._colorTexture && this._colorTexture.destroy();
          this._colorTexture = (0, _gradientRange.packGradientRange)(_sample_num, colorModule.color);

          var _handle2 = pass.getHandle('color_over_time_tex0');

          var _binding2 = _index3.Pass.getBindingFromHandle(_handle2);

          pass.bindSampler(_binding2, this._colorTexture.getGFXSampler());
          pass.bindTextureView(_binding2, this._colorTexture.getGFXTextureView());

          var _modeHandle2 = pass.getHandle('u_color_mode');

          pass.setUniform(_modeHandle2, this._colorTexture.height);
        } // rotation module


        var roationModule = this._particleSystem._rotationOvertimeModule;
        enable = roationModule && roationModule.enable;
        this._defines[ROTATION_OVER_TIME_MODULE_ENABLE] = enable;

        if (enable) {
          this._rotationTexture && this._rotationTexture.destroy();

          if (roationModule.separateAxes) {
            this._rotationTexture = (0, _curveRange.packCurveRangeXYZ)(_sample_num, roationModule.x, roationModule.y, roationModule.z);
          } else {
            this._rotationTexture = (0, _curveRange.packCurveRangeZ)(_sample_num, roationModule.z);
          }

          var _handle3 = pass.getHandle('rotation_over_time_tex0');

          var _binding3 = _index3.Pass.getBindingFromHandle(_handle3);

          pass.bindSampler(_binding3, this._rotationTexture.getGFXSampler());
          pass.bindTextureView(_binding3, this._rotationTexture.getGFXTextureView());

          var _modeHandle3 = pass.getHandle('u_rotation_mode');

          pass.setUniform(_modeHandle3, this._rotationTexture.height);
        } // size module


        var sizeModule = this._particleSystem._sizeOvertimeModule;
        enable = sizeModule && sizeModule.enable;
        this._defines[SIZE_OVER_TIME_MODULE_ENABLE] = enable;

        if (enable) {
          this._sizeTexture && this._sizeTexture.destroy();

          if (sizeModule.separateAxes) {
            this._sizeTexture = (0, _curveRange.packCurveRangeXYZ)(_sample_num, sizeModule.x, sizeModule.y, sizeModule.z, true);
          } else {
            this._sizeTexture = (0, _curveRange.packCurveRangeN)(_sample_num, sizeModule.size, true);
          }

          var _handle4 = pass.getHandle('size_over_time_tex0');

          var _binding4 = _index3.Pass.getBindingFromHandle(_handle4);

          pass.bindSampler(_binding4, this._sizeTexture.getGFXSampler());
          pass.bindTextureView(_binding4, this._sizeTexture.getGFXTextureView());

          var _modeHandle4 = pass.getHandle('u_size_mode');

          pass.setUniform(_modeHandle4, this._sizeTexture.height);
        } // texture module


        var textureModule = this._particleSystem._textureAnimationModule;
        enable = textureModule && textureModule.enable;
        this._defines[TEXTURE_ANIMATION_MODULE_ENABLE] = enable;

        if (enable) {
          this._animTexture && this._animTexture.destroy();
          this._animTexture = (0, _curveRange.packCurveRangeXY)(_sample_num, textureModule.startFrame, textureModule.frameOverTime);

          var _handle5 = pass.getHandle('texture_animation_tex0');

          var _binding5 = _index3.Pass.getBindingFromHandle(_handle5);

          pass.bindSampler(_binding5, this._animTexture.getGFXSampler());
          pass.bindTextureView(_binding5, this._animTexture.getGFXTextureView());
          var infoHandle = pass.getHandle('u_anim_info');
          _tempVec4.x = this._animTexture.height;
          _tempVec4.y = textureModule.numTilesX * textureModule.numTilesY;
          _tempVec4.z = textureModule.cycleCount;
          pass.setUniform(infoHandle, _tempVec4);
        }
      }
    }, {
      key: "getParticleCount",
      value: function getParticleCount() {
        return this._particleNum;
      }
    }, {
      key: "onMaterialModified",
      value: function onMaterialModified(index, material) {
        this._updateModel();

        this.updateMaterialParams();
      }
    }, {
      key: "onRebuildPSO",
      value: function onRebuildPSO(index, material) {
        if (this._model && index === 0) {
          this._model.setSubModelMaterial(0, material);
        }
      }
    }, {
      key: "_setVertexAttrib",
      value: function _setVertexAttrib() {
        switch (this._renderInfo.renderMode) {
          case _enum.RenderMode.StrecthedBillboard:
            this._vertAttrs = _gpu_vert_attr.slice();
            break;

          case _enum.RenderMode.Mesh:
            this._vertAttrs = _gpu_vert_attr_mesh.slice();
            break;

          default:
            this._vertAttrs = _gpu_vert_attr.slice();
        }
      }
    }, {
      key: "updateMaterialParams",
      value: function updateMaterialParams() {
        if (!this._particleSystem) {
          return;
        }

        var ps = this._particleSystem;
        var shareMaterial = ps.sharedMaterial;

        if (shareMaterial !== null) {
          var effectName = shareMaterial._effectAsset._name;
          this._renderInfo.mainTexture = shareMaterial.getProperty('mainTexture', 0);

          if (effectName.indexOf('particle-gpu') === -1) {
            this._renderInfo.mainTexture = shareMaterial.getProperty('mainTexture', 0); // reset material

            this._particleSystem.setMaterial(null, 0);
          }
        }

        if (shareMaterial == null && this._defaultMat == null) {
          _matInsInfo.parent = _index.builtinResMgr.get('default-particle-gpu-material');
          _matInsInfo.owner = ps;
          _matInsInfo.subModelIdx = 0;
          this._defaultMat = new _materialInstance.MaterialInstance(_matInsInfo);

          if (this._renderInfo.mainTexture !== null) {
            this._defaultMat.setProperty('mainTexture', this._renderInfo.mainTexture);
          }
        }

        var mat = ps.getMaterialInstance(0) || this._defaultMat;

        ps.node.getWorldMatrix(_tempWorldTrans);

        switch (ps.scaleSpace) {
          case _enum.Space.Local:
            ps.node.getScale(this._node_scale);
            break;

          case _enum.Space.World:
            ps.node.getWorldScale(this._node_scale);
            break;
        }

        if (ps._simulationSpace === _enum.Space.World) {
          this._defines[CC_USE_WORLD_SPACE] = true;
        } else {
          this._defines[CC_USE_WORLD_SPACE] = false;
        }

        var renderMode = this._renderInfo.renderMode;

        if (renderMode === _enum.RenderMode.Billboard) {
          this._defines[CC_RENDER_MODE] = RENDER_MODE_BILLBOARD;
        } else if (renderMode === _enum.RenderMode.StrecthedBillboard) {
          this._defines[CC_RENDER_MODE] = RENDER_MODE_STRETCHED_BILLBOARD;
          this._frameTile_velLenScale.z = this._renderInfo.velocityScale;
          this._frameTile_velLenScale.w = this._renderInfo.lengthScale;
        } else if (renderMode === _enum.RenderMode.HorizontalBillboard) {
          this._defines[CC_RENDER_MODE] = RENDER_MODE_HORIZONTAL_BILLBOARD;
        } else if (renderMode === _enum.RenderMode.VerticalBillboard) {
          this._defines[CC_RENDER_MODE] = RENDER_MODE_VERTICAL_BILLBOARD;
        } else if (renderMode === _enum.RenderMode.Mesh) {
          this._defines[CC_RENDER_MODE] = RENDER_MODE_MESH;
        } else {
          console.warn("particle system renderMode ".concat(renderMode, " not support."));
        }

        var textureModule = ps._textureAnimationModule;

        if (textureModule && textureModule.enable) {
          _index2.Vec2.set(this._frameTile_velLenScale, textureModule.numTilesX, textureModule.numTilesY);
        }

        this.initShaderUniform(mat);
        mat.recompileShaders(this._defines);

        if (this._model) {
          this._model.setSubModelMaterial(0, mat);
        }
      }
    }]);

    return ParticleSystemRendererGPU;
  }(_particleSystemRendererBase.ParticleSystemRendererBase);

  _exports.default = ParticleSystemRendererGPU;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,