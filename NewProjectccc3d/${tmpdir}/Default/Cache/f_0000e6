(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../core/director.js", "../../core/math/index.js", "../../core/platform/sys.js", "../../core/platform/view.js", "../../core/platform/visible-rect.js", "../../core/scene-graph/index.js", "../../core/scene-graph/node.js", "../../core/utils/js.js", "./widget-component.js", "../../core/components/index.js", "../../core/default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../core/director.js"), require("../../core/math/index.js"), require("../../core/platform/sys.js"), require("../../core/platform/view.js"), require("../../core/platform/visible-rect.js"), require("../../core/scene-graph/index.js"), require("../../core/scene-graph/node.js"), require("../../core/utils/js.js"), require("./widget-component.js"), require("../../core/components/index.js"), require("../../core/default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.director, global.index, global.sys, global.view, global.visibleRect, global.index, global.node, global.js, global.widgetComponent, global.index, global.defaultConstants);
    global.widgetManager = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _director, _index, _sys, _view, _visibleRect, _index2, _node, _js, _widgetComponent, _index3, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.widgetManager = void 0;
  _visibleRect = _interopRequireDefault(_visibleRect);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  var _tempPos = new _index.Vec3();

  var _defaultAnchor = new _index.Vec2();

  var tInverseTranslate = new _index.Vec3();
  var tInverseScale = new _index.Vec3(1, 1, 1); // align to borders by adjusting node's position and size (ignore rotation)

  function align(node, widget) {
    var hasTarget = widget.target;
    var target;
    var inverseTranslate = tInverseTranslate;
    var inverseScale = tInverseScale;

    if (hasTarget) {
      target = hasTarget; // inverseTranslate = tInverseTranslate;
      // inverseScale = tInverseScale;

      (0, _widgetComponent.computeInverseTransForTarget)(node, target, inverseTranslate, inverseScale);
    } else {
      target = node.parent;
    }

    if (!target.getComponent(_index3.UITransformComponent)) {
      return;
    }

    var targetSize = (0, _widgetComponent.getReadonlyNodeSize)(target);
    var isScene = target instanceof _index2.Scene;
    var targetAnchor = isScene ? _defaultAnchor : target.getAnchorPoint(); // @ts-ignore

    var isRoot = !_defaultConstants.EDITOR && isScene;
    node.getPosition(_tempPos);
    var x = _tempPos.x;
    var y = _tempPos.y;
    var anchor = node.getAnchorPoint();
    var scale = node.getScale();

    if (widget.alignFlags & _widgetComponent.AlignFlags.HORIZONTAL) {
      var localLeft = 0;
      var localRight = 0;
      var targetWidth = targetSize.width;

      if (isRoot) {
        localLeft = _visibleRect.default.left.x;
        localRight = _visibleRect.default.right.x;
      } else {
        localLeft = -targetAnchor.x * targetWidth;
        localRight = localLeft + targetWidth;
      } // adjust borders according to offsets


      localLeft += widget.isAbsoluteLeft ? widget.left : widget.left * targetWidth;
      localRight -= widget.isAbsoluteRight ? widget.right : widget.right * targetWidth;

      if (hasTarget) {
        localLeft += inverseTranslate.x;
        localLeft *= inverseScale.x;
        localRight += inverseTranslate.x;
        localRight *= inverseScale.x;
      }

      var width = 0;
      var anchorX = anchor.x;
      var scaleX = scale.x;

      if (scaleX < 0) {
        anchorX = 1.0 - anchorX;
        scaleX = -scaleX;
      }

      if (widget.isStretchWidth) {
        width = localRight - localLeft;

        if (scaleX !== 0) {
          node.width = width / scaleX;
        }

        x = localLeft + anchorX * width;
      } else {
        width = node.width * scaleX;

        if (widget.isAlignHorizontalCenter) {
          var localHorizontalCenter = widget.isAbsoluteHorizontalCenter ? widget.horizontalCenter : widget.horizontalCenter * targetWidth;
          var targetCenter = (0.5 - targetAnchor.x) * targetSize.width;

          if (hasTarget) {
            localHorizontalCenter *= inverseScale.x;
            targetCenter += inverseTranslate.x;
            targetCenter *= inverseScale.x;
          }

          x = targetCenter + (anchorX - 0.5) * width + localHorizontalCenter;
        } else if (widget.isAlignLeft) {
          x = localLeft + anchorX * width;
        } else {
          x = localRight + (anchorX - 1) * width;
        }
      }

      widget._lastSize.width = width;
    }

    if (widget.alignFlags & _widgetComponent.AlignFlags.VERTICAL) {
      var localTop = 0;
      var localBottom = 0;
      var targetHeight = targetSize.height;

      if (isRoot) {
        localBottom = _visibleRect.default.bottom.y;
        localTop = _visibleRect.default.top.y;
      } else {
        localBottom = -targetAnchor.y * targetHeight;
        localTop = localBottom + targetHeight;
      } // adjust borders according to offsets


      localBottom += widget.isAbsoluteBottom ? widget.bottom : widget.bottom * targetHeight;
      localTop -= widget.isAbsoluteTop ? widget.top : widget.top * targetHeight;

      if (hasTarget) {
        // transform
        localBottom += inverseTranslate.y;
        localBottom *= inverseScale.y;
        localTop += inverseTranslate.y;
        localTop *= inverseScale.y;
      }

      var height = 0;
      var anchorY = anchor.y;
      var scaleY = scale.y;

      if (scaleY < 0) {
        anchorY = 1.0 - anchorY;
        scaleY = -scaleY;
      }

      if (widget.isStretchHeight) {
        height = localTop - localBottom;

        if (scaleY !== 0) {
          node.height = height / scaleY;
        }

        y = localBottom + anchorY * height;
      } else {
        height = node.height * scaleY;

        if (widget.isAlignVerticalCenter) {
          var localVerticalCenter = widget.isAbsoluteVerticalCenter ? widget.verticalCenter : widget.verticalCenter * targetHeight;
          var targetMiddle = (0.5 - targetAnchor.y) * targetSize.height;

          if (hasTarget) {
            localVerticalCenter *= inverseScale.y;
            targetMiddle += inverseTranslate.y;
            targetMiddle *= inverseScale.y;
          }

          y = targetMiddle + (anchorY - 0.5) * height + localVerticalCenter;
        } else if (widget.isAlignBottom) {
          y = localBottom + anchorY * height;
        } else {
          y = localTop + (anchorY - 1) * height;
        }
      }

      widget._lastSize.height = height;
    }

    node.setPosition(x, y, _tempPos.z);

    _index.Vec3.set(widget._lastPos, x, y, _tempPos.z);
  } // TODO: type is hack, Change to the type actually used (Node or BaseNode) when BaseNode complete


  function visitNode(node) {
    var widget = node.getComponent(_widgetComponent.WidgetComponent);

    if (widget) {
      // @ts-ignore
      if (_defaultConstants.DEV) {
        widget._validateTargetInDEV();
      }

      align(node, widget); // @ts-ignore

      if ((!_defaultConstants.EDITOR || widgetManager.animationState.animatedSinceLastFrame) && widget.alignMode !== _widgetComponent.AlignMode.ALWAYS) {
        widget.enabled = false;
      } else {
        if (cc.isValid(node, true)) {
          activeWidgets.push(widget);
        } else {
          return;
        }
      }
    }

    var children = node.children;

    var _iterator = _createForOfIteratorHelper(children),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var child = _step.value;

        if (child.active) {
          visitNode(child);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  } // if (EDITOR) {
  //     const animationState = {
  //         previewing: false,
  //         time: 0,
  //         animatedSinceLastFrame: false,
  //     };
  // }


  function refreshScene() {
    // check animation editor
    // if (EDITOR && !Editor.isBuilder) {
    // var AnimUtils = Editor.require('scene://utils/animation');
    // var EditMode = Editor.require('scene://edit-mode');
    // if (AnimUtils && EditMode) {
    //     var nowPreviewing = (EditMode.curMode().name === 'animation' && !!AnimUtils.Cache.animation);
    //     if (nowPreviewing !== animationState.previewing) {
    //         animationState.previewing = nowPreviewing;
    //         if (nowPreviewing) {
    //             animationState.animatedSinceLastFrame = true;
    //             let component = cc.engine.getInstanceById(AnimUtils.Cache.component);
    //             if (component) {
    //                 let animation = component.getAnimationState(AnimUtils.Cache.animation);
    //                 animationState.time = animation.time;
    //             }
    //         }
    //         else {
    //             animationState.animatedSinceLastFrame = false;
    //         }
    //     }
    //     else if (nowPreviewing) {
    //         let component = cc.engine.getInstanceById(AnimUtils.Cache.component);
    //         if (component) {
    //             let animation = component.getAnimationState(AnimUtils.Cache.animation);
    //             if (animationState.time !== animation.time) {
    //                 animationState.animatedSinceLastFrame = true;
    //                 animationState.time = AnimUtils.Cache.animation.time;
    //             }
    //         }
    //     }
    // }
    // }
    var scene = _director.director.getScene();

    if (scene) {
      widgetManager.isAligning = true;

      if (widgetManager._nodesOrderDirty) {
        activeWidgets.length = 0;
        visitNode(scene);
        widgetManager._nodesOrderDirty = false;
      } else {
        var i = 0;
        var widget = null;
        var iterator = widgetManager._activeWidgetsIterator; // var AnimUtils;
        // if (EDITOR &&
        //     (AnimUtils = Editor.require('scene://utils/animation')) &&
        //     AnimUtils.Cache.animation) {
        //     var editingNode = cc.engine.getInstanceById(AnimUtils.Cache.rNode);
        //     if (editingNode) {
        //         for (i = activeWidgets.length - 1; i >= 0; i--) {
        //             widget = activeWidgets[i];
        //             var node = widget.node;
        //             if (widget.alignMode !== AlignMode.ALWAYS &&
        //                 animationState.animatedSinceLastFrame &&
        //                 node.isChildOf(editingNode)
        //             ) {
        //                 // widget contains in activeWidgets should aligned at least once
        //                 widget.enabled = false;
        //             }
        //             else {
        //                 align(node, widget);
        //             }
        //         }
        //     }
        // }
        // else {
        // loop reversely will not help to prevent out of sync
        // because user may remove more than one item during a step.

        for (iterator.i = 0; iterator.i < activeWidgets.length; ++iterator.i) {
          widget = activeWidgets[iterator.i];

          if (widget._dirty) {
            align(widget.node, widget);
            widget._dirty = false;
          }
        } // }

      }

      widgetManager.isAligning = false;
    } // check animation editor


    if (_defaultConstants.EDITOR) {
      widgetManager.animationState.animatedSinceLastFrame = false;
    }
  }

  var activeWidgets = []; // updateAlignment from scene to node recursively

  function updateAlignment(node) {
    var parent = node.parent;

    if (parent && _node.Node.isNode(parent)) {
      updateAlignment(parent);
    } // node._widget will be null when widget is disabled


    var widget = node.getComponent(_widgetComponent.WidgetComponent);

    if (widget && parent) {
      align(node, widget);
    }
  }

  var canvasList = [];
  var widgetManager = cc._widgetManager = {
    isAligning: false,
    _nodesOrderDirty: false,
    _activeWidgetsIterator: new _js.array.MutableForwardIterator(activeWidgets),
    // hack
    animationState: _defaultConstants.EDITOR ? {
      previewing: false,
      time: 0,
      animatedSinceLastFrame: false
    } : null,
    init: function init(director) {
      director.on(_director.Director.EVENT_AFTER_UPDATE, refreshScene);

      if (_defaultConstants.EDITOR
      /*&& cc.engine*/
      ) {// cc.engien extends eventTarget
          // cc.engine.on('design-resolution-changed', this.onResized.bind(this));
        } else {
        if (_sys.sys.isMobile) {
          window.addEventListener('resize', this.onResized.bind(this));
        } else {
          _view.View.instance.on('design-resolution-changed', this.onResized, this);
        }
      }
    },
    add: function add(widget) {
      this._nodesOrderDirty = true;

      var canvasComp = _director.director.root.ui.getScreen(widget.node._uiProps.uiTransformComp.visibility);

      if (canvasComp && canvasList.indexOf(canvasComp) === -1) {
        canvasList.push(canvasComp);
        canvasComp.node.on('design-resolution-changed', this.onResized, this);
      }
    },
    remove: function remove(widget) {
      this._activeWidgetsIterator.remove(widget);
    },
    onResized: function onResized() {
      var scene = _director.director.getScene();

      if (scene) {
        this.refreshWidgetOnResized(scene);
      }
    },
    refreshWidgetOnResized: function refreshWidgetOnResized(node) {
      if (_node.Node.isNode(node)) {
        var widget = node.getComponent(_widgetComponent.WidgetComponent);

        if (widget && widget.alignMode === _widgetComponent.AlignMode.ON_WINDOW_RESIZE) {
          widget.enabled = true;
        }
      }

      var children = node.children;

      var _iterator2 = _createForOfIteratorHelper(children),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var child = _step2.value;
          this.refreshWidgetOnResized(child);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    },
    updateOffsetsToStayPut: function updateOffsetsToStayPut(widget, e) {
      function i(t, c) {
        return Math.abs(t - c) > 1e-10 ? c : t;
      }

      var widgetNode = widget.node;
      var widgetParent = widgetNode.parent;

      if (widgetParent) {
        var zero = new _index.Vec3();
        var one = new _index.Vec3(1, 1, 1);

        if (widget.target) {
          widgetParent = widget.target;
          (0, _widgetComponent.computeInverseTransForTarget)(widgetNode, widgetParent, zero, one);
        }

        if (!e) {
          return;
        }

        if (!widgetParent.getComponent(_index3.UITransformComponent)) {
          cc.warnID(6501, widget.node.name);
          return;
        }

        var parentAP = widgetParent.getAnchorPoint();
        var matchSize = (0, _widgetComponent.getReadonlyNodeSize)(widgetParent);
        var myAP = widgetNode.getAnchorPoint();
        var pos = widgetNode.getPosition();
        var alignFlags = _widgetComponent.AlignFlags;
        var widgetNodeScale = widgetNode.getScale();
        var temp = 0;

        if (e & alignFlags.LEFT) {
          var l = -parentAP.x * matchSize.width;
          l += zero.x;
          l *= one.x;
          temp = pos.x - myAP.x * widgetNode.width * widgetNodeScale.x - l;

          if (!widget.isAbsoluteLeft) {
            temp /= matchSize.width;
          }

          temp /= one.x;
          widget.left = i(widget.left, temp);
        }

        if (e & alignFlags.RIGHT) {
          var r = (1 - parentAP.x) * matchSize.width;
          r += zero.x;
          temp = (r *= one.x) - (pos.x + (1 - myAP.x) * widgetNode.width * widgetNodeScale.x);

          if (!widget.isAbsoluteRight) {
            temp /= matchSize.width;
          }

          temp /= one.x;
          widget.right = i(widget.right, temp);
        }

        if (e & alignFlags.TOP) {
          var t = (1 - parentAP.y) * matchSize.height;
          t += zero.y;
          temp = (t *= one.y) - (pos.y + (1 - myAP.y) * widgetNode.height * widgetNodeScale.y);

          if (!widget.isAbsoluteTop) {
            temp /= matchSize.height;
          }

          temp /= one.y;
          widget.top = i(widget.top, temp);
        }

        if (e & alignFlags.BOT) {
          var b = -parentAP.y * matchSize.height;
          b += zero.y;
          b *= one.y;
          temp = pos.y - myAP.y * widgetNode.height * widgetNodeScale.y - b;

          if (!widget.isAbsoluteBottom) {
            temp /= matchSize.height;
          }

          temp /= one.y;
          widget.bottom = i(widget.bottom, temp);
        }
      }
    },
    updateAlignment: updateAlignment,
    AlignMode: _widgetComponent.AlignMode,
    AlignFlags: _widgetComponent.AlignFlags
  };
  _exports.widgetManager = widgetManager;

  _director.director.on(_director.Director.EVENT_INIT, function () {
    widgetManager.init(_director.director);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,