(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../core/components/ui-base/ui-component.js", "../../core/data/class-decorator.js", "../../core/director.js", "../../core/pipeline/define.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../core/components/ui-base/ui-component.js"), require("../../core/data/class-decorator.js"), require("../../core/director.js"), require("../../core/pipeline/define.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.uiComponent, global.classDecorator, global.director, global.define);
    global.uiModelComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _uiComponent, _classDecorator, _director, _define) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.UIModelComponent = void 0;

  var _dec, _dec2, _dec3, _dec4, _class, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  /**
   * @en
   * The component of model.
   * When you place particles or models in the UI, you must add this component to render.
   * The component must be placed on a node with the modelComponent or the particleComponent.
   *
   * @zh
   * UI 模型基础组件。
   * 当你在 UI 中放置模型或者粒子的时候，必须添加该组件才能渲染。该组件必须放置在带有 modelComponent 或者 particleComponent 组件的节点上。
   */
  var UIModelComponent = (_dec = (0, _classDecorator.ccclass)('cc.UIModelComponent'), _dec2 = (0, _classDecorator.help)('i18n:cc.UIModelComponent'), _dec3 = (0, _classDecorator.executionOrder)(110), _dec4 = (0, _classDecorator.menu)('UI/Model'), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = (_temp = /*#__PURE__*/function (_UIComponent) {
    _inherits(UIModelComponent, _UIComponent);

    function UIModelComponent() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, UIModelComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(UIModelComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this._models = null;
      _this._modelComponent = null;
      return _this;
    }

    _createClass(UIModelComponent, [{
      key: "onLoad",
      value: function onLoad() {
        if (!this.node._uiProps.uiTransformComp) {
          this.node.addComponent('cc.UITransformComponent');
        }

        this._modelComponent = this.getComponent('cc.RenderableComponent');

        if (!this._modelComponent) {
          console.warn("node '".concat(this.node && this.node.name, "' doesn't have any renderable component"));
          return;
        }

        this._modelComponent._sceneGetter = _director.director.root.ui.getRenderSceneGetter();
        this._models = this._modelComponent._collectModels();
      }
    }, {
      key: "onEnable",
      value: function onEnable() {
        _get(_getPrototypeOf(UIModelComponent.prototype), "onEnable", this).call(this);

        if (this._modelComponent) {
          this._modelComponent._attachToScene();
        }
      }
    }, {
      key: "onDisable",
      value: function onDisable() {
        _get(_getPrototypeOf(UIModelComponent.prototype), "onDisable", this).call(this);

        if (this._modelComponent) {
          this._modelComponent._detachFromScene();
        }
      }
    }, {
      key: "onDestroy",
      value: function onDestroy() {
        _get(_getPrototypeOf(UIModelComponent.prototype), "onDestroy", this).call(this);

        this._modelComponent = this.getComponent('cc.RenderableComponent');

        if (!this._modelComponent) {
          return;
        }

        this._modelComponent._sceneGetter = null;

        if (cc.isValid(this._modelComponent, true)) {
          this._modelComponent._attachToScene();
        }

        this._models = null;
      }
    }, {
      key: "updateAssembler",
      value: function updateAssembler(render) {
        if (this._models) {
          var _iterator = _createForOfIteratorHelper(this._models),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var m = _step.value;
              render.commitModel.call(render, this, m, this._modelComponent.material);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          return true;
        }

        return false;
      }
    }, {
      key: "update",
      value: function update() {
        this._fitUIRenderQueue();
      }
      /**
       * TODO: refactor using Pass.createPipelineState(null, overriddenPass)
       * ```
       * const overriddenPass = new Pass(); // global scope
       * // when creating PSO
       * Pass.fillinPipelineInfo(overriddenPass, passes[j]);
       * Pass.fillinPipelineInfo(overriddenPass, { priority: RenderPriority.MAX - 11, blendState: { targets: [ { blend: true } ] } });
       * const pso = passes[j].createPipelineState(null, overriddenPass);
       * // ...
       * ```
       */

    }, {
      key: "_fitUIRenderQueue",
      value: function _fitUIRenderQueue() {
        if (!this._modelComponent) {
          return;
        }

        var matNum = this._modelComponent.sharedMaterials.length;

        for (var i = 0; i < matNum; i++) {
          var material = this._modelComponent.getMaterialInstance(i);

          if (material == null) {
            continue;
          }

          var passes = material.passes;
          var ea = material.effectAsset;
          var techIdx = material.technique;
          var passNum = passes.length;

          for (var j = 0; j < passNum; j++) {
            if (!passes[j].blendState.targets[0].blend) {
              var bs = passes[j].blendState.targets[0];
              bs.blend = true;
              passes[j].overridePipelineStates(ea.techniques[techIdx].passes[j], {
                blendState: passes[j].blendState
              });
            }
          }
        }

        for (var _i = 0; _i < matNum; _i++) {
          var _material = this._modelComponent.getMaterialInstance(_i);

          if (_material == null) {
            continue;
          }

          var _passes = _material.passes;

          var _iterator2 = _createForOfIteratorHelper(_passes),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var p = _step2.value;
              p._priority = _define.RenderPriority.MAX - 11;
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      }
    }, {
      key: "modelComponent",
      get: function get() {
        return this._modelComponent;
      }
    }]);

    return UIModelComponent;
  }(_uiComponent.UIComponent), _temp)) || _class) || _class) || _class) || _class);
  _exports.UIModelComponent = UIModelComponent;
  cc.UIModelComponent = UIModelComponent;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,