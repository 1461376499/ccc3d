(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../gfx/index.js", "./texture-2d.js", "./image-asset.js", "../renderer/core/sampler-lib.js", "../pipeline/define.js", "../platform/debug.js", "../data/utils/asserts.js", "../math/bits.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../gfx/index.js"), require("./texture-2d.js"), require("./image-asset.js"), require("../renderer/core/sampler-lib.js"), require("../pipeline/define.js"), require("../platform/debug.js"), require("../data/utils/asserts.js"), require("../math/bits.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.texture2d, global.imageAsset, global.samplerLib, global.define, global.debug, global.asserts, global.bits);
    global.morphRendering = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _texture2d, _imageAsset, _samplerLib, _define, _debug, _asserts, _bits) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.StdMorphRendering = void 0;

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  /**
   * True if force to use cpu computing based sub-mesh rendering.
   */
  var preferCpuComputing = false;
  /**
   * Standard morph rendering.
   * The standard morph rendering renders each of sub-mesh morph separately.
   * Sub-mesh morph rendering may select different technique according sub-mesh morph itself.
   */

  var StdMorphRendering = /*#__PURE__*/function () {
    function StdMorphRendering(mesh, gfxDevice) {
      _classCallCheck(this, StdMorphRendering);

      this._mesh = void 0;
      this._subMeshRenderings = [];
      this._mesh = mesh;

      if (!this._mesh.struct.morph) {
        return;
      }

      var nSubMeshes = this._mesh.struct.primitives.length;
      this._subMeshRenderings = new Array(nSubMeshes).fill(null);

      for (var iSubMesh = 0; iSubMesh < nSubMeshes; ++iSubMesh) {
        var subMeshMorph = this._mesh.struct.morph.subMeshMorphs[iSubMesh];

        if (!subMeshMorph) {
          continue;
        }

        if (subMeshMorph.targets.length > _define.UBOMorph.MAX_MORPH_TARGET_COUNT) {
          (0, _debug.warnID)(10002, _define.UBOMorph.MAX_MORPH_TARGET_COUNT, subMeshMorph.targets.length);
          continue;
        }

        if (preferCpuComputing) {
          this._subMeshRenderings[iSubMesh] = new CpuComputing(this._mesh, iSubMesh, this._mesh.struct.morph, gfxDevice);
        } else {
          this._subMeshRenderings[iSubMesh] = new GpuComputing(this._mesh, iSubMesh, this._mesh.struct.morph, gfxDevice);
        }
      }
    }

    _createClass(StdMorphRendering, [{
      key: "createInstance",
      value: function createInstance() {
        var _this = this;

        var nSubMeshes = this._mesh.struct.primitives.length;
        var subMeshInstances = new Array(nSubMeshes);

        for (var iSubMesh = 0; iSubMesh < nSubMeshes; ++iSubMesh) {
          var _this$_subMeshRenderi, _this$_subMeshRenderi2;

          subMeshInstances[iSubMesh] = (_this$_subMeshRenderi = (_this$_subMeshRenderi2 = this._subMeshRenderings[iSubMesh]) === null || _this$_subMeshRenderi2 === void 0 ? void 0 : _this$_subMeshRenderi2.createInstance()) !== null && _this$_subMeshRenderi !== void 0 ? _this$_subMeshRenderi : null;
        }

        return {
          setWeights: function setWeights(subMeshIndex, weights) {
            var _subMeshInstances$sub;

            (_subMeshInstances$sub = subMeshInstances[subMeshIndex]) === null || _subMeshInstances$sub === void 0 ? void 0 : _subMeshInstances$sub.setWeights(weights);
          },
          requiredPatches: function requiredPatches(subMeshIndex) {
            var subMeshMorph = _this._mesh.struct.morph.subMeshMorphs[subMeshIndex];
            var subMeshRenderingInstance = subMeshInstances[subMeshIndex];

            if (subMeshRenderingInstance === null) {
              return;
            }

            (0, _asserts.assertIsNonNullable)(subMeshMorph);
            var patches = [{
              name: 'CC_USE_MORPH',
              value: true
            }, {
              name: 'CC_MORPH_TARGET_COUNT',
              value: subMeshMorph.targets.length
            }];

            if (subMeshMorph.attributes.includes(_index.GFXAttributeName.ATTR_POSITION)) {
              patches.push({
                name: 'CC_MORPH_TARGET_HAS_POSITION',
                value: true
              });
            }

            if (subMeshMorph.attributes.includes(_index.GFXAttributeName.ATTR_NORMAL)) {
              patches.push({
                name: 'CC_MORPH_TARGET_HAS_NORMAL',
                value: true
              });
            }

            if (subMeshMorph.attributes.includes(_index.GFXAttributeName.ATTR_TANGENT)) {
              patches.push({
                name: 'CC_MORPH_TARGET_HAS_TANGENT',
                value: true
              });
            }

            patches.push.apply(patches, _toConsumableArray(subMeshRenderingInstance.requiredPatches()));
            return patches;
          },
          adaptPipelineState: function adaptPipelineState(subMeshIndex, pipelineState) {
            var _subMeshInstances$sub2;

            (_subMeshInstances$sub2 = subMeshInstances[subMeshIndex]) === null || _subMeshInstances$sub2 === void 0 ? void 0 : _subMeshInstances$sub2.adaptPipelineState(pipelineState);
          },
          destroy: function destroy() {
            var _iterator = _createForOfIteratorHelper(subMeshInstances),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var subMeshInstance = _step.value;
                subMeshInstance === null || subMeshInstance === void 0 ? void 0 : subMeshInstance.destroy();
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }
        };
      }
    }]);

    return StdMorphRendering;
  }();
  /**
   * Describes how to render a sub-mesh morph.
   */


  _exports.StdMorphRendering = StdMorphRendering;

  /**
   * (General purpose) Gpu computing based sub-mesh morph rendering.
   * This technique computes final attribute displacements on GPU.
   * Target displacements of each attribute are transferred through vertex texture, say, morph texture.
   */
  var GpuComputing = /*#__PURE__*/function () {
    function GpuComputing(mesh, subMeshIndex, morph, gfxDevice) {
      _classCallCheck(this, GpuComputing);

      this._gfxDevice = void 0;
      this._subMeshMorph = void 0;
      this._textureInfo = void 0;
      this._attributes = void 0;
      this._gfxDevice = gfxDevice;
      var meshData = mesh.data.buffer;
      var subMeshMorph = morph.subMeshMorphs[subMeshIndex];
      (0, _asserts.assertIsNonNullable)(subMeshMorph);
      this._subMeshMorph = subMeshMorph;
      enableVertexId(mesh, subMeshIndex, gfxDevice);
      var nVertices = mesh.struct.vertexBundles[mesh.struct.primitives[subMeshIndex].vertexBundelIndices[0]].view.count;
      var nTargets = subMeshMorph.targets.length; // Head includes N pixels, where N is number of targets.
      // Every r channel of the pixel denotes the index of the data pixel of corresponding target.
      // [ (target1_data_offset), (target2_data_offset), .... ] target_data

      var pixelsRequired = nTargets + nVertices * nTargets;
      var textureExtents = nearestSqrtPowerOf2LargeThan(pixelsRequired);
      var width = textureExtents;
      var height = textureExtents;
      (0, _asserts.assertIsTrue)(width * height > pixelsRequired);
      this._textureInfo = {
        width: width,
        height: height
      }; // Creates texture for each attribute.

      this._attributes = subMeshMorph.attributes.map(function (attributeName, attributeIndex) {
        var nTargets = subMeshMorph.targets.length;
        var textureInfo = {
          displacements: new Array(),
          targetOffsets: new Array(nTargets).fill(0)
        };
        subMeshMorph.targets.forEach(function (morphTarget, morphTargetIndex) {
          var _textureInfo$displace;

          var displacements = morphTarget.displacements[attributeIndex];
          textureInfo.targetOffsets[morphTargetIndex] = textureInfo.displacements.length;

          (_textureInfo$displace = textureInfo.displacements).push.apply(_textureInfo$displace, _toConsumableArray(new Float32Array(meshData, displacements.offset, displacements.count)));
        });
        var pixelStride = 3; // For position, normal, tangent

        var pixelFormat = _texture2d.Texture2D.PixelFormat.RGB32F; // For position, normal, tangent

        var textureSource = new Float32Array(pixelStride * width * height);
        var headPixels = nTargets;
        var headElements = pixelStride * headPixels;

        for (var iTarget = 0; iTarget < nTargets; ++iTarget) {
          textureSource[pixelStride * iTarget] = headPixels + textureInfo.targetOffsets[iTarget] / pixelStride;
        }

        for (var iData = 0; iData < textureInfo.displacements.length; ++iData) {
          textureSource[headElements + iData] = textureInfo.displacements[iData];
        }

        var image = new _imageAsset.ImageAsset({
          width: width,
          height: height,
          _data: textureSource,
          _compressed: false,
          format: pixelFormat
        });
        var textureAsset = new _texture2d.Texture2D();
        textureAsset.setFilters(_texture2d.Texture2D.Filter.NEAREST, _texture2d.Texture2D.Filter.NEAREST);
        textureAsset.setMipFilter(_texture2d.Texture2D.Filter.NONE);
        textureAsset.setWrapMode(_texture2d.Texture2D.WrapMode.CLAMP_TO_EDGE, _texture2d.Texture2D.WrapMode.CLAMP_TO_EDGE, _texture2d.Texture2D.WrapMode.CLAMP_TO_EDGE);
        textureAsset.image = image;

        var sampler = _samplerLib.samplerLib.getSampler(gfxDevice, textureAsset.getSamplerHash());

        return {
          name: attributeName,
          texture: textureAsset,
          sampler: sampler
        };
      });
    }

    _createClass(GpuComputing, [{
      key: "destroy",
      value: function destroy() {
        var _iterator2 = _createForOfIteratorHelper(this._attributes),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var attribute = _step2.value;
            attribute.texture.destroy();
            attribute.sampler.destroy();
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
    }, {
      key: "createInstance",
      value: function createInstance() {
        var _this2 = this;

        var morphUniforms = new MorphUniforms(this._gfxDevice, this._subMeshMorph.targets.length);
        morphUniforms.setMorphTextureInfo(this._textureInfo.width, this._textureInfo.height);
        morphUniforms.commit();
        return {
          setWeights: function setWeights(weights) {
            morphUniforms.setWeights(weights);
            morphUniforms.commit();
          },
          requiredPatches: function requiredPatches() {
            return [{
              name: 'CC_MORPH_TARGET_USE_TEXTURE',
              value: true
            }];
          },
          adaptPipelineState: function adaptPipelineState(pipelineState) {
            var bindingLayout = pipelineState.pipelineLayout.layouts[0];

            var _iterator3 = _createForOfIteratorHelper(_this2._attributes),
                _step3;

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var attribute = _step3.value;
                var binding = void 0;

                switch (attribute.name) {
                  case _index.GFXAttributeName.ATTR_POSITION:
                    binding = _define.UniformPositionMorphTexture.binding;
                    break;

                  case _index.GFXAttributeName.ATTR_NORMAL:
                    binding = _define.UniformNormalMorphTexture.binding;
                    break;

                  case _index.GFXAttributeName.ATTR_TANGENT:
                    binding = _define.UniformTangentMorphTexture.binding;
                    break;

                  default:
                    (0, _debug.warn)("Unexpected attribute!");
                    break;
                }

                if (binding !== undefined) {
                  bindingLayout.bindSampler(binding, attribute.sampler);
                  bindingLayout.bindTextureView(binding, attribute.texture.getGFXTextureView());
                }
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }

            bindingLayout.bindBuffer(_define.UBOMorph.BLOCK.binding, morphUniforms.buffer);
            bindingLayout.update();
          },
          destroy: function destroy() {}
        };
      }
    }]);

    return GpuComputing;
  }();
  /**
   * Cpu computing based sub-mesh morph rendering.
   * This technique computes final attribute displacements on CPU.
   * The displacements, then, are passed to GPU.
   */


  var CpuComputing = /*#__PURE__*/function () {
    function CpuComputing(mesh, subMeshIndex, morph, gfxDevice) {
      _classCallCheck(this, CpuComputing);

      this._gfxDevice = void 0;
      this._attributes = [];
      this._gfxDevice = gfxDevice;
      var meshData = mesh.data.buffer;
      var subMeshMorph = morph.subMeshMorphs[subMeshIndex];
      (0, _asserts.assertIsNonNullable)(subMeshMorph);
      enableVertexId(mesh, subMeshIndex, gfxDevice);
      this._attributes = subMeshMorph.attributes.map(function (attributeName, attributeIndex) {
        return {
          name: attributeName,
          targets: subMeshMorph.targets.map(function (attributeDisplacement) {
            return {
              displacements: new Float32Array(meshData, attributeDisplacement.displacements[attributeIndex].offset, attributeDisplacement.displacements[attributeIndex].count)
            };
          })
        };
      });
    }
    /**
     * DO NOT use this field.
     */


    _createClass(CpuComputing, [{
      key: "createInstance",
      value: function createInstance() {
        return new CpuComputingRenderingInstance(this, this._attributes[0].targets[0].displacements.length / 3, this._gfxDevice);
      }
    }, {
      key: "data",
      get: function get() {
        return this._attributes;
      }
    }]);

    return CpuComputing;
  }();

  var CpuComputingRenderingInstance = /*#__PURE__*/function () {
    function CpuComputingRenderingInstance(owner, nVertices, gfxDevice) {
      _classCallCheck(this, CpuComputingRenderingInstance);

      this._attributes = void 0;
      this._owner = void 0;
      this._morphUniforms = void 0;
      this._owner = owner;
      this._morphUniforms = new MorphUniforms(gfxDevice, 0
      /* TODO? */
      );
      var pixelRequired = nVertices;
      var textureExtents = nearestSqrtPowerOf2LargeThan(pixelRequired);
      var width = textureExtents;
      var height = textureExtents;

      this._morphUniforms.setMorphTextureInfo(width, height);

      this._morphUniforms.commit();

      this._attributes = this._owner.data.map(function (attributeMorph, attributeIndex) {
        var nElements = 3;
        var local = new Float32Array(nElements * width * height);
        var image = new _imageAsset.ImageAsset({
          width: width,
          height: height,
          _data: local,
          _compressed: false,
          format: _texture2d.Texture2D.PixelFormat.RGB32F
        });
        var textureAsset = new _texture2d.Texture2D();
        textureAsset.setFilters(_texture2d.Texture2D.Filter.NEAREST, _texture2d.Texture2D.Filter.NEAREST);
        textureAsset.setMipFilter(_texture2d.Texture2D.Filter.NONE);
        textureAsset.setWrapMode(_texture2d.Texture2D.WrapMode.CLAMP_TO_EDGE, _texture2d.Texture2D.WrapMode.CLAMP_TO_EDGE, _texture2d.Texture2D.WrapMode.CLAMP_TO_EDGE);
        textureAsset.image = image;

        if (!textureAsset.getGFXTextureView()) {
          (0, _debug.warn)("Unexpected: failed to create morph texture?");
        }

        var sampler = _samplerLib.samplerLib.getSampler(gfxDevice, textureAsset.getSamplerHash());

        return {
          attributeName: attributeMorph.name,
          local: local,
          texture: textureAsset,
          sampler: sampler
        };
      });
    }

    _createClass(CpuComputingRenderingInstance, [{
      key: "setWeights",
      value: function setWeights(weights) {
        for (var iAttribute = 0; iAttribute < this._attributes.length; ++iAttribute) {
          var myAttribute = this._attributes[iAttribute];
          var attributeMorph = this._owner.data[iAttribute];
          (0, _asserts.assertIsTrue)(weights.length === attributeMorph.targets.length);

          for (var iTarget = 0; iTarget < attributeMorph.targets.length; ++iTarget) {
            var targetDisplacements = attributeMorph.targets[iTarget].displacements;
            var weight = weights[iTarget];

            if (iTarget === 0) {
              for (var i = 0; i < targetDisplacements.length; ++i) {
                myAttribute.local[i] = targetDisplacements[i] * weight;
              }
            } else {
              for (var _i = 0; _i < targetDisplacements.length; ++_i) {
                myAttribute.local[_i] += targetDisplacements[_i] * weight;
              }
            }
          } // Normalize displacements to [0, 1].


          if (false) {
            var n = attributeMorph.targets[0].displacements.length / 3;

            for (var c = 0; c < 3; ++c) {
              var min = Number.POSITIVE_INFINITY;
              var max = Number.NEGATIVE_INFINITY;

              for (var _i2 = 0; _i2 < n; ++_i2) {
                var x = myAttribute.local[_i2 * 3 + c];
                max = Math.max(x, max);
                min = Math.min(x, min);
              }

              var d = max - min;

              for (var _i3 = 0; _i3 < n; ++_i3) {
                var _x = myAttribute.local[_i3 * 3 + c];
                myAttribute.local[_i3 * 3 + c] = (_x - min) / d;
              }
            }
          } // Randomize displacements.


          if (false) {
            for (var _i4 = 0; _i4 < myAttribute.local.length; ++_i4) {
              if (_i4 % 3 === 1) {
                myAttribute.local[_i4] = cc.director.getTotalFrames() % 500 * 0.001;
              } else {
                myAttribute.local[_i4] = 0;
              }
            }
          }

          myAttribute.texture.uploadData(myAttribute.local);
        }
      }
    }, {
      key: "requiredPatches",
      value: function requiredPatches() {
        return [{
          name: 'CC_MORPH_TARGET_USE_TEXTURE',
          value: true
        }, {
          name: 'CC_MORPH_PRECOMPUTED',
          value: true
        }];
      }
    }, {
      key: "adaptPipelineState",
      value: function adaptPipelineState(pipelineState) {
        var bindingLayout = pipelineState.pipelineLayout.layouts[0];

        var _iterator4 = _createForOfIteratorHelper(this._attributes),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var attribute = _step4.value;
            var attributeName = attribute.attributeName;
            var binding = void 0;

            switch (attributeName) {
              case _index.GFXAttributeName.ATTR_POSITION:
                binding = _define.UniformPositionMorphTexture.binding;
                break;

              case _index.GFXAttributeName.ATTR_NORMAL:
                binding = _define.UniformNormalMorphTexture.binding;
                break;

              case _index.GFXAttributeName.ATTR_TANGENT:
                binding = _define.UniformTangentMorphTexture.binding;
                break;

              default:
                (0, _debug.warn)("Unexpected attribute!");
                break;
            }

            if (binding !== undefined) {
              bindingLayout.bindSampler(binding, attribute.sampler);
              bindingLayout.bindTextureView(binding, attribute.texture.getGFXTextureView());
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }

        bindingLayout.bindBuffer(_define.UBOMorph.BLOCK.binding, this._morphUniforms.buffer);
        bindingLayout.update();
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this._morphUniforms.destroy();

        for (var iAttribute = 0; iAttribute < this._attributes.length; ++iAttribute) {
          var myAttribute = this._attributes[iAttribute]; // TODO: Should we free sampler?

          myAttribute.texture.destroy();
        }
      }
    }]);

    return CpuComputingRenderingInstance;
  }();

  var CpuRenderingInstance;

  (function (_CpuRenderingInstance) {})(CpuRenderingInstance || (CpuRenderingInstance = {}));
  /**
   * Provides the access to morph related uniforms.
   */


  var MorphUniforms = /*#__PURE__*/function () {
    function MorphUniforms(gfxDevice, targetCount) {
      _classCallCheck(this, MorphUniforms);

      this._targetCount = void 0;
      this._localBuffer = void 0;
      this._remoteBuffer = void 0;
      this._targetCount = targetCount;
      this._localBuffer = new DataView(new ArrayBuffer(_define.UBOMorph.SIZE));
      this._remoteBuffer = gfxDevice.createBuffer({
        usage: _index.GFXBufferUsageBit.UNIFORM | _index.GFXBufferUsageBit.TRANSFER_DST,
        memUsage: _index.GFXMemoryUsageBit.HOST | _index.GFXMemoryUsageBit.DEVICE,
        size: _define.UBOMorph.SIZE,
        stride: _define.UBOMorph.SIZE
      });
    }

    _createClass(MorphUniforms, [{
      key: "destroy",
      value: function destroy() {
        this._remoteBuffer.destroy();
      }
    }, {
      key: "setWeights",
      value: function setWeights(weights) {
        (0, _asserts.assertIsTrue)(weights.length === this._targetCount);

        for (var iWeight = 0; iWeight < weights.length; ++iWeight) {
          this._localBuffer.setFloat32(_define.UBOMorph.OFFSET_OF_WEIGHTS + 4 * iWeight, weights[iWeight], cc.sys.isLittleEndian);
        }
      }
    }, {
      key: "setMorphTextureInfo",
      value: function setMorphTextureInfo(width, height) {
        this._localBuffer.setFloat32(_define.UBOMorph.OFFSET_OF_DISPLACEMENT_TEXTURE_WIDTH, width, cc.sys.isLittleEndian);

        this._localBuffer.setFloat32(_define.UBOMorph.OFFSET_OF_DISPLACEMENT_TEXTURE_HEIGHT, height, cc.sys.isLittleEndian);
      }
    }, {
      key: "commit",
      value: function commit() {
        this._remoteBuffer.update(this._localBuffer.buffer, this._localBuffer.byteOffset, this._localBuffer.byteLength);
      }
    }, {
      key: "buffer",
      get: function get() {
        return this._remoteBuffer;
      }
    }]);

    return MorphUniforms;
  }();
  /**
   * When use vertex-texture-fetch technique, we do need
   * `gl_vertexId` when we sample per-vertex data.
   * WebGL 1.0 does not have `gl_vertexId`; WebGL 2.0, however, does.
   * @param mesh 
   * @param subMeshIndex 
   * @param gfxDevice 
   */


  function enableVertexId(mesh, subMeshIndex, gfxDevice) {
    mesh.renderingSubMeshes[subMeshIndex].enableVertexIdChannel(gfxDevice);
  }

  function nearestSqrtPowerOf2LargeThan(value) {
    return (0, _bits.nextPow2)(Math.ceil(Math.sqrt(value)));
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,