(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../components/component.js", "../data/class-decorator.js", "./view.js", "../../ui/components/sprite-component.js", "../scene-graph/index.js", "../components/ui-base/ui-transform-component.js", "../assets/index.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../components/component.js"), require("../data/class-decorator.js"), require("./view.js"), require("../../ui/components/sprite-component.js"), require("../scene-graph/index.js"), require("../components/ui-base/ui-transform-component.js"), require("../assets/index.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.component, global.classDecorator, global.view, global.spriteComponent, global.index, global.uiTransformComponent, global.index);
    global.SubContextView = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _component, _classDecorator, _view, _spriteComponent, _index, _uiTransformComponent, _index2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SubContextView = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  /**
   * @en SubContextView is a view component which controls open data context viewport in WeChat game platform.<br/>
   * The component's node size decide the viewport of the sub context content in main context,
   * the entire sub context texture will be scaled to the node's bounding box area.<br/>
   * This component provides multiple important features:<br/>
   * 1. Sub context could use its own resolution size and policy.<br/>
   * 2. Sub context could be minized to smallest size it needed.<br/>
   * 3. Resolution of sub context content could be increased.<br/>
   * 4. User touch input is transformed to the correct viewport.<br/>
   * 5. Texture update is handled by this component. User don't need to worry.<br/>
   * One important thing to be noted, whenever the node's bounding box change,
   * you need to manually reset the viewport of sub context using updateSubContextViewport.
   * @zh SubContextView 可以用来控制微信小游戏平台开放数据域在主域中的视窗的位置。<br/>
   * 这个组件的节点尺寸决定了开放数据域内容在主域中的尺寸，整个开放数据域会被缩放到节点的包围盒范围内。<br/>
   * 在这个组件的控制下，用户可以更自由得控制开放数据域：<br/>
   * 1. 子域中可以使用独立的设计分辨率和适配模式<br/>
   * 2. 子域区域尺寸可以缩小到只容纳内容即可<br/>
   * 3. 子域的分辨率也可以被放大，以便获得更清晰的显示效果<br/>
   * 4. 用户输入坐标会被自动转换到正确的子域视窗中<br/>
   * 5. 子域内容贴图的更新由组件负责，用户不需要处理<br/>
   * 唯一需要注意的是，当子域节点的包围盒发生改变时，开发者需要使用 `updateSubContextViewport` 来手动更新子域视窗。
   */
  var SubContextView = (_dec = (0, _classDecorator.ccclass)('cc.SubContextView'), _dec2 = (0, _classDecorator.help)('i18n:cc.SubContextView'), _dec3 = (0, _classDecorator.executionOrder)(110), _dec4 = (0, _classDecorator.requireComponent)(_uiTransformComponent.UITransformComponent), _dec5 = (0, _classDecorator.menu)('Components/SubContextView'), _dec6 = (0, _classDecorator.property)({
    tooltip: '帧数'
  }), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = _dec5(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
    _inherits(SubContextView, _Component);

    _createClass(SubContextView, [{
      key: "fps",
      get: function get() {
        return this._fps;
      },
      set: function set(value) {
        if (this._fps === value) {
          return;
        }

        this._fps = value;
        this._updateInterval = 1 / value;

        this._updateSubContextFrameRate();
      }
    }]);

    function SubContextView() {
      var _this;

      _classCallCheck(this, SubContextView);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(SubContextView).call(this));

      _initializerDefineProperty(_this, "_fps", _descriptor, _assertThisInitialized(_this));

      _this._sprite = void 0;
      _this._imageAsset = void 0;
      _this._context = void 0;
      _this._updatedTime = 0;
      _this._updateInterval = 0;
      _this._sprite = null;
      _this._imageAsset = new _index2.ImageAsset();
      _this._context = null;
      _this._updatedTime = performance.now();
      return _this;
    }

    _createClass(SubContextView, [{
      key: "onLoad",
      value: function onLoad() {
        // Setup subcontext canvas size
        if (wx && wx.getOpenDataContext) {
          this._updateInterval = 1000 / this._fps;
          this._context = wx.getOpenDataContext(); // reset sharedCanvas width and height

          this.reset();
          var image = this._imageAsset;
          var sharedCanvas = this._context.canvas;
          image.reset(sharedCanvas);

          image._texture.create(sharedCanvas.width, sharedCanvas.height);

          this._sprite = this.node.getComponent(_spriteComponent.SpriteComponent);

          if (!this._sprite) {
            this._sprite = this.node.addComponent(_spriteComponent.SpriteComponent);
          }

          if (this._sprite.spriteFrame) {
            this._sprite.spriteFrame.texture = this._imageAsset._texture;
          } else {
            var sp = new _index2.SpriteFrame();
            sp.texture = this._imageAsset._texture;
            this._sprite.spriteFrame = sp;
          }
        } else {
          this.enabled = false;
        }
      }
    }, {
      key: "onEnable",
      value: function onEnable() {
        this._runSubContextMainLoop();

        this._registerNodeEvent();

        this._updateSubContextFrameRate();

        this.updateSubContextViewport();
      }
    }, {
      key: "onDisable",
      value: function onDisable() {
        this._unregisterNodeEvent();

        this._stopSubContextMainLoop();
      }
    }, {
      key: "update",
      value: function update(dt) {
        var calledUpdateManually = dt === undefined;

        if (calledUpdateManually) {
          this._context && this._context.postMessage({
            fromEngine: true,
            event: 'step'
          });

          this._updateSubContextTexture();

          return;
        }

        var now = performance.now();
        var deltaTime = now - this._updatedTime;

        if (deltaTime >= this._updateInterval) {
          this._updatedTime += this._updateInterval;

          this._updateSubContextTexture();
        }
      }
      /**
       * @en Reset open data context size and viewport
       * @zh 重置开放数据域的尺寸和视窗
       */

    }, {
      key: "reset",
      value: function reset() {
        if (this._context) {
          this.updateSubContextViewport();
          var sharedCanvas = this._context.canvas;
          var transformComp = this.node.getComponent(_uiTransformComponent.UITransformComponent);

          if (sharedCanvas) {
            sharedCanvas.width = transformComp.width;
            sharedCanvas.height = transformComp.height;
          }
        }
      }
      /**
       * @en Update the sub context viewport manually, it should be called whenever the node's bounding box changes.
       * @zh 更新开放数据域相对于主域的 viewport，这个函数应该在节点包围盒改变时手动调用。
       */

    }, {
      key: "updateSubContextViewport",
      value: function updateSubContextViewport() {
        if (this._context) {
          var box = this.node.getComponent(_uiTransformComponent.UITransformComponent).getBoundingBoxToWorld();

          var sx = _view.view.getScaleX();

          var sy = _view.view.getScaleY();

          var rect = _view.view.getViewportRect();

          this._context.postMessage({
            fromEngine: true,
            event: 'viewport',
            x: box.x * sx + rect.x,
            y: box.y * sy + rect.y,
            width: box.width * sx,
            height: box.height * sy
          });
        }
      }
    }, {
      key: "_updateSubContextTexture",
      value: function _updateSubContextTexture() {
        var img = this._imageAsset;

        if (!img || !this._context) {
          return;
        }

        if (img.width <= 0 || img.height <= 0) {
          return;
        }

        var canvas = this._context.canvas;
        img.reset(canvas);

        if (canvas.width > img.width || canvas.height > img.height) {
          this._imageAsset._texture.create(canvas.width, canvas.height);
        }

        this._imageAsset._texture.uploadData(canvas);
      }
    }, {
      key: "_registerNodeEvent",
      value: function _registerNodeEvent() {
        this.node.on(_index.Node.EventType.TRANSFORM_CHANGED, this.updateSubContextViewport, this);
        this.node.on(_index.Node.EventType.SIZE_CHANGED, this.updateSubContextViewport, this);
      }
    }, {
      key: "_unregisterNodeEvent",
      value: function _unregisterNodeEvent() {
        this.node.off(_index.Node.EventType.TRANSFORM_CHANGED, this.updateSubContextViewport, this);
        this.node.off(_index.Node.EventType.SIZE_CHANGED, this.updateSubContextViewport, this);
      }
    }, {
      key: "_runSubContextMainLoop",
      value: function _runSubContextMainLoop() {
        if (this._context) {
          this._context.postMessage({
            fromEngine: true,
            event: 'mainLoop',
            value: true
          });
        }
      }
    }, {
      key: "_stopSubContextMainLoop",
      value: function _stopSubContextMainLoop() {
        if (this._context) {
          this._context.postMessage({
            fromEngine: true,
            event: 'mainLoop',
            value: false
          });
        }
      }
    }, {
      key: "_updateSubContextFrameRate",
      value: function _updateSubContextFrameRate() {
        if (this._context) {
          this._context.postMessage({
            fromEngine: true,
            event: 'frameRate',
            value: this._fps
          });
        }
      }
    }]);

    return SubContextView;
  }(_component.Component), _temp), (_applyDecoratedDescriptor(_class2.prototype, "fps", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "fps"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "_fps", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 60;
    }
  })), _class2)) || _class) || _class) || _class) || _class) || _class);
  _exports.SubContextView = SubContextView;
  cc.SubContextView = SubContextView;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,