(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../define.js", "../texture.js", "./webgl-commands.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../define.js"), require("../texture.js"), require("./webgl-commands.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.define, global.texture, global.webglCommands);
    global.webglTexture = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _define, _texture, _webglCommands) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.WebGLGFXTexture = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  var WebGLGFXTexture = /*#__PURE__*/function (_GFXTexture) {
    _inherits(WebGLGFXTexture, _GFXTexture);

    function WebGLGFXTexture() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, WebGLGFXTexture);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(WebGLGFXTexture)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this._gpuTexture = null;
      return _this;
    }

    _createClass(WebGLGFXTexture, [{
      key: "initialize",
      value: function initialize(info) {
        this._type = info.type;
        this._usage = info.usage;
        this._format = info.format;
        this._width = info.width;
        this._height = info.height;

        if (info.depth !== undefined) {
          this._depth = info.depth;
        }

        if (info.arrayLayer !== undefined) {
          this._arrayLayer = info.arrayLayer;
        }

        if (info.mipLevel !== undefined) {
          this._mipLevel = info.mipLevel;
        }

        if (info.samples !== undefined) {
          this._samples = info.samples;
        }

        if (info.flags !== undefined) {
          this._flags = info.flags;
        }

        this._isPowerOf2 = (0, _texture.IsPowerOf2)(this._width) && (0, _texture.IsPowerOf2)(this._height);
        this._size = (0, _define.GFXFormatSurfaceSize)(this._format, this.width, this.height, this.depth, this.mipLevel) * this._arrayLayer;

        if (this._flags & _define.GFXTextureFlagBit.BAKUP_BUFFER) {
          this._buffer = new ArrayBuffer(this._size);
        }

        var viewType;

        switch (info.type) {
          case _define.GFXTextureType.TEX1D:
            {
              if (info.arrayLayer) {
                viewType = info.arrayLayer <= 1 ? _define.GFXTextureViewType.TV1D : _define.GFXTextureViewType.TV1D_ARRAY;
              } else {
                viewType = _define.GFXTextureViewType.TV1D;
              }

              break;
            }

          case _define.GFXTextureType.TEX2D:
            {
              var flags = _define.GFXTextureFlagBit.NONE;

              if (info.flags) {
                flags = info.flags;
              }

              if (info.arrayLayer) {
                if (info.arrayLayer <= 1) {
                  viewType = _define.GFXTextureViewType.TV2D;
                } else if (flags & _define.GFXTextureFlagBit.CUBEMAP) {
                  viewType = _define.GFXTextureViewType.CUBE;
                } else {
                  viewType = _define.GFXTextureViewType.TV2D_ARRAY;
                }
              } else {
                viewType = _define.GFXTextureViewType.TV2D;
              }

              break;
            }

          case _define.GFXTextureType.TEX3D:
            {
              viewType = _define.GFXTextureViewType.TV3D;
              break;
            }

          default:
            {
              viewType = _define.GFXTextureViewType.TV2D;
            }
        }

        this._gpuTexture = {
          type: this._type,
          viewType: viewType,
          format: this._format,
          usage: this._usage,
          width: this._width,
          height: this._height,
          depth: this._depth,
          size: this._size,
          arrayLayer: this._arrayLayer,
          mipLevel: this._mipLevel,
          samples: this._samples,
          flags: this._flags,
          isPowerOf2: this._isPowerOf2,
          glTarget: 0,
          glInternelFmt: 0,
          glFormat: 0,
          glType: 0,
          glUsage: 0,
          glTexture: null,
          glRenderbuffer: null,
          glWrapS: 0,
          glWrapT: 0,
          glMinFilter: 0,
          glMagFilter: 0
        };
        (0, _webglCommands.WebGLCmdFuncCreateTexture)(this._device, this._gpuTexture);
        this._device.memoryStatus.textureSize += this._size;
        this._status = _define.GFXStatus.SUCCESS;
        return true;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        if (this._gpuTexture) {
          (0, _webglCommands.WebGLCmdFuncDestroyTexture)(this._device, this._gpuTexture);
          this._device.memoryStatus.textureSize -= this._size;
          this._gpuTexture = null;
        }

        this._buffer = null;
        this._status = _define.GFXStatus.UNREADY;
      }
    }, {
      key: "resize",
      value: function resize(width, height) {
        var oldSize = this._size;
        this._width = width;
        this._height = height;
        this._size = (0, _define.GFXFormatSurfaceSize)(this._format, this.width, this.height, this.depth, this.mipLevel) * this._arrayLayer;

        if (this._gpuTexture) {
          this._gpuTexture.width = width;
          this._gpuTexture.height = height;
          this._gpuTexture.size = this._size;
          (0, _webglCommands.WebGLCmdFuncResizeTexture)(this._device, this._gpuTexture);
          this._device.memoryStatus.textureSize -= oldSize;
          this._device.memoryStatus.textureSize += this._size;
        }
      }
    }, {
      key: "gpuTexture",
      get: function get() {
        return this._gpuTexture;
      }
    }]);

    return WebGLGFXTexture;
  }(_texture.GFXTexture);

  _exports.WebGLGFXTexture = WebGLGFXTexture;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,