(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../value-types/enum.js", "./define.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../value-types/enum.js"), require("./define.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global._enum, global.define);
    global.device = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _enum, _define) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.GFXDevice = _exports.GFXFeature = _exports.GFXAPI = void 0;

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  (0, _enum.ccenum)(_define.GFXFormat);
  var GFXAPI;
  _exports.GFXAPI = GFXAPI;

  (function (GFXAPI) {
    GFXAPI[GFXAPI["UNKNOWN"] = 0] = "UNKNOWN";
    GFXAPI[GFXAPI["WEBGL"] = 1] = "WEBGL";
    GFXAPI[GFXAPI["WEBGL2"] = 2] = "WEBGL2";
  })(GFXAPI || (_exports.GFXAPI = GFXAPI = {}));

  var GFXFeature;
  _exports.GFXFeature = GFXFeature;

  (function (GFXFeature) {
    GFXFeature[GFXFeature["COLOR_FLOAT"] = 0] = "COLOR_FLOAT";
    GFXFeature[GFXFeature["COLOR_HALF_FLOAT"] = 1] = "COLOR_HALF_FLOAT";
    GFXFeature[GFXFeature["TEXTURE_FLOAT"] = 2] = "TEXTURE_FLOAT";
    GFXFeature[GFXFeature["TEXTURE_HALF_FLOAT"] = 3] = "TEXTURE_HALF_FLOAT";
    GFXFeature[GFXFeature["TEXTURE_FLOAT_LINEAR"] = 4] = "TEXTURE_FLOAT_LINEAR";
    GFXFeature[GFXFeature["TEXTURE_HALF_FLOAT_LINEAR"] = 5] = "TEXTURE_HALF_FLOAT_LINEAR";
    GFXFeature[GFXFeature["FORMAT_R11G11B10F"] = 6] = "FORMAT_R11G11B10F";
    GFXFeature[GFXFeature["FORMAT_D24S8"] = 7] = "FORMAT_D24S8";
    GFXFeature[GFXFeature["FORMAT_ETC1"] = 8] = "FORMAT_ETC1";
    GFXFeature[GFXFeature["FORMAT_ETC2"] = 9] = "FORMAT_ETC2";
    GFXFeature[GFXFeature["FORMAT_DXT"] = 10] = "FORMAT_DXT";
    GFXFeature[GFXFeature["FORMAT_PVRTC"] = 11] = "FORMAT_PVRTC";
    GFXFeature[GFXFeature["FORMAT_ASTC"] = 12] = "FORMAT_ASTC";
    GFXFeature[GFXFeature["MSAA"] = 13] = "MSAA";
    GFXFeature[GFXFeature["ELEMENT_INDEX_UINT"] = 14] = "ELEMENT_INDEX_UINT";
    GFXFeature[GFXFeature["INSTANCED_ARRAYS"] = 15] = "INSTANCED_ARRAYS";
    GFXFeature[GFXFeature["COUNT"] = 16] = "COUNT";
  })(GFXFeature || (_exports.GFXFeature = GFXFeature = {}));

  /**
   * @en GFX Device.
   * @zh GFX 设备。
   */
  var GFXDevice = /*#__PURE__*/function () {
    function GFXDevice() {
      _classCallCheck(this, GFXDevice);

      this._canvas = null;
      this._canvas2D = null;
      this._gfxAPI = GFXAPI.UNKNOWN;
      this._deviceName = '';
      this._renderer = '';
      this._vendor = '';
      this._version = '';
      this._features = new Array(GFXFeature.COUNT);
      this._queue = null;
      this._devicePixelRatio = 1.0;
      this._width = 0;
      this._height = 0;
      this._nativeWidth = 0;
      this._nativeHeight = 0;
      this._mainWindow = null;
      this._cmdAllocator = null;
      this._maxVertexAttributes = 0;
      this._maxVertexUniformVectors = 0;
      this._maxFragmentUniformVectors = 0;
      this._maxTextureUnits = 0;
      this._maxVertexTextureUnits = 0;
      this._maxUniformBufferBindings = _define.GFX_MAX_BUFFER_BINDINGS;
      this._maxUniformBlockSize = 0;
      this._maxTextureSize = 0;
      this._maxCubeMapTextureSize = 0;
      this._depthBits = 0;
      this._stencilBits = 0;
      this._colorFmt = _define.GFXFormat.UNKNOWN;
      this._depthStencilFmt = _define.GFXFormat.UNKNOWN;
      this._reverseCW = false;
      this._shaderIdGen = 0;
      this._macros = new Map();
      this._numDrawCalls = 0;
      this._numInstances = 0;
      this._numTris = 0;
      this._memoryStatus = {
        bufferSize: 0,
        textureSize: 0
      };
    }

    _createClass(GFXDevice, [{
      key: "hasFeature",

      /**
       * @en Whether the device has specific feature.
       * @zh 是否具备特性。
       * @param feature The GFX feature to be queried.
       */
      value: function hasFeature(feature) {
        return this._features[feature];
      }
      /**
       * @en Generate shader ID.
       * @zh 生成 Shader ID。
       */

    }, {
      key: "genShaderId",
      value: function genShaderId() {
        return this._shaderIdGen++;
      }
      /**
       * @en Define a macro.
       * @zh 定义宏。
       * @param macro The macro name.
       * @param value The macro value.
       */

    }, {
      key: "defineMacro",
      value: function defineMacro(macro, value) {
        var val = value !== undefined ? value : '';

        this._macros.set(macro, val);
      }
    }, {
      key: "canvas",

      /**
       * @en The HTML canvas element.
       * @zh HTML 画布。
       */
      get: function get() {
        return this._canvas;
      }
      /**
       * @en The HTML canvas element for 2D rendering.
       * @zh 用于 2D 绘制的 HTML 画布。
       */

    }, {
      key: "canvas2D",
      get: function get() {
        return this._canvas2D;
      }
      /**
       * @en Current rendering API.
       * @zh 当前 GFX 使用的渲染 API。
       */

    }, {
      key: "gfxAPI",
      get: function get() {
        return this._gfxAPI;
      }
      /**
       * @en GFX queue.
       * @zh GFX 队列。
       */

    }, {
      key: "queue",
      get: function get() {
        return this._queue;
      }
      /**
       * @en Device pixel ratio.
       * @zh DPR 设备像素比。
       */

    }, {
      key: "devicePixelRatio",
      get: function get() {
        return this._devicePixelRatio;
      }
      /**
       * @en Device pixel width.
       * @zh 设备像素宽度。
       */

    }, {
      key: "width",
      get: function get() {
        return this._width;
      }
      /**
       * @en Device pixel height.
       * @zh 设备像素高度。
       */

    }, {
      key: "height",
      get: function get() {
        return this._height;
      }
      /**
       * @en Device native width.
       * @zh 设备原生的像素宽度。
       */

    }, {
      key: "nativeWidth",
      get: function get() {
        return this._nativeWidth;
      }
      /**
       * @en Device native height.
       * @zh 设备原生的像素高度。
       */

    }, {
      key: "nativeHeight",
      get: function get() {
        return this._nativeHeight;
      }
      /**
       * @en Device main window.
       * @zh 设备主窗口。
       */

    }, {
      key: "mainWindow",
      get: function get() {
        return this._mainWindow;
      }
      /**
       * @en Device command allocator.
       * @zh 命令分配器。
       */

    }, {
      key: "commandAllocator",
      get: function get() {
        return this._cmdAllocator;
      }
      /**
       * @en Renderer description.
       * @zh 渲染器描述。
       */

    }, {
      key: "renderer",
      get: function get() {
        return this._renderer;
      }
      /**
       * @en Vendor description.
       * @zh 厂商描述。
       */

    }, {
      key: "vendor",
      get: function get() {
        return this._vendor;
      }
      /**
       * @en Max vertex attributes supported.
       * @zh 最大顶点属性数量。
       */

    }, {
      key: "maxVertexAttributes",
      get: function get() {
        return this._maxVertexAttributes;
      }
      /**
       * @en Max vertex uniform vectors supported.
       * @zh 最大顶点Uniform向量数。
       */

    }, {
      key: "maxVertexUniformVectors",
      get: function get() {
        return this._maxVertexUniformVectors;
      }
      /**
       * @en Max fragment uniform vectors supported.
       * @zh 最大片段Uniform向量数。
       */

    }, {
      key: "maxFragmentUniformVectors",
      get: function get() {
        return this._maxFragmentUniformVectors;
      }
      /**
       * @en Max texture units supported.
       * @zh 最大纹理单元数量。
       */

    }, {
      key: "maxTextureUnits",
      get: function get() {
        return this._maxTextureUnits;
      }
      /**
       * @en Max vertex texture units supported.
       * @zh 最大顶点纹理单元数量。
       */

    }, {
      key: "maxVertexTextureUnits",
      get: function get() {
        return this._maxVertexTextureUnits;
      }
      /**
       * @en Max uniform buffer bindings supported.
       * @zh 最大 UniformBuffer 绑定数量。
       */

    }, {
      key: "maxUniformBufferBindings",
      get: function get() {
        return this._maxUniformBufferBindings;
      }
      /**
       * @en Max uniform block size supported.
       * @zh 最大Uniform块大小。
       */

    }, {
      key: "maxUniformBlockSize",
      get: function get() {
        return this._maxUniformBlockSize;
      }
      /**
       * @en Max texture size supported.
       * @zh 最大贴图尺寸。
       */

    }, {
      key: "maxTextureSize",
      get: function get() {
        return this._maxTextureSize;
      }
      /**
       * @en Max cube map texture size supported.
       * @zh 最大立方贴图尺寸。
       */

    }, {
      key: "maxCubeMapTextureSize",
      get: function get() {
        return this._maxCubeMapTextureSize;
      }
      /**
       * @en Device depth bits.
       * @zh 深度位数。
       */

    }, {
      key: "depthBits",
      get: function get() {
        return this._depthBits;
      }
      /**
       * @en Device stencil bits.
       * @zh 模板位数。
       */

    }, {
      key: "stencilBits",
      get: function get() {
        return this._stencilBits;
      }
      /**
       * @en Device color format.
       * @zh 颜色格式。
       */

    }, {
      key: "colorFormat",
      get: function get() {
        return this._colorFmt;
      }
      /**
       * @en Device depth stencil format.
       * @zh 深度模板格式。
       */

    }, {
      key: "depthStencilFormat",
      get: function get() {
        return this._depthStencilFmt;
      }
      /**
       * @en Device built-in macros.
       * @zh 系统宏定义。
       */

    }, {
      key: "macros",
      get: function get() {
        return this._macros;
      }
      /**
       * @en Number of draw calls currently recorded.
       * @zh 绘制调用次数。
       */

    }, {
      key: "numDrawCalls",
      get: function get() {
        return this._numDrawCalls;
      }
      /**
       * @en Number of instances currently recorded.
       * @zh 绘制 Instance 数量。
       */

    }, {
      key: "numInstances",
      get: function get() {
        return this._numInstances;
      }
      /**
       * @en Number of triangles currently recorded.
       * @zh 渲染三角形数量。
       */

    }, {
      key: "numTris",
      get: function get() {
        return this._numTris;
      }
      /**
       * @en Total memory size currently allocated.
       * @zh 内存状态。
       */

    }, {
      key: "memoryStatus",
      get: function get() {
        return this._memoryStatus;
      }
      /**
       * @en Is the front face winding order reversed?
       * @zh 是否倒置三角面缠绕顺序？
       */

    }, {
      key: "reverseCW",
      get: function get() {
        return this._reverseCW;
      },
      set: function set(val) {
        this._reverseCW = val;
      }
    }]);

    return GFXDevice;
  }();

  _exports.GFXDevice = GFXDevice;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,