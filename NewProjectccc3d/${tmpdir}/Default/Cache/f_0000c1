(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../data/class-decorator.js", "../math/index.js", "../platform/event-manager/event-enum.js", "../platform/event-manager/event-manager.js", "./base-node.js", "./layers.js", "./node-enum.js", "./node-ui-properties.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../data/class-decorator.js"), require("../math/index.js"), require("../platform/event-manager/event-enum.js"), require("../platform/event-manager/event-manager.js"), require("./base-node.js"), require("./layers.js"), require("./node-enum.js"), require("./node-ui-properties.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.classDecorator, global.index, global.eventEnum, global.eventManager, global.baseNode, global.layers, global.nodeEnum, global.nodeUiProperties);
    global.node = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _classDecorator, _index, _eventEnum, _eventManager, _baseNode, _layers, _nodeEnum, _nodeUiProperties) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Node = void 0;

  var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _class3, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  var v3_a = new _index.Vec3();
  var q_a = new _index.Quat();
  var q_b = new _index.Quat();
  var array_a = new Array(10);
  var qt_1 = new _index.Quat();
  var m3_1 = new _index.Mat3();
  var m3_scaling = new _index.Mat3();
  var m4_1 = new _index.Mat4();
  var bookOfChange = new Map();
  /**
   * @zh
   * 场景树中的基本节点，基本特性有：
   * * 具有层级关系
   * * 持有各类组件
   * * 维护空间变换（坐标、旋转、缩放）信息
   */

  /**
   * !#en
   * Class of all entities in Cocos Creator scenes.
   * Basic functionalities include:
   * * Hierarchy management with parent and children
   * * Components management
   * * Coordinate system with position, scale, rotation in 3d space
   * !#zh
   * Cocos Creator 场景中的所有节点类。
   * 基本特性有：
   * * 具有层级关系
   * * 持有各类组件
   * * 维护 3D 空间左边变换（坐标、旋转、缩放）信息
   */

  var Node = (_dec = (0, _classDecorator.ccclass)('cc.Node'), _dec2 = (0, _classDecorator.property)({
    type: _index.Vec3
  }), _dec(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseNode) {
    _inherits(Node, _BaseNode);

    function Node() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, Node);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Node)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this._uiProps = new _nodeUiProperties.NodeUIProperties(_assertThisInitialized(_this));
      _this._static = false;
      _this._pos = new _index.Vec3();
      _this._rot = new _index.Quat();
      _this._scale = new _index.Vec3(1, 1, 1);
      _this._mat = new _index.Mat4();

      _initializerDefineProperty(_this, "_lpos", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_lrot", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_lscale", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_layer", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_euler", _descriptor5, _assertThisInitialized(_this));

      _this._dirtyFlags = _nodeEnum.TransformBit.NONE;
      _this._eulerDirty = false;
      return _this;
    }

    _createClass(Node, [{
      key: "setParent",
      // ===============================
      // hierarchy
      // ===============================

      /**
       * @en Set parent of the node.
       * @zh 设置该节点的父节点。
       * @param value Parent node
       * @param keepWorldTransform Whether keep node's current world transform unchanged after this operation
       */
      value: function setParent(value) {
        var keepWorldTransform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if (keepWorldTransform) {
          this.updateWorldTransform();
        }

        _get(_getPrototypeOf(Node.prototype), "setParent", this).call(this, value, keepWorldTransform);
      }
    }, {
      key: "_onSetParent",
      value: function _onSetParent(oldParent, keepWorldTransform) {
        _get(_getPrototypeOf(Node.prototype), "_onSetParent", this).call(this, oldParent, keepWorldTransform);

        if (keepWorldTransform) {
          var parent = this._parent;

          if (parent) {
            parent.updateWorldTransform();

            _index.Mat4.multiply(m4_1, _index.Mat4.invert(m4_1, parent._mat), this._mat);

            _index.Mat4.toRTS(m4_1, this._lrot, this._lpos, this._lscale);
          } else {
            _index.Vec3.copy(this._lpos, this._pos);

            _index.Quat.copy(this._lrot, this._rot);

            _index.Vec3.copy(this._lscale, this._scale);
          }

          this._eulerDirty = true;
        }

        this.invalidateChildren(_nodeEnum.TransformBit.TRS);
      }
    }, {
      key: "_onBatchCreated",
      value: function _onBatchCreated() {
        _get(_getPrototypeOf(Node.prototype), "_onBatchCreated", this).call(this);

        bookOfChange.set(this._id, _nodeEnum.TransformBit.TRS);
        this._dirtyFlags = _nodeEnum.TransformBit.TRS;
        var len = this._children.length;

        for (var i = 0; i < len; ++i) {
          this._children[i]._onBatchCreated();
        }
      }
    }, {
      key: "_onBatchRestored",
      value: function _onBatchRestored() {
        this._onBatchCreated();
      }
    }, {
      key: "_onBeforeSerialize",
      value: function _onBeforeSerialize() {
        // tslint:disable-next-line: no-unused-expression
        this.eulerAngles; // make sure we save the correct eulerAngles
      } // ===============================
      // transform helper, convenient but not the most efficient
      // ===============================

      /**
       * @en Perform a translation on the node
       * @zh 移动节点
       * @param trans The increment on position
       * @param ns The operation coordinate space
       */

    }, {
      key: "translate",
      value: function translate(trans, ns) {
        var space = ns || _nodeEnum.NodeSpace.LOCAL;

        if (space === _nodeEnum.NodeSpace.LOCAL) {
          _index.Vec3.transformQuat(v3_a, trans, this._lrot);

          this._lpos.x += v3_a.x;
          this._lpos.y += v3_a.y;
          this._lpos.z += v3_a.z;
        } else if (space === _nodeEnum.NodeSpace.WORLD) {
          if (this._parent) {
            _index.Quat.invert(q_a, this._parent.worldRotation);

            _index.Vec3.transformQuat(v3_a, trans, q_a);

            var _scale = this.worldScale;
            this._lpos.x += v3_a.x / _scale.x;
            this._lpos.y += v3_a.y / _scale.y;
            this._lpos.z += v3_a.z / _scale.z;
          } else {
            this._lpos.x += trans.x;
            this._lpos.y += trans.y;
            this._lpos.z += trans.z;
          }
        }

        this.invalidateChildren(_nodeEnum.TransformBit.POSITION);

        if (this._eventMask & _baseNode.TRANSFORM_ON) {
          this.emit(_eventEnum.SystemEventType.TRANSFORM_CHANGED, _nodeEnum.TransformBit.POSITION);
        }
      }
      /**
       * @en Perform a rotation on the node
       * @zh 旋转节点
       * @param trans The increment on position
       * @param ns The operation coordinate space
       */

    }, {
      key: "rotate",
      value: function rotate(rot, ns) {
        var space = ns || _nodeEnum.NodeSpace.LOCAL;

        _index.Quat.normalize(q_a, rot);

        if (space === _nodeEnum.NodeSpace.LOCAL) {
          _index.Quat.multiply(this._lrot, this._lrot, q_a);
        } else if (space === _nodeEnum.NodeSpace.WORLD) {
          var worldRot = this.worldRotation;

          _index.Quat.multiply(q_b, q_a, worldRot);

          _index.Quat.invert(q_a, worldRot);

          _index.Quat.multiply(q_b, q_a, q_b);

          _index.Quat.multiply(this._lrot, this._lrot, q_b);
        }

        this._eulerDirty = true;
        this.invalidateChildren(_nodeEnum.TransformBit.ROTATION);

        if (this._eventMask & _baseNode.TRANSFORM_ON) {
          this.emit(_eventEnum.SystemEventType.TRANSFORM_CHANGED, _nodeEnum.TransformBit.ROTATION);
        }
      }
      /**
       * @en Set the orientation of the node to face the target position, the node is facing minus z direction by default
       * @zh 设置当前节点旋转为面向目标位置，默认前方为 -z 方向
       * @param pos Target position
       * @param up Up direction
       */

    }, {
      key: "lookAt",
      value: function lookAt(pos, up) {
        this.getWorldPosition(v3_a);

        _index.Vec3.subtract(v3_a, v3_a, pos);

        _index.Vec3.normalize(v3_a, v3_a);

        _index.Quat.fromViewUp(q_a, v3_a, up);

        this.setWorldRotation(q_a);
      } // ===============================
      // transform maintainer
      // ===============================

      /**
       * @en Invalidate the world transform information
       * for this node and all its children recursively
       * @zh 递归标记节点世界变换为 dirty
       * @param dirtyBit The dirty bits to setup to children, can be composed with multiple dirty bits
       */

    }, {
      key: "invalidateChildren",
      value: function invalidateChildren(dirtyBit) {
        if ((this._dirtyFlags & this.hasChangedFlags & dirtyBit) === dirtyBit) {
          return;
        }

        this._dirtyFlags |= dirtyBit;
        bookOfChange.set(this._id, this.hasChangedFlags | dirtyBit);
        dirtyBit |= _nodeEnum.TransformBit.POSITION;
        var len = this._children.length;

        for (var i = 0; i < len; ++i) {
          var child = this._children[i];

          if (child.isValid) {
            child.invalidateChildren(dirtyBit);
          }
        }
      }
      /**
       * @en Update the world transform information if outdated
       * @zh 更新节点的世界变换信息
       */

    }, {
      key: "updateWorldTransform",
      value: function updateWorldTransform() {
        if (!this._dirtyFlags) {
          return;
        }

        var cur = this;
        var i = 0;

        while (cur && cur._dirtyFlags) {
          // top level node
          array_a[i++] = cur;
          cur = cur._parent;
        }

        var child;
        var dirtyBits = 0;

        while (i) {
          child = array_a[--i];
          dirtyBits |= child._dirtyFlags;

          if (cur) {
            if (dirtyBits & _nodeEnum.TransformBit.POSITION) {
              _index.Vec3.transformMat4(child._pos, child._lpos, cur._mat);

              child._mat.m12 = child._pos.x;
              child._mat.m13 = child._pos.y;
              child._mat.m14 = child._pos.z;
            }

            if (dirtyBits & _nodeEnum.TransformBit.RS) {
              _index.Mat4.fromRTS(child._mat, child._lrot, child._lpos, child._lscale);

              _index.Mat4.multiply(child._mat, cur._mat, child._mat);

              if (dirtyBits & _nodeEnum.TransformBit.ROTATION) {
                _index.Quat.multiply(child._rot, cur._rot, child._lrot);
              }

              _index.Mat3.fromQuat(m3_1, _index.Quat.conjugate(qt_1, child._rot));

              _index.Mat3.multiplyMat4(m3_1, m3_1, child._mat);

              child._scale.x = m3_1.m00;
              child._scale.y = m3_1.m04;
              child._scale.z = m3_1.m08;
            }
          } else {
            if (dirtyBits & _nodeEnum.TransformBit.POSITION) {
              _index.Vec3.copy(child._pos, child._lpos);

              child._mat.m12 = child._pos.x;
              child._mat.m13 = child._pos.y;
              child._mat.m14 = child._pos.z;
            }

            if (dirtyBits & _nodeEnum.TransformBit.RS) {
              if (dirtyBits & _nodeEnum.TransformBit.ROTATION) {
                _index.Quat.copy(child._rot, child._lrot);
              }

              if (dirtyBits & _nodeEnum.TransformBit.SCALE) {
                _index.Vec3.copy(child._scale, child._lscale);
              }

              _index.Mat4.fromRTS(child._mat, child._rot, child._pos, child._scale);
            }
          }

          child._dirtyFlags = _nodeEnum.TransformBit.NONE;
          cur = child;
        }
      } // ===============================
      // transform
      // ===============================

      /**
       * @en Set position in local coordinate system
       * @zh 设置本地坐标
       * @param position Target position
       */

    }, {
      key: "setPosition",
      value: function setPosition(val, y, z) {
        if (y === undefined || z === undefined) {
          _index.Vec3.copy(this._lpos, val);
        } else {
          _index.Vec3.set(this._lpos, val, y, z);
        }

        this.invalidateChildren(_nodeEnum.TransformBit.POSITION);

        if (this._eventMask & _baseNode.TRANSFORM_ON) {
          this.emit(_eventEnum.SystemEventType.TRANSFORM_CHANGED, _nodeEnum.TransformBit.POSITION);
        }
      }
      /**
       * @en Get position in local coordinate system, please try to pass `out` vector and reuse it to avoid garbage.
       * @zh 获取本地坐标，注意，尽可能传递复用的 [[Vec3]] 以避免产生垃圾。
       * @param out Set the result to out vector
       * @return If `out` given, the return value equals to `out`, otherwise a new vector will be generated and return
       */

    }, {
      key: "getPosition",
      value: function getPosition(out) {
        if (out) {
          return _index.Vec3.set(out, this._lpos.x, this._lpos.y, this._lpos.z);
        } else {
          return _index.Vec3.copy(new _index.Vec3(), this._lpos);
        }
      }
      /**
       * @en Set rotation in local coordinate system with a quaternion representing the rotation
       * @zh 用四元数设置本地旋转
       * @param rotation Rotation in quaternion
       */

    }, {
      key: "setRotation",
      value: function setRotation(val, y, z, w) {
        if (y === undefined || z === undefined || w === undefined) {
          _index.Quat.copy(this._lrot, val);
        } else {
          _index.Quat.set(this._lrot, val, y, z, w);
        }

        this._eulerDirty = true;
        this.invalidateChildren(_nodeEnum.TransformBit.ROTATION);

        if (this._eventMask & _baseNode.TRANSFORM_ON) {
          this.emit(_eventEnum.SystemEventType.TRANSFORM_CHANGED, _nodeEnum.TransformBit.ROTATION);
        }
      }
      /**
       * @en Set rotation in local coordinate system with euler angles
       * @zh 用欧拉角设置本地旋转
       * @param x X axis rotation
       * @param y Y axis rotation
       * @param z Z axis rotation
       */

    }, {
      key: "setRotationFromEuler",
      value: function setRotationFromEuler(x, y, z) {
        _index.Vec3.set(this._euler, x, y, z);

        _index.Quat.fromEuler(this._lrot, x, y, z);

        this._eulerDirty = false;
        this.invalidateChildren(_nodeEnum.TransformBit.ROTATION);

        if (this._eventMask & _baseNode.TRANSFORM_ON) {
          this.emit(_eventEnum.SystemEventType.TRANSFORM_CHANGED, _nodeEnum.TransformBit.ROTATION);
        }
      }
      /**
       * @en Get rotation as quaternion in local coordinate system, please try to pass `out` quaternion and reuse it to avoid garbage.
       * @zh 获取本地旋转，注意，尽可能传递复用的 [[Quat]] 以避免产生垃圾。
       * @param out Set the result to out quaternion
       * @return If `out` given, the return value equals to `out`, otherwise a new quaternion will be generated and return
       */

    }, {
      key: "getRotation",
      value: function getRotation(out) {
        if (out) {
          return _index.Quat.set(out, this._lrot.x, this._lrot.y, this._lrot.z, this._lrot.w);
        } else {
          return _index.Quat.copy(new _index.Quat(), this._lrot);
        }
      }
      /**
       * @en Set scale in local coordinate system
       * @zh 设置本地缩放
       * @param scale Target scale
       */

    }, {
      key: "setScale",
      value: function setScale(val, y, z) {
        if (y === undefined || z === undefined) {
          _index.Vec3.copy(this._lscale, val);
        } else {
          _index.Vec3.set(this._lscale, val, y, z);
        }

        this.invalidateChildren(_nodeEnum.TransformBit.SCALE);

        if (this._eventMask & _baseNode.TRANSFORM_ON) {
          this.emit(_eventEnum.SystemEventType.TRANSFORM_CHANGED, _nodeEnum.TransformBit.SCALE);
        }
      }
      /**
       * @en Get scale in local coordinate system, please try to pass `out` vector and reuse it to avoid garbage.
       * @zh 获取本地缩放，注意，尽可能传递复用的 [[Vec3]] 以避免产生垃圾。
       * @param out Set the result to out vector
       * @return If `out` given, the return value equals to `out`, otherwise a new vector will be generated and return
       */

    }, {
      key: "getScale",
      value: function getScale(out) {
        if (out) {
          return _index.Vec3.set(out, this._lscale.x, this._lscale.y, this._lscale.z);
        } else {
          return _index.Vec3.copy(new _index.Vec3(), this._lscale);
        }
      }
      /**
       * @en Inversely transform a point from world coordinate system to local coordinate system.
       * @zh 逆向变换一个空间点，一般用于将世界坐标转换到本地坐标系中。
       * @param out The result point in local coordinate system will be stored in this vector
       * @param p A position in world coordinate system
       */

    }, {
      key: "inverseTransformPoint",
      value: function inverseTransformPoint(out, p) {
        _index.Vec3.copy(out, p);

        var cur = this;
        var i = 0;

        while (cur._parent) {
          array_a[i++] = cur;
          cur = cur._parent;
        }

        while (i >= 0) {
          _index.Vec3.transformInverseRTS(out, out, cur._lrot, cur._lpos, cur._lscale);

          cur = array_a[--i];
        }

        return out;
      }
      /**
       * @en Set position in world coordinate system
       * @zh 设置世界坐标
       * @param position Target position
       */

    }, {
      key: "setWorldPosition",
      value: function setWorldPosition(val, y, z) {
        if (y === undefined || z === undefined) {
          _index.Vec3.copy(this._pos, val);
        } else {
          _index.Vec3.set(this._pos, val, y, z);
        }

        var parent = this._parent;
        var local = this._lpos;

        if (parent) {
          // TODO: benchmark these approaches

          /* */
          parent.updateWorldTransform();

          _index.Vec3.transformMat4(local, this._pos, _index.Mat4.invert(m4_1, parent._mat));
          /* *
          parent.inverseTransformPoint(local, this._pos);
          /* */

        } else {
          _index.Vec3.copy(local, this._pos);
        }

        this.invalidateChildren(_nodeEnum.TransformBit.POSITION);

        if (this._eventMask & _baseNode.TRANSFORM_ON) {
          this.emit(_eventEnum.SystemEventType.TRANSFORM_CHANGED, _nodeEnum.TransformBit.POSITION);
        }
      }
      /**
       * @en Get position in world coordinate system, please try to pass `out` vector and reuse it to avoid garbage.
       * @zh 获取世界坐标，注意，尽可能传递复用的 [[Vec3]] 以避免产生垃圾。
       * @param out Set the result to out vector
       * @return If `out` given, the return value equals to `out`, otherwise a new vector will be generated and return
       */

    }, {
      key: "getWorldPosition",
      value: function getWorldPosition(out) {
        this.updateWorldTransform();

        if (out) {
          return _index.Vec3.copy(out, this._pos);
        } else {
          return _index.Vec3.copy(new _index.Vec3(), this._pos);
        }
      }
      /**
       * @en Set rotation in world coordinate system with a quaternion representing the rotation
       * @zh 用四元数设置世界坐标系下的旋转
       * @param rotation Rotation in quaternion
       */

    }, {
      key: "setWorldRotation",
      value: function setWorldRotation(val, y, z, w) {
        if (y === undefined || z === undefined || w === undefined) {
          _index.Quat.copy(this._rot, val);
        } else {
          _index.Quat.set(this._rot, val, y, z, w);
        }

        if (this._parent) {
          this._parent.updateWorldTransform();

          _index.Quat.multiply(this._lrot, _index.Quat.conjugate(this._lrot, this._parent._rot), this._rot);
        } else {
          _index.Quat.copy(this._lrot, this._rot);
        }

        this._eulerDirty = true;
        this.invalidateChildren(_nodeEnum.TransformBit.ROTATION);

        if (this._eventMask & _baseNode.TRANSFORM_ON) {
          this.emit(_eventEnum.SystemEventType.TRANSFORM_CHANGED, _nodeEnum.TransformBit.ROTATION);
        }
      }
      /**
       * @en Set rotation in world coordinate system with euler angles
       * @zh 用欧拉角设置世界坐标系下的旋转
       * @param x X axis rotation
       * @param y Y axis rotation
       * @param z Z axis rotation
       */

    }, {
      key: "setWorldRotationFromEuler",
      value: function setWorldRotationFromEuler(x, y, z) {
        _index.Quat.fromEuler(this._rot, x, y, z);

        if (this._parent) {
          this._parent.updateWorldTransform();

          _index.Quat.multiply(this._lrot, _index.Quat.conjugate(this._lrot, this._parent._rot), this._rot);
        } else {
          _index.Quat.copy(this._lrot, this._rot);
        }

        this._eulerDirty = true;
        this.invalidateChildren(_nodeEnum.TransformBit.ROTATION);

        if (this._eventMask & _baseNode.TRANSFORM_ON) {
          this.emit(_eventEnum.SystemEventType.TRANSFORM_CHANGED, _nodeEnum.TransformBit.ROTATION);
        }
      }
      /**
       * @en Get rotation as quaternion in world coordinate system, please try to pass `out` quaternion and reuse it to avoid garbage.
       * @zh 获取世界坐标系下的旋转，注意，尽可能传递复用的 [[Quat]] 以避免产生垃圾。
       * @param out Set the result to out quaternion
       * @return If `out` given, the return value equals to `out`, otherwise a new quaternion will be generated and return
       */

    }, {
      key: "getWorldRotation",
      value: function getWorldRotation(out) {
        this.updateWorldTransform();

        if (out) {
          return _index.Quat.copy(out, this._rot);
        } else {
          return _index.Quat.copy(new _index.Quat(), this._rot);
        }
      }
      /**
       * @en Set scale in world coordinate system
       * @zh 设置世界坐标系下的缩放
       * @param scale Target scale
       */

    }, {
      key: "setWorldScale",
      value: function setWorldScale(val, y, z) {
        if (y === undefined || z === undefined) {
          _index.Vec3.copy(this._scale, val);
        } else {
          _index.Vec3.set(this._scale, val, y, z);
        }

        var parent = this._parent;

        if (parent) {
          parent.updateWorldTransform();

          _index.Mat3.fromQuat(m3_1, _index.Quat.conjugate(qt_1, parent._rot));

          _index.Mat3.multiplyMat4(m3_1, m3_1, parent._mat);

          m3_scaling.m00 = this._scale.x;
          m3_scaling.m04 = this._scale.y;
          m3_scaling.m08 = this._scale.z;

          _index.Mat3.multiply(m3_1, m3_scaling, _index.Mat3.invert(m3_1, m3_1));

          this._lscale.x = _index.Vec3.set(v3_a, m3_1.m00, m3_1.m01, m3_1.m02).length();
          this._lscale.y = _index.Vec3.set(v3_a, m3_1.m03, m3_1.m04, m3_1.m05).length();
          this._lscale.z = _index.Vec3.set(v3_a, m3_1.m06, m3_1.m07, m3_1.m08).length();
        } else {
          _index.Vec3.copy(this._lscale, this._scale);
        }

        this.invalidateChildren(_nodeEnum.TransformBit.SCALE);

        if (this._eventMask & _baseNode.TRANSFORM_ON) {
          this.emit(_eventEnum.SystemEventType.TRANSFORM_CHANGED, _nodeEnum.TransformBit.SCALE);
        }
      }
      /**
       * @en Get scale in world coordinate system, please try to pass `out` vector and reuse it to avoid garbage.
       * @zh 获取世界缩放，注意，尽可能传递复用的 [[Vec3]] 以避免产生垃圾。
       * @param out Set the result to out vector
       * @return If `out` given, the return value equals to `out`, otherwise a new vector will be generated and return
       */

    }, {
      key: "getWorldScale",
      value: function getWorldScale(out) {
        this.updateWorldTransform();

        if (out) {
          return _index.Vec3.copy(out, this._scale);
        } else {
          return _index.Vec3.copy(new _index.Vec3(), this._scale);
        }
      }
      /**
       * @en Get a world transform matrix
       * @zh 获取世界变换矩阵
       * @param out Set the result to out matrix
       * @return If `out` given, the return value equals to `out`, otherwise a new matrix will be generated and return
       */

    }, {
      key: "getWorldMatrix",
      value: function getWorldMatrix(out) {
        this.updateWorldTransform();

        if (!out) {
          out = new _index.Mat4();
        }

        return _index.Mat4.copy(out, this._mat);
      }
      /**
       * @en Get a world transform matrix with only rotation and scale
       * @zh 获取只包含旋转和缩放的世界变换矩阵
       * @param out Set the result to out matrix
       * @return If `out` given, the return value equals to `out`, otherwise a new matrix will be generated and return
       */

    }, {
      key: "getWorldRS",
      value: function getWorldRS(out) {
        this.updateWorldTransform();

        if (!out) {
          out = new _index.Mat4();
        }

        _index.Mat4.copy(out, this._mat);

        out.m12 = 0;
        out.m13 = 0;
        out.m14 = 0;
        return out;
      }
      /**
       * @en Get a world transform matrix with only rotation and translation
       * @zh 获取只包含旋转和位移的世界变换矩阵
       * @param out Set the result to out matrix
       * @return If `out` given, the return value equals to `out`, otherwise a new matrix will be generated and return
       */

    }, {
      key: "getWorldRT",
      value: function getWorldRT(out) {
        this.updateWorldTransform();

        if (!out) {
          out = new _index.Mat4();
        }

        return _index.Mat4.fromRT(out, this._rot, this._pos);
      }
      /**
       * @en Set local transformation with rotation, position and scale separately.
       * @zh 一次性设置所有局部变换（平移、旋转、缩放）信息
       * @param rot The rotation
       * @param pos The position
       * @param scale The scale
       */

    }, {
      key: "setRTS",
      value: function setRTS(rot, pos, scale) {
        var dirtyBit = 0;

        if (rot) {
          dirtyBit |= _nodeEnum.TransformBit.ROTATION;

          if (rot.w !== undefined) {
            _index.Quat.copy(this._lrot, rot);

            this._eulerDirty = true;
          } else {
            _index.Vec3.copy(this._euler, rot);

            _index.Quat.fromEuler(this._lrot, rot.x, rot.y, rot.z);

            this._eulerDirty = false;
          }
        }

        if (pos) {
          _index.Vec3.copy(this._lpos, pos);

          dirtyBit |= _nodeEnum.TransformBit.POSITION;
        }

        if (scale) {
          _index.Vec3.copy(this._lscale, scale);

          dirtyBit |= _nodeEnum.TransformBit.SCALE;
        }

        if (dirtyBit) {
          this.invalidateChildren(dirtyBit);

          if (this._eventMask & _baseNode.TRANSFORM_ON) {
            this.emit(_eventEnum.SystemEventType.TRANSFORM_CHANGED, dirtyBit);
          }
        }
      } // ===============================
      // for backward-compatibility
      // ===============================

    }, {
      key: "getAnchorPoint",
      value: function getAnchorPoint(out) {
        if (!out) {
          out = new _index.Vec2();
        }

        out.set(this._uiProps.uiTransformComp.anchorPoint);
        return out;
      }
    }, {
      key: "setAnchorPoint",
      value: function setAnchorPoint(point, y) {
        this._uiProps.uiTransformComp.setAnchorPoint(point, y);
      }
    }, {
      key: "getContentSize",
      value: function getContentSize(out) {
        if (!out) {
          out = new _index.Size();
        }

        out.set(this._uiProps.uiTransformComp.contentSize);
        return out;
      }
    }, {
      key: "setContentSize",
      value: function setContentSize(size, height) {
        this._uiProps.uiTransformComp.setContentSize(size, height);
      }
      /**
       * @en Pause all system events which is dispatched by [[SystemEvent]]
       * @zh 暂停所有 [[SystemEvent]] 派发的系统事件
       * @param recursive Whether pause system events recursively for the child node tree
       */

    }, {
      key: "pauseSystemEvents",
      value: function pauseSystemEvents(recursive) {
        // @ts-ignore
        _eventManager.eventManager.pauseTarget(this, recursive);
      }
      /**
       * @en Resume all paused system events which is dispatched by [[SystemEvent]]
       * @zh 恢复所有 [[SystemEvent]] 派发的系统事件
       * @param recursive Whether resume system events recursively for the child node tree
       */

    }, {
      key: "resumeSystemEvents",
      value: function resumeSystemEvents(recursive) {
        // @ts-ignore
        _eventManager.eventManager.resumeTarget(this, recursive);
      }
    }, {
      key: "_onPostActivated",
      value: function _onPostActivated(active) {
        if (active) {
          _eventManager.eventManager.resumeTarget(this);

          this.eventProcessor.reattach();
        } else {
          // deactivate
          _eventManager.eventManager.pauseTarget(this);
        }
      }
    }, {
      key: "position",

      /**
       * @en Position in local coordinate system
       * @zh 本地坐标系下的坐标
       */
      // @constget
      get: function get() {
        return this._lpos;
      },
      set: function set(val) {
        this.setPosition(val);
      }
      /**
       * @en Position in world coordinate system
       * @zh 世界坐标系下的坐标
       */
      // @constget

    }, {
      key: "worldPosition",
      get: function get() {
        this.updateWorldTransform();
        return this._pos;
      },
      set: function set(val) {
        this.setWorldPosition(val);
      }
      /**
       * @en Rotation in local coordinate system, represented by a quaternion
       * @zh 本地坐标系下的旋转，用四元数表示
       */
      // @constget

    }, {
      key: "rotation",
      get: function get() {
        return this._lrot;
      },
      set: function set(val) {
        this.setRotation(val);
      }
      /**
       * @en Rotation in local coordinate system, represented by euler angles
       * @zh 本地坐标系下的旋转，用欧拉角表示
       */

    }, {
      key: "eulerAngles",
      set: function set(val) {
        this.setRotationFromEuler(val.x, val.y, val.z);
      },
      get: function get() {
        if (this._eulerDirty) {
          _index.Quat.toEuler(this._euler, this._lrot);

          this._eulerDirty = false;
        }

        return this._euler;
      }
      /**
       * @en Rotation in world coordinate system, represented by a quaternion
       * @zh 世界坐标系下的旋转，用四元数表示
       */
      // @constget

    }, {
      key: "worldRotation",
      get: function get() {
        this.updateWorldTransform();
        return this._rot;
      },
      set: function set(val) {
        this.setWorldRotation(val);
      }
      /**
       * @en Scale in local coordinate system
       * @zh 本地坐标系下的缩放
       */
      // @constget

    }, {
      key: "scale",
      get: function get() {
        return this._lscale;
      },
      set: function set(val) {
        this.setScale(val);
      }
      /**
       * @en Scale in world coordinate system
       * @zh 世界坐标系下的缩放
       */
      // @constget

    }, {
      key: "worldScale",
      get: function get() {
        this.updateWorldTransform();
        return this._scale;
      },
      set: function set(val) {
        this.setWorldScale(val);
      }
      /**
       * @en Local transformation matrix
       * @zh 本地坐标系变换矩阵
       */

    }, {
      key: "matrix",
      set: function set(val) {
        _index.Mat4.toRTS(val, this._lrot, this._lpos, this._lscale);

        this.invalidateChildren(_nodeEnum.TransformBit.TRS);
        this._eulerDirty = true;

        if (this._eventMask & _baseNode.TRANSFORM_ON) {
          this.emit(_eventEnum.SystemEventType.TRANSFORM_CHANGED, _nodeEnum.TransformBit.TRS);
        }
      }
      /**
       * @en World transformation matrix
       * @zh 世界坐标系变换矩阵
       */
      // @constget

    }, {
      key: "worldMatrix",
      get: function get() {
        this.updateWorldTransform();
        return this._mat;
      }
      /**
       * @en The vector representing forward direction in local coordinate system, it's the minus z direction by default
       * @zh 当前节点面向的前方方向，默认前方为 -z 方向
       */

    }, {
      key: "forward",
      get: function get() {
        return _index.Vec3.transformQuat(new _index.Vec3(), _index.Vec3.FORWARD, this.worldRotation);
      },
      set: function set(dir) {
        var len = dir.length();

        _index.Vec3.multiplyScalar(v3_a, dir, -1 / len);

        _index.Quat.fromViewUp(q_a, v3_a);

        this.setWorldRotation(q_a);
      }
      /**
       * @en Layer of the current Node, it affects raycast, physics etc, refer to [[Layers]]
       * @zh 节点所属层，主要影响射线检测、物理碰撞等，参考 [[Layers]]
       */

    }, {
      key: "layer",
      set: function set(l) {
        this._layer = l;
      },
      get: function get() {
        return this._layer;
      }
      /**
       * @en Whether the node's transformation have changed during the current frame.
       * @zh 这个节点的空间变换信息在当前帧内是否有变过？
       */

    }, {
      key: "hasChangedFlags",
      get: function get() {
        return bookOfChange.get(this._id) || 0;
      },
      set: function set(val) {
        bookOfChange.set(this._id, val);
      } // ===============================
      // for backward-compatibility
      // ===============================

    }, {
      key: "width",
      get: function get() {
        return this._uiProps.uiTransformComp.width;
      },
      set: function set(value) {
        this._uiProps.uiTransformComp.width = value;
      }
    }, {
      key: "height",
      get: function get() {
        return this._uiProps.uiTransformComp.height;
      },
      set: function set(value) {
        this._uiProps.uiTransformComp.height = value;
      }
    }, {
      key: "anchorX",
      get: function get() {
        return this._uiProps.uiTransformComp.anchorX;
      },
      set: function set(value) {
        this._uiProps.uiTransformComp.anchorX = value;
      }
    }, {
      key: "anchorY",
      get: function get() {
        return this._uiProps.uiTransformComp.anchorY;
      },
      set: function set(value) {
        this._uiProps.uiTransformComp.anchorY = value;
      }
    }], [{
      key: "isNode",

      /**
       * @en Determine whether the given object is a normal Node. Will return false if [[Scene]] given.
       * @zh 指定对象是否是普通的节点？如果传入 [[Scene]] 会返回 false。
       */
      value: function isNode(obj) {
        return obj instanceof Node && (obj.constructor === Node || !(obj instanceof cc.Scene));
      } // UI 部分的脏数据

    }]);

    return Node;
  }(_baseNode.BaseNode), _class3.bookOfChange = bookOfChange, _class3.EventType = _eventEnum.SystemEventType, _class3.NodeSpace = _nodeEnum.NodeSpace, _class3.TransformDirtyBit = _nodeEnum.TransformBit, _class3.TransformBit = _nodeEnum.TransformBit, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_lpos", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _index.Vec3();
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_lrot", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _index.Quat();
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_lscale", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _index.Vec3(1, 1, 1);
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_layer", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _layers.Layers.Enum.DEFAULT;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_euler", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _index.Vec3();
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "eulerAngles", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "eulerAngles"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "layer", [_classDecorator.property], Object.getOwnPropertyDescriptor(_class2.prototype, "layer"), _class2.prototype)), _class2)) || _class);
  _exports.Node = Node;
  cc.Node = Node;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,