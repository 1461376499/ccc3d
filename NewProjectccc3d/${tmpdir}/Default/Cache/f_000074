(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../data/class.js", "../value-types/value-type.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../data/class.js"), require("../value-types/value-type.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global._class, global.valueType);
    global.size = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _class, _valueType) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.size = size;
  _exports.Size = void 0;
  _class = _interopRequireDefault(_class);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  /**
   * 二维尺寸。
   */
  var Size = /*#__PURE__*/function (_ValueType) {
    _inherits(Size, _ValueType);

    _createClass(Size, [{
      key: "x",
      // compatibility with vector interfaces
      set: function set(val) {
        this.width = val;
      },
      get: function get() {
        return this.width;
      }
    }, {
      key: "y",
      set: function set(val) {
        this.height = val;
      },
      get: function get() {
        return this.height;
      }
      /**
       * 宽度。
       */

    }], [{
      key: "lerp",

      /**
       * 根据指定的插值比率，从当前尺寸到目标尺寸之间做插值。
       * @param out 本方法将插值结果赋值给此参数
       * @param from 起始尺寸。
       * @param to 目标尺寸。
       * @param ratio 插值比率，范围为 [0,1]。
       * @returns 当前尺寸的宽和高到目标尺寸的宽和高分别按指定插值比率进行线性插值构成的向量。
       */
      value: function lerp(out, from, to, ratio) {
        out.width = from.width + (to.width - from.width) * ratio;
        out.height = from.height + (to.height - from.height) * ratio;
        return out;
      }
    }]);

    function Size(width, height) {
      var _this;

      _classCallCheck(this, Size);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Size).call(this));

      if (width && _typeof(width) === 'object') {
        _this.height = width.height;
        _this.width = width.width;
      } else {
        _this.width = width || 0;
        _this.height = height || 0;
      }

      return _this;
    }
    /**
     * 克隆当前尺寸。
     */


    _createClass(Size, [{
      key: "clone",
      value: function clone() {
        return new Size(this.width, this.height);
      }
      /**
       * 设置当前尺寸使其与指定的尺寸相等。
       * @param other 相比较的尺寸。
       * @returns `this`
       */

    }, {
      key: "set",
      value: function set(width, height) {
        if (width && _typeof(width) === 'object') {
          this.height = width.height;
          this.width = width.width;
        } else {
          this.width = width || 0;
          this.height = height || 0;
        }

        return this;
      }
      /**
       * 判断当前尺寸是否与指定尺寸的相等。
       * @param other 相比较的尺寸。
       * @returns 两尺寸的宽和高都分别相等时返回 `true`；否则返回 `false`。
       */

    }, {
      key: "equals",
      value: function equals(other) {
        return this.width === other.width && this.height === other.height;
      }
      /**
       * 根据指定的插值比率，从当前尺寸到目标尺寸之间做插值。
       * @param to 目标尺寸。
       * @param ratio 插值比率，范围为 [0,1]。
       */

    }, {
      key: "lerp",
      value: function lerp(to, ratio) {
        this.width = this.width + (to.width - this.width) * ratio;
        this.height = this.height + (to.height - this.height) * ratio;
        return this;
      }
      /**
       * 返回当前尺寸的字符串表示。
       * @returns 当前尺寸的字符串表示。
       */

    }, {
      key: "toString",
      value: function toString() {
        return "(".concat(this.width.toFixed(2), ", ").concat(this.height.toFixed(2), ")");
      }
    }]);

    return Size;
  }(_valueType.ValueType);

  _exports.Size = Size;
  Size.ZERO = Object.freeze(new Size(0, 0));
  Size.ONE = Object.freeze(new Size(1, 1));

  _class.default.fastDefine('cc.Size', Size, {
    width: 0,
    height: 0
  });
  /**
   * 等价于 `new Size(other)`。
   * @param other 相比较的尺寸。
   * @returns `new Size(other)`
   */


  function size() {
    var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    return new Size(width, height);
  }

  cc.size = size;
  cc.Size = Size;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkY6L2plbmtpbnMvd29ya3NwYWNlL0NyZWF0b3JfM0QvZWRpdG9yLTNkL3Jlc291cmNlcy8zZC9lbmdpbmUvY29jb3MvY29yZS9tYXRoL3NpemUudHMiXSwibmFtZXMiOlsiU2l6ZSIsInZhbCIsIndpZHRoIiwiaGVpZ2h0Iiwib3V0IiwiZnJvbSIsInRvIiwicmF0aW8iLCJvdGhlciIsInRvRml4ZWQiLCJWYWx1ZVR5cGUiLCJaRVJPIiwiT2JqZWN0IiwiZnJlZXplIiwiT05FIiwiQ0NDbGFzcyIsImZhc3REZWZpbmUiLCJzaXplIiwiY2MiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtDQTs7O01BR2FBLEk7Ozs7O0FBbUJUO3dCQUNPQyxHLEVBQUs7QUFBRSxhQUFLQyxLQUFMLEdBQWFELEdBQWI7QUFBbUIsTzswQkFDeEI7QUFBRSxlQUFPLEtBQUtDLEtBQVo7QUFBb0I7Ozt3QkFDeEJELEcsRUFBSztBQUFFLGFBQUtFLE1BQUwsR0FBY0YsR0FBZDtBQUFvQixPOzBCQUN6QjtBQUFFLGVBQU8sS0FBS0UsTUFBWjtBQUFxQjtBQUVoQzs7Ozs7OztBQXBCQTs7Ozs7Ozs7MkJBUTRDQyxHLEVBQVVDLEksRUFBV0MsRSxFQUFTQyxLLEVBQWU7QUFDckZILFFBQUFBLEdBQUcsQ0FBQ0YsS0FBSixHQUFZRyxJQUFJLENBQUNILEtBQUwsR0FBYSxDQUFDSSxFQUFFLENBQUNKLEtBQUgsR0FBV0csSUFBSSxDQUFDSCxLQUFqQixJQUEwQkssS0FBbkQ7QUFDQUgsUUFBQUEsR0FBRyxDQUFDRCxNQUFKLEdBQWFFLElBQUksQ0FBQ0YsTUFBTCxHQUFjLENBQUNHLEVBQUUsQ0FBQ0gsTUFBSCxHQUFZRSxJQUFJLENBQUNGLE1BQWxCLElBQTRCSSxLQUF2RDtBQUNBLGVBQU9ILEdBQVA7QUFDSDs7O0FBK0JELGtCQUFhRixLQUFiLEVBQW9DQyxNQUFwQyxFQUFxRDtBQUFBOztBQUFBOztBQUNqRDs7QUFDQSxVQUFJRCxLQUFLLElBQUksUUFBT0EsS0FBUCxNQUFpQixRQUE5QixFQUF3QztBQUNwQyxjQUFLQyxNQUFMLEdBQWNELEtBQUssQ0FBQ0MsTUFBcEI7QUFDQSxjQUFLRCxLQUFMLEdBQWFBLEtBQUssQ0FBQ0EsS0FBbkI7QUFDSCxPQUhELE1BR087QUFDSCxjQUFLQSxLQUFMLEdBQWFBLEtBQUssSUFBSSxDQUF0QjtBQUNBLGNBQUtDLE1BQUwsR0FBY0EsTUFBTSxJQUFJLENBQXhCO0FBQ0g7O0FBUmdEO0FBU3BEO0FBRUQ7Ozs7Ozs7OEJBR2dCO0FBQ1osZUFBTyxJQUFJSCxJQUFKLENBQVMsS0FBS0UsS0FBZCxFQUFxQixLQUFLQyxNQUExQixDQUFQO0FBQ0g7QUFFRDs7Ozs7Ozs7MEJBZVlELEssRUFBdUJDLE0sRUFBaUI7QUFDaEQsWUFBSUQsS0FBSyxJQUFJLFFBQU9BLEtBQVAsTUFBaUIsUUFBOUIsRUFBd0M7QUFDcEMsZUFBS0MsTUFBTCxHQUFjRCxLQUFLLENBQUNDLE1BQXBCO0FBQ0EsZUFBS0QsS0FBTCxHQUFhQSxLQUFLLENBQUNBLEtBQW5CO0FBQ0gsU0FIRCxNQUdPO0FBQ0gsZUFBS0EsS0FBTCxHQUFhQSxLQUFLLElBQUksQ0FBdEI7QUFDQSxlQUFLQyxNQUFMLEdBQWNBLE1BQU0sSUFBSSxDQUF4QjtBQUNIOztBQUNELGVBQU8sSUFBUDtBQUNIO0FBRUQ7Ozs7Ozs7OzZCQUtlSyxLLEVBQWE7QUFDeEIsZUFBTyxLQUFLTixLQUFMLEtBQWVNLEtBQUssQ0FBQ04sS0FBckIsSUFDSCxLQUFLQyxNQUFMLEtBQWdCSyxLQUFLLENBQUNMLE1BRDFCO0FBRUg7QUFFRDs7Ozs7Ozs7MkJBS2FHLEUsRUFBVUMsSyxFQUFlO0FBQ2xDLGFBQUtMLEtBQUwsR0FBYSxLQUFLQSxLQUFMLEdBQWEsQ0FBQ0ksRUFBRSxDQUFDSixLQUFILEdBQVcsS0FBS0EsS0FBakIsSUFBMEJLLEtBQXBEO0FBQ0EsYUFBS0osTUFBTCxHQUFjLEtBQUtBLE1BQUwsR0FBYyxDQUFDRyxFQUFFLENBQUNILE1BQUgsR0FBWSxLQUFLQSxNQUFsQixJQUE0QkksS0FBeEQ7QUFDQSxlQUFPLElBQVA7QUFDSDtBQUVEOzs7Ozs7O2lDQUltQjtBQUNmLDBCQUFXLEtBQUtMLEtBQUwsQ0FBV08sT0FBWCxDQUFtQixDQUFuQixDQUFYLGVBQXFDLEtBQUtOLE1BQUwsQ0FBWU0sT0FBWixDQUFvQixDQUFwQixDQUFyQztBQUNIOzs7O0lBdkhxQkMsb0I7OztBQUFiVixFQUFBQSxJLENBRUtXLEksR0FBT0MsTUFBTSxDQUFDQyxNQUFQLENBQWMsSUFBSWIsSUFBSixDQUFTLENBQVQsRUFBWSxDQUFaLENBQWQsQztBQUZaQSxFQUFBQSxJLENBR0tjLEcsR0FBTUYsTUFBTSxDQUFDQyxNQUFQLENBQWMsSUFBSWIsSUFBSixDQUFTLENBQVQsRUFBWSxDQUFaLENBQWQsQzs7QUF1SHhCZSxpQkFBUUMsVUFBUixDQUFtQixTQUFuQixFQUE4QmhCLElBQTlCLEVBQW9DO0FBQUVFLElBQUFBLEtBQUssRUFBRSxDQUFUO0FBQVlDLElBQUFBLE1BQU0sRUFBRTtBQUFwQixHQUFwQztBQUVBOzs7Ozs7O0FBZU8sV0FBU2MsSUFBVCxHQUE2RDtBQUFBLFFBQTlDZixLQUE4Qyx1RUFBdkIsQ0FBdUI7QUFBQSxRQUFwQkMsTUFBb0IsdUVBQUgsQ0FBRztBQUNoRSxXQUFPLElBQUlILElBQUosQ0FBU0UsS0FBVCxFQUF1QkMsTUFBdkIsQ0FBUDtBQUNIOztBQUVEZSxFQUFBQSxFQUFFLENBQUNELElBQUgsR0FBVUEsSUFBVjtBQUVBQyxFQUFBQSxFQUFFLENBQUNsQixJQUFILEdBQVVBLElBQVYiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gQ29weXJpZ2h0IChjKSAyMDEzLTIwMTYgQ2h1a29uZyBUZWNobm9sb2dpZXMgSW5jLlxyXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXHJcblxyXG4gaHR0cDovL3d3dy5jb2Nvcy5jb21cclxuXHJcbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XHJcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcclxuICB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXHJcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxyXG4gIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcclxuICB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXHJcbiAgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXHJcblxyXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cclxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXHJcblxyXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXHJcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcclxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcclxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXHJcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXHJcbiBUSEUgU09GVFdBUkUuXHJcbiovXHJcblxyXG4vKipcclxuICogQGNhdGVnb3J5IGNvcmUvbWF0aFxyXG4gKi9cclxuXHJcbmltcG9ydCBDQ0NsYXNzIGZyb20gJy4uL2RhdGEvY2xhc3MnO1xyXG5pbXBvcnQgeyBWYWx1ZVR5cGUgfSBmcm9tICcuLi92YWx1ZS10eXBlcy92YWx1ZS10eXBlJztcclxuaW1wb3J0IHsgSVNpemVMaWtlIH0gZnJvbSAnLi90eXBlLWRlZmluZSc7XHJcblxyXG4vKipcclxuICog5LqM57u05bC65a+444CCXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU2l6ZSBleHRlbmRzIFZhbHVlVHlwZSB7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBaRVJPID0gT2JqZWN0LmZyZWV6ZShuZXcgU2l6ZSgwLCAwKSk7XHJcbiAgICBwdWJsaWMgc3RhdGljIE9ORSA9IE9iamVjdC5mcmVlemUobmV3IFNpemUoMSwgMSkpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5qC55o2u5oyH5a6a55qE5o+S5YC85q+U546H77yM5LuO5b2T5YmN5bC65a+45Yiw55uu5qCH5bC65a+45LmL6Ze05YGa5o+S5YC844CCXHJcbiAgICAgKiBAcGFyYW0gb3V0IOacrOaWueazleWwhuaPkuWAvOe7k+aenOi1i+WAvOe7meatpOWPguaVsFxyXG4gICAgICogQHBhcmFtIGZyb20g6LW35aeL5bC65a+444CCXHJcbiAgICAgKiBAcGFyYW0gdG8g55uu5qCH5bC65a+444CCXHJcbiAgICAgKiBAcGFyYW0gcmF0aW8g5o+S5YC85q+U546H77yM6IyD5Zu05Li6IFswLDFd44CCXHJcbiAgICAgKiBAcmV0dXJucyDlvZPliY3lsLrlr7jnmoTlrr3lkozpq5jliLDnm67moIflsLrlr7jnmoTlrr3lkozpq5jliIbliKvmjInmjIflrprmj5LlgLzmr5Tnjofov5vooYznur/mgKfmj5LlgLzmnoTmiJDnmoTlkJHph4/jgIJcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyBsZXJwIDxPdXQgZXh0ZW5kcyBJU2l6ZUxpa2U+IChvdXQ6IE91dCwgZnJvbTogT3V0LCB0bzogT3V0LCByYXRpbzogbnVtYmVyKSB7XHJcbiAgICAgICAgb3V0LndpZHRoID0gZnJvbS53aWR0aCArICh0by53aWR0aCAtIGZyb20ud2lkdGgpICogcmF0aW87XHJcbiAgICAgICAgb3V0LmhlaWdodCA9IGZyb20uaGVpZ2h0ICsgKHRvLmhlaWdodCAtIGZyb20uaGVpZ2h0KSAqIHJhdGlvO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY29tcGF0aWJpbGl0eSB3aXRoIHZlY3RvciBpbnRlcmZhY2VzXHJcbiAgICBzZXQgeCAodmFsKSB7IHRoaXMud2lkdGggPSB2YWw7IH1cclxuICAgIGdldCB4ICgpIHsgcmV0dXJuIHRoaXMud2lkdGg7IH1cclxuICAgIHNldCB5ICh2YWwpIHsgdGhpcy5oZWlnaHQgPSB2YWw7IH1cclxuICAgIGdldCB5ICgpIHsgcmV0dXJuIHRoaXMuaGVpZ2h0OyB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlrr3luqbjgIJcclxuICAgICAqL1xyXG4gICAgcHVibGljIGRlY2xhcmUgd2lkdGg6IG51bWJlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOmrmOW6puOAglxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZGVjbGFyZSBoZWlnaHQ6IG51bWJlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOaehOmAoOS4juaMh+WumuWwuuWvuOebuOetieeahOWwuuWvuOOAglxyXG4gICAgICogQHBhcmFtIG90aGVyIOebuOavlOi+g+eahOWwuuWvuOOAglxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvciAob3RoZXI6IFNpemUpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5p6E6YCg5YW35pyJ5oyH5a6a5a695bqm5ZKM6auY5bqm55qE5bC65a+444CCXHJcbiAgICAgKiBAcGFyYW0gW3dpZHRoPTBdIOaMh+WumueahOWuveW6puOAglxyXG4gICAgICogQHBhcmFtIFtoZWlnaHQ9MF0g5oyH5a6a55qE6auY5bqm44CCXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yICh3aWR0aD86IG51bWJlciwgaGVpZ2h0PzogbnVtYmVyKTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvciAod2lkdGg/OiBTaXplIHwgbnVtYmVyLCBoZWlnaHQ/OiBudW1iZXIpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIGlmICh3aWR0aCAmJiB0eXBlb2Ygd2lkdGggPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gd2lkdGguaGVpZ2h0O1xyXG4gICAgICAgICAgICB0aGlzLndpZHRoID0gd2lkdGgud2lkdGg7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoIHx8IDA7XHJcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0IHx8IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5YWL6ZqG5b2T5YmN5bC65a+444CCXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjbG9uZSAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTaXplKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiuvue9ruW9k+WJjeWwuuWvuOS9v+WFtuS4juaMh+WumueahOWwuuWvuOebuOetieOAglxyXG4gICAgICogQHBhcmFtIG90aGVyIOebuOavlOi+g+eahOWwuuWvuOOAglxyXG4gICAgICogQHJldHVybnMgYHRoaXNgXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXQgKG90aGVyOiBTaXplKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOiuvue9ruW9k+WJjeWwuuWvuOeahOWFt+S9k+WPguaVsOOAglxyXG4gICAgICogQHBhcmFtIHdpZHRoIOimgeiuvue9rueahCB3aWR0aCDlgLxcclxuICAgICAqIEBwYXJhbSBoZWlnaHQg6KaB6K6+572u55qEIGhlaWdodCDlgLxcclxuICAgICAqIEByZXR1cm5zIGB0aGlzYFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0ICh3aWR0aD86IG51bWJlciwgaGVpZ2h0PzogbnVtYmVyKTtcclxuXHJcbiAgICBwdWJsaWMgc2V0ICh3aWR0aD86IFNpemUgfCBudW1iZXIsIGhlaWdodD86IG51bWJlcikge1xyXG4gICAgICAgIGlmICh3aWR0aCAmJiB0eXBlb2Ygd2lkdGggPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gd2lkdGguaGVpZ2h0O1xyXG4gICAgICAgICAgICB0aGlzLndpZHRoID0gd2lkdGgud2lkdGg7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoIHx8IDA7XHJcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0IHx8IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Yik5pat5b2T5YmN5bC65a+45piv5ZCm5LiO5oyH5a6a5bC65a+455qE55u4562J44CCXHJcbiAgICAgKiBAcGFyYW0gb3RoZXIg55u45q+U6L6D55qE5bC65a+444CCXHJcbiAgICAgKiBAcmV0dXJucyDkuKTlsLrlr7jnmoTlrr3lkozpq5jpg73liIbliKvnm7jnrYnml7bov5Tlm54gYHRydWVg77yb5ZCm5YiZ6L+U5ZueIGBmYWxzZWDjgIJcclxuICAgICAqL1xyXG4gICAgcHVibGljIGVxdWFscyAob3RoZXI6IFNpemUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53aWR0aCA9PT0gb3RoZXIud2lkdGggJiZcclxuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPT09IG90aGVyLmhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOagueaNruaMh+WumueahOaPkuWAvOavlOeOh++8jOS7juW9k+WJjeWwuuWvuOWIsOebruagh+WwuuWvuOS5i+mXtOWBmuaPkuWAvOOAglxyXG4gICAgICogQHBhcmFtIHRvIOebruagh+WwuuWvuOOAglxyXG4gICAgICogQHBhcmFtIHJhdGlvIOaPkuWAvOavlOeOh++8jOiMg+WbtOS4uiBbMCwxXeOAglxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbGVycCAodG86IFNpemUsIHJhdGlvOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLndpZHRoID0gdGhpcy53aWR0aCArICh0by53aWR0aCAtIHRoaXMud2lkdGgpICogcmF0aW87XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLmhlaWdodCArICh0by5oZWlnaHQgLSB0aGlzLmhlaWdodCkgKiByYXRpbztcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOi/lOWbnuW9k+WJjeWwuuWvuOeahOWtl+espuS4suihqOekuuOAglxyXG4gICAgICogQHJldHVybnMg5b2T5YmN5bC65a+455qE5a2X56ym5Liy6KGo56S644CCXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB0b1N0cmluZyAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGAoJHt0aGlzLndpZHRoLnRvRml4ZWQoMil9LCAke3RoaXMuaGVpZ2h0LnRvRml4ZWQoMil9KWA7XHJcbiAgICB9XHJcbn1cclxuXHJcbkNDQ2xhc3MuZmFzdERlZmluZSgnY2MuU2l6ZScsIFNpemUsIHsgd2lkdGg6IDAsIGhlaWdodDogMCB9KTtcclxuXHJcbi8qKlxyXG4gKiDnrYnku7fkuo4gYG5ldyBTaXplKG90aGVyKWDjgIJcclxuICogQHBhcmFtIG90aGVyIOebuOavlOi+g+eahOWwuuWvuOOAglxyXG4gKiBAcmV0dXJucyBgbmV3IFNpemUob3RoZXIpYFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNpemUgKG90aGVyOiBTaXplKTogU2l6ZTtcclxuXHJcbi8qKlxyXG4gKiDnrYnku7fkuo4gYG5ldyBTaXplKHgsIHkpYOOAglxyXG4gKiBAcGFyYW0gW3g9MF0g5oyH5a6a55qE5a695bqm44CCXHJcbiAqIEBwYXJhbSBbeT0wXSDmjIflrprnmoTpq5jluqbjgIJcclxuICogQHJldHVybnMgYG5ldyBTaXplKHgsIHkpYFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNpemUgKHdpZHRoPzogbnVtYmVyLCBoZWlnaHQ/OiBudW1iZXIpOiBTaXplO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNpemUgKHdpZHRoOiBTaXplIHwgbnVtYmVyID0gMCwgaGVpZ2h0OiBudW1iZXIgPSAwKSB7XHJcbiAgICByZXR1cm4gbmV3IFNpemUod2lkdGggYXMgYW55LCBoZWlnaHQpO1xyXG59XHJcblxyXG5jYy5zaXplID0gc2l6ZTtcclxuXHJcbmNjLlNpemUgPSBTaXplO1xyXG4iXX0=