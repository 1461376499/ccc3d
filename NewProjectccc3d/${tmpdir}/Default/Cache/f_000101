(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../utils/misc.js", "./unpackers.js", "./utils.js", "../platform/debug.js", "../utils/index.js", "../assets/texture-2d.js", "../default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../utils/misc.js"), require("./unpackers.js"), require("./utils.js"), require("../platform/debug.js"), require("../utils/index.js"), require("../assets/texture-2d.js"), require("../default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.misc, global.unpackers, global.utils, global.debug, global.index, global.texture2d, global.defaultConstants);
    global.packDownloader = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _misc, _unpackers, _utils, _debug, _index, _texture2d, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.initPacks = initPacks;
  _exports._loadNewPack = _loadNewPack;
  _exports._doPreload = _doPreload;
  _exports._doLoadNewPack = _doLoadNewPack;
  _exports._selectLoadedPack = _selectLoadedPack;
  _exports.load = load;

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  // when more than one package contains the required asset,
  // choose to load from the package with the largest state value.
  var PackState;

  (function (PackState) {
    PackState[PackState["Invalid"] = 0] = "Invalid";
    PackState[PackState["Removed"] = 1] = "Removed";
    PackState[PackState["Downloading"] = 2] = "Downloading";
    PackState[PackState["Loaded"] = 3] = "Loaded";
  })(PackState || (PackState = {}));

  ;

  var UnpackerData = function UnpackerData() {
    _classCallCheck(this, UnpackerData);

    this.unpacker = void 0;
    this.state = void 0;
    this.unpacker = null;
    this.state = PackState.Invalid;
  }; // {assetUuid: packUuid|[packUuid]}
  // If value is array of packUuid, then the first one will be prioritized for download,
  // so the smallest pack must be at the beginning of the array.


  var uuidToPack = {}; // {packUuid: assetIndices}

  var packIndices = {}; // {packUuid: UnpackerData}
  // We have to cache all packs in global because for now there's no operation context in loader.

  var globalUnpackers = {};

  function error(uuid, packUuid) {
    return new Error('Can not retrieve ' + uuid + ' from packer ' + packUuid);
  }

  function initPacks(packs) {
    packIndices = packs;

    for (var packUuid in packs) {
      var uuids = packs[packUuid];

      for (var i = 0; i < uuids.length; i++) {
        var uuid = uuids[i]; // the smallest pack must be at the beginning of the array to download more first

        var pushFront = uuids.length === 1;
        (0, _misc.pushToMap)(uuidToPack, uuid, packUuid, pushFront);
      }
    }
  }

  function _loadNewPack(uuid, packUuid, callback) {
    var packUrl = cc.AssetLibrary.getLibUrlNoExt(packUuid) + '.json';
    cc.loader.load({
      url: packUrl,
      ignoreMaxConcurrency: true
    }, function (err, packJson) {
      if (err) {
        (0, _debug.errorID)(4916, uuid);
        return callback(err);
      }

      var res = _doLoadNewPack(uuid, packUuid, packJson);

      if (res) {
        callback(null, res);
      } else {
        callback(error(uuid, packUuid));
      }
    });
  }

  function _doPreload(packUuid, packJson) {
    var unpackerData = globalUnpackers[packUuid];

    if (!unpackerData) {
      unpackerData = globalUnpackers[packUuid] = new UnpackerData();
      unpackerData.state = PackState.Downloading;
    }

    if (unpackerData.state !== PackState.Loaded) {
      unpackerData.unpacker = new _unpackers.JsonUnpacker();
      unpackerData.unpacker.load(packIndices[packUuid], packJson);
      unpackerData.state = PackState.Loaded;
    }
  }

  function _doLoadNewPack(uuid, packUuid, packedJson) {
    var unpackerData = globalUnpackers[packUuid]; // double check cache after load

    if (unpackerData.state !== PackState.Loaded) {
      // init unpacker
      if (typeof packedJson === 'string') {
        packedJson = JSON.parse(packedJson);
      }

      if (!_defaultConstants.DEBUG && packedJson.keys && packedJson.data) {
        var keys = packedJson.keys;
        packedJson = packedJson.data;
        (0, _utils.decompressJson)(packedJson, keys);
      }

      if (Array.isArray(packedJson)) {
        unpackerData.unpacker = new _unpackers.JsonUnpacker();
      } else if (packedJson.type === _index.js._getClassId(_texture2d.Texture2D)) {
        unpackerData.unpacker = new _unpackers.TextureUnpacker();
      }

      unpackerData.unpacker.load(packIndices[packUuid], packedJson);
      unpackerData.state = PackState.Loaded;
    }

    return unpackerData.unpacker.retrieve(uuid);
  }

  function _selectLoadedPack(packUuids) {
    var existsPackState = PackState.Invalid;
    var existsPackUuid = '';

    for (var i = 0; i < packUuids.length; i++) {
      var packUuid = packUuids[i];
      var unpackerData = globalUnpackers[packUuid];

      if (unpackerData) {
        var state = unpackerData.state;

        if (state === PackState.Loaded) {
          return packUuid;
        } else if (state > existsPackState) {
          // load from the package with the largest state value,
          existsPackState = state;
          existsPackUuid = packUuid;
        }
      }
    } // otherwise the first one (smallest one) will be load


    return existsPackState !== PackState.Invalid ? existsPackUuid : packUuids[0];
  }
  /**
   * @returns {Object} When returns undefined, the requested item is not in any pack, when returns null, the item is in a loading pack, when item json exists, it will return the result directly.
   */


  function load(item, callback) {
    var uuid = item.uuid;
    var packUuid = uuidToPack[uuid];

    if (!packUuid) {
      // Return undefined to let caller know it's not recognized.
      // We don't use false here because changing return value type may cause jit fail,
      // though return undefined may have the same issue.
      return;
    }

    if (Array.isArray(packUuid)) {
      packUuid = _selectLoadedPack(packUuid);
    }

    var unpackerData = globalUnpackers[packUuid];

    if (unpackerData && unpackerData.state === PackState.Loaded) {
      // ensure async
      var json = unpackerData.unpacker.retrieve(uuid);

      if (json) {
        return json;
      } else {
        return error(uuid, packUuid);
      }
    } else {
      if (!unpackerData) {
        if (!_defaultConstants.TEST) {
          console.log('Create unpacker %s for %s', packUuid, uuid);
        }

        unpackerData = globalUnpackers[packUuid] = new UnpackerData();
        unpackerData.state = PackState.Downloading;
      }

      _loadNewPack(uuid, packUuid, callback);
    } // Return null to let caller know it's loading asynchronously


    return null;
  }

  if (_defaultConstants.TEST) {
    cc._Test.PackDownloader = {
      initPacks: initPacks,
      _loadNewPack: _loadNewPack,
      _doPreload: _doPreload,
      _doLoadNewPack: _doLoadNewPack,
      _selectLoadedPack: _selectLoadedPack,
      load: load,
      reset: function reset() {
        uuidToPack = {};
        packIndices = {};
        globalUnpackers = {};
      }
    };
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,