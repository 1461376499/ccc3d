(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../utils/js.js", "./class.js", "./utils/preprocess-class.js", "./utils/attribute.js", "../platform/debug.js", "../default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../utils/js.js"), require("./class.js"), require("./utils/preprocess-class.js"), require("./utils/attribute.js"), require("../platform/debug.js"), require("../default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.js, global._class, global.preprocessClass, global.attribute, global.debug, global.defaultConstants);
    global.classDecorator = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, js, _class, _preprocessClass, _attribute, _debug, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.property = property;
  _exports.type = type;
  _exports.string = _exports.boolean = _exports.float = _exports.integer = _exports.help = _exports.icon = _exports.inspector = _exports.playOnFocus = _exports.disallowMultiple = _exports.executionOrder = _exports.menu = _exports.requireComponent = _exports.executeInEditMode = _exports.ccclass = void 0;
  js = _interopRequireWildcard(js);

  function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  // caches for class construction
  var CACHE_KEY = '__ccclassCache__';

  function fNOP(ctor) {
    return ctor;
  }

  function getSubDict(obj, key) {
    return obj[key] || (obj[key] = {});
  }

  function checkCtorArgument(decorate) {
    return function (target) {
      if (typeof target === 'function') {
        // no parameter, target is ctor
        return decorate(target);
      }

      return function (ctor) {
        return decorate(ctor, target);
      };
    };
  }

  function _checkNormalArgument(validator_DEV, decorate, decoratorName) {
    return function (target) {
      if (_defaultConstants.DEV && validator_DEV(target, decoratorName) === false) {
        return function () {
          return fNOP;
        };
      }

      return function (ctor) {
        return decorate(ctor, target);
      };
    };
  }

  var checkCompArgument = _checkNormalArgument.bind(null, _defaultConstants.DEV && function (arg, decoratorName) {
    if (!cc.Class._isCCClass(arg)) {
      (0, _debug.error)('The parameter for %s is missing.', decoratorName);
      return false;
    }
  });

  function _argumentChecker(type) {
    return _checkNormalArgument.bind(null, _defaultConstants.DEV && function (arg, decoratorName) {
      if (arg instanceof cc.Component || arg === undefined) {
        (0, _debug.error)('The parameter for %s is missing.', decoratorName);
        return false;
      } else if (_typeof(arg) !== type) {
        (0, _debug.error)('The parameter for %s must be type %s.', decoratorName, type);
        return false;
      }
    });
  }

  var checkStringArgument = _argumentChecker('string');

  var checkNumberArgument = _argumentChecker('number'); // var checkBooleanArgument = _argumentChecker('boolean');


  function getClassCache(ctor, decoratorName) {
    if (_defaultConstants.DEV && cc.Class._isCCClass(ctor)) {
      (0, _debug.error)('`@%s` should be used after @ccclass for class "%s"', decoratorName, js.getClassName(ctor));
      return null;
    }

    return getSubDict(ctor, CACHE_KEY);
  }

  function getDefaultFromInitializer(initializer) {
    var value;

    try {
      value = initializer();
    } catch (e) {
      // just lazy initialize by CCClass
      return initializer;
    }

    if (_typeof(value) !== 'object' || value === null) {
      // string boolean number function undefined null
      return value;
    } else {
      // The default attribute will not be used in ES6 constructor actually,
      // so we dont need to simplify into `{}` or `[]` or vec2 completely.
      return initializer;
    }
  }

  function extractActualDefaultValues(ctor) {
    var dummyObj;

    try {
      dummyObj = new ctor();
    } catch (e) {
      if (_defaultConstants.DEV) {
        (0, _debug.warnID)(3652, js.getClassName(ctor), e);
      }

      return {};
    }

    return dummyObj;
  }

  function genProperty(ctor, properties, propName, options, desc, cache) {
    var fullOptions;

    if (options) {
      fullOptions = _defaultConstants.DEV ? (0, _preprocessClass.getFullFormOfProperty)(options, propName, js.getClassName(ctor)) : (0, _preprocessClass.getFullFormOfProperty)(options);
      fullOptions = fullOptions || options;
    }

    var existsProperty = properties[propName];
    var prop = js.mixin(existsProperty || {}, fullOptions || {});
    var isGetset = desc && (desc.get || desc.set);

    if (isGetset) {
      // typescript or babel
      if (_defaultConstants.DEV && options && (options.get || options.set)) {
        var errorProps = getSubDict(cache, 'errorProps');

        if (!errorProps[propName]) {
          errorProps[propName] = true;
          (0, _debug.warnID)(3655, propName, js.getClassName(ctor), propName, propName);
        }
      }

      if (desc.get) {
        prop.get = desc.get;
      }

      if (desc.set) {
        prop.set = desc.set;
      }
    } else {
      if (_defaultConstants.DEV && (prop.get || prop.set)) {
        // @property({
        //     get () { ... },
        //     set (...) { ... },
        // })
        // value;
        (0, _debug.errorID)(3655, propName, js.getClassName(ctor), propName, propName);
        return;
      } // member variables


      var defaultValue;
      var isDefaultValueSpecified = false;

      if (desc) {
        // babel
        if (desc.initializer) {
          // @property(...)
          // value = null;
          defaultValue = getDefaultFromInitializer(desc.initializer);
          isDefaultValueSpecified = true;
        } else {// @property(...)
          // value;
        }
      } else {
        // typescript
        var actualDefaultValues = cache["default"] || (cache["default"] = extractActualDefaultValues(ctor));

        if (actualDefaultValues.hasOwnProperty(propName)) {
          // @property(...)
          // value = null;
          defaultValue = actualDefaultValues[propName];
          isDefaultValueSpecified = true;
        } else {// @property(...)
          // value;
        }
      }

      if (_defaultConstants.DEV) {
        if (options && options.hasOwnProperty('default')) {
          (0, _debug.warnID)(3653, propName, js.getClassName(ctor)); // prop.default = options.default;
        } else if (!isDefaultValueSpecified) {
          (0, _debug.warnID)(3654, js.getClassName(ctor), propName); // prop.default = fullOptions.hasOwnProperty('default') ? fullOptions.default : undefined;
        }
      }

      prop["default"] = defaultValue;
    }

    properties[propName] = prop;
  }
  /**
   * @en Declare a standard ES6 or TS Class as a CCClass, please refer to the [document](https://docs.cocos.com/creator3d/manual/zh/scripting/ccclass.html)
   * @zh 将标准写法的 ES6 或者 TS Class 声明为 CCClass，具体用法请参阅[类型定义](https://docs.cocos.com/creator3d/manual/zh/scripting/ccclass.html)。
   * @param name - The class name used for serialization.
   * @example
   * ```typescript
   * const {ccclass} = cc._decorator;
   *
   * // define a CCClass, omit the name
   *  @ccclass
   * class NewScript extends cc.Component {
   *     // ...
   * }
   *
   * // define a CCClass with a name
   *  @ccclass('LoginData')
   * class LoginData {
   *     // ...
   * }
   * ```
   */


  var ccclass = checkCtorArgument(function (ctor, name) {
    // if (FIX_BABEL6) {
    //     eval('if(typeof _classCallCheck==="function"){_classCallCheck=function(){};}');
    // }
    var base = js.getSuper(ctor);

    if (base === Object) {
      base = null;
    }

    var proto = {
      name: name,
      "extends": base,
      ctor: ctor,
      __ES6__: true
    };
    var cache = ctor[CACHE_KEY];

    if (cache) {
      var decoratedProto = cache.proto;

      if (decoratedProto) {
        // decoratedProto.properties = createProperties(ctor, decoratedProto.properties);
        js.mixin(proto, decoratedProto);
      }

      ctor[CACHE_KEY] = undefined;
    }

    var res = cc.Class(proto); // validate methods

    if (_defaultConstants.DEV) {
      var propNames = Object.getOwnPropertyNames(ctor.prototype);

      for (var i = 0; i < propNames.length; ++i) {
        var prop = propNames[i];

        if (prop !== 'constructor') {
          var desc = Object.getOwnPropertyDescriptor(ctor.prototype, prop);
          var func = desc && desc.value;

          if (typeof func === 'function') {
            (0, _preprocessClass.doValidateMethodWithProps_DEV)(func, prop, js.getClassName(ctor), ctor, base);
          }
        }
      }
    }

    return res;
  });
  _exports.ccclass = ccclass;

  function property(ctorProtoOrOptions, propName, desc) {
    var options = null;

    function normalized(ctorProto, propName, desc) {
      var cache = getClassCache(ctorProto.constructor);

      if (cache) {
        var ccclassProto = getSubDict(cache, 'proto');
        var properties = getSubDict(ccclassProto, 'properties');
        genProperty(ctorProto.constructor, properties, propName, options, desc, cache);
      }
    }

    if (ctorProtoOrOptions === undefined) {
      // @property(undefined)
      return property({
        type: undefined
      });
    }

    if (typeof propName === 'undefined') {
      options = ctorProtoOrOptions;
      return normalized;
    } else {
      normalized(ctorProtoOrOptions, propName, desc);
    }
  } // Editor Decorators


  function createEditorDecorator(argCheckFunc, editorPropName, staticValue) {
    return argCheckFunc(function (ctor, decoratedValue) {
      var cache = getClassCache(ctor, editorPropName);

      if (cache) {
        var value = staticValue !== undefined ? staticValue : decoratedValue;
        var proto = getSubDict(cache, 'proto');
        getSubDict(proto, 'editor')[editorPropName] = value;
      }
    }, editorPropName);
  }

  function createDummyDecorator(argCheckFunc) {
    return argCheckFunc(fNOP);
  }
  /**
   * @en Makes a CCClass that inherit from component execute in edit mode.<br/>
   * By default, all components are only executed in play mode,<br/>
   * which means they will not have their callback functions executed while the Editor is in edit mode.<br/>
   * @zh 允许继承自 Component 的 CCClass 在编辑器里执行。<br/>
   * 默认情况下，所有 Component 都只会在运行时才会执行，也就是说它们的生命周期回调不会在编辑器里触发。
   * @example
   * ```typescript
   * const {ccclass, executeInEditMode} = cc._decorator;
   *
   *  @ccclass
   *  @executeInEditMode
   * class NewScript extends cc.Component {
   *     // ...
   * }
   * ```
   */


  var executeInEditMode = (_defaultConstants.DEV ? createEditorDecorator : createDummyDecorator)(checkCtorArgument, 'executeInEditMode', true);
  /**
   * @en Declare that the current component relies on another type of component. 
   * If the required component doesn't exist, the engine will create a new empty instance of the required component and add to the node.
   * @zh 为声明为 CCClass 的组件添加依赖的其它组件。当组件添加到节点上时，如果依赖的组件不存在，引擎将会自动将依赖组件添加到同一个节点，防止脚本出错。该设置在运行时同样有效。
   * @param requiredComponent The required component type
   * @example
   * ```typescript
   * import {_decorator, SpriteComponent, Component} from cc;
   * import {ccclass, requireComponent} from _decorator;
   *
   * @ccclass
   * @requireComponent(SpriteComponent)
   * class SpriteCtrl extends Component {
   *     // ...
   * }
   * ```
   */

  _exports.executeInEditMode = executeInEditMode;
  var requireComponent = createEditorDecorator(checkCompArgument, 'requireComponent');
  /**
   * @en Add the current component to the specific menu path in `Add Component` selector of the inspector panel
   * @zh 将当前组件添加到组件菜单中，方便用户查找。例如 "Rendering/CameraCtrl"。
   * @param path - The path is the menu represented like a pathname. For example the menu could be "Rendering/CameraCtrl".
   * @example
   * ```typescript
   * const {ccclass, menu} = cc._decorator;
   *
   * @ccclass
   * @menu("Rendering/CameraCtrl")
   * class NewScript extends cc.Component {
   *     // ...
   * }
   * ```
   */

  _exports.requireComponent = requireComponent;
  var menu = (_defaultConstants.DEV ? createEditorDecorator : createDummyDecorator)(checkStringArgument, 'menu');
  /**
   * @en Set the component priority, it decides at which order the life cycle functions of components will be invoked. Smaller priority get invoked before larger priority.
   * This will affect `onLoad`, `onEnable`, `start`, `update` and `lateUpdate`, but `onDisable` and `onDestroy` won't be affected.
   * @zh 设置脚本生命周期方法调用的优先级。优先级小于 0 的组件将会优先执行，优先级大于 0 的组件将会延后执行。优先级仅会影响 onLoad, onEnable, start, update 和 lateUpdate，而 onDisable 和 onDestroy 不受影响。
   * @param priority - The execution order of life cycle methods for Component. Smaller priority get invoked before larger priority.
   * @example
   * ```typescript
   * const {ccclass, executionOrder} = cc._decorator;
   *
   *  @ccclass
   *  @executionOrder(1)
   * class CameraCtrl extends cc.Component {
   *     // ...
   * }
   * ```
   */

  _exports.menu = menu;
  var executionOrder = createEditorDecorator(checkNumberArgument, 'executionOrder');
  /**
   * @en Forbid add multiple instances of the component to the same node.
   * @zh 防止多个相同类型（或子类型）的组件被添加到同一个节点。
   * @example
   * ```typescript
   * const {ccclass, disallowMultiple} = cc._decorator;
   *
   * @ccclass
   * @disallowMultiple
   * class CameraCtrl extends cc.Component {
   *     // ...
   * }
   * ```
   */

  _exports.executionOrder = executionOrder;
  var disallowMultiple = (_defaultConstants.DEV ? createEditorDecorator : createDummyDecorator)(checkCtorArgument, 'disallowMultiple');
  /**
   * @en When {{executeInEditMode}} is set, this decorator will decide when a node with the component is on focus whether the editor should running in high FPS mode.
   * @zh 当指定了 "executeInEditMode" 以后，playOnFocus 可以在选中当前组件所在的节点时，提高编辑器的场景刷新频率到 60 FPS，否则场景就只会在必要的时候进行重绘。
   * @example
   * ```typescript
   * const {ccclass, playOnFocus, executeInEditMode} = cc._decorator;
   *
   * @ccclass
   * @executeInEditMode
   * @playOnFocus
   * class CameraCtrl extends cc.Component {
   *     // ...
   * }
   * ```
   */

  _exports.disallowMultiple = disallowMultiple;
  var playOnFocus = (_defaultConstants.DEV ? createEditorDecorator : createDummyDecorator)(checkCtorArgument, 'playOnFocus');
  /**
   * @en Use a customized inspector page in the **inspector**
   * @zh 自定义当前组件在 **属性检查器** 中渲染时所用的 UI 页面描述。
   * @param url The url of the page definition in js
   * @example
   * ```typescript
   * const {ccclass, inspector} = cc._decorator;
   *
   * @ccclass
   * @inspector("packages://inspector/inspectors/comps/camera-ctrl.js")
   * class NewScript extends cc.Component {
   *     // ...
   * }
   * ```
   */

  _exports.playOnFocus = playOnFocus;
  var inspector = (_defaultConstants.DEV ? createEditorDecorator : createDummyDecorator)(checkStringArgument, 'inspector');
  /**
   * @en Define the icon of the component.
   * @zh 自定义当前组件在编辑器中显示的图标 url。
   * @param url
   * @private
   * @example
   * ```typescript
   * const {ccclass, icon} = cc._decorator;
   *
   *  @ccclass
   *  @icon("xxxx.png")
   * class NewScript extends cc.Component {
   *     // ...
   * }
   * ```
   */

  _exports.inspector = inspector;
  var icon = (_defaultConstants.DEV ? createEditorDecorator : createDummyDecorator)(checkStringArgument, 'icon');
  /**
   * @en Define the help documentation url, if given, the component section in the **inspector** will have a help documentation icon reference to the web page given. 
   * @zh 指定当前组件的帮助文档的 url，设置过后，在 **属性检查器** 中就会出现一个帮助图标，用户点击将打开指定的网页。
   * @param url The url of the help documentation
   * @example
   * ```typescript
   * const {ccclass, help} = cc._decorator;
   *
   * @ccclass
   * @help("app://docs/html/components/spine.html")
   * class NewScript extends cc.Component {
   *     // ...
   * }
   * ```
   */

  _exports.icon = icon;
  var help = (_defaultConstants.DEV ? createEditorDecorator : createDummyDecorator)(checkStringArgument, 'help'); // Other Decorators

  /**
   * @en Declare the property as integer
   * @zh 将该属性标记为整数。
   */

  _exports.help = help;
  var integer = type(_attribute.CCInteger);
  /**
   * @en Declare the property as float
   * @zh 将该属性标记为浮点数。
   */

  _exports.integer = integer;

  var _float = type(_attribute.CCFloat);
  /**
   * @en Declare the property as boolean
   * @zh 将该属性标记为布尔值。
   */


  _exports.float = _float;

  var _boolean = type(_attribute.CCBoolean);
  /**
   * @en Declare the property as string
   * @zh 将该属性标记为字符串。
   */


  _exports.boolean = _boolean;
  var string = type(_attribute.CCString);
  /**
   * @en Declare the property as the given type
   * @zh 标记该属性的类型。
   * @param type
   */

  _exports.string = string;

  function type(type) {
    return property({
      type: type
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,