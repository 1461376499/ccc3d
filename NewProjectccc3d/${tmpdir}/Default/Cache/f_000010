(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../core/components/component.js", "../core/data/class-decorator.js", "../core/math/index.js", "./assets/clip.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../core/components/component.js"), require("../core/data/class-decorator.js"), require("../core/math/index.js"), require("./assets/clip.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.component, global.classDecorator, global.index, global.clip);
    global.audioSourceComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _component, _classDecorator, _index, _clip) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AudioSourceComponent = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  /**
   * @en
   * A representation of a single audio source, <br>
   * contains basic functionalities like play, pause and stop.
   * @zh
   * 音频组件，代表单个音源，提供播放、暂停、停止等基本功能。
   */
  var AudioSourceComponent = (_dec = (0, _classDecorator.ccclass)('cc.AudioSourceComponent'), _dec2 = (0, _classDecorator.help)('i18n:cc.AudioSourceComponent'), _dec3 = (0, _classDecorator.menu)('Components/AudioSource'), _dec4 = (0, _classDecorator.property)(_clip.AudioClip), _dec5 = (0, _classDecorator.property)({
    type: _clip.AudioClip,
    tooltip: 'i18n:audio.clip'
  }), _dec6 = (0, _classDecorator.property)({
    tooltip: 'i18n:audio.loop'
  }), _dec7 = (0, _classDecorator.property)({
    tooltip: 'i18n:audio.playOnAwake'
  }), _dec8 = (0, _classDecorator.property)({
    range: [0.0, 1.0],
    tooltip: 'i18n:audio.volume'
  }), _dec(_class = _dec2(_class = _dec3(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
    _inherits(AudioSourceComponent, _Component);

    function AudioSourceComponent() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, AudioSourceComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AudioSourceComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _initializerDefineProperty(_this, "_clip", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_loop", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_playOnAwake", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_volume", _descriptor4, _assertThisInitialized(_this));

      _this._cachedCurrentTime = 0;
      return _this;
    }

    _createClass(AudioSourceComponent, [{
      key: "onLoad",
      value: function onLoad() {
        this._syncStates();

        if (this._playOnAwake) {
          this.play();
        }
      }
    }, {
      key: "onDisable",
      value: function onDisable() {
        this.pause();
      }
    }, {
      key: "onDestroy",
      value: function onDestroy() {
        this.stop();
      }
      /**
       * @en
       * Play the clip.<br>
       * Restart if already playing.<br>
       * Resume if paused.
       * @zh
       * 开始播放。<br>
       * 如果音频处于正在播放状态，将会重新开始播放音频。<br>
       * 如果音频处于暂停状态，则会继续播放音频。
       */

    }, {
      key: "play",
      value: function play() {
        if (!this._clip) {
          return;
        }

        if (this.playing) {
          this.currentTime = 0;
        } else {
          this._clip.play();
        }
      }
      /**
       * @en
       * Pause the clip.
       * @zh
       * 暂停播放。
       */

    }, {
      key: "pause",
      value: function pause() {
        if (!this._clip) {
          return;
        }

        this._clip.pause();
      }
      /**
       * @en
       * Stop the clip.
       * @zh
       * 停止播放。
       */

    }, {
      key: "stop",
      value: function stop() {
        if (!this._clip) {
          return;
        }

        this._clip.stop();
      }
      /**
       * @en
       * Plays an AudioClip, and scales volume by volumeScale.<br>
       * Note: for multiple playback on the same clip, the actual behavior is platform-specific.<br>
       * Re-start style fallback will be used if the underlying platform doesn't support it.
       * @zh
       * 以指定音量播放一个音频一次。<br>
       * 注意，对同一个音频片段，不同平台多重播放效果存在差异。<br>
       * 对不支持的平台，如前一次尚未播完，则会立即重新播放。
       * @param clip The audio clip to be played.
       * @param volumeScale volume scaling factor wrt. current value.
       */

    }, {
      key: "playOneShot",
      value: function playOneShot(clip) {
        var volumeScale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        clip.playOneShot(this._volume * volumeScale);
      }
    }, {
      key: "_syncStates",
      value: function _syncStates() {
        if (!this._clip) {
          return;
        }

        this._clip.setCurrentTime(this._cachedCurrentTime);

        this._clip.setLoop(this._loop);

        this._clip.setVolume(this._volume, true);

        this._volume = this._clip.getVolume();
      }
      /**
       * @en
       * Set current playback time, in seconds.
       * @zh
       * 以秒为单位设置当前播放时间。
       * @param num playback time to jump to.
       */

    }, {
      key: "clip",

      /**
       * @en
       * The default AudioClip to be played for this audio source.
       * @zh
       * 设定要播放的音频。
       */
      set: function set(val) {
        this._clip = val;

        this._syncStates();
      },
      get: function get() {
        return this._clip;
      }
      /**
       * @en
       * Is looping enabled for this audio source?
       * @zh
       * 是否循环播放音频？
       */

    }, {
      key: "loop",
      set: function set(val) {
        this._loop = val;

        if (this._clip) {
          this._clip.setLoop(val);
        }
      },
      get: function get() {
        return this._loop;
      }
      /**
       * @en
       * Is the autoplay enabled? <br>
       * Note that for most platform autoplay will only start <br>
       * after a user gesture is received, according to the latest autoplay policy: <br>
       * https://www.chromium.org/audio-video/autoplay
       * @zh
       * 是否启用自动播放。 <br>
       * 请注意，根据最新的自动播放策略，现在对大多数平台，自动播放只会在第一次收到用户输入后生效。 <br>
       * 参考：https://www.chromium.org/audio-video/autoplay
       */

    }, {
      key: "playOnAwake",
      set: function set(val) {
        this._playOnAwake = val;
      },
      get: function get() {
        return this._playOnAwake;
      }
      /**
       * @en
       * The volume of this audio source (0.0 to 1.0).<br>
       * Note: Volume control may be ineffective on some platforms.
       * @zh
       * 音频的音量（大小范围为 0.0 到 1.0）。<br>
       * 请注意，在某些平台上，音量控制可能不起效。<br>
       */

    }, {
      key: "volume",
      set: function set(val) {
        if (isNaN(val)) {
          console.warn('illegal audio volume!');
          return;
        }

        val = (0, _index.clamp)(val, 0, 1);

        if (this._clip) {
          this._clip.setVolume(val); // on some platform volume control may not be available


          this._volume = this._clip.getVolume();
        } else {
          this._volume = val;
        }
      },
      get: function get() {
        return this._volume;
      }
    }, {
      key: "currentTime",
      set: function set(num) {
        if (isNaN(num)) {
          console.warn('illegal audio time!');
          return;
        }

        num = (0, _index.clamp)(num, 0, this.duration);
        this._cachedCurrentTime = num;

        if (!this._clip) {
          return;
        }

        this._clip.setCurrentTime(this._cachedCurrentTime);
      }
      /**
       * @en
       * Get the current playback time, in seconds.
       * @zh
       * 以秒为单位获取当前播放时间。
       */
      ,
      get: function get() {
        if (!this._clip) {
          return this._cachedCurrentTime;
        }

        return this._clip.getCurrentTime();
      }
      /**
       * @en
       * Get the audio duration, in seconds.
       * @zh
       * 获取以秒为单位的音频总时长。
       */

    }, {
      key: "duration",
      get: function get() {
        if (!this._clip) {
          return 0;
        }

        return this._clip.getDuration();
      }
      /**
       * @en
       * Get current audio state.
       * @zh
       * 获取当前音频状态。
       */

    }, {
      key: "state",
      get: function get() {
        if (!this._clip) {
          return _clip.AudioClip.PlayingState.INITIALIZING;
        }

        return this._clip.state;
      }
      /**
       * @en
       * Is the audio currently playing?
       * @zh
       * 当前音频是否正在播放？
       */

    }, {
      key: "playing",
      get: function get() {
        return this.state === _clip.AudioClip.PlayingState.PLAYING;
      }
    }]);

    return AudioSourceComponent;
  }(_component.Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_clip", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_loop", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_playOnAwake", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_volume", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 1;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "clip", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "clip"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "loop", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "loop"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "playOnAwake", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "playOnAwake"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "volume", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "volume"), _class2.prototype)), _class2)) || _class) || _class) || _class);
  _exports.AudioSourceComponent = AudioSourceComponent;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,