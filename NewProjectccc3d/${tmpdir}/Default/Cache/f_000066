(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./define.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./define.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.define);
    global.inputAssembler = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _define) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.GFXInputAssembler = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  /**
   * @en GFX input assembler.
   * @zh GFX 输入汇集器。
   */
  var GFXInputAssembler = /*#__PURE__*/function (_GFXObject) {
    _inherits(GFXInputAssembler, _GFXObject);

    _createClass(GFXInputAssembler, [{
      key: "vertexBuffers",

      /**
       * @en Get current vertex buffers.
       * @zh 顶点缓冲数组。
       */
      get: function get() {
        return this._vertexBuffers;
      }
      /**
       * @en Get current index buffer.
       * @zh 索引缓冲。
       */

    }, {
      key: "indexBuffer",
      get: function get() {
        return this._indexBuffer;
      }
      /**
       * @en Get current attributes.
       * @zh 顶点属性数组。
       */

    }, {
      key: "attributes",
      get: function get() {
        return this._attributes;
      }
      /**
       * @en Get current vertex count.
       * @zh 顶点数量。
       */

    }, {
      key: "vertexCount",
      get: function get() {
        return this._vertexCount;
      },
      set: function set(count) {
        this._vertexCount = count;
      }
      /**
       * @en Get starting vertex.
       * @zh 起始顶点。
       */

    }, {
      key: "firstVertex",
      get: function get() {
        return this._firstVertex;
      },
      set: function set(first) {
        this._firstVertex = first;
      }
      /**
       * @en Get current index count.
       * @zh 索引数量。
       */

    }, {
      key: "indexCount",
      get: function get() {
        return this._indexCount;
      },
      set: function set(count) {
        this._indexCount = count;
      }
      /**
       * @en Get starting index.
       * @zh 起始索引。
       */

    }, {
      key: "firstIndex",
      get: function get() {
        return this._firstIndex;
      },
      set: function set(first) {
        this._firstIndex = first;
      }
      /**
       * @en Get current vertex offset.
       * @zh 顶点偏移量。
       */

    }, {
      key: "vertexOffset",
      get: function get() {
        return this._vertexOffset;
      },
      set: function set(offset) {
        this._vertexOffset = offset;
      }
      /**
       * @en Get current instance count.
       * @zh 实例数量。
       */

    }, {
      key: "instanceCount",
      get: function get() {
        return this._instanceCount;
      },
      set: function set(count) {
        this._instanceCount = count;
      }
      /**
       * @en Get starting instance.
       * @zh 起始实例。
       */

    }, {
      key: "firstInstance",
      get: function get() {
        return this._firstInstance;
      },
      set: function set(first) {
        this._firstInstance = first;
      }
      /**
       * @en Is the assembler an indirect command?
       * @zh 是否间接绘制。
       */

    }, {
      key: "isIndirect",
      get: function get() {
        return this._isIndirect;
      }
      /**
       * @en Get the indirect buffer, if present.
       * @zh 间接绘制缓冲。
       */

    }, {
      key: "indirectBuffer",
      get: function get() {
        return this._indirectBuffer;
      }
    }]);

    function GFXInputAssembler(device) {
      var _this;

      _classCallCheck(this, GFXInputAssembler);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(GFXInputAssembler).call(this, _define.GFXObjectType.INPUT_ASSEMBLER));
      _this._device = void 0;
      _this._attributes = [];
      _this._vertexBuffers = [];
      _this._indexBuffer = null;
      _this._vertexCount = 0;
      _this._firstVertex = 0;
      _this._indexCount = 0;
      _this._firstIndex = 0;
      _this._vertexOffset = 0;
      _this._instanceCount = 0;
      _this._firstInstance = 0;
      _this._isIndirect = false;
      _this._indirectBuffer = null;
      _this._device = device;
      return _this;
    }

    _createClass(GFXInputAssembler, [{
      key: "getVertexBuffer",

      /**
       * @en Get the specified vertex buffer.
       * @zh 获取顶点缓冲。
       * @param stream The stream index of the vertex buffer.
       */
      value: function getVertexBuffer() {
        var stream = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

        if (stream < this._vertexBuffers.length) {
          return this._vertexBuffers[stream];
        } else {
          return null;
        }
      }
    }]);

    return GFXInputAssembler;
  }(_define.GFXObject);

  _exports.GFXInputAssembler = GFXInputAssembler;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,