(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./3d/builtin/index.js", "./memop/index.js", "./pipeline/render-view.js", "./renderer/index.js", "./renderer/data-pool-manager.js", "./renderer/scene/light.js", "./renderer/scene/render-scene.js", "./renderer/ui/ui.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./3d/builtin/index.js"), require("./memop/index.js"), require("./pipeline/render-view.js"), require("./renderer/index.js"), require("./renderer/data-pool-manager.js"), require("./renderer/scene/light.js"), require("./renderer/scene/render-scene.js"), require("./renderer/ui/ui.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.index, global.renderView, global.index, global.dataPoolManager, global.light, global.renderScene, global.ui);
    global.root = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _index2, _renderView, _index3, _dataPoolManager, _light, _renderScene, _ui) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Root = _exports._createViewFun = _exports._createSceneFun = void 0;

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var _createSceneFun;

  _exports._createSceneFun = _createSceneFun;

  var _createViewFun;
  /**
   * @zh
   * Root描述信息
   */


  _exports._createViewFun = _createViewFun;

  /**
   * @zh
   * Root类
   */
  var Root = /*#__PURE__*/function () {
    _createClass(Root, [{
      key: "device",

      /**
       * @zh
       * GFX设备
       */
      get: function get() {
        return this._device;
      }
      /**
       * @zh
       * 主窗口
       */

    }, {
      key: "mainWindow",
      get: function get() {
        return this._mainWindow;
      }
      /**
       * @zh
       * 当前窗口
       */

    }, {
      key: "curWindow",
      set: function set(window) {
        this._curWindow = window;
      },
      get: function get() {
        return this._curWindow;
      }
      /**
       * @zh
       * 临时窗口（用于数据传输）
       */

    }, {
      key: "tempWindow",
      set: function set(window) {
        this._tempWindow = window;
      },
      get: function get() {
        return this._tempWindow;
      }
      /**
       * @zh
       * 窗口列表
       */

    }, {
      key: "windows",
      get: function get() {
        return this._windows;
      }
      /**
       * @zh
       * 渲染管线
       */

    }, {
      key: "pipeline",
      get: function get() {
        return this._pipeline;
      }
      /**
       * @zh
       * UI实例
       */

    }, {
      key: "ui",
      get: function get() {
        return this._ui;
      }
      /**
       * @zh
       * 场景列表
       */

    }, {
      key: "scenes",
      get: function get() {
        return this._scenes;
      }
      /**
       * @zh
       * 渲染视图列表
       */

    }, {
      key: "views",
      get: function get() {
        return this._views;
      }
      /**
       * @zh
       * 累计时间（秒）
       */

    }, {
      key: "cumulativeTime",
      get: function get() {
        return this._time;
      }
      /**
       * @zh
       * 帧时间（秒）
       */

    }, {
      key: "frameTime",
      get: function get() {
        return this._frameTime;
      }
      /**
       * @zh
       * 一秒内的累计帧数
       */

    }, {
      key: "frameCount",
      get: function get() {
        return this._frameCount;
      }
      /**
       * @zh
       * 每秒帧率
       */

    }, {
      key: "fps",
      get: function get() {
        return this._fps;
      }
      /**
       * @zh
       * 每秒固定帧率
       */

    }, {
      key: "fixedFPS",
      set: function set(fps) {
        if (fps > 0) {
          this._fixedFPS = fps;
          this._fixedFPSFrameTime = 1000.0 / fps;
        } else {
          this._fixedFPSFrameTime = 0;
        }
      },
      get: function get() {
        return this._fixedFPS;
      }
    }, {
      key: "dataPoolManager",
      get: function get() {
        return this._dataPoolMgr;
      }
    }]);

    /**
     * 构造函数
     * @param device GFX设备
     */
    function Root(device) {
      _classCallCheck(this, Root);

      this._createSceneFun = void 0;
      this._createViewFun = void 0;
      this._device = void 0;
      this._windows = [];
      this._mainWindow = null;
      this._curWindow = null;
      this._tempWindow = null;
      this._pipeline = null;
      this._ui = null;
      this._dataPoolMgr = void 0;
      this._scenes = [];
      this._views = [];
      this._modelPools = new Map();
      this._cameraPool = null;
      this._lightPools = new Map();
      this._time = 0;
      this._frameTime = 0;
      this._fpsTime = 0;
      this._frameCount = 0;
      this._fps = 0;
      this._fixedFPS = 0;
      this._fixedFPSFrameTime = 0;
      this._device = device;
      this._dataPoolMgr = new _dataPoolManager.DataPoolManager(device);

      _renderScene.RenderScene.registerCreateFunc(this);

      _renderView.RenderView.registerCreateFunc(this);

      this._cameraPool = new _index2.Pool(function () {
        return new _index3.Camera();
      }, 4);
    }
    /**
     * @zh
     * 初始化函数
     * @param info Root描述信息
     */


    _createClass(Root, [{
      key: "initialize",
      value: function initialize(info) {
        var _this = this;

        if (!this._device.mainWindow) {
          return false;
        }

        this._mainWindow = this._device.mainWindow;
        this._curWindow = this._mainWindow;

        _index.builtinResMgr.initBuiltinRes(this._device);

        cc.view.on('design-resolution-changed', function () {
          var width = cc.game.canvas.width;
          var height = cc.game.canvas.height;

          _this.resize(width, height);
        }, this);
        return true;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.destroyViews();
        this.destroyScenes();

        if (this._pipeline) {
          this._pipeline.destroy();

          this._pipeline = null;
        }

        if (this._ui) {
          this._ui.destroy();

          this._ui = null;
        }

        this._curWindow = null;
        this._mainWindow = null;
        this.dataPoolManager.clear();
      }
      /**
       * @zh
       * 重置大小
       * @param width 屏幕宽度
       * @param height 屏幕高度
       */

    }, {
      key: "resize",
      value: function resize(width, height) {
        // const w = width / cc.view._devicePixelRatio;
        // const h = height / cc.view._devicePixelRatio;
        this._device.resize(width, height);

        this._mainWindow.resize(width, height);

        var _iterator = _createForOfIteratorHelper(this._windows),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var window = _step.value;

            if (!window.isOffscreen) {
              window.resize(width, height);
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        if (this._pipeline) {
          this._pipeline.resize(width, height);
        }

        var _iterator2 = _createForOfIteratorHelper(this._views),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var view = _step2.value;

            if (view.camera.isWindowSize) {
              view.camera.resize(width, height);
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
    }, {
      key: "setRenderPipeline",
      value: function setRenderPipeline(rppl) {
        this._pipeline = rppl;

        if (!this._pipeline.activate(this)) {
          return false;
        }

        this._ui = new _ui.UI(this);

        if (!this._ui.initialize()) {
          this.destroy();
          return false;
        }

        return true;
      }
      /**
       * @zh
       * 激活指定窗口为当前窗口
       * @param window GFX窗口
       */

    }, {
      key: "activeWindow",
      value: function activeWindow(window) {
        this._curWindow = window;
      }
      /**
       * @zh
       * 重置累计时间
       */

    }, {
      key: "resetCumulativeTime",
      value: function resetCumulativeTime() {
        this._time = 0;
      }
      /**
       * @zh
       * 每帧执行函数
       * @param deltaTime 间隔时间
       */

    }, {
      key: "frameMove",
      value: function frameMove(deltaTime) {
        this._frameTime = deltaTime;
        /*
        if (this._fixedFPSFrameTime > 0) {
              const elapsed = this._frameTime * 1000.0;
            if (this._fixedFPSFrameTime > elapsed) {
                // tslint:disable-next-line: only-arrow-functions
                setTimeout(function () {}, this._fixedFPSFrameTime - elapsed);
            }
        }
        */

        ++this._frameCount;
        this._time += this._frameTime;
        this._fpsTime += this._frameTime;

        if (this._fpsTime > 1.0) {
          this._fps = this._frameCount;
          this._frameCount = 0;
          this._fpsTime = 0.0;
        }

        var views = this._views;

        for (var i = 0; i < views.length; i++) {
          var view = views[i];

          if (view.isEnable && view.window && (view.window.isOffscreen || !view.window.isOffscreen && view.window === this._curWindow) && this._pipeline) {
            this._pipeline.render(view);
          }
        } // this._device.present();

      }
      /**
       * @zh
       * 创建窗口
       * @param info GFX窗口描述信息
       */

    }, {
      key: "createWindow",
      value: function createWindow(info) {
        if (this._device) {
          var window = this._device.createWindow(info);

          if (window) {
            this._windows.push(window);

            return window;
          }
        }

        return null;
      }
      /**
       * @zh
       * 销毁指定的窗口
       * @param window GFX窗口
       */

    }, {
      key: "destroyWindow",
      value: function destroyWindow(window) {
        for (var i = 0; i < this._windows.length; ++i) {
          if (this._windows[i] === window) {
            window.destroy();

            this._windows.splice(i, 1);

            return;
          }
        }
      }
      /**
       * @zh
       * 销毁全部窗口
       */

    }, {
      key: "destroyWindows",
      value: function destroyWindows() {
        var _iterator3 = _createForOfIteratorHelper(this._windows),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var window = _step3.value;
            window.destroy();
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        this._windows = [];
      }
      /**
       * @zh
       * 创建渲染场景
       * @param info 渲染场景描述信息
       */

    }, {
      key: "createScene",
      value: function createScene(info) {
        var scene = this._createSceneFun(this);

        scene.initialize(info);

        this._scenes.push(scene);

        return scene;
      }
      /**
       * @zh
       * 销毁指定的渲染场景
       * @param scene 渲染场景
       */

    }, {
      key: "destroyScene",
      value: function destroyScene(scene) {
        for (var i = 0; i < this._scenes.length; ++i) {
          if (this._scenes[i] === scene) {
            scene.destroy();

            this._scenes.splice(i, 1);

            return;
          }
        }
      }
      /**
       * @zh
       * 销毁全部场景
       */

    }, {
      key: "destroyScenes",
      value: function destroyScenes() {
        var _iterator4 = _createForOfIteratorHelper(this._scenes),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var scene = _step4.value;
            scene.destroy();
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }

        this._scenes = [];
      }
      /**
       * @zh
       * 创建渲染视图
       * @param info 渲染视图描述信息
       */

    }, {
      key: "createView",
      value: function createView(info) {
        var view = this._createViewFun(this, info.camera);

        view.initialize(info); // view.camera.resize(cc.game.canvas.width, cc.game.canvas.height);

        this._views.push(view);

        this.sortViews();
        return view;
      }
      /**
       * @zh
       * 销毁指定的渲染视图
       * @param view 渲染视图
       */

    }, {
      key: "destroyView",
      value: function destroyView(view) {
        for (var i = 0; i < this._views.length; ++i) {
          if (this._views[i] === view) {
            this._views.splice(i, 1);

            view.destroy();
            return;
          }
        }
      }
      /**
       * @zh
       * 销毁全部渲染视图
       */

    }, {
      key: "destroyViews",
      value: function destroyViews() {
        var _iterator5 = _createForOfIteratorHelper(this._views),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var view = _step5.value;
            view.destroy();
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }

        this._views = [];
      }
    }, {
      key: "createModel",
      value: function createModel(mClass) {
        var p = this._modelPools.get(mClass);

        if (!p) {
          this._modelPools.set(mClass, new _index2.Pool(function () {
            return new mClass();
          }, 10));

          p = this._modelPools.get(mClass);
        }

        return p.alloc();
      }
    }, {
      key: "destroyModel",
      value: function destroyModel(m) {
        var p = this._modelPools.get(m.constructor);

        if (p) {
          p.free(m);
          m.destroy();

          if (m.scene) {
            m.scene.removeModel(m);
          }
        } else {
          console.warn("'".concat(m.constructor.name, "'is not in the model pool and cannot be destroyed by destroyModel."));
        }
      }
    }, {
      key: "createCamera",
      value: function createCamera() {
        return this._cameraPool.alloc();
      }
    }, {
      key: "destroyCamera",
      value: function destroyCamera(c) {
        this._cameraPool.free(c);

        c.destroy();

        if (c.scene) {
          c.scene.removeCamera(c);
        }

        c.isWindowSize = true;
      }
    }, {
      key: "createLight",
      value: function createLight(lClass) {
        var l = this._lightPools.get(lClass);

        if (!l) {
          this._lightPools.set(lClass, new _index2.Pool(function () {
            return new lClass();
          }, 4));

          l = this._lightPools.get(lClass);
        }

        return l.alloc();
      }
    }, {
      key: "destroyLight",
      value: function destroyLight(l) {
        var p = this._lightPools.get(l.constructor);

        l.destroy();

        if (p) {
          p.free(l);

          if (l.scene) {
            switch (l.type) {
              case _light.LightType.SPHERE:
                l.scene.removeSphereLight(l);
                break;

              case _light.LightType.SPOT:
                l.scene.removeSpotLight(l);
                break;
            }
          }
        }
      }
    }, {
      key: "sortViews",
      value: function sortViews() {
        this._views.sort(function (a, b) {
          return a.priority - b.priority;
        });
      }
    }]);

    return Root;
  }();

  _exports.Root = Root;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,