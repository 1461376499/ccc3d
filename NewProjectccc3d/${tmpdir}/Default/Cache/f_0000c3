(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../data/class-decorator.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../data/class-decorator.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.classDecorator);
    global.componentEventHandler = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _classDecorator) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EventHandler = void 0;

  var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  /**
   * @zh
   * “EventHandler” 类用来设置场景中的事件回调，该类允许用户设置回调目标节点，目标组件名，组件方法名，并可通过 emit 方法调用目标函数。
   * 可通过 cc.Component.EventHandler 获得该事件。
   *
   * @example
   * ```typescript
   *
   * var eventHandler = new cc.Component.EventHandler();
   * eventHandler.target = newTarget;
   * eventHandler.component = "MainMenu";
   * eventHandler.handler = "OnClick";
   * eventHandler.customEventData = "my data";
   * ```
   */
  var EventHandler = (_dec = (0, _classDecorator.ccclass)('cc.ClickEvent'), _dec2 = (0, _classDecorator.property)(cc.Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function () {
    function EventHandler() {
      _classCallCheck(this, EventHandler);

      _initializerDefineProperty(this, "target", _descriptor, this);

      _initializerDefineProperty(this, "component", _descriptor2, this);

      _initializerDefineProperty(this, "_componentId", _descriptor3, this);

      _initializerDefineProperty(this, "handler", _descriptor4, this);

      _initializerDefineProperty(this, "customEventData", _descriptor5, this);
    }

    _createClass(EventHandler, [{
      key: "emit",

      /**
       * @zh
       * 触发目标组件上的指定 handler 函数，该参数是回调函数的参数值（可不填）。
       *
       * @param params - 派发参数数组。
       * @example
       * ```typescript
       * var eventHandler = new cc.Component.EventHandler();
       * eventHandler.target = newTarget;
       * eventHandler.component = "MainMenu";
       * eventHandler.handler = "OnClick"
       * eventHandler.emit(["param1", "param2", ....]);
       * ```
       */
      value: function emit(params) {
        var target = this.target;

        if (!cc.isValid(target)) {
          return;
        }

        this._genCompIdIfNeeded();

        var compType = cc.js._getClassById(this._componentId);

        var comp = target.getComponent(compType);

        if (!cc.isValid(comp)) {
          return;
        }

        var handler = comp[this.handler];

        if (typeof handler !== 'function') {
          return;
        }

        if (this.customEventData != null && this.customEventData !== '') {
          params = params.slice();
          params.push(this.customEventData);
        }

        handler.apply(comp, params);
      }
    }, {
      key: "_compName2Id",
      value: function _compName2Id(compName) {
        var comp = cc.js.getClassByName(compName);
        return cc.js._getClassId(comp);
      }
    }, {
      key: "_compId2Name",
      value: function _compId2Name(compId) {
        var comp = cc.js._getClassById(compId);

        return cc.js.getClassName(comp);
      } // to be deprecated in the future

    }, {
      key: "_genCompIdIfNeeded",
      value: function _genCompIdIfNeeded() {
        if (!this._componentId) {
          this._componentName = this.component;
          this.component = '';
        }
      }
    }, {
      key: "_componentName",
      get: function get() {
        this._genCompIdIfNeeded();

        return this._compId2Name(this._componentId);
      },
      set: function set(value) {
        this._componentId = this._compName2Id(value);
      }
      /**
       * @zh
       * 组件事件派发。
       *
       * @param events - 需要派发的组件事件列表。
       * @param args - 派发参数数组。
       */

    }], [{
      key: "emitEvents",
      value: function emitEvents(events) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        for (var i = 0, l = events.length; i < l; i++) {
          var event = events[i];

          if (!(event instanceof EventHandler)) {
            continue;
          }

          event.emit(args);
        }
      }
      /**
       * @zh
       * 目标节点。
       */

    }]);

    return EventHandler;
  }(), _temp), (_applyDecoratedDescriptor(_class2.prototype, "_componentName", [_classDecorator.property], Object.getOwnPropertyDescriptor(_class2.prototype, "_componentName"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "target", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "component", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return '';
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_componentId", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return '';
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "handler", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return '';
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "customEventData", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return '';
    }
  })), _class2)) || _class);
  _exports.EventHandler = EventHandler;
  cc.Component.EventHandler = EventHandler;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,