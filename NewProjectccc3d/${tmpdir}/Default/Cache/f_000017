(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../buffer.js", "../define.js", "./webgl-commands.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../buffer.js"), require("../define.js"), require("./webgl-commands.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.buffer, global.define, global.webglCommands);
    global.webglBuffer = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _buffer, _define, _webglCommands) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.WebGLGFXBuffer = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  var WebGLGFXBuffer = /*#__PURE__*/function (_GFXBuffer) {
    _inherits(WebGLGFXBuffer, _GFXBuffer);

    function WebGLGFXBuffer() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, WebGLGFXBuffer);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(WebGLGFXBuffer)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this._gpuBuffer = null;
      _this._uniformBuffer = null;
      return _this;
    }

    _createClass(WebGLGFXBuffer, [{
      key: "initialize",
      value: function initialize(info) {
        this._usage = info.usage;
        this._memUsage = info.memUsage;
        this._size = info.size;
        this._stride = Math.max(info.stride || this._size, 1);
        this._count = this._size / this._stride;
        this._flags = info.flags !== undefined ? info.flags : _define.GFXBufferFlagBit.NONE;

        if (this._usage & _define.GFXBufferUsageBit.INDIRECT) {
          this._indirectBuffer = {
            drawInfos: []
          };
        }

        if (this._flags & _define.GFXBufferFlagBit.BAKUP_BUFFER) {
          this._bufferView = new Uint8Array(this._size);
          this._device.memoryStatus.bufferSize += this._size;
        }

        if (this._usage & _define.GFXBufferUsageBit.UNIFORM && this._size > 0) {
          this._uniformBuffer = new Uint8Array(this._size);
        }

        this._gpuBuffer = {
          usage: info.usage,
          memUsage: info.memUsage,
          size: info.size,
          stride: this._stride,
          buffer: this._bufferView,
          vf32: null,
          indirects: [],
          glTarget: 0,
          glBuffer: null
        };

        if (info.usage & _define.GFXBufferUsageBit.INDIRECT) {
          this._gpuBuffer.indirects = this._indirectBuffer.drawInfos;
        }

        if (this._usage & _define.GFXBufferUsageBit.UNIFORM) {
          this._gpuBuffer.buffer = this._uniformBuffer;
        }

        (0, _webglCommands.WebGLCmdFuncCreateBuffer)(this._device, this._gpuBuffer);
        this._device.memoryStatus.bufferSize += this._size;
        this._status = _define.GFXStatus.SUCCESS;
        return true;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        if (this._gpuBuffer) {
          (0, _webglCommands.WebGLCmdFuncDestroyBuffer)(this._device, this._gpuBuffer);
          this._device.memoryStatus.bufferSize -= this._size;
          this._gpuBuffer = null;
        }

        this._bufferView = null;
        this._status = _define.GFXStatus.UNREADY;
      }
    }, {
      key: "resize",
      value: function resize(size) {
        var oldSize = this._size;

        if (oldSize === size) {
          return;
        }

        this._size = size;
        this._count = this._size / this._stride;

        if (this._bufferView) {
          var oldView = this._bufferView;
          this._bufferView = new Uint8Array(this._size);

          this._bufferView.set(oldView);

          this._device.memoryStatus.bufferSize -= oldSize;
          this._device.memoryStatus.bufferSize += size;
        }

        if (this._uniformBuffer) {
          this._uniformBuffer = new Uint8Array(size);
        }

        if (this._gpuBuffer) {
          if (this._uniformBuffer) {
            this._gpuBuffer.buffer = this._uniformBuffer;
          } else if (this._bufferView) {
            this._gpuBuffer.buffer = this._bufferView;
          }

          this._gpuBuffer.size = size;

          if (size > 0) {
            (0, _webglCommands.WebGLCmdFuncResizeBuffer)(this._device, this._gpuBuffer);
            this._device.memoryStatus.bufferSize -= oldSize;
            this._device.memoryStatus.bufferSize += size;
          }
        }
      }
    }, {
      key: "update",
      value: function update(buffer, offset, size) {
        var buffSize;

        if (size !== undefined) {
          buffSize = size;
        } else if (this._usage & _define.GFXBufferUsageBit.INDIRECT) {
          buffSize = 0;
        } else {
          buffSize = buffer.byteLength;
        }

        if (this._bufferView && buffer !== this._bufferView.buffer) {
          var view = new Uint8Array(buffer, 0, size);

          this._bufferView.set(view, offset);
        }

        (0, _webglCommands.WebGLCmdFuncUpdateBuffer)(this._device, this._gpuBuffer, buffer, offset || 0, buffSize);
      }
    }, {
      key: "gpuBuffer",
      get: function get() {
        return this._gpuBuffer;
      }
    }]);

    return WebGLGFXBuffer;
  }(_buffer.GFXBuffer);

  _exports.WebGLGFXBuffer = WebGLGFXBuffer;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,