(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../core/math/index.js", "./builtin-shared-body.js", "../utils/array-collision-matrix.js", "../../core/geometry/index.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../core/math/index.js"), require("./builtin-shared-body.js"), require("../utils/array-collision-matrix.js"), require("../../core/geometry/index.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.builtinSharedBody, global.arrayCollisionMatrix, global.index);
    global.builtinWorld = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _builtinSharedBody, _arrayCollisionMatrix, _index2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.BuiltInWorld = void 0;

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var hitPoint = new _index.Vec3();
  var TriggerEventObject = {
    type: 'onTriggerEnter',
    selfCollider: null,
    otherCollider: null
  };
  /**
   * Built-in collision system, intended for use as a
   * efficient discrete collision detector,
   * not a full physical simulator
   */

  var BuiltInWorld = /*#__PURE__*/function () {
    function BuiltInWorld() {
      _classCallCheck(this, BuiltInWorld);

      this.shapeArr = [];
      this.bodies = [];
      this._shapeArrPrev = [];
      this._collisionMatrix = new _arrayCollisionMatrix.ArrayCollisionMatrix();
      this._collisionMatrixPrev = new _arrayCollisionMatrix.ArrayCollisionMatrix();
    }

    _createClass(BuiltInWorld, [{
      key: "setGravity",
      value: function setGravity(v) {}
    }, {
      key: "setAllowSleep",
      value: function setAllowSleep(v) {}
    }, {
      key: "setDefaultMaterial",
      value: function setDefaultMaterial(v) {}
    }, {
      key: "step",
      value: function step(deltaTime) {
        // store and reset collision array
        var tmp = this._shapeArrPrev;
        this._shapeArrPrev = this.shapeArr;
        this.shapeArr = tmp;
        this.shapeArr.length = 0; // collision detection

        for (var i = 0; i < this.bodies.length; i++) {
          var bodyA = this.bodies[i];

          for (var j = i + 1; j < this.bodies.length; j++) {
            var bodyB = this.bodies[j]; // first, Check collision filter masks

            if ((bodyA.collisionFilterGroup & bodyB.collisionFilterMask) === 0 || (bodyB.collisionFilterGroup & bodyA.collisionFilterMask) === 0) {
              continue;
            }

            bodyA.intersects(bodyB);
          }
        }
      }
    }, {
      key: "syncSceneToPhysics",
      value: function syncSceneToPhysics() {
        for (var i = 0; i < this.bodies.length; i++) {
          this.bodies[i].syncSceneToPhysics();
        }
      }
    }, {
      key: "emitEvents",
      value: function emitEvents() {
        this.emitTriggerEvent();
      }
    }, {
      key: "raycastClosest",
      value: function raycastClosest(worldRay, options, out) {
        var tmp_d = Infinity;
        var max_d = options.maxDistance;
        var mask = options.mask;

        for (var i = 0; i < this.bodies.length; i++) {
          var body = this.bodies[i];
          if (!(body.collisionFilterGroup & mask)) continue;

          for (var _i = 0; _i < body.shapes.length; _i++) {
            var shape = body.shapes[_i];

            var distance = _index2.intersect.resolve(worldRay, shape.worldShape);

            if (distance == 0 || distance > max_d) {
              continue;
            }

            if (tmp_d > distance) {
              tmp_d = distance;

              _index.Vec3.normalize(hitPoint, worldRay.d);

              _index.Vec3.scaleAndAdd(hitPoint, worldRay.o, hitPoint, distance);

              out._assign(hitPoint, distance, shape.collider, _index.Vec3.ZERO);
            }
          }
        }

        return !(tmp_d == Infinity);
      }
    }, {
      key: "raycast",
      value: function raycast(worldRay, options, pool, results) {
        var max_d = options.maxDistance;
        var mask = options.mask;

        for (var i = 0; i < this.bodies.length; i++) {
          var body = this.bodies[i];
          if (!(body.collisionFilterGroup & mask)) continue;

          for (var _i2 = 0; _i2 < body.shapes.length; _i2++) {
            var shape = body.shapes[_i2];

            var distance = _index2.intersect.resolve(worldRay, shape.worldShape);

            if (distance == 0 || distance > max_d) {
              continue;
            } else {
              var r = pool.add();
              worldRay.computeHit(hitPoint, distance);

              r._assign(hitPoint, distance, shape.collider, _index.Vec3.ZERO);

              results.push(r);
            }
          }
        }

        return results.length > 0;
      }
    }, {
      key: "getSharedBody",
      value: function getSharedBody(node) {
        return _builtinSharedBody.BuiltinSharedBody.getSharedBody(node, this);
      }
    }, {
      key: "addSharedBody",
      value: function addSharedBody(body) {
        var index = this.bodies.indexOf(body);

        if (index < 0) {
          this.bodies.push(body);
        }
      }
    }, {
      key: "removeSharedBody",
      value: function removeSharedBody(body) {
        var index = this.bodies.indexOf(body);

        if (index >= 0) {
          this.bodies.splice(index, 1);
        }
      }
    }, {
      key: "emitTriggerEvent",
      value: function emitTriggerEvent() {
        var shapeA;
        var shapeB;

        for (var i = 0; i < this.shapeArr.length; i += 2) {
          shapeA = this.shapeArr[i];
          shapeB = this.shapeArr[i + 1];
          TriggerEventObject.selfCollider = shapeA.collider;
          TriggerEventObject.otherCollider = shapeB.collider;

          this._collisionMatrix.set(shapeA.id, shapeB.id, true);

          if (this._collisionMatrixPrev.get(shapeA.id, shapeB.id)) {
            // emit stay
            TriggerEventObject.type = 'onTriggerStay';
          } else {
            // first trigger, emit enter
            TriggerEventObject.type = 'onTriggerEnter';
          }

          if (shapeA.collider) {
            shapeA.collider.emit(TriggerEventObject.type, TriggerEventObject);
          }

          TriggerEventObject.selfCollider = shapeB.collider;
          TriggerEventObject.otherCollider = shapeA.collider;

          if (shapeB.collider) {
            shapeB.collider.emit(TriggerEventObject.type, TriggerEventObject);
          }
        }

        for (var _i3 = 0; _i3 < this._shapeArrPrev.length; _i3 += 2) {
          shapeA = this._shapeArrPrev[_i3];
          shapeB = this._shapeArrPrev[_i3 + 1];

          if (this._collisionMatrixPrev.get(shapeA.id, shapeB.id)) {
            if (!this._collisionMatrix.get(shapeA.id, shapeB.id)) {
              // emit exit
              TriggerEventObject.type = 'onTriggerExit';
              TriggerEventObject.selfCollider = shapeA.collider;
              TriggerEventObject.otherCollider = shapeB.collider;

              if (shapeA.collider) {
                shapeA.collider.emit(TriggerEventObject.type, TriggerEventObject);
              }

              TriggerEventObject.selfCollider = shapeB.collider;
              TriggerEventObject.otherCollider = shapeA.collider;

              if (shapeB.collider) {
                shapeB.collider.emit(TriggerEventObject.type, TriggerEventObject);
              }

              this._collisionMatrix.set(shapeA.id, shapeB.id, false);
            }
          }
        }

        var temp = this._collisionMatrixPrev.matrix;
        this._collisionMatrixPrev.matrix = this._collisionMatrix.matrix;
        this._collisionMatrix.matrix = temp;

        this._collisionMatrix.reset();
      }
    }, {
      key: "impl",
      get: function get() {
        return this;
      }
    }]);

    return BuiltInWorld;
  }();

  _exports.BuiltInWorld = BuiltInWorld;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,