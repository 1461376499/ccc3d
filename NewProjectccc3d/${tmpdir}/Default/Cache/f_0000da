(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../core/components/index.js", "../../core/data/class-decorator.js", "../../core/platform/index.js", "../../core/math/index.js", "../../core/value-types/enum.js", "../../core/math/utils.js", "./sprite-component.js", "../../core/default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../core/components/index.js"), require("../../core/data/class-decorator.js"), require("../../core/platform/index.js"), require("../../core/math/index.js"), require("../../core/value-types/enum.js"), require("../../core/math/utils.js"), require("./sprite-component.js"), require("../../core/default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.classDecorator, global.index, global.index, global._enum, global.utils, global.spriteComponent, global.defaultConstants);
    global.sliderComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _classDecorator, _index2, _index3, _enum, _utils, _spriteComponent, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SliderComponent = void 0;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class3, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  var _tempPos = new _index3.Vec3();
  /**
   * @en
   * The Slider Direction.
   *
   * @zh
   * 滑动器方向。
   */


  var Direction;

  (function (Direction) {
    Direction[Direction["Horizontal"] = 0] = "Horizontal";
    Direction[Direction["Vertical"] = 1] = "Vertical";
  })(Direction || (Direction = {}));

  (0, _enum.ccenum)(Direction);
  /**
   * @en
   * The Slider Control.
   *
   * @zh
   * 滑动器组件。
   */

  var SliderComponent = (_dec = (0, _classDecorator.ccclass)('cc.SliderComponent'), _dec2 = (0, _classDecorator.help)('i18n:cc.SliderComponent'), _dec3 = (0, _classDecorator.executionOrder)(110), _dec4 = (0, _classDecorator.menu)('UI/Slider'), _dec5 = (0, _classDecorator.property)({
    type: _spriteComponent.SpriteComponent,
    tooltip: '滑块按钮部件'
  }), _dec6 = (0, _classDecorator.property)({
    type: Direction,
    tooltip: '滑动方向'
  }), _dec7 = (0, _classDecorator.property)({
    slide: true,
    range: [0, 1, 0.01],
    tooltip: '当前进度值，该数值的区间是 0 - 1 之间。'
  }), _dec8 = (0, _classDecorator.property)({
    type: _index.EventHandler,
    tooltip: '滑动器组件事件回调函数'
  }), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Component) {
    _inherits(SliderComponent, _Component);

    function SliderComponent() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, SliderComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SliderComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _initializerDefineProperty(_this, "slideEvents", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_handle", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_direction", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_progress", _descriptor4, _assertThisInitialized(_this));

      _this._offset = new _index3.Vec3();
      _this._dragging = false;
      _this._touchHandle = false;
      _this._handlelocalPos = new _index3.Vec3();
      _this._touchPos = new _index3.Vec3();
      return _this;
    }

    _createClass(SliderComponent, [{
      key: "__preload",
      value: function __preload() {
        this._updateHandlePosition();
      } // 注册事件

    }, {
      key: "onEnable",
      value: function onEnable() {
        this._updateHandlePosition();

        this.node.on(_index2.SystemEventType.TOUCH_START, this._onTouchBegan, this);
        this.node.on(_index2.SystemEventType.TOUCH_MOVE, this._onTouchMoved, this);
        this.node.on(_index2.SystemEventType.TOUCH_END, this._onTouchEnded, this);
        this.node.on(_index2.SystemEventType.TOUCH_CANCEL, this._onTouchCancelled, this);

        if (this._handle && this._handle.isValid) {
          this._handle.node.on(_index2.SystemEventType.TOUCH_START, this._onHandleDragStart, this);

          this._handle.node.on(_index2.SystemEventType.TOUCH_MOVE, this._onTouchMoved, this);

          this._handle.node.on(_index2.SystemEventType.TOUCH_END, this._onTouchEnded, this);
        }
      }
    }, {
      key: "onDisable",
      value: function onDisable() {
        this.node.off(_index2.SystemEventType.TOUCH_START, this._onTouchBegan, this);
        this.node.off(_index2.SystemEventType.TOUCH_MOVE, this._onTouchMoved, this);
        this.node.off(_index2.SystemEventType.TOUCH_END, this._onTouchEnded, this);
        this.node.off(_index2.SystemEventType.TOUCH_CANCEL, this._onTouchCancelled, this);

        if (this._handle && this._handle.isValid) {
          this._handle.node.off(_index2.SystemEventType.TOUCH_START, this._onHandleDragStart, this);

          this._handle.node.off(_index2.SystemEventType.TOUCH_MOVE, this._onTouchMoved, this);

          this._handle.node.off(_index2.SystemEventType.TOUCH_END, this._onTouchEnded, this);
        }
      }
    }, {
      key: "_onHandleDragStart",
      value: function _onHandleDragStart(event) {
        if (!event || !this._handle || !this._handle.node._uiProps.uiTransformComp) {
          return;
        }

        this._dragging = true;
        this._touchHandle = true;
        var touhPos = event.touch.getUILocation();

        _index3.Vec3.set(this._touchPos, touhPos.x, touhPos.y, 0);

        this._handle.node._uiProps.uiTransformComp.convertToNodeSpaceAR(this._touchPos, this._offset);

        event.propagationStopped = true;
      }
    }, {
      key: "_onTouchBegan",
      value: function _onTouchBegan(event) {
        if (!this._handle || !event) {
          return;
        }

        this._dragging = true;

        if (!this._touchHandle) {
          this._handleSliderLogic(event.touch);
        }

        event.propagationStopped = true;
      }
    }, {
      key: "_onTouchMoved",
      value: function _onTouchMoved(event) {
        if (!this._dragging || !event) {
          return;
        }

        this._handleSliderLogic(event.touch);

        event.propagationStopped = true;
      }
    }, {
      key: "_onTouchEnded",
      value: function _onTouchEnded(event) {
        this._dragging = false;
        this._touchHandle = false;
        this._offset = new _index3.Vec3();

        if (event) {
          event.propagationStopped = true;
        }
      }
    }, {
      key: "_onTouchCancelled",
      value: function _onTouchCancelled(event) {
        this._dragging = false;

        if (event) {
          event.propagationStopped = true;
        }
      }
    }, {
      key: "_handleSliderLogic",
      value: function _handleSliderLogic(touch) {
        this._updateProgress(touch);

        this._emitSlideEvent();
      }
    }, {
      key: "_emitSlideEvent",
      value: function _emitSlideEvent() {
        _index.EventHandler.emitEvents(this.slideEvents, this);

        this.node.emit('slide', this);
      }
    }, {
      key: "_updateProgress",
      value: function _updateProgress(touch) {
        if (!this._handle || !touch) {
          return;
        }

        var touchPos = touch.getUILocation();

        _index3.Vec3.set(this._touchPos, touchPos.x, touchPos.y, 0);

        var localTouchPos = this.node._uiProps.uiTransformComp.convertToNodeSpaceAR(this._touchPos, _tempPos);

        if (this.direction === Direction.Horizontal) {
          this.progress = (0, _utils.clamp01)(0.5 + (localTouchPos.x - this._offset.x) / this.node.width);
        } else {
          this.progress = (0, _utils.clamp01)(0.5 + (localTouchPos.y - this._offset.y) / this.node.height);
        }
      }
    }, {
      key: "_updateHandlePosition",
      value: function _updateHandlePosition() {
        if (!this._handle) {
          return;
        }

        this._handlelocalPos.set(this._handle.node.getPosition());

        if (this._direction === Direction.Horizontal) {
          this._handlelocalPos.x = -this.node.width * this.node.anchorX + this.progress * this.node.width;
        } else {
          this._handlelocalPos.y = -this.node.height * this.node.anchorY + this.progress * this.node.height;
        }

        this._handle.node.setPosition(this._handlelocalPos);
      }
    }, {
      key: "_changeLayout",
      value: function _changeLayout() {
        var contentSize = this.node.getContentSize();
        this.node.setContentSize(contentSize.height, contentSize.width);

        if (this._handle) {
          var pos = this._handle.node.position;

          if (this._direction === Direction.Horizontal) {
            this._handle.node.setPosition(pos.x, 0, pos.z);
          } else {
            this._handle.node.setPosition(0, pos.y, pos.z);
          }

          this._updateHandlePosition();
        }
      }
    }, {
      key: "handle",

      /**
       * @en
       * The "handle" part of the slider.
       *
       * @zh
       * 滑动器滑块按钮部件。
       */
      get: function get() {
        return this._handle;
      },
      set: function set(value) {
        if (this._handle === value) {
          return;
        }

        this._handle = value;

        if (_defaultConstants.EDITOR && this._handle) {
          this._updateHandlePosition();
        }
      }
      /**
       * @en
       * The slider direction.
       *
       * @zh
       * 滑动器方向。
       */

    }, {
      key: "direction",
      get: function get() {
        return this._direction;
      },
      set: function set(value) {
        if (this._direction === value) {
          return;
        }

        this._direction = value;

        this._changeLayout();
      }
      /**
       * @en
       * The current progress of the slider. The valid value is between 0-1.
       *
       * @zh
       * 当前进度值，该数值的区间是 0-1 之间。
       */

    }, {
      key: "progress",
      get: function get() {
        return this._progress;
      },
      set: function set(value) {
        if (this._progress === value) {
          return;
        }

        this._progress = value;

        this._updateHandlePosition();
      }
    }]);

    return SliderComponent;
  }(_index.Component), _class3.Direction = Direction, _temp), (_applyDecoratedDescriptor(_class2.prototype, "handle", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "handle"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "direction", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "direction"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "progress", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "progress"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "slideEvents", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return [];
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_handle", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_direction", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return Direction.Horizontal;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "_progress", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0.1;
    }
  })), _class2)) || _class) || _class) || _class) || _class);
  _exports.SliderComponent = SliderComponent;
  cc.SliderComponent = SliderComponent;
  /**
   * @zh
   * 注意：此事件是从该组件所属的 Node 上面派发出来的，需要用 node.on 来监听。
   * @event slide
   * @param {Event.EventCustom} event
   * @param {Slider} slider - The slider component.
   */
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,