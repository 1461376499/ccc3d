(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../core/3d/framework/renderable-component.js", "../core/assets/material.js", "../core/data/class-decorator.js", "../core/math/index.js", "../core/math/bits.js", "./animator/color-overtime.js", "./animator/curve-range.js", "./animator/force-overtime.js", "./animator/gradient-range.js", "./animator/limit-velocity-overtime.js", "./animator/rotation-overtime.js", "./animator/size-overtime.js", "./animator/texture-animation.js", "./animator/velocity-overtime.js", "./burst.js", "./emitter/shape-module.js", "./enum.js", "./particle-general-function.js", "./renderer/particle-system-renderer-data.js", "./renderer/trail.js", "./particle.js", "../core/default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../core/3d/framework/renderable-component.js"), require("../core/assets/material.js"), require("../core/data/class-decorator.js"), require("../core/math/index.js"), require("../core/math/bits.js"), require("./animator/color-overtime.js"), require("./animator/curve-range.js"), require("./animator/force-overtime.js"), require("./animator/gradient-range.js"), require("./animator/limit-velocity-overtime.js"), require("./animator/rotation-overtime.js"), require("./animator/size-overtime.js"), require("./animator/texture-animation.js"), require("./animator/velocity-overtime.js"), require("./burst.js"), require("./emitter/shape-module.js"), require("./enum.js"), require("./particle-general-function.js"), require("./renderer/particle-system-renderer-data.js"), require("./renderer/trail.js"), require("./particle.js"), require("../core/default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.renderableComponent, global.material, global.classDecorator, global.index, global.bits, global.colorOvertime, global.curveRange, global.forceOvertime, global.gradientRange, global.limitVelocityOvertime, global.rotationOvertime, global.sizeOvertime, global.textureAnimation, global.velocityOvertime, global.burst, global.shapeModule, global._enum, global.particleGeneralFunction, global.particleSystemRendererData, global.trail, global.particle, global.defaultConstants);
    global.particleSystemComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _renderableComponent, _material, _classDecorator, _index, _bits, _colorOvertime, _curveRange, _forceOvertime, _gradientRange, _limitVelocityOvertime, _rotationOvertime, _sizeOvertime, _textureAnimation, _velocityOvertime, _burst, _shapeModule, _enum, _particleGeneralFunction, _particleSystemRendererData, _trail, _particle, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ParticleSystemComponent = void 0;
  _colorOvertime = _interopRequireDefault(_colorOvertime);
  _curveRange = _interopRequireWildcard(_curveRange);
  _forceOvertime = _interopRequireDefault(_forceOvertime);
  _gradientRange = _interopRequireDefault(_gradientRange);
  _limitVelocityOvertime = _interopRequireDefault(_limitVelocityOvertime);
  _rotationOvertime = _interopRequireDefault(_rotationOvertime);
  _sizeOvertime = _interopRequireDefault(_sizeOvertime);
  _textureAnimation = _interopRequireDefault(_textureAnimation);
  _velocityOvertime = _interopRequireDefault(_velocityOvertime);
  _burst = _interopRequireDefault(_burst);
  _shapeModule = _interopRequireDefault(_shapeModule);
  _particleSystemRendererData = _interopRequireDefault(_particleSystemRendererData);
  _trail = _interopRequireDefault(_trail);

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _dec31, _dec32, _dec33, _dec34, _dec35, _dec36, _dec37, _dec38, _dec39, _dec40, _dec41, _dec42, _dec43, _dec44, _dec45, _dec46, _dec47, _dec48, _dec49, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, _descriptor31, _descriptor32, _descriptor33, _descriptor34, _descriptor35, _temp;

  function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function set(target, property, value, receiver) { if (typeof Reflect !== "undefined" && Reflect.set) { set = Reflect.set; } else { set = function set(target, property, value, receiver) { var base = _superPropBase(target, property); var desc; if (base) { desc = Object.getOwnPropertyDescriptor(base, property); if (desc.set) { desc.set.call(receiver, value); return true; } else if (!desc.writable) { return false; } } desc = Object.getOwnPropertyDescriptor(receiver, property); if (desc) { if (!desc.writable) { return false; } desc.value = value; Object.defineProperty(receiver, property, desc); } else { _defineProperty(receiver, property, value); } return true; }; } return set(target, property, value, receiver); }

  function _set(target, property, value, receiver, isStrict) { var s = set(target, property, value, receiver || target); if (!s && isStrict) { throw new Error('failed to set property'); } return value; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  var _world_mat = new _index.Mat4();

  var _world_rol = new _index.Quat();

  var ParticleSystemComponent = (_dec = (0, _classDecorator.ccclass)('cc.ParticleSystemComponent'), _dec2 = (0, _classDecorator.help)('i18n:cc.ParticleSystemComponent'), _dec3 = (0, _classDecorator.menu)('Components/ParticleSystem'), _dec4 = (0, _classDecorator.executionOrder)(99), _dec5 = (0, _classDecorator.property)({
    displayOrder: 1,
    tooltip: '粒子系统能生成的最大粒子数量'
  }), _dec6 = (0, _classDecorator.property)({
    type: _gradientRange.default,
    displayOrder: 8,
    tooltip: '粒子初始颜色'
  }), _dec7 = (0, _classDecorator.property)({
    type: _enum.Space,
    displayOrder: 9,
    tooltip: '选择缩放坐标系'
  }), _dec8 = (0, _classDecorator.property)({
    displayOrder: 10,
    tooltip: '粒子初始大小'
  }), _dec9 = (0, _classDecorator.property)({
    type: _curveRange.default,
    displayOrder: 10,
    formerlySerializedAs: 'startSize',
    tooltip: '粒子初始大小'
  }), _dec10 = (0, _classDecorator.property)({
    type: _curveRange.default,
    displayOrder: 10,
    tooltip: '粒子初始大小'
  }), _dec11 = (0, _classDecorator.property)({
    type: _curveRange.default,
    displayOrder: 10,
    tooltip: '粒子初始大小'
  }), _dec12 = (0, _classDecorator.property)({
    type: _curveRange.default,
    range: [-1, 1],
    displayOrder: 11,
    tooltip: '粒子初始速度'
  }), _dec13 = (0, _classDecorator.property)({
    displayOrder: 12,
    tooltip: '粒子初始旋转角度'
  }), _dec14 = (0, _classDecorator.property)({
    type: _curveRange.default,
    range: [-1, 1],
    radian: true,
    displayOrder: 12,
    tooltip: '粒子初始旋转角度'
  }), _dec15 = (0, _classDecorator.property)({
    type: _curveRange.default,
    range: [-1, 1],
    radian: true,
    displayOrder: 12,
    tooltip: '粒子初始旋转角度'
  }), _dec16 = (0, _classDecorator.property)({
    type: _curveRange.default,
    range: [-1, 1],
    radian: true,
    displayOrder: 12,
    formerlySerializedAs: 'startRotation',
    tooltip: '粒子初始旋转角度'
  }), _dec17 = (0, _classDecorator.property)({
    type: _curveRange.default,
    displayOrder: 6,
    tooltip: '粒子系统开始运行后，延迟粒子发射的时间'
  }), _dec18 = (0, _classDecorator.property)({
    type: _curveRange.default,
    displayOrder: 7,
    tooltip: '粒子生命周期'
  }), _dec19 = (0, _classDecorator.property)({
    displayOrder: 0,
    tooltip: '粒子系统运行时间'
  }), _dec20 = (0, _classDecorator.property)({
    displayOrder: 2,
    tooltip: '粒子系统是否循环播放'
  }), _dec21 = (0, _classDecorator.property)({
    displayOrder: 3,
    tooltip: '选中之后，粒子系统会以已播放完一轮之后的状态开始播放（仅当循环播放启用时有效）'
  }), _dec22 = (0, _classDecorator.property)({
    type: _enum.Space,
    displayOrder: 4,
    tooltip: '控制粒子坐标计算所在的坐标系'
  }), _dec23 = (0, _classDecorator.property)({
    displayOrder: 5,
    tooltip: '控制整个粒子系统的更新速度'
  }), _dec24 = (0, _classDecorator.property)({
    displayOrder: 2,
    tooltip: '粒子系统加载后是否自动开始播放'
  }), _dec25 = (0, _classDecorator.property)({
    type: _curveRange.default,
    range: [-1, 1],
    displayOrder: 13,
    tooltip: '粒子受重力影响的重力系数'
  }), _dec26 = (0, _classDecorator.property)({
    type: _curveRange.default,
    displayOrder: 14,
    tooltip: '每秒发射的粒子数'
  }), _dec27 = (0, _classDecorator.property)({
    type: _curveRange.default,
    displayOrder: 15,
    tooltip: '每移动单位距离发射的粒子数'
  }), _dec28 = (0, _classDecorator.property)({
    type: [_burst.default],
    displayOrder: 16,
    tooltip: '在某个时间点发射给定数量的粒子'
  }), _dec29 = (0, _classDecorator.property)({
    type: _material.Material,
    displayName: 'Materials',
    visible: false,
    override: true
  }), _dec30 = (0, _classDecorator.property)({
    type: _colorOvertime.default
  }), _dec31 = (0, _classDecorator.property)({
    type: _colorOvertime.default,
    displayOrder: 23,
    tooltip: '颜色模块'
  }), _dec32 = (0, _classDecorator.property)({
    type: _shapeModule.default
  }), _dec33 = (0, _classDecorator.property)({
    type: _shapeModule.default,
    displayOrder: 17,
    tooltip: '发射器模块'
  }), _dec34 = (0, _classDecorator.property)({
    type: _sizeOvertime.default
  }), _dec35 = (0, _classDecorator.property)({
    type: _sizeOvertime.default,
    displayOrder: 21,
    tooltip: '大小模块'
  }), _dec36 = (0, _classDecorator.property)({
    type: _velocityOvertime.default
  }), _dec37 = (0, _classDecorator.property)({
    type: _velocityOvertime.default,
    displayOrder: 18,
    tooltip: '速度模块'
  }), _dec38 = (0, _classDecorator.property)({
    type: _forceOvertime.default
  }), _dec39 = (0, _classDecorator.property)({
    type: _forceOvertime.default,
    displayOrder: 19,
    tooltip: '加速度模块'
  }), _dec40 = (0, _classDecorator.property)({
    type: _limitVelocityOvertime.default
  }), _dec41 = (0, _classDecorator.property)({
    type: _limitVelocityOvertime.default,
    displayOrder: 20,
    tooltip: '限速模块'
  }), _dec42 = (0, _classDecorator.property)({
    type: _rotationOvertime.default
  }), _dec43 = (0, _classDecorator.property)({
    type: _rotationOvertime.default,
    displayOrder: 22,
    tooltip: '旋转模块'
  }), _dec44 = (0, _classDecorator.property)({
    type: _textureAnimation.default
  }), _dec45 = (0, _classDecorator.property)({
    type: _textureAnimation.default,
    displayOrder: 24,
    tooltip: '贴图动画模块'
  }), _dec46 = (0, _classDecorator.property)({
    type: _trail.default
  }), _dec47 = (0, _classDecorator.property)({
    type: _trail.default,
    displayOrder: 25,
    tooltip: '拖尾模块'
  }), _dec48 = (0, _classDecorator.property)({
    type: _particleSystemRendererData.default,
    displayOrder: 26,
    tooltip: '渲染模块'
  }), _dec49 = (0, _classDecorator.property)({
    displayOrder: 27,
    tooltip: '是否剔除非 enable 的模块数据'
  }), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = (0, _classDecorator.executeInEditMode)(_class = (_class2 = (_temp = /*#__PURE__*/function (_RenderableComponent) {
    _inherits(ParticleSystemComponent, _RenderableComponent);

    _createClass(ParticleSystemComponent, [{
      key: "capacity",

      /**
       * @zh 粒子系统能生成的最大粒子数量。
       */
      get: function get() {
        return this._capacity;
      },
      set: function set(val) {
        this._capacity = Math.floor(val); // @ts-ignore

        if (this.processor && this.processor._model) {
          // @ts-ignore
          this.processor._model.setCapacity(this._capacity);
        }
      }
      /**
       * @zh 粒子初始颜色。
       */

    }, {
      key: "prewarm",

      /**
       * @zh 选中之后，粒子系统会以已播放完一轮之后的状态开始播放（仅当循环播放启用时有效）。
       */
      get: function get() {
        return this._prewarm;
      },
      set: function set(val) {
        if (val === true && this.loop === false) {// console.warn('prewarm only works if loop is also enabled.');
        }

        this._prewarm = val;
      }
      /**
       * @zh 选择粒子系统所在的坐标系[[Space]]。<br>
       */

    }, {
      key: "simulationSpace",
      get: function get() {
        return this._simulationSpace;
      },
      set: function set(val) {
        if (val !== this._simulationSpace) {
          this._simulationSpace = val;

          if (this.processor) {
            this.processor.updateMaterialParams();
            this.processor.updateTrailMaterial();
          }
        }
      }
      /**
       * @zh 控制整个粒子系统的更新速度。
       */

    }, {
      key: "sharedMaterials",
      get: function get() {
        // if we don't create an array copy, the editor will modify the original array directly.
        // @ts-ignore
        return _get(_getPrototypeOf(ParticleSystemComponent.prototype), "sharedMaterials", this);
      },
      set: function set(val) {
        // @ts-ignore
        _set(_getPrototypeOf(ParticleSystemComponent.prototype), "sharedMaterials", val, this, true);
      } // color over lifetime module

    }, {
      key: "colorOverLifetimeModule",

      /**
       * @zh 颜色控制模块。
       */
      get: function get() {
        if (_defaultConstants.EDITOR) {
          if (!this._colorOverLifetimeModule) {
            this._colorOverLifetimeModule = new _colorOvertime.default();

            this._colorOverLifetimeModule.bindTarget(this.processor);
          }
        }

        return this._colorOverLifetimeModule;
      },
      set: function set(val) {
        if (!val) return;
        this._colorOverLifetimeModule = val;
      } // shape module

    }, {
      key: "shapeModule",

      /**
       * @zh 粒子发射器模块。
       */
      get: function get() {
        if (_defaultConstants.EDITOR) {
          if (!this._shapeModule) {
            this._shapeModule = new _shapeModule.default();

            this._shapeModule.onInit(this);
          }
        }

        return this._shapeModule;
      },
      set: function set(val) {
        if (!val) return;
        this._shapeModule = val;
      } // size over lifetime module

    }, {
      key: "sizeOvertimeModule",

      /**
       * @zh 粒子大小模块。
       */
      get: function get() {
        if (_defaultConstants.EDITOR) {
          if (!this._sizeOvertimeModule) {
            this._sizeOvertimeModule = new _sizeOvertime.default();

            this._sizeOvertimeModule.bindTarget(this.processor);
          }
        }

        return this._sizeOvertimeModule;
      },
      set: function set(val) {
        if (!val) return;
        this._sizeOvertimeModule = val;
      } // velocity overtime module

    }, {
      key: "velocityOvertimeModule",

      /**
       * @zh 粒子速度模块。
       */
      get: function get() {
        if (_defaultConstants.EDITOR) {
          if (!this._velocityOvertimeModule) {
            this._velocityOvertimeModule = new _velocityOvertime.default();

            this._velocityOvertimeModule.bindTarget(this.processor);
          }
        }

        return this._velocityOvertimeModule;
      },
      set: function set(val) {
        if (!val) return;
        this._velocityOvertimeModule = val;
      } // force overTime module

    }, {
      key: "forceOvertimeModule",

      /**
       * @zh 粒子加速度模块。
       */
      get: function get() {
        if (_defaultConstants.EDITOR) {
          if (!this._forceOvertimeModule) {
            this._forceOvertimeModule = new _forceOvertime.default();

            this._forceOvertimeModule.bindTarget(this.processor);
          }
        }

        return this._forceOvertimeModule;
      },
      set: function set(val) {
        if (!val) return;
        this._forceOvertimeModule = val;
      } // limit velocity overtime module

    }, {
      key: "limitVelocityOvertimeModule",

      /**
       * @zh 粒子限制速度模块（只支持 CPU 粒子）。
       */
      get: function get() {
        if (_defaultConstants.EDITOR) {
          if (!this._limitVelocityOvertimeModule) {
            this._limitVelocityOvertimeModule = new _limitVelocityOvertime.default();

            this._limitVelocityOvertimeModule.bindTarget(this.processor);
          }
        }

        return this._limitVelocityOvertimeModule;
      },
      set: function set(val) {
        if (!val) return;
        this._limitVelocityOvertimeModule = val;
      } // rotation overtime module

    }, {
      key: "rotationOvertimeModule",

      /**
       * @zh 粒子旋转模块。
       */
      get: function get() {
        if (_defaultConstants.EDITOR) {
          if (!this._rotationOvertimeModule) {
            this._rotationOvertimeModule = new _rotationOvertime.default();

            this._rotationOvertimeModule.bindTarget(this.processor);
          }
        }

        return this._rotationOvertimeModule;
      },
      set: function set(val) {
        if (!val) return;
        this._rotationOvertimeModule = val;
      } // texture animation module

    }, {
      key: "textureAnimationModule",

      /**
       * @zh 贴图动画模块。
       */
      get: function get() {
        if (_defaultConstants.EDITOR) {
          if (!this._textureAnimationModule) {
            this._textureAnimationModule = new _textureAnimation.default();

            this._textureAnimationModule.bindTarget(this.processor);
          }
        }

        return this._textureAnimationModule;
      },
      set: function set(val) {
        if (!val) return;
        this._textureAnimationModule = val;
      } // trail module

    }, {
      key: "trailModule",

      /**
       * @zh 粒子轨迹模块。
       */
      get: function get() {
        if (_defaultConstants.EDITOR) {
          if (!this._trailModule) {
            this._trailModule = new _trail.default();

            this._trailModule.onInit(this);

            this._trailModule.onEnable();
          }
        }

        return this._trailModule;
      },
      set: function set(val) {
        if (!val) return;
        this._trailModule = val;
      } // particle system renderer

    }]);

    function ParticleSystemComponent() {
      var _this;

      _classCallCheck(this, ParticleSystemComponent);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(ParticleSystemComponent).call(this));

      _initializerDefineProperty(_this, "startColor", _descriptor, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "scaleSpace", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "startSize3D", _descriptor3, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "startSizeX", _descriptor4, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "startSizeY", _descriptor5, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "startSizeZ", _descriptor6, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "startSpeed", _descriptor7, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "startRotation3D", _descriptor8, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "startRotationX", _descriptor9, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "startRotationY", _descriptor10, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "startRotationZ", _descriptor11, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "startDelay", _descriptor12, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "startLifetime", _descriptor13, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "duration", _descriptor14, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "loop", _descriptor15, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "simulationSpeed", _descriptor16, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "playOnAwake", _descriptor17, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "gravityModifier", _descriptor18, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "rateOverTime", _descriptor19, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "rateOverDistance", _descriptor20, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "bursts", _descriptor21, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_colorOverLifetimeModule", _descriptor22, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_shapeModule", _descriptor23, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_sizeOvertimeModule", _descriptor24, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_velocityOvertimeModule", _descriptor25, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_forceOvertimeModule", _descriptor26, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_limitVelocityOvertimeModule", _descriptor27, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_rotationOvertimeModule", _descriptor28, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_textureAnimationModule", _descriptor29, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_trailModule", _descriptor30, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "renderer", _descriptor31, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "enableCulling", _descriptor32, _assertThisInitialized(_this));

      _this._isPlaying = void 0;
      _this._isPaused = void 0;
      _this._isStopped = void 0;
      _this._isEmitting = void 0;
      _this._time = void 0;
      _this._emitRateTimeCounter = void 0;
      _this._emitRateDistanceCounter = void 0;
      _this._oldWPos = void 0;
      _this._curWPos = void 0;
      _this._customData1 = void 0;
      _this._customData2 = void 0;
      _this._subEmitters = void 0;

      _initializerDefineProperty(_this, "_prewarm", _descriptor33, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_capacity", _descriptor34, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_simulationSpace", _descriptor35, _assertThisInitialized(_this));

      _this.processor = null;
      _this.rateOverTime.constant = 10;
      _this.startLifetime.constant = 5;
      _this.startSizeX.constant = 1;
      _this.startSpeed.constant = 5; // internal status

      _this._isPlaying = false;
      _this._isPaused = false;
      _this._isStopped = true;
      _this._isEmitting = false;
      _this._time = 0.0; // playback position in seconds.

      _this._emitRateTimeCounter = 0.0;
      _this._emitRateDistanceCounter = 0.0;
      _this._oldWPos = new _index.Vec3();
      _this._curWPos = new _index.Vec3();
      _this._customData1 = new _index.Vec2();
      _this._customData2 = new _index.Vec2();
      _this._subEmitters = []; // array of { emitter: ParticleSystemComponent, type: 'birth', 'collision' or 'death'}

      return _this;
    }

    _createClass(ParticleSystemComponent, [{
      key: "onLoad",
      value: function onLoad() {
        // HACK, TODO
        this.renderer.onInit(this);
        this._shapeModule && this._shapeModule.onInit(this);
        this._trailModule && this._trailModule.onInit(this);
        this.bindModule();

        this._resetPosition(); // this._system.add(this);

      }
    }, {
      key: "_onMaterialModified",
      value: function _onMaterialModified(index, material) {
        this.processor.onMaterialModified(index, material);
      }
    }, {
      key: "_onRebuildPSO",
      value: function _onRebuildPSO(index, material) {
        this.processor.onRebuildPSO(index, material);
      }
    }, {
      key: "_collectModels",
      value: function _collectModels() {
        this._models.length = 0;

        this._models.push(this.processor._model);

        if (this._trailModule && this._trailModule.enable && this._trailModule._trailModel) {
          this._models.push(this._trailModule._trailModel);
        }

        return this._models;
      }
    }, {
      key: "_attachToScene",
      value: function _attachToScene() {
        this.processor.attachToScene();

        if (this._trailModule && this._trailModule.enable) {
          this._trailModule._attachToScene();
        }
      }
    }, {
      key: "_detachFromScene",
      value: function _detachFromScene() {
        this.processor.detachFromScene();

        if (this._trailModule && this._trailModule.enable) {
          this._trailModule._detachFromScene();
        }
      }
    }, {
      key: "bindModule",
      value: function bindModule() {
        this._colorOverLifetimeModule && this._colorOverLifetimeModule.bindTarget(this.processor);
        this._sizeOvertimeModule && this._sizeOvertimeModule.bindTarget(this.processor);
        this._rotationOvertimeModule && this._rotationOvertimeModule.bindTarget(this.processor);
        this._forceOvertimeModule && this._forceOvertimeModule.bindTarget(this.processor);
        this._limitVelocityOvertimeModule && this._limitVelocityOvertimeModule.bindTarget(this.processor);
        this._velocityOvertimeModule && this._velocityOvertimeModule.bindTarget(this.processor);
        this._textureAnimationModule && this._textureAnimationModule.bindTarget(this.processor);
      } // TODO: Fast forward current particle system by simulating particles over given period of time, then pause it.
      // simulate(time, withChildren, restart, fixedTimeStep) {
      // }

      /**
       * 播放粒子效果。
       */

    }, {
      key: "play",
      value: function play() {
        if (this._isPaused) {
          this._isPaused = false;
        }

        if (this._isStopped) {
          this._isStopped = false;
        }

        this._isPlaying = true;
        this._isEmitting = true;

        this._resetPosition(); // prewarm


        if (this._prewarm) {
          this._prewarmSystem();
        }
      }
      /**
       * 暂停播放粒子效果。
       */

    }, {
      key: "pause",
      value: function pause() {
        if (this._isStopped) {
          console.warn('pause(): particle system is already stopped.');
          return;
        }

        if (this._isPlaying) {
          this._isPlaying = false;
        }

        this._isPaused = true;
      }
      /**
       * 停止播放粒子。
       */

    }, {
      key: "stop",
      value: function stop() {
        if (this._isPlaying || this._isPaused) {
          this.clear();
        }

        if (this._isPlaying) {
          this._isPlaying = false;
        }

        if (this._isPaused) {
          this._isPaused = false;
        }

        this._time = 0.0;
        this._emitRateTimeCounter = 0.0;
        this._emitRateDistanceCounter = 0.0;
        this._isStopped = true;
      } // remove all particles from current particle system.

      /**
       * 将所有粒子从粒子系统中清除。
       */

    }, {
      key: "clear",
      value: function clear() {
        if (this.enabledInHierarchy) {
          this.processor.clear();
          this._trailModule && this._trailModule.clear();
        }
      }
      /**
       * @zh 获取当前粒子数量
       */

    }, {
      key: "getParticleCount",
      value: function getParticleCount() {
        return this.processor.getParticleCount();
      }
      /**
       * @ignore
       */

    }, {
      key: "setCustomData1",
      value: function setCustomData1(x, y) {
        _index.Vec2.set(this._customData1, x, y);
      }
    }, {
      key: "setCustomData2",
      value: function setCustomData2(x, y) {
        _index.Vec2.set(this._customData2, x, y);
      }
    }, {
      key: "onDestroy",
      value: function onDestroy() {
        // this._system.remove(this);
        this.processor.onDestroy();
        this._trailModule && this._trailModule.destroy();
      }
    }, {
      key: "onEnable",
      value: function onEnable() {
        if (this.playOnAwake) {
          this.play();
        }

        this.processor.onEnable();
        this._trailModule && this._trailModule.onEnable();
      }
    }, {
      key: "onDisable",
      value: function onDisable() {
        this.processor.onDisable();
        this._trailModule && this._trailModule.onDisable();
      }
    }, {
      key: "update",
      value: function update(dt) {
        var scaledDeltaTime = dt * this.simulationSpeed;

        if (this._isPlaying) {
          this._time += scaledDeltaTime; // Execute emission

          this._emit(scaledDeltaTime); // simulation, update particles.


          if (this.processor.updateParticles(scaledDeltaTime) === 0 && !this._isEmitting) {
            this.stop();
          } // update render data


          this.processor.updateRenderData(); // update trail

          if (this._trailModule && this._trailModule.enable) {
            this._trailModule.updateRenderData();
          }
        }
      }
    }, {
      key: "_onVisibilityChange",
      value: function _onVisibilityChange(val) {
        // @ts-ignore
        if (this.processor._model) {
          // @ts-ignore
          this.processor._model.visFlags = val;
        }
      }
    }, {
      key: "emit",
      value: function emit(count, dt) {
        var delta = this._time / this.duration;

        if (this._simulationSpace === _enum.Space.World) {
          this.node.getWorldMatrix(_world_mat);
          this.node.getWorldRotation(_world_rol);
        }

        for (var i = 0; i < count; ++i) {
          var particle = this.processor.getFreeParticle();

          if (particle === null) {
            return;
          }

          var rand = (0, _index.pseudoRandom)((0, _index.randomRangeInt)(0, _bits.INT_MAX));

          if (this._shapeModule && this._shapeModule.enable) {
            this._shapeModule.emit(particle);
          } else {
            _index.Vec3.set(particle.position, 0, 0, 0);

            _index.Vec3.copy(particle.velocity, _particleGeneralFunction.particleEmitZAxis);
          }

          if (this._textureAnimationModule && this._textureAnimationModule.enable) {
            this._textureAnimationModule.init(particle);
          }

          _index.Vec3.multiplyScalar(particle.velocity, particle.velocity, this.startSpeed.evaluate(delta, rand));

          if (this._simulationSpace === _enum.Space.World) {
            _index.Vec3.transformMat4(particle.position, particle.position, _world_mat);

            _index.Vec3.transformQuat(particle.velocity, particle.velocity, _world_rol);
          }

          _index.Vec3.copy(particle.ultimateVelocity, particle.velocity); // apply startRotation.


          if (this.startRotation3D) {
            _index.Vec3.set(particle.rotation, this.startRotationX.evaluate(delta, rand), this.startRotationY.evaluate(delta, rand), this.startRotationZ.evaluate(delta, rand));
          } else {
            _index.Vec3.set(particle.rotation, 0, 0, this.startRotationZ.evaluate(delta, rand));
          } // apply startSize.


          if (this.startSize3D) {
            _index.Vec3.set(particle.startSize, this.startSizeX.evaluate(delta, rand), this.startSizeY.evaluate(delta, rand), this.startSizeZ.evaluate(delta, rand));
          } else {
            _index.Vec3.set(particle.startSize, this.startSizeX.evaluate(delta, rand), 1, 1);

            particle.startSize.y = particle.startSize.x;
          }

          _index.Vec3.copy(particle.size, particle.startSize); // apply startColor.


          particle.startColor.set(this.startColor.evaluate(delta, rand));
          particle.color.set(particle.startColor); // apply startLifetime.

          particle.startLifetime = this.startLifetime.evaluate(delta, rand) + dt;
          particle.remainingLifetime = particle.startLifetime;
          particle.randomSeed = (0, _index.randomRangeInt)(0, 233280);
          this.processor.setNewParticle(particle);
        } // end of particles forLoop.

      } // initialize particle system as though it had already completed a full cycle.

    }, {
      key: "_prewarmSystem",
      value: function _prewarmSystem() {
        this.startDelay.mode = _curveRange.Mode.Constant; // clear startDelay.

        this.startDelay.constant = 0;
        var dt = 1.0; // should use varying value?

        var cnt = this.duration / dt;

        for (var i = 0; i < cnt; ++i) {
          this._time += dt;

          this._emit(dt);

          this.processor.updateParticles(dt);
        }
      } // internal function

    }, {
      key: "_emit",
      value: function _emit(dt) {
        // emit particles.
        var startDelay = this.startDelay.evaluate(0, 1);

        if (this._time > startDelay) {
          if (this._time > this.duration + startDelay) {
            // this._time = startDelay; // delay will not be applied from the second loop.(Unity)
            // this._emitRateTimeCounter = 0.0;
            // this._emitRateDistanceCounter = 0.0;
            if (!this.loop) {
              this._isEmitting = false;
              return;
            }
          } // emit by rateOverTime


          this._emitRateTimeCounter += this.rateOverTime.evaluate(this._time / this.duration, 1) * dt;

          if (this._emitRateTimeCounter > 1 && this._isEmitting) {
            var emitNum = Math.floor(this._emitRateTimeCounter);
            this._emitRateTimeCounter -= emitNum;
            this.emit(emitNum, dt);
          } // emit by rateOverDistance


          this.node.getWorldPosition(this._curWPos);

          var distance = _index.Vec3.distance(this._curWPos, this._oldWPos);

          _index.Vec3.copy(this._oldWPos, this._curWPos);

          this._emitRateDistanceCounter += distance * this.rateOverDistance.evaluate(this._time / this.duration, 1);

          if (this._emitRateDistanceCounter > 1 && this._isEmitting) {
            var _emitNum = Math.floor(this._emitRateDistanceCounter);

            this._emitRateDistanceCounter -= _emitNum;
            this.emit(_emitNum, dt);
          } // bursts


          var _iterator = _createForOfIteratorHelper(this.bursts),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var burst = _step.value;
              burst.update(this, dt);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
      }
    }, {
      key: "_resetPosition",
      value: function _resetPosition() {
        this.node.getWorldPosition(this._oldWPos);

        _index.Vec3.copy(this._curWPos, this._oldWPos);
      }
    }, {
      key: "addSubEmitter",
      value: function addSubEmitter(subEmitter) {
        this._subEmitters.push(subEmitter);
      }
    }, {
      key: "removeSubEmitter",
      value: function removeSubEmitter(idx) {
        this._subEmitters.splice(this._subEmitters.indexOf(idx), 1);
      }
    }, {
      key: "addBurst",
      value: function addBurst(burst) {
        this.bursts.push(burst);
      }
    }, {
      key: "removeBurst",
      value: function removeBurst(idx) {
        this.bursts.splice(this.bursts.indexOf(idx), 1);
      }
      /**
       * @ignore
       */

    }, {
      key: "_onBeforeSerialize",
      value: function _onBeforeSerialize(props) {
        var _this2 = this;

        return this.enableCulling ? props.filter(function (p) {
          return !_particle.PARTICLE_MODULE_PROPERTY.includes(p) || _this2[p].enable;
        }) : props;
      }
    }, {
      key: "isPlaying",
      get: function get() {
        return this._isPlaying;
      }
    }, {
      key: "isPaused",
      get: function get() {
        return this._isPaused;
      }
    }, {
      key: "isStopped",
      get: function get() {
        return this._isStopped;
      }
    }, {
      key: "isEmitting",
      get: function get() {
        return this._isEmitting;
      }
    }, {
      key: "time",
      get: function get() {
        return this._time;
      }
    }]);

    return ParticleSystemComponent;
  }(_renderableComponent.RenderableComponent), _temp), (_applyDecoratedDescriptor(_class2.prototype, "capacity", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "capacity"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "startColor", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _gradientRange.default();
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "scaleSpace", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _enum.Space.Local;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "startSize3D", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "startSizeX", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _curveRange.default();
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "startSizeY", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _curveRange.default();
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "startSizeZ", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _curveRange.default();
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "startSpeed", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _curveRange.default();
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "startRotation3D", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "startRotationX", [_dec14], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _curveRange.default();
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "startRotationY", [_dec15], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _curveRange.default();
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "startRotationZ", [_dec16], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _curveRange.default();
    }
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "startDelay", [_dec17], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _curveRange.default();
    }
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "startLifetime", [_dec18], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _curveRange.default();
    }
  }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "duration", [_dec19], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 5.0;
    }
  }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "loop", [_dec20], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "prewarm", [_dec21], Object.getOwnPropertyDescriptor(_class2.prototype, "prewarm"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "simulationSpace", [_dec22], Object.getOwnPropertyDescriptor(_class2.prototype, "simulationSpace"), _class2.prototype), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "simulationSpeed", [_dec23], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 1.0;
    }
  }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "playOnAwake", [_dec24], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return true;
    }
  }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "gravityModifier", [_dec25], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _curveRange.default();
    }
  }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "rateOverTime", [_dec26], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _curveRange.default();
    }
  }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "rateOverDistance", [_dec27], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _curveRange.default();
    }
  }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "bursts", [_dec28], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new Array();
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "sharedMaterials", [_dec29], Object.getOwnPropertyDescriptor(_class2.prototype, "sharedMaterials"), _class2.prototype), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "_colorOverLifetimeModule", [_dec30], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "colorOverLifetimeModule", [_dec31], Object.getOwnPropertyDescriptor(_class2.prototype, "colorOverLifetimeModule"), _class2.prototype), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "_shapeModule", [_dec32], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "shapeModule", [_dec33], Object.getOwnPropertyDescriptor(_class2.prototype, "shapeModule"), _class2.prototype), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "_sizeOvertimeModule", [_dec34], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "sizeOvertimeModule", [_dec35], Object.getOwnPropertyDescriptor(_class2.prototype, "sizeOvertimeModule"), _class2.prototype), _descriptor25 = _applyDecoratedDescriptor(_class2.prototype, "_velocityOvertimeModule", [_dec36], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "velocityOvertimeModule", [_dec37], Object.getOwnPropertyDescriptor(_class2.prototype, "velocityOvertimeModule"), _class2.prototype), _descriptor26 = _applyDecoratedDescriptor(_class2.prototype, "_forceOvertimeModule", [_dec38], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "forceOvertimeModule", [_dec39], Object.getOwnPropertyDescriptor(_class2.prototype, "forceOvertimeModule"), _class2.prototype), _descriptor27 = _applyDecoratedDescriptor(_class2.prototype, "_limitVelocityOvertimeModule", [_dec40], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "limitVelocityOvertimeModule", [_dec41], Object.getOwnPropertyDescriptor(_class2.prototype, "limitVelocityOvertimeModule"), _class2.prototype), _descriptor28 = _applyDecoratedDescriptor(_class2.prototype, "_rotationOvertimeModule", [_dec42], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "rotationOvertimeModule", [_dec43], Object.getOwnPropertyDescriptor(_class2.prototype, "rotationOvertimeModule"), _class2.prototype), _descriptor29 = _applyDecoratedDescriptor(_class2.prototype, "_textureAnimationModule", [_dec44], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "textureAnimationModule", [_dec45], Object.getOwnPropertyDescriptor(_class2.prototype, "textureAnimationModule"), _class2.prototype), _descriptor30 = _applyDecoratedDescriptor(_class2.prototype, "_trailModule", [_dec46], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "trailModule", [_dec47], Object.getOwnPropertyDescriptor(_class2.prototype, "trailModule"), _class2.prototype), _descriptor31 = _applyDecoratedDescriptor(_class2.prototype, "renderer", [_dec48], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _particleSystemRendererData.default();
    }
  }), _descriptor32 = _applyDecoratedDescriptor(_class2.prototype, "enableCulling", [_dec49], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor33 = _applyDecoratedDescriptor(_class2.prototype, "_prewarm", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor34 = _applyDecoratedDescriptor(_class2.prototype, "_capacity", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 100;
    }
  }), _descriptor35 = _applyDecoratedDescriptor(_class2.prototype, "_simulationSpace", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return _enum.Space.Local;
    }
  })), _class2)) || _class) || _class) || _class) || _class) || _class);
  _exports.ParticleSystemComponent = ParticleSystemComponent;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkY6L2plbmtpbnMvd29ya3NwYWNlL0NyZWF0b3JfM0QvZWRpdG9yLTNkL3Jlc291cmNlcy8zZC9lbmdpbmUvY29jb3MvcGFydGljbGUvcGFydGljbGUtc3lzdGVtLWNvbXBvbmVudC50cyJdLCJuYW1lcyI6WyJfd29ybGRfbWF0IiwiTWF0NCIsIl93b3JsZF9yb2wiLCJRdWF0IiwiUGFydGljbGVTeXN0ZW1Db21wb25lbnQiLCJkaXNwbGF5T3JkZXIiLCJ0b29sdGlwIiwidHlwZSIsIkdyYWRpZW50UmFuZ2UiLCJTcGFjZSIsIkN1cnZlUmFuZ2UiLCJmb3JtZXJseVNlcmlhbGl6ZWRBcyIsInJhbmdlIiwicmFkaWFuIiwiQnVyc3QiLCJNYXRlcmlhbCIsImRpc3BsYXlOYW1lIiwidmlzaWJsZSIsIm92ZXJyaWRlIiwiQ29sb3JPdmVyTGlmZXRpbWVNb2R1bGUiLCJTaGFwZU1vZHVsZSIsIlNpemVPdmVydGltZU1vZHVsZSIsIlZlbG9jaXR5T3ZlcnRpbWVNb2R1bGUiLCJGb3JjZU92ZXJ0aW1lTW9kdWxlIiwiTGltaXRWZWxvY2l0eU92ZXJ0aW1lTW9kdWxlIiwiUm90YXRpb25PdmVydGltZU1vZHVsZSIsIlRleHR1cmVBbmltYXRpb25Nb2R1bGUiLCJUcmFpbE1vZHVsZSIsIlBhcnRpY2xlU3lzdGVtUmVuZGVyZXIiLCJleGVjdXRlSW5FZGl0TW9kZSIsIl9jYXBhY2l0eSIsInZhbCIsIk1hdGgiLCJmbG9vciIsInByb2Nlc3NvciIsIl9tb2RlbCIsInNldENhcGFjaXR5IiwiX3ByZXdhcm0iLCJsb29wIiwiX3NpbXVsYXRpb25TcGFjZSIsInVwZGF0ZU1hdGVyaWFsUGFyYW1zIiwidXBkYXRlVHJhaWxNYXRlcmlhbCIsIkVESVRPUiIsIl9jb2xvck92ZXJMaWZldGltZU1vZHVsZSIsImJpbmRUYXJnZXQiLCJfc2hhcGVNb2R1bGUiLCJvbkluaXQiLCJfc2l6ZU92ZXJ0aW1lTW9kdWxlIiwiX3ZlbG9jaXR5T3ZlcnRpbWVNb2R1bGUiLCJfZm9yY2VPdmVydGltZU1vZHVsZSIsIl9saW1pdFZlbG9jaXR5T3ZlcnRpbWVNb2R1bGUiLCJfcm90YXRpb25PdmVydGltZU1vZHVsZSIsIl90ZXh0dXJlQW5pbWF0aW9uTW9kdWxlIiwiX3RyYWlsTW9kdWxlIiwib25FbmFibGUiLCJfaXNQbGF5aW5nIiwiX2lzUGF1c2VkIiwiX2lzU3RvcHBlZCIsIl9pc0VtaXR0aW5nIiwiX3RpbWUiLCJfZW1pdFJhdGVUaW1lQ291bnRlciIsIl9lbWl0UmF0ZURpc3RhbmNlQ291bnRlciIsIl9vbGRXUG9zIiwiX2N1cldQb3MiLCJfY3VzdG9tRGF0YTEiLCJfY3VzdG9tRGF0YTIiLCJfc3ViRW1pdHRlcnMiLCJyYXRlT3ZlclRpbWUiLCJjb25zdGFudCIsInN0YXJ0TGlmZXRpbWUiLCJzdGFydFNpemVYIiwic3RhcnRTcGVlZCIsIlZlYzMiLCJWZWMyIiwicmVuZGVyZXIiLCJiaW5kTW9kdWxlIiwiX3Jlc2V0UG9zaXRpb24iLCJpbmRleCIsIm1hdGVyaWFsIiwib25NYXRlcmlhbE1vZGlmaWVkIiwib25SZWJ1aWxkUFNPIiwiX21vZGVscyIsImxlbmd0aCIsInB1c2giLCJlbmFibGUiLCJfdHJhaWxNb2RlbCIsImF0dGFjaFRvU2NlbmUiLCJfYXR0YWNoVG9TY2VuZSIsImRldGFjaEZyb21TY2VuZSIsIl9kZXRhY2hGcm9tU2NlbmUiLCJfcHJld2FybVN5c3RlbSIsImNvbnNvbGUiLCJ3YXJuIiwiY2xlYXIiLCJlbmFibGVkSW5IaWVyYXJjaHkiLCJnZXRQYXJ0aWNsZUNvdW50IiwieCIsInkiLCJzZXQiLCJvbkRlc3Ryb3kiLCJkZXN0cm95IiwicGxheU9uQXdha2UiLCJwbGF5Iiwib25EaXNhYmxlIiwiZHQiLCJzY2FsZWREZWx0YVRpbWUiLCJzaW11bGF0aW9uU3BlZWQiLCJfZW1pdCIsInVwZGF0ZVBhcnRpY2xlcyIsInN0b3AiLCJ1cGRhdGVSZW5kZXJEYXRhIiwidmlzRmxhZ3MiLCJjb3VudCIsImRlbHRhIiwiZHVyYXRpb24iLCJXb3JsZCIsIm5vZGUiLCJnZXRXb3JsZE1hdHJpeCIsImdldFdvcmxkUm90YXRpb24iLCJpIiwicGFydGljbGUiLCJnZXRGcmVlUGFydGljbGUiLCJyYW5kIiwiSU5UX01BWCIsImVtaXQiLCJwb3NpdGlvbiIsImNvcHkiLCJ2ZWxvY2l0eSIsInBhcnRpY2xlRW1pdFpBeGlzIiwiaW5pdCIsIm11bHRpcGx5U2NhbGFyIiwiZXZhbHVhdGUiLCJ0cmFuc2Zvcm1NYXQ0IiwidHJhbnNmb3JtUXVhdCIsInVsdGltYXRlVmVsb2NpdHkiLCJzdGFydFJvdGF0aW9uM0QiLCJyb3RhdGlvbiIsInN0YXJ0Um90YXRpb25YIiwic3RhcnRSb3RhdGlvblkiLCJzdGFydFJvdGF0aW9uWiIsInN0YXJ0U2l6ZTNEIiwic3RhcnRTaXplIiwic3RhcnRTaXplWSIsInN0YXJ0U2l6ZVoiLCJzaXplIiwic3RhcnRDb2xvciIsImNvbG9yIiwicmVtYWluaW5nTGlmZXRpbWUiLCJyYW5kb21TZWVkIiwic2V0TmV3UGFydGljbGUiLCJzdGFydERlbGF5IiwibW9kZSIsIk1vZGUiLCJDb25zdGFudCIsImNudCIsImVtaXROdW0iLCJnZXRXb3JsZFBvc2l0aW9uIiwiZGlzdGFuY2UiLCJyYXRlT3ZlckRpc3RhbmNlIiwiYnVyc3RzIiwiYnVyc3QiLCJ1cGRhdGUiLCJzdWJFbWl0dGVyIiwiaWR4Iiwic3BsaWNlIiwiaW5kZXhPZiIsInByb3BzIiwiZW5hYmxlQ3VsbGluZyIsImZpbHRlciIsInAiLCJQQVJUSUNMRV9NT0RVTEVfUFJPUEVSVFkiLCJpbmNsdWRlcyIsIlJlbmRlcmFibGVDb21wb25lbnQiLCJMb2NhbCIsIkFycmF5IiwicHJvcGVydHkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlDQSxNQUFNQSxVQUFVLEdBQUcsSUFBSUMsV0FBSixFQUFuQjs7QUFDQSxNQUFNQyxVQUFVLEdBQUcsSUFBSUMsV0FBSixFQUFuQjs7TUFPYUMs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QU9BQyxZQUFNb0ssSzs7Ozs7OzthQU1MLEs7Ozs7Ozs7YUFXRCxJQUFJbkssbUJBQUosRTs7Ozs7OzthQVVBLElBQUlBLG1CQUFKLEU7Ozs7Ozs7YUFVQSxJQUFJQSxtQkFBSixFOzs7Ozs7O2FBV0EsSUFBSUEsbUJBQUosRTs7Ozs7OzthQU1LLEs7Ozs7Ozs7YUFZRCxJQUFJQSxtQkFBSixFOzs7Ozs7O2FBWUEsSUFBSUEsbUJBQUosRTs7Ozs7OzthQWFBLElBQUlBLG1CQUFKLEU7Ozs7Ozs7YUFVSixJQUFJQSxtQkFBSixFOzs7Ozs7O2FBVUcsSUFBSUEsbUJBQUosRTs7Ozs7OzthQVNMLEc7Ozs7Ozs7YUFTSixJOzs7Ozs7O2FBaURXLEc7Ozs7Ozs7YUFTSixJOzs7Ozs7O2FBV0ksSUFBSUEsbUJBQUosRTs7Ozs7OzthQVdILElBQUlBLG1CQUFKLEU7Ozs7Ozs7YUFVSSxJQUFJQSxtQkFBSixFOzs7Ozs7O2FBVUQsSUFBSW9LLEtBQUosRTs7Ozs7OzthQXFCaUMsSTs7Ozs7OzthQTBCeEIsSTs7Ozs7OzthQTBCYyxJOzs7Ozs7O2FBMEJRLEk7Ozs7Ozs7YUEwQk4sSTs7Ozs7OzthQTBCZ0IsSTs7Ozs7OzthQTBCVixJOzs7Ozs7O2FBMEJBLEk7Ozs7Ozs7YUEwQnRCLEk7Ozs7Ozs7YUErQlEsSUFBSWxKLG1DQUFKLEU7Ozs7Ozs7YUFPVixLOztnRkFxQi9CbUosd0I7Ozs7O2FBQ2tCLEs7O2lGQUVsQkEsd0I7Ozs7O2FBQ21CLEc7O3dGQUVuQkEsd0I7Ozs7O2FBQzBCdEssWUFBTW9LLEsiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cclxuXHJcbi8qKlxyXG4gKiBAY2F0ZWdvcnkgcGFydGljbGVcclxuICovXHJcblxyXG4vLyB0c2xpbnQ6ZGlzYWJsZTogbWF4LWxpbmUtbGVuZ3RoXHJcblxyXG5pbXBvcnQgeyBSZW5kZXJhYmxlQ29tcG9uZW50IH0gZnJvbSAnLi4vY29yZS8zZC9mcmFtZXdvcmsvcmVuZGVyYWJsZS1jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBNYXRlcmlhbCB9IGZyb20gJy4uL2NvcmUvYXNzZXRzL21hdGVyaWFsJztcclxuaW1wb3J0IHsgY2NjbGFzcywgaGVscCwgZXhlY3V0ZUluRWRpdE1vZGUsIGV4ZWN1dGlvbk9yZGVyLCBtZW51LCBwcm9wZXJ0eSB9IGZyb20gJy4uL2NvcmUvZGF0YS9jbGFzcy1kZWNvcmF0b3InO1xyXG5pbXBvcnQgeyBNYXQ0LCBwc2V1ZG9SYW5kb20sIFF1YXQsIHJhbmRvbVJhbmdlSW50LCBWZWMyLCBWZWMzIH0gZnJvbSAnLi4vY29yZS9tYXRoJztcclxuaW1wb3J0IHsgSU5UX01BWCB9IGZyb20gJy4uL2NvcmUvbWF0aC9iaXRzJztcclxuaW1wb3J0IHsgTW9kZWwgfSBmcm9tICcuLi9jb3JlL3JlbmRlcmVyJztcclxuaW1wb3J0IENvbG9yT3ZlckxpZmV0aW1lTW9kdWxlIGZyb20gJy4vYW5pbWF0b3IvY29sb3Itb3ZlcnRpbWUnO1xyXG5pbXBvcnQgQ3VydmVSYW5nZSwgeyBNb2RlIH0gZnJvbSAnLi9hbmltYXRvci9jdXJ2ZS1yYW5nZSc7XHJcbmltcG9ydCBGb3JjZU92ZXJ0aW1lTW9kdWxlIGZyb20gJy4vYW5pbWF0b3IvZm9yY2Utb3ZlcnRpbWUnO1xyXG5pbXBvcnQgR3JhZGllbnRSYW5nZSBmcm9tICcuL2FuaW1hdG9yL2dyYWRpZW50LXJhbmdlJztcclxuaW1wb3J0IExpbWl0VmVsb2NpdHlPdmVydGltZU1vZHVsZSBmcm9tICcuL2FuaW1hdG9yL2xpbWl0LXZlbG9jaXR5LW92ZXJ0aW1lJztcclxuaW1wb3J0IFJvdGF0aW9uT3ZlcnRpbWVNb2R1bGUgZnJvbSAnLi9hbmltYXRvci9yb3RhdGlvbi1vdmVydGltZSc7XHJcbmltcG9ydCBTaXplT3ZlcnRpbWVNb2R1bGUgZnJvbSAnLi9hbmltYXRvci9zaXplLW92ZXJ0aW1lJztcclxuaW1wb3J0IFRleHR1cmVBbmltYXRpb25Nb2R1bGUgZnJvbSAnLi9hbmltYXRvci90ZXh0dXJlLWFuaW1hdGlvbic7XHJcbmltcG9ydCBWZWxvY2l0eU92ZXJ0aW1lTW9kdWxlIGZyb20gJy4vYW5pbWF0b3IvdmVsb2NpdHktb3ZlcnRpbWUnO1xyXG5pbXBvcnQgQnVyc3QgZnJvbSAnLi9idXJzdCc7XHJcbmltcG9ydCBTaGFwZU1vZHVsZSBmcm9tICcuL2VtaXR0ZXIvc2hhcGUtbW9kdWxlJztcclxuaW1wb3J0IHsgU3BhY2UgfSBmcm9tICcuL2VudW0nO1xyXG5pbXBvcnQgeyBwYXJ0aWNsZUVtaXRaQXhpcyB9IGZyb20gJy4vcGFydGljbGUtZ2VuZXJhbC1mdW5jdGlvbic7XHJcbmltcG9ydCBQYXJ0aWNsZVN5c3RlbVJlbmRlcmVyIGZyb20gJy4vcmVuZGVyZXIvcGFydGljbGUtc3lzdGVtLXJlbmRlcmVyLWRhdGEnO1xyXG5pbXBvcnQgVHJhaWxNb2R1bGUgZnJvbSAnLi9yZW5kZXJlci90cmFpbCc7XHJcbmltcG9ydCB7IElQYXJ0aWNsZVN5c3RlbVJlbmRlcmVyIH0gZnJvbSAnLi9yZW5kZXJlci9wYXJ0aWNsZS1zeXN0ZW0tcmVuZGVyZXItYmFzZSc7XHJcbmltcG9ydCB7IFBBUlRJQ0xFX01PRFVMRV9QUk9QRVJUWSB9IGZyb20gJy4vcGFydGljbGUnO1xyXG5pbXBvcnQgeyBFRElUT1IgfSBmcm9tICdpbnRlcm5hbDpjb25zdGFudHMnO1xyXG5cclxuY29uc3QgX3dvcmxkX21hdCA9IG5ldyBNYXQ0KCk7XHJcbmNvbnN0IF93b3JsZF9yb2wgPSBuZXcgUXVhdCgpO1xyXG5cclxuQGNjY2xhc3MoJ2NjLlBhcnRpY2xlU3lzdGVtQ29tcG9uZW50JylcclxuQGhlbHAoJ2kxOG46Y2MuUGFydGljbGVTeXN0ZW1Db21wb25lbnQnKVxyXG5AbWVudSgnQ29tcG9uZW50cy9QYXJ0aWNsZVN5c3RlbScpXHJcbkBleGVjdXRpb25PcmRlcig5OSlcclxuQGV4ZWN1dGVJbkVkaXRNb2RlXHJcbmV4cG9ydCBjbGFzcyBQYXJ0aWNsZVN5c3RlbUNvbXBvbmVudCBleHRlbmRzIFJlbmRlcmFibGVDb21wb25lbnQge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHpoIOeykuWtkOezu+e7n+iDveeUn+aIkOeahOacgOWkp+eykuWtkOaVsOmHj+OAglxyXG4gICAgICovXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIGRpc3BsYXlPcmRlcjogMSxcclxuICAgICAgICB0b29sdGlwOifnspLlrZDns7vnu5/og73nlJ/miJDnmoTmnIDlpKfnspLlrZDmlbDph48nLFxyXG4gICAgfSlcclxuICAgIHB1YmxpYyBnZXQgY2FwYWNpdHkgKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jYXBhY2l0eTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGNhcGFjaXR5ICh2YWwpIHtcclxuICAgICAgICB0aGlzLl9jYXBhY2l0eSA9IE1hdGguZmxvb3IodmFsKTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgaWYgKHRoaXMucHJvY2Vzc29yICYmIHRoaXMucHJvY2Vzc29yLl9tb2RlbCkge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc29yLl9tb2RlbC5zZXRDYXBhY2l0eSh0aGlzLl9jYXBhY2l0eSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHpoIOeykuWtkOWIneWni+minOiJsuOAglxyXG4gICAgICovXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHR5cGU6IEdyYWRpZW50UmFuZ2UsXHJcbiAgICAgICAgZGlzcGxheU9yZGVyOiA4LFxyXG4gICAgICAgIHRvb2x0aXA6J+eykuWtkOWIneWni+minOiJsicsXHJcbiAgICB9KVxyXG4gICAgcHVibGljIHN0YXJ0Q29sb3IgPSBuZXcgR3JhZGllbnRSYW5nZSgpO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdHlwZTogU3BhY2UsXHJcbiAgICAgICAgZGlzcGxheU9yZGVyOiA5LFxyXG4gICAgICAgIHRvb2x0aXA6J+mAieaLqee8qeaUvuWdkOagh+ezuycsXHJcbiAgICB9KVxyXG4gICAgcHVibGljIHNjYWxlU3BhY2UgPSBTcGFjZS5Mb2NhbDtcclxuXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIGRpc3BsYXlPcmRlcjogMTAsXHJcbiAgICAgICAgdG9vbHRpcDon57KS5a2Q5Yid5aeL5aSn5bCPJyxcclxuICAgIH0pXHJcbiAgICBwdWJsaWMgc3RhcnRTaXplM0QgPSBmYWxzZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEB6aCDnspLlrZDliJ3lp4vlpKflsI/jgIJcclxuICAgICAqL1xyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0eXBlOiBDdXJ2ZVJhbmdlLFxyXG4gICAgICAgIGRpc3BsYXlPcmRlcjogMTAsXHJcbiAgICAgICAgZm9ybWVybHlTZXJpYWxpemVkQXM6ICdzdGFydFNpemUnLFxyXG4gICAgICAgIHRvb2x0aXA6J+eykuWtkOWIneWni+Wkp+WwjycsXHJcbiAgICB9KVxyXG4gICAgcHVibGljIHN0YXJ0U2l6ZVggPSBuZXcgQ3VydmVSYW5nZSgpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHpoIOeykuWtkOWIneWni+Wkp+Wwj+OAglxyXG4gICAgICovXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHR5cGU6IEN1cnZlUmFuZ2UsXHJcbiAgICAgICAgZGlzcGxheU9yZGVyOiAxMCxcclxuICAgICAgICB0b29sdGlwOifnspLlrZDliJ3lp4vlpKflsI8nLFxyXG4gICAgfSlcclxuICAgIHB1YmxpYyBzdGFydFNpemVZID0gbmV3IEN1cnZlUmFuZ2UoKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEB6aCDnspLlrZDliJ3lp4vlpKflsI/jgIJcclxuICAgICAqL1xyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0eXBlOiBDdXJ2ZVJhbmdlLFxyXG4gICAgICAgIGRpc3BsYXlPcmRlcjogMTAsXHJcbiAgICAgICAgdG9vbHRpcDon57KS5a2Q5Yid5aeL5aSn5bCPJyxcclxuICAgIH0pXHJcbiAgICBwdWJsaWMgc3RhcnRTaXplWiA9IG5ldyBDdXJ2ZVJhbmdlKCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAemgg57KS5a2Q5Yid5aeL6YCf5bqm44CCXHJcbiAgICAgKi9cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdHlwZTogQ3VydmVSYW5nZSxcclxuICAgICAgICByYW5nZTogWy0xLCAxXSxcclxuICAgICAgICBkaXNwbGF5T3JkZXI6IDExLFxyXG4gICAgICAgIHRvb2x0aXA6J+eykuWtkOWIneWni+mAn+W6picsXHJcbiAgICB9KVxyXG4gICAgcHVibGljIHN0YXJ0U3BlZWQgPSBuZXcgQ3VydmVSYW5nZSgpO1xyXG5cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgZGlzcGxheU9yZGVyOiAxMixcclxuICAgICAgICB0b29sdGlwOifnspLlrZDliJ3lp4vml4vovazop5LluqYnLFxyXG4gICAgfSlcclxuICAgIHB1YmxpYyBzdGFydFJvdGF0aW9uM0QgPSBmYWxzZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEB6aCDnspLlrZDliJ3lp4vml4vovazop5LluqbjgIJcclxuICAgICAqL1xyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0eXBlOiBDdXJ2ZVJhbmdlLFxyXG4gICAgICAgIHJhbmdlOiBbLTEsIDFdLFxyXG4gICAgICAgIHJhZGlhbjogdHJ1ZSxcclxuICAgICAgICBkaXNwbGF5T3JkZXI6IDEyLFxyXG4gICAgICAgIHRvb2x0aXA6J+eykuWtkOWIneWni+aXi+i9rOinkuW6pidcclxuICAgIH0pXHJcbiAgICBwdWJsaWMgc3RhcnRSb3RhdGlvblggPSBuZXcgQ3VydmVSYW5nZSgpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHpoIOeykuWtkOWIneWni+aXi+i9rOinkuW6puOAglxyXG4gICAgICovXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHR5cGU6IEN1cnZlUmFuZ2UsXHJcbiAgICAgICAgcmFuZ2U6IFstMSwgMV0sXHJcbiAgICAgICAgcmFkaWFuOiB0cnVlLFxyXG4gICAgICAgIGRpc3BsYXlPcmRlcjogMTIsXHJcbiAgICAgICAgdG9vbHRpcDon57KS5a2Q5Yid5aeL5peL6L2s6KeS5bqmJ1xyXG4gICAgfSlcclxuICAgIHB1YmxpYyBzdGFydFJvdGF0aW9uWSA9IG5ldyBDdXJ2ZVJhbmdlKCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAemgg57KS5a2Q5Yid5aeL5peL6L2s6KeS5bqm44CCXHJcbiAgICAgKi9cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdHlwZTogQ3VydmVSYW5nZSxcclxuICAgICAgICByYW5nZTogWy0xLCAxXSxcclxuICAgICAgICByYWRpYW46IHRydWUsXHJcbiAgICAgICAgZGlzcGxheU9yZGVyOiAxMixcclxuICAgICAgICBmb3JtZXJseVNlcmlhbGl6ZWRBczogJ3N0YXJ0Um90YXRpb24nLFxyXG4gICAgICAgIHRvb2x0aXA6J+eykuWtkOWIneWni+aXi+i9rOinkuW6pidcclxuICAgIH0pXHJcbiAgICBwdWJsaWMgc3RhcnRSb3RhdGlvblogPSBuZXcgQ3VydmVSYW5nZSgpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHpoIOeykuWtkOezu+e7n+W8gOWni+i/kOihjOWQju+8jOW7tui/n+eykuWtkOWPkeWwhOeahOaXtumXtOOAglxyXG4gICAgICovXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHR5cGU6IEN1cnZlUmFuZ2UsXHJcbiAgICAgICAgZGlzcGxheU9yZGVyOiA2LFxyXG4gICAgICAgIHRvb2x0aXA6J+eykuWtkOezu+e7n+W8gOWni+i/kOihjOWQju+8jOW7tui/n+eykuWtkOWPkeWwhOeahOaXtumXtCcsXHJcbiAgICB9KVxyXG4gICAgcHVibGljIHN0YXJ0RGVsYXkgPSBuZXcgQ3VydmVSYW5nZSgpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHpoIOeykuWtkOeUn+WRveWRqOacn+OAglxyXG4gICAgICovXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHR5cGU6IEN1cnZlUmFuZ2UsXHJcbiAgICAgICAgZGlzcGxheU9yZGVyOiA3LFxyXG4gICAgICAgIHRvb2x0aXA6J+eykuWtkOeUn+WRveWRqOacnycsXHJcbiAgICB9KVxyXG4gICAgcHVibGljIHN0YXJ0TGlmZXRpbWUgPSBuZXcgQ3VydmVSYW5nZSgpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHpoIOeykuWtkOezu+e7n+i/kOihjOaXtumXtOOAglxyXG4gICAgICovXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIGRpc3BsYXlPcmRlcjogMCxcclxuICAgICAgICB0b29sdGlwOifnspLlrZDns7vnu5/ov5DooYzml7bpl7QnLFxyXG4gICAgfSlcclxuICAgIHB1YmxpYyBkdXJhdGlvbiA9IDUuMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEB6aCDnspLlrZDns7vnu5/mmK/lkKblvqrnjq/mkq3mlL7jgIJcclxuICAgICAqL1xyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICBkaXNwbGF5T3JkZXI6IDIsXHJcbiAgICAgICAgdG9vbHRpcDon57KS5a2Q57O757uf5piv5ZCm5b6q546v5pKt5pS+JyxcclxuICAgIH0pXHJcbiAgICBwdWJsaWMgbG9vcCA9IHRydWU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAemgg6YCJ5Lit5LmL5ZCO77yM57KS5a2Q57O757uf5Lya5Lul5bey5pKt5pS+5a6M5LiA6L2u5LmL5ZCO55qE54q25oCB5byA5aeL5pKt5pS+77yI5LuF5b2T5b6q546v5pKt5pS+5ZCv55So5pe25pyJ5pWI77yJ44CCXHJcbiAgICAgKi9cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgZGlzcGxheU9yZGVyOiAzLFxyXG4gICAgICAgIHRvb2x0aXA6J+mAieS4reS5i+WQju+8jOeykuWtkOezu+e7n+S8muS7peW3suaSreaUvuWujOS4gOi9ruS5i+WQjueahOeKtuaAgeW8gOWni+aSreaUvu+8iOS7heW9k+W+queOr+aSreaUvuWQr+eUqOaXtuacieaViO+8iScsXHJcbiAgICB9KVxyXG4gICAgZ2V0IHByZXdhcm0gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wcmV3YXJtO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBwcmV3YXJtICh2YWwpIHtcclxuICAgICAgICBpZiAodmFsID09PSB0cnVlICYmIHRoaXMubG9vcCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS53YXJuKCdwcmV3YXJtIG9ubHkgd29ya3MgaWYgbG9vcCBpcyBhbHNvIGVuYWJsZWQuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3ByZXdhcm0gPSB2YWw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAemgg6YCJ5oup57KS5a2Q57O757uf5omA5Zyo55qE5Z2Q5qCH57O7W1tTcGFjZV1d44CCPGJyPlxyXG4gICAgICovXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHR5cGU6IFNwYWNlLFxyXG4gICAgICAgIGRpc3BsYXlPcmRlcjogNCxcclxuICAgICAgICB0b29sdGlwOifmjqfliLbnspLlrZDlnZDmoIforqHnrpfmiYDlnKjnmoTlnZDmoIfns7snLFxyXG4gICAgfSlcclxuICAgIGdldCBzaW11bGF0aW9uU3BhY2UgKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaW11bGF0aW9uU3BhY2U7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHNpbXVsYXRpb25TcGFjZSAodmFsKSB7XHJcbiAgICAgICAgaWYgKHZhbCAhPT0gdGhpcy5fc2ltdWxhdGlvblNwYWNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NpbXVsYXRpb25TcGFjZSA9IHZhbDtcclxuICAgICAgICAgICAgaWYgKHRoaXMucHJvY2Vzc29yKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3Nvci51cGRhdGVNYXRlcmlhbFBhcmFtcygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzb3IudXBkYXRlVHJhaWxNYXRlcmlhbCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHpoIOaOp+WItuaVtOS4queykuWtkOezu+e7n+eahOabtOaWsOmAn+W6puOAglxyXG4gICAgICovXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIGRpc3BsYXlPcmRlcjogNSxcclxuICAgICAgICB0b29sdGlwOifmjqfliLbmlbTkuKrnspLlrZDns7vnu5/nmoTmm7TmlrDpgJ/luqYnLFxyXG4gICAgfSlcclxuICAgIHB1YmxpYyBzaW11bGF0aW9uU3BlZWQgPSAxLjA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAemgg57KS5a2Q57O757uf5Yqg6L295ZCO5piv5ZCm6Ieq5Yqo5byA5aeL5pKt5pS+44CCXHJcbiAgICAgKi9cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgZGlzcGxheU9yZGVyOiAyLFxyXG4gICAgICAgIHRvb2x0aXA6J+eykuWtkOezu+e7n+WKoOi9veWQjuaYr+WQpuiHquWKqOW8gOWni+aSreaUvicsXHJcbiAgICB9KVxyXG4gICAgcHVibGljIHBsYXlPbkF3YWtlID0gdHJ1ZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEB6aCDnspLlrZDlj5fph43lipvlvbHlk43nmoTph43lipvns7vmlbDjgIJcclxuICAgICAqL1xyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0eXBlOiBDdXJ2ZVJhbmdlLFxyXG4gICAgICAgIHJhbmdlOiBbLTEsIDFdLFxyXG4gICAgICAgIGRpc3BsYXlPcmRlcjogMTMsXHJcbiAgICAgICAgdG9vbHRpcDon57KS5a2Q5Y+X6YeN5Yqb5b2x5ZON55qE6YeN5Yqb57O75pWwJyxcclxuICAgIH0pXHJcbiAgICBwdWJsaWMgZ3Jhdml0eU1vZGlmaWVyID0gbmV3IEN1cnZlUmFuZ2UoKTtcclxuXHJcbiAgICAvLyBlbWlzc2lvbiBtb2R1bGVcclxuICAgIC8qKlxyXG4gICAgICogQHpoIOavj+enkuWPkeWwhOeahOeykuWtkOaVsOOAglxyXG4gICAgICovXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHR5cGU6IEN1cnZlUmFuZ2UsXHJcbiAgICAgICAgZGlzcGxheU9yZGVyOiAxNCxcclxuICAgICAgICB0b29sdGlwOifmr4/np5Llj5HlsITnmoTnspLlrZDmlbAnLFxyXG4gICAgfSlcclxuICAgIHB1YmxpYyByYXRlT3ZlclRpbWUgPSBuZXcgQ3VydmVSYW5nZSgpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHpoIOavj+enu+WKqOWNleS9jei3neemu+WPkeWwhOeahOeykuWtkOaVsOOAglxyXG4gICAgICovXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHR5cGU6IEN1cnZlUmFuZ2UsXHJcbiAgICAgICAgZGlzcGxheU9yZGVyOiAxNSxcclxuICAgICAgICB0b29sdGlwOifmr4/np7vliqjljZXkvY3ot53nprvlj5HlsITnmoTnspLlrZDmlbAnLFxyXG4gICAgfSlcclxuICAgIHB1YmxpYyByYXRlT3ZlckRpc3RhbmNlID0gbmV3IEN1cnZlUmFuZ2UoKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEB6aCDorr7lrprlnKjmjIflrprml7bpl7Tlj5HlsITmjIflrprmlbDph4/nmoTnspLlrZDnmoQgYnVyc3Qg55qE5pWw6YeP44CCXHJcbiAgICAgKi9cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdHlwZTogW0J1cnN0XSxcclxuICAgICAgICBkaXNwbGF5T3JkZXI6IDE2LFxyXG4gICAgICAgIHRvb2x0aXA6J+WcqOafkOS4quaXtumXtOeCueWPkeWwhOe7meWumuaVsOmHj+eahOeykuWtkCdcclxuICAgIH0pXHJcbiAgICBwdWJsaWMgYnVyc3RzOiBCdXJzdFtdID0gbmV3IEFycmF5KCk7XHJcblxyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0eXBlOiBNYXRlcmlhbCxcclxuICAgICAgICBkaXNwbGF5TmFtZTogJ01hdGVyaWFscycsXHJcbiAgICAgICAgdmlzaWJsZTogZmFsc2UsXHJcbiAgICAgICAgb3ZlcnJpZGU6IHRydWUsXHJcbiAgICB9KVxyXG4gICAgZ2V0IHNoYXJlZE1hdGVyaWFscyAoKSB7XHJcbiAgICAgICAgLy8gaWYgd2UgZG9uJ3QgY3JlYXRlIGFuIGFycmF5IGNvcHksIHRoZSBlZGl0b3Igd2lsbCBtb2RpZnkgdGhlIG9yaWdpbmFsIGFycmF5IGRpcmVjdGx5LlxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICByZXR1cm4gc3VwZXIuc2hhcmVkTWF0ZXJpYWxzO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBzaGFyZWRNYXRlcmlhbHMgKHZhbCkge1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBzdXBlci5zaGFyZWRNYXRlcmlhbHMgPSB2YWw7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gY29sb3Igb3ZlciBsaWZldGltZSBtb2R1bGVcclxuICAgIEBwcm9wZXJ0eSh7dHlwZTogQ29sb3JPdmVyTGlmZXRpbWVNb2R1bGV9KVxyXG4gICAgX2NvbG9yT3ZlckxpZmV0aW1lTW9kdWxlOkNvbG9yT3ZlckxpZmV0aW1lTW9kdWxlIHwgbnVsbCA9IG51bGw7XHJcbiAgICAvKipcclxuICAgICAqIEB6aCDpopzoibLmjqfliLbmqKHlnZfjgIJcclxuICAgICAqL1xyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0eXBlOiBDb2xvck92ZXJMaWZldGltZU1vZHVsZSxcclxuICAgICAgICBkaXNwbGF5T3JkZXI6IDIzLFxyXG4gICAgICAgIHRvb2x0aXA6J+minOiJsuaooeWdlycsXHJcbiAgICB9KVxyXG4gICAgcHVibGljIGdldCBjb2xvck92ZXJMaWZldGltZU1vZHVsZSAoKSB7XHJcbiAgICAgICAgaWYgKEVESVRPUikge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2NvbG9yT3ZlckxpZmV0aW1lTW9kdWxlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jb2xvck92ZXJMaWZldGltZU1vZHVsZSA9IG5ldyBDb2xvck92ZXJMaWZldGltZU1vZHVsZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY29sb3JPdmVyTGlmZXRpbWVNb2R1bGUuYmluZFRhcmdldCh0aGlzLnByb2Nlc3NvciEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb2xvck92ZXJMaWZldGltZU1vZHVsZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IGNvbG9yT3ZlckxpZmV0aW1lTW9kdWxlICh2YWwpIHtcclxuICAgICAgICBpZiAoIXZhbCkgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuX2NvbG9yT3ZlckxpZmV0aW1lTW9kdWxlID0gdmFsO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHNoYXBlIG1vZHVsZVxyXG4gICAgQHByb3BlcnR5KHt0eXBlOiBTaGFwZU1vZHVsZX0pXHJcbiAgICBfc2hhcGVNb2R1bGU6U2hhcGVNb2R1bGUgfCBudWxsID0gbnVsbDtcclxuICAgIC8qKlxyXG4gICAgICogQHpoIOeykuWtkOWPkeWwhOWZqOaooeWdl+OAglxyXG4gICAgICovXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHR5cGU6IFNoYXBlTW9kdWxlLFxyXG4gICAgICAgIGRpc3BsYXlPcmRlcjogMTcsXHJcbiAgICAgICAgdG9vbHRpcDon5Y+R5bCE5Zmo5qih5Z2XJyxcclxuICAgIH0pXHJcbiAgICBwdWJsaWMgZ2V0IHNoYXBlTW9kdWxlICgpIHtcclxuICAgICAgICBpZiAoRURJVE9SKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fc2hhcGVNb2R1bGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NoYXBlTW9kdWxlID0gbmV3IFNoYXBlTW9kdWxlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zaGFwZU1vZHVsZS5vbkluaXQodGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NoYXBlTW9kdWxlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgc2hhcGVNb2R1bGUgKHZhbCkge1xyXG4gICAgICAgIGlmICghdmFsKSByZXR1cm47XHJcbiAgICAgICAgdGhpcy5fc2hhcGVNb2R1bGUgPSB2YWw7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gc2l6ZSBvdmVyIGxpZmV0aW1lIG1vZHVsZVxyXG4gICAgQHByb3BlcnR5KHt0eXBlOiBTaXplT3ZlcnRpbWVNb2R1bGV9KVxyXG4gICAgX3NpemVPdmVydGltZU1vZHVsZTpTaXplT3ZlcnRpbWVNb2R1bGUgfCBudWxsID0gbnVsbDtcclxuICAgIC8qKlxyXG4gICAgICogQHpoIOeykuWtkOWkp+Wwj+aooeWdl+OAglxyXG4gICAgICovXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHR5cGU6IFNpemVPdmVydGltZU1vZHVsZSxcclxuICAgICAgICBkaXNwbGF5T3JkZXI6IDIxLFxyXG4gICAgICAgIHRvb2x0aXA6J+Wkp+Wwj+aooeWdlycsXHJcbiAgICB9KVxyXG4gICAgcHVibGljIGdldCBzaXplT3ZlcnRpbWVNb2R1bGUgKCkge1xyXG4gICAgICAgIGlmIChFRElUT1IpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9zaXplT3ZlcnRpbWVNb2R1bGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NpemVPdmVydGltZU1vZHVsZSA9IG5ldyBTaXplT3ZlcnRpbWVNb2R1bGUoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NpemVPdmVydGltZU1vZHVsZS5iaW5kVGFyZ2V0KHRoaXMucHJvY2Vzc29yISk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpemVPdmVydGltZU1vZHVsZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHNpemVPdmVydGltZU1vZHVsZSAodmFsKSB7XHJcbiAgICAgICAgaWYgKCF2YWwpIHJldHVybjtcclxuICAgICAgICB0aGlzLl9zaXplT3ZlcnRpbWVNb2R1bGUgPSB2YWw7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gdmVsb2NpdHkgb3ZlcnRpbWUgbW9kdWxlXHJcbiAgICBAcHJvcGVydHkoe3R5cGU6IFZlbG9jaXR5T3ZlcnRpbWVNb2R1bGV9KVxyXG4gICAgX3ZlbG9jaXR5T3ZlcnRpbWVNb2R1bGU6VmVsb2NpdHlPdmVydGltZU1vZHVsZSB8IG51bGwgPSBudWxsO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAemgg57KS5a2Q6YCf5bqm5qih5Z2X44CCXHJcbiAgICAgKi9cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdHlwZTogVmVsb2NpdHlPdmVydGltZU1vZHVsZSxcclxuICAgICAgICBkaXNwbGF5T3JkZXI6IDE4LFxyXG4gICAgICAgIHRvb2x0aXA6J+mAn+W6puaooeWdlycsXHJcbiAgICB9KVxyXG4gICAgcHVibGljIGdldCB2ZWxvY2l0eU92ZXJ0aW1lTW9kdWxlICgpIHtcclxuICAgICAgICBpZiAoRURJVE9SKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fdmVsb2NpdHlPdmVydGltZU1vZHVsZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmVsb2NpdHlPdmVydGltZU1vZHVsZSA9IG5ldyBWZWxvY2l0eU92ZXJ0aW1lTW9kdWxlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92ZWxvY2l0eU92ZXJ0aW1lTW9kdWxlLmJpbmRUYXJnZXQodGhpcy5wcm9jZXNzb3IhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fdmVsb2NpdHlPdmVydGltZU1vZHVsZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0IHZlbG9jaXR5T3ZlcnRpbWVNb2R1bGUgKHZhbCkge1xyXG4gICAgICAgIGlmICghdmFsKSByZXR1cm47XHJcbiAgICAgICAgdGhpcy5fdmVsb2NpdHlPdmVydGltZU1vZHVsZSA9IHZhbDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBmb3JjZSBvdmVyVGltZSBtb2R1bGVcclxuICAgIEBwcm9wZXJ0eSh7dHlwZTogRm9yY2VPdmVydGltZU1vZHVsZX0pXHJcbiAgICBfZm9yY2VPdmVydGltZU1vZHVsZTpGb3JjZU92ZXJ0aW1lTW9kdWxlIHwgbnVsbCA9IG51bGw7XHJcbiAgICAvKipcclxuICAgICAqIEB6aCDnspLlrZDliqDpgJ/luqbmqKHlnZfjgIJcclxuICAgICAqL1xyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0eXBlOiBGb3JjZU92ZXJ0aW1lTW9kdWxlLFxyXG4gICAgICAgIGRpc3BsYXlPcmRlcjogMTksXHJcbiAgICAgICAgdG9vbHRpcDon5Yqg6YCf5bqm5qih5Z2XJyxcclxuICAgIH0pXHJcbiAgICBwdWJsaWMgZ2V0IGZvcmNlT3ZlcnRpbWVNb2R1bGUgKCkge1xyXG4gICAgICAgIGlmIChFRElUT1IpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9mb3JjZU92ZXJ0aW1lTW9kdWxlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mb3JjZU92ZXJ0aW1lTW9kdWxlID0gbmV3IEZvcmNlT3ZlcnRpbWVNb2R1bGUoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZvcmNlT3ZlcnRpbWVNb2R1bGUuYmluZFRhcmdldCh0aGlzLnByb2Nlc3NvciEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9mb3JjZU92ZXJ0aW1lTW9kdWxlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgZm9yY2VPdmVydGltZU1vZHVsZSAodmFsKSB7XHJcbiAgICAgICAgaWYgKCF2YWwpIHJldHVybjtcclxuICAgICAgICB0aGlzLl9mb3JjZU92ZXJ0aW1lTW9kdWxlID0gdmFsO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGxpbWl0IHZlbG9jaXR5IG92ZXJ0aW1lIG1vZHVsZVxyXG4gICAgQHByb3BlcnR5KHt0eXBlOiBMaW1pdFZlbG9jaXR5T3ZlcnRpbWVNb2R1bGV9KVxyXG4gICAgX2xpbWl0VmVsb2NpdHlPdmVydGltZU1vZHVsZTpMaW1pdFZlbG9jaXR5T3ZlcnRpbWVNb2R1bGUgfCBudWxsID0gbnVsbDtcclxuICAgIC8qKlxyXG4gICAgICogQHpoIOeykuWtkOmZkOWItumAn+W6puaooeWdl++8iOWPquaUr+aMgSBDUFUg57KS5a2Q77yJ44CCXHJcbiAgICAgKi9cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdHlwZTogTGltaXRWZWxvY2l0eU92ZXJ0aW1lTW9kdWxlLFxyXG4gICAgICAgIGRpc3BsYXlPcmRlcjogMjAsXHJcbiAgICAgICAgdG9vbHRpcDon6ZmQ6YCf5qih5Z2XJyxcclxuICAgIH0pXHJcbiAgICBwdWJsaWMgZ2V0IGxpbWl0VmVsb2NpdHlPdmVydGltZU1vZHVsZSAoKSB7XHJcbiAgICAgICAgaWYgKEVESVRPUikge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2xpbWl0VmVsb2NpdHlPdmVydGltZU1vZHVsZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbGltaXRWZWxvY2l0eU92ZXJ0aW1lTW9kdWxlID0gbmV3IExpbWl0VmVsb2NpdHlPdmVydGltZU1vZHVsZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbGltaXRWZWxvY2l0eU92ZXJ0aW1lTW9kdWxlLmJpbmRUYXJnZXQodGhpcy5wcm9jZXNzb3IhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fbGltaXRWZWxvY2l0eU92ZXJ0aW1lTW9kdWxlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgbGltaXRWZWxvY2l0eU92ZXJ0aW1lTW9kdWxlICh2YWwpIHtcclxuICAgICAgICBpZiAoIXZhbCkgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuX2xpbWl0VmVsb2NpdHlPdmVydGltZU1vZHVsZSA9IHZhbDtcclxuICAgIH1cclxuXHJcbiAgICAvLyByb3RhdGlvbiBvdmVydGltZSBtb2R1bGVcclxuICAgIEBwcm9wZXJ0eSh7dHlwZTogUm90YXRpb25PdmVydGltZU1vZHVsZX0pXHJcbiAgICBfcm90YXRpb25PdmVydGltZU1vZHVsZTpSb3RhdGlvbk92ZXJ0aW1lTW9kdWxlIHwgbnVsbCA9IG51bGw7XHJcbiAgICAvKipcclxuICAgICAqIEB6aCDnspLlrZDml4vovazmqKHlnZfjgIJcclxuICAgICAqL1xyXG4gICAgQHByb3BlcnR5KHtcclxuICAgICAgICB0eXBlOiBSb3RhdGlvbk92ZXJ0aW1lTW9kdWxlLFxyXG4gICAgICAgIGRpc3BsYXlPcmRlcjogMjIsXHJcbiAgICAgICAgdG9vbHRpcDon5peL6L2s5qih5Z2XJyxcclxuICAgIH0pXHJcbiAgICBwdWJsaWMgZ2V0IHJvdGF0aW9uT3ZlcnRpbWVNb2R1bGUgKCkge1xyXG4gICAgICAgIGlmIChFRElUT1IpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9yb3RhdGlvbk92ZXJ0aW1lTW9kdWxlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yb3RhdGlvbk92ZXJ0aW1lTW9kdWxlID0gbmV3IFJvdGF0aW9uT3ZlcnRpbWVNb2R1bGUoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JvdGF0aW9uT3ZlcnRpbWVNb2R1bGUuYmluZFRhcmdldCh0aGlzLnByb2Nlc3NvciEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9yb3RhdGlvbk92ZXJ0aW1lTW9kdWxlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgcm90YXRpb25PdmVydGltZU1vZHVsZSAodmFsKSB7XHJcbiAgICAgICAgaWYgKCF2YWwpIHJldHVybjtcclxuICAgICAgICB0aGlzLl9yb3RhdGlvbk92ZXJ0aW1lTW9kdWxlID0gdmFsO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHRleHR1cmUgYW5pbWF0aW9uIG1vZHVsZVxyXG4gICAgQHByb3BlcnR5KHt0eXBlOiBUZXh0dXJlQW5pbWF0aW9uTW9kdWxlfSlcclxuICAgIF90ZXh0dXJlQW5pbWF0aW9uTW9kdWxlOlRleHR1cmVBbmltYXRpb25Nb2R1bGUgfCBudWxsID0gbnVsbDtcclxuICAgIC8qKlxyXG4gICAgICogQHpoIOi0tOWbvuWKqOeUu+aooeWdl+OAglxyXG4gICAgICovXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHR5cGU6IFRleHR1cmVBbmltYXRpb25Nb2R1bGUsXHJcbiAgICAgICAgZGlzcGxheU9yZGVyOiAyNCxcclxuICAgICAgICB0b29sdGlwOifotLTlm77liqjnlLvmqKHlnZcnLFxyXG4gICAgfSlcclxuICAgIHB1YmxpYyBnZXQgdGV4dHVyZUFuaW1hdGlvbk1vZHVsZSAoKSB7XHJcbiAgICAgICAgaWYgKEVESVRPUikge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuX3RleHR1cmVBbmltYXRpb25Nb2R1bGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RleHR1cmVBbmltYXRpb25Nb2R1bGUgPSBuZXcgVGV4dHVyZUFuaW1hdGlvbk1vZHVsZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdGV4dHVyZUFuaW1hdGlvbk1vZHVsZS5iaW5kVGFyZ2V0KHRoaXMucHJvY2Vzc29yISk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RleHR1cmVBbmltYXRpb25Nb2R1bGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldCB0ZXh0dXJlQW5pbWF0aW9uTW9kdWxlICh2YWwpIHtcclxuICAgICAgICBpZiAoIXZhbCkgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuX3RleHR1cmVBbmltYXRpb25Nb2R1bGUgPSB2YWw7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gdHJhaWwgbW9kdWxlXHJcbiAgICBAcHJvcGVydHkoe3R5cGU6IFRyYWlsTW9kdWxlfSlcclxuICAgIF90cmFpbE1vZHVsZTpUcmFpbE1vZHVsZSB8IG51bGwgPSBudWxsO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAemgg57KS5a2Q6L2o6L+55qih5Z2X44CCXHJcbiAgICAgKi9cclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgdHlwZTogVHJhaWxNb2R1bGUsXHJcbiAgICAgICAgZGlzcGxheU9yZGVyOiAyNSxcclxuICAgICAgICB0b29sdGlwOifmi5blsL7mqKHlnZcnLFxyXG4gICAgfSlcclxuICAgIHB1YmxpYyBnZXQgdHJhaWxNb2R1bGUgKCkge1xyXG4gICAgICAgIGlmIChFRElUT1IpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl90cmFpbE1vZHVsZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhaWxNb2R1bGUgPSBuZXcgVHJhaWxNb2R1bGUoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RyYWlsTW9kdWxlLm9uSW5pdCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RyYWlsTW9kdWxlLm9uRW5hYmxlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyYWlsTW9kdWxlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQgdHJhaWxNb2R1bGUgKHZhbCkge1xyXG4gICAgICAgIGlmICghdmFsKSByZXR1cm47XHJcbiAgICAgICAgdGhpcy5fdHJhaWxNb2R1bGUgPSB2YWw7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcGFydGljbGUgc3lzdGVtIHJlbmRlcmVyXHJcbiAgICBAcHJvcGVydHkoe1xyXG4gICAgICAgIHR5cGU6IFBhcnRpY2xlU3lzdGVtUmVuZGVyZXIsXHJcbiAgICAgICAgZGlzcGxheU9yZGVyOiAyNixcclxuICAgICAgICB0b29sdGlwOifmuLLmn5PmqKHlnZcnLFxyXG4gICAgfSlcclxuICAgIHB1YmxpYyByZW5kZXJlcjogUGFydGljbGVTeXN0ZW1SZW5kZXJlciA9IG5ldyBQYXJ0aWNsZVN5c3RlbVJlbmRlcmVyKCk7XHJcblxyXG4gICAgLy8gc2VyaWxpemVkIGN1bGxpbmdcclxuICAgIEBwcm9wZXJ0eSh7XHJcbiAgICAgICAgZGlzcGxheU9yZGVyOiAyNyxcclxuICAgICAgICB0b29sdGlwOifmmK/lkKbliZTpmaTpnZ4gZW5hYmxlIOeahOaooeWdl+aVsOaNricsXHJcbiAgICB9KVxyXG4gICAgcHVibGljIGVuYWJsZUN1bGxpbmc6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBpZ25vcmVcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfaXNQbGF5aW5nOiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBfaXNQYXVzZWQ6IGJvb2xlYW47XHJcbiAgICBwcml2YXRlIF9pc1N0b3BwZWQ6IGJvb2xlYW47XHJcbiAgICBwcml2YXRlIF9pc0VtaXR0aW5nOiBib29sZWFuO1xyXG5cclxuICAgIHByaXZhdGUgX3RpbWU6IG51bWJlcjsgIC8vIHBsYXliYWNrIHBvc2l0aW9uIGluIHNlY29uZHMuXHJcbiAgICBwcml2YXRlIF9lbWl0UmF0ZVRpbWVDb3VudGVyOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIF9lbWl0UmF0ZURpc3RhbmNlQ291bnRlcjogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfb2xkV1BvczogVmVjMztcclxuICAgIHByaXZhdGUgX2N1cldQb3M6IFZlYzM7XHJcblxyXG4gICAgcHJpdmF0ZSBfY3VzdG9tRGF0YTE6IFZlYzI7XHJcbiAgICBwcml2YXRlIF9jdXN0b21EYXRhMjogVmVjMjtcclxuXHJcbiAgICBwcml2YXRlIF9zdWJFbWl0dGVyczogYW55W107IC8vIGFycmF5IG9mIHsgZW1pdHRlcjogUGFydGljbGVTeXN0ZW1Db21wb25lbnQsIHR5cGU6ICdiaXJ0aCcsICdjb2xsaXNpb24nIG9yICdkZWF0aCd9XHJcblxyXG4gICAgQHByb3BlcnR5XHJcbiAgICBwcml2YXRlIF9wcmV3YXJtID0gZmFsc2U7XHJcblxyXG4gICAgQHByb3BlcnR5XHJcbiAgICBwcml2YXRlIF9jYXBhY2l0eSA9IDEwMDtcclxuXHJcbiAgICBAcHJvcGVydHlcclxuICAgIHByaXZhdGUgX3NpbXVsYXRpb25TcGFjZSA9IFNwYWNlLkxvY2FsO1xyXG5cclxuICAgIHB1YmxpYyBwcm9jZXNzb3I6IElQYXJ0aWNsZVN5c3RlbVJlbmRlcmVyIHwgbnVsbCA9IG51bGw7XHJcblxyXG4gICAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcblxyXG4gICAgICAgIHRoaXMucmF0ZU92ZXJUaW1lLmNvbnN0YW50ID0gMTA7XHJcbiAgICAgICAgdGhpcy5zdGFydExpZmV0aW1lLmNvbnN0YW50ID0gNTtcclxuICAgICAgICB0aGlzLnN0YXJ0U2l6ZVguY29uc3RhbnQgPSAxO1xyXG4gICAgICAgIHRoaXMuc3RhcnRTcGVlZC5jb25zdGFudCA9IDU7XHJcblxyXG4gICAgICAgIC8vIGludGVybmFsIHN0YXR1c1xyXG4gICAgICAgIHRoaXMuX2lzUGxheWluZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX2lzUGF1c2VkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5faXNTdG9wcGVkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9pc0VtaXR0aW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHRoaXMuX3RpbWUgPSAwLjA7ICAvLyBwbGF5YmFjayBwb3NpdGlvbiBpbiBzZWNvbmRzLlxyXG4gICAgICAgIHRoaXMuX2VtaXRSYXRlVGltZUNvdW50ZXIgPSAwLjA7XHJcbiAgICAgICAgdGhpcy5fZW1pdFJhdGVEaXN0YW5jZUNvdW50ZXIgPSAwLjA7XHJcbiAgICAgICAgdGhpcy5fb2xkV1BvcyA9IG5ldyBWZWMzKCk7XHJcbiAgICAgICAgdGhpcy5fY3VyV1BvcyA9IG5ldyBWZWMzKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX2N1c3RvbURhdGExID0gbmV3IFZlYzIoKTtcclxuICAgICAgICB0aGlzLl9jdXN0b21EYXRhMiA9IG5ldyBWZWMyKCk7XHJcblxyXG4gICAgICAgIHRoaXMuX3N1YkVtaXR0ZXJzID0gW107IC8vIGFycmF5IG9mIHsgZW1pdHRlcjogUGFydGljbGVTeXN0ZW1Db21wb25lbnQsIHR5cGU6ICdiaXJ0aCcsICdjb2xsaXNpb24nIG9yICdkZWF0aCd9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG9uTG9hZCAoKSB7XHJcbiAgICAgICAgLy8gSEFDSywgVE9ET1xyXG4gICAgICAgIHRoaXMucmVuZGVyZXIub25Jbml0KHRoaXMpO1xyXG4gICAgICAgIHRoaXMuX3NoYXBlTW9kdWxlICYmIHRoaXMuX3NoYXBlTW9kdWxlLm9uSW5pdCh0aGlzKTtcclxuICAgICAgICB0aGlzLl90cmFpbE1vZHVsZSAmJiB0aGlzLl90cmFpbE1vZHVsZS5vbkluaXQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5iaW5kTW9kdWxlKCk7XHJcbiAgICAgICAgdGhpcy5fcmVzZXRQb3NpdGlvbigpO1xyXG5cclxuICAgICAgICAvLyB0aGlzLl9zeXN0ZW0uYWRkKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBfb25NYXRlcmlhbE1vZGlmaWVkIChpbmRleDogbnVtYmVyLCBtYXRlcmlhbDogTWF0ZXJpYWwpIHtcclxuICAgICAgICB0aGlzLnByb2Nlc3NvciEub25NYXRlcmlhbE1vZGlmaWVkKGluZGV4LCBtYXRlcmlhbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIF9vblJlYnVpbGRQU08gKGluZGV4OiBudW1iZXIsIG1hdGVyaWFsOiBNYXRlcmlhbCkge1xyXG4gICAgICAgIHRoaXMucHJvY2Vzc29yIS5vblJlYnVpbGRQU08oaW5kZXgsIG1hdGVyaWFsKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgX2NvbGxlY3RNb2RlbHMgKCk6IE1vZGVsW10ge1xyXG4gICAgICAgIHRoaXMuX21vZGVscy5sZW5ndGggPSAwO1xyXG4gICAgICAgIHRoaXMuX21vZGVscy5wdXNoKCh0aGlzLnByb2Nlc3NvciBhcyBhbnkpLl9tb2RlbCk7XHJcbiAgICAgICAgaWYgKHRoaXMuX3RyYWlsTW9kdWxlICYmIHRoaXMuX3RyYWlsTW9kdWxlLmVuYWJsZSAmJiAodGhpcy5fdHJhaWxNb2R1bGUgYXMgYW55KS5fdHJhaWxNb2RlbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9tb2RlbHMucHVzaCgodGhpcy5fdHJhaWxNb2R1bGUgYXMgYW55KS5fdHJhaWxNb2RlbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9tb2RlbHM7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIF9hdHRhY2hUb1NjZW5lICgpIHtcclxuICAgICAgICB0aGlzLnByb2Nlc3NvciEuYXR0YWNoVG9TY2VuZSgpO1xyXG4gICAgICAgIGlmICh0aGlzLl90cmFpbE1vZHVsZSAmJiB0aGlzLl90cmFpbE1vZHVsZS5lbmFibGUpIHtcclxuICAgICAgICAgICAgdGhpcy5fdHJhaWxNb2R1bGUuX2F0dGFjaFRvU2NlbmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIF9kZXRhY2hGcm9tU2NlbmUgKCkge1xyXG4gICAgICAgIHRoaXMucHJvY2Vzc29yIS5kZXRhY2hGcm9tU2NlbmUoKTtcclxuICAgICAgICBpZiAodGhpcy5fdHJhaWxNb2R1bGUgJiYgdGhpcy5fdHJhaWxNb2R1bGUuZW5hYmxlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3RyYWlsTW9kdWxlLl9kZXRhY2hGcm9tU2NlbmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGJpbmRNb2R1bGUgKCkge1xyXG4gICAgICAgIHRoaXMuX2NvbG9yT3ZlckxpZmV0aW1lTW9kdWxlICYmIHRoaXMuX2NvbG9yT3ZlckxpZmV0aW1lTW9kdWxlLmJpbmRUYXJnZXQodGhpcy5wcm9jZXNzb3IhKTtcclxuICAgICAgICB0aGlzLl9zaXplT3ZlcnRpbWVNb2R1bGUgJiYgdGhpcy5fc2l6ZU92ZXJ0aW1lTW9kdWxlLmJpbmRUYXJnZXQodGhpcy5wcm9jZXNzb3IhKTtcclxuICAgICAgICB0aGlzLl9yb3RhdGlvbk92ZXJ0aW1lTW9kdWxlICYmIHRoaXMuX3JvdGF0aW9uT3ZlcnRpbWVNb2R1bGUuYmluZFRhcmdldCh0aGlzLnByb2Nlc3NvciEpO1xyXG4gICAgICAgIHRoaXMuX2ZvcmNlT3ZlcnRpbWVNb2R1bGUgJiYgdGhpcy5fZm9yY2VPdmVydGltZU1vZHVsZS5iaW5kVGFyZ2V0KHRoaXMucHJvY2Vzc29yISk7XHJcbiAgICAgICAgdGhpcy5fbGltaXRWZWxvY2l0eU92ZXJ0aW1lTW9kdWxlICYmIHRoaXMuX2xpbWl0VmVsb2NpdHlPdmVydGltZU1vZHVsZS5iaW5kVGFyZ2V0KHRoaXMucHJvY2Vzc29yISk7XHJcbiAgICAgICAgdGhpcy5fdmVsb2NpdHlPdmVydGltZU1vZHVsZSAmJiB0aGlzLl92ZWxvY2l0eU92ZXJ0aW1lTW9kdWxlLmJpbmRUYXJnZXQodGhpcy5wcm9jZXNzb3IhKTtcclxuICAgICAgICB0aGlzLl90ZXh0dXJlQW5pbWF0aW9uTW9kdWxlICYmIHRoaXMuX3RleHR1cmVBbmltYXRpb25Nb2R1bGUuYmluZFRhcmdldCh0aGlzLnByb2Nlc3NvciEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRPRE86IEZhc3QgZm9yd2FyZCBjdXJyZW50IHBhcnRpY2xlIHN5c3RlbSBieSBzaW11bGF0aW5nIHBhcnRpY2xlcyBvdmVyIGdpdmVuIHBlcmlvZCBvZiB0aW1lLCB0aGVuIHBhdXNlIGl0LlxyXG4gICAgLy8gc2ltdWxhdGUodGltZSwgd2l0aENoaWxkcmVuLCByZXN0YXJ0LCBmaXhlZFRpbWVTdGVwKSB7XHJcblxyXG4gICAgLy8gfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5pKt5pS+57KS5a2Q5pWI5p6c44CCXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBwbGF5ICgpIHtcclxuICAgICAgICBpZiAodGhpcy5faXNQYXVzZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5faXNQYXVzZWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzU3RvcHBlZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9pc1N0b3BwZWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2lzUGxheWluZyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5faXNFbWl0dGluZyA9IHRydWU7XHJcblxyXG4gICAgICAgIHRoaXMuX3Jlc2V0UG9zaXRpb24oKTtcclxuXHJcbiAgICAgICAgLy8gcHJld2FybVxyXG4gICAgICAgIGlmICh0aGlzLl9wcmV3YXJtKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3ByZXdhcm1TeXN0ZW0oKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmmoLlgZzmkq3mlL7nspLlrZDmlYjmnpzjgIJcclxuICAgICAqL1xyXG4gICAgcHVibGljIHBhdXNlICgpIHtcclxuICAgICAgICBpZiAodGhpcy5faXNTdG9wcGVkKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybigncGF1c2UoKTogcGFydGljbGUgc3lzdGVtIGlzIGFscmVhZHkgc3RvcHBlZC4nKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5faXNQbGF5aW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2lzUGxheWluZyA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5faXNQYXVzZWQgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5YGc5q2i5pKt5pS+57KS5a2Q44CCXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdG9wICgpIHtcclxuICAgICAgICBpZiAodGhpcy5faXNQbGF5aW5nIHx8IHRoaXMuX2lzUGF1c2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xlYXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzUGxheWluZykge1xyXG4gICAgICAgICAgICB0aGlzLl9pc1BsYXlpbmcgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzUGF1c2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2lzUGF1c2VkID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl90aW1lID0gMC4wO1xyXG4gICAgICAgIHRoaXMuX2VtaXRSYXRlVGltZUNvdW50ZXIgPSAwLjA7XHJcbiAgICAgICAgdGhpcy5fZW1pdFJhdGVEaXN0YW5jZUNvdW50ZXIgPSAwLjA7XHJcblxyXG4gICAgICAgIHRoaXMuX2lzU3RvcHBlZCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gcmVtb3ZlIGFsbCBwYXJ0aWNsZXMgZnJvbSBjdXJyZW50IHBhcnRpY2xlIHN5c3RlbS5cclxuICAgIC8qKlxyXG4gICAgICog5bCG5omA5pyJ57KS5a2Q5LuO57KS5a2Q57O757uf5Lit5riF6Zmk44CCXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBjbGVhciAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZW5hYmxlZEluSGllcmFyY2h5KSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc29yIS5jbGVhcigpO1xyXG4gICAgICAgICAgICB0aGlzLl90cmFpbE1vZHVsZSAmJiB0aGlzLl90cmFpbE1vZHVsZS5jbGVhcigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEB6aCDojrflj5blvZPliY3nspLlrZDmlbDph49cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldFBhcnRpY2xlQ291bnQgKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NvciEuZ2V0UGFydGljbGVDb3VudCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGlnbm9yZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0Q3VzdG9tRGF0YTEgKHgsIHkpIHtcclxuICAgICAgICBWZWMyLnNldCh0aGlzLl9jdXN0b21EYXRhMSwgeCwgeSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldEN1c3RvbURhdGEyICh4LCB5KSB7XHJcbiAgICAgICAgVmVjMi5zZXQodGhpcy5fY3VzdG9tRGF0YTIsIHgsIHkpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvbkRlc3Ryb3kgKCkge1xyXG4gICAgICAgIC8vIHRoaXMuX3N5c3RlbS5yZW1vdmUodGhpcyk7XHJcbiAgICAgICAgdGhpcy5wcm9jZXNzb3IhLm9uRGVzdHJveSgpO1xyXG4gICAgICAgIHRoaXMuX3RyYWlsTW9kdWxlICYmIHRoaXMuX3RyYWlsTW9kdWxlLmRlc3Ryb3koKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgb25FbmFibGUgKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnBsYXlPbkF3YWtlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGxheSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnByb2Nlc3NvciEub25FbmFibGUoKTtcclxuICAgICAgICB0aGlzLl90cmFpbE1vZHVsZSAmJiB0aGlzLl90cmFpbE1vZHVsZS5vbkVuYWJsZSgpO1xyXG4gICAgfVxyXG4gICAgcHJvdGVjdGVkIG9uRGlzYWJsZSAoKSB7XHJcbiAgICAgICAgdGhpcy5wcm9jZXNzb3IhLm9uRGlzYWJsZSgpO1xyXG4gICAgICAgIHRoaXMuX3RyYWlsTW9kdWxlICYmIHRoaXMuX3RyYWlsTW9kdWxlLm9uRGlzYWJsZSgpO1xyXG4gICAgfVxyXG4gICAgcHJvdGVjdGVkIHVwZGF0ZSAoZHQpIHtcclxuICAgICAgICBjb25zdCBzY2FsZWREZWx0YVRpbWUgPSBkdCAqIHRoaXMuc2ltdWxhdGlvblNwZWVkO1xyXG4gICAgICAgIGlmICh0aGlzLl9pc1BsYXlpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5fdGltZSArPSBzY2FsZWREZWx0YVRpbWU7XHJcblxyXG4gICAgICAgICAgICAvLyBFeGVjdXRlIGVtaXNzaW9uXHJcbiAgICAgICAgICAgIHRoaXMuX2VtaXQoc2NhbGVkRGVsdGFUaW1lKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHNpbXVsYXRpb24sIHVwZGF0ZSBwYXJ0aWNsZXMuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnByb2Nlc3NvciEudXBkYXRlUGFydGljbGVzKHNjYWxlZERlbHRhVGltZSkgPT09IDAgJiYgIXRoaXMuX2lzRW1pdHRpbmcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyB1cGRhdGUgcmVuZGVyIGRhdGFcclxuICAgICAgICAgICAgdGhpcy5wcm9jZXNzb3IhLnVwZGF0ZVJlbmRlckRhdGEoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHVwZGF0ZSB0cmFpbFxyXG4gICAgICAgICAgICBpZiAodGhpcy5fdHJhaWxNb2R1bGUgJiYgdGhpcy5fdHJhaWxNb2R1bGUuZW5hYmxlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90cmFpbE1vZHVsZS51cGRhdGVSZW5kZXJEYXRhKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIF9vblZpc2liaWxpdHlDaGFuZ2UgKHZhbCkge1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBpZiAodGhpcy5wcm9jZXNzb3IuX21vZGVsKSB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgdGhpcy5wcm9jZXNzb3IuX21vZGVsLnZpc0ZsYWdzID0gdmFsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGVtaXQgKGNvdW50LCBkdCkge1xyXG4gICAgICAgIGNvbnN0IGRlbHRhID0gdGhpcy5fdGltZSAvIHRoaXMuZHVyYXRpb247XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9zaW11bGF0aW9uU3BhY2UgPT09IFNwYWNlLldvcmxkKSB7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5nZXRXb3JsZE1hdHJpeChfd29ybGRfbWF0KTtcclxuICAgICAgICAgICAgdGhpcy5ub2RlLmdldFdvcmxkUm90YXRpb24oX3dvcmxkX3JvbCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyArK2kpIHtcclxuICAgICAgICAgICAgY29uc3QgcGFydGljbGUgPSB0aGlzLnByb2Nlc3NvciEuZ2V0RnJlZVBhcnRpY2xlKCk7XHJcbiAgICAgICAgICAgIGlmIChwYXJ0aWNsZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHJhbmQgPSBwc2V1ZG9SYW5kb20ocmFuZG9tUmFuZ2VJbnQoMCwgSU5UX01BWCkpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3NoYXBlTW9kdWxlICYmIHRoaXMuX3NoYXBlTW9kdWxlLmVuYWJsZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2hhcGVNb2R1bGUuZW1pdChwYXJ0aWNsZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBWZWMzLnNldChwYXJ0aWNsZS5wb3NpdGlvbiwgMCwgMCwgMCk7XHJcbiAgICAgICAgICAgICAgICBWZWMzLmNvcHkocGFydGljbGUudmVsb2NpdHksIHBhcnRpY2xlRW1pdFpBeGlzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3RleHR1cmVBbmltYXRpb25Nb2R1bGUgJiYgdGhpcy5fdGV4dHVyZUFuaW1hdGlvbk1vZHVsZS5lbmFibGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RleHR1cmVBbmltYXRpb25Nb2R1bGUuaW5pdChwYXJ0aWNsZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIFZlYzMubXVsdGlwbHlTY2FsYXIocGFydGljbGUudmVsb2NpdHksIHBhcnRpY2xlLnZlbG9jaXR5LCB0aGlzLnN0YXJ0U3BlZWQuZXZhbHVhdGUoZGVsdGEsIHJhbmQpISk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5fc2ltdWxhdGlvblNwYWNlID09PSBTcGFjZS5Xb3JsZCkge1xyXG4gICAgICAgICAgICAgICAgVmVjMy50cmFuc2Zvcm1NYXQ0KHBhcnRpY2xlLnBvc2l0aW9uLCBwYXJ0aWNsZS5wb3NpdGlvbiwgX3dvcmxkX21hdCk7XHJcbiAgICAgICAgICAgICAgICBWZWMzLnRyYW5zZm9ybVF1YXQocGFydGljbGUudmVsb2NpdHksIHBhcnRpY2xlLnZlbG9jaXR5LCBfd29ybGRfcm9sKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgVmVjMy5jb3B5KHBhcnRpY2xlLnVsdGltYXRlVmVsb2NpdHksIHBhcnRpY2xlLnZlbG9jaXR5KTtcclxuICAgICAgICAgICAgLy8gYXBwbHkgc3RhcnRSb3RhdGlvbi5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc3RhcnRSb3RhdGlvbjNEKSB7XHJcbiAgICAgICAgICAgICAgICBWZWMzLnNldChwYXJ0aWNsZS5yb3RhdGlvbiwgdGhpcy5zdGFydFJvdGF0aW9uWC5ldmFsdWF0ZShkZWx0YSwgcmFuZCkhLFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRSb3RhdGlvblkuZXZhbHVhdGUoZGVsdGEsIHJhbmQpISxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0Um90YXRpb25aLmV2YWx1YXRlKGRlbHRhLCByYW5kKSEpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgVmVjMy5zZXQocGFydGljbGUucm90YXRpb24sIDAsIDAsIHRoaXMuc3RhcnRSb3RhdGlvblouZXZhbHVhdGUoZGVsdGEsIHJhbmQpISk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGFwcGx5IHN0YXJ0U2l6ZS5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc3RhcnRTaXplM0QpIHtcclxuICAgICAgICAgICAgICAgIFZlYzMuc2V0KHBhcnRpY2xlLnN0YXJ0U2l6ZSwgdGhpcy5zdGFydFNpemVYLmV2YWx1YXRlKGRlbHRhLCByYW5kKSEsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydFNpemVZLmV2YWx1YXRlKGRlbHRhLCByYW5kKSEsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydFNpemVaLmV2YWx1YXRlKGRlbHRhLCByYW5kKSEpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgVmVjMy5zZXQocGFydGljbGUuc3RhcnRTaXplLCB0aGlzLnN0YXJ0U2l6ZVguZXZhbHVhdGUoZGVsdGEsIHJhbmQpISwgMSwgMSk7XHJcbiAgICAgICAgICAgICAgICBwYXJ0aWNsZS5zdGFydFNpemUueSA9IHBhcnRpY2xlLnN0YXJ0U2l6ZS54O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFZlYzMuY29weShwYXJ0aWNsZS5zaXplLCBwYXJ0aWNsZS5zdGFydFNpemUpO1xyXG5cclxuICAgICAgICAgICAgLy8gYXBwbHkgc3RhcnRDb2xvci5cclxuICAgICAgICAgICAgcGFydGljbGUuc3RhcnRDb2xvci5zZXQodGhpcy5zdGFydENvbG9yLmV2YWx1YXRlKGRlbHRhLCByYW5kKSk7XHJcbiAgICAgICAgICAgIHBhcnRpY2xlLmNvbG9yLnNldChwYXJ0aWNsZS5zdGFydENvbG9yKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGFwcGx5IHN0YXJ0TGlmZXRpbWUuXHJcbiAgICAgICAgICAgIHBhcnRpY2xlLnN0YXJ0TGlmZXRpbWUgPSB0aGlzLnN0YXJ0TGlmZXRpbWUuZXZhbHVhdGUoZGVsdGEsIHJhbmQpISArIGR0O1xyXG4gICAgICAgICAgICBwYXJ0aWNsZS5yZW1haW5pbmdMaWZldGltZSA9IHBhcnRpY2xlLnN0YXJ0TGlmZXRpbWU7XHJcblxyXG4gICAgICAgICAgICBwYXJ0aWNsZS5yYW5kb21TZWVkID0gcmFuZG9tUmFuZ2VJbnQoMCwgMjMzMjgwKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc29yIS5zZXROZXdQYXJ0aWNsZShwYXJ0aWNsZSk7XHJcblxyXG4gICAgICAgIH0gLy8gZW5kIG9mIHBhcnRpY2xlcyBmb3JMb29wLlxyXG4gICAgfVxyXG5cclxuICAgIC8vIGluaXRpYWxpemUgcGFydGljbGUgc3lzdGVtIGFzIHRob3VnaCBpdCBoYWQgYWxyZWFkeSBjb21wbGV0ZWQgYSBmdWxsIGN5Y2xlLlxyXG4gICAgcHJpdmF0ZSBfcHJld2FybVN5c3RlbSAoKSB7XHJcbiAgICAgICAgdGhpcy5zdGFydERlbGF5Lm1vZGUgPSBNb2RlLkNvbnN0YW50OyAvLyBjbGVhciBzdGFydERlbGF5LlxyXG4gICAgICAgIHRoaXMuc3RhcnREZWxheS5jb25zdGFudCA9IDA7XHJcbiAgICAgICAgY29uc3QgZHQgPSAxLjA7IC8vIHNob3VsZCB1c2UgdmFyeWluZyB2YWx1ZT9cclxuICAgICAgICBjb25zdCBjbnQgPSB0aGlzLmR1cmF0aW9uIC8gZHQ7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjbnQ7ICsraSkge1xyXG4gICAgICAgICAgICB0aGlzLl90aW1lICs9IGR0O1xyXG4gICAgICAgICAgICB0aGlzLl9lbWl0KGR0KTtcclxuICAgICAgICAgICAgdGhpcy5wcm9jZXNzb3IhLnVwZGF0ZVBhcnRpY2xlcyhkdCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGludGVybmFsIGZ1bmN0aW9uXHJcbiAgICBwcml2YXRlIF9lbWl0IChkdCkge1xyXG4gICAgICAgIC8vIGVtaXQgcGFydGljbGVzLlxyXG4gICAgICAgIGNvbnN0IHN0YXJ0RGVsYXkgPSB0aGlzLnN0YXJ0RGVsYXkuZXZhbHVhdGUoMCwgMSkhO1xyXG4gICAgICAgIGlmICh0aGlzLl90aW1lID4gc3RhcnREZWxheSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fdGltZSA+ICh0aGlzLmR1cmF0aW9uICsgc3RhcnREZWxheSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMuX3RpbWUgPSBzdGFydERlbGF5OyAvLyBkZWxheSB3aWxsIG5vdCBiZSBhcHBsaWVkIGZyb20gdGhlIHNlY29uZCBsb29wLihVbml0eSlcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMuX2VtaXRSYXRlVGltZUNvdW50ZXIgPSAwLjA7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzLl9lbWl0UmF0ZURpc3RhbmNlQ291bnRlciA9IDAuMDtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5sb29wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNFbWl0dGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gZW1pdCBieSByYXRlT3ZlclRpbWVcclxuICAgICAgICAgICAgdGhpcy5fZW1pdFJhdGVUaW1lQ291bnRlciArPSB0aGlzLnJhdGVPdmVyVGltZS5ldmFsdWF0ZSh0aGlzLl90aW1lIC8gdGhpcy5kdXJhdGlvbiwgMSkhICogZHQ7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9lbWl0UmF0ZVRpbWVDb3VudGVyID4gMSAmJiB0aGlzLl9pc0VtaXR0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbWl0TnVtID0gTWF0aC5mbG9vcih0aGlzLl9lbWl0UmF0ZVRpbWVDb3VudGVyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXRSYXRlVGltZUNvdW50ZXIgLT0gZW1pdE51bTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdChlbWl0TnVtLCBkdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gZW1pdCBieSByYXRlT3ZlckRpc3RhbmNlXHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5nZXRXb3JsZFBvc2l0aW9uKHRoaXMuX2N1cldQb3MpO1xyXG4gICAgICAgICAgICBjb25zdCBkaXN0YW5jZSA9IFZlYzMuZGlzdGFuY2UodGhpcy5fY3VyV1BvcywgdGhpcy5fb2xkV1Bvcyk7XHJcbiAgICAgICAgICAgIFZlYzMuY29weSh0aGlzLl9vbGRXUG9zLCB0aGlzLl9jdXJXUG9zKTtcclxuICAgICAgICAgICAgdGhpcy5fZW1pdFJhdGVEaXN0YW5jZUNvdW50ZXIgKz0gZGlzdGFuY2UgKiB0aGlzLnJhdGVPdmVyRGlzdGFuY2UuZXZhbHVhdGUodGhpcy5fdGltZSAvIHRoaXMuZHVyYXRpb24sIDEpITtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2VtaXRSYXRlRGlzdGFuY2VDb3VudGVyID4gMSAmJiB0aGlzLl9pc0VtaXR0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbWl0TnVtID0gTWF0aC5mbG9vcih0aGlzLl9lbWl0UmF0ZURpc3RhbmNlQ291bnRlcik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0UmF0ZURpc3RhbmNlQ291bnRlciAtPSBlbWl0TnVtO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KGVtaXROdW0sIGR0KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gYnVyc3RzXHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgYnVyc3Qgb2YgdGhpcy5idXJzdHMpIHtcclxuICAgICAgICAgICAgICAgIGJ1cnN0LnVwZGF0ZSh0aGlzLCBkdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfcmVzZXRQb3NpdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5ub2RlLmdldFdvcmxkUG9zaXRpb24odGhpcy5fb2xkV1Bvcyk7XHJcbiAgICAgICAgVmVjMy5jb3B5KHRoaXMuX2N1cldQb3MsIHRoaXMuX29sZFdQb3MpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYWRkU3ViRW1pdHRlciAoc3ViRW1pdHRlcikge1xyXG4gICAgICAgIHRoaXMuX3N1YkVtaXR0ZXJzLnB1c2goc3ViRW1pdHRlcik7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZW1vdmVTdWJFbWl0dGVyIChpZHgpIHtcclxuICAgICAgICB0aGlzLl9zdWJFbWl0dGVycy5zcGxpY2UodGhpcy5fc3ViRW1pdHRlcnMuaW5kZXhPZihpZHgpLCAxKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFkZEJ1cnN0IChidXJzdCkge1xyXG4gICAgICAgIHRoaXMuYnVyc3RzLnB1c2goYnVyc3QpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVtb3ZlQnVyc3QgKGlkeCkge1xyXG4gICAgICAgIHRoaXMuYnVyc3RzLnNwbGljZSh0aGlzLmJ1cnN0cy5pbmRleE9mKGlkeCksIDEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGlnbm9yZVxyXG4gICAgICovXHJcbiAgICBnZXQgaXNQbGF5aW5nICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faXNQbGF5aW5nO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBpc1BhdXNlZCAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzUGF1c2VkO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBpc1N0b3BwZWQgKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pc1N0b3BwZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGlzRW1pdHRpbmcgKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pc0VtaXR0aW5nO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB0aW1lICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdGltZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgX29uQmVmb3JlU2VyaWFsaXplIChwcm9wcykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVuYWJsZUN1bGxpbmcgPyBwcm9wcy5maWx0ZXIocCA9PiAhUEFSVElDTEVfTU9EVUxFX1BST1BFUlRZLmluY2x1ZGVzKHApIHx8IHRoaXNbcF0uZW5hYmxlKSA6IHByb3BzO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==