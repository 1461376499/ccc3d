(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./components/system.js", "./data/object.js", "./event/event-target.js", "./game.js", "./load-pipeline/auto-release-utils.js", "./math/index.js", "./platform/event-manager/event-manager.js", "./root.js", "./scene-graph/index.js", "./scene-graph/component-scheduler.js", "./scene-graph/node-activator.js", "./scheduler.js", "./utils/index.js", "./default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./components/system.js"), require("./data/object.js"), require("./event/event-target.js"), require("./game.js"), require("./load-pipeline/auto-release-utils.js"), require("./math/index.js"), require("./platform/event-manager/event-manager.js"), require("./root.js"), require("./scene-graph/index.js"), require("./scene-graph/component-scheduler.js"), require("./scene-graph/node-activator.js"), require("./scheduler.js"), require("./utils/index.js"), require("./default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.system, global.object, global.eventTarget, global.game, global.autoReleaseUtils, global.index, global.eventManager, global.root, global.index, global.componentScheduler, global.nodeActivator, global.scheduler, global.index, global.defaultConstants);
    global.director = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _system, _object, _eventTarget, _game, _autoReleaseUtils, _index, _eventManager, _root, _index2, _componentScheduler, _nodeActivator, _scheduler, _index3, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.director = _exports.Director = void 0;
  _system = _interopRequireDefault(_system);
  _eventManager = _interopRequireDefault(_eventManager);
  _nodeActivator = _interopRequireDefault(_nodeActivator);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  // ----------------------------------------------------------------------------------------------------------------------

  /**
   * @en
   * <p>
   *    ATTENTION: USE cc.director INSTEAD OF cc.Director.<br/>
   *    cc.director is a singleton object which manage your game's logic flow.<br/>
   *    Since the cc.director is a singleton, you don't need to call any constructor or create functions,<br/>
   *    the standard way to use it is by calling:<br/>
   *      - cc.director.methodName(); <br/>
   *
   *    It creates and handle the main Window and manages how and when to execute the Scenes.<br/>
   *    <br/>
   *    The cc.director is also responsible for:<br/>
   *      - initializing the OpenGL context<br/>
   *      - setting the OpenGL pixel format (default on is RGB565)<br/>
   *      - setting the OpenGL buffer depth (default on is 0-bit)<br/>
   *      - setting the color for clear screen (default one is BLACK)<br/>
   *      - setting the projection (default one is 3D)<br/>
   *      - setting the orientation (default one is Portrait)<br/>
   *      <br/>
   *    <br/>
   *    The cc.director also sets the default OpenGL context:<br/>
   *      - GL_TEXTURE_2D is enabled<br/>
   *      - GL_VERTEX_ARRAY is enabled<br/>
   *      - GL_COLOR_ARRAY is enabled<br/>
   *      - GL_TEXTURE_COORD_ARRAY is enabled<br/>
   * </p>
   * <p>
   *   cc.director also synchronizes timers with the refresh rate of the display.<br/>
   *   Features and Limitations:<br/>
   *      - Scheduled timers & drawing are synchronizes with the refresh rate of the display<br/>
   *      - Only supports animation intervals of 1/60 1/30 & 1/15<br/>
   * </p>
   *
   * @zh
   * <p>
   *     注意：用 cc.director 代替 cc.Director。<br/>
   *     cc.director 一个管理你的游戏的逻辑流程的单例对象。<br/>
   *     由于 cc.director 是一个单例，你不需要调用任何构造函数或创建函数，<br/>
   *     使用它的标准方法是通过调用：<br/>
   *       - cc.director.methodName();
   *     <br/>
   *     它创建和处理主窗口并且管理什么时候执行场景。<br/>
   *     <br/>
   *     cc.director 还负责：<br/>
   *      - 初始化 OpenGL 环境。<br/>
   *      - 设置OpenGL像素格式。(默认是 RGB565)<br/>
   *      - 设置OpenGL缓冲区深度 (默认是 0-bit)<br/>
   *      - 设置空白场景的颜色 (默认是 黑色)<br/>
   *      - 设置投影 (默认是 3D)<br/>
   *      - 设置方向 (默认是 Portrait)<br/>
   *    <br/>
   *    cc.director 设置了 OpenGL 默认环境 <br/>
   *      - GL_TEXTURE_2D   启用。<br/>
   *      - GL_VERTEX_ARRAY 启用。<br/>
   *      - GL_COLOR_ARRAY  启用。<br/>
   *      - GL_TEXTURE_COORD_ARRAY 启用。<br/>
   * </p>
   * <p>
   *   cc.director 也同步定时器与显示器的刷新速率。
   *   <br/>
   *   特点和局限性: <br/>
   *      - 将计时器 & 渲染与显示器的刷新频率同步。<br/>
   *      - 只支持动画的间隔 1/60 1/30 & 1/15。<br/>
   * </p>
   *
   * @class Director
   * @extends EventTarget
   */
  var Director = /*#__PURE__*/function (_EventTarget) {
    _inherits(Director, _EventTarget);

    /**
     * @en The event which will be triggered when the singleton of Director initialized.
     * @zh Director 单例初始化时触发的事件
     * @event Director.EVENT_INIT
     */

    /**
     * @en The event which will be triggered when the singleton of Director initialized.
     * @zh Director 单例初始化时触发的事件
     * @property {String} EVENT_INIT
     * @readonly
     */

    /**
     * @en The event which will be triggered when the singleton of Director reset.
     * @zh Director 单例重置时触发的事件
     * @event Director.EVENT_RESET
     */

    /**
     * @en The event which will be triggered when the singleton of Director reset.
     * @zh Director 单例重置时触发的事件
     * @property {String} EVENT_RESET
     * @readonly
     */

    /**
     * @en The event which will be triggered before loading a new scene.
     * @zh 加载新场景之前所触发的事件。
     * @event Director.EVENT_BEFORE_SCENE_LOADING
     * @param {String} sceneName - The loading scene name
     */

    /**
     * @en The event which will be triggered before loading a new scene.
     * @zh 加载新场景之前所触发的事件。
     * @property {String} EVENT_BEFORE_SCENE_LOADING
     * @readonly
     */

    /**
     * @en The event which will be triggered before launching a new scene.
     * @zh 运行新场景之前所触发的事件。
     * @event Director.EVENT_BEFORE_SCENE_LAUNCH
     * @param {String} sceneName - New scene which will be launched
     */

    /**
     * @en The event which will be triggered before launching a new scene.
     * @zh 运行新场景之前所触发的事件。
     * @property {String} EVENT_BEFORE_SCENE_LAUNCH
     * @readonly
     */

    /**
     * @en The event which will be triggered after launching a new scene.
     * @zh 运行新场景之后所触发的事件。
     * @event Director.EVENT_AFTER_SCENE_LAUNCH
     * @param {String} sceneName - New scene which is launched
     */

    /**
     * @en The event which will be triggered after launching a new scene.
     * @zh 运行新场景之后所触发的事件。
     * @property {String} EVENT_AFTER_SCENE_LAUNCH
     * @readonly
     */

    /**
     * @en The event which will be triggered at the beginning of every frame.
     * @zh 每个帧的开始时所触发的事件。
     * @event Director.EVENT_BEFORE_UPDATE
     */

    /**
     * @en The event which will be triggered at the beginning of every frame.
     * @zh 每个帧的开始时所触发的事件。
     * @property {String} EVENT_BEFORE_UPDATE
     * @readonly
     */

    /**
     * @en The event which will be triggered after engine and components update logic.
     * @zh 将在引擎和组件 “update” 逻辑之后所触发的事件。
     * @event Director.EVENT_AFTER_UPDATE
     */

    /**
     * @en The event which will be triggered after engine and components update logic.
     * @zh 将在引擎和组件 “update” 逻辑之后所触发的事件。
     * @property {String} EVENT_AFTER_UPDATE
     * @readonly
     */

    /**
     * @en The event which will be triggered before the rendering process.
     * @zh 渲染过程之前所触发的事件。
     * @event Director.EVENT_BEFORE_DRAW
     */

    /**
     * @en The event which will be triggered before the rendering process.
     * @zh 渲染过程之前所触发的事件。
     * @property {String} EVENT_BEFORE_DRAW
     * @readonly
     */

    /**
     * @en The event which will be triggered after the rendering process.
     * @zh 渲染过程之后所触发的事件。
     * @event Director.EVENT_AFTER_DRAW
     */

    /**
     * @en The event which will be triggered after the rendering process.
     * @zh 渲染过程之后所触发的事件。
     * @property {String} EVENT_AFTER_DRAW
     * @readonly
     */

    /**
     * The event which will be triggered before the physics process.<br/>
     * 物理过程之前所触发的事件。
     * @event Director.EVENT_BEFORE_PHYSICS
     * @readonly
     */

    /**
     * The event which will be triggered after the physics process.<br/>
     * 物理过程之后所触发的事件。
     * @event Director.EVENT_AFTER_PHYSICS
     * @readonly
     */
    function Director() {
      var _this;

      _classCallCheck(this, Director);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Director).call(this));
      _this._compScheduler = void 0;
      _this._nodeActivator = void 0;
      _this._invalid = void 0;
      _this._paused = void 0;
      _this._purgeDirectorInNextLoop = void 0;
      _this._root = void 0;
      _this._loadingScene = void 0;
      _this._scene = void 0;
      _this._totalFrames = void 0;
      _this._lastUpdate = void 0;
      _this._deltaTime = void 0;
      _this._scheduler = void 0;
      _this._systems = void 0;
      _this._invalid = false; // paused?

      _this._paused = false; // purge?

      _this._purgeDirectorInNextLoop = false; // root

      _this._root = null; // scenes

      _this._loadingScene = '';
      _this._scene = null; // FPS

      _this._totalFrames = 0;
      _this._lastUpdate = 0;
      _this._deltaTime = 0.0; // Scheduler for user registration update

      _this._scheduler = new _scheduler.Scheduler(); // Scheduler for life-cycle methods in component

      _this._compScheduler = new _componentScheduler.ComponentScheduler(); // Node activator

      _this._nodeActivator = new _nodeActivator.default();
      _this._systems = [];
      cc.game.once(_game.Game.EVENT_RENDERER_INITED, _this._initOnRendererInitialized, _assertThisInitialized(_this));
      return _this;
    }
    /**
     * calculates delta time since last time it was called
     */


    _createClass(Director, [{
      key: "calculateDeltaTime",
      value: function calculateDeltaTime() {
        var now = performance.now();
        this._deltaTime = (now - this._lastUpdate) / 1000;

        if (_defaultConstants.DEBUG && this._deltaTime > 1) {
          this._deltaTime = 1 / 60.0;
        }

        this._lastUpdate = now;
      }
      /**
       * @en
       * Converts a view coordinate to an WebGL coordinate<br/>
       * Useful to convert (multi) touches coordinates to the current layout (portrait or landscape)<br/>
       * Implementation can be found in directorWebGL.
       * @zh 将触摸点的屏幕坐标转换为 WebGL View 下的坐标。
       * @deprecated since v2.0
       */

    }, {
      key: "convertToGL",
      value: function convertToGL(uiPoint) {
        var container = cc.game.container;
        var view = cc.view;
        var box = container.getBoundingClientRect();
        var left = box.left + window.pageXOffset - container.clientLeft;
        var top = box.top + window.pageYOffset - container.clientTop;
        var x = view._devicePixelRatio * (uiPoint.x - left);
        var y = view._devicePixelRatio * (top + box.height - uiPoint.y);
        return view._isRotated ? (0, _index.v2)(view._viewportRect.width - y, x) : (0, _index.v2)(x, y);
      }
      /**
       * @en
       * Converts an OpenGL coordinate to a view coordinate<br/>
       * Useful to convert node points to window points for calls such as glScissor<br/>
       * Implementation can be found in directorWebGL.
       * @zh 将触摸点的 WebGL View 坐标转换为屏幕坐标。
       * @deprecated since v2.0
       */

    }, {
      key: "convertToUI",
      value: function convertToUI(glPoint) {
        var container = cc.game.container;
        var view = cc.view;
        var box = container.getBoundingClientRect();
        var left = box.left + window.pageXOffset - container.clientLeft;
        var top = box.top + window.pageYOffset - container.clientTop;
        var uiPoint = (0, _index.v2)(0, 0);

        if (view._isRotated) {
          uiPoint.x = left + glPoint.y / view._devicePixelRatio;
          uiPoint.y = top + box.height - (view._viewportRect.width - glPoint.x) / view._devicePixelRatio;
        } else {
          uiPoint.x = left + glPoint.x * view._devicePixelRatio;
          uiPoint.y = top + box.height - glPoint.y * view._devicePixelRatio;
        }

        return uiPoint;
      }
      /**
       * End the life of director in the next frame
       */

    }, {
      key: "end",
      value: function end() {
        this._purgeDirectorInNextLoop = true;
      }
      /**
       * @en
       * Returns the size of the WebGL view in points.<br/>
       * It takes into account any possible rotation (device orientation) of the window.
       * @zh 获取视图的大小，以点为单位。
       * @deprecated since v2.0
       */

    }, {
      key: "getWinSize",
      value: function getWinSize() {
        return (0, _index.size)(cc.winSize);
      }
      /**
       * @en
       * Returns the size of the OpenGL view in pixels.<br/>
       * It takes into account any possible rotation (device orientation) of the window.<br/>
       * On Mac winSize and winSizeInPixels return the same value.
       * (The pixel here refers to the resource resolution. If you want to get the physics resolution of device, you need to use cc.view.getFrameSize())
       * @zh
       * 获取视图大小，以像素为单位（这里的像素指的是资源分辨率。
       * 如果要获取屏幕物理分辨率，需要用 cc.view.getFrameSize()）
       * @deprecated since v2.0
       */

    }, {
      key: "getWinSizeInPixels",
      value: function getWinSizeInPixels() {
        return (0, _index.size)(cc.winSize);
      }
      /**
       * @en Pause the director's ticker, only involve the game logic execution.<br>
       * It won't pause the rendering process nor the event manager.<br>
       * If you want to pause the entire game including rendering, audio and event,<br>
       * please use cc.game.pause
       * @zh 暂停正在运行的场景，该暂停只会停止游戏逻辑执行，但是不会停止渲染和 UI 响应。<br>
       * 如果想要更彻底得暂停游戏，包含渲染，音频和事件，请使用 cc.game.pause 。
       */

    }, {
      key: "pause",
      value: function pause() {
        if (this._paused) {
          return;
        }

        this._paused = true;
      }
      /**
       * @en Removes cached all cocos2d cached data.
       * @zh 删除cocos2d所有的缓存数据
       * @deprecated since v2.0
       */

    }, {
      key: "purgeCachedData",
      value: function purgeCachedData() {
        cc.loader.releaseAll();
      }
      /**
       * @en Purge the cc.director itself, including unschedule all schedule,<br>
       * remove all event listeners, clean up and exit the running scene, stops all animations, clear cached data.
       * @zh 清除 cc.director 本身，包括停止所有的计时器，<br>
       * 移除所有的事件监听器，清理并退出当前运行的场景，停止所有动画，清理缓存数据。
       */

    }, {
      key: "purgeDirector",
      value: function purgeDirector() {
        // cleanup scheduler
        this._scheduler.unscheduleAll();

        this._compScheduler.unscheduleAll();

        this._nodeActivator.reset(); // Disable event dispatching


        if (_eventManager.default) {
          _eventManager.default.setEnabled(false);
        } // cc.renderer.clear();


        if (!_defaultConstants.EDITOR) {
          if (cc.isValid(this._scene)) {
            this._scene.destroy();
          }

          this._scene = null;
        }

        this.stopAnimation();

        if (this._root != null) {
          this._root.destroy();
        }

        this._root = null; // Clear all caches

        cc.loader.releaseAll();
      }
      /**
       * @en Reset the cc.director, can be used to restart the director after purge
       * @zh 重置 cc.director，可用于在清除后重启 director
       */

    }, {
      key: "reset",
      value: function reset() {
        this.purgeDirector();
        this.emit(Director.EVENT_RESET);

        if (_eventManager.default) {
          _eventManager.default.setEnabled(true);
        }

        this.startAnimation();
      }
      /**
       * @en
       * Run a scene. Replaces the running scene with a new one or enter the first scene.<br>
       * The new scene will be launched immediately.
       * @zh 运行指定场景。将正在运行的场景替换为（或重入为）新场景。新场景将立即启动。
       * @param scene - The need run scene.
       * @param onBeforeLoadScene - The function invoked at the scene before loading.
       * @param onLaunched - The function invoked at the scene after launch.
       */

    }, {
      key: "runSceneImmediate",
      value: function runSceneImmediate(scene, onBeforeLoadScene, onLaunched) {
        cc.assertID(scene instanceof cc.Scene, 1216);

        var uuid = cc.loader._getReferenceKey(scene.uuid); // Scene cannot be cached in loader, because it will be destroyed after switching.


        cc.loader.removeItem(uuid);

        if (_defaultConstants.BUILD && _defaultConstants.DEBUG) {
          console.time('InitScene');
        } // @ts-ignore


        scene._load(); // ensure scene initialized


        if (_defaultConstants.BUILD && _defaultConstants.DEBUG) {
          console.timeEnd('InitScene');
        } // Re-attach or replace persist nodes


        if (_defaultConstants.BUILD && _defaultConstants.DEBUG) {
          console.time('AttachPersist');
        }

        var persistNodeList = Object.keys(cc.game._persistRootNodes).map(function (x) {
          return cc.game._persistRootNodes[x];
        }); // tslint:disable-next-line: prefer-for-of

        for (var i = 0; i < persistNodeList.length; i++) {
          var node = persistNodeList[i];
          node.emit(cc.Node.SCENE_CHANGED_FOR_PERSISTS, scene.renderScene);
          var existNode = scene.getChildByUuid(node.uuid);

          if (existNode) {
            // scene also contains the persist node, select the old one
            var index = existNode.getSiblingIndex();

            existNode._destroyImmediate();

            scene.insertChild(node, index);
          } else {
            node.parent = scene;
          }
        }

        if (_defaultConstants.BUILD && _defaultConstants.DEBUG) {
          console.timeEnd('AttachPersist');
        }

        var oldScene = this._scene;

        if (!_defaultConstants.EDITOR) {
          // auto release assets
          if (_defaultConstants.BUILD && _defaultConstants.DEBUG) {
            console.time('AutoRelease');
          }

          var autoReleaseAssets = oldScene && oldScene.autoReleaseAssets && oldScene.dependAssets;
          (0, _autoReleaseUtils.autoRelease)(autoReleaseAssets, scene.dependAssets, persistNodeList);

          if (_defaultConstants.BUILD && _defaultConstants.DEBUG) {
            console.timeEnd('AutoRelease');
          }
        } // unload scene


        if (_defaultConstants.BUILD && _defaultConstants.DEBUG) {
          console.time('Destroy');
        }

        if (cc.isValid(oldScene)) {
          oldScene.destroy();
        }

        this._scene = null; // purge destroyed nodes belongs to old scene

        _object.CCObject._deferredDestroy();

        if (_defaultConstants.BUILD && _defaultConstants.DEBUG) {
          console.timeEnd('Destroy');
        }

        if (onBeforeLoadScene) {
          onBeforeLoadScene();
        }

        this.emit(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, scene); // Run an Entity Scene

        this._scene = scene;

        if (_defaultConstants.BUILD && _defaultConstants.DEBUG) {
          console.time('Activate');
        } // @ts-ignore


        scene._activate();

        if (_defaultConstants.BUILD && _defaultConstants.DEBUG) {
          console.timeEnd('Activate');
        } // start scene


        if (this._root) {
          this._root.resetCumulativeTime();
        }

        this.startAnimation();

        if (onLaunched) {
          onLaunched(null, scene);
        }

        this.emit(cc.Director.EVENT_AFTER_SCENE_LAUNCH, scene);
      }
      /**
       * @en
       * Run a scene. Replaces the running scene with a new one or enter the first scene.<br>
       * The new scene will be launched at the end of the current frame.<br>
       * @zh 运行指定场景。
       * @param scene - The need run scene.
       * @param onBeforeLoadScene - The function invoked at the scene before loading.
       * @param onLaunched - The function invoked at the scene after launch.
       * @private
       */

    }, {
      key: "runScene",
      value: function runScene(scene, onBeforeLoadScene, onLaunched) {
        var _this2 = this;

        cc.assertID(scene, 1205);
        cc.assertID(scene instanceof cc.Scene, 1216); // ensure scene initialized
        // @ts-ignore

        scene._load(); // Delay run / replace scene to the end of the frame


        this.once(cc.Director.EVENT_AFTER_UPDATE, function () {
          _this2.runSceneImmediate(scene, onBeforeLoadScene, onLaunched);
        });
      } //  @Scene loading section

    }, {
      key: "_getSceneUuid",
      value: function _getSceneUuid(key) {
        var scenes = cc.game._sceneInfos;

        if (typeof key === 'string') {
          if (!key.endsWith('.scene')) {
            key += '.scene';
          }

          if (key[0] !== '/' && !key.startsWith('db://')) {
            key = '/' + key; // 使用全名匹配
          } // search scene
          // tslint:disable-next-line: prefer-for-of


          for (var i = 0; i < scenes.length; i++) {
            var info = scenes[i];

            if (info.url.endsWith(key)) {
              return info;
            }
          }
        } else if (typeof key === 'number') {
          if (0 <= key && key < scenes.length) {
            return scenes[key];
          } else {
            cc.errorID(1206, key);
          }
        } else {
          cc.errorID(1207, key);
        }

        return null;
      }
      /**
       * @en Loads the scene by its name.
       * @zh 通过场景名称进行加载场景。
       *
       * @param sceneName - The name of the scene to load.
       * @param onLaunched - callback, will be called after scene launched.
       * @return if error, return false
       */

    }, {
      key: "loadScene",
      value: function loadScene(sceneName, onLaunched, onUnloaded) {
        if (this._loadingScene) {
          cc.errorID(1208, sceneName, this._loadingScene);
          return false;
        }

        var info = this._getSceneUuid(sceneName);

        if (info) {
          var _uuid = info.uuid;
          this.emit(cc.Director.EVENT_BEFORE_SCENE_LOADING, sceneName);
          this._loadingScene = sceneName;

          this._loadSceneByUuid(_uuid, onLaunched, onUnloaded);

          return true;
        } else {
          cc.errorID(1209, sceneName);
          return false;
        }
      }
      /**
       * @en
       * Pre-loads the scene to reduces loading time. You can call this method at any time you want.<br>
       * After calling this method, you still need to launch the scene by `cc.director.loadScene`.<br>
       * It will be totally fine to call `cc.director.loadScene` at any time even if the preloading is not<br>
       * yet finished, the scene will be launched after loaded automatically.
       * @zh 预加载场景，你可以在任何时候调用这个方法。
       * 调用完后，你仍然需要通过 `cc.director.loadScene` 来启动场景，因为这个方法不会执行场景加载操作。<br>
       * 就算预加载还没完成，你也可以直接调用 `cc.director.loadScene`，加载完成后场景就会启动。
       * @param sceneName 场景名称。
       * @param onLoaded 加载回调。
       */

    }, {
      key: "preloadScene",
      value: function preloadScene(sceneName, arg1, arg2) {
        var onProgress;
        var onLoaded;

        if (arg2 === undefined) {
          onLoaded = arg1;
          onProgress = void 0;
        } else {
          onLoaded = arg2;
          onProgress = arg1;
        }

        var info = this._getSceneUuid(sceneName);

        if (info) {
          this.emit(cc.Director.EVENT_BEFORE_SCENE_LOADING, sceneName);
          cc.loader.load({
            uuid: info.uuid,
            type: 'uuid'
          }, onProgress, function (error, asset) {
            if (error) {
              cc.errorID(1210, sceneName, error.message);
            }

            if (onLoaded) {
              onLoaded(error, asset);
            }
          });
        } else {
          var _error = 'Can not preload the scene "' + sceneName + '" because it is not in the build settings.';

          if (onLoaded) {
            onLoaded(new Error(_error));
          }

          cc.error('preloadScene: ' + _error);
        }
      }
      /**
       * @en Loads the scene by its uuid.
       * @zh 通过 uuid 加载场景。
       * @param uuid 场景资源的 uuid。
       * @param doNotRun 仅加载和初始化场景，但并不运行。此参数仅在编辑器环境中生效。
       */

    }, {
      key: "_loadSceneByUuid",
      value: function _loadSceneByUuid(uuid, arg1, arg2, arg3) {
        var onLaunched;
        var onUnloaded;
        var doNotRun;

        if (_defaultConstants.EDITOR && typeof arg1 === 'boolean') {
          doNotRun = arg1;
          onUnloaded = arg2;
        } else if (_defaultConstants.EDITOR && typeof arg2 === 'boolean') {
          doNotRun = arg2;
          onLaunched = arg1;
        } else {
          onLaunched = arg1;
          onUnloaded = arg2;
          doNotRun = arg3;
        } // cc.AssetLibrary.unloadAsset(uuid);     // force reload


        console.time('LoadScene ' + uuid);
        cc.AssetLibrary.loadAsset(uuid, function (error, sceneAsset) {
          console.timeEnd('LoadScene ' + uuid);
          var self = director;
          self._loadingScene = '';

          if (error) {
            error = 'Failed to load scene: ' + error;
            cc.error(error);
          } else {
            if (sceneAsset instanceof cc.SceneAsset) {
              var _scene = sceneAsset.scene;
              _scene._id = sceneAsset._uuid;
              _scene._name = sceneAsset._name;

              if (_defaultConstants.EDITOR) {
                if (!doNotRun) {
                  self.runSceneImmediate(_scene, onUnloaded, onLaunched);
                } else {
                  _scene._load();

                  if (onLaunched) {
                    onLaunched(null, _scene);
                  }
                }
              } else {
                self.runSceneImmediate(_scene, onUnloaded, onLaunched);
              }

              return;
            } else {
              error = 'The asset ' + uuid + ' is not a scene';
              cc.error(error);
            }
          }

          if (onLaunched) {
            onLaunched(error);
          }
        });
      }
      /**
       * @en Resume game logic execution after pause, if the current scene is not paused, nothing will happen.
       * @zh 恢复暂停场景的游戏逻辑，如果当前场景没有暂停将没任何事情发生。
       */

    }, {
      key: "resume",
      value: function resume() {
        if (!this._paused) {
          return;
        }

        this._lastUpdate = performance.now();

        if (!this._lastUpdate) {
          cc.logID(1200);
        }

        this._paused = false;
        this._deltaTime = 0;
      }
      /**
       * @en
       * Enables or disables WebGL depth test.<br>
       * Implementation can be found in directorCanvas.js/directorWebGL.js
       * @zh 启用/禁用深度测试（在 Canvas 渲染模式下不会生效）。
       * @deprecated since v2.0
       */

    }, {
      key: "setDepthTest",
      value: function setDepthTest(value) {
        if (!cc.Camera.main) {
          return;
        }

        cc.Camera.main.depth = !!value;
      }
      /**
       * @en
       * Set color for clear screen.<br>
       * (Implementation can be found in directorCanvas.js/directorWebGL.js)
       * @zh
       * 设置场景的默认擦除颜色。<br>
       * 支持全透明，但不支持透明度为中间值。要支持全透明需手工开启 cc.macro.ENABLE_TRANSPARENT_CANVAS。
       * @deprecated since v2.0
       */

    }, {
      key: "setClearColor",
      value: function setClearColor(clearColor) {
        if (!cc.Camera.main) {
          return;
        }

        cc.Camera.main.backgroundColor = clearColor;
      }
    }, {
      key: "getRunningScene",

      /**
       * @en Returns current logic Scene.
       * @zh 获取当前逻辑场景。
       * @deprecated Since v2.0.
       */
      value: function getRunningScene() {
        return this._scene;
      }
      /**
       * @en Returns current logic Scene.
       * @zh 获取当前逻辑场景。
       * @example
       * ```
       * import { director } from 'cc';
       * // This will help you to get the Canvas node in scene
       * director.getScene().getChildByName('Canvas');
       * ```
       */

    }, {
      key: "getScene",
      value: function getScene() {
        return this._scene;
      }
      /**
       * @en Returns the FPS value. Please use [[Game.setFrameRate]] to control animation interval.
       * @zh 获取单位帧执行时间。请使用 [[Game.setFrameRate]] 来控制游戏帧率。
       * @deprecated since v2.0.
       */

    }, {
      key: "getAnimationInterval",
      value: function getAnimationInterval() {
        return 1000 / cc.game.getFrameRate();
      }
      /**
       * @en Sets animation interval, this doesn't control the main loop.<br>
       * To control the game's frame rate overall, please use cc.game.setFrameRate
       * @zh 设置动画间隔，这不控制主循环。<br>
       * 要控制游戏的帧速率，请使用 cc.game.setFrameRate
       * @deprecated since v2.0
       * @param value - The animation interval desired.
       */

    }, {
      key: "setAnimationInterval",
      value: function setAnimationInterval(value) {
        cc.game.setFrameRate(Math.round(1000 / value));
      }
      /**
       * @en Returns the delta time since last frame.
       * @zh 获取上一帧的增量时间。
       */

    }, {
      key: "getDeltaTime",
      value: function getDeltaTime() {
        return this._deltaTime;
      }
      /**
       * @en Returns the current time.
       * @zh 获取当前帧的时间。
       */

    }, {
      key: "getCurrentTime",
      value: function getCurrentTime() {
        return this._lastUpdate;
      }
      /**
       * @en Returns how many frames were called since the director started.
       * @zh 获取 director 启动以来游戏运行的总帧数。
       */

    }, {
      key: "getTotalFrames",
      value: function getTotalFrames() {
        return this._totalFrames;
      }
      /**
       * @en Returns whether or not the Director is paused.
       * @zh 是否处于暂停状态。
       */

    }, {
      key: "isPaused",
      value: function isPaused() {
        return this._paused;
      }
      /**
       * @en Returns the cc.Scheduler associated with this director.
       * @zh 获取和 director 相关联的 cc.Scheduler。
       */

    }, {
      key: "getScheduler",
      value: function getScheduler() {
        return this._scheduler;
      }
      /**
       * @en Sets the cc.Scheduler associated with this director.
       * @zh 设置和 director 相关联的 cc.Scheduler。
       */

    }, {
      key: "setScheduler",
      value: function setScheduler(scheduler) {
        if (this._scheduler !== scheduler) {
          this.unregisterSystem(this._scheduler);
          this._scheduler = scheduler;
          this.registerSystem(_scheduler.Scheduler.ID, scheduler, 200);
        }
      }
      /**
       * @en register a system.
       * @zh 注册一个 system。
       */

    }, {
      key: "registerSystem",
      value: function registerSystem(name, sys, priority) {
        sys.id = name;
        sys.priority = priority;
        sys.init();

        this._systems.push(sys);

        this._systems.sort(_system.default.sortByPriority);
      }
    }, {
      key: "unregisterSystem",
      value: function unregisterSystem(sys) {
        _index3.js.array.fastRemove(this._systems, sys);

        this._systems.sort(_system.default.sortByPriority);
      }
      /**
       * @en get a system.
       * @zh 获取一个 system。
       */

    }, {
      key: "getSystem",
      value: function getSystem(name) {
        return this._systems.find(function (sys) {
          return sys.id === name;
        });
      }
      /**
       * @en Returns the cc.AnimationManager associated with this director. Please use getSystem(AnimationManager.ID)
       * @zh 获取和 director 相关联的 cc.AnimationManager（动画管理器）。请使用 getSystem(AnimationManager.ID) 来替代
       * @deprecated
       */

    }, {
      key: "getAnimationManager",
      value: function getAnimationManager() {
        return this.getSystem(cc.AnimationManager.ID);
      } // Loop management

      /**
       * @en Starts Animation
       * @zh 开始动画
       */

    }, {
      key: "startAnimation",
      value: function startAnimation() {
        this._invalid = false;
        this._lastUpdate = performance.now();
      }
      /**
       * @en Stops animation
       * @zh 停止动画
       */

    }, {
      key: "stopAnimation",
      value: function stopAnimation() {
        this._invalid = true;
      }
      /**
       * @en Run main loop of director
       * @zh 运行主循环
       */

    }, {
      key: "mainLoop",
      value: function mainLoop(time) {
        if (this._purgeDirectorInNextLoop) {
          this._purgeDirectorInNextLoop = false;
          this.purgeDirector();
        } else if (!this._invalid) {
          // calculate "global" dt
          this.calculateDeltaTime();
          var dt = this._deltaTime; // Update

          if (!this._paused) {
            this.emit(Director.EVENT_BEFORE_UPDATE); // Call start for new added components

            this._compScheduler.startPhase(); // Update for components


            this._compScheduler.updatePhase(dt); // Update systems


            for (var i = 0; i < this._systems.length; ++i) {
              this._systems[i].update(dt);
            } // Late update for components


            this._compScheduler.lateUpdatePhase(dt); // User can use this event to do things after update


            this.emit(Director.EVENT_AFTER_UPDATE); // Destroy entities that have been removed recently

            _object.CCObject._deferredDestroy(); // Post update systems


            for (var _i = 0; _i < this._systems.length; ++_i) {
              this._systems[_i].postUpdate(dt);
            }
          }

          this.emit(Director.EVENT_BEFORE_DRAW);

          this._root.frameMove(this._deltaTime); // Present current frame


          this._root.device.present();

          this.emit(Director.EVENT_AFTER_DRAW);

          _eventManager.default.frameUpdateListeners();

          _index2.Node.bookOfChange.clear();

          this._totalFrames++;
        }
      }
    }, {
      key: "_initOnRendererInitialized",
      value: function _initOnRendererInitialized() {
        this._totalFrames = 0;
        this._lastUpdate = performance.now();
        this._paused = false;
        this._purgeDirectorInNextLoop = false; // Event manager

        if (_eventManager.default) {
          _eventManager.default.setEnabled(true);
        } // Scheduler
        // TODO: have a solid organization of priority and expose to user


        this.registerSystem(_scheduler.Scheduler.ID, this._scheduler, 200);
        this.emit(Director.EVENT_INIT);
      }
    }, {
      key: "_init",
      value: function _init() {
        cc.loader.init(this);
        this._root = new _root.Root(cc.game._gfxDevice);
        var rootInfo = {};

        if (!this._root.initialize(rootInfo)) {
          return false;
        }

        return true;
      }
    }, {
      key: "root",
      get: function get() {
        return this._root;
      }
    }]);

    return Director;
  }(_eventTarget.EventTarget);

  _exports.Director = Director;
  Director.EVENT_INIT = 'director_init';
  Director.EVENT_RESET = 'director_reset';
  Director.EVENT_BEFORE_SCENE_LOADING = 'director_before_scene_loading';
  Director.EVENT_BEFORE_SCENE_LAUNCH = 'director_before_scene_launch';
  Director.EVENT_AFTER_SCENE_LAUNCH = 'director_after_scene_launch';
  Director.EVENT_BEFORE_UPDATE = 'director_before_update';
  Director.EVENT_AFTER_UPDATE = 'director_after_update';
  Director.EVENT_BEFORE_DRAW = 'director_before_draw';
  Director.EVENT_AFTER_DRAW = 'director_after_draw';
  Director.EVENT_BEFORE_PHYSICS = 'director_before_physics';
  Director.EVENT_AFTER_PHYSICS = 'director_after_physics';
  Director.instance = void 0;
  cc.Director = Director;
  /**
   * 导演类。
   * @property director
   */

  var director = Director.instance = cc.director = new Director();
  _exports.director = director;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,