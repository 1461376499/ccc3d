(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../platform/debug.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../platform/debug.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.debug);
    global.deprecated = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.setDefaultLogTimes = setDefaultLogTimes;
  _exports.markAsWarning = _exports.removeProperty = _exports.replaceProperty = void 0;

  /**
   * @hidden
   */
  var defaultLogTimes = 10;

  function setDefaultLogTimes(times) {
    if (times > 0) {
      defaultLogTimes = times;
    }
  }

  ;
  var replaceProperty;
  _exports.replaceProperty = replaceProperty;
  var removeProperty;
  _exports.removeProperty = removeProperty;
  var markAsWarning;
  _exports.markAsWarning = markAsWarning;
  var replacePropertyLog;
  var markAsWarningLog;
  var removePropertyLog; // if (DEBUG) {

  var messageID = 0;
  var messageMap = new Map();

  replacePropertyLog = function replacePropertyLog(n, dp, n2, newp, f, id) {
    var item = messageMap.get(id);

    if (item && item.logTimes > item.count) {
      f('\'%s\' is deprecated, please use \'%s\' instead.', "".concat(n, ".").concat(dp), "".concat(n2, ".").concat(newp));
      item.count++;
    }
  };

  _exports.replaceProperty = replaceProperty = function replaceProperty(owner, ownerName, properties) {
    if (owner == null) return;
    properties.forEach(function (item) {
      var id = messageID++;
      messageMap.set(id, {
        id: id,
        count: 0,
        logTimes: item.logTimes !== undefined ? item.logTimes : defaultLogTimes
      });
      var target = item.target != null ? item.target : owner;
      var newName = item.newName != null ? item.newName : item.name;
      var targetName = item.targetName != null ? item.targetName : ownerName;
      var sameTarget = target == owner;

      if (item.customFunction != null) {
        owner[item.name] = function () {
          var _ref;

          replacePropertyLog(ownerName, item.name, targetName, newName, _debug.warn, id);
          return (_ref = item.customFunction).call.apply(_ref, [this].concat(Array.prototype.slice.call(arguments)));
        };
      } else if (item.customSetter != null || item.customGetter != null) {
        var hasSetter = item.customSetter != null;
        var hasGetter = item.customGetter != null;

        if (hasSetter && hasGetter) {
          Object.defineProperty(owner, item.name, {
            get: function get() {
              replacePropertyLog(ownerName, item.name, targetName, newName, _debug.warn, id);
              return item.customGetter.call(this);
            },
            set: function set(v) {
              replacePropertyLog(ownerName, item.name, targetName, newName, _debug.warn, id);
              item.customSetter.call(this, v);
            }
          });
        } else if (hasSetter) {
          Object.defineProperty(owner, item.name, {
            set: function set(v) {
              replacePropertyLog(ownerName, item.name, targetName, newName, _debug.warn, id);
              item.customSetter.call(this, v);
            }
          });
        } else if (hasGetter) {
          Object.defineProperty(owner, item.name, {
            get: function get() {
              replacePropertyLog(ownerName, item.name, targetName, newName, _debug.warn, id);
              return item.customGetter.call(this);
            }
          });
        }
      } else {
        Object.defineProperty(owner, item.name, {
          get: function get() {
            replacePropertyLog(ownerName, item.name, targetName, newName, _debug.warn, id);
            return sameTarget ? this[newName] : target[newName];
          },
          set: function set(v) {
            replacePropertyLog(ownerName, item.name, targetName, newName, _debug.warn, id);

            if (sameTarget) {
              this[newName] = v;
            } else {
              target[newName] = v;
            }
          }
        });
      }
    });
  };

  removePropertyLog = function removePropertyLog(n, dp, f, id, s) {
    var item = messageMap.get(id);
    var ss = s === undefined ? '' : '(' + s + ')';

    if (item && item.logTimes > item.count) {
      f('\'%s\' has been removed. ' + ss, "".concat(n, ".").concat(dp));
      item.count++;
    }
  };

  _exports.removeProperty = removeProperty = function removeProperty(owner, ownerName, properties) {
    if (owner == null) return;
    properties.forEach(function (item) {
      var id = messageID++;
      messageMap.set(id, {
        id: id,
        count: 0,
        logTimes: item.logTimes !== undefined ? item.logTimes : defaultLogTimes
      });
      Object.defineProperty(owner, item.name, {
        get: function get() {
          return removePropertyLog(ownerName, item.name, _debug.error, id, item.suggest);
        },
        set: function set() {
          removePropertyLog(ownerName, item.name, _debug.error, id, item.suggest);
        }
      });
    });
  };

  markAsWarningLog = function markAsWarningLog(n, dp, f, id, s) {
    var item = messageMap.get(id);
    var ss = s === undefined ? '' : '(' + s + ')';

    if (item && item.logTimes > item.count) {
      f('\'%s\' is deprecated. ' + ss, "".concat(n, ".").concat(dp));
      item.count++;
    }
  };

  _exports.markAsWarning = markAsWarning = function markAsWarning(owner, ownerName, properties) {
    if (owner == null) return;

    var _defaultGetSet = function _defaultGetSet(d, n, dp, f, id, s) {
      if (d.get) {
        var oldGet = d.get();

        d.get = function () {
          markAsWarningLog(n, dp, f, id, s);
          return oldGet.call(this);
        };
      }

      if (d.set) {
        var oldSet = Object.create(d.set);

        d.set = function (v) {
          markAsWarningLog(n, dp, f, id, s);
          oldSet.call(this, v);
        };
      }
    };

    properties.forEach(function (item) {
      var deprecatedProp = item.name;
      var descriptor = Object.getOwnPropertyDescriptor(owner, deprecatedProp);

      if (!descriptor) {
        return;
      }

      var id = messageID++;
      messageMap.set(id, {
        id: id,
        count: 0,
        logTimes: item.logTimes !== undefined ? item.logTimes : defaultLogTimes
      });

      if (descriptor.value != null) {
        if (typeof descriptor.value === 'function') {
          var oldValue = descriptor.value;

          owner[deprecatedProp] = function () {
            markAsWarningLog(ownerName, deprecatedProp, _debug.warn, id, item.suggest);
            return oldValue.call.apply(oldValue, [this].concat(Array.prototype.slice.call(arguments)));
          };
        } else {
          _defaultGetSet(descriptor, ownerName, deprecatedProp, _debug.warn, id, item.suggest);
        }
      } else {
        _defaultGetSet(descriptor, ownerName, deprecatedProp, _debug.warn, id, item.suggest);
      }
    });
  }; // } else {
  //     // for compatible
  //     replaceProperty = () => { };
  //     removeProperty = () => { };
  //     markAsWarning = () => { };
  //     replacePropertyLog = () => { };
  //     removePropertyLog = () => { };
  //     markAsWarningLog = () => { };
  // }

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,