(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../data/class.js", "../value-types/value-type.js", "./utils.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../data/class.js"), require("../value-types/value-type.js"), require("./utils.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global._class, global.valueType, global.utils);
    global.color = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _class, _valueType, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.color = color;
  _exports.Color = void 0;
  _class = _interopRequireDefault(_class);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  var toFloat = 1 / 255;
  /**
   * @zh 通过 Red、Green、Blue 颜色通道表示颜色，并通过 Alpha 通道表示不透明度。<br/>
   * 每个通道都为取值范围 [0, 255] 的整数。<br/>
   */

  var Color = /*#__PURE__*/function (_ValueType) {
    _inherits(Color, _ValueType);

    _createClass(Color, [{
      key: "r",

      /**
       * @zh 获取或设置当前颜色的 Red 通道。
       */
      get: function get() {
        return this._val & 0x000000ff;
      },
      set: function set(red) {
        red = ~~(0, _utils.clamp)(red, 0, 255);
        this._val = (this._val & 0xffffff00 | red) >>> 0;
      }
      /**
       * @zh 获取或设置当前颜色的 Green 通道。
       */

    }, {
      key: "g",
      get: function get() {
        return (this._val & 0x0000ff00) >> 8;
      },
      set: function set(green) {
        green = ~~(0, _utils.clamp)(green, 0, 255);
        this._val = (this._val & 0xffff00ff | green << 8) >>> 0;
      }
      /**
       * @zh 获取或设置当前颜色的 Blue 通道。
       */

    }, {
      key: "b",
      get: function get() {
        return (this._val & 0x00ff0000) >> 16;
      },
      set: function set(blue) {
        blue = ~~(0, _utils.clamp)(blue, 0, 255);
        this._val = (this._val & 0xff00ffff | blue << 16) >>> 0;
      }
      /**
       * @zh 获取或设置当前颜色的 Alpha 通道。
       */

    }, {
      key: "a",
      get: function get() {
        return (this._val & 0xff000000) >>> 24;
      },
      set: function set(alpha) {
        alpha = ~~(0, _utils.clamp)(alpha, 0, 255);
        this._val = (this._val & 0x00ffffff | alpha << 24 >>> 0) >>> 0;
      } // compatibility with vector interfaces

    }, {
      key: "x",
      get: function get() {
        return this.r * toFloat;
      },
      set: function set(value) {
        this.r = value * 255;
      }
    }, {
      key: "y",
      get: function get() {
        return this.g * toFloat;
      },
      set: function set(value) {
        this.g = value * 255;
      }
    }, {
      key: "z",
      get: function get() {
        return this.b * toFloat;
      },
      set: function set(value) {
        this.b = value * 255;
      }
    }, {
      key: "w",
      get: function get() {
        return this.a * toFloat;
      },
      set: function set(value) {
        this.a = value * 255;
      }
    }], [{
      key: "clone",

      /**
       * @zh 获得指定颜色的拷贝
       */
      value: function clone(a) {
        var out = new Color();

        if (a._val) {
          out._val = a._val;
        } else {
          out._val = (a.a << 24 >>> 0) + (a.b << 16) + (a.g << 8) + a.r;
        }

        return out;
      }
      /**
       * @zh 复制目标颜色
       */

    }, {
      key: "copy",
      value: function copy(out, a) {
        out.r = a.r;
        out.g = a.g;
        out.b = a.b;
        out.a = a.a;
        return out;
      }
      /**
       * @zh 设置颜色值
       */

    }, {
      key: "set",
      value: function set(out, r, g, b, a) {
        out.r = r;
        out.g = g;
        out.b = b;
        out.a = a;
        return out;
      }
      /**
       * @zh 从十六进制颜色字符串中读入颜色到 out 中
       */

    }, {
      key: "fromHEX",
      value: function fromHEX(out, hexString) {
        hexString = hexString.indexOf('#') === 0 ? hexString.substring(1) : hexString;
        out.r = parseInt(hexString.substr(0, 2), 16) || 0;
        out.g = parseInt(hexString.substr(2, 2), 16) || 0;
        out.b = parseInt(hexString.substr(4, 2), 16) || 0;
        out.a = parseInt(hexString.substr(6, 2), 16) || 255;
        out._val = (out.a << 24 >>> 0) + (out.b << 16) + (out.g << 8) + out.r;
        return out;
      }
      /**
       * @zh 逐通道颜色加法
       */

    }, {
      key: "add",
      value: function add(out, a, b) {
        out.r = a.r + b.r;
        out.g = a.g + b.g;
        out.b = a.b + b.b;
        out.a = a.a + b.a;
        return out;
      }
      /**
       * @zh 逐通道颜色减法
       */

    }, {
      key: "subtract",
      value: function subtract(out, a, b) {
        out.r = a.r - b.r;
        out.g = a.g - b.g;
        out.b = a.b - b.b;
        out.a = a.a - b.a;
        return out;
      }
      /**
       * @zh 逐通道颜色乘法
       */

    }, {
      key: "multiply",
      value: function multiply(out, a, b) {
        out.r = a.r * b.r;
        out.g = a.g * b.g;
        out.b = a.b * b.b;
        out.a = a.a * b.a;
        return out;
      }
      /**
       * @zh 逐通道颜色除法
       */

    }, {
      key: "divide",
      value: function divide(out, a, b) {
        out.r = a.r / b.r;
        out.g = a.g / b.g;
        out.b = a.b / b.b;
        out.a = a.a / b.a;
        return out;
      }
      /**
       * @zh 全通道统一缩放颜色
       */

    }, {
      key: "scale",
      value: function scale(out, a, b) {
        out.r = a.r * b;
        out.g = a.g * b;
        out.b = a.b * b;
        out.a = a.a * b;
        return out;
      }
      /**
       * @zh 逐通道颜色线性插值：A + t * (B - A)
       */

    }, {
      key: "lerp",
      value: function lerp(out, from, to, ratio) {
        var r = from.r;
        var g = from.g;
        var b = from.b;
        var a = from.a;
        r = r + (to.r - r) * ratio;
        g = g + (to.g - g) * ratio;
        b = b + (to.b - b) * ratio;
        a = a + (to.a - a) * ratio;
        out._val = Math.floor((a << 24 >>> 0) + (b << 16) + (g << 8) + r);
        return out;
      }
      /**
       * @zh 颜色转数组
       * @param ofs 数组起始偏移量
       */

    }, {
      key: "toArray",
      value: function toArray(out, a) {
        var ofs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var scale = a instanceof Color || a.a > 1 ? 1 / 255 : 1;
        out[ofs + 0] = a.r * scale;
        out[ofs + 1] = a.g * scale;
        out[ofs + 2] = a.b * scale;
        out[ofs + 3] = a.a * scale;
        return out;
      }
      /**
       * @zh 数组转颜色
       * @param ofs 数组起始偏移量
       */

    }, {
      key: "fromArray",
      value: function fromArray(arr, out) {
        var ofs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        out.r = arr[ofs + 0] * 255;
        out.g = arr[ofs + 1] * 255;
        out.b = arr[ofs + 2] * 255;
        out.a = arr[ofs + 3] * 255;
        return out;
      }
      /**
       * @zh 颜色等价判断
       */

    }, {
      key: "strictEquals",
      value: function strictEquals(a, b) {
        return a.r === b.r && a.g === b.g && a.b === b.b && a.a === b.a;
      }
      /**
       * @zh 排除浮点数误差的颜色近似等价判断
       */

    }, {
      key: "equals",
      value: function equals(a, b) {
        var epsilon = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _utils.EPSILON;
        return Math.abs(a.r - b.r) <= epsilon * Math.max(1.0, Math.abs(a.r), Math.abs(b.r)) && Math.abs(a.g - b.g) <= epsilon * Math.max(1.0, Math.abs(a.g), Math.abs(b.g)) && Math.abs(a.b - b.b) <= epsilon * Math.max(1.0, Math.abs(a.b), Math.abs(b.b)) && Math.abs(a.a - b.a) <= epsilon * Math.max(1.0, Math.abs(a.a), Math.abs(b.a));
      }
      /**
       * @zh 获取指定颜色的整型数据表示
       */

    }, {
      key: "hex",
      value: function hex(a) {
        return (a.r * 255 << 24 | a.g * 255 << 16 | a.b * 255 << 8 | a.a * 255) >>> 0;
      }
    }]);

    function Color(r, g, b, a) {
      var _this;

      _classCallCheck(this, Color);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Color).call(this));
      _this._val = 0;

      if (typeof r === 'string') {
        _this.fromHEX(r);
      } else if (g !== undefined) {
        _this.set(r, g, b, a);
      } else {
        _this.set(r);
      }

      return _this;
    }
    /**
     * @zh 克隆当前颜色。
     */


    _createClass(Color, [{
      key: "clone",
      value: function clone() {
        var ret = new Color();
        ret._val = this._val;
        return ret;
      }
      /**
       * @zh 判断当前颜色是否与指定颜色相等。
       * @param other 相比较的颜色。
       * @returns 两颜色的各通道都相等时返回 `true`；否则返回 `false`。
       */

    }, {
      key: "equals",
      value: function equals(other) {
        return other && this._val === other._val;
      }
      /**
       * @zh 根据指定的插值比率，从当前颜色到目标颜色之间做插值。
       * @param to 目标颜色。
       * @param ratio 插值比率，范围为 [0,1]。
       */

    }, {
      key: "lerp",
      value: function lerp(to, ratio) {
        var r = this.r;
        var g = this.g;
        var b = this.b;
        var a = this.a;
        r = r + (to.r - r) * ratio;
        g = g + (to.g - g) * ratio;
        b = b + (to.b - b) * ratio;
        a = a + (to.a - a) * ratio;
        this._val = Math.floor((a << 24 >>> 0) + (b << 16) + (g << 8) + r);
        return this;
      }
      /**
       * @zh 返回当前颜色的字符串表示。
       * @returns 当前颜色的字符串表示。
       */

    }, {
      key: "toString",
      value: function toString() {
        return 'rgba(' + this.r.toFixed() + ', ' + this.g.toFixed() + ', ' + this.b.toFixed() + ', ' + this.a.toFixed() + ')';
      }
      /**
       * @zh 将当前颜色转换为 CSS 格式。
       * @param opt 格式选项。
       * @returns 当前颜色的 CSS 格式。
       */

    }, {
      key: "toCSS",
      value: function toCSS(opt) {
        if (opt === 'rgba') {
          return 'rgba(' + (this.r | 0) + ',' + (this.g | 0) + ',' + (this.b | 0) + ',' + (this.a * toFloat).toFixed(2) + ')';
        } else if (opt === 'rgb') {
          return 'rgb(' + (this.r | 0) + ',' + (this.g | 0) + ',' + (this.b | 0) + ')';
        } else {
          return '#' + this.toHEX(opt);
        }
      }
      /**
       * @zh 从十六进制颜色字符串中读入当前颜色。<br/>
       * 十六进制颜色字符串应该以可选的 "#" 开头，紧跟最多 8 个代表十六进制数字的字符；<br/>
       * 每两个连续字符代表的数值依次作为 Red、Green、Blue 和 Alpha 通道；<br/>
       * 缺省的颜色通道将视为 0；缺省的透明通道将视为 255。<br/>
       * @param hexString 十六进制颜色字符串。
       * @returns `this`
       */

    }, {
      key: "fromHEX",
      value: function fromHEX(hexString) {
        hexString = hexString.indexOf('#') === 0 ? hexString.substring(1) : hexString;
        var r = parseInt(hexString.substr(0, 2), 16) || 0;
        var g = parseInt(hexString.substr(2, 2), 16) || 0;
        var b = parseInt(hexString.substr(4, 2), 16) || 0;
        var a = parseInt(hexString.substr(6, 2), 16) || 255;
        this._val = (a << 24 >>> 0) + (b << 16) + (g << 8) + r;
        return this;
      }
      /**
       * @zh 转换当前颜色为十六进制颜色字符串。
       * @param fmt 格式选项。
       * - `'#rrggbbaa'` 获取Red、Green、Blue、Alpha通道的十六进制值（**两位**，高位补 0）并依次连接；
       * - `'#rrggbb` 与 `'#rrggbbaa'` 类似但不包括 Alpha 通道。
       * @returns 十六进制颜色字符串。
       * @example
       * ```
       * const color = new Color(255, 14, 0, 255);
       * color.toHex("rrggbbaa"); // "FF0E00FF"
       * color.toHex("rrggbb"); // "FF0E00"
       * ```
       */

    }, {
      key: "toHEX",
      value: function toHEX(fmt) {
        var hex = [(this.r | 0).toString(16), (this.g | 0).toString(16), (this.b | 0).toString(16)];
        var i = -1;

        if (fmt === '#rrggbb') {
          for (i = 0; i < hex.length; ++i) {
            if (hex[i].length === 1) {
              hex[i] = '0' + hex[i];
            }
          }
        } else if (fmt === '#rrggbbaa') {
          hex.push((this.a | 0).toString(16));

          for (i = 0; i < hex.length; ++i) {
            if (hex[i].length === 1) {
              hex[i] = '0' + hex[i];
            }
          }
        }

        return hex.join('');
      }
      /**
       * @zh 将当前颜色转换为 RGB 整数值。
       * @returns RGB 整数值。从最低有效位开始，每8位分别是 Red、Green、Blue 通道的值。
       * @example
       * ```
       * const color = Color.YELLOW;
       * color.toRGBValue();
       * ```
       */

    }, {
      key: "toRGBValue",
      value: function toRGBValue() {
        return this._val & 0x00ffffff;
      }
      /**
       * @zh 从 HSV 颜色中读入当前颜色。
       * @param h H 通道。
       * @param s S 通道。
       * @param v V 通道。
       * @returns `this`
       * @example
       * ```
       * const color = Color.YELLOW;
       * color.fromHSV(0, 0, 1); // Color {r: 255, g: 255, b: 255, a: 255};
       * ```
       */

    }, {
      key: "fromHSV",
      value: function fromHSV(h, s, v) {
        var r = 0;
        var g = 0;
        var b = 0;

        if (s === 0) {
          r = g = b = v;
        } else {
          if (v === 0) {
            r = g = b = 0;
          } else {
            if (h === 1) {
              h = 0;
            }

            h *= 6;
            s = s;
            v = v;
            var i = Math.floor(h);
            var f = h - i;
            var p = v * (1 - s);
            var q = v * (1 - s * f);
            var t = v * (1 - s * (1 - f));

            switch (i) {
              case 0:
                r = v;
                g = t;
                b = p;
                break;

              case 1:
                r = q;
                g = v;
                b = p;
                break;

              case 2:
                r = p;
                g = v;
                b = t;
                break;

              case 3:
                r = p;
                g = q;
                b = v;
                break;

              case 4:
                r = t;
                g = p;
                b = v;
                break;

              case 5:
                r = v;
                g = p;
                b = q;
                break;
            }
          }
        }

        r *= 255;
        g *= 255;
        b *= 255;
        this._val = (this.a << 24 >>> 0) + (b << 16) + (g << 8) + r;
        return this;
      }
      /**
       * @zh 转换当前颜色为 HSV 颜色。
       * @returns HSV 颜色。成员 `h`、`s`、`v` 分别代表 HSV 颜色的 H、S、V 通道。
       * @example
       * ```
       * const color = cc.Color.YELLOW;
       * color.toHSV(); // {h: 0.1533864541832669, s: 0.9843137254901961, v: 1}
       * ```
       */

    }, {
      key: "toHSV",
      value: function toHSV() {
        var r = this.r * toFloat;
        var g = this.g * toFloat;
        var b = this.b * toFloat;
        var hsv = {
          h: 0,
          s: 0,
          v: 0
        };
        var max = Math.max(r, g, b);
        var min = Math.min(r, g, b);
        var delta = 0;
        hsv.v = max;
        hsv.s = max ? (max - min) / max : 0;

        if (!hsv.s) {
          hsv.h = 0;
        } else {
          delta = max - min;

          if (r === max) {
            hsv.h = (g - b) / delta;
          } else if (g === max) {
            hsv.h = 2 + (b - r) / delta;
          } else {
            hsv.h = 4 + (r - g) / delta;
          }

          hsv.h /= 6;

          if (hsv.h < 0) {
            hsv.h += 1.0;
          }
        }

        return hsv;
      }
      /**
       * @zh 设置当前颜色使其与指定颜色相等。
       * @param other 相比较的颜色。
       * @overload 重载
       * @param [r=0] 指定的 Red 通道，[0-255]。
       * @param [g=0] 指定的 Green 通道。
       * @param [b=0] 指定的 Blue 通道。
       * @param [a=255] 指定的 Alpha 通道。
       * @returns 当前颜色。
       */

    }, {
      key: "set",
      value: function set(r, g, b, a) {
        if (_typeof(r) === 'object') {
          if (r._val != null) {
            this._val = r._val;
          } else {
            g = r.g || 0;
            b = r.b || 0;
            a = typeof r.a === 'number' ? r.a : 255;
            r = r.r || 0;
            this._val = (a << 24 >>> 0) + (b << 16) + (g << 8) + r;
          }
        } else {
          r = r || 0;
          g = g || 0;
          b = b || 0;
          a = typeof a === 'number' ? a : 255;
          this._val = (a << 24 >>> 0) + (b << 16) + (g << 8) + r;
        }

        return this;
      }
      /**
       * @zh 将当前颜色乘以与指定颜色
       * @param other 指定的颜色。
       */

    }, {
      key: "multiply",
      value: function multiply(other) {
        var r = (this._val & 0x000000ff) * other.r >> 8;
        var g = (this._val & 0x0000ff00) * other.g >> 8;
        var b = (this._val & 0x00ff0000) * other.b >> 8;
        var a = ((this._val & 0xff000000) >>> 8) * other.a;
        this._val = a & 0xff000000 | b & 0x00ff0000 | g & 0x0000ff00 | r & 0x000000ff;
        return this;
      }
    }, {
      key: "_set_r_unsafe",
      value: function _set_r_unsafe(red) {
        this._val = (this._val & 0xffffff00 | red) >>> 0;
        return this;
      }
    }, {
      key: "_set_g_unsafe",
      value: function _set_g_unsafe(green) {
        this._val = (this._val & 0xffff00ff | green << 8) >>> 0;
        return this;
      }
    }, {
      key: "_set_b_unsafe",
      value: function _set_b_unsafe(blue) {
        this._val = (this._val & 0xff00ffff | blue << 16) >>> 0;
        return this;
      }
    }, {
      key: "_set_a_unsafe",
      value: function _set_a_unsafe(alpha) {
        this._val = (this._val & 0x00ffffff | alpha << 24 >>> 0) >>> 0;
        return this;
      }
    }]);

    return Color;
  }(_valueType.ValueType);

  _exports.Color = Color;
  Color.WHITE = Object.freeze(new Color(255, 255, 255, 255));
  Color.GRAY = Object.freeze(new Color(127, 127, 127, 255));
  Color.BLACK = Object.freeze(new Color(0, 0, 0, 255));
  Color.TRANSPARENT = Object.freeze(new Color(0, 0, 0, 0));
  Color.RED = Object.freeze(new Color(255, 0, 0, 255));
  Color.GREEN = Object.freeze(new Color(0, 255, 0, 255));
  Color.BLUE = Object.freeze(new Color(0, 0, 255, 255));
  Color.CYAN = Object.freeze(new Color(0, 255, 255, 255));
  Color.MAGENTA = Object.freeze(new Color(255, 0, 255, 255));
  Color.YELLOW = Object.freeze(new Color(255, 255, 0, 255));

  _class.default.fastDefine('cc.Color', Color, {
    r: 0,
    g: 0,
    b: 0,
    a: 255
  });

  cc.Color = Color;

  function color(r, g, b, a) {
    return new Color(r, g, b, a);
  }

  cc.color = color;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,