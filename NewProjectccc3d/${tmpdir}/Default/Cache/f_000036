(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../default-constants.js", "../../3d/builtin/init.js", "../../gfx/define.js", "../../gfx/device.js", "../../gfx/pipeline-state.js", "../../pipeline/batched-buffer.js", "../../pipeline/define.js", "../../pipeline/instanced-buffer.js", "../../pipeline/pass-phase.js", "../../utils/murmurhash2_gc.js", "./pass-utils.js", "./program-lib.js", "./sampler-lib.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../default-constants.js"), require("../../3d/builtin/init.js"), require("../../gfx/define.js"), require("../../gfx/device.js"), require("../../gfx/pipeline-state.js"), require("../../pipeline/batched-buffer.js"), require("../../pipeline/define.js"), require("../../pipeline/instanced-buffer.js"), require("../../pipeline/pass-phase.js"), require("../../utils/murmurhash2_gc.js"), require("./pass-utils.js"), require("./program-lib.js"), require("./sampler-lib.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.defaultConstants, global.init, global.define, global.device, global.pipelineState, global.batchedBuffer, global.define, global.instancedBuffer, global.passPhase, global.murmurhash2_gc, global.passUtils, global.programLib, global.samplerLib);
    global.pass = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _defaultConstants, _init, _define, _device, _pipelineState, _batchedBuffer, _define2, _instancedBuffer, _passPhase, _murmurhash2_gc, _passUtils, _programLib, _samplerLib) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Pass = void 0;

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var _bfInfo = {
    memUsage: _define.GFXMemoryUsageBit.HOST | _define.GFXMemoryUsageBit.DEVICE,
    size: 0,
    usage: _define.GFXBufferUsageBit.UNIFORM | _define.GFXBufferUsageBit.TRANSFER_DST
  };
  var _blInfo = {
    bindings: null
  };
  var _plInfo = {
    layouts: null
  };
  var _psoInfo = {
    primitive: 0,
    shader: null,
    inputState: null,
    rasterizerState: null,
    depthStencilState: null,
    blendState: null,
    dynamicStates: null,
    layout: null,
    renderPass: null,
    hash: 0,
    program: '',
    defines: null,
    stage: 0
  };
  /**
   * @zh
   * 渲染 pass，储存实际描述绘制过程的各项资源。
   */

  var Pass = /*#__PURE__*/function () {
    _createClass(Pass, null, [{
      key: "fillinPipelineInfo",

      /**
       * @zh
       * 根据 handle 获取 unform 的绑定类型（UBO 或贴图等）。
       */

      /**
       * @zh
       * 根据 handle 获取 UBO member 的具体类型。
       */

      /**
       * @zh
       * 根据 handle 获取 binding。
       */
      value: function fillinPipelineInfo(target, info) {
        if (info.priority !== undefined) {
          target._priority = info.priority;
        }

        if (info.primitive !== undefined) {
          target._primitive = info.primitive;
        }

        if (info.stage !== undefined) {
          target._stage = info.stage;
        }

        if (info.dynamicStates !== undefined) {
          target._dynamicStates = info.dynamicStates;
        }

        if (info.customizations) {
          target._customizations = info.customizations;
        }

        if (info.phase) {
          target._phase = (0, _passPhase.getPhaseID)(info.phase);
        }

        var bs = target._bs;

        if (info.blendState) {
          var bsInfo = Object.assign({}, info.blendState);

          if (bsInfo.targets) {
            bsInfo.targets.forEach(function (t, i) {
              return Object.assign(bs.targets[i] || (bs.targets[i] = new _pipelineState.GFXBlendTarget()), t);
            });
          }

          delete bsInfo.targets;
          Object.assign(bs, bsInfo);
        }

        Object.assign(target._rs, info.rasterizerState);
        Object.assign(target._dss, info.depthStencilState);
      }
      /**
       * @zh
       * 根据指定 PSO 信息计算 hash
       * @param psoInfo 用于计算 PSO hash 的最小必要信息
       */

    }, {
      key: "getPSOHash",
      value: function getPSOHash(psoInfo) {
        var shaderKey = _programLib.programLib.getKey(psoInfo.program, psoInfo.defines);

        var res = "".concat(shaderKey, ",").concat(psoInfo.stage, ",").concat(psoInfo.primitive);
        res += serializeBlendState(psoInfo.blendState);
        res += serializeDepthStencilState(psoInfo.depthStencilState);
        res += serializeRasterizerState(psoInfo.rasterizerState);
        return (0, _murmurhash2_gc.murmurhash2_32_gc)(res, 666);
      }
    }]);

    function Pass(device) {
      _classCallCheck(this, Pass);

      this._buffers = {};
      this._samplers = {};
      this._textureViews = {};
      this._resources = [];
      this._phase = (0, _passPhase.getPhaseID)('default');
      this._idxInTech = 0;
      this._programName = '';
      this._priority = _define2.RenderPriority.DEFAULT;
      this._primitive = _define.GFXPrimitiveMode.TRIANGLE_LIST;
      this._stage = _define2.RenderPassStage.DEFAULT;
      this._bindings = [];
      this._inputState = new _pipelineState.GFXInputState();
      this._bs = new _pipelineState.GFXBlendState();
      this._dss = new _pipelineState.GFXDepthStencilState();
      this._rs = new _pipelineState.GFXRasterizerState();
      this._dynamicStates = [];
      this._dynamics = {};
      this._customizations = [];
      this._handleMap = {};
      this._blocks = [];
      this._shaderInfo = null;
      this._defines = {};
      this._properties = {};
      this._hash = 0;
      this._device = void 0;
      this._renderPass = null;
      this._shader = null;
      this._batchedBuffer = null;
      this._instancedBuffer = null;
      this._device = device;
    }
    /**
     * @zh
     * 根据指定参数初始化当前 pass，shader 会在这一阶段就尝试编译。
     */


    _createClass(Pass, [{
      key: "initialize",
      value: function initialize(info) {
        this._doInit(info);

        this.resetUBOs();
        this.resetTextures();
      }
      /**
       * @en
       * Get the handle of a UBO member, or specific channels of it.
       * @zh
       * 获取指定 UBO 成员，或其更具体分量的读写句柄。默认以成员自身的类型为目标读写类型（即读写时必须传入与成员类型相同的变量）。
       * @param name Name of the target UBO member.
       * @param offset Channel offset into the member.
       * @param targetType Target type of the handle, i.e. the type of data when read/write to it.
       * @example
       * ```
       * // say 'pbrParams' is a uniform vec4
       * const hParams = pass.getHandle('pbrParams'); // get the default handle
       * pass.setUniform(hAlbedo, cc.v3(1, 0, 0)); // wrong! pbrParams.w is NaN now
       *
       * // say 'albedoScale' is a uniform vec4, and we only want to modify the w component in the form of a single float
       * const hThreshold = pass.getHandle('albedoScale', 3, cc.GFXType.FLOAT);
       * pass.setUniform(hThreshold, 0.5); // now, albedoScale.w = 0.5
       * ```
       */

    }, {
      key: "getHandle",
      value: function getHandle(name) {
        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var targetType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _define.GFXType.UNKNOWN;
        var handle = this._handleMap[name];

        if (!handle) {
          return;
        }

        if (targetType) {
          handle = (0, _passUtils.customizeType)(handle, targetType);
        } else if (offset) {
          handle = (0, _passUtils.customizeType)(handle, (0, _passUtils.getTypeFromHandle)(handle) - offset);
        }

        return handle + offset;
      }
      /**
       * @zh
       * 获取指定 uniform 的 binding。
       * @param name 目标 uniform 名。
       */

    }, {
      key: "getBinding",
      value: function getBinding(name) {
        var handle = this.getHandle(name);

        if (handle === undefined) {
          return;
        }

        return Pass.getBindingFromHandle(handle);
      }
      /**
       * @zh
       * 设置指定普通向量类 uniform 的值，如果需要频繁更新请尽量使用此接口。
       * @param handle 目标 uniform 的 handle。
       * @param value 目标值。
       */

    }, {
      key: "setUniform",
      value: function setUniform(handle, value) {
        var binding = Pass.getBindingFromHandle(handle);
        var type = Pass.getTypeFromHandle(handle);
        var ofs = Pass.getOffsetFromHandle(handle);
        var block = this._blocks[binding];

        _passUtils.type2writer[type](block.view, value, ofs);

        block.dirty = true;
      }
      /**
       * @zh
       * 获取指定普通向量类 uniform 的值。
       * @param handle 目标 uniform 的 handle。
       * @param out 输出向量。
       */

    }, {
      key: "getUniform",
      value: function getUniform(handle, out) {
        var binding = Pass.getBindingFromHandle(handle);
        var type = Pass.getTypeFromHandle(handle);
        var ofs = Pass.getOffsetFromHandle(handle);
        var block = this._blocks[binding];
        return _passUtils.type2reader[type](block.view, out, ofs);
      }
      /**
       * @zh
       * 设置指定数组类 uniform 的值，如果需要频繁更新请尽量使用此接口。
       * @param handle 目标 uniform 的 handle。
       * @param value 目标值。
       */

    }, {
      key: "setUniformArray",
      value: function setUniformArray(handle, value) {
        var binding = Pass.getBindingFromHandle(handle);
        var type = Pass.getTypeFromHandle(handle);
        var stride = (0, _define.GFXGetTypeSize)(type) >> 2;
        var block = this._blocks[binding];
        var ofs = Pass.getOffsetFromHandle(handle);

        for (var i = 0; i < value.length; i++, ofs += stride) {
          if (value[i] === null) {
            continue;
          }

          _passUtils.type2writer[type](block.view, value[i], ofs);
        }

        block.dirty = true;
      }
      /**
       * @zh
       * 绑定实际 [[GFXBuffer]] 到指定 binding。
       * @param binding 目标 UBO 的 binding。
       * @param value 目标 buffer。
       */

    }, {
      key: "bindBuffer",
      value: function bindBuffer(binding, value) {
        if (this._buffers[binding] === value) {
          return;
        }

        this._buffers[binding] = value;
        var len = this._resources.length;

        for (var i = 0; i < len; i++) {
          var res = this._resources[i];
          res.bindingLayout.bindBuffer(binding, value);
        }
      }
      /**
       * @zh
       * 绑定实际 [[GFXTextureView]] 到指定 binding。
       * @param binding 目标贴图类 uniform 的 binding。
       * @param value 目标 texture view。
       */

    }, {
      key: "bindTextureView",
      value: function bindTextureView(binding, value) {
        if (this._textureViews[binding] === value) {
          return;
        }

        this._textureViews[binding] = value;
        var len = this._resources.length;

        for (var i = 0; i < len; i++) {
          var res = this._resources[i];
          res.bindingLayout.bindTextureView(binding, value);
        }
      }
      /**
       * @zh
       * 绑定实际 [[GFXSampler]] 到指定 binding。
       * @param binding 目标贴图类 uniform 的 binding。
       * @param value 目标 sampler。
       */

    }, {
      key: "bindSampler",
      value: function bindSampler(binding, value) {
        if (this._samplers[binding] === value) {
          return;
        }

        this._samplers[binding] = value;
        var len = this._resources.length;

        for (var i = 0; i < len; i++) {
          var res = this._resources[i];
          res.bindingLayout.bindSampler(binding, value);
        }
      }
      /**
       * @zh
       * 设置运行时 pass 内可动态更新的管线状态属性。
       * @param state 目标管线状态。
       * @param value 目标值。
       */

    }, {
      key: "setDynamicState",
      value: function setDynamicState(state, value) {
        var ds = this._dynamics[state];

        if (ds && ds.value === value) {
          return;
        }

        ds.value = value;
        ds.dirty = true;
      }
      /**
       * @zh
       * 重载当前所有管线状态。
       * @param original 原始管线状态。
       * @param value 管线状态重载值。
       */

    }, {
      key: "overridePipelineStates",
      value: function overridePipelineStates(original, overrides) {
        console.warn('base pass cannot override states, please use pass instance instead.');
      }
      /**
       * @zh
       * 更新当前 Uniform 数据。
       */

    }, {
      key: "update",
      value: function update() {
        var len = this._blocks.length;

        for (var i = 0; i < len; i++) {
          var block = this._blocks[i];

          if (block.dirty) {
            this._buffers[i].update(block.view);

            block.dirty = false;
          }
        }

        var source = cc.director.root.pipeline.globalBindings;
        var target = this._shaderInfo.builtins.globals;
        var samplerLen = target.samplers.length;

        for (var _i = 0; _i < samplerLen; _i++) {
          var s = target.samplers[_i];
          var info = source.get(s.name);

          if (info.sampler) {
            this.bindSampler(info.samplerInfo.binding, info.sampler);
          }

          this.bindTextureView(info.samplerInfo.binding, info.textureView);
        }
      }
      /**
       * @zh
       * 销毁当前 pass。
       */

    }, {
      key: "destroy",
      value: function destroy() {
        var _iterator = _createForOfIteratorHelper(this._shaderInfo.blocks),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var u = _step.value;

            if ((0, _define2.isBuiltinBinding)(u.binding)) {
              continue;
            }

            this._buffers[u.binding].destroy();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        this._buffers = {}; // textures are reused

        this._samplers = {};
        this._textureViews = {};

        if (this._instancedBuffer) {
          this._instancedBuffer.destroy();

          this._instancedBuffer = null;
        }

        if (this._batchedBuffer) {
          this._batchedBuffer.destroy();

          this._batchedBuffer = null;
        }
      }
      /**
       * @zh
       * 重置指定（非数组） Uniform  为 Effect 默认值。
       */

    }, {
      key: "resetUniform",
      value: function resetUniform(name) {
        var handle = this.getHandle(name);
        var type = Pass.getTypeFromHandle(handle);
        var binding = Pass.getBindingFromHandle(handle);
        var ofs = Pass.getOffsetFromHandle(handle);
        var block = this._blocks[binding];
        var info = this._properties[name];
        var value = info && info.value || (0, _passUtils.getDefaultFromType)(type);

        _passUtils.type2writer[type](block.view, value, ofs);

        block.dirty = true;
      }
      /**
       * @zh
       * 重置指定贴图为 Effect 默认值。
       */

    }, {
      key: "resetTexture",
      value: function resetTexture(name) {
        var handle = this.getHandle(name);
        var type = Pass.getTypeFromHandle(handle);
        var binding = Pass.getBindingFromHandle(handle);
        var info = this._properties[name];
        var value = info && info.value;
        var texName = value ? value + '-texture' : (0, _passUtils.getDefaultFromType)(type);

        var texture = _init.builtinResMgr.get(texName);

        var textureView = texture && texture.getGFXTextureView();
        var samplerHash = info && info.samplerHash !== undefined ? info.samplerHash : texture.getSamplerHash();

        var sampler = _samplerLib.samplerLib.getSampler(this._device, samplerHash);

        this._textureViews[binding] = textureView;
        this._samplers[binding] = sampler;

        for (var i = 0; i < this._resources.length; i++) {
          var res = this._resources[i];
          res.bindingLayout.bindSampler(binding, sampler);
          res.bindingLayout.bindTextureView(binding, textureView);
        }
      }
      /**
       * @zh
       * 重置所有 UBO 为默认值。
       */

    }, {
      key: "resetUBOs",
      value: function resetUBOs() {
        var _iterator2 = _createForOfIteratorHelper(this._shaderInfo.blocks),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var u = _step2.value;

            if ((0, _define2.isBuiltinBinding)(u.binding)) {
              continue;
            }

            var block = this._blocks[u.binding];

            if (!block) {
              continue;
            }

            var ofs = 0;

            for (var i = 0; i < u.members.length; i++) {
              var cur = u.members[i];
              var info = this._properties[cur.name];
              var givenDefault = info && info.value;
              var value = givenDefault ? givenDefault : (0, _passUtils.getDefaultFromType)(cur.type);
              var size = ((0, _define.GFXGetTypeSize)(cur.type) >> 2) * cur.count;

              for (var j = 0; j + value.length <= size; j += value.length) {
                block.view.set(value, ofs + j);
              }

              ofs += size;
            }

            block.dirty = true;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
      /**
       * @zh
       * 重置所有 texture 和 sampler 为初始默认值。
       */

    }, {
      key: "resetTextures",
      value: function resetTextures() {
        var _iterator3 = _createForOfIteratorHelper(this._shaderInfo.samplers),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var u = _step3.value;

            if ((0, _define2.isBuiltinBinding)(u.binding)) {
              continue;
            }

            this.resetTexture(u.name);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
      /**
       * @zh
       * 尝试编译 shader 并获取相关资源引用。
       * @param defineOverrides shader 预处理宏定义重载
       */

    }, {
      key: "tryCompile",
      value: function tryCompile() {
        var pipeline = cc.director.root.pipeline;

        if (!pipeline) {
          return null;
        }

        this._dynamicBatchingSync();

        this._renderPass = pipeline.getRenderPass(this._stage);

        if (!this._renderPass) {
          console.warn("illegal pass stage.");
          return false;
        }

        var res = _programLib.programLib.getGFXShader(this._device, this._programName, this._defines, pipeline);

        if (!res.shader) {
          console.warn("create shader ".concat(this._programName, " failed"));
          return false;
        }

        this._shader = res.shader;
        this._bindings = res.bindings;
        this._inputState = res.inputState;
        return true;
      }
      /**
       * @zh
       * 根据当前 pass 持有的信息创建 [[GFXPipelineState]]。
       */

    }, {
      key: "createPipelineState",
      value: function createPipelineState(patches) {
        if ((!this._renderPass || !this._shader || !this._bindings.length) && !this.tryCompile()) {
          console.warn("pass resources not complete, create PSO failed");
          return null;
        }

        var res = patches ? this._getShaderWithBuiltinMacroPatches(patches) : null;
        var shader = res && res.shader || this._shader;
        _blInfo.bindings = res && res.bindings || this._bindings; // bind resources

        var bindingLayout = this._device.createBindingLayout(_blInfo);

        for (var b in this._buffers) {
          bindingLayout.bindBuffer(parseInt(b), this._buffers[b]);
        }

        for (var s in this._samplers) {
          bindingLayout.bindSampler(parseInt(s), this._samplers[s]);
        }

        for (var t in this._textureViews) {
          bindingLayout.bindTextureView(parseInt(t), this._textureViews[t]);
        } // bind pipeline builtins


        var source = cc.director.root.pipeline.globalBindings;
        var target = this._shaderInfo.builtins.globals;

        var _iterator4 = _createForOfIteratorHelper(target.blocks),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var _b = _step4.value;
            var info = source.get(_b.name);

            if (!info || info.type !== _define.GFXBindingType.UNIFORM_BUFFER) {
              console.warn("builtin UBO '".concat(_b.name, "' not available!"));
              continue;
            }

            bindingLayout.bindBuffer(info.blockInfo.binding, info.buffer);
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }

        var _iterator5 = _createForOfIteratorHelper(target.samplers),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var _s = _step5.value;

            var _info = source.get(_s.name);

            if (!_info || _info.type !== _define.GFXBindingType.SAMPLER) {
              console.warn("builtin texture '".concat(_s.name, "' not available!"));
              continue;
            }

            if (_info.sampler) {
              bindingLayout.bindSampler(_info.samplerInfo.binding, _info.sampler);
            }

            bindingLayout.bindTextureView(_info.samplerInfo.binding, _info.textureView);
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }

        _plInfo.layouts = [bindingLayout];

        var pipelineLayout = this._device.createPipelineLayout(_plInfo); // create pipeline state


        _psoInfo.inputState = res && res.inputState || this._inputState;
        _psoInfo.primitive = this._primitive;
        _psoInfo.shader = shader;
        _psoInfo.rasterizerState = this._rs;
        _psoInfo.depthStencilState = this._dss;
        _psoInfo.blendState = this._bs;
        _psoInfo.dynamicStates = this._dynamicStates;
        _psoInfo.layout = pipelineLayout;
        _psoInfo.renderPass = this._renderPass;
        _psoInfo.program = this._programName;
        _psoInfo.defines = this._defines;
        _psoInfo.stage = this._stage;
        _psoInfo.hash = this._hash;

        var pipelineState = this._device.createPipelineState(_psoInfo);

        this._resources.push({
          bindingLayout: bindingLayout,
          pipelineLayout: pipelineLayout,
          pipelineState: pipelineState
        });

        return pipelineState;
      }
      /**
       * @zh
       * 销毁指定的 [[GFXPipelineState]]，如果它是这个 pass 创建的。
       */

    }, {
      key: "destroyPipelineState",
      value: function destroyPipelineState(pipelineStates) {
        var idx = this._resources.findIndex(function (res) {
          return res.pipelineState === pipelineStates;
        });

        if (idx >= 0) {
          var _this$_resources$idx = this._resources[idx],
              bl = _this$_resources$idx.bindingLayout,
              pl = _this$_resources$idx.pipelineLayout,
              ps = _this$_resources$idx.pipelineState;
          bl.destroy();
          pl.destroy();
          ps.destroy();

          this._resources.splice(idx, 1);
        }
      } // internal use

    }, {
      key: "beginChangeStatesSilently",
      value: function beginChangeStatesSilently() {}
    }, {
      key: "endChangeStatesSilently",
      value: function endChangeStatesSilently() {}
    }, {
      key: "_doInit",
      value: function _doInit(info) {
        var copyDefines = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        this._idxInTech = info.idxInTech;
        this._programName = info.program;
        this._defines = copyDefines ? Object.assign({}, info.defines) : info.defines;
        this._shaderInfo = _programLib.programLib.getTemplate(info.program);
        this._properties = info.properties || this._properties; // pipeline state

        var device = this._device;
        Pass.fillinPipelineInfo(this, info);

        if (info.stateOverrides) {
          Pass.fillinPipelineInfo(this, info.stateOverrides);
        }

        this._hash = Pass.getPSOHash(this);
        var blocks = this._shaderInfo.blocks;

        for (var i = 0; i < blocks.length; i++) {
          var _blocks$i = blocks[i],
              size = _blocks$i.size,
              binding = _blocks$i.binding;

          if ((0, _define2.isBuiltinBinding)(binding)) {
            continue;
          } // create gfx buffer resource


          _bfInfo.size = Math.ceil(size / 16) * 16; // https://bugs.chromium.org/p/chromium/issues/detail?id=988988

          this._buffers[binding] = device.createBuffer(_bfInfo); // non-builtin UBO data pools, note that the effect compiler
          // guarantees these bindings to be consecutive, starting from 0

          var buffer = new ArrayBuffer(size);
          this._blocks[binding] = {
            view: new Float32Array(buffer),
            dirty: false
          };
        } // store handles


        var directHandleMap = this._handleMap = this._shaderInfo.handleMap;
        var indirectHandleMap = {};

        for (var name in this._properties) {
          var prop = this._properties[name];

          if (!prop.handleInfo) {
            continue;
          }

          indirectHandleMap[name] = this.getHandle.apply(this, prop.handleInfo);
        }

        Object.assign(directHandleMap, indirectHandleMap);
        this.tryCompile();
      }
    }, {
      key: "_dynamicBatchingSync",
      value: function _dynamicBatchingSync() {
        if (this._defines.USE_INSTANCING) {
          if (!this._device.hasFeature(_device.GFXFeature.INSTANCED_ARRAYS)) {
            this._defines.USE_INSTANCING = false;
          } else if (!this._instancedBuffer) {
            this._instancedBuffer = new _instancedBuffer.InstancedBuffer(this);
          }
        } else if (this._defines.USE_BATCHING) {
          if (!this._batchedBuffer) {
            this._batchedBuffer = new _batchedBuffer.BatchedBuffer(this);
          }
        }

        if (!this._defines.USE_INSTANCING && this._instancedBuffer) {
          this._instancedBuffer.destroy();

          this._instancedBuffer = null;
        }

        if (!this._defines.USE_BATCHING && this._batchedBuffer) {
          this._batchedBuffer.destroy();

          this._batchedBuffer = null;
        }
      }
    }, {
      key: "_getShaderWithBuiltinMacroPatches",
      value: function _getShaderWithBuiltinMacroPatches(patches) {
        if (_defaultConstants.EDITOR) {
          for (var i = 0; i < patches.length; i++) {
            if (!patches[i].name.startsWith('CC_')) {
              console.warn('cannot patch non-builtin macros');
              return null;
            }
          }
        }

        var pipeline = cc.director.root.pipeline;

        if (!pipeline) {
          return null;
        }

        for (var _i2 = 0; _i2 < patches.length; _i2++) {
          var patch = patches[_i2];
          this._defines[patch.name] = patch.value;
        }

        var res = _programLib.programLib.getGFXShader(this._device, this._programName, this._defines, pipeline);

        for (var _i3 = 0; _i3 < patches.length; _i3++) {
          var _patch = patches[_i3];
          delete this._defines[_patch.name];
        }

        return res;
      } // states

    }, {
      key: "priority",
      get: function get() {
        return this._priority;
      }
    }, {
      key: "primitive",
      get: function get() {
        return this._primitive;
      }
    }, {
      key: "stage",
      get: function get() {
        return this._stage;
      }
    }, {
      key: "inputState",
      get: function get() {
        return this._inputState;
      }
    }, {
      key: "rasterizerState",
      get: function get() {
        return this._rs;
      }
    }, {
      key: "depthStencilState",
      get: function get() {
        return this._dss;
      }
    }, {
      key: "blendState",
      get: function get() {
        return this._bs;
      }
    }, {
      key: "dynamicStates",
      get: function get() {
        return this._dynamicStates;
      }
    }, {
      key: "customizations",
      get: function get() {
        return this._customizations;
      }
    }, {
      key: "phase",
      get: function get() {
        return this._phase;
      } // infos

    }, {
      key: "device",
      get: function get() {
        return this._device;
      }
    }, {
      key: "shaderInfo",
      get: function get() {
        return this._shaderInfo;
      }
    }, {
      key: "program",
      get: function get() {
        return this._programName;
      }
    }, {
      key: "properties",
      get: function get() {
        return this._properties;
      }
    }, {
      key: "defines",
      get: function get() {
        return this._defines;
      }
    }, {
      key: "idxInTech",
      get: function get() {
        return this._idxInTech;
      } // resources

    }, {
      key: "bindings",
      get: function get() {
        return this._bindings;
      }
    }, {
      key: "shader",
      get: function get() {
        return this._shader;
      }
    }, {
      key: "renderPass",
      get: function get() {
        return this._renderPass;
      }
    }, {
      key: "dynamics",
      get: function get() {
        return this._dynamics;
      }
    }, {
      key: "batchedBuffer",
      get: function get() {
        return this._batchedBuffer;
      }
    }, {
      key: "instancedBuffer",
      get: function get() {
        return this._instancedBuffer;
      }
    }, {
      key: "blocks",
      get: function get() {
        return this._blocks;
      }
    }, {
      key: "hash",
      get: function get() {
        return this._hash;
      }
    }]);

    return Pass;
  }();

  _exports.Pass = Pass;
  Pass.getBindingTypeFromHandle = _passUtils.getBindingTypeFromHandle;
  Pass.getTypeFromHandle = _passUtils.getTypeFromHandle;
  Pass.getBindingFromHandle = _passUtils.getBindingFromHandle;
  Pass.getOffsetFromHandle = _passUtils.getOffsetFromHandle;

  function serializeBlendState(bs) {
    var res = ",bs,".concat(bs.isA2C, ",").concat(bs.blendColor);

    var _iterator6 = _createForOfIteratorHelper(bs.targets),
        _step6;

    try {
      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
        var t = _step6.value;
        res += ",bt,".concat(t.blend, ",").concat(t.blendEq, ",").concat(t.blendAlphaEq, ",").concat(t.blendColorMask);
        res += ",".concat(t.blendSrc, ",").concat(t.blendDst, ",").concat(t.blendSrcAlpha, ",").concat(t.blendDstAlpha);
      }
    } catch (err) {
      _iterator6.e(err);
    } finally {
      _iterator6.f();
    }

    return res;
  }

  function serializeRasterizerState(rs) {
    var res = ",rs,".concat(rs.cullMode, ",").concat(rs.depthBias, ",").concat(rs.isFrontFaceCCW);
    return res;
  }

  function serializeDepthStencilState(dss) {
    var res = ",dss,".concat(dss.depthTest, ",").concat(dss.depthWrite, ",").concat(dss.depthFunc);
    res += ",".concat(dss.stencilTestFront, ",").concat(dss.stencilFuncFront, ",").concat(dss.stencilRefFront, ",").concat(dss.stencilReadMaskFront);
    res += ",".concat(dss.stencilFailOpFront, ",").concat(dss.stencilZFailOpFront, ",").concat(dss.stencilPassOpFront, ",").concat(dss.stencilWriteMaskFront);
    res += ",".concat(dss.stencilTestBack, ",").concat(dss.stencilFuncBack, ",").concat(dss.stencilRefBack, ",").concat(dss.stencilReadMaskBack);
    res += ",".concat(dss.stencilFailOpBack, ",").concat(dss.stencilZFailOpBack, ",").concat(dss.stencilPassOpBack, ",").concat(dss.stencilWriteMaskBack);
    return res;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,