(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../platform/debug.js", "./id-generator.js", "../default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../platform/debug.js"), require("./id-generator.js"), require("../default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.debug, global.idGenerator, global.defaultConstants);
    global.jsTyped = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _debug, _idGenerator, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.isNumber = isNumber;
  _exports.isString = isString;
  _exports.createMap = createMap;
  _exports.getClassName = getClassName;
  _exports.obsolete = obsolete;
  _exports.obsoletes = obsoletes;
  _exports.formatStr = formatStr;
  _exports.shiftArguments = shiftArguments;
  _exports.getPropertyDescriptor = getPropertyDescriptor;
  _exports.addon = addon;
  _exports.mixin = mixin;
  _exports.extend = extend;
  _exports.getSuper = getSuper;
  _exports.isChildClassOf = isChildClassOf;
  _exports.clear = clear;
  _exports._setClassId = _setClassId;
  _exports.setClassName = setClassName;
  _exports.unregisterClass = unregisterClass;
  _exports._getClassById = _getClassById;
  _exports.getClassByName = getClassByName;
  _exports._getClassId = _getClassId;
  _exports._nameToClass = _exports._idToClass = _exports.set = _exports.get = _exports.getset = _exports.value = void 0;
  _idGenerator = _interopRequireDefault(_idGenerator);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  var tempCIDGenerator = new _idGenerator.default('TmpCId.');
  /**
   * Check the object whether is number or not
   * If a number is created by using 'new Number(10086)', the typeof it will be "object"...
   * Then you can use this function if you care about this case.
   */

  function isNumber(object) {
    return typeof object === 'number' || object instanceof Number;
  }
  /**
   * Check the object whether is string or not.
   * If a string is created by using 'new String("blabla")', the typeof it will be "object"...
   * Then you can use this function if you care about this case.
   */


  function isString(object) {
    return typeof object === 'string' || object instanceof String;
  }
  /**
   * Define value, just help to call Object.defineProperty.<br>
   * The configurable will be true.
   * @param [writable=false]
   * @param [enumerable=false]
   */


  var value = function () {
    var descriptor = {
      value: undefined,
      enumerable: false,
      writable: false,
      configurable: true
    };
    return function (object, propertyName, value_, writable, enumerable) {
      descriptor.value = value_;
      descriptor.writable = writable;
      descriptor.enumerable = enumerable;
      Object.defineProperty(object, propertyName, descriptor);
      descriptor.value = undefined;
    };
  }();
  /**
   * Define get set accessor, just help to call Object.defineProperty(...).
   * @param [setter=null]
   * @param [enumerable=false]
   * @param [configurable=false]
   */


  _exports.value = value;

  var getset = function () {
    var descriptor = {
      get: undefined,
      set: undefined,
      enumerable: false
    };
    return function (object, propertyName, getter, setter) {
      var enumerable = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
      var configurable = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;

      if (typeof setter === 'boolean') {
        enumerable = setter;
        setter = undefined;
      }

      descriptor.get = getter;
      descriptor.set = setter;
      descriptor.enumerable = enumerable;
      descriptor.configurable = configurable;
      Object.defineProperty(object, propertyName, descriptor);
      descriptor.get = undefined;
      descriptor.set = undefined;
    };
  }();
  /**
   * Define get accessor, just help to call Object.defineProperty(...).
   * @param [enumerable=false]
   * @param [configurable=false]
   */


  _exports.getset = getset;

  var get = function () {
    var descriptor = {
      get: undefined,
      enumerable: false,
      configurable: false
    };
    return function (object, propertyName, getter, enumerable, configurable) {
      descriptor.get = getter;
      descriptor.enumerable = enumerable;
      descriptor.configurable = configurable;
      Object.defineProperty(object, propertyName, descriptor);
      descriptor.get = undefined;
    };
  }();
  /**
   * Define set accessor, just help to call Object.defineProperty(...).
   * @param [enumerable=false]
   * @param [configurable=false]
   */


  _exports.get = get;

  var set = function () {
    var descriptor = {
      set: undefined,
      enumerable: false,
      configurable: false
    };
    return function (object, propertyName, setter, enumerable, configurable) {
      descriptor.set = setter;
      descriptor.enumerable = enumerable;
      descriptor.configurable = configurable;
      Object.defineProperty(object, propertyName, descriptor);
      descriptor.set = undefined;
    };
  }();
  /**
   * @en
   * A simple wrapper of `Object.create(null)` which ensures the return object have no prototype (and thus no inherited members).
   * So we can skip `hasOwnProperty` calls on property lookups.
   * It is a worthwhile optimization than the `{}` literal when `hasOwnProperty` calls are necessary.
   * @zh
   * 该方法是对 `Object.create(null)` 的简单封装。
   * `Object.create(null)` 用于创建无 prototype （也就无继承）的空对象。
   * 这样我们在该对象上查找属性时，就不用进行 `hasOwnProperty` 判断。
   * 在需要频繁判断 `hasOwnProperty` 时，使用这个方法性能会比 `{}` 更高。
   *
   * @param [forceDictMode=false] Apply the delete operator to newly created map object.
   * This causes V8 to put the object in "dictionary mode" and disables creation of hidden classes
   * which are very expensive for objects that are constantly changing shape.
   */


  _exports.set = set;

  function createMap(forceDictMode) {
    var map = Object.create(null);

    if (forceDictMode) {
      var INVALID_IDENTIFIER_1 = '.';
      var INVALID_IDENTIFIER_2 = '/';
      map[INVALID_IDENTIFIER_1] = true;
      map[INVALID_IDENTIFIER_2] = true;
      delete map[INVALID_IDENTIFIER_1];
      delete map[INVALID_IDENTIFIER_2];
    }

    return map;
  }
  /**
   * Get class name of the object, if object is just a {} (and which class named 'Object'), it will return "".
   * (modified from <a href="http://stackoverflow.com/questions/1249531/how-to-get-a-javascript-objects-class">the code from this stackoverflow post</a>)
   * @param objOrCtor instance or constructor
   */


  function getClassName(objOrCtor) {
    if (typeof objOrCtor === 'function') {
      var prototype = objOrCtor.prototype;

      if (prototype && prototype.hasOwnProperty('__classname__') && prototype.__classname__) {
        return prototype.__classname__;
      }

      var retval = ''; //  for browsers which have name property in the constructor of the object, such as chrome

      if (objOrCtor.name) {
        retval = objOrCtor.name;
      }

      if (objOrCtor.toString) {
        var arr;
        var str = objOrCtor.toString();

        if (str.charAt(0) === '[') {
          // str is "[object objectClass]"
          arr = str.match(/\[\w+\s*(\w+)\]/);
        } else {
          // str is function objectClass () {} for IE Firefox
          arr = str.match(/function\s*(\w+)/);
        }

        if (arr && arr.length === 2) {
          retval = arr[1];
        }
      }

      return retval !== 'Object' ? retval : '';
    } else if (objOrCtor && objOrCtor.constructor) {
      return getClassName(objOrCtor.constructor);
    }

    return '';
  }
  /**
   * Defines a polyfill field for obsoleted codes.
   * @param object - YourObject or YourClass.prototype
   * @param obsoleted - "OldParam" or "YourClass.OldParam"
   * @param newExpr - "NewParam" or "YourClass.NewParam"
   * @param  [writable=false]
   */


  function obsolete(object, obsoleted, newExpr, writable) {
    var extractPropName = /([^.]+)$/;
    var oldProp = extractPropName.exec(obsoleted)[0];
    var newProp = extractPropName.exec(newExpr)[0];

    function getter() {
      if (_defaultConstants.DEV) {
        (0, _debug.warnID)(5400, obsoleted, newExpr);
      }

      return this[newProp];
    }

    function setter(value_) {
      if (_defaultConstants.DEV) {
        (0, _debug.warnID)(5401, obsoleted, newExpr);
      }

      this[newProp] = value_;
    }

    if (writable) {
      getset(object, oldProp, getter, setter);
    } else {
      get(object, oldProp, getter);
    }
  }
  /**
   * Defines all polyfill fields for obsoleted codes corresponding to the enumerable properties of props.
   * @method obsoletes
   * @param {any} obj - YourObject or YourClass.prototype
   * @param {any} objName - "YourObject" or "YourClass"
   * @param {Object} props
   * @param {Boolean} [writable=false]
   */


  function obsoletes(obj, objName, props, writable) {
    for (var obsoleted in props) {
      var newName = props[obsoleted];
      obsolete(obj, objName + '.' + obsoleted, newName, writable);
    }
  }

  var REGEXP_NUM_OR_STR = /(%d)|(%s)/;
  var REGEXP_STR = /%s/;
  /**
   * A string tool to construct a string with format string.
   * @param msg - A JavaScript string containing zero or more substitution strings (%s).
   * @param subst - JavaScript objects with which to replace substitution strings within msg.
   * This gives you additional control over the format of the output.
   * @example
   * ```
   * cc.js.formatStr("a: %s, b: %s", a, b);
   * cc.js.formatStr(a, b, c);
   * ```
   */

  function formatStr(msg) {
    for (var _len = arguments.length, subst = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      subst[_key - 1] = arguments[_key];
    }

    if (arguments.length === 0) {
      return '';
    }

    if (subst.length === 0) {
      return '' + msg;
    }

    var hasSubstitution = typeof msg === 'string' && REGEXP_NUM_OR_STR.test(msg);

    if (hasSubstitution) {
      var _iterator = _createForOfIteratorHelper(subst),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var arg = _step.value;
          var regExpToTest = typeof arg === 'number' ? REGEXP_NUM_OR_STR : REGEXP_STR;

          if (regExpToTest.test(msg)) {
            msg = msg.replace(regExpToTest, arg);
          } else {
            msg += ' ' + arg;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    } else {
      var _iterator2 = _createForOfIteratorHelper(subst),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _arg = _step2.value;
          msg += ' ' + _arg;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }

    return msg;
  } // see https://github.com/petkaantonov/bluebird/issues/1389


  function shiftArguments() {
    var len = arguments.length - 1;
    var args = new Array(len);

    for (var i = 0; i < len; ++i) {
      args[i] = arguments[i + 1];
    }

    return args;
  }
  /**
   * Get property descriptor in object and all its ancestors.
   */


  function getPropertyDescriptor(object, propertyName) {
    while (object) {
      var pd = Object.getOwnPropertyDescriptor(object, propertyName);

      if (pd) {
        return pd;
      }

      object = Object.getPrototypeOf(object);
    }

    return null;
  }

  function _copyprop(name, source, target) {
    var pd = getPropertyDescriptor(source, name);

    if (pd) {
      Object.defineProperty(target, name, pd);
    }
  }
  /**
   * Copy all properties not defined in object from arguments[1...n].
   * @param object Object to extend its properties.
   * @param sources Source object to copy properties from.
   * @return The result object.
   */


  function addon(object) {
    object = object || {};

    for (var _len2 = arguments.length, sources = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      sources[_key2 - 1] = arguments[_key2];
    }

    for (var _i = 0, _sources = sources; _i < _sources.length; _i++) {
      var source = _sources[_i];

      if (source) {
        if (_typeof(source) !== 'object') {
          cc.errorID(5402, source);
          continue;
        }

        for (var name in source) {
          if (!(name in object)) {
            _copyprop(name, source, object);
          }
        }
      }
    }

    return object;
  }
  /**
   * Copy all properties from arguments[1...n] to object.
   * @return The result object.
   */


  function mixin(object) {
    object = object || {};

    for (var _len3 = arguments.length, sources = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      sources[_key3 - 1] = arguments[_key3];
    }

    for (var _i2 = 0, _sources2 = sources; _i2 < _sources2.length; _i2++) {
      var source = _sources2[_i2];

      if (source) {
        if (_typeof(source) !== 'object') {
          cc.errorID(5403, source);
          continue;
        }

        for (var name in source) {
          _copyprop(name, source, object);
        }
      }
    }

    return object;
  }
  /**
   * Derive the class from the supplied base class.
   * Both classes are just native javascript constructors, not created by cc.Class, so
   * usually you will want to inherit using [[Class]] instead.
   * @param base The baseclass to inherit.
   * @return The result class.
   */


  function extend(cls, base) {
    if (_defaultConstants.DEV) {
      if (!base) {
        cc.errorID(5404);
        return;
      }

      if (!cls) {
        cc.errorID(5405);
        return;
      }

      if (Object.keys(cls.prototype).length > 0) {
        cc.errorID(5406);
      }
    }

    for (var p in base) {
      if (base.hasOwnProperty(p)) {
        cls[p] = base[p];
      }
    }

    cls.prototype = Object.create(base.prototype, {
      constructor: {
        value: cls,
        writable: true,
        configurable: true
      }
    });
    return cls;
  }
  /**
   * Get super class.
   * @param constructor The constructor of subclass.
   */


  function getSuper(constructor) {
    var proto = constructor.prototype; // binded function do not have prototype

    var dunderProto = proto && Object.getPrototypeOf(proto);
    return dunderProto && dunderProto.constructor;
  }
  /**
   * Checks whether subclass is child of superclass or equals to superclass.
   */


  function isChildClassOf(subclass, superclass) {
    if (subclass && superclass) {
      if (typeof subclass !== 'function') {
        return false;
      }

      if (typeof superclass !== 'function') {
        if (_defaultConstants.DEV) {
          (0, _debug.warnID)(3625, superclass);
        }

        return false;
      }

      if (subclass === superclass) {
        return true;
      }

      for (;;) {
        subclass = getSuper(subclass);

        if (!subclass) {
          return false;
        }

        if (subclass === superclass) {
          return true;
        }
      }
    }

    return false;
  }
  /**
   * Removes all enumerable properties from object.
   */


  function clear(object) {
    for (var _i3 = 0, _Object$keys = Object.keys(object); _i3 < _Object$keys.length; _i3++) {
      var key = _Object$keys[_i3];
      delete object[key];
    }
  }

  function isTempClassId(id) {
    return typeof id !== 'string' || id.startsWith(tempCIDGenerator.prefix);
  } // id 注册


  var _idToClass = {};
  _exports._idToClass = _idToClass;
  var _nameToClass = {};
  /**
   * Register the class by specified id, if its classname is not defined, the class name will also be set.
   * @method _setClassId
   * @param {String} classId
   * @param {Function} constructor
   * @private
   */

  _exports._nameToClass = _nameToClass;

  function _setClassId(id, constructor) {
    var key = '__cid__';
    var table = _idToClass; // deregister old

    if (constructor.prototype.hasOwnProperty(key)) {
      delete table[constructor.prototype[key]];
    }

    value(constructor.prototype, key, id); // register class

    if (id) {
      var registered = table[id];

      if (registered && registered !== constructor) {
        var error = 'A Class already exists with the same ' + key + ' : "' + id + '".';

        if (_defaultConstants.TEST) {
          error += ' (This may be caused by error of unit test.) \
If you dont need serialization, you can set class id to "". You can also call \
cc.js.unregisterClass to remove the id of unused class';
        }

        cc.error(error);
      } else {
        table[id] = constructor;
      } // if (id === "") {
      //    console.trace("", table === _nameToClass);
      // }

    }
  }

  function doSetClassName(id, constructor) {
    var key = '__classname__';
    var table = _nameToClass; // deregister old

    if (constructor.prototype.hasOwnProperty(key)) {
      delete table[constructor.prototype[key]];
    }

    value(constructor.prototype, key, id); // register class

    if (id) {
      var registered = table[id];

      if (registered && registered !== constructor) {
        var error = 'A Class already exists with the same ' + key + ' : "' + id + '".';

        if (_defaultConstants.TEST) {
          error += ' (This may be caused by error of unit test.) \
If you dont need serialization, you can set class id to "". You can also call \
cc.js.unregisterClass to remove the id of unused class';
        }

        cc.error(error);
      } else {
        table[id] = constructor;
      } // if (id === "") {
      //    console.trace("", table === _nameToClass);
      // }

    }
  }
  /**
   * Register the class by specified name manually
   * @method setClassName
   * @param {String} className
   * @param {Function} constructor
   */


  function setClassName(className, constructor) {
    doSetClassName(className, constructor); // auto set class id

    if (!constructor.prototype.hasOwnProperty('__cid__')) {
      var id = className || tempCIDGenerator.getNewId();

      if (id) {
        _setClassId(id, constructor);
      }
    }
  }
  /**
   * Unregister a class from fireball.
   *
   * If you dont need a registered class anymore, you should unregister the class so that Fireball will not keep its reference anymore.
   * Please note that its still your responsibility to free other references to the class.
   *
   * @method unregisterClass
   * @param {Function} ...constructor - the class you will want to unregister, any number of classes can be added
   */


  function unregisterClass() {
    for (var _len4 = arguments.length, constructors = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      constructors[_key4] = arguments[_key4];
    }

    for (var _i4 = 0, _constructors = constructors; _i4 < _constructors.length; _i4++) {
      var _constructor = _constructors[_i4];
      var p = _constructor.prototype;
      var classId = p.__cid__;

      if (classId) {
        delete _idToClass[classId];
      }

      var classname = p.__classname__;

      if (classname) {
        delete _nameToClass[classname];
      }
    }
  }
  /**
   * Get the registered class by id
   * @method _getClassById
   * @param {String} classId
   * @return {Function} constructor
   * @private
   */


  function _getClassById(classId) {
    return _idToClass[classId];
  }
  /**
   * Get the registered class by name
   * @method getClassByName
   * @param {String} classname
   * @return {Function} constructor
   */


  function getClassByName(classname) {
    return _nameToClass[classname];
  }
  /**
   * Get class id of the object
   * @method _getClassId
   * @param {Object|Function} obj - instance or constructor
   * @param {Boolean} [allowTempId = true]   - can return temp id in editor
   * @return {String}
   * @private
   */


  function _getClassId(obj, allowTempId) {
    allowTempId = typeof allowTempId !== 'undefined' ? allowTempId : true;
    var res;

    if (typeof obj === 'function' && obj.prototype.hasOwnProperty('__cid__')) {
      res = obj.prototype.__cid__;

      if (!allowTempId && (_defaultConstants.DEV || _defaultConstants.EDITOR) && isTempClassId(res)) {
        return '';
      }

      return res;
    }

    if (obj && obj.constructor) {
      var prototype = obj.constructor.prototype;

      if (prototype && prototype.hasOwnProperty('__cid__')) {
        res = obj.__cid__;

        if (!allowTempId && (_defaultConstants.DEV || _defaultConstants.EDITOR) && isTempClassId(res)) {
          return '';
        }

        return res;
      }
    }

    return '';
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,