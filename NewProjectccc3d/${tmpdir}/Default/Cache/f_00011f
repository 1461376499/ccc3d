(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../../core/data/class-decorator.js", "../../../core/platform/sys.js", "../../../core/utils/index.js", "../../../core/math/index.js", "../../../core/components/ui-base/ui-render-component.js", "../../../core/platform/debug.js", "../../../core/platform/view.js", "../../../core/default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../../core/data/class-decorator.js"), require("../../../core/platform/sys.js"), require("../../../core/utils/index.js"), require("../../../core/math/index.js"), require("../../../core/components/ui-base/ui-render-component.js"), require("../../../core/platform/debug.js"), require("../../../core/platform/view.js"), require("../../../core/default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.classDecorator, global.sys, global.index, global.index, global.uiRenderComponent, global.debug, global.view, global.defaultConstants);
    global.webviewImpl = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _classDecorator, _sys, _index, _index2, _uiRenderComponent, _debug, _view, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.WebViewImpl = _exports.WebViewEventType = void 0;

  var _dec, _class, _class2, _temp;

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var _mat4_temp = new _index2.Mat4();

  var WebViewEventType;
  _exports.WebViewEventType = WebViewEventType;

  (function (WebViewEventType) {
    WebViewEventType[WebViewEventType["LOADING"] = 0] = "LOADING";
    WebViewEventType[WebViewEventType["LOADED"] = 1] = "LOADED";
    WebViewEventType[WebViewEventType["ERROR"] = 2] = "ERROR";
    WebViewEventType[WebViewEventType["JS_EVALUATED"] = 3] = "JS_EVALUATED";
  })(WebViewEventType || (_exports.WebViewEventType = WebViewEventType = {}));

  var polyfill = {
    devicePixelRatio: false,
    enableDiv: false
  };

  if (_sys.sys.os === _sys.sys.OS_IOS) {
    polyfill.enableDiv = true;
  }

  if (_sys.sys.isMobile) {
    if (_sys.sys.browserType === _sys.sys.BROWSER_TYPE_FIREFOX) {
      polyfill.enableBG = true;
    }
  } else {
    if (_sys.sys.browserType === _sys.sys.BROWSER_TYPE_IE) {
      polyfill.closeHistory = true;
    }
  }

  var WebViewImpl = (_dec = (0, _classDecorator.ccclass)('cc.WebviewImpl'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function () {
    function WebViewImpl() {
      _classCallCheck(this, WebViewImpl);

      this._EventList = new Map();
      this._visible = false;
      this._div = null;
      this._iframe = null;
      this._forceUpdate = true;
      this._m00 = 0;
      this._m01 = 0;
      this._m04 = 0;
      this._m05 = 0;
      this._m12 = 0;
      this._m13 = 0;
      this._w = 0;
      this._h = 0;
      this._eventListeners = {
        load: function load() {},
        error: function error() {}
      };
    }

    _createClass(WebViewImpl, [{
      key: "createDomElementIfNeeded",
      value: function createDomElementIfNeeded(w, h) {
        // if (EDITOR) {
        //     this._div = document.createElement('div');
        //     this._div.style.background = 'rgba(255, 255, 255, 0.8)';
        //     this._div.style.color = 'rgb(51, 51, 51)';
        //     this._div.style.height = w + 'px';
        //     this._div.style.width = h + 'px';
        //     this._div.style.position = 'absolute';
        //     this._div.style.bottom = '0px';
        //     this._div.style.left = '0px';
        //     this._div.style['word-wrap'] = 'break-word';
        //     cc.game.container.appendChild(this._div);
        // } else {
        if (!this._div) {
          this._createNativeControl(w, h);
        } else {
          this._updateSize(w, h);
        } // }

      }
    }, {
      key: "removeDom",
      value: function removeDom() {
        var div = this._div;

        if (div) {
          var hasChild = _index.misc.contains(cc.game.container, div);

          if (hasChild) {
            cc.game.container.removeChild(div);
          }

          this._div = null;
        }

        var iframe = this._iframe;

        if (iframe) {
          var cbs = this._eventListeners;
          iframe.removeEventListener('load', cbs.load);
          iframe.removeEventListener('error', cbs.error);
          cbs.load = null;
          cbs.error = null;
          this._iframe = null;
        }
      }
      /**
       * Load an URL
       * @param {String} url
       */

    }, {
      key: "loadURL",
      value: function loadURL(url) {
        if (_defaultConstants.EDITOR) {
          if (this._div) {
            this._div.innerText = url;
          }
        } else {
          var iframe = this._iframe;

          if (iframe) {
            iframe.src = url;
            var self = this;

            var cb = function cb() {
              // self._loaded = true;
              self._updateVisibility();

              iframe.removeEventListener('load', cb);
            };

            iframe.addEventListener('load', cb);

            this._dispatchEvent(WebViewImpl.EventType.LOADING);
          }
        }
      }
      /**
       * Stop loading
       */

    }, {
      key: "stopLoading",
      value: function stopLoading() {
        (0, _debug.logID)(7800);
      }
      /**
       * Reload the WebView
       */

    }, {
      key: "reload",
      value: function reload() {
        var iframe = this._iframe;

        if (iframe) {
          var win = iframe.contentWindow;

          if (win && win.location) {
            win.location.reload();
          }
        }
      }
      /**
       * Determine whether to go back
       */

    }, {
      key: "canGoBack",
      value: function canGoBack() {
        (0, _debug.logID)(7801);
        return true;
      }
      /**
       * Determine whether to go forward
       */

    }, {
      key: "canGoForward",
      value: function canGoForward() {
        (0, _debug.logID)(7802);
        return true;
      }
      /**
       * go back
       */

    }, {
      key: "goBack",
      value: function goBack() {
        try {
          if (WebViewImpl.Polyfill.closeHistory) {
            return (0, _debug.logID)(7803);
          }

          var iframe = this._iframe;

          if (iframe) {
            var win = iframe.contentWindow;

            if (win && win.location) {
              win.history.back.call(win);
            }
          }
        } catch (err) {
          (0, _debug.log)(err);
        }
      }
      /**
       * go forward
       */

    }, {
      key: "goForward",
      value: function goForward() {
        try {
          if (WebViewImpl.Polyfill.closeHistory) {
            return (0, _debug.logID)(7804);
          }

          var iframe = this._iframe;

          if (iframe) {
            var win = iframe.contentWindow;

            if (win && win.location) {
              win.history.forward.call(win);
            }
          }
        } catch (err) {
          (0, _debug.log)(err);
        }
      }
      /**
       * In the webview execution within a period of js string
       * @param {String} str
       */

    }, {
      key: "evaluateJS",
      value: function evaluateJS(str) {
        var iframe = this._iframe;

        if (iframe) {
          var win = iframe.contentWindow;

          if (win) {
            try {// eval(str);
              // this._dispatchEvent(WebViewImpl.EventType.JS_EVALUATED);
            } catch (err) {
              console.error(err);
            }
          }
        }
      }
      /**
       * Limited scale
       */

    }, {
      key: "setScalesPageToFit",
      value: function setScalesPageToFit() {
        (0, _debug.logID)(7805);
      }
      /**
       * The binding event
       * @param {WebViewImpl.EventType} event
       * @param {Function} callback
       */

    }, {
      key: "setEventListener",
      value: function setEventListener(event, callback) {
        this._EventList[event] = callback;
      }
      /**
       * Delete events
       * @param {WebViewImpl.EventType} event
       */

    }, {
      key: "removeEventListener",
      value: function removeEventListener(event) {
        this._EventList[event] = null;
      }
    }, {
      key: "_dispatchEvent",
      value: function _dispatchEvent(event) {
        var callback = this._EventList[event];

        if (callback && this._iframe) {
          callback.call(this, this, this._iframe.src);
        }
      } // public _createRenderCmd () {
      //     return new WebViewImpl.RenderCmd(this);
      // }

    }, {
      key: "destroy",
      value: function destroy() {
        this.removeDom();
      }
    }, {
      key: "setVisible",
      value: function setVisible(visible) {
        if (this._visible !== visible) {
          this._visible = !!visible;

          this._updateVisibility();
        }
      }
    }, {
      key: "updateMatrix",
      value: function updateMatrix(node) {
        if (!this._div || !this._visible) {
          return;
        }

        node.getWorldMatrix(_mat4_temp);
        var contentSize = node.getContentSize();

        if (!this._forceUpdate && this._m00 === _mat4_temp.m00 && this._m01 === _mat4_temp.m01 && this._m04 === _mat4_temp.m04 && this._m05 === _mat4_temp.m05 && this._m12 === _mat4_temp.m12 && this._m13 === _mat4_temp.m13 && this._w === contentSize.width && this._h === contentSize.height) {
          return;
        } // update matrix cache


        this._m00 = _mat4_temp.m00;
        this._m01 = _mat4_temp.m01;
        this._m04 = _mat4_temp.m04;
        this._m05 = _mat4_temp.m05;
        this._m12 = _mat4_temp.m12;
        this._m13 = _mat4_temp.m13;
        this._w = contentSize.width;
        this._h = contentSize.height;

        var scaleX = _view.view.getScaleX();

        var scaleY = _view.view.getScaleY();

        var dpr = _view.view.getDevicePixelRatio();

        scaleX /= dpr;
        scaleY /= dpr;
        var container = cc.game.container;
        var a = _mat4_temp.m00 * scaleX;
        var b = _mat4_temp.m01;
        var c = _mat4_temp.m04;
        var d = _mat4_temp.m05 * scaleY;
        var offsetX = container && container.style.paddingLeft ? parseInt(container.style.paddingLeft) : 0;
        var offsetY = container && container.style.paddingBottom ? parseInt(container.style.paddingBottom) : 0;

        this._updateSize(this._w, this._h);

        var w = this._div.clientWidth * scaleX;
        var h = this._div.clientHeight * scaleY;
        var ap = node.getAnchorPoint();
        var appx = w * _mat4_temp.m00 * ap.x;
        var appy = h * _mat4_temp.m05 * ap.y;
        var tx = _mat4_temp.m12 * scaleX - appx + offsetX;
        var ty = _mat4_temp.m13 * scaleY - appy + offsetY;
        var matrix = 'matrix(' + a + ',' + -b + ',' + -c + ',' + d + ',' + tx + ',' + -ty + ')';
        this._div.style.transform = matrix;
        this._div.style['-webkit-transform'] = matrix;
        this._div.style['transform-origin'] = '0px 100% 0px';
        this._div.style['-webkit-transform-origin'] = '0px 100% 0px'; // chagned iframe opacity

        var renderComp = node.getComponent(_uiRenderComponent.UIRenderComponent);

        if (renderComp) {
          this._setOpacity(renderComp.color.a);
        }
      }
    }, {
      key: "setOnJSCallback",
      value: function setOnJSCallback(callback) {}
    }, {
      key: "setJavascriptInterfaceScheme",
      value: function setJavascriptInterfaceScheme(scheme) {}
    }, {
      key: "loadData",
      value: function loadData(data, MIMEType, encoding, baseURL) {}
    }, {
      key: "loadHTMLString",
      value: function loadHTMLString(string, baseURL) {}
    }, {
      key: "_updateVisibility",
      value: function _updateVisibility() {
        if (!this._div) {
          return;
        }

        var div = this._div;

        if (this._visible) {
          div.style.visibility = 'visible';
        } else {
          div.style.visibility = 'hidden';
        }

        this._forceUpdate = true;
      }
    }, {
      key: "_updateSize",
      value: function _updateSize(w, h) {
        var div = this._div;

        if (div) {
          div.style.width = w + 'px';
          div.style.height = h + 'px';
        }
      }
    }, {
      key: "_initEvent",
      value: function _initEvent() {
        var iframe = this._iframe;

        if (iframe) {
          var cbs = this._eventListeners;
          var self = this;

          cbs.load = function () {
            self._dispatchEvent(WebViewImpl.EventType.LOADED);
          };

          cbs.error = function () {
            self._dispatchEvent(WebViewImpl.EventType.ERROR);
          };

          iframe.addEventListener('load', cbs.load);
          iframe.addEventListener('error', cbs.error);
        }
      }
    }, {
      key: "_initStyle",
      value: function _initStyle() {
        if (!this._div) {
          return;
        }

        var div = this._div;
        div.style.position = 'absolute';
        div.style.bottom = '0px';
        div.style.left = '0px';
      }
    }, {
      key: "_setOpacity",
      value: function _setOpacity(opacity) {
        var iframe = this._iframe;

        if (iframe && iframe.style) {
          iframe.style.opacity = (opacity / 255).toString();
        }
      }
    }, {
      key: "_createDom",
      value: function _createDom(w, h) {
        if (WebViewImpl.Polyfill.enableDiv) {
          this._div = document.createElement('div');
          this._div.style['-webkit-overflow'] = 'auto';
          this._div.style['-webkit-overflow-scrolling'] = 'touch';
          this._iframe = document.createElement('iframe');

          this._div.appendChild(this._iframe);

          this._iframe.style.width = '100%';
          this._iframe.style.height = '100%';
        } else {
          this._div = this._iframe = document.createElement('iframe');
        }

        if (WebViewImpl.Polyfill.enableBG) {
          this._div.style.background = '#FFF';
        }

        this._div.style.background = '#FFF';
        this._div.style.height = h + 'px';
        this._div.style.width = w + 'px';
        this._div.style.overflow = 'scroll';
        this._iframe.style.border = 'none';
        cc.game.container.appendChild(this._div);

        this._updateVisibility();
      }
    }, {
      key: "_createNativeControl",
      value: function _createNativeControl(w, h) {
        this._createDom(w, h);

        this._initStyle();

        this._initEvent();
      }
    }]);

    return WebViewImpl;
  }(), _class2.Polyfill = polyfill, _class2.EventType = WebViewEventType, _temp)) || _class);
  _exports.WebViewImpl = WebViewImpl;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,