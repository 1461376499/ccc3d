(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../../core/math/index.js", "../../components/index.js", "../utils.js", "../../../core/platform/debug.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../../core/math/index.js"), require("../../components/index.js"), require("../utils.js"), require("../../../core/platform/debug.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.index, global.utils, global.debug);
    global.barFilled = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _index2, _utils, _debug) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.barFilled = void 0;

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  var FillType = _index2.SpriteComponent.FillType;
  var matrix = new _index.Mat4();
  /**
   * barFilled 组装器
   * 可通过 cc.UI.barFilled 获取该组装器。
   */

  var barFilled = {
    useModel: false,
    updateRenderData: function updateRenderData(sprite) {
      var frame = sprite.spriteFrame; // TODO: Material API design and export from editor could affect the material activation process
      // need to update the logic here
      // if (frame) {
      //     if (!frame._original && dynamicAtlasManager) {
      //         dynamicAtlasManager.insertSpriteFrame(frame);
      //     }
      //     if (sprite._material._texture !== frame._texture) {
      //         sprite._activateMaterial();
      //     }
      // }

      var renderData = sprite.renderData;

      if (renderData && frame) {
        var uvDirty = renderData.uvDirty;
        var vertDirty = renderData.vertDirty;

        if (!uvDirty && !vertDirty) {
          // return sprite.__allocedDatas;
          return;
        }

        var fillStart = sprite.fillStart;
        var fillRange = sprite.fillRange;

        if (fillRange < 0) {
          fillStart += fillRange;
          fillRange = -fillRange;
        }

        fillRange = fillStart + fillRange;
        fillStart = fillStart > 1.0 ? 1.0 : fillStart;
        fillStart = fillStart < 0.0 ? 0.0 : fillStart;
        fillRange = fillRange > 1.0 ? 1.0 : fillRange;
        fillRange = fillRange < 0.0 ? 0.0 : fillRange;
        fillRange = fillRange - fillStart;
        fillRange = fillRange < 0 ? 0 : fillRange;
        var fillEnd = fillStart + fillRange;
        fillEnd = fillEnd > 1 ? 1 : fillEnd;

        if (uvDirty) {
          this.updateUVs(sprite, fillStart, fillEnd);
        }

        if (vertDirty) {
          if (this.updateVerts) {
            this.updateVerts(sprite, fillStart, fillEnd);
          }

          this.updateWorldVerts(sprite);
        }
      }
    },
    updateUVs: function updateUVs(sprite, fillStart, fillEnd) {
      var spriteFrame = sprite.spriteFrame;
      var renderData = sprite.renderData;
      var datas = renderData.datas; // build uvs

      var atlasWidth = spriteFrame.width;
      var atlasHeight = spriteFrame.height;
      var textureRect = spriteFrame.getRect(); // uv computation should take spritesheet into account.

      var ul = 0;
      var vb = 0;
      var ur = 0;
      var vt = 0;
      var quadUV0 = 0;
      var quadUV1 = 0;
      var quadUV2 = 0;
      var quadUV3 = 0;
      var quadUV4 = 0;
      var quadUV5 = 0;
      var quadUV6 = 0;
      var quadUV7 = 0;

      if (spriteFrame.isRotated()) {
        ul = textureRect.x / atlasWidth;
        vb = (textureRect.y + textureRect.width) / atlasHeight;
        ur = (textureRect.x + textureRect.height) / atlasWidth;
        vt = textureRect.y / atlasHeight;
        quadUV0 = quadUV2 = ul;
        quadUV4 = quadUV6 = ur;
        quadUV3 = quadUV7 = vb;
        quadUV1 = quadUV5 = vt;
      } else {
        ul = textureRect.x / atlasWidth;
        vb = (textureRect.y + textureRect.height) / atlasHeight;
        ur = (textureRect.x + textureRect.width) / atlasWidth;
        vt = textureRect.y / atlasHeight;
        quadUV0 = quadUV4 = ul;
        quadUV2 = quadUV6 = ur;
        quadUV1 = quadUV3 = vb;
        quadUV5 = quadUV7 = vt;
      }

      switch (sprite.fillType) {
        case FillType.HORIZONTAL:
          datas[0].u = quadUV0 + (quadUV2 - quadUV0) * fillStart;
          datas[0].v = quadUV1 + (quadUV3 - quadUV1) * fillStart;
          datas[1].u = quadUV0 + (quadUV2 - quadUV0) * fillEnd;
          datas[1].v = quadUV1 + (quadUV3 - quadUV1) * fillEnd;
          datas[2].u = quadUV4 + (quadUV6 - quadUV4) * fillStart;
          datas[2].v = quadUV5 + (quadUV7 - quadUV5) * fillStart;
          datas[3].u = quadUV4 + (quadUV6 - quadUV4) * fillEnd;
          datas[3].v = quadUV5 + (quadUV7 - quadUV5) * fillEnd;
          break;

        case FillType.VERTICAL:
          datas[0].u = quadUV0 + (quadUV4 - quadUV0) * fillStart;
          datas[0].v = quadUV1 + (quadUV5 - quadUV1) * fillStart;
          datas[1].u = quadUV2 + (quadUV6 - quadUV2) * fillStart;
          datas[1].v = quadUV3 + (quadUV7 - quadUV3) * fillStart;
          datas[2].u = quadUV0 + (quadUV4 - quadUV0) * fillEnd;
          datas[2].v = quadUV1 + (quadUV5 - quadUV1) * fillEnd;
          datas[3].u = quadUV2 + (quadUV6 - quadUV2) * fillEnd;
          datas[3].v = quadUV3 + (quadUV7 - quadUV3) * fillEnd;
          break;

        default:
          (0, _debug.errorID)(2626);
          break;
      }

      renderData.uvDirty = false;
    },
    updateVerts: function updateVerts(sprite, fillStart, fillEnd) {
      var renderData = sprite.renderData;
      var datas = renderData.datas;
      var node = sprite.node;
      var width = node.width;
      var height = node.height;
      var appx = node.anchorX * width;
      var appy = node.anchorY * height;
      var l = -appx;
      var b = -appy;
      var r = width - appx;
      var t = height - appy;
      var progressStart = 0;
      var progressEnd = 0;

      switch (sprite.fillType) {
        case FillType.HORIZONTAL:
          progressStart = l + (r - l) * fillStart;
          progressEnd = l + (r - l) * fillEnd;
          l = progressStart;
          r = progressEnd;
          break;

        case FillType.VERTICAL:
          progressStart = b + (t - b) * fillStart;
          progressEnd = b + (t - b) * fillEnd;
          b = progressStart;
          t = progressEnd;
          break;

        default:
          (0, _debug.errorID)(2626);
          break;
      }

      datas[4].x = l;
      datas[4].y = b;
      datas[5].x = r;
      datas[5].y = b;
      datas[6].x = l;
      datas[6].y = t;
      datas[7].x = r;
      datas[7].y = t;
      renderData.vertDirty = false;
    },
    createData: function createData(sprite) {
      var renderData = sprite.requestRenderData(); // 0-4 for world verts
      // 5-8 for local verts

      renderData.dataLength = 8;
      renderData.vertexCount = 4;
      renderData.indiceCount = 6;
      var datas = renderData.datas;

      var _iterator = _createForOfIteratorHelper(datas),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var data = _step.value;
          data.z = 0;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return renderData;
    },
    updateWorldVerts: function updateWorldVerts(sprite) {
      var node = sprite.node;
      var datas = sprite.renderData.datas;
      node.getWorldMatrix(matrix);

      for (var i = 0; i < 4; i++) {
        var local = datas[i + 4];
        var world = datas[i];

        _index.Vec3.transformMat4(world, local, matrix);
      }
    },
    fillBuffers: function fillBuffers(sprite, renderer) {
      if (sprite.node.hasChangedFlags) {
        this.updateWorldVerts(sprite);
      }

      var node = sprite.node;
      (0, _utils.fillVerticesWithoutCalc3D)(node, renderer, sprite.renderData, sprite.color);
    }
  };
  _exports.barFilled = barFilled;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,