(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../math/index.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../math/index.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index);
    global.touch = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Touch = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var _vec2 = new _index.Vec2();
  /**
   * @en The touch point class
   * @zh 封装了触点相关的信息。
   */


  var Touch = /*#__PURE__*/function () {
    _createClass(Touch, [{
      key: "lastModified",
      get: function get() {
        return this._lastModified;
      }
      /**
       * @param x - x position of the touch point
       * @param y - y position of the touch point
       * @param id - The id of the touch point
       */

    }]);

    function Touch(x, y) {
      var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      _classCallCheck(this, Touch);

      this._point = new _index.Vec2();
      this._prevPoint = new _index.Vec2();
      this._lastModified = 0;
      this._id = 0;
      this._startPoint = new _index.Vec2();
      this._startPointCaptured = false;
      this.setTouchInfo(id, x, y);
    }
    /**
     * @en Returns the current touch location in OpenGL coordinates.、
     * @zh 获取当前触点位置。
     * @param out - Pass the out object to avoid object creation, very good practice
     */


    _createClass(Touch, [{
      key: "getLocation",
      value: function getLocation(out) {
        if (!out) {
          out = new _index.Vec2();
        }

        out.set(this._point.x, this._point.y);
        return out;
      }
      /**
       * @en Returns X axis location value.
       * @zh 获取当前触点 X 轴位置。
       */

    }, {
      key: "getLocationX",
      value: function getLocationX() {
        return this._point.x;
      }
      /**
       * @en Returns Y axis location value.
       * @zh 获取当前触点 Y 轴位置。
       */

    }, {
      key: "getLocationY",
      value: function getLocationY() {
        return this._point.y;
      }
      /**
       * @en Returns the current touch location in UI coordinates.、
       * @zh 获取当前触点在 UI 坐标系中的位置。
       * @param out - Pass the out object to avoid object creation, very good practice
       */

    }, {
      key: "getUILocation",
      value: function getUILocation(out) {
        if (!out) {
          out = new _index.Vec2();
        }

        out.set(this._point.x, this._point.y);

        cc.view._convertPointWithScale(out);

        return out;
      }
      /**
       * @en Returns X axis location value in UI coordinates.
       * @zh 获取当前触点在 UI 坐标系中 X 轴位置。
       */

    }, {
      key: "getUILocationX",
      value: function getUILocationX() {
        var viewport = cc.view.getViewportRect();
        return (this._point.x - viewport.x) / cc.view.getScaleX();
      }
      /**
       * @en Returns Y axis location value in UI coordinates.
       * @zh 获取当前触点在 UI 坐标系中 Y 轴位置。
       */

    }, {
      key: "getUILocationY",
      value: function getUILocationY() {
        var viewport = cc.view.getViewportRect();
        return (this._point.y - viewport.y) / cc.view.getScaleY();
      }
      /**
       * @en Returns the previous touch location.
       * @zh 获取触点在上一次事件时的位置对象，对象包含 x 和 y 属性。
       * @param out - Pass the out object to avoid object creation, very good practice
       */

    }, {
      key: "getPreviousLocation",
      value: function getPreviousLocation(out) {
        if (!out) {
          out = new _index.Vec2();
        }

        out.set(this._prevPoint.x, this._prevPoint.y);
        return out;
      }
      /**
       * @en Returns the previous touch location in UI coordinates.
       * @zh 获取触点在上一次事件时在 UI 坐标系中的位置对象，对象包含 x 和 y 属性。
       * @param out - Pass the out object to avoid object creation, very good practice
       */

    }, {
      key: "getUIPreviousLocation",
      value: function getUIPreviousLocation(out) {
        if (!out) {
          out = new _index.Vec2();
        }

        out.set(this._prevPoint.x, this._prevPoint.y);

        cc.view._convertPointWithScale(out);

        return out;
      }
      /**
       * @en Returns the start touch location.
       * @zh 获获取触点落下时的位置对象，对象包含 x 和 y 属性。
       * @param out - Pass the out object to avoid object creation, very good practice
       */

    }, {
      key: "getStartLocation",
      value: function getStartLocation(out) {
        if (!out) {
          out = new _index.Vec2();
        }

        out.set(this._startPoint.x, this._startPoint.y);
        return out;
      }
      /**
       * @en Returns the start touch location in UI coordinates.
       * @zh 获获取触点落下时在 UI 坐标系中的位置对象，对象包含 x 和 y 属性。
       * @param out - Pass the out object to avoid object creation, very good practice
       */

    }, {
      key: "getUIStartLocation",
      value: function getUIStartLocation(out) {
        if (!out) {
          out = new _index.Vec2();
        }

        out.set(this._startPoint.x, this._startPoint.y);

        cc.view._convertPointWithScale(out);

        return out;
      }
      /**
       * @en Returns the delta distance from the previous touche to the current one.
       * @zh 获取触点距离上一次事件移动的距离对象，对象包含 x 和 y 属性。
       * @param out - Pass the out object to avoid object creation, very good practice
       */

    }, {
      key: "getDelta",
      value: function getDelta(out) {
        if (!out) {
          out = new _index.Vec2();
        }

        out.set(this._point);
        out.subtract(this._prevPoint);
        return out;
      }
      /**
       * @en Returns the delta distance from the previous touche to the current one in UI coordinates.
       * @zh 获取触点距离上一次事件移动在 UI 坐标系中的距离对象，对象包含 x 和 y 属性。
       * @param out - Pass the out object to avoid object creation, very good practice
       */

    }, {
      key: "getUIDelta",
      value: function getUIDelta(out) {
        if (!out) {
          out = new _index.Vec2();
        }

        _vec2.set(this._point);

        _vec2.subtract(this._prevPoint);

        out.set(cc.view.getScaleX(), cc.view.getScaleY());

        _index.Vec2.divide(out, _vec2, out);

        return out;
      }
      /**
       * @en Returns the current touch location in screen coordinates.
       * @zh 获取当前事件在游戏窗口内的坐标位置对象，对象包含 x 和 y 属性。
       * @param out - Pass the out object to avoid object creation, very good practice
       */

    }, {
      key: "getLocationInView",
      value: function getLocationInView(out) {
        if (!out) {
          out = new _index.Vec2();
        }

        out.set(this._point.x, cc.view._designResolutionSize.height - this._point.y);
        return out;
      }
      /**
       * @en Returns the previous touch location in screen coordinates.
       * @zh 获取触点在上一次事件时在游戏窗口中的位置对象，对象包含 x 和 y 属性。
       * @param out - Pass the out object to avoid object creation, very good practice
       */

    }, {
      key: "getPreviousLocationInView",
      value: function getPreviousLocationInView(out) {
        if (!out) {
          out = new _index.Vec2();
        }

        out.set(this._prevPoint.x, cc.view._designResolutionSize.height - this._prevPoint.y);
        return out;
      }
      /**
       * @en Returns the start touch location in screen coordinates.
       * @zh 获取触点落下时在游戏窗口中的位置对象，对象包含 x 和 y 属性。
       * @param out - Pass the out object to avoid object creation, very good practice
       */

    }, {
      key: "getStartLocationInView",
      value: function getStartLocationInView(out) {
        if (!out) {
          out = new _index.Vec2();
        }

        out.set(this._startPoint.x, cc.view._designResolutionSize.height - this._startPoint.y);
        return out;
      }
      /**
       * @en Returns the id of the touch point.
       * @zh 触点的标识 ID，可以用来在多点触摸中跟踪触点。
       */

    }, {
      key: "getID",
      value: function getID() {
        return this._id;
      }
      /**
       * @en Resets touch point information.
       * @zh 重置触点相关的信息。
       * @param id - The id of the touch point
       * @param x - x position of the touch point
       * @param y - y position of the touch point
       */

    }, {
      key: "setTouchInfo",
      value: function setTouchInfo() {
        var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var x = arguments.length > 1 ? arguments[1] : undefined;
        var y = arguments.length > 2 ? arguments[2] : undefined;
        this._prevPoint = this._point;
        this._point = new _index.Vec2(x || 0, y || 0);
        this._id = id;

        if (!this._startPointCaptured) {
          this._startPoint = new _index.Vec2(this._point); // cc.view._convertPointWithScale(this._startPoint);

          this._startPointCaptured = true;
        }
      }
      /**
       * @en Sets touch point location.
       * @zh 设置触点位置。
       * @param point - The location
       */

    }, {
      key: "setPoint",
      value: function setPoint(x, y) {
        if (_typeof(x) === 'object') {
          this._point.x = x.x;
          this._point.y = x.y;
        } else {
          this._point.x = x || 0;
          this._point.y = y || 0;
        }

        this._lastModified = cc.director.getCurrentTime();
      }
      /**
       * @en Sets the location previously registered for the current touch.
       * @zh 设置触点在前一次触发时收集的位置。
       * @param point - The location
       */

    }, {
      key: "setPrevPoint",
      value: function setPrevPoint(x, y) {
        if (_typeof(x) === 'object') {
          this._prevPoint = new _index.Vec2(x.x, x.y);
        } else {
          this._prevPoint = new _index.Vec2(x || 0, y || 0);
        }

        this._lastModified = cc.director.getCurrentTime();
      }
    }]);

    return Touch;
  }();

  _exports.Touch = Touch;
  cc.Touch = Touch;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,