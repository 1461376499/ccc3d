(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../assets/material.js", "./pass-instance.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../assets/material.js"), require("./pass-instance.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.material, global.passInstance);
    global.materialInstance = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _material, _passInstance) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MaterialInstance = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  /**
   * @zh
   * 材质实例，当有材质修改需求时，根据材质资源创建的，可任意定制的实例。
   */
  var MaterialInstance = /*#__PURE__*/function (_Material) {
    _inherits(MaterialInstance, _Material);

    _createClass(MaterialInstance, [{
      key: "parent",
      get: function get() {
        return this._parent;
      }
    }, {
      key: "owner",
      get: function get() {
        return this._owner;
      }
    }]);

    function MaterialInstance(info) {
      var _this;

      _classCallCheck(this, MaterialInstance);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(MaterialInstance).call(this));
      _this._passes = [];
      _this._parent = void 0;
      _this._owner = void 0;
      _this._subModelIdx = 0;
      _this._parent = info.parent;
      _this._owner = info.owner || null;
      _this._subModelIdx = info.subModelIdx || 0;

      _this.copy(_this._parent);

      return _this;
    }

    _createClass(MaterialInstance, [{
      key: "recompileShaders",
      value: function recompileShaders(overrides, passIdx) {
        if (!this._passes || !this.effectAsset) {
          return;
        }

        if (passIdx === undefined) {
          var _iterator = _createForOfIteratorHelper(this._passes),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var pass = _step.value;
              pass.tryCompile(overrides);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        } else {
          this._passes[passIdx].tryCompile(overrides);
        }
      }
    }, {
      key: "overridePipelineStates",
      value: function overridePipelineStates(overrides, passIdx) {
        if (!this._passes || !this.effectAsset) {
          return;
        }

        var passInfos = this.effectAsset.techniques[this.technique].passes;

        if (passIdx === undefined) {
          for (var i = 0; i < this._passes.length; i++) {
            var pass = this._passes[i];
            this._states[i] = overrides;
            pass.overridePipelineStates(passInfos[pass.idxInTech], overrides);
          }
        } else {
          this._states[passIdx] = overrides;

          this._passes[passIdx].overridePipelineStates(passInfos[passIdx], overrides);
        }
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this._doDestroy();

        return true;
      }
    }, {
      key: "onPassStateChange",
      value: function onPassStateChange(dontNotify) {
        this._hash = _material.Material.getHash(this);

        if (!dontNotify && this._owner) {
          // @ts-ignore
          this._owner._onRebuildPSO(this._subModelIdx, this);
        }
      }
    }, {
      key: "_createPasses",
      value: function _createPasses() {
        var passes = [];
        var parentPasses = this._parent.passes;

        if (!parentPasses) {
          return passes;
        }

        for (var k = 0; k < parentPasses.length; ++k) {
          passes.push(new _passInstance.PassInstance(parentPasses[k], this));
        }

        return passes;
      }
    }]);

    return MaterialInstance;
  }(_material.Material);

  _exports.MaterialInstance = MaterialInstance;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,