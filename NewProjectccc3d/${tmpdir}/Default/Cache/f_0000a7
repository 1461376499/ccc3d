(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../data/class-decorator.js", "../gfx/define.js", "./asset-enum.js", "./image-asset.js", "./simple-texture.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../data/class-decorator.js"), require("../gfx/define.js"), require("./asset-enum.js"), require("./image-asset.js"), require("./simple-texture.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.classDecorator, global.define, global.assetEnum, global.imageAsset, global.simpleTexture);
    global.texture2d = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _classDecorator, _define, _assetEnum, _imageAsset, _simpleTexture) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Texture2D = void 0;

  var _dec, _dec2, _class, _class2, _descriptor, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  /**
   * 二维贴图资源。
   * 二维贴图资源的每个 Mipmap 层级都为一张图像资源。
   */
  var Texture2D = (_dec = (0, _classDecorator.ccclass)('cc.Texture2D'), _dec2 = (0, _classDecorator.property)([_imageAsset.ImageAsset]), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_SimpleTexture) {
    _inherits(Texture2D, _SimpleTexture);

    _createClass(Texture2D, [{
      key: "mipmaps",

      /**
       * 所有层级 Mipmap，注意，这里不包含自动生成的 Mipmap。
       * 当设置 Mipmap 时，贴图的尺寸以及像素格式可能会改变。
       */
      get: function get() {
        return this._mipmaps;
      },
      set: function set(value) {
        var _this2 = this;

        this._mipmaps = value;

        this._setMipmapLevel(this._mipmaps.length);

        if (this._mipmaps.length > 0) {
          var imageAsset = this._mipmaps[0];
          this.reset({
            width: imageAsset.width,
            height: imageAsset.height,
            format: imageAsset.format,
            mipmapLevel: this._mipmaps.length
          });

          this._mipmaps.forEach(function (mipmap, level) {
            _this2._assignImage(mipmap, level);
          });
        } else {
          this.reset({
            width: 0,
            height: 0,
            mipmapLevel: this._mipmaps.length
          });
        }
      }
      /**
       * 0 级 Mipmap。
       * 注意，`this.image = i` 等价于 `this.mipmaps = [i]`，
       * 也就是说，通过 `this.image` 设置 0 级 Mipmap 时将隐式地清除之前的所有 Mipmap。
       */

    }, {
      key: "image",
      get: function get() {
        return this._mipmaps.length === 0 ? null : this._mipmaps[0];
      },
      set: function set(value) {
        this.mipmaps = value ? [value] : [];
      }
    }]);

    function Texture2D() {
      var _this;

      _classCallCheck(this, Texture2D);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Texture2D).call(this, true));

      _initializerDefineProperty(_this, "_mipmaps", _descriptor, _assertThisInitialized(_this));

      return _this;
    }

    _createClass(Texture2D, [{
      key: "initialize",
      value: function initialize() {
        this.mipmaps = this._mipmaps;
      }
    }, {
      key: "onLoaded",
      value: function onLoaded() {
        this.initialize();
      }
      /**
       * 将当前贴图重置为指定尺寸、像素格式以及指定 mipmap 层级。重置后，贴图的像素数据将变为未定义。
       * mipmap 图像的数据不会自动更新到贴图中，你必须显式调用 `this.uploadData` 来上传贴图数据。
       * @param info 贴图重置选项。
       */

    }, {
      key: "reset",
      value: function reset(info) {
        this._width = info.width;
        this._height = info.height;

        this._setGFXFormat(info.format);

        this._setMipmapLevel(info.mipmapLevel || 1);

        this._tryReset();
      }
      /**
       * 将当前贴图重置为指定尺寸、像素格式以及指定 mipmap 层级的贴图。重置后，贴图的像素数据将变为未定义。
       * mipmap 图像的数据不会自动更新到贴图中，你必须显式调用 `this.uploadData` 来上传贴图数据。
       * @param width 像素宽度。
       * @param height 像素高度。
       * @param format 像素格式。
       * @param mipmapLevel mipmap 层级。
       * @deprecated 将在 V1.0.0 移除，请转用 `this.reset()`。
       */

    }, {
      key: "create",
      value: function create(width, height) {
        var format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _assetEnum.PixelFormat.RGBA8888;
        var mipmapLevel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
        this.reset({
          width: width,
          height: height,
          format: format,
          mipmapLevel: mipmapLevel
        });
      }
      /**
       * 返回此贴图的字符串表示。
       */

    }, {
      key: "toString",
      value: function toString() {
        return this._mipmaps.length !== 0 ? this._mipmaps[0].url : '';
      }
    }, {
      key: "updateMipmaps",
      value: function updateMipmaps() {
        var firstLevel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var count = arguments.length > 1 ? arguments[1] : undefined;

        if (firstLevel >= this._mipmaps.length) {
          return;
        }

        var nUpdate = Math.min(count === undefined ? this._mipmaps.length : count, this._mipmaps.length - firstLevel);

        for (var i = 0; i < nUpdate; ++i) {
          var level = firstLevel + i;

          this._assignImage(this._mipmaps[level], level);
        }
      }
      /**
       * 若此贴图 0 级 Mipmap 的图像资源的实际源存在并为 HTML 元素则返回它，否则返回 `null`。
       * @returns HTML 元素或 `null`。
       * @deprecated 请转用 `this.image.data`。
       */

    }, {
      key: "getHtmlElementObj",
      value: function getHtmlElementObj() {
        return this._mipmaps[0] && this._mipmaps[0].data instanceof HTMLElement ? this._mipmaps[0].data : null;
      }
      /**
       * 销毁此贴图，清空所有 Mipmap 并释放占用的 GPU 资源。
       */

    }, {
      key: "destroy",
      value: function destroy() {
        this._mipmaps = [];
        return _get(_getPrototypeOf(Texture2D.prototype), "destroy", this).call(this);
      }
      /**
       * 返回此贴图的描述。
       * @returns 此贴图的描述。
       */

    }, {
      key: "description",
      value: function description() {
        var url = this._mipmaps[0] ? this._mipmaps[0].url : '';
        return "<cc.Texture2D | Name = ".concat(url, " | Dimension = ").concat(this.width, " x ").concat(this.height, ">");
      }
      /**
       * 释放占用的 GPU 资源。
       * @deprecated 请转用 `this.destroy()`。
       */

    }, {
      key: "releaseTexture",
      value: function releaseTexture() {
        this.destroy();
      }
    }, {
      key: "_serialize",
      value: function _serialize(exporting) {
        return {
          base: _get(_getPrototypeOf(Texture2D.prototype), "_serialize", this).call(this, exporting),
          mipmaps: this._mipmaps.map(function (mipmap) {
            if (!mipmap || !mipmap._uuid) {
              return null;
            }

            if (exporting) {
              return EditorExtends.UuidUtils.compressUuid(mipmap._uuid, true);
            }

            return mipmap._uuid;
          })
        };
      }
    }, {
      key: "_deserialize",
      value: function _deserialize(serializedData, handle) {
        var data = serializedData;

        _get(_getPrototypeOf(Texture2D.prototype), "_deserialize", this).call(this, data.base, handle);

        this._mipmaps = new Array(data.mipmaps.length);

        for (var i = 0; i < data.mipmaps.length; ++i) {
          // Prevent resource load failed
          this._mipmaps[i] = new _imageAsset.ImageAsset();

          if (!data.mipmaps[i]) {
            continue;
          }

          var mipmapUUID = data.mipmaps[i];
          handle.result.push(this._mipmaps, "".concat(i), mipmapUUID);
          this._mipmaps[i]._texture = this;
        }
      }
    }, {
      key: "_getGfxTextureCreateInfo",
      value: function _getGfxTextureCreateInfo(presumed) {
        return Object.assign({
          type: _define.GFXTextureType.TEX2D,
          width: this._width,
          height: this._height
        }, presumed);
      }
    }, {
      key: "_getGfxTextureViewCreateInfo",
      value: function _getGfxTextureViewCreateInfo(presumed) {
        return Object.assign({
          type: _define.GFXTextureViewType.TV2D
        }, presumed);
      }
    }, {
      key: "_checkTextureLoaded",
      value: function _checkTextureLoaded() {
        var ready = true;

        for (var i = 0; i < this._mipmaps.length; ++i) {
          var image = this._mipmaps[i];

          if (!image.loaded) {
            ready = false;
            break;
          }
        }

        if (ready) {
          _get(_getPrototypeOf(Texture2D.prototype), "_textureReady", this).call(this);
        }
      }
    }]);

    return Texture2D;
  }(_simpleTexture.SimpleTexture), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_mipmaps", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return [];
    }
  })), _class2)) || _class);
  _exports.Texture2D = Texture2D;
  cc.Texture2D = Texture2D;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,