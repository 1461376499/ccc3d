(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../data/class-decorator.js", "../event/index.js", "./raw-asset.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../data/class-decorator.js"), require("../event/index.js"), require("./raw-asset.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.classDecorator, global.index, global.rawAsset);
    global.asset = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _classDecorator, _index, _rawAsset) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Asset = void 0;

  var _dec, _dec2, _class, _class2, _descriptor, _class3, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  /**
   * @en
   * Base class for handling assets used in Creator.<br/>
   *
   * You may want to override:<br/>
   * - createNode<br/>
   * - getset functions of _nativeAsset<br/>
   * - cc.Object._serialize<br/>
   * - cc.Object._deserialize<br/>
   * @zh
   * Creator 中的资源基类。<br/>
   *
   * 您可能需要重写：<br/>
   * - createNode <br/>
   * - _nativeAsset 的 getset 方法<br/>
   * - cc.Object._serialize<br/>
   * - cc.Object._deserialize<br/>
   *
   * @class Asset
   * @extends RawAsset
   */
  var Asset = (_dec = (0, _classDecorator.ccclass)('cc.Asset'), _dec2 = (0, _classDecorator.property)({
    visible: false
  }), _dec(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Eventify) {
    _inherits(Asset, _Eventify);

    function Asset() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, Asset);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Asset)).call.apply(_getPrototypeOf2, [this].concat(args)));
      _this.loaded = true;

      _initializerDefineProperty(_this, "_native", _descriptor, _assertThisInitialized(_this));

      _this._file = null;
      return _this;
    }

    _createClass(Asset, [{
      key: "toString",

      /**
       * @en
       * Returns the string representation of the object.<br>
       * The `Asset` object overrides the `toString()` method of the `Object` object.<br>
       * JavaScript calls the toString() method automatically<br>
       * when an asset is to be represented as a text value or when a texture is referred to in a string concatenation.<br>
       * <br>
       * For assets of the native type, it will return `this.nativeUrl`.<br>
       * Otherwise, an empty string is returned.<br>
       * This method may be overwritten by subclasses.
       * @zh
       * 返回对象的字符串表示形式。<br>
       * `Asset` 对象将会重写 `Object` 对象的 `toString()` 方法。<br>
       * 当资源要表示为文本值时或在字符串连接时引用时，<br>
       * JavaScript 会自动调用 toString() 方法。<br>
       * <br>
       * 对于原始类型的资源，它将返回`this.nativeUrl`。<br>
       * 否则，返回空字符串。<br>
       * 子类可能会覆盖此方法。
       * @method toString
       * @return {String}
       */
      value: function toString() {
        return this.nativeUrl;
      }
      /**
       * 应 AssetDB 要求提供这个方法。
       * 返回一个序列化后的对象
       *
       * @method serialize
       * @return {String}
       * @private
       */

    }, {
      key: "serialize",
      value: function serialize() {}
      /**
       * @en
       * Set native file name for this asset.
       * @zh
       * 为此资源设置原始文件名。
       * @seealso nativeUrl
       *
       * @param filename
       * @param inLibrary
       * @private
       */

    }, {
      key: "_setRawAsset",
      value: function _setRawAsset(filename) {
        var inLibrary = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        if (inLibrary !== false) {
          this._native = filename || '';
        } else {
          this._native = '/' + filename; // simply use '/' to tag location where is not in the library
        }
      }
      /**
       * @en
       * Create a new node using this asset in the scene.<br/>
       * If this type of asset dont have its corresponding node type, this method should be null.
       * @zh
       * 使用该资源在场景中创建一个新节点。<br/>
       * 如果这类资源没有相应的节点类型，该方法应该是空的。
       */

    }, {
      key: "nativeUrl",

      /**
       * @en
       * Returns the url of this asset's native object, if none it will returns an empty string.
       * @zh
       * 返回该资源对应的目标平台资源的 URL，如果没有将返回一个空字符串。
       * @property nativeUrl
       * @type {String}
       * @readOnly
       */
      get: function get() {
        if (this._native) {
          var name = this._native;

          if (name.charCodeAt(0) === 47) {
            // '/'
            // remove library tag
            // not imported in library, just created on-the-fly
            return name.slice(1);
          }

          if (cc.AssetLibrary) {
            var base = cc.AssetLibrary.getLibUrlNoExt(this._uuid, true);

            if (name.charCodeAt(0) === 46) {
              // '.'
              // imported in dir where json exist
              return base + name;
            } else {
              // imported in an independent dir
              return base + '/' + name;
            }
          } else {
            cc.errorID(6400);
          }
        }

        return '';
      }
      /**
       * @en
       * The underlying native asset of this asset if one is available.<br>
       * This property can be used to access additional details or functionality releated to the asset.<br>
       * This property will be initialized by the loader if `_native` is available.
       * @zh
       * 此资源的基础资源（如果有）。 此属性可用于访问与资源相关的其他详细信息或功能。<br>
       * 如果`_native`可用，则此属性将由加载器初始化。
       * @property {Object} _nativeAsset
       * @default null
       * @private
       * @type {any}
       */

    }, {
      key: "_nativeAsset",
      get: function get() {
        return this._file;
      },
      set: function set(obj) {
        this._file = obj;
      }
    }], [{
      key: "deserialize",

      /**
       * 应 AssetDB 要求提供这个方法。
       * @method deserialize
       * @param {String} data
       * @return {Asset}
       */
      value: function deserialize(data) {
        return cc.deserialize(data);
      }
      /**
       * @en
       * Whether the asset is loaded or not
       * @zh
       * 该资源是否已经成功加载。
       */

    }]);

    return Asset;
  }((0, _index.Eventify)(_rawAsset.RawAsset)), _class3.preventDeferredLoadDependents = false, _class3.preventPreloadNativeObject = false, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_native", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return '';
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "nativeUrl", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "nativeUrl"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_nativeAsset", [_classDecorator.property], Object.getOwnPropertyDescriptor(_class2.prototype, "_nativeAsset"), _class2.prototype)), _class2)) || _class);
  /**
   * @param error - null or the error info
   * @param node - the created node or null
   */

  _exports.Asset = Asset;
  // @ts-ignore
  Asset.prototype.createNode = null;
  cc.Asset = Asset;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,