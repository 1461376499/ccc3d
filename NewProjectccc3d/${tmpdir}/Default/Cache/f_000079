(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../utils/js.js", "./class.js", "../platform/debug.js", "../default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../utils/js.js"), require("./class.js"), require("../platform/debug.js"), require("../default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.js, global._class, global.debug, global.defaultConstants);
    global.object = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, js, _class, _debug, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.isValid = isValid;
  _exports.CCObject = void 0;
  js = _interopRequireWildcard(js);
  _class = _interopRequireDefault(_class);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  // definitions for CCObject.Flags
  var Destroyed = 1 << 0;
  var RealDestroyed = 1 << 1;
  var ToDestroy = 1 << 2;
  var DontSave = 1 << 3;
  var EditorOnly = 1 << 4;
  var Dirty = 1 << 5;
  var DontDestroy = 1 << 6;
  var Destroying = 1 << 7;
  var Deactivating = 1 << 8;
  var LockedInEditor = 1 << 9; // var HideInGame = 1 << 9;

  var HideInHierarchy = 1 << 10;
  var IsOnEnableCalled = 1 << 11;
  var IsEditorOnEnableCalled = 1 << 12;
  var IsPreloadStarted = 1 << 13;
  var IsOnLoadCalled = 1 << 14;
  var IsOnLoadStarted = 1 << 15;
  var IsStartCalled = 1 << 16;
  var IsRotationLocked = 1 << 17;
  var IsScaleLocked = 1 << 18;
  var IsAnchorLocked = 1 << 19;
  var IsSizeLocked = 1 << 20;
  var IsPositionLocked = 1 << 21; // var Hide = HideInGame | HideInEditor;
  // should not clone or serialize these flags

  var PersistentMask = ~(ToDestroy | Dirty | Destroying | DontDestroy | Deactivating | IsPreloadStarted | IsOnLoadStarted | IsOnLoadCalled | IsStartCalled | IsOnEnableCalled | IsEditorOnEnableCalled | IsRotationLocked | IsScaleLocked | IsAnchorLocked | IsSizeLocked | IsPositionLocked
  /*RegisteredInEditor*/
  );
  var objectsToDestroy = [];
  var deferredDestroyTimer = null;

  function compileDestruct(obj, ctor) {
    var shouldSkipId = obj instanceof cc._BaseNode || obj instanceof cc.Component;
    var idToSkip = shouldSkipId ? '_id' : null;
    var key;
    var propsToReset = {};

    for (key in obj) {
      if (obj.hasOwnProperty(key)) {
        if (key === idToSkip) {
          continue;
        }

        switch (_typeof(obj[key])) {
          case 'string':
            propsToReset[key] = '';
            break;

          case 'object':
          case 'function':
            propsToReset[key] = null;
            break;
        }
      }
    } // Overwrite propsToReset according to Class


    if (_class.default._isCCClass(ctor)) {
      var attrs = cc.Class.Attr.getClassAttrs(ctor);
      var propList = ctor.__props__; // tslint:disable-next-line: prefer-for-of

      for (var i = 0; i < propList.length; i++) {
        key = propList[i];
        var attrKey = key + cc.Class.Attr.DELIMETER + 'default';

        if (attrKey in attrs) {
          if (shouldSkipId && key === '_id') {
            continue;
          }

          switch (_typeof(attrs[attrKey])) {
            case 'string':
              propsToReset[key] = '';
              break;

            case 'object':
            case 'function':
              propsToReset[key] = null;
              break;

            case 'undefined':
              propsToReset[key] = undefined;
              break;
          }
        }
      }
    }

    if (_defaultConstants.SUPPORT_JIT) {
      // compile code
      var func = ''; // tslint:disable: forin

      for (key in propsToReset) {
        var statement = void 0;

        if (_class.default.IDENTIFIER_RE.test(key)) {
          statement = 'o.' + key + '=';
        } else {
          statement = 'o[' + _class.default.escapeForJS(key) + ']=';
        }

        var val = propsToReset[key];

        if (val === '') {
          val = '""';
        }

        func += statement + val + ';\n';
      }

      return Function('o', func);
    } else {
      return function (o) {
        for (var _key in propsToReset) {
          o[_key] = propsToReset[_key];
        }
      };
    }
  }
  /**
   * @en
   * The base class of most of all the objects in Fireball.
   * @zh
   * 大部分对象的基类。
   * @private
   */


  var CCObject = /*#__PURE__*/function () {
    _createClass(CCObject, null, [{
      key: "_deferredDestroy",
      value: function _deferredDestroy() {
        var deleteCount = objectsToDestroy.length;

        for (var i = 0; i < deleteCount; ++i) {
          var obj = objectsToDestroy[i];

          if (!(obj._objFlags & Destroyed)) {
            obj._destroyImmediate();
          }
        } // if we called b.destory() in a.onDestroy(), objectsToDestroy will be resized,
        // but we only destroy the objects which called destory in this frame.


        if (deleteCount === objectsToDestroy.length) {
          objectsToDestroy.length = 0;
        } else {
          objectsToDestroy.splice(0, deleteCount);
        }

        if (_defaultConstants.EDITOR) {
          deferredDestroyTimer = null;
        }
      }
    }]);

    function CCObject() {
      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

      _classCallCheck(this, CCObject);

      this._objFlags = void 0;
      this._name = void 0;

      /**
       * @property {String} _name
       * @default ""
       * @private
       */
      this._name = name;
      /**
       * @property {Number} _objFlags
       * @default 0
       * @private
       */

      this._objFlags = 0;
    } // MEMBER

    /**
     * @en The name of the object.
     * @zh 该对象的名称。
     * @property {String} name
     * @default ""
     * @example
     * ```
     * obj.name = "New Obj";
     * ```
     */


    _createClass(CCObject, [{
      key: "destroy",

      /**
       * @en
       * Destroy this Object, and release all its own references to other objects.<br/>
       * Actual object destruction will delayed until before rendering.
       * From the next frame, this object is not usable any more.
       * You can use cc.isValid(obj) to check whether the object is destroyed before accessing it.
       * @zh
       * 销毁该对象，并释放所有它对其它对象的引用。<br/>
       * 实际销毁操作会延迟到当前帧渲染前执行。从下一帧开始，该对象将不再可用。
       * 您可以在访问对象之前使用 cc.isValid(obj) 来检查对象是否已被销毁。
       * @return whether it is the first time the destroy being called
       * @example
       * ```
       * obj.destroy();
       * ```
       */
      value: function destroy() {
        if (this._objFlags & Destroyed) {
          (0, _debug.warnID)(5000);
          return false;
        }

        if (this._objFlags & ToDestroy) {
          return false;
        }

        this._objFlags |= ToDestroy;
        objectsToDestroy.push(this);

        if (_defaultConstants.EDITOR && deferredDestroyTimer === null && cc.engine && !cc.engine._isUpdating) {
          // auto destroy immediate in edit mode
          // @ts-ignore
          deferredDestroyTimer = setImmediate(CCObject._deferredDestroy);
        }

        return true;
      }
      /**
       * Clear all references in the instance.
       *
       * NOTE: this method will not clear the getter or setter functions which defined in the instance of CCObject.
       *       You can override the _destruct method if you need, for example:
       *       _destruct: function () {
       *           for (var key in this) {
       *               if (this.hasOwnProperty(key)) {
       *                   switch (typeof this[key]) {
       *                       case 'string':
       *                           this[key] = '';
       *                           break;
       *                       case 'object':
       *                       case 'function':
       *                           this[key] = null;
       *                           break;
       *               }
       *           }
       *       }
       *
       */

    }, {
      key: "_destruct",
      value: function _destruct() {
        var ctor = this.constructor;
        var destruct = ctor.__destruct__;

        if (!destruct) {
          destruct = compileDestruct(this, ctor);
          js.value(ctor, '__destruct__', destruct, true);
        }

        destruct(this);
      }
    }, {
      key: "_destroyImmediate",
      value: function _destroyImmediate() {
        if (this._objFlags & Destroyed) {
          (0, _debug.errorID)(5000);
          return;
        } // engine internal callback
        // @ts-ignore


        if (this._onPreDestroy) {
          // @ts-ignore
          this._onPreDestroy();
        }

        if (!_defaultConstants.EDITOR || cc.engine._isPlaying) {
          this._destruct();
        }

        this._objFlags |= Destroyed;
      }
    }, {
      key: "name",
      get: function get() {
        return this._name;
      },
      set: function set(value) {
        this._name = value;
      }
      /**
       * @en
       * Indicates whether the object is not yet destroyed. (It will not be available after being destroyed)<br>
       * When an object's `destroy` is called, it is actually destroyed after the end of this frame.
       * So `isValid` will return false from the next frame, while `isValid` in the current frame will still be true.
       * If you want to determine whether the current frame has called `destroy`, use `cc.isValid(obj, true)`,
       * but this is often caused by a particular logical requirements, which is not normally required.
       *
       * @zh
       * 表示该对象是否可用（被 destroy 后将不可用）。<br>
       * 当一个对象的 `destroy` 调用以后，会在这一帧结束后才真正销毁。<br>
       * 因此从下一帧开始 `isValid` 就会返回 false，而当前帧内 `isValid` 仍然会是 true。<br>
       * 如果希望判断当前帧是否调用过 `destroy`，请使用 `cc.isValid(obj, true)`，不过这往往是特殊的业务需求引起的，通常情况下不需要这样。
       * @default true
       * @readOnly
       * @example
       * ```ts
       * import * as cc from 'cc';
       * var node = new cc.Node();
       * cc.log(node.isValid);    // true
       * node.destroy();
       * cc.log(node.isValid);    // true, still valid in this frame
       * // after a frame...
       * cc.log(node.isValid);    // false, destroyed in the end of last frame
       * ```
       */

    }, {
      key: "isValid",
      get: function get() {
        return !(this._objFlags & Destroyed);
      }
    }]);

    return CCObject;
  }();

  _exports.CCObject = CCObject;
  var prototype = CCObject.prototype;

  if (_defaultConstants.EDITOR || _defaultConstants.TEST) {
    js.get(prototype, 'isRealValid', function () {
      return !(this._objFlags & RealDestroyed);
    });
    /*
    * @en
    * In fact, Object's "destroy" will not trigger the destruct operation in Firebal Editor.
    * The destruct operation will be executed by Undo system later.
    * @zh
    * 事实上，对象的 “destroy” 不会在编辑器中触发析构操作，
    * 析构操作将在 Undo 系统中**延后**执行。
    * @method realDestroyInEditor
    * @private
    */
    // @ts-ignore

    prototype.realDestroyInEditor = function () {
      if (!(this._objFlags & Destroyed)) {
        (0, _debug.warnID)(5001);
        return;
      }

      if (this._objFlags & RealDestroyed) {
        (0, _debug.warnID)(5000);
        return;
      }

      this._destruct();

      this._objFlags |= RealDestroyed;
    };
  }

  if (_defaultConstants.EDITOR) {
    js.value(CCObject, '_clearDeferredDestroyTimer', function () {
      if (deferredDestroyTimer !== null) {
        // @ts-ignore
        clearImmediate(deferredDestroyTimer);
        deferredDestroyTimer = null;
      }
    });
    /*
     * The customized serialization for this object. (Editor Only)
     * @method _serialize
     * @param {Boolean} exporting
     * @return {object} the serialized json data object
     * @private
     */
    // @ts-ignore

    prototype._serialize = null;
  }
  /*
   * Init this object from the custom serialized data.
   * @method _deserialize
   * @param {Object} data - the serialized json data
   * @param {_Deserializer} ctx
   * @private
   */
  // @ts-ignore


  prototype._deserialize = null;
  /*
   * Called before the object being destroyed.
   * @method _onPreDestroy
   * @private
   */
  // @ts-ignore

  prototype._onPreDestroy = null;

  _class.default.fastDefine('cc.Object', CCObject, {
    _name: '',
    _objFlags: 0
  });
  /**
   * Bit mask that controls object states.
   * @enum Object.Flags
   * @private
   */


  js.value(CCObject, 'Flags', {
    Destroyed: Destroyed,
    // ToDestroy: ToDestroy,

    /**
     * @en The object will not be saved.
     * @zh 该对象将不会被保存。
     */
    DontSave: DontSave,

    /**
     * @en The object will not be saved when building a player.
     * @zh 构建项目时，该对象将不会被保存。
     */
    EditorOnly: EditorOnly,
    Dirty: Dirty,

    /**
     * @en Dont destroy automatically when loading a new scene.
     * @zh 加载一个新场景时，不自动删除该对象
     * @property DontDestroy
     * @private
     */
    DontDestroy: DontDestroy,
    PersistentMask: PersistentMask,
    // FLAGS FOR ENGINE
    Destroying: Destroying,

    /**
     * @en The node is deactivating.
     * @zh 节点正在反激活的过程中。
     * @private
     */
    Deactivating: Deactivating,

    /**
     * @en The lock node, when the node is locked, cannot be clicked in the scene.
     * @zh 锁定节点，锁定后场景内不能点击
     * @private
     */
    LockedInEditor: LockedInEditor,
    /// **
    // * @en
    // * Hide in game and hierarchy.
    // * This flag is readonly, it can only be used as an argument of scene.addEntity() or Entity.createWithFlags().
    // * @zh
    // * 在游戏和层级中隐藏该对象。<br/>
    // * 该标记只读，它只能被用作 scene.addEntity()的一个参数。
    // * @property {Number} HideInGame
    // */
    // HideInGame: HideInGame,
    // FLAGS FOR EDITOR
    /// **
    // * @en This flag is readonly, it can only be used as an argument of scene.addEntity() or Entity.createWithFlags().
    // * @zh 该标记只读，它只能被用作 scene.addEntity()的一个参数。
    // */
    HideInHierarchy: HideInHierarchy,
    /// **
    // * @en
    // * Hide in game view, hierarchy, and scene view... etc.
    // * This flag is readonly, it can only be used as an argument of scene.addEntity() or Entity.createWithFlags().
    // * @zh
    // * 在游戏视图，层级，场景视图等等...中隐藏该对象。
    // * 该标记只读，它只能被用作 scene.addEntity()的一个参数。
    // */
    // Hide: Hide,
    //// UUID Registered in editor
    // RegisteredInEditor: RegisteredInEditor,
    // FLAGS FOR COMPONENT
    IsPreloadStarted: IsPreloadStarted,
    IsOnLoadStarted: IsOnLoadStarted,
    IsOnLoadCalled: IsOnLoadCalled,
    IsOnEnableCalled: IsOnEnableCalled,
    IsStartCalled: IsStartCalled,
    IsEditorOnEnableCalled: IsEditorOnEnableCalled,
    IsPositionLocked: IsPositionLocked,
    IsRotationLocked: IsRotationLocked,
    IsScaleLocked: IsScaleLocked,
    IsAnchorLocked: IsAnchorLocked,
    IsSizeLocked: IsSizeLocked
  });
  /*
   * @en
   * Checks whether the object is non-nil and not yet destroyed.<br>
   * When an object's `destroy` is called, it is actually destroyed after the end of this frame.
   * So `isValid` will return false from the next frame, while `isValid` in the current frame will still be true.
   * If you want to determine whether the current frame has called `destroy`, use `cc.isValid(obj, true)`,
   * but this is often caused by a particular logical requirements, which is not normally required.
   *
   * @zh
   * 检查该对象是否不为 null 并且尚未销毁。<br>
   * 当一个对象的 `destroy` 调用以后，会在这一帧结束后才真正销毁。<br>
   * 因此从下一帧开始 `isValid` 就会返回 false，而当前帧内 `isValid` 仍然会是 true。<br>
   * 如果希望判断当前帧是否调用过 `destroy`，请使用 `cc.isValid(obj, true)`，不过这往往是特殊的业务需求引起的，通常情况下不需要这样。
   *
   * @method isValid
   * @param value
   * @param [strictMode=false] - If true, Object called destroy() in this frame will also treated as invalid.
   * @return whether is valid
   * @example
   * ```
   * import * as cc from 'cc';
   * var node = new cc.Node();
   * cc.log(cc.isValid(node));    // true
   * node.destroy();
   * cc.log(cc.isValid(node));    // true, still valid in this frame
   * // after a frame...
   * cc.log(cc.isValid(node));    // false, destroyed in the end of last frame
   * ```
   */

  function isValid(value, strictMode) {
    if (_typeof(value) === 'object') {
      return !!value && !(value._objFlags & (strictMode ? Destroyed | ToDestroy : Destroyed));
    } else {
      return typeof value !== 'undefined';
    }
  }

  cc.isValid = isValid;

  if (_defaultConstants.EDITOR || _defaultConstants.TEST) {
    js.value(CCObject, '_willDestroy', function (obj) {
      return !(obj._objFlags & Destroyed) && (obj._objFlags & ToDestroy) > 0;
    });
    js.value(CCObject, '_cancelDestroy', function (obj) {
      obj._objFlags &= ~ToDestroy;
      js.array.fastRemove(objectsToDestroy, obj);
    });
  }

  cc.Object = CCObject;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,