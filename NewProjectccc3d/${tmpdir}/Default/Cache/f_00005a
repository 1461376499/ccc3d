(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "@cocos/cannon", "./cannon-shape.js", "../../framework/physics-enum.js", "../cannon-util.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("@cocos/cannon"), require("./cannon-shape.js"), require("../../framework/physics-enum.js"), require("../cannon-util.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.cannon, global.cannonShape, global.physicsEnum, global.cannonUtil);
    global.cannonCylinderShape = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _cannon, _cannonShape, _physicsEnum, _cannonUtil) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.CannonCylinderShape = void 0;
  _cannon = _interopRequireDefault(_cannon);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  var CannonCylinderShape = /*#__PURE__*/function (_CannonShape) {
    _inherits(CannonCylinderShape, _CannonShape);

    _createClass(CannonCylinderShape, [{
      key: "setRadius",
      value: function setRadius(v) {
        this.updateProperties(this.collider.radius, this.collider.height, 18, this.collider.direction, this.collider.node.worldScale);
        if (this._index != -1) (0, _cannonUtil.commitShapeUpdates)(this._body);
      }
    }, {
      key: "setHeight",
      value: function setHeight(v) {
        this.updateProperties(this.collider.radius, this.collider.height, 18, this.collider.direction, this.collider.node.worldScale);
        if (this._index != -1) (0, _cannonUtil.commitShapeUpdates)(this._body);
      }
    }, {
      key: "setDirection",
      value: function setDirection(v) {
        this.updateProperties(this.collider.radius, this.collider.height, 18, this.collider.direction, this.collider.node.worldScale);
        if (this._index != -1) (0, _cannonUtil.commitShapeUpdates)(this._body);
      }
    }, {
      key: "collider",
      get: function get() {
        return this._collider;
      }
    }, {
      key: "impl",
      get: function get() {
        return this._shape;
      }
    }]);

    function CannonCylinderShape() {
      var _this;

      var radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.5;
      var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
      var direction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _physicsEnum.EAxisDirection.Y_AXIS;

      _classCallCheck(this, CannonCylinderShape);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(CannonCylinderShape).call(this));
      _this._shape = new _cannon.default.Cylinder(radius, radius, height, 18, direction == _physicsEnum.EAxisDirection.Y_AXIS);
      return _this;
    }

    _createClass(CannonCylinderShape, [{
      key: "onLoad",
      value: function onLoad() {
        _get(_getPrototypeOf(CannonCylinderShape.prototype), "onLoad", this).call(this);

        this.setRadius(this.collider.radius);
      }
    }, {
      key: "setScale",
      value: function setScale(scale) {
        _get(_getPrototypeOf(CannonCylinderShape.prototype), "setScale", this).call(this, scale);

        this.setRadius(this.collider.radius);
      }
    }, {
      key: "updateProperties",
      value: function updateProperties(radius, height, numSegments, direction, scale) {
        var wh = height;
        var wr = radius;
        var cos = Math.cos;
        var sin = Math.sin;
        var abs = Math.abs;
        var max = Math.max;

        if (direction == 1) {
          wh = abs(scale.y) * height;
          wr = max(abs(scale.x), abs(scale.z)) * radius;
        } else if (direction == 2) {
          wh = abs(scale.z) * height;
          wr = max(abs(scale.x), abs(scale.y)) * radius;
        } else {
          wh = abs(scale.x) * height;
          wr = max(abs(scale.y), abs(scale.z)) * radius;
        }

        var N = numSegments;
        var hH = wh / 2;
        var vertices = [];
        var indices = [];
        var axes = [];
        var theta = Math.PI * 2 / N;

        if (direction == 1) {
          var bf = [1];
          var tf = [0];

          for (var i = 0; i < N; i++) {
            var x = wr * cos(theta * i);
            var z = wr * sin(theta * i);
            vertices.push(new _cannon.default.Vec3(x, hH, z));
            vertices.push(new _cannon.default.Vec3(x, -hH, z));

            if (i < N - 1) {
              indices.push([2 * i + 2, 2 * i + 3, 2 * i + 1, 2 * i]);
              tf.push(2 * i + 2);
              bf.push(2 * i + 3);
            } else {
              indices.push([0, 1, 2 * i + 1, 2 * i]);
            }

            if (N % 2 === 1 || i < N / 2) {
              axes.push(new _cannon.default.Vec3(cos(theta * (i + 0.5)), 0, sin(theta * (i + 0.5))));
            }
          }

          indices.push(bf);
          var temp = [];

          for (var i = 0; i < tf.length; i++) {
            temp.push(tf[tf.length - i - 1]);
          }

          indices.push(temp);
          axes.push(new _cannon.default.Vec3(0, 1, 0));
        } else if (direction == 2) {
          var _bf = [0];
          var _tf = [1];

          for (var i = 0; i < N; i++) {
            var _x = wr * cos(theta * i);

            var y = wr * sin(theta * i);
            vertices.push(new _cannon.default.Vec3(_x, y, hH));
            vertices.push(new _cannon.default.Vec3(_x, y, -hH));

            if (i < N - 1) {
              indices.push([2 * i, 2 * i + 1, 2 * i + 3, 2 * i + 2]);

              _bf.push(2 * i + 2);

              _tf.push(2 * i + 3);
            } else {
              indices.push([2 * i, 2 * i + 1, 0, 1]);
            }

            if (N % 2 === 1 || i < N / 2) {
              axes.push(new _cannon.default.Vec3(cos(theta * (i + 0.5)), sin(theta * (i + 0.5)), 0));
            }
          }

          indices.push(_bf);
          var temp = [];

          for (var i = 0; i < _tf.length; i++) {
            temp.push(_tf[_tf.length - i - 1]);
          }

          indices.push(temp);
          axes.push(new _cannon.default.Vec3(0, 0, 1));
        } else {
          var _bf2 = [0];
          var _tf2 = [1];

          for (var i = 0; i < N; i++) {
            var _y = wr * cos(theta * i);

            var _z = wr * sin(theta * i);

            vertices.push(new _cannon.default.Vec3(hH, _y, _z));
            vertices.push(new _cannon.default.Vec3(-hH, _y, _z));

            if (i < N - 1) {
              indices.push([2 * i, 2 * i + 1, 2 * i + 3, 2 * i + 2]);

              _bf2.push(2 * i + 2);

              _tf2.push(2 * i + 3);
            } else {
              indices.push([2 * i, 2 * i + 1, 0, 1]);
            }

            if (N % 2 === 1 || i < N / 2) {
              axes.push(new _cannon.default.Vec3(0, cos(theta * (i + 0.5)), sin(theta * (i + 0.5))));
            }
          }

          indices.push(_bf2);
          var temp = [];

          for (var i = 0; i < _tf2.length; i++) {
            temp.push(_tf2[_tf2.length - i - 1]);
          }

          indices.push(temp);
          axes.push(new _cannon.default.Vec3(1, 0, 0));
        }

        this.impl.vertices = vertices;
        this.impl.faces = indices;
        this.impl.uniqueAxes = axes;
        this.impl.worldVerticesNeedsUpdate = true;
        this.impl.worldFaceNormalsNeedsUpdate = true;
        this.impl.computeNormals();
        this.impl.computeEdges();
        this.impl.updateBoundingSphereRadius();
      }
    }]);

    return CannonCylinderShape;
  }(_cannonShape.CannonShape);

  _exports.CannonCylinderShape = CannonCylinderShape;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,