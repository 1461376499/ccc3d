(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../memop/index.js", "../utils/js.js", "../default-constants.js", "../data/object.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../memop/index.js"), require("../utils/js.js"), require("../default-constants.js"), require("../data/object.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.js, global.defaultConstants, global.object);
    global.callbacksInvoker = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _js, _defaultConstants, _object) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.CallbacksInvoker = _exports.CallbackList = void 0;

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var fastRemoveAt = _js.array.fastRemoveAt;

  function empty() {}

  var CallbackInfo = /*#__PURE__*/function () {
    function CallbackInfo() {
      _classCallCheck(this, CallbackInfo);

      this.callback = empty;
      this.target = undefined;
      this.once = false;
    }

    _createClass(CallbackInfo, [{
      key: "set",
      value: function set(callback, target, once) {
        this.callback = callback || empty;
        this.target = target;
        this.once = !!once;
      }
    }, {
      key: "reset",
      value: function reset() {
        this.target = undefined;
        this.callback = empty;
        this.once = false;
      }
    }, {
      key: "check",
      value: function check() {
        // Validation
        if (this.target instanceof _object.CCObject && !(0, _object.isValid)(this.target, true)) {
          return false;
        } else {
          return true;
        }
      }
    }]);

    return CallbackInfo;
  }();

  var callbackInfoPool = new _index.Pool(function () {
    return new CallbackInfo();
  }, 32);
  /**
   * @zh 事件监听器列表的简单封装。
   * @en A simple list of event callbacks
   */

  var CallbackList = /*#__PURE__*/function () {
    function CallbackList() {
      _classCallCheck(this, CallbackList);

      this.callbackInfos = [];
      this.isInvoking = false;
      this.containCanceled = false;
    }

    _createClass(CallbackList, [{
      key: "removeByCallback",

      /**
       * @zh 从列表中移除与指定目标相同回调函数的事件。
       * @en Remove the event listeners with the given callback from the list
       *
       * @param cb - The callback to be removed
       */
      value: function removeByCallback(cb) {
        for (var i = 0; i < this.callbackInfos.length; ++i) {
          var info = this.callbackInfos[i];

          if (info && info.callback === cb) {
            info.reset();
            callbackInfoPool.free(info);
            fastRemoveAt(this.callbackInfos, i);
            --i;
          }
        }
      }
      /**
       * @zh 从列表中移除与指定目标相同调用者的事件。
       * @en Remove the event listeners with the given target from the list
       * @param target
       */

    }, {
      key: "removeByTarget",
      value: function removeByTarget(target) {
        for (var i = 0; i < this.callbackInfos.length; ++i) {
          var info = this.callbackInfos[i];

          if (info && info.target === target) {
            info.reset();
            callbackInfoPool.free(info);
            fastRemoveAt(this.callbackInfos, i);
            --i;
          }
        }
      }
      /**
       * @zh 移除指定编号事件。
       * @en Remove the event listener at the given index
       * @param index
       */

    }, {
      key: "cancel",
      value: function cancel(index) {
        var info = this.callbackInfos[index];

        if (info) {
          info.reset();

          if (this.isInvoking) {
            this.callbackInfos[index] = null;
          } else {
            fastRemoveAt(this.callbackInfos, index);
          }

          callbackInfoPool.free(info);
        }

        this.containCanceled = true;
      }
      /**
       * @zh 注销所有事件。
       * @en Cancel all event listeners
       */

    }, {
      key: "cancelAll",
      value: function cancelAll() {
        for (var i = 0; i < this.callbackInfos.length; i++) {
          var info = this.callbackInfos[i];

          if (info) {
            info.reset();
            callbackInfoPool.free(info);
            this.callbackInfos[i] = null;
          }
        }

        this.containCanceled = true;
      }
      /**
       * @zh 立即删除所有取消的回调。（在移除过程中会更加紧凑的排列数组）
       * @en Delete all canceled callbacks and compact array
       */

    }, {
      key: "purgeCanceled",
      value: function purgeCanceled() {
        for (var i = this.callbackInfos.length - 1; i >= 0; --i) {
          var info = this.callbackInfos[i];

          if (!info) {
            fastRemoveAt(this.callbackInfos, i);
          }
        }

        this.containCanceled = false;
      }
      /**
       * @zh 清除并重置所有数据。
       * @en Clear all data
       */

    }, {
      key: "clear",
      value: function clear() {
        this.cancelAll();
        this.callbackInfos.length = 0;
        this.isInvoking = false;
        this.containCanceled = false;
      }
    }]);

    return CallbackList;
  }();

  _exports.CallbackList = CallbackList;
  var MAX_SIZE = 16;
  var callbackListPool = new _index.Pool(function () {
    return new CallbackList();
  }, MAX_SIZE);

  /**
   * @zh CallbacksInvoker 用来根据事件名（Key）管理事件监听器列表并调用回调方法。
   * @en CallbacksInvoker is used to manager and invoke event listeners with different event keys, 
   * each key is mapped to a CallbackList.
   */
  var CallbacksInvoker = /*#__PURE__*/function () {
    function CallbacksInvoker() {
      _classCallCheck(this, CallbacksInvoker);

      this._callbackTable = (0, _js.createMap)(true);
    }

    _createClass(CallbacksInvoker, [{
      key: "on",

      /**
       * @zh 向一个事件名注册一个新的事件监听器，包含回调函数和调用者
       * @en Register an event listener to a given event key with callback and target.
       *
       * @param key - Event type
       * @param callback - Callback function when event triggered
       * @param target - Callback callee
       * @param once - Whether invoke the callback only once (and remove it)
       */
      value: function on(key, callback, target, once) {
        if (!this.hasEventListener(key, callback, target)) {
          var list = this._callbackTable[key];

          if (!list) {
            list = this._callbackTable[key] = callbackListPool.alloc();
          }

          var info = callbackInfoPool.alloc();
          info.set(callback, target, once);
          list.callbackInfos.push(info);
        }

        return callback;
      }
      /**
       * @zh 检查指定事件是否已注册回调。
       * @en Checks whether there is correspond event listener registered on the given event
       * @param key - Event type
       * @param callback - Callback function when event triggered
       * @param target - Callback callee
       */

    }, {
      key: "hasEventListener",
      value: function hasEventListener(key, callback, target) {
        var list = this._callbackTable[key];

        if (!list) {
          return false;
        } // check any valid callback


        var infos = list.callbackInfos;

        if (!callback) {
          // Make sure no cancelled callbacks
          if (list.isInvoking) {
            for (var i = 0; i < infos.length; ++i) {
              if (infos[i]) {
                return true;
              }
            }

            return false;
          } else {
            return infos.length > 0;
          }
        }

        for (var _i = 0; _i < infos.length; ++_i) {
          var info = infos[_i];

          if (info && info.check() && info.callback === callback && info.target === target) {
            return true;
          }
        }

        return false;
      }
      /**
       * @zh 移除在特定事件类型中注册的所有回调或在某个目标中注册的所有回调。
       * @en Removes all callbacks registered in a certain event type or all callbacks registered with a certain target
       * @param keyOrTarget - The event type or target with which the listeners will be removed
       */

    }, {
      key: "removeAll",
      value: function removeAll(keyOrTarget) {
        if (typeof keyOrTarget === 'string') {
          // remove by key
          var list = this._callbackTable[keyOrTarget];

          if (list) {
            if (list.isInvoking) {
              list.cancelAll();
            } else {
              list.clear();
              callbackListPool.free(list);
              delete this._callbackTable[keyOrTarget];
            }
          }
        } else if (keyOrTarget) {
          // remove by target
          for (var key in this._callbackTable) {
            var _list = this._callbackTable[key];

            if (_list.isInvoking) {
              var infos = _list.callbackInfos;

              for (var i = 0; i < infos.length; ++i) {
                var info = infos[i];

                if (info && info.target === keyOrTarget) {
                  _list.cancel(i);
                }
              }
            } else {
              _list.removeByTarget(keyOrTarget);
            }
          }
        }
      }
      /**
       * @zh 删除以指定事件，回调函数，目标注册的回调。
       * @en Remove event listeners registered with the given event key, callback and target
       * @param key - Event type
       * @param callback - The callback function of the event listener, if absent all event listeners for the given type will be removed
       * @param target - The callback callee of the event listener
       */

    }, {
      key: "off",
      value: function off(key, callback, target) {
        var list = this._callbackTable[key];

        if (list) {
          var infos = list.callbackInfos;

          if (callback) {
            for (var i = 0; i < infos.length; ++i) {
              var info = infos[i];

              if (info && info.callback === callback && info.target === target) {
                list.cancel(i);
                break;
              }
            }
          } else {
            this.removeAll(key);
          }
        }
      }
      /**
       * @zh 派发一个指定事件，并传递需要的参数
       * @en Trigger an event directly with the event name and necessary arguments.
       * @param key - event type
       * @param arg0 - The first argument to be passed to the callback
       * @param arg1 - The second argument to be passed to the callback
       * @param arg2 - The third argument to be passed to the callback
       * @param arg3 - The fourth argument to be passed to the callback
       * @param arg4 - The fifth argument to be passed to the callback
       */

    }, {
      key: "emit",
      value: function emit(key, arg0, arg1, arg2, arg3, arg4) {
        var list = this._callbackTable[key];

        if (list) {
          var rootInvoker = !list.isInvoking;
          list.isInvoking = true;
          var infos = list.callbackInfos;

          for (var i = 0, len = infos.length; i < len; ++i) {
            var info = infos[i];

            if (info) {
              var callback = info.callback;
              var target = info.target; // Pre off once callbacks to avoid influence on logic in callback

              if (info.once) {
                this.off(key, callback, target);
              } // Lazy check validity of callback target, 
              // if target is CCObject and is no longer valid, then remove the callback info directly


              if (!info.check()) {
                this.off(key, callback, target);
              } else {
                if (target) {
                  callback.call(target, arg0, arg1, arg2, arg3, arg4);
                } else {
                  callback(arg0, arg1, arg2, arg3, arg4);
                }
              }
            }
          }

          if (rootInvoker) {
            list.isInvoking = false;

            if (list.containCanceled) {
              list.purgeCanceled();
            }
          }
        }
      }
      /**
       * 移除所有回调。
       */

    }, {
      key: "clear",
      value: function clear() {
        for (var key in this._callbackTable) {
          var list = this._callbackTable[key];

          if (list) {
            list.clear();
            callbackListPool.free(list);
            delete this._callbackTable[key];
          }
        }
      }
    }]);

    return CallbacksInvoker;
  }();

  _exports.CallbacksInvoker = CallbacksInvoker;

  if (_defaultConstants.TEST) {
    cc._Test.CallbacksInvoker = CallbacksInvoker;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,