(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../utils/misc.js", "../utils/js.js", "./url.js", "../platform/debug.js", "../utils/path.js", "../assets/sprite-frame.js", "../assets/sprite-atlas.js", "../default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../utils/misc.js"), require("../utils/js.js"), require("./url.js"), require("../platform/debug.js"), require("../utils/path.js"), require("../assets/sprite-frame.js"), require("../assets/sprite-atlas.js"), require("../default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.misc, global.js, global.url, global.debug, global.path, global.spriteFrame, global.spriteAtlas, global.defaultConstants);
    global.assetTable = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _misc, _js, _url, _debug, _path, _spriteFrame, _spriteAtlas, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AssetTable = void 0;
  _url = _interopRequireDefault(_url);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var Entry = function Entry(uuid, type) {
    _classCallCheck(this, Entry);

    this.uuid = void 0;
    this.type = void 0;
    this.uuid = uuid;
    this.type = type;
  };

  function isMatchByWord(path, test) {
    if (path.length > test.length) {
      var nextAscii = path.charCodeAt(test.length);
      return nextAscii === 47; // '/'
    }

    return true;
  }
  /*
   * @en AssetTable is used to find asset's uuid by url.
   * @zh AssetTable 用于查找资源的 uuid 和 url。
   */


  var AssetTable = /*#__PURE__*/function () {
    function AssetTable() {
      _classCallCheck(this, AssetTable);

      this._pathToUuid = void 0;
      this._pathToUuid = (0, _js.createMap)(true);
    }
    /**
     * Retrieve the asset uuid with the asset path and type
     */


    _createClass(AssetTable, [{
      key: "getUuid",
      value: function getUuid(path, type) {
        path = _url.default.normalize(path);
        var item = this._pathToUuid[path];

        if (item) {
          if (Array.isArray(item)) {
            if (type) {
              for (var i = 0; i < item.length; i++) {
                var entry = item[i];

                if ((0, _js.isChildClassOf)(entry.type, type)) {
                  return entry.uuid;
                }
              } // not found


              if (_defaultConstants.DEBUG && (0, _js.isChildClassOf)(type, _spriteFrame.SpriteFrame)) {
                for (var _i = 0; _i < item.length; _i++) {
                  var _entry = item[_i];

                  if ((0, _js.isChildClassOf)(_entry.type, _spriteAtlas.SpriteAtlas)) {
                    // not support sprite frame in atlas
                    (0, _debug.errorID)(4932, path);
                    break;
                  }
                }
              }
            } else {
              return item[0].uuid;
            }
          } else if (!type || (0, _js.isChildClassOf)(item.type, type)) {
            return item.uuid;
          } else if (_defaultConstants.DEBUG && (0, _js.isChildClassOf)(type, _spriteFrame.SpriteFrame) && (0, _js.isChildClassOf)(item.type, _spriteAtlas.SpriteAtlas)) {
            // not support sprite frame in atlas
            (0, _debug.errorID)(4932, path);
          }
        }

        return '';
      }
      /**
       * Retrieve an uuid array with the asset path and type
       */

    }, {
      key: "getUuidArray",
      value: function getUuidArray(path, type, out_urls) {
        path = _url.default.normalize(path);

        if (path[path.length - 1] === '/') {
          path = path.slice(0, -1);
        }

        var path2uuid = this._pathToUuid;
        var uuids = [];

        var _foundAtlasUrl;

        for (var p in path2uuid) {
          if (p.startsWith(path) && isMatchByWord(p, path) || !path) {
            var item = path2uuid[p];

            if (Array.isArray(item)) {
              for (var i = 0; i < item.length; i++) {
                var entry = item[i];

                if (!type || (0, _js.isChildClassOf)(entry.type, type)) {
                  uuids.push(entry.uuid);

                  if (out_urls) {
                    out_urls.push(p);
                  }
                } else if (_defaultConstants.DEBUG && entry.type === _spriteAtlas.SpriteAtlas) {
                  _foundAtlasUrl = p;
                }
              }
            } else {
              if (!type || (0, _js.isChildClassOf)(item.type, type)) {
                uuids.push(item.uuid);

                if (out_urls) {
                  out_urls.push(p);
                }
              } else if (_defaultConstants.DEBUG && item.type === _spriteAtlas.SpriteAtlas) {
                _foundAtlasUrl = p;
              }
            }
          }
        }

        if (_defaultConstants.DEBUG && uuids.length === 0 && _foundAtlasUrl && (0, _js.isChildClassOf)(type, _spriteFrame.SpriteFrame)) {
          // not support sprite frame in atlas
          (0, _debug.errorID)(4932, _foundAtlasUrl);
        }

        return uuids;
      } // /**
      //  * @en Returns all asset paths in the table.
      //  * @zh 返回表中的所有资源路径。
      //  * @method getAllPaths
      //  * @return {string[]}
      //  */
      // getAllPaths () {
      //     return Object.keys(this._pathToUuid);
      // }

      /**
       * @en Add an asset entry with path as key and asset uuid & type as value to the table
       * @zh 以路径为 key，uuid 和资源类型为值添加到表中。
       * @param path - the path of the asset, should NOT include filename extensions.
       * @param uuid - The uuid of the asset
       * @param type - Constructor of the asset
       * @param isMainAsset
       * @private
       */

    }, {
      key: "add",
      value: function add(path, uuid, type, isMainAsset) {
        // remove extname
        // (can not use path.slice because length of extname maybe 0)
        isMainAsset && (path = path.substring(0, path.length - (0, _path.extname)(path).length));
        var newEntry = new Entry(uuid, type);
        (0, _misc.pushToMap)(this._pathToUuid, path, newEntry, isMainAsset);
      }
    }, {
      key: "_getInfo_DEBUG",
      value: function _getInfo_DEBUG(uuid, out_info) {
        var path2uuid = this._pathToUuid;
        var paths = Object.keys(path2uuid);

        for (var p = 0; p < paths.length; ++p) {
          var path = paths[p];
          var item = path2uuid[path];

          if (Array.isArray(item)) {
            for (var i = 0; i < item.length; i++) {
              var entry = item[i];

              if (entry.uuid === uuid) {
                out_info.path = path;
                out_info.type = entry.type;
                return true;
              }
            }
          } else if (item.uuid === uuid) {
            out_info.path = path;
            out_info.type = item.type;
            return true;
          }
        }

        return false;
      }
    }, {
      key: "reset",
      value: function reset() {
        this._pathToUuid = (0, _js.createMap)(true);
      }
    }]);

    return AssetTable;
  }();

  _exports.AssetTable = AssetTable;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,