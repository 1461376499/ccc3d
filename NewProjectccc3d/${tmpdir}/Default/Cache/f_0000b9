(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../utils/js.js", "../platform/debug.js", "./pipeline.js", "./pack-downloader.js", "./binary-downloader.js", "./text-downloader.js", "./utils.js", "../../audio/audio-downloader.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../utils/js.js"), require("../platform/debug.js"), require("./pipeline.js"), require("./pack-downloader.js"), require("./binary-downloader.js"), require("./text-downloader.js"), require("./utils.js"), require("../../audio/audio-downloader.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.js, global.debug, global.pipeline, global.packDownloader, global.binaryDownloader, global.textDownloader, global.utils, global.audioDownloader);
    global.downloader = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _js, debug, _pipeline, PackDownloader, _binaryDownloader, _textDownloader, _utils, _audioDownloader) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  debug = _interopRequireWildcard(debug);
  PackDownloader = _interopRequireWildcard(PackDownloader);
  _binaryDownloader = _interopRequireDefault(_binaryDownloader);
  _textDownloader = _interopRequireDefault(_textDownloader);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function skip() {
    return null;
  }

  function downloadScript(item, callback, isAsync) {
    var url = item.url,
        d = document,
        s = document.createElement('script');
    s.async = !!isAsync;
    s.src = (0, _utils.urlAppendTimestamp)(url);

    function loadHandler() {
      if (s.parentNode) s.parentNode.removeChild(s);
      s.removeEventListener('load', loadHandler, false);
      s.removeEventListener('error', errorHandler, false);
      callback(null, url);
    }

    function errorHandler() {
      if (s.parentNode) s.parentNode.removeChild(s);
      s.removeEventListener('load', loadHandler, false);
      s.removeEventListener('error', errorHandler, false);
      callback(new Error(debug.getError(4928, url)));
    }

    s.addEventListener('load', loadHandler, false);
    s.addEventListener('error', errorHandler, false);
    d.body.appendChild(s);
  }

  function downloadImage(item, callback, isCrossOrigin, img) {
    if (isCrossOrigin === undefined) {
      isCrossOrigin = true;
    }

    var url = (0, _utils.urlAppendTimestamp)(item.url);
    img = img || new Image();

    if (isCrossOrigin && window.location.protocol !== 'file:') {
      img.crossOrigin = 'anonymous';
    } else {
      img.crossOrigin = null;
    }

    function loadCallback() {
      img.removeEventListener('load', loadCallback);
      img.removeEventListener('error', errorCallback);
      img.id = item.id;
      callback(null, img);
    }

    function errorCallback() {
      img.removeEventListener('load', loadCallback);
      img.removeEventListener('error', errorCallback); // Retry without crossOrigin mark if crossOrigin loading fails
      // Do not retry if protocol is https, even if the image is loaded, cross origin image isn't renderable.

      if (window.location.protocol !== 'https:' && img.crossOrigin && img.crossOrigin.toLowerCase() === 'anonymous') {
        downloadImage(item, callback, false, img);
      } else {
        callback(new Error(debug.getError(4930, url)));
      }
    }

    if (img.complete && img.naturalWidth > 0 && img.src === url) {
      return img;
    } else {
      img.addEventListener('load', loadCallback);
      img.addEventListener('error', errorCallback);
      img.src = url;
    }
  }

  function downloadUuid(item, callback) {
    var result = PackDownloader.load(item, callback);

    if (result === undefined) {
      // @ts-ignore
      return this.extMap['json'](item, callback);
    }

    return result || undefined;
  }

  var defaultMap = {
    // JS
    'js': downloadScript,
    // Images
    'png': downloadImage,
    'jpg': downloadImage,
    'bmp': downloadImage,
    'jpeg': downloadImage,
    'gif': downloadImage,
    'ico': downloadImage,
    'tiff': downloadImage,
    'webp': downloadImage,
    'image': downloadImage,
    'pvr': _binaryDownloader.default,
    'pkm': _binaryDownloader.default,
    // Audio
    'mp3': _audioDownloader.downloadAudio,
    'ogg': _audioDownloader.downloadAudio,
    'wav': _audioDownloader.downloadAudio,
    'm4a': _audioDownloader.downloadAudio,
    // Txt
    'txt': _textDownloader.default,
    'xml': _textDownloader.default,
    'vsh': _textDownloader.default,
    'fsh': _textDownloader.default,
    'atlas': _textDownloader.default,
    'tmx': _textDownloader.default,
    'tsx': _textDownloader.default,
    'json': _textDownloader.default,
    'ExportJson': _textDownloader.default,
    'plist': _textDownloader.default,
    'fnt': _textDownloader.default,
    // Font
    'font': skip,
    'eot': skip,
    'ttf': skip,
    'woff': skip,
    'svg': skip,
    'ttc': skip,
    // Deserializer
    'uuid': downloadUuid,
    // Binary
    'binary': _binaryDownloader.default,
    'bin': _binaryDownloader.default,
    'default': _textDownloader.default
  };
  var ID = 'Downloader';

  /**
   * @en The downloader pipe in {{loader}}, it can download several types of files:
   * 1. Text
   * 2. Image
   * 3. Script
   * 4. Audio
   * 5. Binary
   * All unknown type will be downloaded as plain text.
   * You can pass custom supported types in the {{loader.addDownloadHandlers}}.
   * @zh {{loader}} 中的下载管线，可以下载下列类型的文件：
   * 1. Text
   * 2. Image
   * 3. Script
   * 4. Audio
   * 5. Binary
   * 所有未知类型会被当做文本来下载，也可以通过 {{loader.addDownloadHandlers}} 来定制下载行为
   */
  var Downloader = /*#__PURE__*/function () {
    function Downloader(extMap) {
      _classCallCheck(this, Downloader);

      this.id = ID;
      this.async = true;
      this.pipeline = null;
      this.extMap = void 0;
      this._curConcurrent = 0;
      this._loadQueue = [];
      this._subPackages = {};
      this.extMap = (0, _js.mixin)(extMap, defaultMap);
    }
    /**
     * @en Set sub package configurations, only available in certain platforms
     * @zh 设置子包配置，只在部分平台支持
     * @param subPackages 
     */


    _createClass(Downloader, [{
      key: "setSubPackages",
      value: function setSubPackages(subPackages) {
        this._subPackages = subPackages;
      }
      /**
       * @en Add custom supported types handler or modify existing type handler.
       * @zh 添加自定义支持的类型处理程序或修改现有的类型处理程序。
       * @param extMap Custom supported types with corresponded handler
       */

    }, {
      key: "addHandlers",
      value: function addHandlers(extMap) {
        (0, _js.mixin)(this.extMap, extMap);
      }
    }, {
      key: "_handleLoadQueue",
      value: function _handleLoadQueue() {
        while (this._curConcurrent < cc.macro.DOWNLOAD_MAX_CONCURRENT) {
          var nextOne = this._loadQueue.shift();

          if (!nextOne) {
            break;
          }

          var syncRet = this.handle(nextOne.item, nextOne.callback);

          if (syncRet !== undefined) {
            if (syncRet instanceof Error) {
              nextOne.callback(syncRet);
            } else {
              nextOne.callback(null, syncRet);
            }
          }
        }
      }
    }, {
      key: "handle",
      value: function handle(item, callback) {
        var self = this;
        var downloadFunc = this.extMap[item.type] || this.extMap['default'];
        var syncRet = undefined;

        if (this._curConcurrent < cc.macro.DOWNLOAD_MAX_CONCURRENT) {
          this._curConcurrent++;
          syncRet = downloadFunc.call(this, item, function (err, result) {
            self._curConcurrent = Math.max(0, self._curConcurrent - 1);

            self._handleLoadQueue();

            callback && callback(err, result);
          });

          if (syncRet !== undefined) {
            this._curConcurrent = Math.max(0, this._curConcurrent - 1);

            this._handleLoadQueue();

            return syncRet;
          }
        } else if (item.ignoreMaxConcurrency) {
          syncRet = downloadFunc.call(this, item, callback);

          if (syncRet !== undefined) {
            return syncRet;
          }
        } else {
          this._loadQueue.push({
            item: item,
            callback: callback
          });
        }
      }
      /**
       * @en Load sub package with name.
       * @zh 通过子包名加载子包代码。
       * @param name - Sub package name
       * @param completeCallback -  Callback invoked when sub package loaded
       * @param {Error} completeCallback.error - error information
       */

    }, {
      key: "loadSubpackage",
      value: function loadSubpackage(name, completeCallback) {
        var pac = this._subPackages[name];

        if (pac) {
          if (pac.loaded) {
            if (completeCallback) completeCallback();
          } else {
            downloadScript({
              url: pac.path
            }, function (err) {
              if (!err) {
                pac.loaded = true;
              }

              if (completeCallback) completeCallback(err);
            });
          }
        } else if (completeCallback) {
          completeCallback(new Error("Can't find subpackage ".concat(name)));
        }
      }
    }]);

    return Downloader;
  }(); // @ts-ignore


  _exports.default = Downloader;
  Downloader.ID = ID;
  Downloader.PackDownloader = PackDownloader;
  _pipeline.Pipeline.Downloader = Downloader;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,