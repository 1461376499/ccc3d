(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../platform/debug.js", "../../utils/js.js", "../../utils/misc.js", "../../default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../platform/debug.js"), require("../../utils/js.js"), require("../../utils/misc.js"), require("../../default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.debug, global.js, global.misc, global.defaultConstants);
    global.attribute = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _debug, _js, _misc, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.createAttrsSingle = createAttrsSingle;
  _exports.createAttrs = createAttrs;
  _exports.attr = attr;
  _exports.getClassAttrs = getClassAttrs;
  _exports.getClassAttrsProto = getClassAttrsProto;
  _exports.setClassAttr = setClassAttr;
  _exports.getTypeChecker = getTypeChecker;
  _exports.getObjTypeChecker = getObjTypeChecker;
  _exports.CCString = _exports.CCBoolean = _exports.CCFloat = _exports.CCInteger = _exports.PrimitiveType = _exports.DELIMETER = void 0;

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  var DELIMETER = '$_$';
  _exports.DELIMETER = DELIMETER;

  function createAttrsSingle(owner, ownerConstructor, superAttrs) {
    var AttrsCtor;

    if (_defaultConstants.DEV && _defaultConstants.SUPPORT_JIT) {
      var ctorName = ownerConstructor.name;

      if (owner === ownerConstructor) {
        ctorName += '_ATTRS';
      } else {
        ctorName += '_ATTRS_INSTANCE';
      }

      AttrsCtor = Function('return (function ' + ctorName + '(){});')();
    } else {
      AttrsCtor = function AttrsCtor() {};
    }

    if (superAttrs) {
      (0, _js.extend)(AttrsCtor, superAttrs.constructor);
    }

    var attrs = new AttrsCtor();
    (0, _js.value)(owner, '__attrs__', attrs);
    return attrs;
  }
  /**
   * @param subclass Should not have '__attrs__'.
   */


  function createAttrs(subclass) {
    var superClass;
    var chains = cc.Class.getInheritanceChain(subclass);

    for (var i = chains.length - 1; i >= 0; i--) {
      var cls = chains[i];

      var attrs = cls.hasOwnProperty('__attrs__') && cls.__attrs__;

      if (!attrs) {
        superClass = chains[i + 1];
        createAttrsSingle(cls, cls, superClass && superClass.__attrs__);
      }
    }

    superClass = chains[0];
    createAttrsSingle(subclass, subclass, superClass && superClass.__attrs__);
    return subclass.__attrs__;
  } // /**
  //  * @class Class
  //  */

  /**
   * Tag the class with any meta attributes, then return all current attributes assigned to it.
   * This function holds only the attributes, not their implementations.
   * @param constructor The class or instance. If instance, the attribute will be dynamic and only available for the specified instance.
   * @param propertyName The name of property or function, used to retrieve the attributes.
   * @param [newAttributes] The attribute table to mark, new attributes will merged with existed attributes.
   * Attribute whose key starts with '_' will be ignored.
   * @private
   */


  function attr(constructor, propertyName, newAttributes) {
    var attrs, setter;

    if (typeof constructor === 'function') {
      // Attributes shared between instances.
      attrs = getClassAttrs(constructor);
      setter = attrs.constructor.prototype;
    } else {
      // Attributes in instance.
      var instance = constructor;
      attrs = instance.__attrs__;

      if (!attrs) {
        constructor = instance.constructor;
        var clsAttrs = getClassAttrs(constructor);
        attrs = createAttrsSingle(instance, constructor, clsAttrs);
      }

      setter = attrs;
    }

    if (typeof newAttributes === 'undefined') {
      // Get.
      var prefix = propertyName + DELIMETER;
      var ret = {};

      for (var key in attrs) {
        if (key.startsWith(prefix)) {
          ret[key.slice(prefix.length)] = attrs[key];
        }
      }

      return ret;
    } else {
      // Set.
      if (_typeof(newAttributes) === 'object') {
        for (var _key in newAttributes) {
          if (_key.charCodeAt(0) !== 95
          /* _ */
          ) {
              setter[propertyName + DELIMETER + _key] = newAttributes[_key];
            }
        }
      } else if (_defaultConstants.DEV) {
        (0, _debug.errorID)(3629);
      }
    }
  }
  /**
   * Returns a readonly meta object.
   */


  function getClassAttrs(constructor) {
    return constructor.hasOwnProperty('__attrs__') && constructor.__attrs__ || createAttrs(constructor);
  }
  /**
   * Returns a writable meta object, used to set multi attributes.
   */


  function getClassAttrsProto(constructor) {
    return getClassAttrs(constructor).constructor.prototype;
  }

  function setClassAttr(ctor, propName, key, value) {
    var proto = getClassAttrsProto(ctor);
    proto[propName + DELIMETER + key] = value;
  }

  var PrimitiveType = /*#__PURE__*/function () {
    function PrimitiveType(name, defaultValue) {
      _classCallCheck(this, PrimitiveType);

      this.name = void 0;
      this["default"] = void 0;
      this.name = name;
      this["default"] = defaultValue;
    }

    _createClass(PrimitiveType, [{
      key: "toString",
      value: function toString() {
        return this.name;
      }
    }]);

    return PrimitiveType;
  }();
  /**
   * 指定编辑器以整数形式对待该属性或数组元素。
   * 例如：
   * ```ts
   * import { CCInteger, _decorator } from "Cocos3D";
   *
   * // 在 cc 类定义中:
   *
   * \@_decorator.property({type: CCInteger})
   * count = 0;
   *
   * \@_decorator.property({type: [CCInteger]})
   * array = [];
   * ```
   */


  _exports.PrimitiveType = PrimitiveType;
  var CCInteger = new PrimitiveType('Integer', 0);
  _exports.CCInteger = CCInteger;
  cc.Integer = CCInteger;
  cc.CCInteger = CCInteger;
  /**
   * 指定编辑器以浮点数形式对待该属性或数组元素。
   * 例如：
   * ```ts
   * import { CCFloat, _decorator } from "Cocos3D";
   *
   * // 在 cc 类定义中:
   *
   * \@_decorator.property({type: CCFloat})
   * x = 0;
   *
   * \@_decorator.property({type: [CCFloat]})
   * array = [];
   * ```
   */

  var CCFloat = new PrimitiveType('Float', 0.0);
  _exports.CCFloat = CCFloat;
  cc.Float = CCFloat;
  cc.CCFloat = CCFloat;

  if (_defaultConstants.EDITOR) {
    (0, _js.get)(cc, 'Number', function () {
      (0, _debug.warnID)(3603);
      return CCFloat;
    });
  }
  /**
   * 指定编辑器以布尔值形式对待该属性或数组元素。
   * 例如：
   * ```ts
   * import { CCBoolean, _decorator } from "Cocos3D";
   *
   * // 在 cc 类定义中:
   *
   * \@_decorator.property({type: CCBoolean})
   * isTrue = false;
   *
   * \@_decorator.property({type: [CCBoolean]})
   * array = [];
   * ```
   */


  var CCBoolean = new PrimitiveType('Boolean', false);
  _exports.CCBoolean = CCBoolean;
  cc.Boolean = CCBoolean;
  cc.CCBoolean = CCBoolean;
  /**
   * 指定编辑器以字符串形式对待该属性或数组元素。
   * 例如：
   * ```ts
   * import { CCString, _decorator } from "Cocos3D";
   *
   * // 在 cc 类定义中:
   *
   * \@_decorator.property({type: CCString})
   * name = '';
   *
   * \@_decorator.property({type: [CCString]})
   * array = [];
   * ```
   */

  var CCString = new PrimitiveType('String', '');
  _exports.CCString = CCString;
  cc.String = CCString;
  cc.CCString = CCString;
  /*
  BuiltinAttributes: {
      default: defaultValue,
      _canUsedInSetter: false, (default false) (NYI)
  }
  Getter or Setter: {
      hasGetter: true,
      hasSetter: true,
  }
  Callbacks: {
      _onAfterProp: function (constructor, propName) {},
      _onAfterGetter: function (constructor, propName) {}, (NYI)
      _onAfterSetter: function (constructor, propName) {}, (NYI)
  }
   */

  function getTypeChecker(type, attributeName) {
    return function (constructor, mainPropertyName) {
      var propInfo = '"' + (0, _js.getClassName)(constructor) + '.' + mainPropertyName + '"';
      var mainPropAttrs = attr(constructor, mainPropertyName);

      if (!mainPropAttrs.saveUrlAsAsset) {
        var mainPropAttrsType = mainPropAttrs.type;

        if (mainPropAttrsType === CCInteger || mainPropAttrsType === CCFloat) {
          mainPropAttrsType = 'Number';
        } else if (mainPropAttrsType === CCString || mainPropAttrsType === CCBoolean) {
          mainPropAttrsType = mainPropAttrsType.toString();
        }

        if (mainPropAttrsType !== type) {
          (0, _debug.warnID)(3604, propInfo);
          return;
        }
      }

      if (!mainPropAttrs.hasOwnProperty('default')) {
        return;
      }

      var defaultVal = mainPropAttrs["default"];

      if (typeof defaultVal === 'undefined') {
        return;
      }

      var isContainer = Array.isArray(defaultVal) || (0, _misc.isPlainEmptyObj_DEV)(defaultVal);

      if (isContainer) {
        return;
      }

      var defaultType = _typeof(defaultVal);

      var type_lowerCase = type.toLowerCase();

      if (defaultType === type_lowerCase) {
        if (!mainPropAttrs.saveUrlAsAsset) {
          if (type_lowerCase === 'object') {
            if (defaultVal && !(defaultVal instanceof mainPropAttrs.ctor)) {
              (0, _debug.warnID)(3605, propInfo, (0, _js.getClassName)(mainPropAttrs.ctor));
            } else {
              return;
            }
          } else if (type !== 'Number') {
            (0, _debug.warnID)(3606, attributeName, propInfo, type);
          }
        }
      } else if (defaultType !== 'function') {
        if (type === CCString["default"] && defaultVal == null) {
          if (!(0, _js.isChildClassOf)(mainPropAttrs.ctor, cc.RawAsset)) {
            (0, _debug.warnID)(3607, propInfo);
          }
        } else {
          (0, _debug.warnID)(3611, attributeName, propInfo, defaultType);
        }
      } else {
        return;
      }

      delete mainPropAttrs.type;
    };
  }

  function getObjTypeChecker(typeCtor) {
    return function (classCtor, mainPropName) {
      getTypeChecker('Object', 'type')(classCtor, mainPropName); // check ValueType

      var defaultDef = getClassAttrs(classCtor)[mainPropName + DELIMETER + 'default'];
      var defaultVal = cc.Class.getDefault(defaultDef);

      if (!Array.isArray(defaultVal) && (0, _js.isChildClassOf)(typeCtor, cc.ValueType)) {
        var typename = (0, _js.getClassName)(typeCtor);
        var info = (0, _js.formatStr)('No need to specify the "type" of "%s.%s" because %s is a child class of ValueType.', (0, _js.getClassName)(classCtor), mainPropName, typename);

        if (defaultDef) {
          (0, _debug.log)(info);
        } else {
          (0, _debug.warnID)(3612, info, typename, (0, _js.getClassName)(classCtor), mainPropName, typename);
        }
      }
    };
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,