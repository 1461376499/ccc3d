(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../data/class.js", "../value-types/value-type.js", "./size.js", "./vec2.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../data/class.js"), require("../value-types/value-type.js"), require("./size.js"), require("./vec2.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global._class, global.valueType, global.size, global.vec2);
    global.rect = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _class, _valueType, _size, _vec) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.rect = rect;
  _exports.Rect = void 0;
  _class = _interopRequireDefault(_class);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  /**
   * 轴对齐矩形。
   * 矩形内的所有点都大于等于矩形的最小点 (xMin, yMin) 并且小于等于矩形的最大点 (xMax, yMax)。
   * 矩形的宽度定义为 xMax - xMin；高度定义为 yMax - yMin。
   */
  var Rect = /*#__PURE__*/function (_ValueType) {
    _inherits(Rect, _ValueType);

    _createClass(Rect, [{
      key: "xMin",

      /**
       * 获取或设置矩形在 x 轴上的最小值。
       */
      get: function get() {
        return this.x;
      },
      set: function set(value) {
        this.width += this.x - value;
        this.x = value;
      }
      /**
       * 获取或设置矩形在 y 轴上的最小值。
       */

    }, {
      key: "yMin",
      get: function get() {
        return this.y;
      },
      set: function set(value) {
        this.height += this.y - value;
        this.y = value;
      }
      /**
       * 获取或设置矩形在 x 轴上的最大值。
       */

    }, {
      key: "xMax",
      get: function get() {
        return this.x + this.width;
      },
      set: function set(value) {
        this.width = value - this.x;
      }
      /**
       * 获取或设置矩形在 y 轴上的最大值。
       */

    }, {
      key: "yMax",
      get: function get() {
        return this.y + this.height;
      },
      set: function set(value) {
        this.height = value - this.y;
      }
      /**
       * 获取或设置矩形中心点的坐标。
       */

    }, {
      key: "center",
      get: function get() {
        return new _vec.Vec2(this.x + this.width * 0.5, this.y + this.height * 0.5);
      },
      set: function set(value) {
        this.x = value.x - this.width * 0.5;
        this.y = value.y - this.height * 0.5;
      }
      /**
       * 获取或设置矩形最小点的坐标。
       */

    }, {
      key: "origin",
      get: function get() {
        return new cc.Vec2(this.x, this.y);
      },
      set: function set(value) {
        this.x = value.x;
        this.y = value.y;
      }
      /**
       * 获取或设置矩形的尺寸。
       */

    }, {
      key: "size",
      get: function get() {
        return new _size.Size(this.width, this.height);
      },
      set: function set(value) {
        this.width = value.width;
        this.height = value.height;
      } // compatibility with vector interfaces

    }, {
      key: "z",
      set: function set(val) {
        this.width = val;
      },
      get: function get() {
        return this.width;
      }
    }, {
      key: "w",
      set: function set(val) {
        this.height = val;
      },
      get: function get() {
        return this.height;
      }
      /**
       * 获取或设置矩形最小点的 x 坐标。
       */

    }], [{
      key: "fromMinMax",

      /**
       * 由任意两个点创建一个矩形，目标矩形即是这两个点各向 x、y 轴作线所得到的矩形。
       * @param v1 指定的点。
       * @param v2 指定的点。
       * @returns 目标矩形。
       */
      value: function fromMinMax(out, v1, v2) {
        var minX = Math.min(v1.x, v2.x);
        var minY = Math.min(v1.y, v2.y);
        var maxX = Math.max(v1.x, v2.x);
        var maxY = Math.max(v1.y, v2.y);
        out.x = minX;
        out.y = minY;
        out.width = maxX - minX;
        out.height = maxY - minY;
        return out;
      }
      /**
       * 根据指定的插值比率，从当前矩形到目标矩形之间做插值。
       * @param out 本方法将插值结果赋值给此参数
       * @param from 起始矩形。
       * @param to 目标矩形。
       * @param ratio 插值比率，范围为 [0,1]。
       */

    }, {
      key: "lerp",
      value: function lerp(out, from, to, ratio) {
        var x = from.x;
        var y = from.y;
        var w = from.width;
        var h = from.height;
        out.x = x + (to.x - x) * ratio;
        out.y = y + (to.y - y) * ratio;
        out.width = w + (to.width - w) * ratio;
        out.height = h + (to.height - h) * ratio;
        return out;
      }
      /**
       * 计算当前矩形与指定矩形重叠部分的矩形，将其赋值给出口矩形。
       * @param out 出口矩形。
       * @param one 指定的一个矩形。
       * @param other 指定的另一个矩形。
       */

    }, {
      key: "intersection",
      value: function intersection(out, one, other) {
        var axMin = one.x;
        var ayMin = one.y;
        var axMax = one.x + one.width;
        var ayMax = one.y + one.height;
        var bxMin = other.x;
        var byMin = other.y;
        var bxMax = other.x + other.width;
        var byMax = other.y + other.height;
        out.x = Math.max(axMin, bxMin);
        out.y = Math.max(ayMin, byMin);
        out.width = Math.min(axMax, bxMax) - out.x;
        out.height = Math.min(ayMax, byMax) - out.y;
        return out;
      }
      /**
       * 创建同时包含当前矩形和指定矩形的最小矩形，将其赋值给出口矩形。
       * @param out 出口矩形。
       * @param one 指定的一个矩形。
       * @param other 指定的另一个矩形。
       */

    }, {
      key: "union",
      value: function union(out, one, other) {
        var x = one.x;
        var y = one.y;
        var w = one.width;
        var h = one.height;
        var bx = other.x;
        var by = other.y;
        var bw = other.width;
        var bh = other.height;
        out.x = Math.min(x, bx);
        out.y = Math.min(y, by);
        out.width = Math.max(x + w, bx + bw) - out.x;
        out.height = Math.max(y + h, by + bh) - out.y;
        return out;
      }
    }]);

    function Rect(x, y, width, height) {
      var _this;

      _classCallCheck(this, Rect);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Rect).call(this));

      if (x && _typeof(x) === 'object') {
        _this.y = x.y;
        _this.width = x.width;
        _this.height = x.height;
        _this.x = x.x;
      } else {
        _this.x = x || 0;
        _this.y = y || 0;
        _this.width = width || 0;
        _this.height = height || 0;
      }

      return _this;
    }
    /**
     * 克隆当前矩形。
     */


    _createClass(Rect, [{
      key: "clone",
      value: function clone() {
        return new Rect(this.x, this.y, this.width, this.height);
      }
      /**
       * 设置当前矩形使其与指定矩形相等。
       * @param other 相比较的矩形。
       * @returns `this`
       */

    }, {
      key: "set",
      value: function set(x, y, width, height) {
        if (x && _typeof(x) === 'object') {
          this.y = x.y;
          this.width = x.width;
          this.height = x.height;
          this.x = x.x;
        } else {
          this.x = x || 0;
          this.y = y || 0;
          this.width = width || 0;
          this.height = height || 0;
        }

        return this;
      }
      /**
       * 判断当前矩形是否与指定矩形相等。
       * @param other 相比较的矩形。
       * @returns 两矩阵的最小值和最大值都分别相等时返回 `true`；否则返回 `false`。
       */

    }, {
      key: "equals",
      value: function equals(other) {
        return this.x === other.x && this.y === other.y && this.width === other.width && this.height === other.height;
      }
      /**
       * 根据指定的插值比率，从当前矩形到目标矩形之间做插值。
       * @param to 目标矩形。
       * @param ratio 插值比率，范围为 [0,1]。
       */

    }, {
      key: "lerp",
      value: function lerp(to, ratio) {
        var x = this.x;
        var y = this.y;
        var w = this.width;
        var h = this.height;
        this.x = x + (to.x - x) * ratio;
        this.y = y + (to.y - y) * ratio;
        this.width = w + (to.width - w) * ratio;
        this.height = h + (to.height - h) * ratio;
        return this;
      }
      /**
       * 返回当前矩形的字符串表示。
       * @returns 当前矩形的字符串表示。
       */

    }, {
      key: "toString",
      value: function toString() {
        return "(".concat(this.x.toFixed(2), ", ").concat(this.y.toFixed(2), ", ").concat(this.width.toFixed(2), ", ").concat(this.height.toFixed(2), ")");
      }
      /**
       * 判断当前矩形是否与指定矩形相交。
       * @param other 相比较的矩形。
       * @returns 相交则返回 `true`，否则返回 `false`。
       */

    }, {
      key: "intersects",
      value: function intersects(other) {
        var maxax = this.x + this.width;
        var maxay = this.y + this.height;
        var maxbx = other.x + other.width;
        var maxby = other.y + other.height;
        return !(maxax < other.x || maxbx < this.x || maxay < other.y || maxby < this.y);
      }
      /**
       * 判断当前矩形是否包含指定的点。
       * @param point 指定的点。
       * @returns 指定的点包含在矩形内则返回 `true`，否则返回 `false`。
       */

    }, {
      key: "contains",
      value: function contains(point) {
        return this.x <= point.x && this.x + this.width >= point.x && this.y <= point.y && this.y + this.height >= point.y;
      }
      /**
       * 判断当前矩形是否包含指定矩形。
       * @param other 指定的矩形。
       * @returns 指定矩形所有的点都包含在当前矩形内则返回 `true`，否则返回 `false`。
       */

    }, {
      key: "containsRect",
      value: function containsRect(other) {
        return this.x <= other.x && this.x + this.width >= other.x + other.width && this.y <= other.y && this.y + this.height >= other.y + other.height;
      }
      /**
       * 应用矩阵变换到当前矩形：
       * 应用矩阵变换到当前矩形的最小点得到新的最小点，
       * 将当前矩形的尺寸视为二维向量应用矩阵变换得到新的尺寸；
       * 并将如此构成的新矩形。
       * @param matrix 变换矩阵。
       */

    }, {
      key: "transformMat4",
      value: function transformMat4(mat) {
        var ol = this.x;
        var ob = this.y;
        var or = ol + this.width;
        var ot = ob + this.height;
        var lbx = mat.m00 * ol + mat.m04 * ob + mat.m12;
        var lby = mat.m01 * ol + mat.m05 * ob + mat.m13;
        var rbx = mat.m00 * or + mat.m04 * ob + mat.m12;
        var rby = mat.m01 * or + mat.m05 * ob + mat.m13;
        var ltx = mat.m00 * ol + mat.m04 * ot + mat.m12;
        var lty = mat.m01 * ol + mat.m05 * ot + mat.m13;
        var rtx = mat.m00 * or + mat.m04 * ot + mat.m12;
        var rty = mat.m01 * or + mat.m05 * ot + mat.m13;
        var minX = Math.min(lbx, rbx, ltx, rtx);
        var maxX = Math.max(lbx, rbx, ltx, rtx);
        var minY = Math.min(lby, rby, lty, rty);
        var maxY = Math.max(lby, rby, lty, rty);
        this.x = minX;
        this.y = minY;
        this.width = maxX - minX;
        this.height = maxY - minY;
        return this;
      }
    }]);

    return Rect;
  }(_valueType.ValueType);

  _exports.Rect = Rect;

  _class.default.fastDefine('cc.Rect', Rect, {
    x: 0,
    y: 0,
    width: 0,
    height: 0
  });

  cc.Rect = Rect;
  /**
   * 构造与指定矩形相等的矩形。等价于 `new Rect(rect)`。
   * @param rect 相比较的矩形。
   * @returns `new Rect(rect)`
   */

  function rect() {
    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    return new Rect(x, y, width, height);
  }

  cc.rect = rect;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,