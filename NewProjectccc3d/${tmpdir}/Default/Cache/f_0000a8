(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../data/class-decorator.js", "../gfx/define.js", "./image-asset.js", "./simple-texture.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../data/class-decorator.js"), require("../gfx/define.js"), require("./image-asset.js"), require("./simple-texture.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.classDecorator, global.define, global.imageAsset, global.simpleTexture);
    global.textureCube = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _classDecorator, _define, _imageAsset, _simpleTexture) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TextureCube = void 0;

  var _dec, _class, _class2, _descriptor, _class3, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  /**
   * 立方体每个面的约定索引。
   */
  var FaceIndex;
  /**
   * 立方体贴图资源。
   * 立方体贴图资源的每个 Mipmap 层级都为 6 张图像资源，分别代表了立方体贴图的 6 个面。
   */

  (function (FaceIndex) {
    FaceIndex[FaceIndex["right"] = 0] = "right";
    FaceIndex[FaceIndex["left"] = 1] = "left";
    FaceIndex[FaceIndex["top"] = 2] = "top";
    FaceIndex[FaceIndex["bottom"] = 3] = "bottom";
    FaceIndex[FaceIndex["front"] = 4] = "front";
    FaceIndex[FaceIndex["back"] = 5] = "back";
  })(FaceIndex || (FaceIndex = {}));

  var TextureCube = (_dec = (0, _classDecorator.ccclass)('cc.TextureCube'), _dec(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_SimpleTexture) {
    _inherits(TextureCube, _SimpleTexture);

    _createClass(TextureCube, [{
      key: "mipmaps",

      /**
       * 所有层级 Mipmap，注意，这里不包含自动生成的 Mipmap。
       * 当设置 Mipmap 时，贴图的尺寸以及像素格式可能会改变。
       */
      get: function get() {
        return this._mipmaps;
      },
      set: function set(value) {
        var _this2 = this;

        this._mipmaps = value;

        this._setMipmapLevel(this._mipmaps.length);

        if (this._mipmaps.length > 0) {
          var imageAsset = this._mipmaps[0].front;
          this.reset({
            width: imageAsset.width,
            height: imageAsset.height,
            format: imageAsset.format,
            mipmapLevel: this._mipmaps.length
          });

          this._mipmaps.forEach(function (mipmap, level) {
            _forEachFace(mipmap, function (face, faceIndex) {
              _this2._assignImage(face, level, faceIndex);
            });
          });
        } else {
          this.reset({
            width: 0,
            height: 0,
            mipmapLevel: this._mipmaps.length
          });
        }
      }
      /**
       * 0 级 Mipmap。<br>
       * 注意，`this.image = i` 等价于 `this.mipmaps = [i]`，
       * 也就是说，通过 `this.image` 设置 0 级 Mipmap 时将隐式地清除之前的所有 Mipmap。
       */

    }, {
      key: "image",
      get: function get() {
        return this._mipmaps.length === 0 ? null : this._mipmaps[0];
      },
      set: function set(value) {
        this.mipmaps = value ? [value] : [];
      }
      /**
       * 通过二维贴图指定每个 Mipmap 的每个面创建立方体贴图。
       * @param textures 数组长度必须是6的倍数。
       * 每 6 个二维贴图依次构成立方体贴图的 Mipmap。6 个面应该按 `FaceIndex` 规定顺序排列。
       * @param out 出口立方体贴图，若未定义则将创建为新的立方体贴图。
       * @returns `out`
       * @example
       * ```typescript
       * const textures = new Array<Texture2D>(6);
       * textures[TextureCube.FaceIndex.front] = frontImage;
       * textures[TextureCube.FaceIndex.back] = backImage;
       * textures[TextureCube.FaceIndex.left] = leftImage;
       * textures[TextureCube.FaceIndex.right] = rightImage;
       * textures[TextureCube.FaceIndex.top] = topImage;
       * textures[TextureCube.FaceIndex.bottom] = bottomImage;
       * const textureCube = TextureCube.fromTexture2DArray(textures);
       * ```
       */

    }], [{
      key: "fromTexture2DArray",
      value: function fromTexture2DArray(textures, out) {
        var mipmaps = [];
        var nMipmaps = textures.length / 6;

        for (var i = 0; i < nMipmaps; i++) {
          var x = i * 6;
          mipmaps.push({
            front: textures[x + FaceIndex.front].image,
            back: textures[x + FaceIndex.back].image,
            left: textures[x + FaceIndex.left].image,
            right: textures[x + FaceIndex.right].image,
            top: textures[x + FaceIndex.top].image,
            bottom: textures[x + FaceIndex.bottom].image
          });
        }

        out = out || new TextureCube();
        out.mipmaps = mipmaps;
        return out;
      }
    }]);

    function TextureCube() {
      var _this;

      _classCallCheck(this, TextureCube);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(TextureCube).call(this));

      _initializerDefineProperty(_this, "_mipmaps", _descriptor, _assertThisInitialized(_this));

      return _this;
    }

    _createClass(TextureCube, [{
      key: "onLoaded",
      value: function onLoaded() {
        this.mipmaps = this._mipmaps;
        this.loaded = true;
        this.emit('load');
      }
      /**
       * 将当前贴图重置为指定尺寸、像素格式以及指定 mipmap 层级。重置后，贴图的像素数据将变为未定义。
       * mipmap 图像的数据不会自动更新到贴图中，你必须显式调用 `this.uploadData` 来上传贴图数据。
       * @param info 贴图重置选项。
       */

    }, {
      key: "reset",
      value: function reset(info) {
        this._width = info.width;
        this._height = info.height;

        this._setGFXFormat(info.format);

        this._setMipmapLevel(info.mipmapLevel || 1);

        this._tryReset();
      }
    }, {
      key: "updateMipmaps",
      value: function updateMipmaps() {
        var _this3 = this;

        var firstLevel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
        var count = arguments.length > 1 ? arguments[1] : undefined;

        if (firstLevel >= this._mipmaps.length) {
          return;
        }

        var nUpdate = Math.min(count === undefined ? this._mipmaps.length : count, this._mipmaps.length - firstLevel);

        var _loop = function _loop(i) {
          var level = firstLevel + i;

          _forEachFace(_this3._mipmaps[level], function (face, faceIndex) {
            _this3._assignImage(face, level, faceIndex);
          });
        };

        for (var i = 0; i < nUpdate; ++i) {
          _loop(i);
        }
      }
      /**
       * 销毁此贴图，清空所有 Mipmap 并释放占用的 GPU 资源。
       */

    }, {
      key: "destroy",
      value: function destroy() {
        this._mipmaps = [];
        return _get(_getPrototypeOf(TextureCube.prototype), "destroy", this).call(this);
      }
      /**
       * 释放占用的 GPU 资源。
       * @deprecated 请转用 `this.destroy()`。
       */

    }, {
      key: "releaseTexture",
      value: function releaseTexture() {
        this.mipmaps = [];
      }
    }, {
      key: "_serialize",
      value: function _serialize(exporting) {
        return {
          base: _get(_getPrototypeOf(TextureCube.prototype), "_serialize", this).call(this),
          mipmaps: this._mipmaps.map(function (mipmap) {
            return exporting ? {
              front: EditorExtends.UuidUtils.compressUuid(mipmap.front._uuid, true),
              back: EditorExtends.UuidUtils.compressUuid(mipmap.back._uuid, true),
              left: EditorExtends.UuidUtils.compressUuid(mipmap.left._uuid, true),
              right: EditorExtends.UuidUtils.compressUuid(mipmap.right._uuid, true),
              top: EditorExtends.UuidUtils.compressUuid(mipmap.top._uuid, true),
              bottom: EditorExtends.UuidUtils.compressUuid(mipmap.bottom._uuid, true)
            } : {
              front: mipmap.front._uuid,
              back: mipmap.back._uuid,
              left: mipmap.left._uuid,
              right: mipmap.right._uuid,
              top: mipmap.top._uuid,
              bottom: mipmap.bottom._uuid
            };
          })
        };
      }
    }, {
      key: "_deserialize",
      value: function _deserialize(serializedData, handle) {
        var data = serializedData;

        _get(_getPrototypeOf(TextureCube.prototype), "_deserialize", this).call(this, data.base, handle);

        this._mipmaps = new Array(data.mipmaps.length);

        for (var i = 0; i < data.mipmaps.length; ++i) {
          // Prevent resource load failed
          this._mipmaps[i] = {
            front: new _imageAsset.ImageAsset(),
            back: new _imageAsset.ImageAsset(),
            left: new _imageAsset.ImageAsset(),
            right: new _imageAsset.ImageAsset(),
            top: new _imageAsset.ImageAsset(),
            bottom: new _imageAsset.ImageAsset()
          };
          var mipmap = data.mipmaps[i];
          handle.result.push(this._mipmaps[i], "front", mipmap.front);
          handle.result.push(this._mipmaps[i], "back", mipmap.back);
          handle.result.push(this._mipmaps[i], "left", mipmap.left);
          handle.result.push(this._mipmaps[i], "right", mipmap.right);
          handle.result.push(this._mipmaps[i], "top", mipmap.top);
          handle.result.push(this._mipmaps[i], "bottom", mipmap.bottom);
        }
      }
    }, {
      key: "_getGfxTextureCreateInfo",
      value: function _getGfxTextureCreateInfo(presumed) {
        var result = Object.assign({
          type: _define.GFXTextureType.TEX2D,
          width: this._width,
          height: this._height,
          arrayLayer: 6
        }, presumed);
        result.flags = (result.flags || 0) | _define.GFXTextureFlagBit.CUBEMAP;
        return result;
      }
    }, {
      key: "_getGfxTextureViewCreateInfo",
      value: function _getGfxTextureViewCreateInfo(presumed) {
        return Object.assign({
          type: _define.GFXTextureViewType.CUBE,
          layerCount: 6
        }, presumed);
      }
    }]);

    return TextureCube;
  }(_simpleTexture.SimpleTexture), _class3.FaceIndex = FaceIndex, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_mipmaps", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return [];
    }
  })), _class2)) || _class);
  _exports.TextureCube = TextureCube;
  cc.TextureCube = TextureCube;

  /**
   * @param {Mipmap} mipmap
   * @param {(face: ImageAsset) => void} callback
   */
  function _forEachFace(mipmap, callback) {
    callback(mipmap.front, FaceIndex.front);
    callback(mipmap.back, FaceIndex.back);
    callback(mipmap.left, FaceIndex.left);
    callback(mipmap.right, FaceIndex.right);
    callback(mipmap.top, FaceIndex.top);
    callback(mipmap.bottom, FaceIndex.bottom);
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,