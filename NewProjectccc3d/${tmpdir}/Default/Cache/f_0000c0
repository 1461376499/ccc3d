(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../data/class-decorator.js", "../math/index.js", "../platform/debug.js", "./base-node.js", "./scene-globals.js", "../default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../data/class-decorator.js"), require("../math/index.js"), require("../platform/debug.js"), require("./base-node.js"), require("./scene-globals.js"), require("../default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.classDecorator, global.index, global.debug, global.baseNode, global.sceneGlobals, global.defaultConstants);
    global.scene = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _classDecorator, _index, _debug, _baseNode, _sceneGlobals, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Scene = void 0;

  var _dec, _class, _class2, _descriptor, _descriptor2, _temp;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  /**
   * @en
   * Scene is a subclass of [[BaseNode]], composed by nodes, representing the root of a runnable environment in the game.
   * It's managed by [[Director]] and user can switch from a scene to another using [[Director.loadScene]]
   * @zh
   * Scene 是 [[BaseNode]] 的子类，由节点所构成，代表着游戏中可运行的某一个整体环境。
   * 它由 [[Director]] 管理，用户可以使用 [[Director.loadScene]] 来切换场景
   */
  var Scene = (_dec = (0, _classDecorator.ccclass)('cc.Scene'), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_BaseNode) {
    _inherits(Scene, _BaseNode);

    _createClass(Scene, [{
      key: "renderScene",

      /**
       * @en The renderer scene, normally user don't need to use it
       * @zh 渲染层场景，一般情况下用户不需要关心它
       */
      get: function get() {
        return this._renderScene;
      }
      /**
       * @en All scene related global parameters, it affects all content in the scene
       * @zh 各类场景级别的渲染参数，将影响全场景的所有物体
       */

    }, {
      key: "globals",
      get: function get() {
        return this._globals;
      }
      /**
       * @en Indicates whether all (directly or indirectly) static referenced assets of this scene are releasable by default after scene unloading.
       * @zh 指示该场景中直接或间接静态引用到的所有资源是否默认在场景切换后自动释放。
       */

    }]);

    function Scene(name) {
      var _this;

      _classCallCheck(this, Scene);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Scene).call(this, name));

      _initializerDefineProperty(_this, "autoReleaseAssets", _descriptor, _assertThisInitialized(_this));

      _this._renderScene = null;
      _this.dependAssets = null;

      _initializerDefineProperty(_this, "_globals", _descriptor2, _assertThisInitialized(_this));

      _this._inited = void 0;
      _this._prefabSyncedInLiveReload = false;
      _this._pos = _index.Vec3.ZERO;
      _this._rot = _index.Quat.IDENTITY;
      _this._scale = _index.Vec3.ONE;
      _this._mat = _index.Mat4.IDENTITY;
      _this._dirtyFlags = 0;
      _this._activeInHierarchy = false;

      if (cc.director && cc.director.root) {
        _this._renderScene = cc.director.root.createScene({});
      }

      _this._inited = cc.game ? !cc.game._isCloning : true;
      return _this;
    }
    /**
     * @en Destroy the current scene and all its nodes, this action won't destroy related assets
     * @zh 销毁当前场景中的所有节点，这个操作不会销毁资源
     */


    _createClass(Scene, [{
      key: "destroy",
      value: function destroy() {
        var success = _get(_getPrototypeOf(Scene.prototype), "destroy", this).call(this);

        cc.director.root.destroyScene(this._renderScene);
        this._activeInHierarchy = false;
        return success;
      }
      /**
       * @en Only for compatibility purpose, user should not add any component to the scene
       * @zh 仅为兼容性保留，用户不应该在场景上直接添加任何组件
       */

    }, {
      key: "addComponent",
      value: function addComponent(typeOrClassName) {
        (0, _debug.warnID)(3822);
        return null;
      }
    }, {
      key: "_onHierarchyChanged",
      value: function _onHierarchyChanged() {}
    }, {
      key: "_onBatchCreated",
      value: function _onBatchCreated() {
        _get(_getPrototypeOf(Scene.prototype), "_onBatchCreated", this).call(this);

        var len = this._children.length;

        for (var i = 0; i < len; ++i) {
          this._children[i]._onBatchCreated();
        }
      }
    }, {
      key: "_onBatchRestored",
      value: function _onBatchRestored() {
        this._onBatchCreated();
      } // transform helpers

      /**
       * Refer to [[Node.getPosition]]
       */

    }, {
      key: "getPosition",
      value: function getPosition(out) {
        return _index.Vec3.copy(out || new _index.Vec3(), _index.Vec3.ZERO);
      }
      /**
       * Refer to [[Node.getRotation]]
       */

    }, {
      key: "getRotation",
      value: function getRotation(out) {
        return _index.Quat.copy(out || new _index.Quat(), _index.Quat.IDENTITY);
      }
      /**
       * Refer to [[Node.getScale]]
       */

    }, {
      key: "getScale",
      value: function getScale(out) {
        return _index.Vec3.copy(out || new _index.Vec3(), _index.Vec3.ONE);
      }
      /**
       * Refer to [[Node.getWorldPosition]]
       */

    }, {
      key: "getWorldPosition",
      value: function getWorldPosition(out) {
        return _index.Vec3.copy(out || new _index.Vec3(), _index.Vec3.ZERO);
      }
      /**
       * Refer to [[Node.getWorldRotation]]
       */

    }, {
      key: "getWorldRotation",
      value: function getWorldRotation(out) {
        return _index.Quat.copy(out || new _index.Quat(), _index.Quat.IDENTITY);
      }
      /**
       * Refer to [[Node.getWorldScale]]
       */

    }, {
      key: "getWorldScale",
      value: function getWorldScale(out) {
        return _index.Vec3.copy(out || new _index.Vec3(), _index.Vec3.ONE);
      }
      /**
       * Refer to [[Node.getWorldMatrix]]
       */

    }, {
      key: "getWorldMatrix",
      value: function getWorldMatrix(out) {
        return _index.Mat4.copy(out || new _index.Mat4(), _index.Mat4.IDENTITY);
      }
      /**
       * Refer to [[Node.getWorldRS]]
       */

    }, {
      key: "getWorldRS",
      value: function getWorldRS(out) {
        return _index.Mat4.copy(out || new _index.Mat4(), _index.Mat4.IDENTITY);
      }
      /**
       * Refer to [[Node.getWorldRT]]
       */

    }, {
      key: "getWorldRT",
      value: function getWorldRT(out) {
        return _index.Mat4.copy(out || new _index.Mat4(), _index.Mat4.IDENTITY);
      }
      /**
       * Refer to [[Node.position]]
       */

    }, {
      key: "updateWorldTransform",

      /**
       * Refer to [[Node.updateWorldTransform]]
       */
      value: function updateWorldTransform() {} // life-cycle call backs

    }, {
      key: "_instantiate",
      value: function _instantiate() {}
    }, {
      key: "_load",
      value: function _load() {
        if (!this._inited) {
          if (_defaultConstants.TEST) {
            cc.assert(!this._activeInHierarchy, 'Should deactivate ActionManager and EventManager by default');
          }

          this._onBatchCreated();

          this._inited = true;
        } // static methode can't use this as parameter type


        this.walk(_baseNode.BaseNode._setScene);
      }
    }, {
      key: "_activate",
      value: function _activate(active) {
        active = active !== false;

        if (_defaultConstants.EDITOR || _defaultConstants.TEST) {
          // register all nodes to editor
          this._registerIfAttached(active);
        }

        cc.director._nodeActivator.activateNode(this, active);

        this._globals.renderScene = this._renderScene;
      }
    }, {
      key: "position",
      get: function get() {
        return _index.Vec3.ZERO;
      }
      /**
       * Refer to [[Node.worldPosition]]
       */

    }, {
      key: "worldPosition",
      get: function get() {
        return _index.Vec3.ZERO;
      }
      /**
       * Refer to [[Node.rotation]]
       */

    }, {
      key: "rotation",
      get: function get() {
        return _index.Quat.IDENTITY;
      }
      /**
       * Refer to [[Node.worldRotation]]
       */

    }, {
      key: "worldRotation",
      get: function get() {
        return _index.Quat.IDENTITY;
      }
      /**
       * Refer to [[Node.scale]]
       */

    }, {
      key: "scale",
      get: function get() {
        return _index.Vec3.ONE;
      }
      /**
       * Refer to [[Node.worldScale]]
       */

    }, {
      key: "worldScale",
      get: function get() {
        return _index.Vec3.ONE;
      }
      /**
       * Refer to [[Node.eulerAngles]]
       */

    }, {
      key: "eulerAngles",
      get: function get() {
        return _index.Vec3.ZERO;
      }
      /**
       * Refer to [[Node.worldMatrix]]
       */

    }, {
      key: "worldMatrix",
      get: function get() {
        return _index.Mat4.IDENTITY;
      }
    }]);

    return Scene;
  }(_baseNode.BaseNode), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "autoReleaseAssets", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_globals", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return new _sceneGlobals.SceneGlobals();
    }
  })), _class2)) || _class);
  _exports.Scene = Scene;
  cc.Scene = Scene;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,