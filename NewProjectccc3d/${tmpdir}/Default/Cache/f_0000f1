(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "@cocos/ammo", "../../../core/math/index.js", "../../../../exports/physics-framework.js", "../ammo-util.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("@cocos/ammo"), require("../../../core/math/index.js"), require("../../../../exports/physics-framework.js"), require("../ammo-util.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.ammo, global.index, global.physicsFramework, global.ammoUtil);
    global.ammoShape = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _ammo, _index, _physicsFramework, _ammoUtil) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AmmoShape = void 0;
  _ammo = _interopRequireDefault(_ammo);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var v3_0 = new _index.Vec3();

  var AmmoShape = /*#__PURE__*/function () {
    _createClass(AmmoShape, [{
      key: "setMaterial",
      value: function setMaterial(v) {
        if (!this._isTrigger && this._isEnabled && v) {
          if (this._btCompound) {
            var rollingFriction = 0.1;

            this._btCompound.setMaterial(this._index, v.friction, v.restitution, rollingFriction);
          } else {
            this._sharedBody.body.setFriction(v.friction);

            this._sharedBody.body.setRestitution(v.restitution);
          }
        }
      }
    }, {
      key: "setCenter",
      value: function setCenter(v) {
        _index.Vec3.copy(v3_0, v);

        v3_0.multiply(this._collider.node.worldScale);
        (0, _ammoUtil.cocos2AmmoVec3)(this.transform.getOrigin(), v3_0);

        if (this._btCompound) {
          this._btCompound.updateChildTransform(this._index, this.transform);
        }
      }
    }, {
      key: "setAsTrigger",
      value: function setAsTrigger(v) {
        if (this._isTrigger == v) return;

        if (this._isEnabled) {
          this._sharedBody.removeShape(this, !v);

          this._sharedBody.addShape(this, v);
        }

        this._isTrigger = v;
      }
    }, {
      key: "attachedRigidBody",
      get: function get() {
        if (this._sharedBody.wrappedBody) {
          return this._sharedBody.wrappedBody.rigidBody;
        }

        return null;
      }
    }, {
      key: "impl",
      get: function get() {
        return this._btShape;
      }
    }, {
      key: "collider",
      get: function get() {
        return this._collider;
      }
    }, {
      key: "sharedBody",
      get: function get() {
        return this._sharedBody;
      }
    }, {
      key: "index",
      get: function get() {
        return this._index;
      }
    }]);

    function AmmoShape(type) {
      _classCallCheck(this, AmmoShape);

      this.id = void 0;
      this.type = void 0;
      this._index = -1;
      this._isEnabled = false;
      this._isBinding = false;
      this._isTrigger = false;
      this._btCompound = null;
      this.transform = void 0;
      this.pos = void 0;
      this.quat = void 0;
      this.scale = void 0;
      this.type = type;
      this.id = AmmoShape.idCounter++;
      this.pos = new _ammo.default.btVector3(0, 0, 0);
      this.quat = new _ammo.default.btQuaternion();
      this.transform = new _ammo.default.btTransform(this.quat, this.pos);
      this.transform.setIdentity();
      this.scale = new _ammo.default.btVector3(1, 1, 1);
    }

    _createClass(AmmoShape, [{
      key: "initialize",
      value: function initialize(com) {
        this._collider = com;
        this._isBinding = true;
        this.onComponentSet();
        this.setWrapper();
        this._sharedBody = _physicsFramework.PhysicsSystem.instance.physicsWorld.getSharedBody(this._collider.node);
        this._sharedBody.reference = true;
      } // virtual

    }, {
      key: "onComponentSet",
      value: function onComponentSet() {}
    }, {
      key: "onLoad",
      value: function onLoad() {
        this.setCenter(this._collider.center);
        this.setAsTrigger(this._collider.isTrigger);
      }
    }, {
      key: "onEnable",
      value: function onEnable() {
        this._isEnabled = true;

        this._sharedBody.addShape(this, this._isTrigger);

        this.setMaterial(this.collider.sharedMaterial);
      }
    }, {
      key: "onDisable",
      value: function onDisable() {
        this._isEnabled = false;

        this._sharedBody.removeShape(this, this._isTrigger);
      }
    }, {
      key: "onDestroy",
      value: function onDestroy() {
        this._sharedBody.reference = false;
        this._btCompound = null;
        this._collider = null;

        var shape = _ammo.default.castObject(this._btShape, _ammo.default.btCollisionShape);

        shape['wrapped'] = null;

        _ammo.default.destroy(this.transform);

        _ammo.default.destroy(this.pos);

        _ammo.default.destroy(this.quat);

        _ammo.default.destroy(this.scale);

        _ammo.default.destroy(this._btShape);

        (0, _ammoUtil.ammoDeletePtr)(this.pos, _ammo.default.btVector3);
        (0, _ammoUtil.ammoDeletePtr)(this.quat, _ammo.default.btQuaternion);
        (0, _ammoUtil.ammoDeletePtr)(this.scale, _ammo.default.btVector3);
        (0, _ammoUtil.ammoDeletePtr)(this.transform, _ammo.default.btTransform);
        (0, _ammoUtil.ammoDeletePtr)(this._btShape, _ammo.default.btCollisionShape);
        this._btShape = null;
        this.transform = null;
        this.pos = null;
        this.quat = null;
        this.scale = null;
      }
      /** group mask */

    }, {
      key: "getGroup",
      value: function getGroup() {
        return this._sharedBody.collisionFilterGroup;
      }
    }, {
      key: "setGroup",
      value: function setGroup(v) {
        this._sharedBody.collisionFilterGroup = v;
      }
    }, {
      key: "addGroup",
      value: function addGroup(v) {
        this._sharedBody.collisionFilterGroup |= v;
      }
    }, {
      key: "removeGroup",
      value: function removeGroup(v) {
        this._sharedBody.collisionFilterGroup &= ~v;
      }
    }, {
      key: "getMask",
      value: function getMask() {
        return this._sharedBody.collisionFilterMask;
      }
    }, {
      key: "setMask",
      value: function setMask(v) {
        this._sharedBody.collisionFilterMask = v;
      }
    }, {
      key: "addMask",
      value: function addMask(v) {
        this._sharedBody.collisionFilterMask |= v;
      }
    }, {
      key: "removeMask",
      value: function removeMask(v) {
        this._sharedBody.collisionFilterMask &= ~v;
      }
    }, {
      key: "setCompound",
      value: function setCompound(compound) {
        if (this._btCompound) {
          this._btCompound.removeChildShapeByIndex(this._index);

          this._index = -1;
        }

        if (compound) {
          compound.addChildShape(this.transform, this._btShape);
          this._index = compound.getNumChildShapes() - 1;
        }

        this._btCompound = compound;
      }
    }, {
      key: "setWrapper",
      value: function setWrapper() {
        var shape = _ammo.default.castObject(this._btShape, _ammo.default.btCollisionShape);

        shape['wrapped'] = this;
      }
    }, {
      key: "setScale",
      value: function setScale() {
        this.setCenter(this._collider.center);
      }
      /**DEBUG */

    }, {
      key: "debugTransform",
      value: function debugTransform(n) {
        if (AmmoShape._debugTransform == null) {
          AmmoShape._debugTransform = new _ammo.default.btTransform();
        }

        var wt;

        if (this._isTrigger) {
          wt = this._sharedBody.ghost.getWorldTransform();
        } else {
          wt = this._sharedBody.body.getWorldTransform();
        }

        var lt = this.transform;

        AmmoShape._debugTransform.setIdentity();

        AmmoShape._debugTransform.op_mul(wt).op_mul(lt);

        var origin = AmmoShape._debugTransform.getOrigin();

        n.worldPosition = new _index.Vec3(origin.x(), origin.y(), origin.z());

        var rotation = AmmoShape._debugTransform.getRotation();

        n.worldRotation = new _index.Quat(rotation.x(), rotation.y(), rotation.z(), rotation.w());
        var scale = this.impl.getLocalScaling();
        n.scale = new _index.Vec3(scale.x(), scale.y(), scale.z());
      }
    }]);

    return AmmoShape;
  }();

  _exports.AmmoShape = AmmoShape;
  AmmoShape.idCounter = 0;
  AmmoShape._debugTransform = void 0;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,