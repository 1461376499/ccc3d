(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../geometry/index.js", "../../gfx/define.js", "../../pipeline/define.js", "../core/sampler-lib.js", "../scene/model.js", "./skeletal-animation-utils.js", "./morph-model.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../geometry/index.js"), require("../../gfx/define.js"), require("../../pipeline/define.js"), require("../core/sampler-lib.js"), require("../scene/model.js"), require("./skeletal-animation-utils.js"), require("./morph-model.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.define, global.define, global.samplerLib, global.model, global.skeletalAnimationUtils, global.morphModel);
    global.bakedSkinningModel = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _define, _define2, _samplerLib, _model, _skeletalAnimationUtils, _morphModel) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.BakedSkinningModel = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  var myPatches = [{
    name: 'CC_USE_SKINNING',
    value: true
  }, {
    name: 'CC_USE_BAKED_ANIMATION',
    value: true
  }];
  /**
   * @en
   * The skinning model that is using baked animation.
   * @zh
   * 预烘焙动画的蒙皮模型。
   */

  var BakedSkinningModel = /*#__PURE__*/function (_MorphModel) {
    _inherits(BakedSkinningModel, _MorphModel);

    // uninitialized
    function BakedSkinningModel() {
      var _this;

      _classCallCheck(this, BakedSkinningModel);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(BakedSkinningModel).call(this));
      _this.uploadedAnim = undefined;
      _this._jointsMedium = void 0;
      _this._skeleton = null;
      _this._mesh = null;
      _this._dataPoolManager = void 0;
      _this._instAnimInfoIdx = -1;
      _this.type = _model.ModelType.BAKED_SKINNING;
      _this._dataPoolManager = cc.director.root.dataPoolManager;
      var jointTextureInfo = new Float32Array(4);

      var animInfo = _this._dataPoolManager.jointAnimationInfo.getData();

      _this._jointsMedium = {
        buffer: null,
        jointTextureInfo: jointTextureInfo,
        animInfo: animInfo,
        texture: null,
        boundsInfo: null
      };
      return _this;
    }

    _createClass(BakedSkinningModel, [{
      key: "destroy",
      value: function destroy() {
        this.uploadedAnim = undefined; // uninitialized

        this._jointsMedium.boundsInfo = null;

        if (this._jointsMedium.buffer) {
          this._jointsMedium.buffer.destroy();

          this._jointsMedium.buffer = null;
        }

        this._applyJointTexture();

        _get(_getPrototypeOf(BakedSkinningModel.prototype), "destroy", this).call(this);
      }
    }, {
      key: "bindSkeleton",
      value: function bindSkeleton() {
        var skeleton = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var skinningRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        var mesh = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        this._skeleton = skeleton;
        this._mesh = mesh;

        if (!skeleton || !skinningRoot || !mesh) {
          return;
        }

        this.transform = skinningRoot;
        var resMgr = this._dataPoolManager;
        this._jointsMedium.animInfo = resMgr.jointAnimationInfo.getData(skinningRoot.uuid);

        if (!this._jointsMedium.buffer) {
          this._jointsMedium.buffer = this._device.createBuffer({
            usage: _define.GFXBufferUsageBit.UNIFORM | _define.GFXBufferUsageBit.TRANSFER_DST,
            memUsage: _define.GFXMemoryUsageBit.HOST | _define.GFXMemoryUsageBit.DEVICE,
            size: _define2.UBOSkinningTexture.SIZE,
            stride: _define2.UBOSkinningTexture.SIZE
          });
        }
      }
    }, {
      key: "updateTransform",
      value: function updateTransform(stamp) {
        _get(_getPrototypeOf(BakedSkinningModel.prototype), "updateTransform", this).call(this, stamp);

        if (!this.uploadedAnim) {
          return;
        }

        var _this$_jointsMedium = this._jointsMedium,
            animInfo = _this$_jointsMedium.animInfo,
            boundsInfo = _this$_jointsMedium.boundsInfo;
        var skelBound = boundsInfo[animInfo.data[0]];
        var node = this.transform;

        if (this._worldBounds && skelBound) {
          // @ts-ignore TS2339
          skelBound.transform(node._mat, node._pos, node._rot, node._scale, this._worldBounds);
        }
      } // update fid buffer only when visible

    }, {
      key: "updateUBOs",
      value: function updateUBOs(stamp) {
        _get(_getPrototypeOf(BakedSkinningModel.prototype), "updateUBOs", this).call(this, stamp);

        var info = this._jointsMedium.animInfo;
        var idx = this._instAnimInfoIdx;

        if (idx >= 0) {
          var view = this.instancedAttributes.list[idx].view;
          view[0] = info.data[0];
        } else if (info.dirty) {
          info.buffer.update(info.data);
          info.dirty = false;
        }

        return true;
      }
    }, {
      key: "createBoundingShape",
      value: function createBoundingShape(minPos, maxPos) {
        if (!minPos || !maxPos) {
          return;
        }

        this._worldBounds = new _index.aabb();
      }
    }, {
      key: "uploadAnimation",
      value: function uploadAnimation(anim) {
        if (!this._skeleton || !this._mesh || this.uploadedAnim === anim) {
          return;
        }

        this.uploadedAnim = anim;
        var resMgr = this._dataPoolManager;
        var texture = null;

        if (anim) {
          texture = resMgr.jointTexturePool.getSequencePoseTexture(this._skeleton, anim, this._mesh, this.transform);
          this._jointsMedium.boundsInfo = texture && texture.bounds.get(this._mesh.hash);
          this._modelBounds = null; // don't calc bounds again in Model
        } else {
          texture = resMgr.jointTexturePool.getDefaultPoseTexture(this._skeleton, this._mesh, this.transform);
          this._jointsMedium.boundsInfo = null;
          this._modelBounds = texture && texture.bounds.get(this._mesh.hash)[0];
        }

        this._applyJointTexture(texture);
      }
    }, {
      key: "_applyJointTexture",
      value: function _applyJointTexture() {
        var texture = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var oldTex = this._jointsMedium.texture;

        if (oldTex && oldTex !== texture) {
          this._dataPoolManager.jointTexturePool.releaseHandle(oldTex);
        }

        this._jointsMedium.texture = texture;

        if (!texture) {
          return;
        }

        var _this$_jointsMedium2 = this._jointsMedium,
            buffer = _this$_jointsMedium2.buffer,
            jointTextureInfo = _this$_jointsMedium2.jointTextureInfo;
        jointTextureInfo[0] = texture.handle.texture.width;
        jointTextureInfo[1] = this._skeleton.joints.length;
        jointTextureInfo[2] = texture.pixelOffset + 0.1; // guard against floor() underflow

        jointTextureInfo[3] = 1 / jointTextureInfo[0];
        this.updateInstancedJointTextureInfo();

        if (buffer) {
          buffer.update(jointTextureInfo);
        }

        var tv = texture.handle.texView;

        var it = this._matPSORecord.values();

        var res = it.next();

        while (!res.done) {
          var psos = res.value;

          for (var i = 0; i < psos.length; i++) {
            var bindingLayout = psos[i].pipelineLayout.layouts[0];
            bindingLayout.bindTextureView(_define2.UniformJointTexture.binding, tv);
          }

          res = it.next();
        }

        for (var _i = 0; _i < this._implantPSOs.length; _i++) {
          var _bindingLayout = this._implantPSOs[_i].pipelineLayout.layouts[0];

          _bindingLayout.bindTextureView(_define2.UniformJointTexture.binding, tv);

          _bindingLayout.update();
        }
      }
    }, {
      key: "createPipelineState",
      value: function createPipelineState(pass, subModelIdx, patches) {
        var _patches$concat;

        var pso = _get(_getPrototypeOf(BakedSkinningModel.prototype), "createPipelineState", this).call(this, pass, subModelIdx, (_patches$concat = patches === null || patches === void 0 ? void 0 : patches.concat(myPatches)) !== null && _patches$concat !== void 0 ? _patches$concat : myPatches);

        var _this$_jointsMedium3 = this._jointsMedium,
            buffer = _this$_jointsMedium3.buffer,
            texture = _this$_jointsMedium3.texture,
            animInfo = _this$_jointsMedium3.animInfo;
        var bindingLayout = pso.pipelineLayout.layouts[0];
        bindingLayout.bindBuffer(_define2.UBOSkinningTexture.BLOCK.binding, buffer);
        bindingLayout.bindBuffer(_define2.UBOSkinningAnimation.BLOCK.binding, animInfo.buffer);

        var sampler = _samplerLib.samplerLib.getSampler(this._device, _skeletalAnimationUtils.jointTextureSamplerHash);

        if (texture) {
          bindingLayout.bindTextureView(_define2.UniformJointTexture.binding, texture.handle.texView);
          bindingLayout.bindSampler(_define2.UniformJointTexture.binding, sampler);
        }

        return pso;
      }
    }, {
      key: "updateInstancedAttributeList",
      value: function updateInstancedAttributeList(pso, pass) {
        _get(_getPrototypeOf(BakedSkinningModel.prototype), "updateInstancedAttributeList", this).call(this, pso, pass);

        this._instAnimInfoIdx = this.getInstancedAttributeIndex(_define2.INST_JOINT_ANIM_INFO);
        this.updateInstancedJointTextureInfo();
      }
    }, {
      key: "updateInstancedJointTextureInfo",
      value: function updateInstancedJointTextureInfo() {
        var _this$_jointsMedium4 = this._jointsMedium,
            jointTextureInfo = _this$_jointsMedium4.jointTextureInfo,
            animInfo = _this$_jointsMedium4.animInfo;
        var idx = this._instAnimInfoIdx;

        if (idx >= 0) {
          // update instancing data too
          var view = this.instancedAttributes.list[idx].view;
          view[0] = animInfo.data[0];
          view[1] = jointTextureInfo[1];
          view[2] = jointTextureInfo[2];
        }
      }
    }]);

    return BakedSkinningModel;
  }(_morphModel.MorphModel);

  _exports.BakedSkinningModel = BakedSkinningModel;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,