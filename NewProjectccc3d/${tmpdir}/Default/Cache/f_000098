(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../data/class.js", "../math/utils.js", "../value-types/enum.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../data/class.js"), require("../math/utils.js"), require("../value-types/enum.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global._class, global.utils, global._enum);
    global.curve = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _class, _utils, _enum) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.evalOptCurve = evalOptCurve;
  _exports.AnimationCurve = _exports.OptimizedKey = _exports.Keyframe = void 0;
  _class = _interopRequireDefault(_class);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var LOOK_FORWARD = 3;
  var WrapMode = (0, _enum.Enum)({
    Default: 0,
    Once: 1,
    Loop: 2,
    PingPong: 3,
    ClampForever: 4
  });
  /**
   * @en
   * A key frame in the curve.
   * @zh 
   * 曲线中的一个关键帧。
   */

  var Keyframe = function Keyframe() {
    _classCallCheck(this, Keyframe);

    this.time = 0;
    this.value = 0;
    this.inTangent = 0;
    this.outTangent = 0;
  };

  _exports.Keyframe = Keyframe;

  _class.default.fastDefine('cc.Keyframe', Keyframe, {
    time: 0,
    value: 0,
    inTangent: 0,
    outTangent: 0
  });

  var OptimizedKey = /*#__PURE__*/function () {
    function OptimizedKey() {
      _classCallCheck(this, OptimizedKey);

      this.index = void 0;
      this.time = void 0;
      this.endTime = void 0;
      this.coefficient = void 0;
      this.index = -1;
      this.time = 0;
      this.endTime = 0;
      this.coefficient = new Float32Array(4);
    }

    _createClass(OptimizedKey, [{
      key: "evaluate",
      value: function evaluate(T) {
        var t = T - this.time;
        return evalOptCurve(t, this.coefficient);
      }
    }]);

    return OptimizedKey;
  }();

  _exports.OptimizedKey = OptimizedKey;

  function evalOptCurve(t, coefs) {
    return t * (t * (t * coefs[0] + coefs[1]) + coefs[2]) + coefs[3];
  }
  /**
   * @en
   * Describe a curve in which three times Hermite interpolation is used for each adjacent key frame.
   * @zh
   * 描述一条曲线，其中每个相邻关键帧采用三次hermite插值计算。
   */


  var AnimationCurve = /*#__PURE__*/function () {
    /**
     * @en
     * The key frame of the curve.
     * @zh 
     * 曲线的关键帧。
     */

    /**
     * @en
     * Loop mode [[WrapMode]] when the sampling time exceeds the left end.
     * @zh 
     * 当采样时间超出左端时采用的循环模式[[WrapMode]]。
     */

    /**
     * @en
     * Cycle mode [[WrapMode]] when the sampling time exceeds the right end.
     * @zh 
     * 当采样时间超出右端时采用的循环模式[[WrapMode]]。
     */

    /**
     * 构造函数。
     * @param keyFrames 关键帧。
     */
    function AnimationCurve() {
      var keyFrames = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      _classCallCheck(this, AnimationCurve);

      this.keyFrames = void 0;
      this.preWrapMode = WrapMode.Loop;
      this.postWrapMode = WrapMode.Loop;
      this.cachedKey = void 0;
      this.keyFrames = keyFrames || [].concat(AnimationCurve.defaultKF);
      this.cachedKey = new OptimizedKey();
    }
    /**
     * @en
     * Add a keyframe.
     * @zh 
     * 添加一个关键帧。
     * @param keyFrame 关键帧。
     */


    _createClass(AnimationCurve, [{
      key: "addKey",
      value: function addKey(keyFrame) {
        if (this.keyFrames == null) {
          this.keyFrames = [];
        }

        this.keyFrames.push(keyFrame);
      }
      /**
       * @ignore
       * @param time
       */

    }, {
      key: "evaluate_slow",
      value: function evaluate_slow(time) {
        var wrappedTime = time;
        var wrapMode = time < 0 ? this.preWrapMode : this.postWrapMode;
        var startTime = this.keyFrames[0].time;
        var endTime = this.keyFrames[this.keyFrames.length - 1].time;

        switch (wrapMode) {
          case WrapMode.Loop:
            wrappedTime = (0, _utils.repeat)(time - startTime, endTime - startTime) + startTime;
            break;

          case WrapMode.PingPong:
            wrappedTime = (0, _utils.pingPong)(time - startTime, endTime - startTime) + startTime;
            break;

          case WrapMode.ClampForever:
            wrappedTime = (0, _utils.clamp)(time, startTime, endTime);
            break;
        }

        var preKFIndex = 0;

        if (wrappedTime > this.keyFrames[0].time) {
          if (wrappedTime >= this.keyFrames[this.keyFrames.length - 1].time) {
            preKFIndex = this.keyFrames.length - 2;
          } else {
            for (var i = 0; i < this.keyFrames.length - 1; i++) {
              if (wrappedTime >= this.keyFrames[0].time && wrappedTime <= this.keyFrames[i + 1].time) {
                preKFIndex = i;
                break;
              }
            }
          }
        }

        var keyframe0 = this.keyFrames[preKFIndex];
        var keyframe1 = this.keyFrames[preKFIndex + 1];
        var t = (0, _utils.inverseLerp)(keyframe0.time, keyframe1.time, wrappedTime);
        var dt = keyframe1.time - keyframe0.time;
        var m0 = keyframe0.outTangent * dt;
        var m1 = keyframe1.inTangent * dt;
        var t2 = t * t;
        var t3 = t2 * t;
        var a = 2 * t3 - 3 * t2 + 1;
        var b = t3 - 2 * t2 + t;
        var c = t3 - t2;
        var d = -2 * t3 + 3 * t2;
        return a * keyframe0.value + b * m0 + c * m1 + d * keyframe1.value;
      }
      /**
       * @en
       * Calculate the curve interpolation at a given point in time.
       * @zh 
       * 计算给定时间点的曲线插值。
       * @param time 时间。
       */

    }, {
      key: "evaluate",
      value: function evaluate(time) {
        var wrappedTime = time;
        var wrapMode = time < 0 ? this.preWrapMode : this.postWrapMode;
        var startTime = this.keyFrames[0].time;
        var endTime = this.keyFrames[this.keyFrames.length - 1].time;

        switch (wrapMode) {
          case WrapMode.Loop:
            wrappedTime = (0, _utils.repeat)(time - startTime, endTime - startTime) + startTime;
            break;

          case WrapMode.PingPong:
            wrappedTime = (0, _utils.pingPong)(time - startTime, endTime - startTime) + startTime;
            break;

          case WrapMode.ClampForever:
            wrappedTime = (0, _utils.clamp)(time, startTime, endTime);
            break;
        }

        if (wrappedTime >= this.cachedKey.time && wrappedTime < this.cachedKey.endTime) {
          return this.cachedKey.evaluate(wrappedTime);
        } else {
          var leftIndex = this.findIndex(this.cachedKey, wrappedTime);
          var rightIndex = leftIndex + 1;

          if (rightIndex === this.keyFrames.length) {
            rightIndex -= 1;
          }

          this.calcOptimizedKey(this.cachedKey, leftIndex, rightIndex);
          return this.cachedKey.evaluate(wrappedTime);
        }
      }
      /**
       * @ignore
       * @param optKey
       * @param leftIndex
       * @param rightIndex
       */

    }, {
      key: "calcOptimizedKey",
      value: function calcOptimizedKey(optKey, leftIndex, rightIndex) {
        var lhs = this.keyFrames[leftIndex];
        var rhs = this.keyFrames[rightIndex];
        optKey.index = leftIndex;
        optKey.time = lhs.time;
        optKey.endTime = rhs.time;
        var dx = rhs.time - lhs.time;
        var dy = rhs.value - lhs.value;
        var length = 1 / (dx * dx);
        var d1 = lhs.outTangent * dx;
        var d2 = rhs.inTangent * dx;
        optKey.coefficient[0] = (d1 + d2 - dy - dy) * length / dx;
        optKey.coefficient[1] = (dy + dy + dy - d1 - d1 - d2) * length;
        optKey.coefficient[2] = lhs.outTangent;
        optKey.coefficient[3] = lhs.value;
      }
      /**
       * @ignore
       * @param optKey
       * @param t
       */

    }, {
      key: "findIndex",
      value: function findIndex(optKey, t) {
        var cachedIndex = optKey.index;

        if (cachedIndex !== -1) {
          var cachedTime = this.keyFrames[cachedIndex].time;

          if (t > cachedTime) {
            for (var i = 0; i < LOOK_FORWARD; i++) {
              var currIndex = cachedIndex + i;

              if (currIndex + 1 < this.keyFrames.length && this.keyFrames[currIndex + 1].time > t) {
                return currIndex;
              }
            }
          } else {
            for (var _i = 0; _i < LOOK_FORWARD; _i++) {
              var _currIndex = cachedIndex - _i;

              if (_currIndex >= 0 && this.keyFrames[_currIndex - 1].time <= t) {
                return _currIndex - 1;
              }
            }
          }
        }

        var left = 0;
        var right = this.keyFrames.length;
        var mid = Math.floor((left + right) / 2);

        while (right - left > 1) {
          if (this.keyFrames[mid].time >= t) {
            right = mid;
          } else {
            left = mid + 1;
          }

          mid = Math.floor((left + right) / 2);
        }

        return left;
      }
    }]);

    return AnimationCurve;
  }();

  _exports.AnimationCurve = AnimationCurve;
  AnimationCurve.defaultKF = [{
    time: 0,
    value: 1,
    inTangent: 0,
    outTangent: 0
  }, {
    time: 1,
    value: 1,
    inTangent: 0,
    outTangent: 0
  }];

  _class.default.fastDefine('cc.AnimationCurve', AnimationCurve, {
    preWrapMode: WrapMode.Default,
    postWrapMode: WrapMode.Default,
    keyFrames: []
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,