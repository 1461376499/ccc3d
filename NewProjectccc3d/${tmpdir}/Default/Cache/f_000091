(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../math/index.js", "./enums.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../math/index.js"), require("./enums.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.enums);
    global.plane = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _enums) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _enums = _interopRequireDefault(_enums);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  var v1 = new _index.Vec3(0, 0, 0);
  var v2 = new _index.Vec3(0, 0, 0);
  var temp_mat = cc.mat4();
  var temp_vec4 = cc.v4();
  /**
   * @en
   * Basic Geometry: plane.
   * @zh
   * 基础几何 plane。
   */
  // tslint:disable-next-line:class-name

  var plane = /*#__PURE__*/function () {
    _createClass(plane, [{
      key: "type",

      /**
       * @en
       * Gets the type of the shape.
       * @zh
       * 获取形状的类型。
       */
      get: function get() {
        return this._type;
      }
    }], [{
      key: "create",

      /**
       * @en
       * create a new plane
       * @zh
       * 创建一个新的 plane。
       * @param nx 法向分量的 x 部分。
       * @param ny 法向分量的 y 部分。
       * @param nz 法向分量的 z 部分。
       * @param d 与原点的距离。
       * @return
       */
      value: function create(nx, ny, nz, d) {
        return new plane(nx, ny, nz, d);
      }
      /**
       * @en
       * clone a new plane
       * @zh
       * 克隆一个新的 plane。
       * @param p 克隆的来源。
       * @return 克隆出的对象。
       */

    }, {
      key: "clone",
      value: function clone(p) {
        return new plane(p.n.x, p.n.y, p.n.z, p.d);
      }
      /**
       * @en
       * copy the values from one plane to another
       * @zh
       * 复制一个平面的值到另一个。
       * @param out 接受操作的对象。
       * @param p 复制的来源。
       * @return 接受操作的对象。
       */

    }, {
      key: "copy",
      value: function copy(out, p) {
        _index.Vec3.copy(out.n, p.n);

        out.d = p.d;
        return out;
      }
      /**
       * @en
       * create a plane from three points
       * @zh
       * 用三个点创建一个平面。
       * @param out 接受操作的对象。
       * @param a 点 a。
       * @param b 点 b。
       * @param c 点 c。
       * @return out 接受操作的对象。
       */

    }, {
      key: "fromPoints",
      value: function fromPoints(out, a, b, c) {
        _index.Vec3.subtract(v1, b, a);

        _index.Vec3.subtract(v2, c, a);

        _index.Vec3.normalize(out.n, _index.Vec3.cross(out.n, v1, v2));

        out.d = _index.Vec3.dot(out.n, a);
        return out;
      }
      /**
       * @en
       * Set the components of a plane to the given values
       * @zh
       * 将给定平面的属性设置为给定值。
       * @param out 接受操作的对象。
       * @param nx 法向分量的 x 部分。
       * @param ny 法向分量的 y 部分。
       * @param nz 法向分量的 z 部分。
       * @param d 与原点的距离。
       * @return out 接受操作的对象。
       */

    }, {
      key: "set",
      value: function set(out, nx, ny, nz, d) {
        out.n.x = nx;
        out.n.y = ny;
        out.n.z = nz;
        out.d = d;
        return out;
      }
      /**
       * @en
       * create plane from normal and point
       * @zh
       * 用一条法线和一个点创建平面。
       * @param out 接受操作的对象。
       * @param normal 平面的法线。
       * @param point 平面上的一点。
       * @return out 接受操作的对象。
       */

    }, {
      key: "fromNormalAndPoint",
      value: function fromNormalAndPoint(out, normal, point) {
        _index.Vec3.copy(out.n, normal);

        out.d = _index.Vec3.dot(normal, point);
        return out;
      }
      /**
       * @en
       * normalize a plane
       * @zh
       * 归一化一个平面。
       * @param out 接受操作的对象。
       * @param a 操作的源数据。
       * @return out 接受操作的对象。
       */

    }, {
      key: "normalize",
      value: function normalize(out, a) {
        var len = a.n.length();

        _index.Vec3.normalize(out.n, a.n);

        if (len > 0) {
          out.d = a.d / len;
        }

        return out;
      }
      /**
       * @en
       * The normal of the plane.
       * @zh
       * 法线向量。
       */

    }]);

    /**
     * @en
     * Construct a plane.
     * @zh
     * 构造一个平面。
     * @param nx 法向分量的 x 部分。
     * @param ny 法向分量的 y 部分。
     * @param nz 法向分量的 z 部分。
     * @param d 与原点的距离。
     */
    function plane() {
      var nx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var ny = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      var nz = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var d = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

      _classCallCheck(this, plane);

      this.n = void 0;
      this.d = void 0;
      this._type = void 0;
      this._type = _enums.default.SHAPE_PLANE;
      this.n = new _index.Vec3(nx, ny, nz);
      this.d = d;
    }
    /**
     * @en
     * transform this plane.
     * @zh
     * 变换一个平面。
     * @param mat
     */


    _createClass(plane, [{
      key: "transform",
      value: function transform(mat) {
        _index.Mat4.invert(temp_mat, mat);

        _index.Mat4.transpose(temp_mat, temp_mat);

        _index.Vec4.set(temp_vec4, this.n.x, this.n.y, this.n.z, this.d);

        _index.Vec4.transformMat4(temp_vec4, temp_vec4, temp_mat);

        _index.Vec3.set(this.n, temp_vec4.x, temp_vec4.y, temp_vec4.z);

        this.d = temp_vec4.w;
      }
    }]);

    return plane;
  }();

  _exports.default = plane;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,