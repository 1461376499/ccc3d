(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../platform/debug.js", "../../utils/js.js", "./attribute.js", "../../default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../platform/debug.js"), require("../../utils/js.js"), require("./attribute.js"), require("../../default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.debug, global.js, global.attribute, global.defaultConstants);
    global.preprocessClass = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _debug, js, _attribute, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.getFullFormOfProperty = getFullFormOfProperty;
  _exports.preprocessAttrs = preprocessAttrs;
  _exports.doValidateMethodWithProps_DEV = doValidateMethodWithProps_DEV;
  _exports.validateMethodWithProps = validateMethodWithProps;
  js = _interopRequireWildcard(js);

  function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  /*
   Copyright (c) 2013-2016 Chukong Technologies Inc.
   Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
  
   http://www.cocos.com
  
   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated engine source code (the "Software"), a limited,
    worldwide, royalty-free, non-assignable, revocable and non-exclusive license
   to use Cocos Creator solely to develop games on your target platforms. You shall
    not use Cocos Creator software for developing other software or tools that's
    used for developing games. You are not granted to publish, distribute,
    sublicense, and/or sell copies of Cocos Creator.
  
   The software or tools in this License Agreement are licensed, not sold.
   Xiamen Yaji Software Co., Ltd. reserves all rights not expressly granted to you.
  
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.
  */
  // 增加预处理属性这个步骤的目的是降低 CCClass 的实现难度，将比较稳定的通用逻辑和一些需求比较灵活的属性需求分隔开。
  var SerializableAttrs = {
    url: {
      canUsedInGet: true
    },
    "default": {},
    serializable: {},
    editorOnly: {},
    formerlySerializedAs: {}
  };
  var TYPO_TO_CORRECT_DEV = _defaultConstants.DEV && {
    extend: 'extends',
    property: 'properties',
    "static": 'statics',
    constructor: 'ctor'
  };
  /**
   * 预处理 notify 等扩展属性
   */

  function parseNotify(val, propName, notify, properties) {
    if (val.get || val.set) {
      if (_defaultConstants.DEV) {
        (0, _debug.warnID)(5500);
      }

      return;
    }

    if (val.hasOwnProperty('default')) {
      // 添加新的内部属性，将原来的属性修改为 getter/setter 形式
      // （以 _ 开头将自动设置property 为 visible: false）
      var newKey = '_N$' + propName;

      val.get = function () {
        return this[newKey];
      };

      val.set = function (value) {
        var oldValue = this[newKey];
        this[newKey] = value;
        notify.call(this, oldValue);
      };

      var newValue = {};
      properties[newKey] = newValue; // 将不能用于get方法中的属性移动到newValue中
      // tslint:disable: forin

      for (var attr in SerializableAttrs) {
        var v = SerializableAttrs[attr];

        if (val.hasOwnProperty(attr)) {
          newValue[attr] = val[attr];

          if (!v.canUsedInGet) {
            delete val[attr];
          }
        }
      }
    } else if (_defaultConstants.DEV) {
      (0, _debug.warnID)(5501);
    }
  }
  /**
   * 检查 url
   */


  function checkUrl(val, className, propName, url) {
    if (Array.isArray(url)) {
      if (url.length > 0) {
        url = url[0];
      } else if (_defaultConstants.EDITOR) {
        return (0, _debug.errorID)(5502, className, propName);
      }
    }

    if (_defaultConstants.EDITOR) {
      if (url == null) {
        return (0, _debug.warnID)(5503, className, propName);
      }

      if (typeof url !== 'function' || !js.isChildClassOf(url, cc.RawAsset)) {
        return (0, _debug.errorID)(5504, className, propName);
      }

      if (url === cc.RawAsset) {
        (0, _debug.warn)('Please change the definition of property \'%s\' in class \'%s\'. Starting from v1.10,\n' + 'the use of declaring a property in CCClass as a URL has been deprecated.\n' + 'For example, if property is cc.RawAsset, the previous definition is:\n' + '    %s: cc.RawAsset,\n' + '    // or:\n' + '    %s: {\n' + '      url: cc.RawAsset,\n' + '      default: ""\n' + '    },\n' + '    // and the original method to get url is:\n' + '    `this.%s`\n' + 'Now it should be changed to:\n' + '    %s: {\n' + '      type: cc.Asset,     // use \'type:\' to define Asset object directly\n' + '      default: null,      // object\'s default value is null\n' + '    },\n' + '    // and you must get the url by using:\n' + '    `this.%s.nativeUrl`\n' + '(This helps us to successfully refactor all RawAssets at v2.0, ' + "sorry for the inconvenience. \uD83D\uDE30 )", propName, className, propName, propName, propName, propName, propName);
      } else if (js.isChildClassOf(url, cc.Asset)) {
        return (0, _debug.errorID)(5505, className, propName, cc.js.getClassName(url));
      }

      if (val.type) {
        return (0, _debug.warnID)(5506, className, propName);
      }
    }

    val.type = url;
  }
  /**
   * 解析类型
   */


  function parseType(val, type, className, propName) {
    if (Array.isArray(type)) {
      if ((_defaultConstants.EDITOR || _defaultConstants.TEST) && 'default' in val) {
        if (!cc.Class.isArray(val["default"])) {
          (0, _debug.warnID)(5507, className, propName);
        }
      }

      if (type.length > 0) {
        if (cc.RawAsset.isRawAssetType(type[0])) {
          val.url = type[0];
          delete val.type;
          return;
        } else {
          val.type = type = type[0];
        }
      } else {
        return (0, _debug.errorID)(5508, className, propName);
      }
    }

    if (_defaultConstants.EDITOR || _defaultConstants.TEST) {
      if (typeof type === 'function') {
        if (cc.RawAsset.isRawAssetType(type)) {
          (0, _debug.warnID)(5509, className, propName, js.getClassName(type));
        } else if (type === String) {
          val.type = cc.String;
          (0, _debug.warnID)(3608, "\"".concat(className, ".").concat(propName, "\""));
        } else if (type === Boolean) {
          val.type = cc.Boolean;
          (0, _debug.warnID)(3609, "\"".concat(className, ".").concat(propName, "\""));
        } else if (type === Number) {
          val.type = cc.Float;
          (0, _debug.warnID)(3610, "\"".concat(className, ".").concat(propName, "\""));
        }
      } else {
        switch (type) {
          case 'Number':
            (0, _debug.warnID)(5510, className, propName);
            break;

          case 'String':
            (0, _debug.warn)("The type of \"".concat(className, ".").concat(propName, "\" must be CCString, not \"String\"."));
            break;

          case 'Boolean':
            (0, _debug.warn)("The type of \"".concat(className, ".").concat(propName, "\" must be CCBoolean, not \"Boolean\"."));
            break;

          case 'Float':
            (0, _debug.warn)("The type of \"".concat(className, ".").concat(propName, "\" must be CCFloat, not \"Float\"."));
            break;

          case 'Integer':
            (0, _debug.warn)("The type of \"".concat(className, ".").concat(propName, "\" must be CCInteger, not \"Integer\"."));
            break;

          case null:
            (0, _debug.warnID)(5511, className, propName);
            break;
        }
      }
    }
  }

  function postCheckType(val, type, className, propName) {
    if (_defaultConstants.EDITOR && typeof type === 'function') {
      if (cc.Class._isCCClass(type) && val.serializable !== false && !js._getClassId(type, false)) {
        (0, _debug.warnID)(5512, className, propName, className, propName);
      }
    }
  }

  function getBaseClassWherePropertyDefined_DEV(propName, cls) {
    if (_defaultConstants.DEV) {
      var res;

      for (; cls && cls.__props__ && cls.__props__.indexOf(propName) !== -1; cls = cls.$super) {
        res = cls;
      }

      if (!res) {
        (0, _debug.error)('unknown error');
      }

      return res;
    }
  } // tslint:disable: no-shadowed-variable


  function getFullFormOfProperty(options, propname_dev, classname_dev) {
    var isLiteral = options && options.constructor === Object;

    if (!isLiteral) {
      if (Array.isArray(options) && options.length > 0) {
        var type = options[0];
        return {
          "default": [],
          type: options,
          _short: true
        };
      } else if (typeof options === 'function') {
        var _type = options;

        if (!cc.RawAsset.isRawAssetType(_type)) {
          return {
            "default": js.isChildClassOf(_type, cc.ValueType) ? new _type() : null,
            type: _type,
            _short: true
          };
        }

        return {
          "default": '',
          url: _type,
          _short: true
        };
      } else if (options instanceof _attribute.PrimitiveType) {
        return {
          "default": options["default"],
          _short: true
        };
      } else {
        return {
          "default": options,
          _short: true
        };
      }
    }

    return null;
  }

  function preprocessAttrs(properties, className, cls, es6) {
    for (var propName in properties) {
      var val = properties[propName];
      var fullForm = getFullFormOfProperty(val, propName, className);

      if (fullForm) {
        val = properties[propName] = fullForm;
      }

      if (val) {
        if (_defaultConstants.EDITOR) {
          if ('default' in val) {
            if (val.get) {
              (0, _debug.errorID)(5513, className, propName);
            } else if (val.set) {
              (0, _debug.errorID)(5514, className, propName);
            } else if (cc.Class._isCCClass(val["default"])) {
              val["default"] = null;
              (0, _debug.errorID)(5515, className, propName);
            }
          } else if (!val.get && !val.set) {
            var maybeTypeScript = es6;

            if (!maybeTypeScript) {
              (0, _debug.errorID)(5516, className, propName);
            }
          }
        }

        if (_defaultConstants.DEV && !val.override && cls.__props__.indexOf(propName) !== -1) {
          // check override
          var baseClass = js.getClassName(getBaseClassWherePropertyDefined_DEV(propName, cls));
          (0, _debug.warnID)(5517, className, propName, baseClass, propName);
        }

        var notify = val.notify;

        if (notify) {
          if (_defaultConstants.DEV && es6) {
            (0, _debug.error)('not yet support notify attribute for ES6 Classes');
          } else {
            parseNotify(val, propName, notify, properties);
          }
        }

        if ('type' in val) {
          parseType(val, val.type, className, propName);
        }

        if ('url' in val) {
          checkUrl(val, className, propName, val.url);
        }

        if ('type' in val) {
          postCheckType(val, val.type, className, propName);
        }
      }
    }
  }

  var CALL_SUPER_DESTROY_REG_DEV = /\b\._super\b|destroy.*\.call\s*\(\s*\w+\s*[,|)]/;

  function doValidateMethodWithProps_DEV(func, funcName, className, cls, base) {
    if (cls.__props__ && cls.__props__.indexOf(funcName) >= 0) {
      // find class that defines this method as a property
      var baseClassName = js.getClassName(getBaseClassWherePropertyDefined_DEV(funcName, cls));
      (0, _debug.errorID)(3648, className, funcName, baseClassName);
      return false;
    }

    if (funcName === 'destroy' && js.isChildClassOf(base, cc.Component) && !CALL_SUPER_DESTROY_REG_DEV.test(func)) {
      // tslint:disable-next-line: max-line-length
      (0, _debug.error)("Overwriting '".concat(funcName, "' function in '").concat(className, "' class without calling super is not allowed. Call the super function in '").concat(funcName, "' please."));
    }
  }

  function validateMethodWithProps(func, funcName, className, cls, base) {
    if (_defaultConstants.DEV && funcName === 'constructor') {
      (0, _debug.errorID)(3643, className);
      return false;
    }

    if (typeof func === 'function' || func === null) {
      if (_defaultConstants.DEV) {
        doValidateMethodWithProps_DEV(func, funcName, className, cls, base);
      }
    } else {
      if (_defaultConstants.DEV) {
        if (func === false && base && base.prototype) {
          // check override
          var overrided = base.prototype[funcName];

          if (typeof overrided === 'function') {
            var baseFuc = js.getClassName(base) + '.' + funcName;
            var subFuc = className + '.' + funcName;
            (0, _debug.warnID)(3624, subFuc, baseFuc, subFuc, subFuc);
          }
        }

        var correct = TYPO_TO_CORRECT_DEV[funcName];

        if (correct) {
          (0, _debug.warnID)(3621, className, funcName, correct);
        } else if (func) {
          (0, _debug.errorID)(3622, className, funcName);
        }
      }

      return false;
    }

    return true;
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,