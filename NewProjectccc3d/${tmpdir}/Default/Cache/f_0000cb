(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../components/component.js", "../data/class-decorator.js", "../event/eventify.js", "../platform/debug.js", "../utils/array.js", "../utils/js-typed.js", "./animation-clip.js", "./animation-state.js", "./cross-fade.js", "../default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../components/component.js"), require("../data/class-decorator.js"), require("../event/eventify.js"), require("../platform/debug.js"), require("../utils/array.js"), require("../utils/js-typed.js"), require("./animation-clip.js"), require("./animation-state.js"), require("./cross-fade.js"), require("../default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.component, global.classDecorator, global.eventify, global.debug, global.array, global.jsTyped, global.animationClip, global.animationState, global.crossFade, global.defaultConstants);
    global.animationComponent = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _component, _classDecorator, _eventify, _debug, ArrayUtils, _jsTyped, _animationClip, _animationState, _crossFade, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AnimationComponent = void 0;
  ArrayUtils = _interopRequireWildcard(ArrayUtils);

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _class3, _temp;

  function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }

  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

  /**
   * @en
   * Animation component governs a group of animation states to control playback of the states.
   * For convenient, it stores a group of animation clips.
   * Each of those clips would have an associated animation state uniquely created.
   * Animation component is eventful, it dispatch a serials playback status events.
   * See [[EventType]].
   * @zh
   * 动画组件管理一组动画状态，控制它们的播放。
   * 为了方便，动画组件还存储了一组动画剪辑。
   * 每个剪辑都会独自创建一个关联的动画状态对象。
   * 动画组件具有事件特性，它会派发一系列播放状态相关的事件。
   * 参考 [[EventType]]
   */
  var AnimationComponent = (_dec = (0, _classDecorator.ccclass)('cc.AnimationComponent'), _dec2 = (0, _classDecorator.help)('i18n:cc.AnimationComponent'), _dec3 = (0, _classDecorator.executionOrder)(99), _dec4 = (0, _classDecorator.menu)('Components/Animation'), _dec5 = (0, _classDecorator.property)({
    type: [_animationClip.AnimationClip],
    tooltip: '此动画组件管理的动画剪辑'
  }), _dec6 = (0, _classDecorator.property)({
    type: _animationClip.AnimationClip,
    tooltip: '默认动画剪辑'
  }), _dec7 = (0, _classDecorator.property)({
    tooltip: '是否在动画组件开始运行时自动播放默认动画剪辑'
  }), _dec8 = (0, _classDecorator.property)({
    type: [_animationClip.AnimationClip]
  }), _dec(_class = _dec2(_class = _dec3(_class = (0, _classDecorator.executeInEditMode)(_class = _dec4(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Eventify) {
    _inherits(AnimationComponent, _Eventify);

    function AnimationComponent() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, AnimationComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AnimationComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _initializerDefineProperty(_this, "playOnLoad", _descriptor, _assertThisInitialized(_this));

      _this._crossFade = new _crossFade.CrossFade();
      _this._nameToState = (0, _jsTyped.createMap)(true);

      _initializerDefineProperty(_this, "_clips", _descriptor2, _assertThisInitialized(_this));

      _initializerDefineProperty(_this, "_defaultClip", _descriptor3, _assertThisInitialized(_this));

      _this._hasBeenPlayed = false;
      return _this;
    }

    _createClass(AnimationComponent, [{
      key: "onLoad",
      value: function onLoad() {
        this.clips = this._clips;

        for (var stateName in this._nameToState) {
          var state = this._nameToState[stateName];
          state.initialize(this.node);
        }
      }
    }, {
      key: "start",
      value: function start() {
        if (!_defaultConstants.EDITOR && this.playOnLoad && !this._hasBeenPlayed && this._defaultClip) {
          this.crossFade(this._defaultClip.name, 0);
        }
      }
    }, {
      key: "onEnable",
      value: function onEnable() {
        this._crossFade.resume();
      }
    }, {
      key: "onDisable",
      value: function onDisable() {
        this._crossFade.pause();
      }
    }, {
      key: "onDestroy",
      value: function onDestroy() {
        this._crossFade.stop();

        for (var name in this._nameToState) {
          var state = this._nameToState[name];
          state.destroy();
        }

        this._nameToState = (0, _jsTyped.createMap)(true);
      }
      /**
       * @en
       * Switch to play specified animation state, without fading.
       * @zh
       * 立即切换到指定动画状态。
       * @param name The name of the animation to be played, if absent, the default clip will be played
       */

    }, {
      key: "play",
      value: function play(name) {
        this._hasBeenPlayed = true;

        if (!name) {
          if (!this._defaultClip) {
            return;
          } else {
            name = this._defaultClip.name;
          }
        }

        this.crossFade(name, 0);
      }
      /**
       * @en
       * Smoothly switch to play specified animation state.
       * @zn
       * 平滑地切换到指定动画状态。
       * @param name The name of the animation to switch to
       * @param duration The duration of the cross fade, default value is 0.3s
       */

    }, {
      key: "crossFade",
      value: function crossFade(name) {
        var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.3;
        this._hasBeenPlayed = true;
        var state = this._nameToState[name];

        if (state) {
          this._crossFade.play();

          this._crossFade.crossFade(state, duration);
        }
      }
      /**
       * @en
       * Pause all animation states and all switching.
       * @zh
       * 暂停所有动画状态，并暂停所有切换。
       */

    }, {
      key: "pause",
      value: function pause() {
        this._crossFade.pause();
      }
      /**
       * @en
       * Resume all animation states and all switching.
       * @zh
       * 恢复所有动画状态，并恢复所有切换。
       */

    }, {
      key: "resume",
      value: function resume() {
        this._crossFade.resume();
      }
      /**
       * @en
       * Stop all animation states and all switching.
       * @zh
       * 停止所有动画状态，并停止所有切换。
       */

    }, {
      key: "stop",
      value: function stop() {
        this._crossFade.stop();
      }
      /**
       * @en
       * Get specified animation state.
       * @zh
       * 获取指定的动画状态。
       * @deprecated please use [[getState]]
       */

    }, {
      key: "getAnimationState",
      value: function getAnimationState(name) {
        return this.getState(name);
      }
      /**
       * @en
       * Get specified animation state.
       * @zh
       * 获取指定的动画状态。
       * @param name The name of the animation
       * @returns If no animation found, return null, otherwise the correspond animation state is returned
       */

    }, {
      key: "getState",
      value: function getState(name) {
        var state = this._nameToState[name];

        if (state && !state.curveLoaded) {
          state.initialize(this.node);
        }

        return state || null;
      }
      /**
       * @en
       * Creates a state for specified clip.
       * If there is already a clip with same name, the existing animation state will be stopped and overridden.
       * @zh
       * 使用指定的动画剪辑创建一个动画状态。
       * 若指定名称的动画状态已存在，已存在的动画状态将先被设为停止并被覆盖。
       * @param clip The animation clip
       * @param name The animation state name, if absent, the default clip's name will be used
       * @returns The animation state created
       */

    }, {
      key: "createState",
      value: function createState(clip, name) {
        name = name || clip.name;
        this.removeState(name);
        return this._doCreateState(clip, name);
      }
      /**
       * @en
       * Stops and removes specified clip.
       * @zh
       * 停止并移除指定的动画状态。
       * @param name The name of the animation state
       */

    }, {
      key: "removeState",
      value: function removeState(name) {
        var state = this._nameToState[name];

        if (state) {
          state.allowLastFrameEvent(false);
          state.stop();
          delete this._nameToState[name];
        }
      }
      /**
       * 添加一个动画剪辑到 `this.clips`中并以此剪辑创建动画状态。
       * @deprecated please use [[createState]]
       * @param clip The animation clip
       * @param name The animation state name, if absent, the default clip's name will be used
       * @returns The created animation state
       */

    }, {
      key: "addClip",
      value: function addClip(clip, name) {
        if (!ArrayUtils.contains(this._clips, clip)) {
          this._clips.push(clip);
        }

        return this.createState(clip, name);
      }
      /**
       * @en
       * Remove clip from the animation list. This will remove the clip and any animation states based on it.<br>
       * If there are animation states depend on the clip are playing or clip is defaultClip, it will not delete the clip.<br>
       * But if force is true, then will always remove the clip and any animation states based on it. If clip is defaultClip, defaultClip will be reset to null
       * @zh
       * 从动画列表中移除指定的动画剪辑，<br/>
       * 如果依赖于 clip 的 AnimationState 正在播放或者 clip 是 defaultClip 的话，默认是不会删除 clip 的。<br/>
       * 但是如果 force 参数为 true，则会强制停止该动画，然后移除该动画剪辑和相关的动画。这时候如果 clip 是 defaultClip，defaultClip 将会被重置为 null。<br/>
       * @deprecated please use [[removeState]]
       * @param force - If force is true, then will always remove the clip and any animation states based on it.
       */

    }, {
      key: "removeClip",
      value: function removeClip(clip, force) {
        var removalState;

        for (var name in this._nameToState) {
          var state = this._nameToState[name];
          var stateClip = state.clip;

          if (stateClip === clip) {
            removalState = state;
            break;
          }
        }

        if (clip === this._defaultClip) {
          if (force) {
            this._defaultClip = null;
          } else {
            if (!_defaultConstants.TEST) {
              (0, _debug.warnID)(3902);
            }

            return;
          }
        }

        if (removalState && removalState.isPlaying) {
          if (force) {
            removalState.stop();
          } else {
            if (!_defaultConstants.TEST) {
              (0, _debug.warnID)(3903);
            }

            return;
          }
        }

        this._clips = this._clips.filter(function (item) {
          return item !== clip;
        });

        if (removalState) {
          delete this._nameToState[removalState.name];
        }
      }
      /**
       * @en
       * Register animation event callback.<bg>
       * The event arguments will provide the AnimationState which emit the event.<bg>
       * When play an animation, will auto register the event callback to the AnimationState,<bg>
       * and unregister the event callback from the AnimationState when animation stopped.
       * @zh
       * 注册动画事件回调。<bg>
       * 回调的事件里将会附上发送事件的 AnimationState。<bg>
       * 当播放一个动画时，会自动将事件注册到对应的 AnimationState 上，停止播放时会将事件从这个 AnimationState 上取消注册。
       * @param type The event type to listen to
       * @param callback The callback when event triggered
       * @param target The callee when invoke the callback, could be absent
       * @return The registered callback
       * @example
       * ```typescript
       * onPlay: function (type, state) {
       *     // callback
       * }
       *
       * // register event to all animation
       * animation.on('play', this.onPlay, this);
       * ```
       */

    }, {
      key: "on",
      value: function on(type, callback, thisArg, once) {
        var ret = _get(_getPrototypeOf(AnimationComponent.prototype), "on", this).call(this, type, callback, thisArg, once);

        if (type === _animationState.EventType.LASTFRAME) {
          this._syncAllowLastFrameEvent();
        }

        return ret;
      }
    }, {
      key: "once",
      value: function once(type, callback, thisArg) {
        var ret = _get(_getPrototypeOf(AnimationComponent.prototype), "once", this).call(this, type, callback, thisArg);

        if (type === _animationState.EventType.LASTFRAME) {
          this._syncAllowLastFrameEvent();
        }

        return ret;
      }
      /**
       * @en
       * Unregister animation event callback.
       * @zh
       * 取消注册动画事件回调。
       * @param {String} type The event type to unregister
       * @param {Function} callback The callback to unregister
       * @param {Object} target The callee of the callback, could be absent
       * @example
       * ```typescript
       * // unregister event to all animation
       * animation.off('play', this.onPlay, this);
       * ```
       */

    }, {
      key: "off",
      value: function off(type, callback, thisArg) {
        _get(_getPrototypeOf(AnimationComponent.prototype), "off", this).call(this, type, callback, thisArg);

        if (type === _animationState.EventType.LASTFRAME) {
          this._syncDisallowLastFrameEvent();
        }
      }
    }, {
      key: "_createState",
      value: function _createState(clip, name) {
        return new _animationState.AnimationState(clip, name);
      }
    }, {
      key: "_doCreateState",
      value: function _doCreateState(clip, name) {
        var state = this._createState(clip, name);

        state._setEventTarget(this);

        state.allowLastFrameEvent(this.hasEventListener(_animationState.EventType.LASTFRAME));

        if (this.node) {
          state.initialize(this.node);
        }

        this._nameToState[state.name] = state;
        return state;
      }
    }, {
      key: "_getStateByNameOrDefaultClip",
      value: function _getStateByNameOrDefaultClip(name) {
        if (!name) {
          if (!this._defaultClip) {
            return null;
          } else {
            name = this._defaultClip.name;
          }
        }

        var state = this._nameToState[name];

        if (state) {
          return state;
        } else {
          return null;
        }
      }
    }, {
      key: "_removeStateOfAutomaticClip",
      value: function _removeStateOfAutomaticClip(clip) {
        // tslint:disable-next-line:forin
        for (var name in this._nameToState) {
          var state = this._nameToState[name];

          if (equalClips(clip, state.clip)) {
            state.stop();
            delete this._nameToState[name];
          }
        }
      }
    }, {
      key: "_syncAllowLastFrameEvent",
      value: function _syncAllowLastFrameEvent() {
        if (this.hasEventListener(_animationState.EventType.LASTFRAME)) {
          for (var stateName in this._nameToState) {
            this._nameToState[stateName].allowLastFrameEvent(true);
          }
        }
      }
    }, {
      key: "_syncDisallowLastFrameEvent",
      value: function _syncDisallowLastFrameEvent() {
        if (!this.hasEventListener(_animationState.EventType.LASTFRAME)) {
          for (var stateName in this._nameToState) {
            this._nameToState[stateName].allowLastFrameEvent(false);
          }
        }
      }
    }, {
      key: "clips",

      /**
       * @en
       * Gets or sets clips this component governs.
       * When set, associated animation state of each existing clip will be stopped.
       * If the existing default clip is not in the set of new clips, default clip will be reset to null.
       * @zh
       * 获取或设置此组件管理的剪辑。
       * 设置时，已有剪辑关联的动画状态将被停止；若默认剪辑不在新的动画剪辑中，将被重置为空。
       */
      get: function get() {
        return this._clips;
      },
      set: function set(value) {
        var _this2 = this;

        if (this._crossFade) {
          this._crossFade.clear();
        } // Remove state for old automatic clips.


        var _iterator = _createForOfIteratorHelper(this._clips),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var clip = _step.value;

            if (clip) {
              this._removeStateOfAutomaticClip(clip);
            }
          } // Create state for new clips.

        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        var _iterator2 = _createForOfIteratorHelper(value),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var _clip = _step2.value;

            if (_clip) {
              this.createState(_clip);
            }
          } // Default clip should be in the list of automatic clips.

        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        var newDefaultClip = value.find(function (clip) {
          return equalClips(clip, _this2._defaultClip);
        });

        if (newDefaultClip) {
          this._defaultClip = newDefaultClip;
        } else {
          this._defaultClip = null;
        }

        this._clips = value;
      }
      /**
       * @en
       * Gets or sets the default clip.
       * @en
       * 获取或设置默认剪辑。
       * 设置时，若指定的剪辑不在 `this.clips` 中则会被自动添加至 `this.clips`。
       * @see [[playOnLoad]]
       */

    }, {
      key: "defaultClip",
      get: function get() {
        return this._defaultClip;
      },
      set: function set(value) {
        this._defaultClip = value;

        if (!value) {
          return;
        }

        var isBoundedDefaultClip = this._clips.findIndex(function (clip) {
          return equalClips(clip, value);
        }) >= 0;

        if (!isBoundedDefaultClip) {
          this._clips.push(value);

          this.createState(value);
        }
      }
    }]);

    return AnimationComponent;
  }((0, _eventify.Eventify)(_component.Component)), _class3.EventType = _animationState.EventType, _temp), (_applyDecoratedDescriptor(_class2.prototype, "clips", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "clips"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "defaultClip", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "defaultClip"), _class2.prototype), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "playOnLoad", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_clips", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return [];
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_defaultClip", [_classDecorator.property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  })), _class2)) || _class) || _class) || _class) || _class) || _class);
  _exports.AnimationComponent = AnimationComponent;

  (function (_AnimationComponent) {})(AnimationComponent || (_exports.AnimationComponent = AnimationComponent = {}));

  cc.AnimationComponent = AnimationComponent;

  function equalClips(clip1, clip2) {
    if (clip1 === clip2) {
      return true;
    }

    return !!clip1 && !!clip2 && (clip1.name === clip2.name || clip1._uuid === clip2._uuid);
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,