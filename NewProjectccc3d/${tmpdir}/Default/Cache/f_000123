(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../../../core/assets/index.js", "../../../core/components/component.js", "../../../core/utils/index.js", "../../../core/math/index.js", "../../components/index.js", "../../../core/load-pipeline/index.js", "../../../core/platform/debug.js", "../../../core/default-constants.js"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../../../core/assets/index.js"), require("../../../core/components/component.js"), require("../../../core/utils/index.js"), require("../../../core/math/index.js"), require("../../components/index.js"), require("../../../core/load-pipeline/index.js"), require("../../../core/platform/debug.js"), require("../../../core/default-constants.js"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.index, global.component, global.index, global.index, global.index, global.index, global.debug, global.defaultConstants);
    global.ttfUtils = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _index, _component, _index2, _index3, _index4, _index5, _debug, _defaultConstants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ttfUtils = void 0;

  function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  var Overflow = _index4.LabelComponent.Overflow;

  var WHITE = _index3.Color.WHITE.clone();

  var OUTLINE_SUPPORTED = _index2.js.isChildClassOf(_index4.LabelOutlineComponent, _component.Component);

  var _context = null;
  var _canvas = null;
  var _texture = null;
  var _fontDesc = '';
  var _string = '';
  var _fontSize = 0;
  var _drawFontsize = 0;
  var _splitedStrings = [];

  var _canvasSize = new _index3.Size();

  var _lineHeight = 0;
  var _hAlign = 0;
  var _vAlign = 0;

  var _color = new _index3.Color();

  var _fontFamily = '';
  var _overflow = Overflow.NONE;
  var _isWrapText = false; // outline

  var _isOutlined = false;

  var _outlineColor = new _index3.Color();

  var _outlineWidth = 0;
  var _margin = 0;
  var _isBold = false;
  var _isItalic = false;
  var _isUnderline = false;
  var ttfUtils = {
    getAssemblerData: function getAssemblerData() {
      var sharedLabelData = _index4.LabelComponent._canvasPool.get();

      sharedLabelData.canvas.width = sharedLabelData.canvas.height = 1;
      return sharedLabelData;
    },
    resetAssemblerData: function resetAssemblerData(assemblerData) {
      if (assemblerData) {
        _index4.LabelComponent._canvasPool.put(assemblerData);
      }
    },
    updateRenderData: function updateRenderData(comp) {
      if (!comp.renderData || !comp.renderData.vertDirty) {
        return;
      }

      this._updateFontFamly(comp);

      this._updateProperties(comp);

      this._calculateLabelFont();

      this._calculateSplitedStrings();

      this._updateLabelDimensions();

      this._calculateTextBaseline();

      this._updateTexture();

      comp.actualFontSize = _fontSize;
      comp.node.setContentSize(_canvasSize);
      this.updateVerts(comp);
      comp.markForUpdateRenderData(false);
      _context = null;
      _canvas = null;
      _texture = null;
    },
    updateVerts: function updateVerts(comp) {},
    _updateFontFamly: function _updateFontFamly(comp) {
      if (!comp.useSystemFont) {
        if (comp.font) {
          if (comp.font._nativeAsset) {
            _fontFamily = comp.font._nativeAsset;
          } else {
            _index5.loader.load(comp.font.nativeUrl, function (err, fontFamily) {
              _fontFamily = fontFamily || 'Arial';
              comp.updateRenderData(true);
            });
          }
        } else {
          _fontFamily = 'Arial';
        }
      } else {
        _fontFamily = comp.fontFamily;
      }
    },
    _updateProperties: function _updateProperties(comp) {
      var assemblerData = comp.assemblerData;

      if (!assemblerData) {
        return;
      }

      _context = assemblerData.context;
      _canvas = assemblerData.canvas;
      _texture = comp.spriteFrame;
      _string = comp.string.toString();
      _fontSize = comp.fontSize;
      _drawFontsize = _fontSize;
      _overflow = comp.overflow;
      _canvasSize.width = comp.node.width;
      _canvasSize.height = comp.node.height;
      _lineHeight = comp.lineHeight;
      _hAlign = comp.horizontalAlign;
      _vAlign = comp.verticalAlign;
      _color = comp.color;
      _isBold = comp.isBold;
      _isItalic = comp.isItalic;
      _isUnderline = comp.isUnderline;

      if (_overflow === Overflow.NONE) {
        _isWrapText = false;
      } else if (_overflow === Overflow.RESIZE_HEIGHT) {
        _isWrapText = true;
      } else {
        _isWrapText = comp.enableWrapText;
      } // outline


      var outline = OUTLINE_SUPPORTED && comp.getComponent(_index4.LabelOutlineComponent);

      if (outline && outline.enabled) {
        _isOutlined = true;
        _margin = _outlineWidth = outline.width;

        _outlineColor.set(outline.color); // TODO: temporary solution, cascade opacity for outline color


        _outlineColor.a = _outlineColor.a * comp.color.a / 255.0;
      } else {
        _isOutlined = false;
        _margin = 0;
      }
    },
    _calculateFillTextStartPosition: function _calculateFillTextStartPosition() {
      var lineHeight = this._getLineHeight();

      var lineCount = _splitedStrings.length;
      var labelX;
      var firstLinelabelY;

      if (_hAlign === _index4.HorizontalTextAlignment.RIGHT) {
        labelX = _canvasSize.width - _margin;
      } else if (_hAlign === _index4.HorizontalTextAlignment.CENTER) {
        labelX = _canvasSize.width / 2;
      } else {
        labelX = 0 + _margin;
      }

      if (_vAlign === _index4.VerticalTextAlignment.TOP) {
        firstLinelabelY = _fontSize * (_index2.BASELINE_RATIO / 2);

        if (_defaultConstants.RUNTIME_BASED || _defaultConstants.MINIGAME) {
          firstLinelabelY = 0;
        }
      } else if (_vAlign === _index4.VerticalTextAlignment.CENTER) {
        firstLinelabelY = _canvasSize.height / 2 - lineHeight * (lineCount - 1) / 2;
      } else {
        firstLinelabelY = _canvasSize.height - lineHeight * (lineCount - 1);
      }

      return new _index3.Vec2(labelX, firstLinelabelY);
    },
    _updateTexture: function _updateTexture() {
      if (!_context || !_canvas) {
        return;
      }

      _context.clearRect(0, 0, _canvas.width, _canvas.height);

      _context.font = _fontDesc;

      var startPosition = this._calculateFillTextStartPosition();

      var lineHeight = this._getLineHeight(); // use round for line join to avoid sharp intersect point


      _context.lineJoin = 'round';
      _context.fillStyle = "rgba(".concat(_color.r, ", ").concat(_color.g, ", ").concat(_color.b, ", ").concat(_color.a / 255, ")");
      var underlineStartPosition; // do real rendering

      for (var i = 0; i < _splitedStrings.length; ++i) {
        if (_isOutlined) {
          var strokeColor = _outlineColor || WHITE;
          _context.strokeStyle = "rgba(".concat(strokeColor.r, ", ").concat(strokeColor.g, ", ").concat(strokeColor.b, ", ").concat(strokeColor.a / 255, ")");
          _context.lineWidth = _outlineWidth * 2;

          _context.strokeText(_splitedStrings[i], startPosition.x, startPosition.y + i * lineHeight);
        }

        _context.fillText(_splitedStrings[i], startPosition.x, startPosition.y + i * lineHeight);

        if (_isUnderline) {
          underlineStartPosition = this._calculateUnderlineStartPosition();

          _context.save();

          _context.beginPath();

          _context.lineWidth = _fontSize / 8;
          _context.strokeStyle = "rgba(".concat(_color.r, ", ").concat(_color.g, ", ").concat(_color.b, ", ").concat(_color.a / 255, ")");

          _context.moveTo(underlineStartPosition.x, underlineStartPosition.y + i * lineHeight - 1);

          _context.lineTo(underlineStartPosition.x + _canvas.width, underlineStartPosition.y + i * lineHeight - 1);

          _context.stroke();

          _context.restore();
        }
      } // _texture.handleLoadedTexture();


      if (_texture) {
        var tex;

        if (_texture instanceof _index.SpriteFrame) {
          tex = _texture.texture;
        } else {
          tex = _texture;
        }

        var uploadAgain = _canvas.width === 0 || _canvas.height === 0;
        tex.reset({
          width: _canvas.width,
          height: _canvas.height,
          mipmapLevel: uploadAgain ? 0 : 1
        });

        if (!uploadAgain) {
          tex.uploadData(_canvas);
        }
      }
    },
    _calculateUnderlineStartPosition: function _calculateUnderlineStartPosition() {
      var lineHeight = this._getLineHeight();

      var lineCount = _splitedStrings.length;
      var labelX;
      var firstLinelabelY;
      labelX = 0 + _margin;

      if (_vAlign === _index4.VerticalTextAlignment.TOP) {
        firstLinelabelY = _fontSize;
      } else if (_vAlign === _index4.VerticalTextAlignment.CENTER) {
        firstLinelabelY = _canvasSize.height / 2 - lineHeight * (lineCount - 1) / 2 + _fontSize / 2;
      } else {
        firstLinelabelY = _canvasSize.height - lineHeight * (lineCount - 1);
      }

      return new _index3.Vec2(labelX, firstLinelabelY);
    },
    _updateLabelDimensions: function _updateLabelDimensions() {
      if (!_context) {
        return;
      }

      var paragraphedStrings = _string.split('\n');

      if (_overflow === Overflow.RESIZE_HEIGHT) {
        _canvasSize.height = (_splitedStrings.length + _index2.BASELINE_RATIO) * this._getLineHeight();
      } else if (_overflow === Overflow.NONE) {
        _splitedStrings = paragraphedStrings;
        var canvasSizeX = 0;
        var canvasSizeY = 0;

        var _iterator = _createForOfIteratorHelper(paragraphedStrings),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var para = _step.value;
            var paraLength = (0, _index2.safeMeasureText)(_context, para);
            canvasSizeX = canvasSizeX > paraLength ? canvasSizeX : paraLength;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        canvasSizeY = (_splitedStrings.length + _index2.BASELINE_RATIO) * this._getLineHeight();
        _canvasSize.width = parseFloat(canvasSizeX.toFixed(2)) + 2 * _margin;
        _canvasSize.height = parseFloat(canvasSizeY.toFixed(2));

        if (_isItalic) {
          // 0.0174532925 = 3.141592653 / 180
          _canvasSize.width += _drawFontsize * Math.tan(12 * 0.0174532925);
        }
      }

      if (!_canvas) {
        return;
      }

      _canvas.width = _canvasSize.width;
      _canvas.height = _canvasSize.height;
    },
    _calculateTextBaseline: function _calculateTextBaseline() {
      // let node = this._node;
      var hAlign;
      var vAlign;

      if (_hAlign === _index4.HorizontalTextAlignment.RIGHT) {
        hAlign = 'right';
      } else if (_hAlign === _index4.HorizontalTextAlignment.CENTER) {
        hAlign = 'center';
      } else {
        hAlign = 'left';
      }

      if (_vAlign === _index4.VerticalTextAlignment.TOP) {
        vAlign = 'top';
      } else if (_vAlign === _index4.VerticalTextAlignment.CENTER) {
        vAlign = 'middle';
      } else {
        vAlign = 'bottom';
      }

      if (_context) {
        _context.textAlign = hAlign;
        _context.textBaseline = vAlign;
      }
    },
    _calculateSplitedStrings: function _calculateSplitedStrings() {
      if (!_context) {
        return;
      }

      var paragraphedStrings = _string.split('\n');

      if (_isWrapText) {
        _splitedStrings = [];
        var canvasWidthNoMargin = _canvasSize.width - 2 * _margin;

        var _iterator2 = _createForOfIteratorHelper(paragraphedStrings),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var para = _step2.value;
            var allWidth = (0, _index2.safeMeasureText)(_context, para);
            var textFragment = (0, _index2.fragmentText)(para, allWidth, canvasWidthNoMargin, this._measureText(_context));
            _splitedStrings = _splitedStrings.concat(textFragment);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      } else {
        _splitedStrings = paragraphedStrings;
      }
    },
    _getFontDesc: function _getFontDesc() {
      var fontDesc = _fontSize.toString() + 'px ';
      fontDesc = fontDesc + _fontFamily;

      if (_isBold) {
        fontDesc = 'bold ' + fontDesc;
      }

      if (_isItalic) {
        fontDesc = 'italic ' + fontDesc;
      }

      return fontDesc;
    },
    _getLineHeight: function _getLineHeight() {
      var nodeSpacingY = _lineHeight;

      if (nodeSpacingY === 0) {
        nodeSpacingY = _fontSize;
      } else {
        nodeSpacingY = nodeSpacingY * _fontSize / _drawFontsize;
      }

      return nodeSpacingY | 0;
    },
    _calculateParagraphLength: function _calculateParagraphLength(paragraphedStrings, ctx) {
      var paragraphLength = [];

      var _iterator3 = _createForOfIteratorHelper(paragraphedStrings),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var para = _step3.value;
          var width = (0, _index2.safeMeasureText)(ctx, para);
          paragraphLength.push(width);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return paragraphLength;
    },
    _measureText: function _measureText(ctx) {
      return function (string) {
        return (0, _index2.safeMeasureText)(ctx, string);
      };
    },
    _calculateLabelFont: function _calculateLabelFont() {
      if (!_context) {
        return;
      }

      _fontDesc = this._getFontDesc();
      _context.font = _fontDesc;

      if (_overflow === Overflow.SHRINK) {
        var paragraphedStrings = _string.split('\n');

        var paragraphLength = this._calculateParagraphLength(paragraphedStrings, _context);

        _splitedStrings = paragraphedStrings;
        var i = 0;
        var totalHeight = 0;
        var maxLength = 0;

        if (_isWrapText) {
          var canvasWidthNoMargin = _canvasSize.width - 2 * _margin;
          var canvasHeightNoMargin = _canvasSize.height - 2 * _margin;

          if (canvasWidthNoMargin < 0 || canvasHeightNoMargin < 0) {
            _fontDesc = this._getFontDesc();
            _context.font = _fontDesc;
            return;
          }

          totalHeight = canvasHeightNoMargin + 1;
          maxLength = canvasWidthNoMargin + 1;
          var actualFontSize = _fontSize + 1;
          var textFragment = [];
          var tryDivideByTwo = true;
          var startShrinkFontSize = actualFontSize | 0;

          while (totalHeight > canvasHeightNoMargin || maxLength > canvasWidthNoMargin) {
            if (tryDivideByTwo) {
              actualFontSize = startShrinkFontSize / 2 | 0;
            } else {
              actualFontSize = startShrinkFontSize - 1;
              startShrinkFontSize = actualFontSize;
            }

            if (actualFontSize <= 0) {
              (0, _debug.logID)(4003);
              break;
            }

            _fontSize = actualFontSize;
            _fontDesc = this._getFontDesc();
            _context.font = _fontDesc;
            _splitedStrings = [];
            totalHeight = 0;

            for (i = 0; i < paragraphedStrings.length; ++i) {
              var j = 0;
              var allWidth = (0, _index2.safeMeasureText)(_context, paragraphedStrings[i]);
              textFragment = (0, _index2.fragmentText)(paragraphedStrings[i], allWidth, canvasWidthNoMargin, this._measureText(_context));

              while (j < textFragment.length) {
                var measureWidth = (0, _index2.safeMeasureText)(_context, textFragment[j]);
                maxLength = measureWidth;
                totalHeight += this._getLineHeight();
                ++j;
              }

              _splitedStrings = _splitedStrings.concat(textFragment);
            }

            if (tryDivideByTwo) {
              if (totalHeight > canvasHeightNoMargin) {
                startShrinkFontSize = actualFontSize | 0;
              } else {
                tryDivideByTwo = false;
                totalHeight = canvasHeightNoMargin + 1;
              }
            }
          }
        } else {
          totalHeight = paragraphedStrings.length * this._getLineHeight();

          for (i = 0; i < paragraphedStrings.length; ++i) {
            if (maxLength < paragraphLength[i]) {
              maxLength = paragraphLength[i];
            }
          }

          var scaleX = (_canvasSize.width - 2 * _margin) / maxLength;
          var scaleY = _canvasSize.height / totalHeight;
          _fontSize = _drawFontsize * Math.min(1, scaleX, scaleY) | 0;
          _fontDesc = this._getFontDesc();
          _context.font = _fontDesc;
        }
      }
    }
  };
  _exports.ttfUtils = ttfUtils;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,